
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  08009fb8  08009fb8  00019fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa9c  0800aa9c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa9c  0800aa9c  0001aa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaa4  0800aaa4  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaa4  0800aaa4  0001aaa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaa8  0800aaa8  0001aaa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800aaac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000200  0800aca8  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  0800aca8  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e34  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c0  00000000  00000000  00038060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0003b420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  0003c770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027972  00000000  00000000  0003d968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017134  00000000  00000000  000652da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddd6d  00000000  00000000  0007c40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a17b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006364  00000000  00000000  0015a1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f9c 	.word	0x08009f9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08009f9c 	.word	0x08009f9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB8   ------> S_TIM16_CH1
*/
void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	4b4e      	ldr	r3, [pc, #312]	; (800103c <MX_GPIO_Init+0x150>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a4d      	ldr	r2, [pc, #308]	; (800103c <MX_GPIO_Init+0x150>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b4b      	ldr	r3, [pc, #300]	; (800103c <MX_GPIO_Init+0x150>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	4b48      	ldr	r3, [pc, #288]	; (800103c <MX_GPIO_Init+0x150>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a47      	ldr	r2, [pc, #284]	; (800103c <MX_GPIO_Init+0x150>)
 8000f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b45      	ldr	r3, [pc, #276]	; (800103c <MX_GPIO_Init+0x150>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b42      	ldr	r3, [pc, #264]	; (800103c <MX_GPIO_Init+0x150>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a41      	ldr	r2, [pc, #260]	; (800103c <MX_GPIO_Init+0x150>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b3f      	ldr	r3, [pc, #252]	; (800103c <MX_GPIO_Init+0x150>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	4b3c      	ldr	r3, [pc, #240]	; (800103c <MX_GPIO_Init+0x150>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a3b      	ldr	r2, [pc, #236]	; (800103c <MX_GPIO_Init+0x150>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b39      	ldr	r3, [pc, #228]	; (800103c <MX_GPIO_Init+0x150>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000f62:	2200      	movs	r2, #0
 8000f64:	f248 11b0 	movw	r1, #33200	; 0x81b0
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6c:	f002 f9d2 	bl	8003314 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	4832      	ldr	r0, [pc, #200]	; (8001040 <MX_GPIO_Init+0x154>)
 8000f76:	f002 f9cd 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2160      	movs	r1, #96	; 0x60
 8000f7e:	4831      	ldr	r0, [pc, #196]	; (8001044 <MX_GPIO_Init+0x158>)
 8000f80:	f002 f9c8 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4829      	ldr	r0, [pc, #164]	; (8001040 <MX_GPIO_Init+0x154>)
 8000f9c:	f002 f840 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000fa0:	f248 13b0 	movw	r3, #33200	; 0x81b0
 8000fa4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbc:	f002 f830 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000fc0:	2340      	movs	r3, #64	; 0x40
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f002 f823 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4813      	ldr	r0, [pc, #76]	; (8001040 <MX_GPIO_Init+0x154>)
 8000ff2:	f002 f815 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 8000ff6:	2360      	movs	r3, #96	; 0x60
 8000ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <MX_GPIO_Init+0x158>)
 800100e:	f002 f807 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001024:	230e      	movs	r3, #14
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_GPIO_Init+0x158>)
 8001030:	f001 fff6 	bl	8003020 <HAL_GPIO_Init>

}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000
 8001040:	48000800 	.word	0x48000800
 8001044:	48000400 	.word	0x48000400

08001048 <_ZN3PinC1Ev>:
    uint16_t pin;
    bool valid;
    TIM_HandleTypeDef* p_tim;
    unsigned int channel;

    Pin() : port(nullptr), pin(0), valid(false), p_tim(nullptr), channel(0) {}
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	809a      	strh	r2, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	719a      	strb	r2, [r3, #6]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_ZN3PinC1EP12GPIO_TypeDeft>:
    Pin(GPIO_TypeDef* p, uint16_t pn) : port(p), pin(pn), valid(true), p_tim(nullptr), channel(0) {} // no timer
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	4613      	mov	r3, r2
 8001088:	80fb      	strh	r3, [r7, #6]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	88fa      	ldrh	r2, [r7, #6]
 8001094:	809a      	strh	r2, [r3, #4]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2201      	movs	r2, #1
 800109a:	719a      	strb	r2, [r3, #6]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>:
    Pin(GPIO_TypeDef* p, uint16_t pn, TIM_HandleTypeDef* t, unsigned int c) : port(p), pin(pn), valid(true), p_tim(t), channel(c) {}
 80010b6:	b480      	push	{r7}
 80010b8:	b085      	sub	sp, #20
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	4613      	mov	r3, r2
 80010c4:	80fb      	strh	r3, [r7, #6]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	88fa      	ldrh	r2, [r7, #6]
 80010d0:	809a      	strh	r2, [r3, #4]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2201      	movs	r2, #1
 80010d6:	719a      	strb	r2, [r3, #6]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <_Z5printPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff f867 	bl	80001d0 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <_Z5printPKc+0x2c>)
 800110e:	f004 ff9b 	bl	8006048 <HAL_UART_Transmit>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200003f8 	.word	0x200003f8

08001124 <printf>:
int printf(const char* s, ...){
 8001124:	b40f      	push	{r0, r1, r2, r3}
 8001126:	b580      	push	{r7, lr}
 8001128:	b0c2      	sub	sp, #264	; 0x108
 800112a:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 800112c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001134:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001138:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 800113a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800113e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001142:	f107 0008 	add.w	r0, r7, #8
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800114c:	f006 fdc6 	bl	8007cdc <vsiprintf>
	perror(buffer);
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	4618      	mov	r0, r3
 8001156:	f006 fb67 	bl	8007828 <perror>
	print(buffer);
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ffc8 	bl	80010f4 <_Z5printPKc>
	va_end(args);
//	#endif
	return strlen(buffer);
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f831 	bl	80001d0 <strlen>
 800116e:	4603      	mov	r3, r0
}
 8001170:	4618      	mov	r0, r3
 8001172:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001176:	46bd      	mov	sp, r7
 8001178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800117c:	b004      	add	sp, #16
 800117e:	4770      	bx	lr

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b0fe      	sub	sp, #504	; 0x1f8
 8001184:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001186:	f001 fdc5 	bl	8002d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118a:	f000 f8f7 	bl	800137c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118e:	f7ff fead 	bl	8000eec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001192:	f000 fdb7 	bl	8001d04 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001196:	f000 f957 	bl	8001448 <MX_SPI1_Init>
  MX_SPI2_Init();
 800119a:	f000 f993 	bl	80014c4 <MX_SPI2_Init>
  MX_SPI3_Init();
 800119e:	f000 f9cf 	bl	8001540 <MX_SPI3_Init>
  MX_TIM1_Init();
 80011a2:	f000 fbdb 	bl	800195c <MX_TIM1_Init>
  MX_TIM2_Init();
 80011a6:	f000 fc85 	bl	8001ab4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderData_1 = 99;
 80011aa:	2363      	movs	r3, #99	; 0x63
 80011ac:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
  uint16_t encoderData_2 = 99;
 80011b0:	2363      	movs	r3, #99	; 0x63
 80011b2:	f8a7 31b4 	strh.w	r3, [r7, #436]	; 0x1b4
  uint16_t encoderData_3 = 99;
 80011b6:	2363      	movs	r3, #99	; 0x63
 80011b8:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
  uint16_t encoder_max = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8a7 31b0 	strh.w	r3, [r7, #432]	; 0x1b0
  uint16_t encoder_min = 4100;
 80011c2:	f241 0304 	movw	r3, #4100	; 0x1004
 80011c6:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
  HAL_TIM_Base_Start(&htim1);
 80011ca:	485f      	ldr	r0, [pc, #380]	; (8001348 <main+0x1c8>)
 80011cc:	f003 ff04 	bl	8004fd8 <HAL_TIM_Base_Start>


    /*---CYTRON setup---*/
    Pin CYTRON_DIR_1(CYTRON_DIR_1_GPIO_Port, CYTRON_DIR_1_Pin);
 80011d0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80011d4:	2220      	movs	r2, #32
 80011d6:	495d      	ldr	r1, [pc, #372]	; (800134c <main+0x1cc>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff4f 	bl	800107c <_ZN3PinC1EP12GPIO_TypeDeft>
    Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin, &htim2, TIM_CHANNEL_2);
 80011de:	f507 70b6 	add.w	r0, r7, #364	; 0x16c
 80011e2:	2304      	movs	r3, #4
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	4b5a      	ldr	r3, [pc, #360]	; (8001350 <main+0x1d0>)
 80011e8:	2208      	movs	r2, #8
 80011ea:	4958      	ldr	r1, [pc, #352]	; (800134c <main+0x1cc>)
 80011ec:	f7ff ff63 	bl	80010b6 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>
    Pin AMT22_1(GPIOC, GPIO_PIN_7);
 80011f0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	4957      	ldr	r1, [pc, #348]	; (8001354 <main+0x1d4>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff3f 	bl	800107c <_ZN3PinC1EP12GPIO_TypeDeft>

    int32_t  CH2_DC = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001204:	2104      	movs	r1, #4
 8001206:	4852      	ldr	r0, [pc, #328]	; (8001350 <main+0x1d0>)
 8001208:	f003 ff94 	bl	8005134 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800120c:	4b50      	ldr	r3, [pc, #320]	; (8001350 <main+0x1d0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2200      	movs	r2, #0
 8001212:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(10);
 8001214:	200a      	movs	r0, #10
 8001216:	f001 fdf9 	bl	8002e0c <HAL_Delay>
    RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);
 800121a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff12 	bl	8001048 <_ZN3PinC1Ev>
 8001224:	463d      	mov	r5, r7
 8001226:	ac0b      	add	r4, sp, #44	; 0x2c
 8001228:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800122c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800122e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001232:	2300      	movs	r3, #0
 8001234:	930a      	str	r3, [sp, #40]	; 0x28
 8001236:	ac06      	add	r4, sp, #24
 8001238:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800123c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800123e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001242:	ac02      	add	r4, sp, #8
 8001244:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800124a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800124e:	466a      	mov	r2, sp
 8001250:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001254:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001258:	e882 0003 	stmia.w	r2, {r0, r1}
 800125c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001260:	cb0c      	ldmia	r3, {r2, r3}
 8001262:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8001338 <main+0x1b8>
 8001266:	ed9f 0b36 	vldr	d0, [pc, #216]	; 8001340 <main+0x1c0>
 800126a:	493b      	ldr	r1, [pc, #236]	; (8001358 <main+0x1d8>)
 800126c:	4628      	mov	r0, r5
 800126e:	f000 fe14 	bl	8001e9a <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>
    Wrist_Roll.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
 8001272:	4b3a      	ldr	r3, [pc, #232]	; (800135c <main+0x1dc>)
 8001274:	ed93 7b00 	vldr	d7, [r3]
 8001278:	4b39      	ldr	r3, [pc, #228]	; (8001360 <main+0x1e0>)
 800127a:	ed93 6b00 	vldr	d6, [r3]
 800127e:	4b39      	ldr	r3, [pc, #228]	; (8001364 <main+0x1e4>)
 8001280:	ed93 2b00 	vldr	d2, [r3]
 8001284:	4b38      	ldr	r3, [pc, #224]	; (8001368 <main+0x1e8>)
 8001286:	ed93 3b00 	vldr	d3, [r3]
 800128a:	4b38      	ldr	r3, [pc, #224]	; (800136c <main+0x1ec>)
 800128c:	ed93 4b00 	vldr	d4, [r3]
 8001290:	4b37      	ldr	r3, [pc, #220]	; (8001370 <main+0x1f0>)
 8001292:	ed93 5b00 	vldr	d5, [r3]
 8001296:	463b      	mov	r3, r7
 8001298:	eeb0 1a46 	vmov.f32	s2, s12
 800129c:	eef0 1a66 	vmov.f32	s3, s13
 80012a0:	eeb0 0a47 	vmov.f32	s0, s14
 80012a4:	eef0 0a67 	vmov.f32	s1, s15
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fe7d 	bl	8001fa8 <_ZN13RoverArmMotor5beginEdddddd>
    double current_angle = 0;
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
    // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 70);



  /*---AMT22 setup---*/
  resetAMT22(&hspi1, GPIOC, GPIO_PIN_7, &htim1);
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <main+0x1c8>)
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	4925      	ldr	r1, [pc, #148]	; (8001354 <main+0x1d4>)
 80012c0:	4825      	ldr	r0, [pc, #148]	; (8001358 <main+0x1d8>)
 80012c2:	f005 fc2c 	bl	8006b1e <resetAMT22>

  /*---ESC setup---*/
  int32_t  CH2_ESC = 1500-1;
 80012c6:	f240 53db 	movw	r3, #1499	; 0x5db
 80012ca:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80012ce:	2104      	movs	r1, #4
 80012d0:	481d      	ldr	r0, [pc, #116]	; (8001348 <main+0x1c8>)
 80012d2:	f003 ff2f 	bl	8005134 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 80012d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012da:	f001 fd97 	bl	8002e0c <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500-1);
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <main+0x1c8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f240 52db 	movw	r2, #1499	; 0x5db
 80012e6:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(500);
 80012e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ec:	f001 fd8e 	bl	8002e0c <HAL_Delay>
//  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1570-1);
//  HAL_Delay(500);
//  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1600-1);
//  HAL_Delay(500);

   current_angle = Wrist_Roll.get_current_angle();
 80012f0:	463b      	mov	r3, r7
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 f8fe 	bl	80024f4 <_ZN13RoverArmMotor17get_current_angleEv>
 80012f8:	ed87 0b68 	vstr	d0, [r7, #416]	; 0x1a0
   printf("current angle is %f\r\n, current_angle");
 80012fc:	481d      	ldr	r0, [pc, #116]	; (8001374 <main+0x1f4>)
 80012fe:	f7ff ff11 	bl	8001124 <printf>
   Wrist_Roll.newSetpoint(current_angle + 100);
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <main+0x1f8>)
 8001308:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800130c:	f7fe ffbe 	bl	800028c <__adddf3>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	ec43 2b17 	vmov	d7, r2, r3
 8001318:	463b      	mov	r3, r7
 800131a:	eeb0 0a47 	vmov.f32	s0, s14
 800131e:	eef0 0a67 	vmov.f32	s1, s15
 8001322:	4618      	mov	r0, r3
 8001324:	f001 f84a 	bl	80023bc <_ZN13RoverArmMotor11newSetpointEd>
    // printf("current angle is %f\r\n, current_angle");
    // HAL_Delay(50);
    // Wrist_Roll.newSetpoint(current_angle + 10);
    // current_angle = Wrist_Roll.get_current_angle();
    // printf("current angle is %f\r\n, current_angle");
    Wrist_Roll.tick();
 8001328:	463b      	mov	r3, r7
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fee4 	bl	80020f8 <_ZN13RoverArmMotor4tickEv>
    HAL_Delay(1); // safety delay
 8001330:	2001      	movs	r0, #1
 8001332:	f001 fd6b 	bl	8002e0c <HAL_Delay>
    Wrist_Roll.tick();
 8001336:	e7f7      	b.n	8001328 <main+0x1a8>
 8001338:	00000000 	.word	0x00000000
 800133c:	40767000 	.word	0x40767000
	...
 8001348:	20000360 	.word	0x20000360
 800134c:	48000400 	.word	0x48000400
 8001350:	200003ac 	.word	0x200003ac
 8001354:	48000800 	.word	0x48000800
 8001358:	20000230 	.word	0x20000230
 800135c:	20000000 	.word	0x20000000
 8001360:	20000008 	.word	0x20000008
 8001364:	20000220 	.word	0x20000220
 8001368:	20000010 	.word	0x20000010
 800136c:	20000018 	.word	0x20000018
 8001370:	20000228 	.word	0x20000228
 8001374:	08009fb8 	.word	0x08009fb8
 8001378:	40590000 	.word	0x40590000

0800137c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b096      	sub	sp, #88	; 0x58
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2244      	movs	r2, #68	; 0x44
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f005 fc60 	bl	8006c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800139e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013a2:	f001 ffdd 	bl	8003360 <HAL_PWREx_ControlVoltageScaling>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf14      	ite	ne
 80013ac:	2301      	movne	r3, #1
 80013ae:	2300      	moveq	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80013b6:	f000 f841 	bl	800143c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ba:	2302      	movs	r3, #2
 80013bc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c4:	2310      	movs	r3, #16
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c8:	2302      	movs	r3, #2
 80013ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013cc:	2302      	movs	r3, #2
 80013ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013d4:	230a      	movs	r3, #10
 80013d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013d8:	2307      	movs	r3, #7
 80013da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013dc:	2302      	movs	r3, #2
 80013de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 f80f 	bl	800340c <HAL_RCC_OscConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf14      	ite	ne
 80013f4:	2301      	movne	r3, #1
 80013f6:	2300      	moveq	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 80013fe:	f000 f81d 	bl	800143c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001402:	230f      	movs	r3, #15
 8001404:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001406:	2303      	movs	r3, #3
 8001408:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	2104      	movs	r1, #4
 800141a:	4618      	mov	r0, r3
 800141c:	f002 fc0a 	bl	8003c34 <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	bf14      	ite	ne
 8001426:	2301      	movne	r3, #1
 8001428:	2300      	moveq	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8001430:	f000 f804 	bl	800143c <Error_Handler>
  }
}
 8001434:	bf00      	nop
 8001436:	3758      	adds	r7, #88	; 0x58
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
}
 8001442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001444:	e7fe      	b.n	8001444 <Error_Handler+0x8>
	...

08001448 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <MX_SPI1_Init+0x74>)
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <MX_SPI1_Init+0x78>)
 8001450:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_SPI1_Init+0x74>)
 8001454:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001458:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_SPI1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_SPI1_Init+0x74>)
 8001462:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001466:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_SPI1_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <MX_SPI1_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_SPI1_Init+0x74>)
 8001476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_SPI1_Init+0x74>)
 800147e:	2220      	movs	r2, #32
 8001480:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_SPI1_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_SPI1_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_SPI1_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_SPI1_Init+0x74>)
 8001496:	2207      	movs	r2, #7
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_SPI1_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_SPI1_Init+0x74>)
 80014a2:	2208      	movs	r2, #8
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_SPI1_Init+0x74>)
 80014a8:	f003 f924 	bl	80046f4 <HAL_SPI_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014b2:	f7ff ffc3 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000230 	.word	0x20000230
 80014c0:	40013000 	.word	0x40013000

080014c4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_SPI2_Init+0x74>)
 80014ca:	4a1c      	ldr	r2, [pc, #112]	; (800153c <MX_SPI2_Init+0x78>)
 80014cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_SPI2_Init+0x74>)
 80014d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <MX_SPI2_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_SPI2_Init+0x74>)
 80014de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_SPI2_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <MX_SPI2_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_SPI2_Init+0x74>)
 80014f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_SPI2_Init+0x74>)
 80014fa:	2220      	movs	r2, #32
 80014fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_SPI2_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_SPI2_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_SPI2_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_SPI2_Init+0x74>)
 8001512:	2207      	movs	r2, #7
 8001514:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_SPI2_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_SPI2_Init+0x74>)
 800151e:	2208      	movs	r2, #8
 8001520:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_SPI2_Init+0x74>)
 8001524:	f003 f8e6 	bl	80046f4 <HAL_SPI_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800152e:	f7ff ff85 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000294 	.word	0x20000294
 800153c:	40003800 	.word	0x40003800

08001540 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <MX_SPI3_Init+0x74>)
 8001546:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <MX_SPI3_Init+0x78>)
 8001548:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_SPI3_Init+0x74>)
 800154c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001550:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MX_SPI3_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_SPI3_Init+0x74>)
 800155a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800155e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_SPI3_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_SPI3_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_SPI3_Init+0x74>)
 800156e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001572:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_SPI3_Init+0x74>)
 8001576:	2220      	movs	r2, #32
 8001578:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_SPI3_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_SPI3_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_SPI3_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_SPI3_Init+0x74>)
 800158e:	2207      	movs	r2, #7
 8001590:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_SPI3_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_SPI3_Init+0x74>)
 800159a:	2208      	movs	r2, #8
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_SPI3_Init+0x74>)
 80015a0:	f003 f8a8 	bl	80046f4 <HAL_SPI_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80015aa:	f7ff ff47 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002f8 	.word	0x200002f8
 80015b8:	40003c00 	.word	0x40003c00

080015bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08e      	sub	sp, #56	; 0x38
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a47      	ldr	r2, [pc, #284]	; (80016f8 <HAL_SPI_MspInit+0x13c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d12a      	bne.n	8001634 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015de:	4b47      	ldr	r3, [pc, #284]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e2:	4a46      	ldr	r2, [pc, #280]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80015e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e8:	6613      	str	r3, [r2, #96]	; 0x60
 80015ea:	4b44      	ldr	r3, [pc, #272]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f2:	623b      	str	r3, [r7, #32]
 80015f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b41      	ldr	r3, [pc, #260]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	4a40      	ldr	r2, [pc, #256]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001602:	4b3e      	ldr	r3, [pc, #248]	; (80016fc <HAL_SPI_MspInit+0x140>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800160e:	f641 0302 	movw	r3, #6146	; 0x1802
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001620:	2305      	movs	r3, #5
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f001 fcf7 	bl	8003020 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001632:	e05c      	b.n	80016ee <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a31      	ldr	r2, [pc, #196]	; (8001700 <HAL_SPI_MspInit+0x144>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d129      	bne.n	8001692 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800163e:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <HAL_SPI_MspInit+0x140>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	4a2e      	ldr	r2, [pc, #184]	; (80016fc <HAL_SPI_MspInit+0x140>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001648:	6593      	str	r3, [r2, #88]	; 0x58
 800164a:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <HAL_SPI_MspInit+0x140>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b29      	ldr	r3, [pc, #164]	; (80016fc <HAL_SPI_MspInit+0x140>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4a28      	ldr	r2, [pc, #160]	; (80016fc <HAL_SPI_MspInit+0x140>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <HAL_SPI_MspInit+0x140>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800166e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001680:	2305      	movs	r3, #5
 8001682:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001688:	4619      	mov	r1, r3
 800168a:	481e      	ldr	r0, [pc, #120]	; (8001704 <HAL_SPI_MspInit+0x148>)
 800168c:	f001 fcc8 	bl	8003020 <HAL_GPIO_Init>
}
 8001690:	e02d      	b.n	80016ee <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI3)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <HAL_SPI_MspInit+0x14c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d128      	bne.n	80016ee <HAL_SPI_MspInit+0x132>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_SPI_MspInit+0x140>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	4a16      	ldr	r2, [pc, #88]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80016a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016a6:	6593      	str	r3, [r2, #88]	; 0x58
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	4a10      	ldr	r2, [pc, #64]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80016cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016de:	2306      	movs	r3, #6
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e6:	4619      	mov	r1, r3
 80016e8:	4808      	ldr	r0, [pc, #32]	; (800170c <HAL_SPI_MspInit+0x150>)
 80016ea:	f001 fc99 	bl	8003020 <HAL_GPIO_Init>
}
 80016ee:	bf00      	nop
 80016f0:	3738      	adds	r7, #56	; 0x38
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40013000 	.word	0x40013000
 80016fc:	40021000 	.word	0x40021000
 8001700:	40003800 	.word	0x40003800
 8001704:	48000400 	.word	0x48000400
 8001708:	40003c00 	.word	0x40003c00
 800170c:	48000800 	.word	0x48000800

08001710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <HAL_MspInit+0x44>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171a:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <HAL_MspInit+0x44>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6613      	str	r3, [r2, #96]	; 0x60
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <HAL_MspInit+0x44>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_MspInit+0x44>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	4a08      	ldr	r2, [pc, #32]	; (8001754 <HAL_MspInit+0x44>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	6593      	str	r3, [r2, #88]	; 0x58
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_MspInit+0x44>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800175c:	e7fe      	b.n	800175c <NMI_Handler+0x4>

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a4:	f001 fb12 	bl	8002dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return 1;
 80017b0:	2301      	movs	r3, #1
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_kill>:

int _kill(int pid, int sig)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017c6:	f005 fa11 	bl	8006bec <__errno>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2216      	movs	r2, #22
 80017ce:	601a      	str	r2, [r3, #0]
  return -1;
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_exit>:

void _exit (int status)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ffe7 	bl	80017bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ee:	e7fe      	b.n	80017ee <_exit+0x12>

080017f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	e00a      	b.n	8001818 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001802:	f3af 8000 	nop.w
 8001806:	4601      	mov	r1, r0
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	60ba      	str	r2, [r7, #8]
 800180e:	b2ca      	uxtb	r2, r1
 8001810:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	dbf0      	blt.n	8001802 <_read+0x12>
  }

  return len;
 8001820:	687b      	ldr	r3, [r7, #4]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	e009      	b.n	8001850 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	60ba      	str	r2, [r7, #8]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3301      	adds	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	dbf1      	blt.n	800183c <_write+0x12>
  }
  return len;
 8001858:	687b      	ldr	r3, [r7, #4]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_close>:

int _close(int file)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188a:	605a      	str	r2, [r3, #4]
  return 0;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_isatty>:

int _isatty(int file)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f005 f976 	bl	8006bec <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20010000 	.word	0x20010000
 800192c:	00000400 	.word	0x00000400
 8001930:	2000035c 	.word	0x2000035c
 8001934:	20000498 	.word	0x20000498

08001938 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <SystemInit+0x20>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <SystemInit+0x20>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b09a      	sub	sp, #104	; 0x68
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001962:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001970:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800197c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
 800198c:	615a      	str	r2, [r3, #20]
 800198e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	222c      	movs	r2, #44	; 0x2c
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f005 f95a 	bl	8006c50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800199c:	4b43      	ldr	r3, [pc, #268]	; (8001aac <MX_TIM1_Init+0x150>)
 800199e:	4a44      	ldr	r2, [pc, #272]	; (8001ab0 <MX_TIM1_Init+0x154>)
 80019a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80019a2:	4b42      	ldr	r3, [pc, #264]	; (8001aac <MX_TIM1_Init+0x150>)
 80019a4:	224f      	movs	r2, #79	; 0x4f
 80019a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a8:	4b40      	ldr	r3, [pc, #256]	; (8001aac <MX_TIM1_Init+0x150>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500-1;
 80019ae:	4b3f      	ldr	r3, [pc, #252]	; (8001aac <MX_TIM1_Init+0x150>)
 80019b0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80019b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <MX_TIM1_Init+0x150>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019bc:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <MX_TIM1_Init+0x150>)
 80019be:	2200      	movs	r2, #0
 80019c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c2:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <MX_TIM1_Init+0x150>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019c8:	4838      	ldr	r0, [pc, #224]	; (8001aac <MX_TIM1_Init+0x150>)
 80019ca:	f003 faad 	bl	8004f28 <HAL_TIM_Base_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019d4:	f7ff fd32 	bl	800143c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019dc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019e2:	4619      	mov	r1, r3
 80019e4:	4831      	ldr	r0, [pc, #196]	; (8001aac <MX_TIM1_Init+0x150>)
 80019e6:	f003 fd97 	bl	8005518 <HAL_TIM_ConfigClockSource>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019f0:	f7ff fd24 	bl	800143c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019f4:	482d      	ldr	r0, [pc, #180]	; (8001aac <MX_TIM1_Init+0x150>)
 80019f6:	f003 fb3b 	bl	8005070 <HAL_TIM_PWM_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a00:	f7ff fd1c 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a14:	4619      	mov	r1, r3
 8001a16:	4825      	ldr	r0, [pc, #148]	; (8001aac <MX_TIM1_Init+0x150>)
 8001a18:	f004 f9ea 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a22:	f7ff fd0b 	bl	800143c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a26:	2360      	movs	r3, #96	; 0x60
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a32:	2300      	movs	r3, #0
 8001a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a46:	2204      	movs	r2, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4818      	ldr	r0, [pc, #96]	; (8001aac <MX_TIM1_Init+0x150>)
 8001a4c:	f003 fc50 	bl	80052f0 <HAL_TIM_PWM_ConfigChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001a56:	f7ff fcf1 	bl	800143c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <MX_TIM1_Init+0x150>)
 8001a90:	f004 fa14 	bl	8005ebc <HAL_TIMEx_ConfigBreakDeadTime>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001a9a:	f7ff fccf 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <MX_TIM1_Init+0x150>)
 8001aa0:	f000 f8d4 	bl	8001c4c <HAL_TIM_MspPostInit>

}
 8001aa4:	bf00      	nop
 8001aa6:	3768      	adds	r7, #104	; 0x68
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000360 	.word	0x20000360
 8001ab0:	40012c00 	.word	0x40012c00

08001ab4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	; 0x38
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	615a      	str	r2, [r3, #20]
 8001ae4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <MX_TIM2_Init+0xe8>)
 8001ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <MX_TIM2_Init+0xe8>)
 8001af0:	224f      	movs	r2, #79	; 0x4f
 8001af2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <MX_TIM2_Init+0xe8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <MX_TIM2_Init+0xe8>)
 8001afc:	2263      	movs	r2, #99	; 0x63
 8001afe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b00:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <MX_TIM2_Init+0xe8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b06:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <MX_TIM2_Init+0xe8>)
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b0c:	4823      	ldr	r0, [pc, #140]	; (8001b9c <MX_TIM2_Init+0xe8>)
 8001b0e:	f003 fa0b 	bl	8004f28 <HAL_TIM_Base_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001b18:	f7ff fc90 	bl	800143c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b26:	4619      	mov	r1, r3
 8001b28:	481c      	ldr	r0, [pc, #112]	; (8001b9c <MX_TIM2_Init+0xe8>)
 8001b2a:	f003 fcf5 	bl	8005518 <HAL_TIM_ConfigClockSource>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001b34:	f7ff fc82 	bl	800143c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b38:	4818      	ldr	r0, [pc, #96]	; (8001b9c <MX_TIM2_Init+0xe8>)
 8001b3a:	f003 fa99 	bl	8005070 <HAL_TIM_PWM_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001b44:	f7ff fc7a 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	4619      	mov	r1, r3
 8001b56:	4811      	ldr	r0, [pc, #68]	; (8001b9c <MX_TIM2_Init+0xe8>)
 8001b58:	f004 f94a 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001b62:	f7ff fc6b 	bl	800143c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b66:	2360      	movs	r3, #96	; 0x60
 8001b68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b76:	463b      	mov	r3, r7
 8001b78:	2204      	movs	r2, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4807      	ldr	r0, [pc, #28]	; (8001b9c <MX_TIM2_Init+0xe8>)
 8001b7e:	f003 fbb7 	bl	80052f0 <HAL_TIM_PWM_ConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001b88:	f7ff fc58 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <MX_TIM2_Init+0xe8>)
 8001b8e:	f000 f85d 	bl	8001c4c <HAL_TIM_MspPostInit>

}
 8001b92:	bf00      	nop
 8001b94:	3738      	adds	r7, #56	; 0x38
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200003ac 	.word	0x200003ac

08001ba0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <HAL_TIM_Base_MspInit+0xa0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10c      	bne.n	8001bdc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_TIM_Base_MspInit+0xa4>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <HAL_TIM_Base_MspInit+0xa4>)
 8001bc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bcc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_TIM_Base_MspInit+0xa4>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bda:	e02d      	b.n	8001c38 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be4:	d128      	bne.n	8001c38 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_TIM_Base_MspInit+0xa4>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	4a16      	ldr	r2, [pc, #88]	; (8001c44 <HAL_TIM_Base_MspInit+0xa4>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <HAL_TIM_Base_MspInit+0xa4>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_TIM_Base_MspInit+0xa4>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <HAL_TIM_Base_MspInit+0xa4>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_TIM_Base_MspInit+0xa4>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <HAL_TIM_Base_MspInit+0xa8>)
 8001c34:	f001 f9f4 	bl	8003020 <HAL_GPIO_Init>
}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40012c00 	.word	0x40012c00
 8001c44:	40021000 	.word	0x40021000
 8001c48:	48000400 	.word	0x48000400

08001c4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a23      	ldr	r2, [pc, #140]	; (8001cf8 <HAL_TIM_MspPostInit+0xac>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d11e      	bne.n	8001cac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <HAL_TIM_MspPostInit+0xb0>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	4a22      	ldr	r2, [pc, #136]	; (8001cfc <HAL_TIM_MspPostInit+0xb0>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7a:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <HAL_TIM_MspPostInit+0xb0>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 8001c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca6:	f001 f9bb 	bl	8003020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001caa:	e020      	b.n	8001cee <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb4:	d11b      	bne.n	8001cee <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_TIM_MspPostInit+0xb0>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <HAL_TIM_MspPostInit+0xb0>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_TIM_MspPostInit+0xb0>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 8001cce:	2308      	movs	r3, #8
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <HAL_TIM_MspPostInit+0xb4>)
 8001cea:	f001 f999 	bl	8003020 <HAL_GPIO_Init>
}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	; 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40012c00 	.word	0x40012c00
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	48000400 	.word	0x48000400

08001d04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d0a:	4a15      	ldr	r2, [pc, #84]	; (8001d60 <MX_USART2_UART_Init+0x5c>)
 8001d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d48:	f004 f930 	bl	8005fac <HAL_UART_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d52:	f7ff fb73 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200003f8 	.word	0x200003f8
 8001d60:	40004400 	.word	0x40004400

08001d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b0a2      	sub	sp, #136	; 0x88
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	2260      	movs	r2, #96	; 0x60
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f004 ff63 	bl	8006c50 <memset>
  if(uartHandle->Instance==USART2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <HAL_UART_MspInit+0xac>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d138      	bne.n	8001e06 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d94:	2302      	movs	r3, #2
 8001d96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 f96b 	bl	800407c <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dac:	f7ff fb46 	bl	800143c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_UART_MspInit+0xb0>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <HAL_UART_MspInit+0xb0>)
 8001db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dba:	6593      	str	r3, [r2, #88]	; 0x58
 8001dbc:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_UART_MspInit+0xb0>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_UART_MspInit+0xb0>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <HAL_UART_MspInit+0xb0>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_UART_MspInit+0xb0>)
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001de0:	230c      	movs	r3, #12
 8001de2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df2:	2307      	movs	r3, #7
 8001df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e02:	f001 f90d 	bl	8003020 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e06:	bf00      	nop
 8001e08:	3788      	adds	r7, #136	; 0x88
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40004400 	.word	0x40004400
 8001e14:	40021000 	.word	0x40021000

08001e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e1c:	f7ff fd8c 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e20:	480c      	ldr	r0, [pc, #48]	; (8001e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e22:	490d      	ldr	r1, [pc, #52]	; (8001e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <LoopForever+0xe>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e38:	4c0a      	ldr	r4, [pc, #40]	; (8001e64 <LoopForever+0x16>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e46:	f004 fed7 	bl	8006bf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e4a:	f7ff f999 	bl	8001180 <main>

08001e4e <LoopForever>:

LoopForever:
    b LoopForever
 8001e4e:	e7fe      	b.n	8001e4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e50:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e58:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001e5c:	0800aaac 	.word	0x0800aaac
  ldr r2, =_sbss
 8001e60:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001e64:	20000494 	.word	0x20000494

08001e68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC1_IRQHandler>

08001e6a <_ZN9movingAvgC1Ei>:
#define MOVINGAVG_H_INCLUDED

class movingAvg
{
    public:
        movingAvg(int interval)
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
            : m_interval{interval}, m_nbrReadings{0}, m_sum{0}, m_next{0} {}
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>:

// TODO: Test this class with the old code, remember to create backup beforehand!
// I'm very suspicious of the way I handled user defined pointers...

// The motor will not move until begin() is called!
RoverArmMotor::RoverArmMotor(SPI_HandleTypeDef* spi_handle, Pin pwm_pin, Pin dir_pin, Pin encoder_pin, int esc_type, double minimum_angle, double maximum_angle, Pin brake_pin)
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	6178      	str	r0, [r7, #20]
 8001ea4:	6139      	str	r1, [r7, #16]
 8001ea6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001eaa:	e881 000c 	stmia.w	r1, {r2, r3}
 8001eae:	ed87 0b02 	vstr	d0, [r7, #8]
 8001eb2:	ed87 1b00 	vstr	d1, [r7]
                :internalPIDInstance(&input, &output, &setpoint, regularKp, regularKi, regularKd, _PID_CD_DIRECT)
                ,internalAveragerInstance(15){
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8001edc:	2300      	movs	r3, #0
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	eeb0 2a45 	vmov.f32	s4, s10
 8001ee4:	eef0 2a65 	vmov.f32	s5, s11
 8001ee8:	eeb0 1a46 	vmov.f32	s2, s12
 8001eec:	eef0 1a66 	vmov.f32	s3, s13
 8001ef0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ef4:	eef0 0a67 	vmov.f32	s1, s15
 8001ef8:	4623      	mov	r3, r4
 8001efa:	f000 fc35 	bl	8002768 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3370      	adds	r3, #112	; 0x70
 8001f02:	210f      	movs	r1, #15
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ffb0 	bl	8001e6a <_ZN9movingAvgC1Ei>
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	33b8      	adds	r3, #184	; 0xb8
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f89a 	bl	8001048 <_ZN3PinC1Ev>
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	33c8      	adds	r3, #200	; 0xc8
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff f895 	bl	8001048 <_ZN3PinC1Ev>
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	33d8      	adds	r3, #216	; 0xd8
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff f890 	bl	8001048 <_ZN3PinC1Ev>
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	33e8      	adds	r3, #232	; 0xe8
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff f88b 	bl	8001048 <_ZN3PinC1Ev>

    //constructor
    spi = spi_handle;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    pwm = pwm_pin;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8001f40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    dir = dir_pin;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8001f50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    encoder = encoder_pin;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8001f60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    brake = brake_pin;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8001f70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    escType = esc_type;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f7e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    lowestAngle = minimum_angle;
 8001f82:	6979      	ldr	r1, [r7, #20]
 8001f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f88:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = maximum_angle;
 8001f8c:	6979      	ldr	r1, [r7, #20]
 8001f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f92:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
    
}
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001fa2:	b002      	add	sp, #8
 8001fa4:	4770      	bx	lr
	...

08001fa8 <_ZN13RoverArmMotor5beginEdddddd>:

void RoverArmMotor::begin(double aggP, double aggI, double aggD, double regP, double regI, double regD){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08e      	sub	sp, #56	; 0x38
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6378      	str	r0, [r7, #52]	; 0x34
 8001fb0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8001fb4:	ed87 1b08 	vstr	d1, [r7, #32]
 8001fb8:	ed87 2b06 	vstr	d2, [r7, #24]
 8001fbc:	ed87 3b04 	vstr	d3, [r7, #16]
 8001fc0:	ed87 4b02 	vstr	d4, [r7, #8]
 8001fc4:	ed87 5b00 	vstr	d5, [r7]
    /*------------------Initialize pins------------------*/ 
    // Initialize given pins
    // pinMode(encoder, INPUT); // not needed since we use HAL library
    // pinMode(pwm, OUTPUT);

    if(escType == CYTRON){
 8001fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fca:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d107      	bne.n	8001fe2 <_ZN13RoverArmMotor5beginEdddddd+0x3a>
        // pinMode(dir, OUTPUT); // not needed since we use HAL library

        // Allow negative outputs, the sign will be interpreted as
        // the direction pin
        internalPIDInstance.SetOutputLimits(0, 99); // PWM duty cycle mn297
 8001fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd4:	ed9f 1b40 	vldr	d1, [pc, #256]	; 80020d8 <_ZN13RoverArmMotor5beginEdddddd+0x130>
 8001fd8:	ed9f 0b41 	vldr	d0, [pc, #260]	; 80020e0 <_ZN13RoverArmMotor5beginEdddddd+0x138>
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fd28 	bl	8002a32 <_ZN3PID15SetOutputLimitsEdd>
    //     // internalServoInstance.attach(pwm);
    //     internalServoInstance.attach(pwm, 1100, 1900, 1500); // mn297
    // }
    
    // Initialize moving averager
    internalAveragerInstance.begin();
 8001fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe4:	3370      	adds	r3, #112	; 0x70
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fb05 	bl	80025f6 <_ZN9movingAvg5beginEv>

    // Set to auto
    internalPIDInstance.SetMode(_PID_MODE_AUTOMATIC);
 8001fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fd00 	bl	80029f6 <_ZN3PID7SetModeE15PIDMode_TypeDef>
    /*------------------Get setpoint------------------*/
    // Get current location and set it as setpoint. Essential to prevent jerkiness
    // as the microcontroller initializes.
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    //after setup, currentAngle is same as setpoint
    currentAngle = mapFloat((float) adcResult, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f);
 8001ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002004:	ed9f 2a38 	vldr	s4, [pc, #224]	; 80020e8 <_ZN13RoverArmMotor5beginEdddddd+0x140>
 8002008:	eddf 1a38 	vldr	s3, [pc, #224]	; 80020ec <_ZN13RoverArmMotor5beginEdddddd+0x144>
 800200c:	ed9f 1a38 	vldr	s2, [pc, #224]	; 80020f0 <_ZN13RoverArmMotor5beginEdddddd+0x148>
 8002010:	eddf 0a36 	vldr	s1, [pc, #216]	; 80020ec <_ZN13RoverArmMotor5beginEdddddd+0x144>
 8002014:	eeb0 0a67 	vmov.f32	s0, s15
 8002018:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800201a:	f000 fab1 	bl	8002580 <_ZN13RoverArmMotor8mapFloatEfffff>
 800201e:	eeb0 7a40 	vmov.f32	s14, s0
 8002022:	eef0 7a60 	vmov.f32	s15, s1
 8002026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002028:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    setpoint = currentAngle;
 800202c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202e:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8002032:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002034:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140



    /*------------------Set PID parameters------------------*/
    regularKp = regP;
 8002038:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800203a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800203e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    regularKi = regI;
 8002042:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002048:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    regularKd = regD;
 800204c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800204e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002052:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    aggressiveKp = aggP;
 8002056:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002058:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800205c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    aggressiveKi = aggI;
 8002060:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002066:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    aggressiveKd = aggD;
 800206a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800206c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002070:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

    internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 8002074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002078:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800207c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207e:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002084:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8002088:	eeb0 2a45 	vmov.f32	s4, s10
 800208c:	eef0 2a65 	vmov.f32	s5, s11
 8002090:	eeb0 1a46 	vmov.f32	s2, s12
 8002094:	eef0 1a66 	vmov.f32	s3, s13
 8002098:	eeb0 0a47 	vmov.f32	s0, s14
 800209c:	eef0 0a67 	vmov.f32	s1, s15
 80020a0:	4610      	mov	r0, r2
 80020a2:	f000 fd34 	bl	8002b0e <_ZN3PID10SetTuningsEddd>
    // if(brake)  engageBrake(); //use brake if there is one
    if (brake.valid != 0)  engageBrake(); //use brake if there is one
 80020a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a8:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <_ZN13RoverArmMotor5beginEdddddd+0x10e>
 80020b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020b2:	f000 f9b4 	bl	800241e <_ZN13RoverArmMotor11engageBrakeEv>

    //initialize the multiplier bool to false and the multiplier to 1. 
    wrist_waist = false; 
 80020b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    //multiplier = 1;
    gearRatio = 1;  //TODO check if this is correct
 80020be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <_ZN13RoverArmMotor5beginEdddddd+0x14c>)
 80020c6:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150

}
 80020ca:	bf00      	nop
 80020cc:	3738      	adds	r7, #56	; 0x38
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	f3af 8000 	nop.w
 80020d8:	00000000 	.word	0x00000000
 80020dc:	4058c000 	.word	0x4058c000
	...
 80020e8:	43b38000 	.word	0x43b38000
 80020ec:	00000000 	.word	0x00000000
 80020f0:	457ff000 	.word	0x457ff000
 80020f4:	3ff00000 	.word	0x3ff00000

080020f8 <_ZN13RoverArmMotor4tickEv>:

int positive_rezeros = 0;
double real_angle = 0;

// Needs to be called in each loop
void RoverArmMotor::tick(){
 80020f8:	b5b0      	push	{r4, r5, r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

    /*------------------Get current angle------------------*/
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    currentAngle = get_current_angle_avg(); //TODO avg or not?
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f9a3 	bl	800244c <_ZN13RoverArmMotor21get_current_angle_avgEv>
 8002106:	eeb0 7a40 	vmov.f32	s14, s0
 800210a:	eef0 7a60 	vmov.f32	s15, s1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118

      // Measurement deadband - ignore sub-degree noise
    if(abs(currentAngle - lastAngle) < 1.0){
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 8002120:	f7fe f8b2 	bl	8000288 <__aeabi_dsub>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	f7fe fd14 	bl	8000b58 <__aeabi_d2iz>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	bfb8      	it	lt
 8002136:	425b      	neglt	r3, r3
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f9f3 	bl	8000524 <__aeabi_i2d>
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	4b9b      	ldr	r3, [pc, #620]	; (80023b0 <_ZN13RoverArmMotor4tickEv+0x2b8>)
 8002144:	f7fe fcca 	bl	8000adc <__aeabi_dcmplt>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <_ZN13RoverArmMotor4tickEv+0x62>
        currentAngle = lastAngle;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
    }
    input = currentAngle; // range [0,359]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
   //------------------Compute PID------------------//
    // Compute distance, retune PID if necessary. Less aggressive tuning params for small errors
    // Find the shortest from the current position to the set point
    double gap; //mn297 could be negative

    if(wrist_waist){
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800216c:	2b00      	cmp	r3, #0
 800216e:	d052      	beq.n	8002216 <_ZN13RoverArmMotor4tickEv+0x11e>
        (abs(setpoint-input) < abs((setpoint + 360.0f)-input)) ? //mn297 uesless cause always true
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800217c:	f7fe f884 	bl	8000288 <__aeabi_dsub>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fce6 	bl	8000b58 <__aeabi_d2iz>
 800218c:	4603      	mov	r3, r0
 800218e:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8002192:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	4b84      	ldr	r3, [pc, #528]	; (80023b4 <_ZN13RoverArmMotor4tickEv+0x2bc>)
 80021a2:	f7fe f873 	bl	800028c <__adddf3>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80021b4:	f7fe f868 	bl	8000288 <__aeabi_dsub>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	f7fe fcca 	bl	8000b58 <__aeabi_d2iz>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bfb8      	it	lt
 80021ca:	425b      	neglt	r3, r3
 80021cc:	429c      	cmp	r4, r3
 80021ce:	da0c      	bge.n	80021ea <_ZN13RoverArmMotor4tickEv+0xf2>
        gap = setpoint - input : gap = (setpoint + 360.0f) - input; 
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80021dc:	f7fe f854 	bl	8000288 <__aeabi_dsub>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80021e8:	e021      	b.n	800222e <_ZN13RoverArmMotor4tickEv+0x136>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <_ZN13RoverArmMotor4tickEv+0x2bc>)
 80021f6:	f7fe f849 	bl	800028c <__adddf3>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8002208:	f7fe f83e 	bl	8000288 <__aeabi_dsub>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002214:	e00b      	b.n	800222e <_ZN13RoverArmMotor4tickEv+0x136>
    }else{
        gap = setpoint - input;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8002222:	f7fe f831 	bl	8000288 <__aeabi_dsub>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }

    // If we are outside of angle bounds, make a setpoint intervention to bring the shaft to the midpoint
    if(input <= lowestAngle || input >= highestAngle){
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	; 0x130
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 800223a:	f7fe fc59 	bl	8000af0 <__aeabi_dcmple>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10a      	bne.n	800225a <_ZN13RoverArmMotor4tickEv+0x162>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	; 0x130
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8002250:	f7fe fc58 	bl	8000b04 <__aeabi_dcmpge>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01f      	beq.n	800229a <_ZN13RoverArmMotor4tickEv+0x1a2>
        setpoint = gearRatio * (lowestAngle + highestAngle) / 2 ;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	e9d3 4554 	ldrd	r4, r5, [r3, #336]	; 0x150
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	; 0x100
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 800226c:	f7fe f80e 	bl	800028c <__adddf3>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4620      	mov	r0, r4
 8002276:	4629      	mov	r1, r5
 8002278:	f7fe f9be 	bl	80005f8 <__aeabi_dmul>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800228c:	f7fe fade 	bl	800084c <__aeabi_ddiv>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
    }

    // Tone down P and I as the motor hones onto position
    if (abs(gap) < 10){
 800229a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800229e:	f7fe fc5b 	bl	8000b58 <__aeabi_d2iz>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bfb8      	it	lt
 80022a8:	425b      	neglt	r3, r3
 80022aa:	2b09      	cmp	r3, #9
 80022ac:	dc19      	bgt.n	80022e2 <_ZN13RoverArmMotor4tickEv+0x1ea>
        internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 80022c2:	eeb0 2a45 	vmov.f32	s4, s10
 80022c6:	eef0 2a65 	vmov.f32	s5, s11
 80022ca:	eeb0 1a46 	vmov.f32	s2, s12
 80022ce:	eef0 1a66 	vmov.f32	s3, s13
 80022d2:	eeb0 0a47 	vmov.f32	s0, s14
 80022d6:	eef0 0a67 	vmov.f32	s1, s15
 80022da:	4610      	mov	r0, r2
 80022dc:	f000 fc17 	bl	8002b0e <_ZN3PID10SetTuningsEddd>
 80022e0:	e018      	b.n	8002314 <_ZN13RoverArmMotor4tickEv+0x21c>
    }else{
        internalPIDInstance.SetTunings(aggressiveKp, aggressiveKi, aggressiveKd);
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	ed93 5b26 	vldr	d5, [r3, #152]	; 0x98
 80022f6:	eeb0 2a45 	vmov.f32	s4, s10
 80022fa:	eef0 2a65 	vmov.f32	s5, s11
 80022fe:	eeb0 1a46 	vmov.f32	s2, s12
 8002302:	eef0 1a66 	vmov.f32	s3, s13
 8002306:	eeb0 0a47 	vmov.f32	s0, s14
 800230a:	eef0 0a67 	vmov.f32	s1, s15
 800230e:	4610      	mov	r0, r2
 8002310:	f000 fbfd 	bl	8002b0e <_ZN3PID10SetTuningsEddd>
    }
    internalPIDInstance.Compute(); // return value stored in output
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fa83 	bl	8002822 <_ZN3PID7ComputeEv>
    // Make sure we aren't snapping our tendons - move back a little bit if we are
    // if(currentAngle >= (highestAngle - 2) && currentAngle <= (lowestAngle + 2)) output = 0.0;


    //------------------Write to motor------------------//
    if(escType == CYTRON){
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002322:	2b00      	cmp	r3, #0
 8002324:	d139      	bne.n	800239a <_ZN13RoverArmMotor4tickEv+0x2a2>

        // Interpret sign of the error signal as the direction pin value
        // (gap > 0) ? digitalWrite(dir, HIGH) : digitalWrite(dir, LOW); // invert if needed mn297
        if (gap > 0) {
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002332:	f7fe fbf1 	bl	8000b18 <__aeabi_dcmpgt>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <_ZN13RoverArmMotor4tickEv+0x25a>
            HAL_GPIO_WritePin(dir.port, dir.pin, GPIO_PIN_SET); //mn297
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002348:	2201      	movs	r2, #1
 800234a:	4619      	mov	r1, r3
 800234c:	f000 ffe2 	bl	8003314 <HAL_GPIO_WritePin>
 8002350:	e009      	b.n	8002366 <_ZN13RoverArmMotor4tickEv+0x26e>
        }
        else {
            HAL_GPIO_WritePin(dir.port, dir.pin, GPIO_PIN_RESET); //mn297
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800235e:	2200      	movs	r2, #0
 8002360:	4619      	mov	r1, r3
 8002362:	f000 ffd7 	bl	8003314 <HAL_GPIO_WritePin>
        }
        // Write to PWM pin
        //TODO port to HAL
        // analogWrite(pwm, abs(output)); //mn297 function execute quickly and jumps to next tick()
        double test_output = abs(output);     //smoothing
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe fbf2 	bl	8000b58 <__aeabi_d2iz>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	bfb8      	it	lt
 800237a:	425b      	neglt	r3, r3
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8d1 	bl	8000524 <__aeabi_i2d>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	e9c7 2302 	strd	r2, r3, [r7, #8]
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, test_output);
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <_ZN13RoverArmMotor4tickEv+0x2c0>)
 800238c:	681c      	ldr	r4, [r3, #0]
 800238e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002392:	f7fe fc09 	bl	8000ba8 <__aeabi_d2uiz>
 8002396:	4603      	mov	r3, r0
 8002398:	63a3      	str	r3, [r4, #56]	; 0x38
    //     internalServoInstance.writeMicroseconds(output);
    // }


    //------------------Update angle------------------//
    lastAngle = currentAngle;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bdb0      	pop	{r4, r5, r7, pc}
 80023ae:	bf00      	nop
 80023b0:	3ff00000 	.word	0x3ff00000
 80023b4:	40768000 	.word	0x40768000
 80023b8:	200003ac 	.word	0x200003ac

080023bc <_ZN13RoverArmMotor11newSetpointEd>:
// For display purposes
double RoverArmMotor::getSetpoint(){
    return setpoint / gearRatio;
}

bool RoverArmMotor::newSetpoint(double angl){
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	ed87 0b00 	vstr	d0, [r7]
    double setpoint_test = angl * gearRatio;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80023ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023d2:	f7fe f911 	bl	80005f8 <__aeabi_dmul>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if(setpoint_test > lowestAngle && setpoint_test < highestAngle){
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 80023e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023e8:	f7fe fb96 	bl	8000b18 <__aeabi_dcmpgt>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d010      	beq.n	8002414 <_ZN13RoverArmMotor11newSetpointEd+0x58>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 80023f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023fc:	f7fe fb6e 	bl	8000adc <__aeabi_dcmplt>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <_ZN13RoverArmMotor11newSetpointEd+0x58>
        setpoint = setpoint_test;
 8002406:	68f9      	ldr	r1, [r7, #12]
 8002408:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800240c:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
        return true;
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <_ZN13RoverArmMotor11newSetpointEd+0x5a>
    }else{
        return false;
 8002414:	2300      	movs	r3, #0
    }
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <_ZN13RoverArmMotor11engageBrakeEv>:
    //   digitalWrite(brake, LOW);  
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_RESET); //mn297
    }
}

void RoverArmMotor::engageBrake(){
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
    if(brake.valid != 0){
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 800242c:	2b00      	cmp	r3, #0
 800242e:	d009      	beq.n	8002444 <_ZN13RoverArmMotor11engageBrakeEv+0x26>
    //    digitalWrite(brake, HIGH); 
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_SET); //mn297
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 800243c:	2201      	movs	r2, #1
 800243e:	4619      	mov	r1, r3
 8002440:	f000 ff68 	bl	8003314 <HAL_GPIO_WritePin>
    }
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_ZN13RoverArmMotor21get_current_angle_avgEv>:

double RoverArmMotor::get_current_angle_avg(){    //mn297
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af02      	add	r7, sp, #8
 8002452:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 8002466:	2300      	movs	r3, #0
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	230c      	movs	r3, #12
 800246c:	f004 fac7 	bl	80069fe <getPositionSPI>
 8002470:	4603      	mov	r3, r0
 8002472:	81fb      	strh	r3, [r7, #14]
    adcResult = internalAveragerInstance.reading(encoderData);  // implicit cast to int
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3370      	adds	r3, #112	; 0x70
 8002478:	89fa      	ldrh	r2, [r7, #14]
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f000 f8d3 	bl	8002628 <_ZN9movingAvg7readingEi>
 8002482:	4602      	mov	r2, r0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    currentAngle = mapFloat((float) adcResult, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002498:	ed9f 2a13 	vldr	s4, [pc, #76]	; 80024e8 <_ZN13RoverArmMotor21get_current_angle_avgEv+0x9c>
 800249c:	eddf 1a13 	vldr	s3, [pc, #76]	; 80024ec <_ZN13RoverArmMotor21get_current_angle_avgEv+0xa0>
 80024a0:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80024f0 <_ZN13RoverArmMotor21get_current_angle_avgEv+0xa4>
 80024a4:	eddf 0a11 	vldr	s1, [pc, #68]	; 80024ec <_ZN13RoverArmMotor21get_current_angle_avgEv+0xa0>
 80024a8:	eeb0 0a67 	vmov.f32	s0, s15
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f867 	bl	8002580 <_ZN13RoverArmMotor8mapFloatEfffff>
 80024b2:	eeb0 7a40 	vmov.f32	s14, s0
 80024b6:	eef0 7a60 	vmov.f32	s15, s1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    return currentAngle / gearRatio;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80024cc:	f7fe f9be 	bl	800084c <__aeabi_ddiv>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80024d8:	eeb0 0a47 	vmov.f32	s0, s14
 80024dc:	eef0 0a67 	vmov.f32	s1, s15
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	43b38000 	.word	0x43b38000
 80024ec:	00000000 	.word	0x00000000
 80024f0:	457ff000 	.word	0x457ff000

080024f4 <_ZN13RoverArmMotor17get_current_angleEv>:
double RoverArmMotor::get_current_angle(){    //mn297
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 800250e:	2300      	movs	r3, #0
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	230c      	movs	r3, #12
 8002514:	f004 fa73 	bl	80069fe <getPositionSPI>
 8002518:	4603      	mov	r3, r0
 800251a:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 800251c:	89fb      	ldrh	r3, [r7, #14]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002526:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8002574 <_ZN13RoverArmMotor17get_current_angleEv+0x80>
 800252a:	eddf 1a13 	vldr	s3, [pc, #76]	; 8002578 <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 800252e:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800257c <_ZN13RoverArmMotor17get_current_angleEv+0x88>
 8002532:	eddf 0a11 	vldr	s1, [pc, #68]	; 8002578 <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 8002536:	eeb0 0a67 	vmov.f32	s0, s15
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f820 	bl	8002580 <_ZN13RoverArmMotor8mapFloatEfffff>
 8002540:	eeb0 7a40 	vmov.f32	s14, s0
 8002544:	eef0 7a60 	vmov.f32	s15, s1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    return currentAngle / gearRatio;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800255a:	f7fe f977 	bl	800084c <__aeabi_ddiv>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	ec43 2b17 	vmov	d7, r2, r3
}
 8002566:	eeb0 0a47 	vmov.f32	s0, s14
 800256a:	eef0 0a67 	vmov.f32	s1, s15
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	43b38000 	.word	0x43b38000
 8002578:	00000000 	.word	0x00000000
 800257c:	457ff000 	.word	0x457ff000

08002580 <_ZN13RoverArmMotor8mapFloatEfffff>:
double RoverArmMotor::getCurrentOutput(){
    return output;
}

double RoverArmMotor::mapFloat(float x, float in_min, float in_max, float out_min, float out_max){
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	6178      	str	r0, [r7, #20]
 8002588:	ed87 0a04 	vstr	s0, [r7, #16]
 800258c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002590:	ed87 1a02 	vstr	s2, [r7, #8]
 8002594:	edc7 1a01 	vstr	s3, [r7, #4]
 8002598:	ed87 2a00 	vstr	s4, [r7]
    double result = ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 800259c:	ed97 7a04 	vldr	s14, [r7, #16]
 80025a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80025a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025a8:	edd7 6a00 	vldr	s13, [r7]
 80025ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025b4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80025b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80025bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80025c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d0:	ee17 0a90 	vmov	r0, s15
 80025d4:	f7fd ffb8 	bl	8000548 <__aeabi_f2d>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result; 
 80025e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025e4:	ec43 2b17 	vmov	d7, r2, r3
    }
 80025e8:	eeb0 0a47 	vmov.f32	s0, s14
 80025ec:	eef0 0a67 	vmov.f32	s1, s15
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <_ZN9movingAvg5beginEv>:

#include <movingAvg.h>

// initialize - allocate the interval array
void movingAvg::begin()
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
    m_readings = new int[m_interval];
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8002606:	4293      	cmp	r3, r2
 8002608:	d201      	bcs.n	800260e <_ZN9movingAvg5beginEv+0x18>
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	e001      	b.n	8002612 <_ZN9movingAvg5beginEv+0x1c>
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
 8002612:	4618      	mov	r0, r3
 8002614:	f004 fac6 	bl	8006ba4 <_Znaj>
 8002618:	4603      	mov	r3, r0
 800261a:	461a      	mov	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	611a      	str	r2, [r3, #16]
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <_ZN9movingAvg7readingEi>:

// add a new reading and return the new moving average
int movingAvg::reading(int newReading)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
    // add each new data point to the sum until the m_readings array is filled
    if (m_nbrReadings < m_interval) {
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	da0b      	bge.n	8002656 <_ZN9movingAvg7readingEi+0x2e>
        ++m_nbrReadings;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	605a      	str	r2, [r3, #4]
        m_sum += newReading;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	441a      	add	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	e00d      	b.n	8002672 <_ZN9movingAvg7readingEi+0x4a>
    }
    // once the array is filled, subtract the oldest data point and add the new one
    else {
        m_sum = m_sum - m_readings[m_next] + newReading;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6919      	ldr	r1, [r3, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	1ad2      	subs	r2, r2, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	441a      	add	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	609a      	str	r2, [r3, #8]
    }

    m_readings[m_next] = newReading;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	601a      	str	r2, [r3, #0]
    if (++m_next >= m_interval) m_next = 0;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	bfac      	ite	ge
 8002698:	2301      	movge	r3, #1
 800269a:	2300      	movlt	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <_ZN9movingAvg7readingEi+0x80>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	60da      	str	r2, [r3, #12]
    return (m_sum + m_nbrReadings / 2) / m_nbrReadings;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	0fd9      	lsrs	r1, r3, #31
 80026b2:	440b      	add	r3, r1
 80026b4:	105b      	asrs	r3, r3, #1
 80026b6:	441a      	add	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	0000      	movs	r0, r0
	...

080026d0 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~ Constructor ~~~~~~~~~~~~~~~~ */
PID::PID() { }

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6278      	str	r0, [r7, #36]	; 0x24
 80026d8:	6239      	str	r1, [r7, #32]
 80026da:	61fa      	str	r2, [r7, #28]
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	ed87 0b04 	vstr	d0, [r7, #16]
 80026e2:	ed87 1b02 	vstr	d1, [r7, #8]
 80026e6:	ed87 2b00 	vstr	d2, [r7]
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_myOutput   = Output;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	645a      	str	r2, [r3, #68]	; 0x44
	_myInput    = Input;
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	6a3a      	ldr	r2, [r7, #32]
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
	_mySetpoint = Setpoint;
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	649a      	str	r2, [r3, #72]	; 0x48
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	2200      	movs	r2, #0
 8002700:	705a      	strb	r2, [r3, #1]
	
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8002702:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002758 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x88>
 8002706:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002760 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x90>
 800270a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800270c:	f000 f991 	bl	8002a32 <_ZN3PID15SetOutputLimitsEdd>
	
	_sampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	2264      	movs	r2, #100	; 0x64
 8002714:	609a      	str	r2, [r3, #8]
	
	PID::SetControllerDirection(ControllerDirection);
 8002716:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800271a:	4619      	mov	r1, r3
 800271c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800271e:	f000 fab9 	bl	8002c94 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>
	PID::SetTunings(Kp, Ki, Kd, POn);
 8002722:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002726:	4619      	mov	r1, r3
 8002728:	ed97 2b00 	vldr	d2, [r7]
 800272c:	ed97 1b02 	vldr	d1, [r7, #8]
 8002730:	ed97 0b04 	vldr	d0, [r7, #16]
 8002734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002736:	f000 fa05 	bl	8002b44 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
	
	_lastTime = GetTime() - _sampleTime;
 800273a:	f000 fb5b 	bl	8002df4 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	1ad2      	subs	r2, r2, r3
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	605a      	str	r2, [r3, #4]
	
}
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	4618      	mov	r0, r3
 800274e:	3728      	adds	r7, #40	; 0x28
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	f3af 8000 	nop.w
 8002758:	00000000 	.word	0x00000000
 800275c:	406fe000 	.word	0x406fe000
	...

08002768 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>:

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection) : PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection){ }
 8002768:	b580      	push	{r7, lr}
 800276a:	b08c      	sub	sp, #48	; 0x30
 800276c:	af02      	add	r7, sp, #8
 800276e:	6278      	str	r0, [r7, #36]	; 0x24
 8002770:	6239      	str	r1, [r7, #32]
 8002772:	61fa      	str	r2, [r7, #28]
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	ed87 0b04 	vstr	d0, [r7, #16]
 800277a:	ed87 1b02 	vstr	d1, [r7, #8]
 800277e:	ed87 2b00 	vstr	d2, [r7]
 8002782:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	2301      	movs	r3, #1
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	ed97 2b00 	vldr	d2, [r7]
 8002790:	ed97 1b02 	vldr	d1, [r7, #8]
 8002794:	ed97 0b04 	vldr	d0, [r7, #16]
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	6a39      	ldr	r1, [r7, #32]
 800279e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027a0:	f7ff ff96 	bl	80026d0 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	4618      	mov	r0, r3
 80027a8:	3728      	adds	r7, #40	; 0x28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <_ZN3PID4InitEv>:

/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	_lastInput = *_myInput;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (_outputSum > _outMax)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80027de:	f7fe f99b 	bl	8000b18 <__aeabi_dcmpgt>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <_ZN3PID4InitEv+0x48>
	{
		_outputSum = _outMax;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		_outputSum = _outMin;
	}
	else { }
	
}
 80027f4:	e011      	b.n	800281a <_ZN3PID4InitEv+0x6c>
	else if (_outputSum < _outMin)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002802:	f7fe f96b 	bl	8000adc <__aeabi_dcmplt>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d100      	bne.n	800280e <_ZN3PID4InitEv+0x60>
}
 800280c:	e005      	b.n	800281a <_ZN3PID4InitEv+0x6c>
		_outputSum = _outMin;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <_ZN3PID7ComputeEv>:
	PID::Init(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID::Compute(void)
{
 8002822:	b5b0      	push	{r4, r5, r7, lr}
 8002824:	b08c      	sub	sp, #48	; 0x30
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!_inAuto)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	785b      	ldrb	r3, [r3, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <_ZN3PID7ComputeEv+0x14>
	{
		return _FALSE;
 8002832:	2300      	movs	r3, #0
 8002834:	e0db      	b.n	80029ee <_ZN3PID7ComputeEv+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002836:	f000 fadd 	bl	8002df4 <HAL_GetTick>
 800283a:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - _lastTime);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= _sampleTime)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	6a3a      	ldr	r2, [r7, #32]
 800284c:	429a      	cmp	r2, r3
 800284e:	f0c0 80cd 	bcc.w	80029ec <_ZN3PID7ComputeEv+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *_myInput;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *_mySetpoint - input;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002862:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800286a:	f7fd fd0d 	bl	8000288 <__aeabi_dsub>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - _lastInput);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800287c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002880:	f7fd fd02 	bl	8000288 <__aeabi_dsub>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		_outputSum += (_ki * error);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002898:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800289c:	f7fd feac 	bl	80005f8 <__aeabi_dmul>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4620      	mov	r0, r4
 80028a6:	4629      	mov	r1, r5
 80028a8:	f7fd fcf0 	bl	800028c <__adddf3>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!_pOnE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d114      	bne.n	80028e8 <_ZN3PID7ComputeEv+0xc6>
		{
			_outputSum -= _kp * dInput;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80028ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028ce:	f7fd fe93 	bl	80005f8 <__aeabi_dmul>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4620      	mov	r0, r4
 80028d8:	4629      	mov	r1, r5
 80028da:	f7fd fcd5 	bl	8000288 <__aeabi_dsub>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (_outputSum > _outMax)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80028f4:	f7fe f910 	bl	8000b18 <__aeabi_dcmpgt>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <_ZN3PID7ComputeEv+0xea>
		{
			_outputSum = _outMax;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800290a:	e010      	b.n	800292e <_ZN3PID7ComputeEv+0x10c>
		}
		else if (_outputSum < _outMin)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002918:	f7fe f8e0 	bl	8000adc <__aeabi_dcmplt>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <_ZN3PID7ComputeEv+0x10c>
		{
			_outputSum = _outMin;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (_pOnE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <_ZN3PID7ComputeEv+0x12c>
		{
			output = _kp * error;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800293c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002940:	f7fd fe5a 	bl	80005f8 <__aeabi_dmul>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800294c:	e005      	b.n	800295a <_ZN3PID7ComputeEv+0x138>
		}
		else
		{
			output = 0;
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += _outputSum - _kd * dInput;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800296a:	f7fd fe45 	bl	80005f8 <__aeabi_dmul>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4620      	mov	r0, r4
 8002974:	4629      	mov	r1, r5
 8002976:	f7fd fc87 	bl	8000288 <__aeabi_dsub>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002982:	f7fd fc83 	bl	800028c <__adddf3>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > _outMax)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002994:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002998:	f7fe f8be 	bl	8000b18 <__aeabi_dcmpgt>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <_ZN3PID7ComputeEv+0x18c>
		{
			output = _outMax;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80029a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80029ac:	e00e      	b.n	80029cc <_ZN3PID7ComputeEv+0x1aa>
		}
		else if (output < _outMin)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80029b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029b8:	f7fe f890 	bl	8000adc <__aeabi_dcmplt>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <_ZN3PID7ComputeEv+0x1aa>
		{
			output = _outMin;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80029c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*_myOutput = output;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80029d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029d4:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		_lastInput = input;
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029de:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		_lastTime  = now;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e6:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <_ZN3PID7ComputeEv+0x1cc>
		
	}
	else
	{
		return _FALSE;
 80029ec:	2300      	movs	r3, #0
	}
	
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3730      	adds	r7, #48	; 0x30
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bdb0      	pop	{r4, r5, r7, pc}

080029f6 <_ZN3PID7SetModeE15PIDMode_TypeDef>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID::SetMode(PIDMode_TypeDef Mode)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	460b      	mov	r3, r1
 8002a00:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	bf0c      	ite	eq
 8002a08:	2301      	moveq	r3, #1
 8002a0a:	2300      	movne	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !_inAuto)
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
	{
		Init();
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fec5 	bl	80027ae <_ZN3PID4InitEv>
	}
	
	_inAuto = (PIDMode_TypeDef)newAuto;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	705a      	strb	r2, [r3, #1]
	
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <_ZN3PID15SetOutputLimitsEdd>:
	return _inAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(double Min, double Max)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b086      	sub	sp, #24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6178      	str	r0, [r7, #20]
 8002a3a:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a3e:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a4a:	f7fe f85b 	bl	8000b04 <__aeabi_dcmpge>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d158      	bne.n	8002b06 <_ZN3PID15SetOutputLimitsEdd+0xd4>
	{
		return;
	}
	
	_outMin = Min;
 8002a54:	6979      	ldr	r1, [r7, #20]
 8002a56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a5a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	_outMax = Max;
 8002a5e:	6979      	ldr	r1, [r7, #20]
 8002a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a64:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	785b      	ldrb	r3, [r3, #1]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d04b      	beq.n	8002b08 <_ZN3PID15SetOutputLimitsEdd+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a7e:	f7fe f84b 	bl	8000b18 <__aeabi_dcmpgt>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <_ZN3PID15SetOutputLimitsEdd+0x66>
		{
			*_myOutput = _outMax;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a92:	e9c1 2300 	strd	r2, r3, [r1]
 8002a96:	e012      	b.n	8002abe <_ZN3PID15SetOutputLimitsEdd+0x8c>
		}
		else if (*_myOutput < _outMin)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002aa6:	f7fe f819 	bl	8000adc <__aeabi_dcmplt>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <_ZN3PID15SetOutputLimitsEdd+0x8c>
		{
			*_myOutput = _outMin;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002aba:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002aca:	f7fe f825 	bl	8000b18 <__aeabi_dcmpgt>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <_ZN3PID15SetOutputLimitsEdd+0xb0>
		{
			_outputSum = _outMax;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002ada:	6979      	ldr	r1, [r7, #20]
 8002adc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002ae0:	e012      	b.n	8002b08 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		}
		else if (_outputSum < _outMin)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002aee:	f7fd fff5 	bl	8000adc <__aeabi_dcmplt>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		{
			_outputSum = _outMin;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002afe:	6979      	ldr	r1, [r7, #20]
 8002b00:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002b04:	e000      	b.n	8002b08 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		return;
 8002b06:	bf00      	nop
		}
		else { }
		
	}
	
}
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <_ZN3PID10SetTuningsEddd>:

/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID::SetTunings(double Kp, double Ki, double Kd)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b088      	sub	sp, #32
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	61f8      	str	r0, [r7, #28]
 8002b16:	ed87 0b04 	vstr	d0, [r7, #16]
 8002b1a:	ed87 1b02 	vstr	d1, [r7, #8]
 8002b1e:	ed87 2b00 	vstr	d2, [r7]
	PID::SetTunings(Kp, Ki, Kd, _pOn);
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	789b      	ldrb	r3, [r3, #2]
 8002b26:	4619      	mov	r1, r3
 8002b28:	ed97 2b00 	vldr	d2, [r7]
 8002b2c:	ed97 1b02 	vldr	d1, [r7, #8]
 8002b30:	ed97 0b04 	vldr	d0, [r7, #16]
 8002b34:	69f8      	ldr	r0, [r7, #28]
 8002b36:	f000 f805 	bl	8002b44 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
}
 8002b3a:	bf00      	nop
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>:
void PID::SetTunings(double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	61f8      	str	r0, [r7, #28]
 8002b4c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002b50:	ed87 1b02 	vstr	d1, [r7, #8]
 8002b54:	ed87 2b00 	vstr	d2, [r7]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b68:	f7fd ffb8 	bl	8000adc <__aeabi_dcmplt>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 8089 	bne.w	8002c86 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b80:	f7fd ffac 	bl	8000adc <__aeabi_dcmplt>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d17d      	bne.n	8002c86 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b96:	f7fd ffa1 	bl	8000adc <__aeabi_dcmplt>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d172      	bne.n	8002c86 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	_pOn    = POn;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	7efa      	ldrb	r2, [r7, #27]
 8002ba4:	709a      	strb	r2, [r3, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002ba6:	7efb      	ldrb	r3, [r7, #27]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	701a      	strb	r2, [r3, #0]

	_dispKp = Kp;
 8002bb8:	69f9      	ldr	r1, [r7, #28]
 8002bba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002bbe:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_dispKi = Ki;
 8002bc2:	69f9      	ldr	r1, [r7, #28]
 8002bc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bc8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_dispKd = Kd;
 8002bcc:	69f9      	ldr	r1, [r7, #28]
 8002bce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bd2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)_sampleTime) / 1000;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fc92 	bl	8000504 <__aeabi_ui2d>
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x14c>)
 8002be6:	f7fd fe31 	bl	800084c <__aeabi_ddiv>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	_kp = Kp;
 8002bf2:	69f9      	ldr	r1, [r7, #28]
 8002bf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002bf8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	_ki = Ki * SampleTimeInSec;
 8002bfc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c04:	f7fd fcf8 	bl	80005f8 <__aeabi_dmul>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	69f9      	ldr	r1, [r7, #28]
 8002c0e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	_kd = Kd / SampleTimeInSec;
 8002c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c1a:	f7fd fe17 	bl	800084c <__aeabi_ddiv>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	69f9      	ldr	r1, [r7, #28]
 8002c24:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (_controllerDirection == _PID_CD_REVERSE)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	78db      	ldrb	r3, [r3, #3]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d12b      	bne.n	8002c88 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
	{
		
		_kp = (0 - _kp);
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c36:	f04f 0000 	mov.w	r0, #0
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	f7fd fb23 	bl	8000288 <__aeabi_dsub>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	69f9      	ldr	r1, [r7, #28]
 8002c48:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	f7fd fb15 	bl	8000288 <__aeabi_dsub>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	69f9      	ldr	r1, [r7, #28]
 8002c64:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c6e:	f04f 0000 	mov.w	r0, #0
 8002c72:	f04f 0100 	mov.w	r1, #0
 8002c76:	f7fd fb07 	bl	8000288 <__aeabi_dsub>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	69f9      	ldr	r1, [r7, #28]
 8002c80:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002c84:	e000      	b.n	8002c88 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
		return;
 8002c86:	bf00      	nop
		
	}
	
}
 8002c88:	3728      	adds	r7, #40	; 0x28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	408f4000 	.word	0x408f4000

08002c94 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d02e      	beq.n	8002d06 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	78db      	ldrb	r3, [r3, #3]
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d029      	beq.n	8002d06 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
	{
		
		_kp = (0 - _kp);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002cb8:	f04f 0000 	mov.w	r0, #0
 8002cbc:	f04f 0100 	mov.w	r1, #0
 8002cc0:	f7fd fae2 	bl	8000288 <__aeabi_dsub>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002cd4:	f04f 0000 	mov.w	r0, #0
 8002cd8:	f04f 0100 	mov.w	r1, #0
 8002cdc:	f7fd fad4 	bl	8000288 <__aeabi_dsub>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002cf0:	f04f 0000 	mov.w	r0, #0
 8002cf4:	f04f 0100 	mov.w	r1, #0
 8002cf8:	f7fd fac6 	bl	8000288 <__aeabi_dsub>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	_controllerDirection = Direction;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	70da      	strb	r2, [r3, #3]
	
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <HAL_Init+0x3c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <HAL_Init+0x3c>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d2a:	2003      	movs	r0, #3
 8002d2c:	f000 f944 	bl	8002fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d30:	2000      	movs	r0, #0
 8002d32:	f000 f80f 	bl	8002d54 <HAL_InitTick>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	71fb      	strb	r3, [r7, #7]
 8002d40:	e001      	b.n	8002d46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d42:	f7fe fce5 	bl	8001710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d46:	79fb      	ldrb	r3, [r7, #7]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40022000 	.word	0x40022000

08002d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d60:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_InitTick+0x6c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d023      	beq.n	8002db0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d68:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <HAL_InitTick+0x70>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <HAL_InitTick+0x6c>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	4619      	mov	r1, r3
 8002d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 f941 	bl	8003006 <HAL_SYSTICK_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10f      	bne.n	8002daa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b0f      	cmp	r3, #15
 8002d8e:	d809      	bhi.n	8002da4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d90:	2200      	movs	r2, #0
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	f04f 30ff 	mov.w	r0, #4294967295
 8002d98:	f000 f919 	bl	8002fce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <HAL_InitTick+0x74>)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e007      	b.n	8002db4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
 8002da8:	e004      	b.n	8002db4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	e001      	b.n	8002db4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000028 	.word	0x20000028
 8002dc4:	20000020 	.word	0x20000020
 8002dc8:	20000024 	.word	0x20000024

08002dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_IncTick+0x20>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_IncTick+0x24>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <HAL_IncTick+0x24>)
 8002dde:	6013      	str	r3, [r2, #0]
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000028 	.word	0x20000028
 8002df0:	2000047c 	.word	0x2000047c

08002df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return uwTick;
 8002df8:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <HAL_GetTick+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	2000047c 	.word	0x2000047c

08002e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff ffee 	bl	8002df4 <HAL_GetTick>
 8002e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d005      	beq.n	8002e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e26:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <HAL_Delay+0x44>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4413      	add	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e32:	bf00      	nop
 8002e34:	f7ff ffde 	bl	8002df4 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d8f7      	bhi.n	8002e34 <HAL_Delay+0x28>
  {
  }
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000028 	.word	0x20000028

08002e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e70:	4013      	ands	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e86:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	60d3      	str	r3, [r2, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 0307 	and.w	r3, r3, #7
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	db0a      	blt.n	8002ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	490c      	ldr	r1, [pc, #48]	; (8002f04 <__NVIC_SetPriority+0x4c>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	440b      	add	r3, r1
 8002edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee0:	e00a      	b.n	8002ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	4908      	ldr	r1, [pc, #32]	; (8002f08 <__NVIC_SetPriority+0x50>)
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	3b04      	subs	r3, #4
 8002ef0:	0112      	lsls	r2, r2, #4
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	761a      	strb	r2, [r3, #24]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000e100 	.word	0xe000e100
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f1c3 0307 	rsb	r3, r3, #7
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	bf28      	it	cs
 8002f2a:	2304      	movcs	r3, #4
 8002f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3304      	adds	r3, #4
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d902      	bls.n	8002f3c <NVIC_EncodePriority+0x30>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3b03      	subs	r3, #3
 8002f3a:	e000      	b.n	8002f3e <NVIC_EncodePriority+0x32>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	401a      	ands	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f54:	f04f 31ff 	mov.w	r1, #4294967295
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	43d9      	mvns	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	4313      	orrs	r3, r2
         );
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3724      	adds	r7, #36	; 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f84:	d301      	bcc.n	8002f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00f      	b.n	8002faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <SysTick_Config+0x40>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f92:	210f      	movs	r1, #15
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	f7ff ff8e 	bl	8002eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <SysTick_Config+0x40>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <SysTick_Config+0x40>)
 8002fa4:	2207      	movs	r2, #7
 8002fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	e000e010 	.word	0xe000e010

08002fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff ff47 	bl	8002e54 <__NVIC_SetPriorityGrouping>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe0:	f7ff ff5c 	bl	8002e9c <__NVIC_GetPriorityGrouping>
 8002fe4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	6978      	ldr	r0, [r7, #20]
 8002fec:	f7ff ff8e 	bl	8002f0c <NVIC_EncodePriority>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff5d 	bl	8002eb8 <__NVIC_SetPriority>
}
 8002ffe:	bf00      	nop
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ffb0 	bl	8002f74 <SysTick_Config>
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800302e:	e154      	b.n	80032da <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8146 	beq.w	80032d4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d005      	beq.n	8003060 <HAL_GPIO_Init+0x40>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d130      	bne.n	80030c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4013      	ands	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003096:	2201      	movs	r2, #1
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	f003 0201 	and.w	r2, r3, #1
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d017      	beq.n	80030fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	2203      	movs	r2, #3
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d123      	bne.n	8003152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	08da      	lsrs	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3208      	adds	r2, #8
 8003112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	220f      	movs	r2, #15
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	08da      	lsrs	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3208      	adds	r2, #8
 800314c:	6939      	ldr	r1, [r7, #16]
 800314e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	2203      	movs	r2, #3
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 0203 	and.w	r2, r3, #3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80a0 	beq.w	80032d4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003194:	4b58      	ldr	r3, [pc, #352]	; (80032f8 <HAL_GPIO_Init+0x2d8>)
 8003196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003198:	4a57      	ldr	r2, [pc, #348]	; (80032f8 <HAL_GPIO_Init+0x2d8>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6613      	str	r3, [r2, #96]	; 0x60
 80031a0:	4b55      	ldr	r3, [pc, #340]	; (80032f8 <HAL_GPIO_Init+0x2d8>)
 80031a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031ac:	4a53      	ldr	r2, [pc, #332]	; (80032fc <HAL_GPIO_Init+0x2dc>)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	3302      	adds	r3, #2
 80031b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	220f      	movs	r2, #15
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031d6:	d019      	beq.n	800320c <HAL_GPIO_Init+0x1ec>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a49      	ldr	r2, [pc, #292]	; (8003300 <HAL_GPIO_Init+0x2e0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d013      	beq.n	8003208 <HAL_GPIO_Init+0x1e8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a48      	ldr	r2, [pc, #288]	; (8003304 <HAL_GPIO_Init+0x2e4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00d      	beq.n	8003204 <HAL_GPIO_Init+0x1e4>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a47      	ldr	r2, [pc, #284]	; (8003308 <HAL_GPIO_Init+0x2e8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d007      	beq.n	8003200 <HAL_GPIO_Init+0x1e0>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a46      	ldr	r2, [pc, #280]	; (800330c <HAL_GPIO_Init+0x2ec>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d101      	bne.n	80031fc <HAL_GPIO_Init+0x1dc>
 80031f8:	2304      	movs	r3, #4
 80031fa:	e008      	b.n	800320e <HAL_GPIO_Init+0x1ee>
 80031fc:	2307      	movs	r3, #7
 80031fe:	e006      	b.n	800320e <HAL_GPIO_Init+0x1ee>
 8003200:	2303      	movs	r3, #3
 8003202:	e004      	b.n	800320e <HAL_GPIO_Init+0x1ee>
 8003204:	2302      	movs	r3, #2
 8003206:	e002      	b.n	800320e <HAL_GPIO_Init+0x1ee>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_GPIO_Init+0x1ee>
 800320c:	2300      	movs	r3, #0
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	f002 0203 	and.w	r2, r2, #3
 8003214:	0092      	lsls	r2, r2, #2
 8003216:	4093      	lsls	r3, r2
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800321e:	4937      	ldr	r1, [pc, #220]	; (80032fc <HAL_GPIO_Init+0x2dc>)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	3302      	adds	r3, #2
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800322c:	4b38      	ldr	r3, [pc, #224]	; (8003310 <HAL_GPIO_Init+0x2f0>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	43db      	mvns	r3, r3
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003250:	4a2f      	ldr	r2, [pc, #188]	; (8003310 <HAL_GPIO_Init+0x2f0>)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003256:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <HAL_GPIO_Init+0x2f0>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	43db      	mvns	r3, r3
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800327a:	4a25      	ldr	r2, [pc, #148]	; (8003310 <HAL_GPIO_Init+0x2f0>)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003280:	4b23      	ldr	r3, [pc, #140]	; (8003310 <HAL_GPIO_Init+0x2f0>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	43db      	mvns	r3, r3
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032a4:	4a1a      	ldr	r2, [pc, #104]	; (8003310 <HAL_GPIO_Init+0x2f0>)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032aa:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_GPIO_Init+0x2f0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ce:	4a10      	ldr	r2, [pc, #64]	; (8003310 <HAL_GPIO_Init+0x2f0>)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3301      	adds	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f47f aea3 	bne.w	8003030 <HAL_GPIO_Init+0x10>
  }
}
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40010000 	.word	0x40010000
 8003300:	48000400 	.word	0x48000400
 8003304:	48000800 	.word	0x48000800
 8003308:	48000c00 	.word	0x48000c00
 800330c:	48001000 	.word	0x48001000
 8003310:	40010400 	.word	0x40010400

08003314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
 8003320:	4613      	mov	r3, r2
 8003322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003324:	787b      	ldrb	r3, [r7, #1]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003330:	e002      	b.n	8003338 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003332:	887a      	ldrh	r2, [r7, #2]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <HAL_PWREx_GetVoltageRange+0x18>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40007000 	.word	0x40007000

08003360 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336e:	d130      	bne.n	80033d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003370:	4b23      	ldr	r3, [pc, #140]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337c:	d038      	beq.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800337e:	4b20      	ldr	r3, [pc, #128]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003386:	4a1e      	ldr	r2, [pc, #120]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800338c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800338e:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2232      	movs	r2, #50	; 0x32
 8003394:	fb02 f303 	mul.w	r3, r2, r3
 8003398:	4a1b      	ldr	r2, [pc, #108]	; (8003408 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	0c9b      	lsrs	r3, r3, #18
 80033a0:	3301      	adds	r3, #1
 80033a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033a4:	e002      	b.n	80033ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b8:	d102      	bne.n	80033c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f2      	bne.n	80033a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033cc:	d110      	bne.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e00f      	b.n	80033f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033d2:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033de:	d007      	beq.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033e0:	4b07      	ldr	r3, [pc, #28]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033e8:	4a05      	ldr	r2, [pc, #20]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40007000 	.word	0x40007000
 8003404:	20000020 	.word	0x20000020
 8003408:	431bde83 	.word	0x431bde83

0800340c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d102      	bne.n	8003420 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	f000 bc02 	b.w	8003c24 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003420:	4b96      	ldr	r3, [pc, #600]	; (800367c <HAL_RCC_OscConfig+0x270>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 030c 	and.w	r3, r3, #12
 8003428:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800342a:	4b94      	ldr	r3, [pc, #592]	; (800367c <HAL_RCC_OscConfig+0x270>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80e4 	beq.w	800360a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d007      	beq.n	8003458 <HAL_RCC_OscConfig+0x4c>
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2b0c      	cmp	r3, #12
 800344c:	f040 808b 	bne.w	8003566 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b01      	cmp	r3, #1
 8003454:	f040 8087 	bne.w	8003566 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003458:	4b88      	ldr	r3, [pc, #544]	; (800367c <HAL_RCC_OscConfig+0x270>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_OscConfig+0x64>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e3d9      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1a      	ldr	r2, [r3, #32]
 8003474:	4b81      	ldr	r3, [pc, #516]	; (800367c <HAL_RCC_OscConfig+0x270>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <HAL_RCC_OscConfig+0x7e>
 8003480:	4b7e      	ldr	r3, [pc, #504]	; (800367c <HAL_RCC_OscConfig+0x270>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003488:	e005      	b.n	8003496 <HAL_RCC_OscConfig+0x8a>
 800348a:	4b7c      	ldr	r3, [pc, #496]	; (800367c <HAL_RCC_OscConfig+0x270>)
 800348c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003496:	4293      	cmp	r3, r2
 8003498:	d223      	bcs.n	80034e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fd8c 	bl	8003fbc <RCC_SetFlashLatencyFromMSIRange>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e3ba      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ae:	4b73      	ldr	r3, [pc, #460]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a72      	ldr	r2, [pc, #456]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80034b4:	f043 0308 	orr.w	r3, r3, #8
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b70      	ldr	r3, [pc, #448]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	496d      	ldr	r1, [pc, #436]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034cc:	4b6b      	ldr	r3, [pc, #428]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	4968      	ldr	r1, [pc, #416]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
 80034e0:	e025      	b.n	800352e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034e2:	4b66      	ldr	r3, [pc, #408]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a65      	ldr	r2, [pc, #404]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80034e8:	f043 0308 	orr.w	r3, r3, #8
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	4b63      	ldr	r3, [pc, #396]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	4960      	ldr	r1, [pc, #384]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003500:	4b5e      	ldr	r3, [pc, #376]	; (800367c <HAL_RCC_OscConfig+0x270>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	495b      	ldr	r1, [pc, #364]	; (800367c <HAL_RCC_OscConfig+0x270>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fd4c 	bl	8003fbc <RCC_SetFlashLatencyFromMSIRange>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e37a      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800352e:	f000 fc81 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8003532:	4602      	mov	r2, r0
 8003534:	4b51      	ldr	r3, [pc, #324]	; (800367c <HAL_RCC_OscConfig+0x270>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	4950      	ldr	r1, [pc, #320]	; (8003680 <HAL_RCC_OscConfig+0x274>)
 8003540:	5ccb      	ldrb	r3, [r1, r3]
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	fa22 f303 	lsr.w	r3, r2, r3
 800354a:	4a4e      	ldr	r2, [pc, #312]	; (8003684 <HAL_RCC_OscConfig+0x278>)
 800354c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800354e:	4b4e      	ldr	r3, [pc, #312]	; (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fbfe 	bl	8002d54 <HAL_InitTick>
 8003558:	4603      	mov	r3, r0
 800355a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d052      	beq.n	8003608 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	e35e      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d032      	beq.n	80035d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800356e:	4b43      	ldr	r3, [pc, #268]	; (800367c <HAL_RCC_OscConfig+0x270>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a42      	ldr	r2, [pc, #264]	; (800367c <HAL_RCC_OscConfig+0x270>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800357a:	f7ff fc3b 	bl	8002df4 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003582:	f7ff fc37 	bl	8002df4 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e347      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003594:	4b39      	ldr	r3, [pc, #228]	; (800367c <HAL_RCC_OscConfig+0x270>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035a0:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a35      	ldr	r2, [pc, #212]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035a6:	f043 0308 	orr.w	r3, r3, #8
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b33      	ldr	r3, [pc, #204]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4930      	ldr	r1, [pc, #192]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035be:	4b2f      	ldr	r3, [pc, #188]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	492b      	ldr	r1, [pc, #172]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	604b      	str	r3, [r1, #4]
 80035d2:	e01a      	b.n	800360a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035d4:	4b29      	ldr	r3, [pc, #164]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a28      	ldr	r2, [pc, #160]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035e0:	f7ff fc08 	bl	8002df4 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035e8:	f7ff fc04 	bl	8002df4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e314      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035fa:	4b20      	ldr	r3, [pc, #128]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x1dc>
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003608:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d073      	beq.n	80036fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b08      	cmp	r3, #8
 800361a:	d005      	beq.n	8003628 <HAL_RCC_OscConfig+0x21c>
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d10e      	bne.n	8003640 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b03      	cmp	r3, #3
 8003626:	d10b      	bne.n	8003640 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	4b14      	ldr	r3, [pc, #80]	; (800367c <HAL_RCC_OscConfig+0x270>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d063      	beq.n	80036fc <HAL_RCC_OscConfig+0x2f0>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d15f      	bne.n	80036fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e2f1      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003648:	d106      	bne.n	8003658 <HAL_RCC_OscConfig+0x24c>
 800364a:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_RCC_OscConfig+0x270>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a0b      	ldr	r2, [pc, #44]	; (800367c <HAL_RCC_OscConfig+0x270>)
 8003650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e025      	b.n	80036a4 <HAL_RCC_OscConfig+0x298>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003660:	d114      	bne.n	800368c <HAL_RCC_OscConfig+0x280>
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_RCC_OscConfig+0x270>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a05      	ldr	r2, [pc, #20]	; (800367c <HAL_RCC_OscConfig+0x270>)
 8003668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_RCC_OscConfig+0x270>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a02      	ldr	r2, [pc, #8]	; (800367c <HAL_RCC_OscConfig+0x270>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e013      	b.n	80036a4 <HAL_RCC_OscConfig+0x298>
 800367c:	40021000 	.word	0x40021000
 8003680:	08009fe0 	.word	0x08009fe0
 8003684:	20000020 	.word	0x20000020
 8003688:	20000024 	.word	0x20000024
 800368c:	4ba0      	ldr	r3, [pc, #640]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a9f      	ldr	r2, [pc, #636]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 8003692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	4b9d      	ldr	r3, [pc, #628]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a9c      	ldr	r2, [pc, #624]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 800369e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d013      	beq.n	80036d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7ff fba2 	bl	8002df4 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b4:	f7ff fb9e 	bl	8002df4 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	; 0x64
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e2ae      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036c6:	4b92      	ldr	r3, [pc, #584]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0x2a8>
 80036d2:	e014      	b.n	80036fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7ff fb8e 	bl	8002df4 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036dc:	f7ff fb8a 	bl	8002df4 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	; 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e29a      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ee:	4b88      	ldr	r3, [pc, #544]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x2d0>
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d060      	beq.n	80037cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b04      	cmp	r3, #4
 800370e:	d005      	beq.n	800371c <HAL_RCC_OscConfig+0x310>
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b0c      	cmp	r3, #12
 8003714:	d119      	bne.n	800374a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d116      	bne.n	800374a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800371c:	4b7c      	ldr	r3, [pc, #496]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_RCC_OscConfig+0x328>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e277      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003734:	4b76      	ldr	r3, [pc, #472]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	061b      	lsls	r3, r3, #24
 8003742:	4973      	ldr	r1, [pc, #460]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 8003744:	4313      	orrs	r3, r2
 8003746:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003748:	e040      	b.n	80037cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d023      	beq.n	800379a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003752:	4b6f      	ldr	r3, [pc, #444]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a6e      	ldr	r2, [pc, #440]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 8003758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7ff fb49 	bl	8002df4 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003766:	f7ff fb45 	bl	8002df4 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e255      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003778:	4b65      	ldr	r3, [pc, #404]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003784:	4b62      	ldr	r3, [pc, #392]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	061b      	lsls	r3, r3, #24
 8003792:	495f      	ldr	r1, [pc, #380]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
 8003798:	e018      	b.n	80037cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800379a:	4b5d      	ldr	r3, [pc, #372]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a5c      	ldr	r2, [pc, #368]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 80037a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7ff fb25 	bl	8002df4 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ae:	f7ff fb21 	bl	8002df4 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e231      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037c0:	4b53      	ldr	r3, [pc, #332]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f0      	bne.n	80037ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d03c      	beq.n	8003852 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01c      	beq.n	800381a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e0:	4b4b      	ldr	r3, [pc, #300]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 80037e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e6:	4a4a      	ldr	r2, [pc, #296]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7ff fb00 	bl	8002df4 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f8:	f7ff fafc 	bl	8002df4 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e20c      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800380a:	4b41      	ldr	r3, [pc, #260]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 800380c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ef      	beq.n	80037f8 <HAL_RCC_OscConfig+0x3ec>
 8003818:	e01b      	b.n	8003852 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800381a:	4b3d      	ldr	r3, [pc, #244]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 800381c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003820:	4a3b      	ldr	r2, [pc, #236]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7ff fae3 	bl	8002df4 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003832:	f7ff fadf 	bl	8002df4 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e1ef      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003844:	4b32      	ldr	r3, [pc, #200]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 8003846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1ef      	bne.n	8003832 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 80a6 	beq.w	80039ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003860:	2300      	movs	r3, #0
 8003862:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003864:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10d      	bne.n	800388c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	4a26      	ldr	r2, [pc, #152]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 8003876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387a:	6593      	str	r3, [r2, #88]	; 0x58
 800387c:	4b24      	ldr	r3, [pc, #144]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003888:	2301      	movs	r3, #1
 800388a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800388c:	4b21      	ldr	r3, [pc, #132]	; (8003914 <HAL_RCC_OscConfig+0x508>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d118      	bne.n	80038ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003898:	4b1e      	ldr	r3, [pc, #120]	; (8003914 <HAL_RCC_OscConfig+0x508>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <HAL_RCC_OscConfig+0x508>)
 800389e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a4:	f7ff faa6 	bl	8002df4 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ac:	f7ff faa2 	bl	8002df4 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e1b2      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <HAL_RCC_OscConfig+0x508>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d108      	bne.n	80038e4 <HAL_RCC_OscConfig+0x4d8>
 80038d2:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	4a0d      	ldr	r2, [pc, #52]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e2:	e029      	b.n	8003938 <HAL_RCC_OscConfig+0x52c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	d115      	bne.n	8003918 <HAL_RCC_OscConfig+0x50c>
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	4a07      	ldr	r2, [pc, #28]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 80038f4:	f043 0304 	orr.w	r3, r3, #4
 80038f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	4a03      	ldr	r2, [pc, #12]	; (8003910 <HAL_RCC_OscConfig+0x504>)
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800390c:	e014      	b.n	8003938 <HAL_RCC_OscConfig+0x52c>
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	40007000 	.word	0x40007000
 8003918:	4b9a      	ldr	r3, [pc, #616]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	4a99      	ldr	r2, [pc, #612]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003928:	4b96      	ldr	r3, [pc, #600]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	4a95      	ldr	r2, [pc, #596]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003930:	f023 0304 	bic.w	r3, r3, #4
 8003934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d016      	beq.n	800396e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7ff fa58 	bl	8002df4 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003946:	e00a      	b.n	800395e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003948:	f7ff fa54 	bl	8002df4 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e162      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800395e:	4b89      	ldr	r3, [pc, #548]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ed      	beq.n	8003948 <HAL_RCC_OscConfig+0x53c>
 800396c:	e015      	b.n	800399a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396e:	f7ff fa41 	bl	8002df4 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003974:	e00a      	b.n	800398c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003976:	f7ff fa3d 	bl	8002df4 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	; 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e14b      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800398c:	4b7d      	ldr	r3, [pc, #500]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1ed      	bne.n	8003976 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800399a:	7ffb      	ldrb	r3, [r7, #31]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d105      	bne.n	80039ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a0:	4b78      	ldr	r3, [pc, #480]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 80039a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a4:	4a77      	ldr	r2, [pc, #476]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 80039a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d03c      	beq.n	8003a32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01c      	beq.n	80039fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039c0:	4b70      	ldr	r3, [pc, #448]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 80039c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039c6:	4a6f      	ldr	r2, [pc, #444]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7ff fa10 	bl	8002df4 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039d8:	f7ff fa0c 	bl	8002df4 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e11c      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039ea:	4b66      	ldr	r3, [pc, #408]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 80039ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0ef      	beq.n	80039d8 <HAL_RCC_OscConfig+0x5cc>
 80039f8:	e01b      	b.n	8003a32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039fa:	4b62      	ldr	r3, [pc, #392]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 80039fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a00:	4a60      	ldr	r2, [pc, #384]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0a:	f7ff f9f3 	bl	8002df4 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a12:	f7ff f9ef 	bl	8002df4 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e0ff      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a24:	4b57      	ldr	r3, [pc, #348]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003a26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ef      	bne.n	8003a12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80f3 	beq.w	8003c22 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	f040 80c9 	bne.w	8003bd8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a46:	4b4f      	ldr	r3, [pc, #316]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f003 0203 	and.w	r2, r3, #3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d12c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	3b01      	subs	r3, #1
 8003a66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d123      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d11b      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d113      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a96:	085b      	lsrs	r3, r3, #1
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d109      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	085b      	lsrs	r3, r3, #1
 8003aac:	3b01      	subs	r3, #1
 8003aae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d06b      	beq.n	8003b8c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b0c      	cmp	r3, #12
 8003ab8:	d062      	beq.n	8003b80 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003aba:	4b32      	ldr	r3, [pc, #200]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0ac      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003aca:	4b2e      	ldr	r3, [pc, #184]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2d      	ldr	r2, [pc, #180]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003ad0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ad4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ad6:	f7ff f98d 	bl	8002df4 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ade:	f7ff f989 	bl	8002df4 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e099      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003af0:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f0      	bne.n	8003ade <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003afc:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	4b21      	ldr	r3, [pc, #132]	; (8003b88 <HAL_RCC_OscConfig+0x77c>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b0c:	3a01      	subs	r2, #1
 8003b0e:	0112      	lsls	r2, r2, #4
 8003b10:	4311      	orrs	r1, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b16:	0212      	lsls	r2, r2, #8
 8003b18:	4311      	orrs	r1, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b1e:	0852      	lsrs	r2, r2, #1
 8003b20:	3a01      	subs	r2, #1
 8003b22:	0552      	lsls	r2, r2, #21
 8003b24:	4311      	orrs	r1, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b2a:	0852      	lsrs	r2, r2, #1
 8003b2c:	3a01      	subs	r2, #1
 8003b2e:	0652      	lsls	r2, r2, #25
 8003b30:	4311      	orrs	r1, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b36:	06d2      	lsls	r2, r2, #27
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	4912      	ldr	r1, [pc, #72]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b40:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0f      	ldr	r2, [pc, #60]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a0c      	ldr	r2, [pc, #48]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b58:	f7ff f94c 	bl	8002df4 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7ff f948 	bl	8002df4 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e058      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b72:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b7e:	e050      	b.n	8003c22 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e04f      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
 8003b84:	40021000 	.word	0x40021000
 8003b88:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b8c:	4b27      	ldr	r3, [pc, #156]	; (8003c2c <HAL_RCC_OscConfig+0x820>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d144      	bne.n	8003c22 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b98:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <HAL_RCC_OscConfig+0x820>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a23      	ldr	r2, [pc, #140]	; (8003c2c <HAL_RCC_OscConfig+0x820>)
 8003b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ba4:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <HAL_RCC_OscConfig+0x820>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <HAL_RCC_OscConfig+0x820>)
 8003baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bb0:	f7ff f920 	bl	8002df4 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7ff f91c 	bl	8002df4 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e02c      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bca:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <HAL_RCC_OscConfig+0x820>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x7ac>
 8003bd6:	e024      	b.n	8003c22 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b0c      	cmp	r3, #12
 8003bdc:	d01f      	beq.n	8003c1e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bde:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <HAL_RCC_OscConfig+0x820>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <HAL_RCC_OscConfig+0x820>)
 8003be4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bea:	f7ff f903 	bl	8002df4 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf2:	f7ff f8ff 	bl	8002df4 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e00f      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_RCC_OscConfig+0x820>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f0      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_RCC_OscConfig+0x820>)
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	4905      	ldr	r1, [pc, #20]	; (8003c2c <HAL_RCC_OscConfig+0x820>)
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <HAL_RCC_OscConfig+0x824>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	60cb      	str	r3, [r1, #12]
 8003c1c:	e001      	b.n	8003c22 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3720      	adds	r7, #32
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	feeefffc 	.word	0xfeeefffc

08003c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0e7      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c48:	4b75      	ldr	r3, [pc, #468]	; (8003e20 <HAL_RCC_ClockConfig+0x1ec>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d910      	bls.n	8003c78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	4b72      	ldr	r3, [pc, #456]	; (8003e20 <HAL_RCC_ClockConfig+0x1ec>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 0207 	bic.w	r2, r3, #7
 8003c5e:	4970      	ldr	r1, [pc, #448]	; (8003e20 <HAL_RCC_ClockConfig+0x1ec>)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b6e      	ldr	r3, [pc, #440]	; (8003e20 <HAL_RCC_ClockConfig+0x1ec>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0cf      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d010      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	4b66      	ldr	r3, [pc, #408]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d908      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b63      	ldr	r3, [pc, #396]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4960      	ldr	r1, [pc, #384]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d04c      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cba:	4b5a      	ldr	r3, [pc, #360]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d121      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e0a6      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d107      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cd2:	4b54      	ldr	r3, [pc, #336]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d115      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e09a      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cea:	4b4e      	ldr	r3, [pc, #312]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e08e      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cfa:	4b4a      	ldr	r3, [pc, #296]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e086      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d0a:	4b46      	ldr	r3, [pc, #280]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 0203 	bic.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4943      	ldr	r1, [pc, #268]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1c:	f7ff f86a 	bl	8002df4 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d24:	f7ff f866 	bl	8002df4 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e06e      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	4b3a      	ldr	r3, [pc, #232]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 020c 	and.w	r2, r3, #12
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d1eb      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d010      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	4b31      	ldr	r3, [pc, #196]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d208      	bcs.n	8003d7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d68:	4b2e      	ldr	r3, [pc, #184]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	492b      	ldr	r1, [pc, #172]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d7a:	4b29      	ldr	r3, [pc, #164]	; (8003e20 <HAL_RCC_ClockConfig+0x1ec>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d210      	bcs.n	8003daa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d88:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <HAL_RCC_ClockConfig+0x1ec>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f023 0207 	bic.w	r2, r3, #7
 8003d90:	4923      	ldr	r1, [pc, #140]	; (8003e20 <HAL_RCC_ClockConfig+0x1ec>)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d98:	4b21      	ldr	r3, [pc, #132]	; (8003e20 <HAL_RCC_ClockConfig+0x1ec>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d001      	beq.n	8003daa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e036      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db6:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	4918      	ldr	r1, [pc, #96]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d009      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd4:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4910      	ldr	r1, [pc, #64]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003de8:	f000 f824 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	490b      	ldr	r1, [pc, #44]	; (8003e28 <HAL_RCC_ClockConfig+0x1f4>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
 8003e04:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003e06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_RCC_ClockConfig+0x1fc>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe ffa1 	bl	8002d54 <HAL_InitTick>
 8003e12:	4603      	mov	r3, r0
 8003e14:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e16:	7afb      	ldrb	r3, [r7, #11]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40022000 	.word	0x40022000
 8003e24:	40021000 	.word	0x40021000
 8003e28:	08009fe0 	.word	0x08009fe0
 8003e2c:	20000020 	.word	0x20000020
 8003e30:	20000024 	.word	0x20000024

08003e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b089      	sub	sp, #36	; 0x24
 8003e38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e42:	4b3e      	ldr	r3, [pc, #248]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e4c:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0x34>
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b0c      	cmp	r3, #12
 8003e60:	d121      	bne.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d11e      	bne.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e68:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e74:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e7a:	0a1b      	lsrs	r3, r3, #8
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	e005      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e84:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e90:	4a2b      	ldr	r2, [pc, #172]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10d      	bne.n	8003ebc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d102      	bne.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eac:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	e004      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003eb8:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x114>)
 8003eba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	d134      	bne.n	8003f2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ec2:	4b1e      	ldr	r3, [pc, #120]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d003      	beq.n	8003eda <HAL_RCC_GetSysClockFreq+0xa6>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d003      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xac>
 8003ed8:	e005      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003eda:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003edc:	617b      	str	r3, [r7, #20]
      break;
 8003ede:	e005      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ee0:	4b19      	ldr	r3, [pc, #100]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ee2:	617b      	str	r3, [r7, #20]
      break;
 8003ee4:	e002      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	617b      	str	r3, [r7, #20]
      break;
 8003eea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eec:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003efa:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	fb03 f202 	mul.w	r2, r3, r2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f12:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	0e5b      	lsrs	r3, r3, #25
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f2c:	69bb      	ldr	r3, [r7, #24]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3724      	adds	r7, #36	; 0x24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	08009ff8 	.word	0x08009ff8
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	007a1200 	.word	0x007a1200

08003f4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000020 	.word	0x20000020

08003f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f68:	f7ff fff0 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	4904      	ldr	r1, [pc, #16]	; (8003f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	08009ff0 	.word	0x08009ff0

08003f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f94:	f7ff ffda 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	0adb      	lsrs	r3, r3, #11
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4904      	ldr	r1, [pc, #16]	; (8003fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	08009ff0 	.word	0x08009ff0

08003fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fc8:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fd4:	f7ff f9b6 	bl	8003344 <HAL_PWREx_GetVoltageRange>
 8003fd8:	6178      	str	r0, [r7, #20]
 8003fda:	e014      	b.n	8004006 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	4a24      	ldr	r2, [pc, #144]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe8:	4b22      	ldr	r3, [pc, #136]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ff4:	f7ff f9a6 	bl	8003344 <HAL_PWREx_GetVoltageRange>
 8003ff8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ffa:	4b1e      	ldr	r3, [pc, #120]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	4a1d      	ldr	r2, [pc, #116]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004004:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400c:	d10b      	bne.n	8004026 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b80      	cmp	r3, #128	; 0x80
 8004012:	d919      	bls.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2ba0      	cmp	r3, #160	; 0xa0
 8004018:	d902      	bls.n	8004020 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800401a:	2302      	movs	r3, #2
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	e013      	b.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004020:	2301      	movs	r3, #1
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	e010      	b.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b80      	cmp	r3, #128	; 0x80
 800402a:	d902      	bls.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800402c:	2303      	movs	r3, #3
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	e00a      	b.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b80      	cmp	r3, #128	; 0x80
 8004036:	d102      	bne.n	800403e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004038:	2302      	movs	r3, #2
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	e004      	b.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b70      	cmp	r3, #112	; 0x70
 8004042:	d101      	bne.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004044:	2301      	movs	r3, #1
 8004046:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f023 0207 	bic.w	r2, r3, #7
 8004050:	4909      	ldr	r1, [pc, #36]	; (8004078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004058:	4b07      	ldr	r3, [pc, #28]	; (8004078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	429a      	cmp	r2, r3
 8004064:	d001      	beq.n	800406a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40021000 	.word	0x40021000
 8004078:	40022000 	.word	0x40022000

0800407c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004084:	2300      	movs	r3, #0
 8004086:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004088:	2300      	movs	r3, #0
 800408a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004094:	2b00      	cmp	r3, #0
 8004096:	d031      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040a0:	d01a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80040a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040a6:	d814      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d009      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040b0:	d10f      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80040b2:	4b5d      	ldr	r3, [pc, #372]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	4a5c      	ldr	r2, [pc, #368]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040be:	e00c      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3304      	adds	r3, #4
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fa22 	bl	8004510 <RCCEx_PLLSAI1_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040d0:	e003      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	74fb      	strb	r3, [r7, #19]
      break;
 80040d6:	e000      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80040d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10b      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040e0:	4b51      	ldr	r3, [pc, #324]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	494e      	ldr	r1, [pc, #312]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040f6:	e001      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
 80040fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 809e 	beq.w	8004246 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800410a:	2300      	movs	r3, #0
 800410c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800410e:	4b46      	ldr	r3, [pc, #280]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800411e:	2300      	movs	r3, #0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00d      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004124:	4b40      	ldr	r3, [pc, #256]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004128:	4a3f      	ldr	r2, [pc, #252]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800412a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412e:	6593      	str	r3, [r2, #88]	; 0x58
 8004130:	4b3d      	ldr	r3, [pc, #244]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800413c:	2301      	movs	r3, #1
 800413e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004140:	4b3a      	ldr	r3, [pc, #232]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a39      	ldr	r2, [pc, #228]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800414c:	f7fe fe52 	bl	8002df4 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004152:	e009      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004154:	f7fe fe4e 	bl	8002df4 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d902      	bls.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	74fb      	strb	r3, [r7, #19]
        break;
 8004166:	e005      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004168:	4b30      	ldr	r3, [pc, #192]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0ef      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004174:	7cfb      	ldrb	r3, [r7, #19]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d15a      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800417a:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004184:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01e      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	429a      	cmp	r2, r3
 8004194:	d019      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004196:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041a2:	4b21      	ldr	r3, [pc, #132]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a8:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041b2:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b8:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041c2:	4a19      	ldr	r2, [pc, #100]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d016      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fe fe0e 	bl	8002df4 <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041da:	e00b      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041dc:	f7fe fe0a 	bl	8002df4 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d902      	bls.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	74fb      	strb	r3, [r7, #19]
            break;
 80041f2:	e006      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0ec      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004202:	7cfb      	ldrb	r3, [r7, #19]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10b      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004208:	4b07      	ldr	r3, [pc, #28]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004216:	4904      	ldr	r1, [pc, #16]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800421e:	e009      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004220:	7cfb      	ldrb	r3, [r7, #19]
 8004222:	74bb      	strb	r3, [r7, #18]
 8004224:	e006      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004226:	bf00      	nop
 8004228:	40021000 	.word	0x40021000
 800422c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004234:	7c7b      	ldrb	r3, [r7, #17]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d105      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800423a:	4b8d      	ldr	r3, [pc, #564]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800423c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423e:	4a8c      	ldr	r2, [pc, #560]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004244:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004252:	4b87      	ldr	r3, [pc, #540]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004258:	f023 0203 	bic.w	r2, r3, #3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	4983      	ldr	r1, [pc, #524]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004274:	4b7e      	ldr	r3, [pc, #504]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	f023 020c 	bic.w	r2, r3, #12
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	497b      	ldr	r1, [pc, #492]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004296:	4b76      	ldr	r3, [pc, #472]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	4972      	ldr	r1, [pc, #456]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042b8:	4b6d      	ldr	r3, [pc, #436]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	496a      	ldr	r1, [pc, #424]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042da:	4b65      	ldr	r3, [pc, #404]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e8:	4961      	ldr	r1, [pc, #388]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042fc:	4b5c      	ldr	r3, [pc, #368]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	4959      	ldr	r1, [pc, #356]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800431e:	4b54      	ldr	r3, [pc, #336]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	4950      	ldr	r1, [pc, #320]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004340:	4b4b      	ldr	r3, [pc, #300]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	4948      	ldr	r1, [pc, #288]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004362:	4b43      	ldr	r3, [pc, #268]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	493f      	ldr	r1, [pc, #252]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d028      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004384:	4b3a      	ldr	r3, [pc, #232]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004392:	4937      	ldr	r1, [pc, #220]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a2:	d106      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043a4:	4b32      	ldr	r3, [pc, #200]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4a31      	ldr	r2, [pc, #196]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ae:	60d3      	str	r3, [r2, #12]
 80043b0:	e011      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043ba:	d10c      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	2101      	movs	r1, #1
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f8a4 	bl	8004510 <RCCEx_PLLSAI1_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80043d2:	7cfb      	ldrb	r3, [r7, #19]
 80043d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d028      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043e2:	4b23      	ldr	r3, [pc, #140]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f0:	491f      	ldr	r1, [pc, #124]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004400:	d106      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004402:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	4a1a      	ldr	r2, [pc, #104]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800440c:	60d3      	str	r3, [r2, #12]
 800440e:	e011      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004414:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004418:	d10c      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3304      	adds	r3, #4
 800441e:	2101      	movs	r1, #1
 8004420:	4618      	mov	r0, r3
 8004422:	f000 f875 	bl	8004510 <RCCEx_PLLSAI1_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800442a:	7cfb      	ldrb	r3, [r7, #19]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d02b      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444e:	4908      	ldr	r1, [pc, #32]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800445e:	d109      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004460:	4b03      	ldr	r3, [pc, #12]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a02      	ldr	r2, [pc, #8]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800446a:	60d3      	str	r3, [r2, #12]
 800446c:	e014      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800446e:	bf00      	nop
 8004470:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800447c:	d10c      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3304      	adds	r3, #4
 8004482:	2101      	movs	r1, #1
 8004484:	4618      	mov	r0, r3
 8004486:	f000 f843 	bl	8004510 <RCCEx_PLLSAI1_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800448e:	7cfb      	ldrb	r3, [r7, #19]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004494:	7cfb      	ldrb	r3, [r7, #19]
 8004496:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01c      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044a4:	4b19      	ldr	r3, [pc, #100]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	4916      	ldr	r1, [pc, #88]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044c2:	d10c      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	2102      	movs	r1, #2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f820 	bl	8004510 <RCCEx_PLLSAI1_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80044da:	7cfb      	ldrb	r3, [r7, #19]
 80044dc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	4904      	ldr	r1, [pc, #16]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004500:	7cbb      	ldrb	r3, [r7, #18]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000

08004510 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800451e:	4b74      	ldr	r3, [pc, #464]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d018      	beq.n	800455c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800452a:	4b71      	ldr	r3, [pc, #452]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f003 0203 	and.w	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d10d      	bne.n	8004556 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
       ||
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004542:	4b6b      	ldr	r3, [pc, #428]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
       ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d047      	beq.n	80045e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
 800455a:	e044      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d018      	beq.n	8004596 <RCCEx_PLLSAI1_Config+0x86>
 8004564:	2b03      	cmp	r3, #3
 8004566:	d825      	bhi.n	80045b4 <RCCEx_PLLSAI1_Config+0xa4>
 8004568:	2b01      	cmp	r3, #1
 800456a:	d002      	beq.n	8004572 <RCCEx_PLLSAI1_Config+0x62>
 800456c:	2b02      	cmp	r3, #2
 800456e:	d009      	beq.n	8004584 <RCCEx_PLLSAI1_Config+0x74>
 8004570:	e020      	b.n	80045b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004572:	4b5f      	ldr	r3, [pc, #380]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11d      	bne.n	80045ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004582:	e01a      	b.n	80045ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004584:	4b5a      	ldr	r3, [pc, #360]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458c:	2b00      	cmp	r3, #0
 800458e:	d116      	bne.n	80045be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004594:	e013      	b.n	80045be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004596:	4b56      	ldr	r3, [pc, #344]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10f      	bne.n	80045c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045a2:	4b53      	ldr	r3, [pc, #332]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045b2:	e006      	b.n	80045c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      break;
 80045b8:	e004      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045ba:	bf00      	nop
 80045bc:	e002      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045be:	bf00      	nop
 80045c0:	e000      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10d      	bne.n	80045e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045ca:	4b49      	ldr	r3, [pc, #292]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6819      	ldr	r1, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	3b01      	subs	r3, #1
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	430b      	orrs	r3, r1
 80045e0:	4943      	ldr	r1, [pc, #268]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d17c      	bne.n	80046e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045ec:	4b40      	ldr	r3, [pc, #256]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a3f      	ldr	r2, [pc, #252]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f8:	f7fe fbfc 	bl	8002df4 <HAL_GetTick>
 80045fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045fe:	e009      	b.n	8004614 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004600:	f7fe fbf8 	bl	8002df4 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d902      	bls.n	8004614 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	73fb      	strb	r3, [r7, #15]
        break;
 8004612:	e005      	b.n	8004620 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004614:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1ef      	bne.n	8004600 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d15f      	bne.n	80046e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d110      	bne.n	800464e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800462c:	4b30      	ldr	r3, [pc, #192]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004634:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6892      	ldr	r2, [r2, #8]
 800463c:	0211      	lsls	r1, r2, #8
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	68d2      	ldr	r2, [r2, #12]
 8004642:	06d2      	lsls	r2, r2, #27
 8004644:	430a      	orrs	r2, r1
 8004646:	492a      	ldr	r1, [pc, #168]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004648:	4313      	orrs	r3, r2
 800464a:	610b      	str	r3, [r1, #16]
 800464c:	e027      	b.n	800469e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d112      	bne.n	800467a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004654:	4b26      	ldr	r3, [pc, #152]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800465c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6892      	ldr	r2, [r2, #8]
 8004664:	0211      	lsls	r1, r2, #8
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6912      	ldr	r2, [r2, #16]
 800466a:	0852      	lsrs	r2, r2, #1
 800466c:	3a01      	subs	r2, #1
 800466e:	0552      	lsls	r2, r2, #21
 8004670:	430a      	orrs	r2, r1
 8004672:	491f      	ldr	r1, [pc, #124]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004674:	4313      	orrs	r3, r2
 8004676:	610b      	str	r3, [r1, #16]
 8004678:	e011      	b.n	800469e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004682:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6892      	ldr	r2, [r2, #8]
 800468a:	0211      	lsls	r1, r2, #8
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6952      	ldr	r2, [r2, #20]
 8004690:	0852      	lsrs	r2, r2, #1
 8004692:	3a01      	subs	r2, #1
 8004694:	0652      	lsls	r2, r2, #25
 8004696:	430a      	orrs	r2, r1
 8004698:	4915      	ldr	r1, [pc, #84]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800469a:	4313      	orrs	r3, r2
 800469c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800469e:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a13      	ldr	r2, [pc, #76]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046aa:	f7fe fba3 	bl	8002df4 <HAL_GetTick>
 80046ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046b0:	e009      	b.n	80046c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046b2:	f7fe fb9f 	bl	8002df4 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d902      	bls.n	80046c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	73fb      	strb	r3, [r7, #15]
          break;
 80046c4:	e005      	b.n	80046d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0ef      	beq.n	80046b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	4903      	ldr	r1, [pc, #12]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000

080046f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e095      	b.n	8004832 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	2b00      	cmp	r3, #0
 800470c:	d108      	bne.n	8004720 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004716:	d009      	beq.n	800472c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	61da      	str	r2, [r3, #28]
 800471e:	e005      	b.n	800472c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fc ff38 	bl	80015bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004762:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800476c:	d902      	bls.n	8004774 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	e002      	b.n	800477a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004778:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004782:	d007      	beq.n	8004794 <HAL_SPI_Init+0xa0>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800478c:	d002      	beq.n	8004794 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	ea42 0103 	orr.w	r1, r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	0c1b      	lsrs	r3, r3, #16
 80047f0:	f003 0204 	and.w	r2, r3, #4
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004810:	ea42 0103 	orr.w	r1, r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b08a      	sub	sp, #40	; 0x28
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004848:	2301      	movs	r3, #1
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_SPI_TransmitReceive+0x26>
 800485c:	2302      	movs	r3, #2
 800485e:	e1fb      	b.n	8004c58 <HAL_SPI_TransmitReceive+0x41e>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004868:	f7fe fac4 	bl	8002df4 <HAL_GetTick>
 800486c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004874:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800487c:	887b      	ldrh	r3, [r7, #2]
 800487e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004880:	887b      	ldrh	r3, [r7, #2]
 8004882:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004884:	7efb      	ldrb	r3, [r7, #27]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d00e      	beq.n	80048a8 <HAL_SPI_TransmitReceive+0x6e>
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004890:	d106      	bne.n	80048a0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d102      	bne.n	80048a0 <HAL_SPI_TransmitReceive+0x66>
 800489a:	7efb      	ldrb	r3, [r7, #27]
 800489c:	2b04      	cmp	r3, #4
 800489e:	d003      	beq.n	80048a8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048a6:	e1cd      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x80>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x80>
 80048b4:	887b      	ldrh	r3, [r7, #2]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048c0:	e1c0      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d003      	beq.n	80048d6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2205      	movs	r2, #5
 80048d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	887a      	ldrh	r2, [r7, #2]
 80048e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	887a      	ldrh	r2, [r7, #2]
 80048ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	887a      	ldrh	r2, [r7, #2]
 80048fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	887a      	ldrh	r2, [r7, #2]
 8004902:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004918:	d802      	bhi.n	8004920 <HAL_SPI_TransmitReceive+0xe6>
 800491a:	8a3b      	ldrh	r3, [r7, #16]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d908      	bls.n	8004932 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800492e:	605a      	str	r2, [r3, #4]
 8004930:	e007      	b.n	8004942 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004940:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d007      	beq.n	8004960 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800495e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004968:	d97c      	bls.n	8004a64 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SPI_TransmitReceive+0x13e>
 8004972:	8a7b      	ldrh	r3, [r7, #18]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d169      	bne.n	8004a4c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	881a      	ldrh	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	1c9a      	adds	r2, r3, #2
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800499c:	e056      	b.n	8004a4c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d11b      	bne.n	80049e4 <HAL_SPI_TransmitReceive+0x1aa>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d016      	beq.n	80049e4 <HAL_SPI_TransmitReceive+0x1aa>
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d113      	bne.n	80049e4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	881a      	ldrh	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	1c9a      	adds	r2, r3, #2
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d11c      	bne.n	8004a2c <HAL_SPI_TransmitReceive+0x1f2>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d016      	beq.n	8004a2c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	b292      	uxth	r2, r2
 8004a0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	1c9a      	adds	r2, r3, #2
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a2c:	f7fe f9e2 	bl	8002df4 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d807      	bhi.n	8004a4c <HAL_SPI_TransmitReceive+0x212>
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a42:	d003      	beq.n	8004a4c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a4a:	e0fb      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1a3      	bne.n	800499e <HAL_SPI_TransmitReceive+0x164>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d19d      	bne.n	800499e <HAL_SPI_TransmitReceive+0x164>
 8004a62:	e0df      	b.n	8004c24 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_SPI_TransmitReceive+0x23a>
 8004a6c:	8a7b      	ldrh	r3, [r7, #18]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	f040 80cb 	bne.w	8004c0a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d912      	bls.n	8004aa4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	881a      	ldrh	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	1c9a      	adds	r2, r3, #2
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b02      	subs	r3, #2
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aa2:	e0b2      	b.n	8004c0a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	7812      	ldrb	r2, [r2, #0]
 8004ab0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aca:	e09e      	b.n	8004c0a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d134      	bne.n	8004b44 <HAL_SPI_TransmitReceive+0x30a>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d02f      	beq.n	8004b44 <HAL_SPI_TransmitReceive+0x30a>
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d12c      	bne.n	8004b44 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d912      	bls.n	8004b1a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	881a      	ldrh	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	1c9a      	adds	r2, r3, #2
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b02      	subs	r3, #2
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b18:	e012      	b.n	8004b40 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	330c      	adds	r3, #12
 8004b24:	7812      	ldrb	r2, [r2, #0]
 8004b26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d148      	bne.n	8004be4 <HAL_SPI_TransmitReceive+0x3aa>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d042      	beq.n	8004be4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d923      	bls.n	8004bb2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	b292      	uxth	r2, r2
 8004b76:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	1c9a      	adds	r2, r3, #2
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b02      	subs	r3, #2
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d81f      	bhi.n	8004be0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bae:	605a      	str	r2, [r3, #4]
 8004bb0:	e016      	b.n	8004be0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f103 020c 	add.w	r2, r3, #12
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	7812      	ldrb	r2, [r2, #0]
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004be0:	2301      	movs	r3, #1
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004be4:	f7fe f906 	bl	8002df4 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d803      	bhi.n	8004bfc <HAL_SPI_TransmitReceive+0x3c2>
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfa:	d102      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x3c8>
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d103      	bne.n	8004c0a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004c08:	e01c      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f47f af5b 	bne.w	8004acc <HAL_SPI_TransmitReceive+0x292>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f47f af54 	bne.w	8004acc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f937 	bl	8004e9c <SPI_EndRxTxTransaction>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d006      	beq.n	8004c42 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	661a      	str	r2, [r3, #96]	; 0x60
 8004c40:	e000      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004c42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3728      	adds	r7, #40	; 0x28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c70:	f7fe f8c0 	bl	8002df4 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c80:	f7fe f8b8 	bl	8002df4 <HAL_GetTick>
 8004c84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c86:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	015b      	lsls	r3, r3, #5
 8004c8c:	0d1b      	lsrs	r3, r3, #20
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	fb02 f303 	mul.w	r3, r2, r3
 8004c94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c96:	e054      	b.n	8004d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9e:	d050      	beq.n	8004d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ca0:	f7fe f8a8 	bl	8002df4 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	69fa      	ldr	r2, [r7, #28]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d902      	bls.n	8004cb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d13d      	bne.n	8004d32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cce:	d111      	bne.n	8004cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd8:	d004      	beq.n	8004ce4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce2:	d107      	bne.n	8004cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfc:	d10f      	bne.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e017      	b.n	8004d62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	79fb      	ldrb	r3, [r7, #7]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d19b      	bne.n	8004c98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3720      	adds	r7, #32
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000020 	.word	0x20000020

08004d70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	; 0x28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d82:	f7fe f837 	bl	8002df4 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	4413      	add	r3, r2
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004d92:	f7fe f82f 	bl	8002df4 <HAL_GetTick>
 8004d96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004da0:	4b3d      	ldr	r3, [pc, #244]	; (8004e98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	00da      	lsls	r2, r3, #3
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	0d1b      	lsrs	r3, r3, #20
 8004db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004db8:	e060      	b.n	8004e7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004dc0:	d107      	bne.n	8004dd2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d104      	bne.n	8004dd2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d050      	beq.n	8004e7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dda:	f7fe f80b 	bl	8002df4 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d902      	bls.n	8004df0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d13d      	bne.n	8004e6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004dfe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e08:	d111      	bne.n	8004e2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e12:	d004      	beq.n	8004e1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1c:	d107      	bne.n	8004e2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e36:	d10f      	bne.n	8004e58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e010      	b.n	8004e8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4013      	ands	r3, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d196      	bne.n	8004dba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3728      	adds	r7, #40	; 0x28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000020 	.word	0x20000020

08004e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff ff5b 	bl	8004d70 <SPI_WaitFifoStateUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d007      	beq.n	8004ed0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e027      	b.n	8004f20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2180      	movs	r1, #128	; 0x80
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7ff fec0 	bl	8004c60 <SPI_WaitFlagStateUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d007      	beq.n	8004ef6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eea:	f043 0220 	orr.w	r2, r3, #32
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e014      	b.n	8004f20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7ff ff34 	bl	8004d70 <SPI_WaitFifoStateUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d007      	beq.n	8004f1e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f12:	f043 0220 	orr.w	r2, r3, #32
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e000      	b.n	8004f20 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e049      	b.n	8004fce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fc fe26 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f000 fba0 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d001      	beq.n	8004ff0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e033      	b.n	8005058 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a19      	ldr	r2, [pc, #100]	; (8005064 <HAL_TIM_Base_Start+0x8c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_TIM_Base_Start+0x3e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500a:	d004      	beq.n	8005016 <HAL_TIM_Base_Start+0x3e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a15      	ldr	r2, [pc, #84]	; (8005068 <HAL_TIM_Base_Start+0x90>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d115      	bne.n	8005042 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	4b13      	ldr	r3, [pc, #76]	; (800506c <HAL_TIM_Base_Start+0x94>)
 800501e:	4013      	ands	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b06      	cmp	r3, #6
 8005026:	d015      	beq.n	8005054 <HAL_TIM_Base_Start+0x7c>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502e:	d011      	beq.n	8005054 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005040:	e008      	b.n	8005054 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0201 	orr.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e000      	b.n	8005056 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005054:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	40012c00 	.word	0x40012c00
 8005068:	40014000 	.word	0x40014000
 800506c:	00010007 	.word	0x00010007

08005070 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e049      	b.n	8005116 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f841 	bl	800511e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f000 fafc 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <HAL_TIM_PWM_Start+0x24>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	bf14      	ite	ne
 8005150:	2301      	movne	r3, #1
 8005152:	2300      	moveq	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e03c      	b.n	80051d2 <HAL_TIM_PWM_Start+0x9e>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b04      	cmp	r3, #4
 800515c:	d109      	bne.n	8005172 <HAL_TIM_PWM_Start+0x3e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b01      	cmp	r3, #1
 8005168:	bf14      	ite	ne
 800516a:	2301      	movne	r3, #1
 800516c:	2300      	moveq	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	e02f      	b.n	80051d2 <HAL_TIM_PWM_Start+0x9e>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d109      	bne.n	800518c <HAL_TIM_PWM_Start+0x58>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e022      	b.n	80051d2 <HAL_TIM_PWM_Start+0x9e>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b0c      	cmp	r3, #12
 8005190:	d109      	bne.n	80051a6 <HAL_TIM_PWM_Start+0x72>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	bf14      	ite	ne
 800519e:	2301      	movne	r3, #1
 80051a0:	2300      	moveq	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	e015      	b.n	80051d2 <HAL_TIM_PWM_Start+0x9e>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	d109      	bne.n	80051c0 <HAL_TIM_PWM_Start+0x8c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	e008      	b.n	80051d2 <HAL_TIM_PWM_Start+0x9e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e07e      	b.n	80052d8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <HAL_TIM_PWM_Start+0xb6>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e8:	e023      	b.n	8005232 <HAL_TIM_PWM_Start+0xfe>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_PWM_Start+0xc6>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f8:	e01b      	b.n	8005232 <HAL_TIM_PWM_Start+0xfe>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d104      	bne.n	800520a <HAL_TIM_PWM_Start+0xd6>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005208:	e013      	b.n	8005232 <HAL_TIM_PWM_Start+0xfe>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b0c      	cmp	r3, #12
 800520e:	d104      	bne.n	800521a <HAL_TIM_PWM_Start+0xe6>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005218:	e00b      	b.n	8005232 <HAL_TIM_PWM_Start+0xfe>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b10      	cmp	r3, #16
 800521e:	d104      	bne.n	800522a <HAL_TIM_PWM_Start+0xf6>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005228:	e003      	b.n	8005232 <HAL_TIM_PWM_Start+0xfe>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2201      	movs	r2, #1
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fdb2 	bl	8005da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a26      	ldr	r2, [pc, #152]	; (80052e0 <HAL_TIM_PWM_Start+0x1ac>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <HAL_TIM_PWM_Start+0x12a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a25      	ldr	r2, [pc, #148]	; (80052e4 <HAL_TIM_PWM_Start+0x1b0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_TIM_PWM_Start+0x12a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a23      	ldr	r2, [pc, #140]	; (80052e8 <HAL_TIM_PWM_Start+0x1b4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d101      	bne.n	8005262 <HAL_TIM_PWM_Start+0x12e>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <HAL_TIM_PWM_Start+0x130>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005276:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <HAL_TIM_PWM_Start+0x1ac>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d009      	beq.n	8005296 <HAL_TIM_PWM_Start+0x162>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528a:	d004      	beq.n	8005296 <HAL_TIM_PWM_Start+0x162>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <HAL_TIM_PWM_Start+0x1b0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d115      	bne.n	80052c2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	4b13      	ldr	r3, [pc, #76]	; (80052ec <HAL_TIM_PWM_Start+0x1b8>)
 800529e:	4013      	ands	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b06      	cmp	r3, #6
 80052a6:	d015      	beq.n	80052d4 <HAL_TIM_PWM_Start+0x1a0>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ae:	d011      	beq.n	80052d4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c0:	e008      	b.n	80052d4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0201 	orr.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	e000      	b.n	80052d6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	00010007 	.word	0x00010007

080052f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800530a:	2302      	movs	r3, #2
 800530c:	e0ff      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b14      	cmp	r3, #20
 800531a:	f200 80f0 	bhi.w	80054fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005379 	.word	0x08005379
 8005328:	080054ff 	.word	0x080054ff
 800532c:	080054ff 	.word	0x080054ff
 8005330:	080054ff 	.word	0x080054ff
 8005334:	080053b9 	.word	0x080053b9
 8005338:	080054ff 	.word	0x080054ff
 800533c:	080054ff 	.word	0x080054ff
 8005340:	080054ff 	.word	0x080054ff
 8005344:	080053fb 	.word	0x080053fb
 8005348:	080054ff 	.word	0x080054ff
 800534c:	080054ff 	.word	0x080054ff
 8005350:	080054ff 	.word	0x080054ff
 8005354:	0800543b 	.word	0x0800543b
 8005358:	080054ff 	.word	0x080054ff
 800535c:	080054ff 	.word	0x080054ff
 8005360:	080054ff 	.word	0x080054ff
 8005364:	0800547d 	.word	0x0800547d
 8005368:	080054ff 	.word	0x080054ff
 800536c:	080054ff 	.word	0x080054ff
 8005370:	080054ff 	.word	0x080054ff
 8005374:	080054bd 	.word	0x080054bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f9f8 	bl	8005774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0208 	orr.w	r2, r2, #8
 8005392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0204 	bic.w	r2, r2, #4
 80053a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6999      	ldr	r1, [r3, #24]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	619a      	str	r2, [r3, #24]
      break;
 80053b6:	e0a5      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fa54 	bl	800586c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6999      	ldr	r1, [r3, #24]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	021a      	lsls	r2, r3, #8
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	619a      	str	r2, [r3, #24]
      break;
 80053f8:	e084      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 faad 	bl	8005960 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0208 	orr.w	r2, r2, #8
 8005414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69da      	ldr	r2, [r3, #28]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0204 	bic.w	r2, r2, #4
 8005424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69d9      	ldr	r1, [r3, #28]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	61da      	str	r2, [r3, #28]
      break;
 8005438:	e064      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fb05 	bl	8005a50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69d9      	ldr	r1, [r3, #28]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	021a      	lsls	r2, r3, #8
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	61da      	str	r2, [r3, #28]
      break;
 800547a:	e043      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fb42 	bl	8005b0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0208 	orr.w	r2, r2, #8
 8005496:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0204 	bic.w	r2, r2, #4
 80054a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054ba:	e023      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fb7a 	bl	8005bbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	021a      	lsls	r2, r3, #8
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054fc:	e002      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	75fb      	strb	r3, [r7, #23]
      break;
 8005502:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop

08005518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_TIM_ConfigClockSource+0x1c>
 8005530:	2302      	movs	r3, #2
 8005532:	e0b6      	b.n	80056a2 <HAL_TIM_ConfigClockSource+0x18a>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800555e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005570:	d03e      	beq.n	80055f0 <HAL_TIM_ConfigClockSource+0xd8>
 8005572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005576:	f200 8087 	bhi.w	8005688 <HAL_TIM_ConfigClockSource+0x170>
 800557a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557e:	f000 8086 	beq.w	800568e <HAL_TIM_ConfigClockSource+0x176>
 8005582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005586:	d87f      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x170>
 8005588:	2b70      	cmp	r3, #112	; 0x70
 800558a:	d01a      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0xaa>
 800558c:	2b70      	cmp	r3, #112	; 0x70
 800558e:	d87b      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x170>
 8005590:	2b60      	cmp	r3, #96	; 0x60
 8005592:	d050      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0x11e>
 8005594:	2b60      	cmp	r3, #96	; 0x60
 8005596:	d877      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x170>
 8005598:	2b50      	cmp	r3, #80	; 0x50
 800559a:	d03c      	beq.n	8005616 <HAL_TIM_ConfigClockSource+0xfe>
 800559c:	2b50      	cmp	r3, #80	; 0x50
 800559e:	d873      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x170>
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d058      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x13e>
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d86f      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x170>
 80055a8:	2b30      	cmp	r3, #48	; 0x30
 80055aa:	d064      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x15e>
 80055ac:	2b30      	cmp	r3, #48	; 0x30
 80055ae:	d86b      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x170>
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	d060      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x15e>
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d867      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x170>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d05c      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x15e>
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d05a      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x15e>
 80055c0:	e062      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6899      	ldr	r1, [r3, #8]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f000 fbc7 	bl	8005d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	609a      	str	r2, [r3, #8]
      break;
 80055ee:	e04f      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6899      	ldr	r1, [r3, #8]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f000 fbb0 	bl	8005d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005612:	609a      	str	r2, [r3, #8]
      break;
 8005614:	e03c      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6859      	ldr	r1, [r3, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	461a      	mov	r2, r3
 8005624:	f000 fb24 	bl	8005c70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2150      	movs	r1, #80	; 0x50
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fb7d 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005634:	e02c      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6859      	ldr	r1, [r3, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	461a      	mov	r2, r3
 8005644:	f000 fb43 	bl	8005cce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2160      	movs	r1, #96	; 0x60
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fb6d 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005654:	e01c      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6859      	ldr	r1, [r3, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	461a      	mov	r2, r3
 8005664:	f000 fb04 	bl	8005c70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2140      	movs	r1, #64	; 0x40
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fb5d 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005674:	e00c      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4619      	mov	r1, r3
 8005680:	4610      	mov	r0, r2
 8005682:	f000 fb54 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005686:	e003      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
      break;
 800568c:	e000      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800568e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a2a      	ldr	r2, [pc, #168]	; (8005768 <TIM_Base_SetConfig+0xbc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_Base_SetConfig+0x20>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ca:	d108      	bne.n	80056de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a21      	ldr	r2, [pc, #132]	; (8005768 <TIM_Base_SetConfig+0xbc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00b      	beq.n	80056fe <TIM_Base_SetConfig+0x52>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ec:	d007      	beq.n	80056fe <TIM_Base_SetConfig+0x52>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1e      	ldr	r2, [pc, #120]	; (800576c <TIM_Base_SetConfig+0xc0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d003      	beq.n	80056fe <TIM_Base_SetConfig+0x52>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1d      	ldr	r2, [pc, #116]	; (8005770 <TIM_Base_SetConfig+0xc4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d108      	bne.n	8005710 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a0c      	ldr	r2, [pc, #48]	; (8005768 <TIM_Base_SetConfig+0xbc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d007      	beq.n	800574c <TIM_Base_SetConfig+0xa0>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a0b      	ldr	r2, [pc, #44]	; (800576c <TIM_Base_SetConfig+0xc0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_Base_SetConfig+0xa0>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a0a      	ldr	r2, [pc, #40]	; (8005770 <TIM_Base_SetConfig+0xc4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d103      	bne.n	8005754 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	615a      	str	r2, [r3, #20]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40012c00 	.word	0x40012c00
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400

08005774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f023 0201 	bic.w	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 0302 	bic.w	r3, r3, #2
 80057c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a24      	ldr	r2, [pc, #144]	; (8005860 <TIM_OC1_SetConfig+0xec>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d007      	beq.n	80057e4 <TIM_OC1_SetConfig+0x70>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a23      	ldr	r2, [pc, #140]	; (8005864 <TIM_OC1_SetConfig+0xf0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d003      	beq.n	80057e4 <TIM_OC1_SetConfig+0x70>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a22      	ldr	r2, [pc, #136]	; (8005868 <TIM_OC1_SetConfig+0xf4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d10c      	bne.n	80057fe <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f023 0308 	bic.w	r3, r3, #8
 80057ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f023 0304 	bic.w	r3, r3, #4
 80057fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a17      	ldr	r2, [pc, #92]	; (8005860 <TIM_OC1_SetConfig+0xec>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d007      	beq.n	8005816 <TIM_OC1_SetConfig+0xa2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a16      	ldr	r2, [pc, #88]	; (8005864 <TIM_OC1_SetConfig+0xf0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d003      	beq.n	8005816 <TIM_OC1_SetConfig+0xa2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a15      	ldr	r2, [pc, #84]	; (8005868 <TIM_OC1_SetConfig+0xf4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d111      	bne.n	800583a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800581c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	621a      	str	r2, [r3, #32]
}
 8005854:	bf00      	nop
 8005856:	371c      	adds	r7, #28
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40014000 	.word	0x40014000
 8005868:	40014400 	.word	0x40014400

0800586c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f023 0210 	bic.w	r2, r3, #16
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800589a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800589e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f023 0320 	bic.w	r3, r3, #32
 80058ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a22      	ldr	r2, [pc, #136]	; (8005954 <TIM_OC2_SetConfig+0xe8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10d      	bne.n	80058ec <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a19      	ldr	r2, [pc, #100]	; (8005954 <TIM_OC2_SetConfig+0xe8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d007      	beq.n	8005904 <TIM_OC2_SetConfig+0x98>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a18      	ldr	r2, [pc, #96]	; (8005958 <TIM_OC2_SetConfig+0xec>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_OC2_SetConfig+0x98>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a17      	ldr	r2, [pc, #92]	; (800595c <TIM_OC2_SetConfig+0xf0>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d113      	bne.n	800592c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800590a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005912:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	621a      	str	r2, [r3, #32]
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40012c00 	.word	0x40012c00
 8005958:	40014000 	.word	0x40014000
 800595c:	40014400 	.word	0x40014400

08005960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800598e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0303 	bic.w	r3, r3, #3
 800599a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a21      	ldr	r2, [pc, #132]	; (8005a44 <TIM_OC3_SetConfig+0xe4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10d      	bne.n	80059de <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a18      	ldr	r2, [pc, #96]	; (8005a44 <TIM_OC3_SetConfig+0xe4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d007      	beq.n	80059f6 <TIM_OC3_SetConfig+0x96>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a17      	ldr	r2, [pc, #92]	; (8005a48 <TIM_OC3_SetConfig+0xe8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_OC3_SetConfig+0x96>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a16      	ldr	r2, [pc, #88]	; (8005a4c <TIM_OC3_SetConfig+0xec>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d113      	bne.n	8005a1e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	621a      	str	r2, [r3, #32]
}
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	40012c00 	.word	0x40012c00
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400

08005a50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	031b      	lsls	r3, r3, #12
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a14      	ldr	r2, [pc, #80]	; (8005b00 <TIM_OC4_SetConfig+0xb0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_OC4_SetConfig+0x74>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a13      	ldr	r2, [pc, #76]	; (8005b04 <TIM_OC4_SetConfig+0xb4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_OC4_SetConfig+0x74>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a12      	ldr	r2, [pc, #72]	; (8005b08 <TIM_OC4_SetConfig+0xb8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d109      	bne.n	8005ad8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	019b      	lsls	r3, r3, #6
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40014400 	.word	0x40014400

08005b0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	041b      	lsls	r3, r3, #16
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a13      	ldr	r2, [pc, #76]	; (8005bb0 <TIM_OC5_SetConfig+0xa4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d007      	beq.n	8005b76 <TIM_OC5_SetConfig+0x6a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a12      	ldr	r2, [pc, #72]	; (8005bb4 <TIM_OC5_SetConfig+0xa8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d003      	beq.n	8005b76 <TIM_OC5_SetConfig+0x6a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a11      	ldr	r2, [pc, #68]	; (8005bb8 <TIM_OC5_SetConfig+0xac>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d109      	bne.n	8005b8a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	621a      	str	r2, [r3, #32]
}
 8005ba4:	bf00      	nop
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	40012c00 	.word	0x40012c00
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40014400 	.word	0x40014400

08005bbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	051b      	lsls	r3, r3, #20
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a14      	ldr	r2, [pc, #80]	; (8005c64 <TIM_OC6_SetConfig+0xa8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d007      	beq.n	8005c28 <TIM_OC6_SetConfig+0x6c>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <TIM_OC6_SetConfig+0xac>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_OC6_SetConfig+0x6c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a12      	ldr	r2, [pc, #72]	; (8005c6c <TIM_OC6_SetConfig+0xb0>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d109      	bne.n	8005c3c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	029b      	lsls	r3, r3, #10
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	621a      	str	r2, [r3, #32]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40012c00 	.word	0x40012c00
 8005c68:	40014000 	.word	0x40014000
 8005c6c:	40014400 	.word	0x40014400

08005c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f023 0201 	bic.w	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f023 030a 	bic.w	r3, r3, #10
 8005cac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	621a      	str	r2, [r3, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b087      	sub	sp, #28
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f023 0210 	bic.w	r2, r3, #16
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	031b      	lsls	r3, r3, #12
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b085      	sub	sp, #20
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f043 0307 	orr.w	r3, r3, #7
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	609a      	str	r2, [r3, #8]
}
 8005d58:	bf00      	nop
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	021a      	lsls	r2, r3, #8
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	431a      	orrs	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	609a      	str	r2, [r3, #8]
}
 8005d98:	bf00      	nop
 8005d9a:	371c      	adds	r7, #28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	2201      	movs	r2, #1
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a1a      	ldr	r2, [r3, #32]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	401a      	ands	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a1a      	ldr	r2, [r3, #32]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f003 031f 	and.w	r3, r3, #31
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e04f      	b.n	8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a21      	ldr	r2, [pc, #132]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d108      	bne.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a14      	ldr	r2, [pc, #80]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d009      	beq.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e70:	d004      	beq.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a10      	ldr	r2, [pc, #64]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d10c      	bne.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	40012c00 	.word	0x40012c00
 8005eb8:	40014000 	.word	0x40014000

08005ebc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e060      	b.n	8005f9a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	041b      	lsls	r3, r3, #16
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a14      	ldr	r2, [pc, #80]	; (8005fa8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d115      	bne.n	8005f88 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	051b      	lsls	r3, r3, #20
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	40012c00 	.word	0x40012c00

08005fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e040      	b.n	8006040 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fb fec8 	bl	8001d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2224      	movs	r2, #36	; 0x24
 8005fd8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0201 	bic.w	r2, r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f8c0 	bl	8006170 <UART_SetConfig>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e022      	b.n	8006040 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fb0e 	bl	8006624 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fb95 	bl	8006768 <UART_CheckIdleState>
 800603e:	4603      	mov	r3, r0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	; 0x28
 800604c:	af02      	add	r7, sp, #8
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	4613      	mov	r3, r2
 8006056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800605c:	2b20      	cmp	r3, #32
 800605e:	f040 8082 	bne.w	8006166 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_UART_Transmit+0x26>
 8006068:	88fb      	ldrh	r3, [r7, #6]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e07a      	b.n	8006168 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_UART_Transmit+0x38>
 800607c:	2302      	movs	r3, #2
 800607e:	e073      	b.n	8006168 <HAL_UART_Transmit+0x120>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2221      	movs	r2, #33	; 0x21
 8006094:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006096:	f7fc fead 	bl	8002df4 <HAL_GetTick>
 800609a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	88fa      	ldrh	r2, [r7, #6]
 80060a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	88fa      	ldrh	r2, [r7, #6]
 80060a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b4:	d108      	bne.n	80060c8 <HAL_UART_Transmit+0x80>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d104      	bne.n	80060c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	61bb      	str	r3, [r7, #24]
 80060c6:	e003      	b.n	80060d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80060d8:	e02d      	b.n	8006136 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2200      	movs	r2, #0
 80060e2:	2180      	movs	r1, #128	; 0x80
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 fb88 	bl	80067fa <UART_WaitOnFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e039      	b.n	8006168 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10b      	bne.n	8006112 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	881a      	ldrh	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006106:	b292      	uxth	r2, r2
 8006108:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	3302      	adds	r3, #2
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	e008      	b.n	8006124 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	781a      	ldrb	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	b292      	uxth	r2, r2
 800611c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	3301      	adds	r3, #1
 8006122:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1cb      	bne.n	80060da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2200      	movs	r2, #0
 800614a:	2140      	movs	r1, #64	; 0x40
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fb54 	bl	80067fa <UART_WaitOnFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e005      	b.n	8006168 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	e000      	b.n	8006168 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006166:	2302      	movs	r3, #2
  }
}
 8006168:	4618      	mov	r0, r3
 800616a:	3720      	adds	r7, #32
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006174:	b08a      	sub	sp, #40	; 0x28
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	431a      	orrs	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	431a      	orrs	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	4313      	orrs	r3, r2
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4b9e      	ldr	r3, [pc, #632]	; (8006418 <UART_SetConfig+0x2a8>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	6812      	ldr	r2, [r2, #0]
 80061a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061a8:	430b      	orrs	r3, r1
 80061aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a93      	ldr	r2, [pc, #588]	; (800641c <UART_SetConfig+0x2ac>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d004      	beq.n	80061dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d8:	4313      	orrs	r3, r2
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ec:	430a      	orrs	r2, r1
 80061ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a8a      	ldr	r2, [pc, #552]	; (8006420 <UART_SetConfig+0x2b0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d126      	bne.n	8006248 <UART_SetConfig+0xd8>
 80061fa:	4b8a      	ldr	r3, [pc, #552]	; (8006424 <UART_SetConfig+0x2b4>)
 80061fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006200:	f003 0303 	and.w	r3, r3, #3
 8006204:	2b03      	cmp	r3, #3
 8006206:	d81b      	bhi.n	8006240 <UART_SetConfig+0xd0>
 8006208:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <UART_SetConfig+0xa0>)
 800620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620e:	bf00      	nop
 8006210:	08006221 	.word	0x08006221
 8006214:	08006231 	.word	0x08006231
 8006218:	08006229 	.word	0x08006229
 800621c:	08006239 	.word	0x08006239
 8006220:	2301      	movs	r3, #1
 8006222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006226:	e0ab      	b.n	8006380 <UART_SetConfig+0x210>
 8006228:	2302      	movs	r3, #2
 800622a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800622e:	e0a7      	b.n	8006380 <UART_SetConfig+0x210>
 8006230:	2304      	movs	r3, #4
 8006232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006236:	e0a3      	b.n	8006380 <UART_SetConfig+0x210>
 8006238:	2308      	movs	r3, #8
 800623a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800623e:	e09f      	b.n	8006380 <UART_SetConfig+0x210>
 8006240:	2310      	movs	r3, #16
 8006242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006246:	e09b      	b.n	8006380 <UART_SetConfig+0x210>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a76      	ldr	r2, [pc, #472]	; (8006428 <UART_SetConfig+0x2b8>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d138      	bne.n	80062c4 <UART_SetConfig+0x154>
 8006252:	4b74      	ldr	r3, [pc, #464]	; (8006424 <UART_SetConfig+0x2b4>)
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006258:	f003 030c 	and.w	r3, r3, #12
 800625c:	2b0c      	cmp	r3, #12
 800625e:	d82d      	bhi.n	80062bc <UART_SetConfig+0x14c>
 8006260:	a201      	add	r2, pc, #4	; (adr r2, 8006268 <UART_SetConfig+0xf8>)
 8006262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006266:	bf00      	nop
 8006268:	0800629d 	.word	0x0800629d
 800626c:	080062bd 	.word	0x080062bd
 8006270:	080062bd 	.word	0x080062bd
 8006274:	080062bd 	.word	0x080062bd
 8006278:	080062ad 	.word	0x080062ad
 800627c:	080062bd 	.word	0x080062bd
 8006280:	080062bd 	.word	0x080062bd
 8006284:	080062bd 	.word	0x080062bd
 8006288:	080062a5 	.word	0x080062a5
 800628c:	080062bd 	.word	0x080062bd
 8006290:	080062bd 	.word	0x080062bd
 8006294:	080062bd 	.word	0x080062bd
 8006298:	080062b5 	.word	0x080062b5
 800629c:	2300      	movs	r3, #0
 800629e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062a2:	e06d      	b.n	8006380 <UART_SetConfig+0x210>
 80062a4:	2302      	movs	r3, #2
 80062a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062aa:	e069      	b.n	8006380 <UART_SetConfig+0x210>
 80062ac:	2304      	movs	r3, #4
 80062ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062b2:	e065      	b.n	8006380 <UART_SetConfig+0x210>
 80062b4:	2308      	movs	r3, #8
 80062b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ba:	e061      	b.n	8006380 <UART_SetConfig+0x210>
 80062bc:	2310      	movs	r3, #16
 80062be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c2:	e05d      	b.n	8006380 <UART_SetConfig+0x210>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a58      	ldr	r2, [pc, #352]	; (800642c <UART_SetConfig+0x2bc>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d125      	bne.n	800631a <UART_SetConfig+0x1aa>
 80062ce:	4b55      	ldr	r3, [pc, #340]	; (8006424 <UART_SetConfig+0x2b4>)
 80062d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062d8:	2b30      	cmp	r3, #48	; 0x30
 80062da:	d016      	beq.n	800630a <UART_SetConfig+0x19a>
 80062dc:	2b30      	cmp	r3, #48	; 0x30
 80062de:	d818      	bhi.n	8006312 <UART_SetConfig+0x1a2>
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d00a      	beq.n	80062fa <UART_SetConfig+0x18a>
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d814      	bhi.n	8006312 <UART_SetConfig+0x1a2>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <UART_SetConfig+0x182>
 80062ec:	2b10      	cmp	r3, #16
 80062ee:	d008      	beq.n	8006302 <UART_SetConfig+0x192>
 80062f0:	e00f      	b.n	8006312 <UART_SetConfig+0x1a2>
 80062f2:	2300      	movs	r3, #0
 80062f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062f8:	e042      	b.n	8006380 <UART_SetConfig+0x210>
 80062fa:	2302      	movs	r3, #2
 80062fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006300:	e03e      	b.n	8006380 <UART_SetConfig+0x210>
 8006302:	2304      	movs	r3, #4
 8006304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006308:	e03a      	b.n	8006380 <UART_SetConfig+0x210>
 800630a:	2308      	movs	r3, #8
 800630c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006310:	e036      	b.n	8006380 <UART_SetConfig+0x210>
 8006312:	2310      	movs	r3, #16
 8006314:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006318:	e032      	b.n	8006380 <UART_SetConfig+0x210>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a3f      	ldr	r2, [pc, #252]	; (800641c <UART_SetConfig+0x2ac>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d12a      	bne.n	800637a <UART_SetConfig+0x20a>
 8006324:	4b3f      	ldr	r3, [pc, #252]	; (8006424 <UART_SetConfig+0x2b4>)
 8006326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800632e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006332:	d01a      	beq.n	800636a <UART_SetConfig+0x1fa>
 8006334:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006338:	d81b      	bhi.n	8006372 <UART_SetConfig+0x202>
 800633a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800633e:	d00c      	beq.n	800635a <UART_SetConfig+0x1ea>
 8006340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006344:	d815      	bhi.n	8006372 <UART_SetConfig+0x202>
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <UART_SetConfig+0x1e2>
 800634a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800634e:	d008      	beq.n	8006362 <UART_SetConfig+0x1f2>
 8006350:	e00f      	b.n	8006372 <UART_SetConfig+0x202>
 8006352:	2300      	movs	r3, #0
 8006354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006358:	e012      	b.n	8006380 <UART_SetConfig+0x210>
 800635a:	2302      	movs	r3, #2
 800635c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006360:	e00e      	b.n	8006380 <UART_SetConfig+0x210>
 8006362:	2304      	movs	r3, #4
 8006364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006368:	e00a      	b.n	8006380 <UART_SetConfig+0x210>
 800636a:	2308      	movs	r3, #8
 800636c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006370:	e006      	b.n	8006380 <UART_SetConfig+0x210>
 8006372:	2310      	movs	r3, #16
 8006374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006378:	e002      	b.n	8006380 <UART_SetConfig+0x210>
 800637a:	2310      	movs	r3, #16
 800637c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a25      	ldr	r2, [pc, #148]	; (800641c <UART_SetConfig+0x2ac>)
 8006386:	4293      	cmp	r3, r2
 8006388:	f040 808a 	bne.w	80064a0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800638c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006390:	2b08      	cmp	r3, #8
 8006392:	d824      	bhi.n	80063de <UART_SetConfig+0x26e>
 8006394:	a201      	add	r2, pc, #4	; (adr r2, 800639c <UART_SetConfig+0x22c>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063c1 	.word	0x080063c1
 80063a0:	080063df 	.word	0x080063df
 80063a4:	080063c9 	.word	0x080063c9
 80063a8:	080063df 	.word	0x080063df
 80063ac:	080063cf 	.word	0x080063cf
 80063b0:	080063df 	.word	0x080063df
 80063b4:	080063df 	.word	0x080063df
 80063b8:	080063df 	.word	0x080063df
 80063bc:	080063d7 	.word	0x080063d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063c0:	f7fd fdd0 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 80063c4:	61f8      	str	r0, [r7, #28]
        break;
 80063c6:	e010      	b.n	80063ea <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063c8:	4b19      	ldr	r3, [pc, #100]	; (8006430 <UART_SetConfig+0x2c0>)
 80063ca:	61fb      	str	r3, [r7, #28]
        break;
 80063cc:	e00d      	b.n	80063ea <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ce:	f7fd fd31 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 80063d2:	61f8      	str	r0, [r7, #28]
        break;
 80063d4:	e009      	b.n	80063ea <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063da:	61fb      	str	r3, [r7, #28]
        break;
 80063dc:	e005      	b.n	80063ea <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80063e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8109 	beq.w	8006604 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	4613      	mov	r3, r2
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	4413      	add	r3, r2
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d305      	bcc.n	800640e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006408:	69fa      	ldr	r2, [r7, #28]
 800640a:	429a      	cmp	r2, r3
 800640c:	d912      	bls.n	8006434 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006414:	e0f6      	b.n	8006604 <UART_SetConfig+0x494>
 8006416:	bf00      	nop
 8006418:	efff69f3 	.word	0xefff69f3
 800641c:	40008000 	.word	0x40008000
 8006420:	40013800 	.word	0x40013800
 8006424:	40021000 	.word	0x40021000
 8006428:	40004400 	.word	0x40004400
 800642c:	40004800 	.word	0x40004800
 8006430:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	2200      	movs	r2, #0
 8006438:	461c      	mov	r4, r3
 800643a:	4615      	mov	r5, r2
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	022b      	lsls	r3, r5, #8
 8006446:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800644a:	0222      	lsls	r2, r4, #8
 800644c:	68f9      	ldr	r1, [r7, #12]
 800644e:	6849      	ldr	r1, [r1, #4]
 8006450:	0849      	lsrs	r1, r1, #1
 8006452:	2000      	movs	r0, #0
 8006454:	4688      	mov	r8, r1
 8006456:	4681      	mov	r9, r0
 8006458:	eb12 0a08 	adds.w	sl, r2, r8
 800645c:	eb43 0b09 	adc.w	fp, r3, r9
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	607a      	str	r2, [r7, #4]
 800646a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800646e:	4650      	mov	r0, sl
 8006470:	4659      	mov	r1, fp
 8006472:	f7fa fbb9 	bl	8000be8 <__aeabi_uldivmod>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4613      	mov	r3, r2
 800647c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006484:	d308      	bcc.n	8006498 <UART_SetConfig+0x328>
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800648c:	d204      	bcs.n	8006498 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	60da      	str	r2, [r3, #12]
 8006496:	e0b5      	b.n	8006604 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800649e:	e0b1      	b.n	8006604 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064a8:	d15d      	bne.n	8006566 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80064aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d827      	bhi.n	8006502 <UART_SetConfig+0x392>
 80064b2:	a201      	add	r2, pc, #4	; (adr r2, 80064b8 <UART_SetConfig+0x348>)
 80064b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b8:	080064dd 	.word	0x080064dd
 80064bc:	080064e5 	.word	0x080064e5
 80064c0:	080064ed 	.word	0x080064ed
 80064c4:	08006503 	.word	0x08006503
 80064c8:	080064f3 	.word	0x080064f3
 80064cc:	08006503 	.word	0x08006503
 80064d0:	08006503 	.word	0x08006503
 80064d4:	08006503 	.word	0x08006503
 80064d8:	080064fb 	.word	0x080064fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064dc:	f7fd fd42 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 80064e0:	61f8      	str	r0, [r7, #28]
        break;
 80064e2:	e014      	b.n	800650e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064e4:	f7fd fd54 	bl	8003f90 <HAL_RCC_GetPCLK2Freq>
 80064e8:	61f8      	str	r0, [r7, #28]
        break;
 80064ea:	e010      	b.n	800650e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064ec:	4b4c      	ldr	r3, [pc, #304]	; (8006620 <UART_SetConfig+0x4b0>)
 80064ee:	61fb      	str	r3, [r7, #28]
        break;
 80064f0:	e00d      	b.n	800650e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064f2:	f7fd fc9f 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 80064f6:	61f8      	str	r0, [r7, #28]
        break;
 80064f8:	e009      	b.n	800650e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064fe:	61fb      	str	r3, [r7, #28]
        break;
 8006500:	e005      	b.n	800650e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800650c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d077      	beq.n	8006604 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	005a      	lsls	r2, r3, #1
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	085b      	lsrs	r3, r3, #1
 800651e:	441a      	add	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	fbb2 f3f3 	udiv	r3, r2, r3
 8006528:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	2b0f      	cmp	r3, #15
 800652e:	d916      	bls.n	800655e <UART_SetConfig+0x3ee>
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006536:	d212      	bcs.n	800655e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	b29b      	uxth	r3, r3
 800653c:	f023 030f 	bic.w	r3, r3, #15
 8006540:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	085b      	lsrs	r3, r3, #1
 8006546:	b29b      	uxth	r3, r3
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	b29a      	uxth	r2, r3
 800654e:	8afb      	ldrh	r3, [r7, #22]
 8006550:	4313      	orrs	r3, r2
 8006552:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	8afa      	ldrh	r2, [r7, #22]
 800655a:	60da      	str	r2, [r3, #12]
 800655c:	e052      	b.n	8006604 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006564:	e04e      	b.n	8006604 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006566:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800656a:	2b08      	cmp	r3, #8
 800656c:	d827      	bhi.n	80065be <UART_SetConfig+0x44e>
 800656e:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <UART_SetConfig+0x404>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	08006599 	.word	0x08006599
 8006578:	080065a1 	.word	0x080065a1
 800657c:	080065a9 	.word	0x080065a9
 8006580:	080065bf 	.word	0x080065bf
 8006584:	080065af 	.word	0x080065af
 8006588:	080065bf 	.word	0x080065bf
 800658c:	080065bf 	.word	0x080065bf
 8006590:	080065bf 	.word	0x080065bf
 8006594:	080065b7 	.word	0x080065b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006598:	f7fd fce4 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 800659c:	61f8      	str	r0, [r7, #28]
        break;
 800659e:	e014      	b.n	80065ca <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065a0:	f7fd fcf6 	bl	8003f90 <HAL_RCC_GetPCLK2Freq>
 80065a4:	61f8      	str	r0, [r7, #28]
        break;
 80065a6:	e010      	b.n	80065ca <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a8:	4b1d      	ldr	r3, [pc, #116]	; (8006620 <UART_SetConfig+0x4b0>)
 80065aa:	61fb      	str	r3, [r7, #28]
        break;
 80065ac:	e00d      	b.n	80065ca <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ae:	f7fd fc41 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 80065b2:	61f8      	str	r0, [r7, #28]
        break;
 80065b4:	e009      	b.n	80065ca <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ba:	61fb      	str	r3, [r7, #28]
        break;
 80065bc:	e005      	b.n	80065ca <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065c8:	bf00      	nop
    }

    if (pclk != 0U)
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d019      	beq.n	8006604 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	085a      	lsrs	r2, r3, #1
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	441a      	add	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2b0f      	cmp	r3, #15
 80065e8:	d909      	bls.n	80065fe <UART_SetConfig+0x48e>
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f0:	d205      	bcs.n	80065fe <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	60da      	str	r2, [r3, #12]
 80065fc:	e002      	b.n	8006604 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006610:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006614:	4618      	mov	r0, r3
 8006616:	3728      	adds	r7, #40	; 0x28
 8006618:	46bd      	mov	sp, r7
 800661a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800661e:	bf00      	nop
 8006620:	00f42400 	.word	0x00f42400

08006624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00a      	beq.n	800664e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	f003 0310 	and.w	r3, r3, #16
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	f003 0320 	and.w	r3, r3, #32
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01a      	beq.n	800673a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006722:	d10a      	bne.n	800673a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	605a      	str	r2, [r3, #4]
  }
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af02      	add	r7, sp, #8
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006778:	f7fc fb3c 	bl	8002df4 <HAL_GetTick>
 800677c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0308 	and.w	r3, r3, #8
 8006788:	2b08      	cmp	r3, #8
 800678a:	d10e      	bne.n	80067aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800678c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f82d 	bl	80067fa <UART_WaitOnFlagUntilTimeout>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e023      	b.n	80067f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d10e      	bne.n	80067d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f817 	bl	80067fa <UART_WaitOnFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e00d      	b.n	80067f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b09c      	sub	sp, #112	; 0x70
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	603b      	str	r3, [r7, #0]
 8006806:	4613      	mov	r3, r2
 8006808:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800680a:	e0a5      	b.n	8006958 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800680c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800680e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006812:	f000 80a1 	beq.w	8006958 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006816:	f7fc faed 	bl	8002df4 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006822:	429a      	cmp	r2, r3
 8006824:	d302      	bcc.n	800682c <UART_WaitOnFlagUntilTimeout+0x32>
 8006826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006828:	2b00      	cmp	r3, #0
 800682a:	d13e      	bne.n	80068aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800683a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006840:	667b      	str	r3, [r7, #100]	; 0x64
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800684a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800684c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006850:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e6      	bne.n	800682c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3308      	adds	r3, #8
 8006864:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	f023 0301 	bic.w	r3, r3, #1
 8006874:	663b      	str	r3, [r7, #96]	; 0x60
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3308      	adds	r3, #8
 800687c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800687e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006880:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800688c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e5      	bne.n	800685e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2220      	movs	r2, #32
 8006896:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e067      	b.n	800697a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d04f      	beq.n	8006958 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068c6:	d147      	bne.n	8006958 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
 80068f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e6      	bne.n	80068d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3308      	adds	r3, #8
 800690a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	613b      	str	r3, [r7, #16]
   return(result);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f023 0301 	bic.w	r3, r3, #1
 800691a:	66bb      	str	r3, [r7, #104]	; 0x68
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3308      	adds	r3, #8
 8006922:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006924:	623a      	str	r2, [r7, #32]
 8006926:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	69f9      	ldr	r1, [r7, #28]
 800692a:	6a3a      	ldr	r2, [r7, #32]
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	61bb      	str	r3, [r7, #24]
   return(result);
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e5      	bne.n	8006904 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2220      	movs	r2, #32
 800693c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2220      	movs	r2, #32
 8006948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e010      	b.n	800697a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	4013      	ands	r3, r2
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	429a      	cmp	r2, r3
 8006966:	bf0c      	ite	eq
 8006968:	2301      	moveq	r3, #1
 800696a:	2300      	movne	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	461a      	mov	r2, r3
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	429a      	cmp	r2, r3
 8006974:	f43f af4a 	beq.w	800680c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3770      	adds	r7, #112	; 0x70
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <setCSLine>:
#define RES14           14

#define AMT22_DELAY     10

void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b082      	sub	sp, #8
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	460b      	mov	r3, r1
 800698c:	807b      	strh	r3, [r7, #2]
 800698e:	4613      	mov	r3, r2
 8006990:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8006992:	787a      	ldrb	r2, [r7, #1]
 8006994:	887b      	ldrh	r3, [r7, #2]
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7fc fcbb 	bl	8003314 <HAL_GPIO_WritePin>
}
 800699e:	bf00      	nop
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b088      	sub	sp, #32
 80069aa:	af02      	add	r7, sp, #8
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	461a      	mov	r2, r3
 80069b2:	460b      	mov	r3, r1
 80069b4:	72fb      	strb	r3, [r7, #11]
 80069b6:	4613      	mov	r3, r2
 80069b8:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 80069ba:	893b      	ldrh	r3, [r7, #8]
 80069bc:	2200      	movs	r2, #0
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff ffde 	bl	8006982 <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 80069c6:	200a      	movs	r0, #10
 80069c8:	f000 f8d2 	bl	8006b70 <delay_us_AMT22>

  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 80069cc:	f107 0217 	add.w	r2, r7, #23
 80069d0:	f107 010b 	add.w	r1, r7, #11
 80069d4:	230a      	movs	r3, #10
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	2301      	movs	r3, #1
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7fd ff2d 	bl	800483a <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  //  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 80069e0:	200a      	movs	r0, #10
 80069e2:	f000 f8c5 	bl	8006b70 <delay_us_AMT22>

  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 80069e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80069ea:	893b      	ldrh	r3, [r7, #8]
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff ffc7 	bl	8006982 <setCSLine>

  return data;
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b08c      	sub	sp, #48	; 0x30
 8006a02:	af02      	add	r7, sp, #8
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	4611      	mov	r1, r2
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	80fb      	strh	r3, [r7, #6]
 8006a10:	4613      	mov	r3, r2
 8006a12:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8;
 8006a14:	88fa      	ldrh	r2, [r7, #6]
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	2100      	movs	r1, #0
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f7ff ffbe 	bl	80069a6 <spiWriteRead>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	021b      	lsls	r3, r3, #8
 8006a30:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006a32:	200a      	movs	r0, #10
 8006a34:	f000 f89c 	bl	8006b70 <delay_us_AMT22>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer);
 8006a38:	88fa      	ldrh	r2, [r7, #6]
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	2301      	movs	r3, #1
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	4613      	mov	r3, r2
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	2100      	movs	r1, #0
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f7ff ffac 	bl	80069a6 <spiWriteRead>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a54:	4313      	orrs	r3, r2
 8006a56:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 8006a58:	2300      	movs	r3, #0
 8006a5a:	623b      	str	r3, [r7, #32]
 8006a5c:	e010      	b.n	8006a80 <getPositionSPI+0x82>
 8006a5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	fa42 f303 	asr.w	r3, r2, r3
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	b2d9      	uxtb	r1, r3
 8006a6e:	f107 0210 	add.w	r2, r7, #16
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	4413      	add	r3, r2
 8006a76:	460a      	mov	r2, r1
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	623b      	str	r3, [r7, #32]
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	2b0f      	cmp	r3, #15
 8006a84:	ddeb      	ble.n	8006a5e <getPositionSPI+0x60>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
 if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8006a86:	7ffb      	ldrb	r3, [r7, #31]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	7f7a      	ldrb	r2, [r7, #29]
 8006a8c:	7efb      	ldrb	r3, [r7, #27]
 8006a8e:	4053      	eors	r3, r2
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	7e7b      	ldrb	r3, [r7, #25]
 8006a94:	4053      	eors	r3, r2
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	4053      	eors	r3, r2
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	7d7b      	ldrb	r3, [r7, #21]
 8006aa0:	4053      	eors	r3, r2
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	7cfb      	ldrb	r3, [r7, #19]
 8006aa6:	4053      	eors	r3, r2
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	7c7b      	ldrb	r3, [r7, #17]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	bf0c      	ite	eq
 8006ab0:	2301      	moveq	r3, #1
 8006ab2:	2300      	movne	r3, #0
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	4299      	cmp	r1, r3
 8006ab8:	d11e      	bne.n	8006af8 <getPositionSPI+0xfa>
         && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8006aba:	7fbb      	ldrb	r3, [r7, #30]
 8006abc:	4619      	mov	r1, r3
 8006abe:	7f3a      	ldrb	r2, [r7, #28]
 8006ac0:	7ebb      	ldrb	r3, [r7, #26]
 8006ac2:	4053      	eors	r3, r2
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	7e3b      	ldrb	r3, [r7, #24]
 8006ac8:	4053      	eors	r3, r2
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	7dbb      	ldrb	r3, [r7, #22]
 8006ace:	4053      	eors	r3, r2
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	7d3b      	ldrb	r3, [r7, #20]
 8006ad4:	4053      	eors	r3, r2
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	7cbb      	ldrb	r3, [r7, #18]
 8006ada:	4053      	eors	r3, r2
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	7c3b      	ldrb	r3, [r7, #16]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	bf0c      	ite	eq
 8006ae4:	2301      	moveq	r3, #1
 8006ae6:	2300      	movne	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	4299      	cmp	r1, r3
 8006aec:	d104      	bne.n	8006af8 <getPositionSPI+0xfa>
   {
     //we got back a good position, so just mask away the checkbits
     currentPosition &= 0x3FFF;
 8006aee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006af0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006af4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006af6:	e002      	b.n	8006afe <getPositionSPI+0x100>
   }
 else
 {
   currentPosition = 0xFFFF; //bad position
 8006af8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006afc:	84fb      	strh	r3, [r7, #38]	; 0x26
 }
  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 8006afe:	797b      	ldrb	r3, [r7, #5]
 8006b00:	2b0c      	cmp	r3, #12
 8006b02:	d107      	bne.n	8006b14 <getPositionSPI+0x116>
 8006b04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d002      	beq.n	8006b14 <getPositionSPI+0x116>
 8006b0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b10:	089b      	lsrs	r3, r3, #2
 8006b12:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 8006b14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3728      	adds	r7, #40	; 0x28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <resetAMT22>:
//  delay(timer, 250);
  delay_us_AMT22(250);
}

void resetAMT22(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, TIM_HandleTypeDef *timer)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b086      	sub	sp, #24
 8006b22:	af02      	add	r7, sp, #8
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	603b      	str	r3, [r7, #0]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	80fb      	strh	r3, [r7, #6]
  spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer);
 8006b2e:	88fa      	ldrh	r2, [r7, #6]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	9301      	str	r3, [sp, #4]
 8006b34:	2300      	movs	r3, #0
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7ff ff31 	bl	80069a6 <spiWriteRead>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006b44:	200a      	movs	r0, #10
 8006b46:	f000 f813 	bl	8006b70 <delay_us_AMT22>

  spiWriteRead(hspi, AMT22_RESET, encoderPort, encoderPin, 1, timer);
 8006b4a:	88fa      	ldrh	r2, [r7, #6]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	2301      	movs	r3, #1
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	4613      	mov	r3, r2
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	2160      	movs	r1, #96	; 0x60
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7ff ff23 	bl	80069a6 <spiWriteRead>

//  delay(timer, 250);
  delay_us_AMT22(250);
 8006b60:	20fa      	movs	r0, #250	; 0xfa
 8006b62:	f000 f805 	bl	8006b70 <delay_us_AMT22>
}
 8006b66:	bf00      	nop
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <delay_us_AMT22>:
			passedTime +=timer->Init.Period;
		}
	}
}
void delay_us_AMT22 (uint16_t us)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8006b7a:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <delay_us_AMT22+0x30>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8006b82:	bf00      	nop
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <delay_us_AMT22+0x30>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b8a:	88fb      	ldrh	r3, [r7, #6]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d3f9      	bcc.n	8006b84 <delay_us_AMT22+0x14>
}
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	20000360 	.word	0x20000360

08006ba4 <_Znaj>:
 8006ba4:	f000 b800 	b.w	8006ba8 <_Znwj>

08006ba8 <_Znwj>:
 8006ba8:	2801      	cmp	r0, #1
 8006baa:	bf38      	it	cc
 8006bac:	2001      	movcc	r0, #1
 8006bae:	b510      	push	{r4, lr}
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f000 f844 	bl	8006c40 <malloc>
 8006bb8:	b930      	cbnz	r0, 8006bc8 <_Znwj+0x20>
 8006bba:	f000 f807 	bl	8006bcc <_ZSt15get_new_handlerv>
 8006bbe:	b908      	cbnz	r0, 8006bc4 <_Znwj+0x1c>
 8006bc0:	f000 f80c 	bl	8006bdc <abort>
 8006bc4:	4780      	blx	r0
 8006bc6:	e7f4      	b.n	8006bb2 <_Znwj+0xa>
 8006bc8:	bd10      	pop	{r4, pc}
	...

08006bcc <_ZSt15get_new_handlerv>:
 8006bcc:	4b02      	ldr	r3, [pc, #8]	; (8006bd8 <_ZSt15get_new_handlerv+0xc>)
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	f3bf 8f5b 	dmb	ish
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	20000480 	.word	0x20000480

08006bdc <abort>:
 8006bdc:	b508      	push	{r3, lr}
 8006bde:	2006      	movs	r0, #6
 8006be0:	f000 fe62 	bl	80078a8 <raise>
 8006be4:	2001      	movs	r0, #1
 8006be6:	f7fa fdf9 	bl	80017dc <_exit>
	...

08006bec <__errno>:
 8006bec:	4b01      	ldr	r3, [pc, #4]	; (8006bf4 <__errno+0x8>)
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	2000002c 	.word	0x2000002c

08006bf8 <__libc_init_array>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	4d0d      	ldr	r5, [pc, #52]	; (8006c30 <__libc_init_array+0x38>)
 8006bfc:	4c0d      	ldr	r4, [pc, #52]	; (8006c34 <__libc_init_array+0x3c>)
 8006bfe:	1b64      	subs	r4, r4, r5
 8006c00:	10a4      	asrs	r4, r4, #2
 8006c02:	2600      	movs	r6, #0
 8006c04:	42a6      	cmp	r6, r4
 8006c06:	d109      	bne.n	8006c1c <__libc_init_array+0x24>
 8006c08:	4d0b      	ldr	r5, [pc, #44]	; (8006c38 <__libc_init_array+0x40>)
 8006c0a:	4c0c      	ldr	r4, [pc, #48]	; (8006c3c <__libc_init_array+0x44>)
 8006c0c:	f003 f9c6 	bl	8009f9c <_init>
 8006c10:	1b64      	subs	r4, r4, r5
 8006c12:	10a4      	asrs	r4, r4, #2
 8006c14:	2600      	movs	r6, #0
 8006c16:	42a6      	cmp	r6, r4
 8006c18:	d105      	bne.n	8006c26 <__libc_init_array+0x2e>
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c20:	4798      	blx	r3
 8006c22:	3601      	adds	r6, #1
 8006c24:	e7ee      	b.n	8006c04 <__libc_init_array+0xc>
 8006c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c2a:	4798      	blx	r3
 8006c2c:	3601      	adds	r6, #1
 8006c2e:	e7f2      	b.n	8006c16 <__libc_init_array+0x1e>
 8006c30:	0800aaa4 	.word	0x0800aaa4
 8006c34:	0800aaa4 	.word	0x0800aaa4
 8006c38:	0800aaa4 	.word	0x0800aaa4
 8006c3c:	0800aaa8 	.word	0x0800aaa8

08006c40 <malloc>:
 8006c40:	4b02      	ldr	r3, [pc, #8]	; (8006c4c <malloc+0xc>)
 8006c42:	4601      	mov	r1, r0
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	f000 b877 	b.w	8006d38 <_malloc_r>
 8006c4a:	bf00      	nop
 8006c4c:	2000002c 	.word	0x2000002c

08006c50 <memset>:
 8006c50:	4402      	add	r2, r0
 8006c52:	4603      	mov	r3, r0
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d100      	bne.n	8006c5a <memset+0xa>
 8006c58:	4770      	bx	lr
 8006c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5e:	e7f9      	b.n	8006c54 <memset+0x4>

08006c60 <_free_r>:
 8006c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c62:	2900      	cmp	r1, #0
 8006c64:	d044      	beq.n	8006cf0 <_free_r+0x90>
 8006c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c6a:	9001      	str	r0, [sp, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c72:	bfb8      	it	lt
 8006c74:	18e4      	addlt	r4, r4, r3
 8006c76:	f002 f8d5 	bl	8008e24 <__malloc_lock>
 8006c7a:	4a1e      	ldr	r2, [pc, #120]	; (8006cf4 <_free_r+0x94>)
 8006c7c:	9801      	ldr	r0, [sp, #4]
 8006c7e:	6813      	ldr	r3, [r2, #0]
 8006c80:	b933      	cbnz	r3, 8006c90 <_free_r+0x30>
 8006c82:	6063      	str	r3, [r4, #4]
 8006c84:	6014      	str	r4, [r2, #0]
 8006c86:	b003      	add	sp, #12
 8006c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c8c:	f002 b8d0 	b.w	8008e30 <__malloc_unlock>
 8006c90:	42a3      	cmp	r3, r4
 8006c92:	d908      	bls.n	8006ca6 <_free_r+0x46>
 8006c94:	6825      	ldr	r5, [r4, #0]
 8006c96:	1961      	adds	r1, r4, r5
 8006c98:	428b      	cmp	r3, r1
 8006c9a:	bf01      	itttt	eq
 8006c9c:	6819      	ldreq	r1, [r3, #0]
 8006c9e:	685b      	ldreq	r3, [r3, #4]
 8006ca0:	1949      	addeq	r1, r1, r5
 8006ca2:	6021      	streq	r1, [r4, #0]
 8006ca4:	e7ed      	b.n	8006c82 <_free_r+0x22>
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	b10b      	cbz	r3, 8006cb0 <_free_r+0x50>
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	d9fa      	bls.n	8006ca6 <_free_r+0x46>
 8006cb0:	6811      	ldr	r1, [r2, #0]
 8006cb2:	1855      	adds	r5, r2, r1
 8006cb4:	42a5      	cmp	r5, r4
 8006cb6:	d10b      	bne.n	8006cd0 <_free_r+0x70>
 8006cb8:	6824      	ldr	r4, [r4, #0]
 8006cba:	4421      	add	r1, r4
 8006cbc:	1854      	adds	r4, r2, r1
 8006cbe:	42a3      	cmp	r3, r4
 8006cc0:	6011      	str	r1, [r2, #0]
 8006cc2:	d1e0      	bne.n	8006c86 <_free_r+0x26>
 8006cc4:	681c      	ldr	r4, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	6053      	str	r3, [r2, #4]
 8006cca:	4421      	add	r1, r4
 8006ccc:	6011      	str	r1, [r2, #0]
 8006cce:	e7da      	b.n	8006c86 <_free_r+0x26>
 8006cd0:	d902      	bls.n	8006cd8 <_free_r+0x78>
 8006cd2:	230c      	movs	r3, #12
 8006cd4:	6003      	str	r3, [r0, #0]
 8006cd6:	e7d6      	b.n	8006c86 <_free_r+0x26>
 8006cd8:	6825      	ldr	r5, [r4, #0]
 8006cda:	1961      	adds	r1, r4, r5
 8006cdc:	428b      	cmp	r3, r1
 8006cde:	bf04      	itt	eq
 8006ce0:	6819      	ldreq	r1, [r3, #0]
 8006ce2:	685b      	ldreq	r3, [r3, #4]
 8006ce4:	6063      	str	r3, [r4, #4]
 8006ce6:	bf04      	itt	eq
 8006ce8:	1949      	addeq	r1, r1, r5
 8006cea:	6021      	streq	r1, [r4, #0]
 8006cec:	6054      	str	r4, [r2, #4]
 8006cee:	e7ca      	b.n	8006c86 <_free_r+0x26>
 8006cf0:	b003      	add	sp, #12
 8006cf2:	bd30      	pop	{r4, r5, pc}
 8006cf4:	20000484 	.word	0x20000484

08006cf8 <sbrk_aligned>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	4e0e      	ldr	r6, [pc, #56]	; (8006d34 <sbrk_aligned+0x3c>)
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	6831      	ldr	r1, [r6, #0]
 8006d00:	4605      	mov	r5, r0
 8006d02:	b911      	cbnz	r1, 8006d0a <sbrk_aligned+0x12>
 8006d04:	f000 fd98 	bl	8007838 <_sbrk_r>
 8006d08:	6030      	str	r0, [r6, #0]
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f000 fd93 	bl	8007838 <_sbrk_r>
 8006d12:	1c43      	adds	r3, r0, #1
 8006d14:	d00a      	beq.n	8006d2c <sbrk_aligned+0x34>
 8006d16:	1cc4      	adds	r4, r0, #3
 8006d18:	f024 0403 	bic.w	r4, r4, #3
 8006d1c:	42a0      	cmp	r0, r4
 8006d1e:	d007      	beq.n	8006d30 <sbrk_aligned+0x38>
 8006d20:	1a21      	subs	r1, r4, r0
 8006d22:	4628      	mov	r0, r5
 8006d24:	f000 fd88 	bl	8007838 <_sbrk_r>
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d101      	bne.n	8006d30 <sbrk_aligned+0x38>
 8006d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8006d30:	4620      	mov	r0, r4
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	20000488 	.word	0x20000488

08006d38 <_malloc_r>:
 8006d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d3c:	1ccd      	adds	r5, r1, #3
 8006d3e:	f025 0503 	bic.w	r5, r5, #3
 8006d42:	3508      	adds	r5, #8
 8006d44:	2d0c      	cmp	r5, #12
 8006d46:	bf38      	it	cc
 8006d48:	250c      	movcc	r5, #12
 8006d4a:	2d00      	cmp	r5, #0
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	db01      	blt.n	8006d54 <_malloc_r+0x1c>
 8006d50:	42a9      	cmp	r1, r5
 8006d52:	d905      	bls.n	8006d60 <_malloc_r+0x28>
 8006d54:	230c      	movs	r3, #12
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	2600      	movs	r6, #0
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d60:	4e2e      	ldr	r6, [pc, #184]	; (8006e1c <_malloc_r+0xe4>)
 8006d62:	f002 f85f 	bl	8008e24 <__malloc_lock>
 8006d66:	6833      	ldr	r3, [r6, #0]
 8006d68:	461c      	mov	r4, r3
 8006d6a:	bb34      	cbnz	r4, 8006dba <_malloc_r+0x82>
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	4638      	mov	r0, r7
 8006d70:	f7ff ffc2 	bl	8006cf8 <sbrk_aligned>
 8006d74:	1c43      	adds	r3, r0, #1
 8006d76:	4604      	mov	r4, r0
 8006d78:	d14d      	bne.n	8006e16 <_malloc_r+0xde>
 8006d7a:	6834      	ldr	r4, [r6, #0]
 8006d7c:	4626      	mov	r6, r4
 8006d7e:	2e00      	cmp	r6, #0
 8006d80:	d140      	bne.n	8006e04 <_malloc_r+0xcc>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	4631      	mov	r1, r6
 8006d86:	4638      	mov	r0, r7
 8006d88:	eb04 0803 	add.w	r8, r4, r3
 8006d8c:	f000 fd54 	bl	8007838 <_sbrk_r>
 8006d90:	4580      	cmp	r8, r0
 8006d92:	d13a      	bne.n	8006e0a <_malloc_r+0xd2>
 8006d94:	6821      	ldr	r1, [r4, #0]
 8006d96:	3503      	adds	r5, #3
 8006d98:	1a6d      	subs	r5, r5, r1
 8006d9a:	f025 0503 	bic.w	r5, r5, #3
 8006d9e:	3508      	adds	r5, #8
 8006da0:	2d0c      	cmp	r5, #12
 8006da2:	bf38      	it	cc
 8006da4:	250c      	movcc	r5, #12
 8006da6:	4629      	mov	r1, r5
 8006da8:	4638      	mov	r0, r7
 8006daa:	f7ff ffa5 	bl	8006cf8 <sbrk_aligned>
 8006dae:	3001      	adds	r0, #1
 8006db0:	d02b      	beq.n	8006e0a <_malloc_r+0xd2>
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	442b      	add	r3, r5
 8006db6:	6023      	str	r3, [r4, #0]
 8006db8:	e00e      	b.n	8006dd8 <_malloc_r+0xa0>
 8006dba:	6822      	ldr	r2, [r4, #0]
 8006dbc:	1b52      	subs	r2, r2, r5
 8006dbe:	d41e      	bmi.n	8006dfe <_malloc_r+0xc6>
 8006dc0:	2a0b      	cmp	r2, #11
 8006dc2:	d916      	bls.n	8006df2 <_malloc_r+0xba>
 8006dc4:	1961      	adds	r1, r4, r5
 8006dc6:	42a3      	cmp	r3, r4
 8006dc8:	6025      	str	r5, [r4, #0]
 8006dca:	bf18      	it	ne
 8006dcc:	6059      	strne	r1, [r3, #4]
 8006dce:	6863      	ldr	r3, [r4, #4]
 8006dd0:	bf08      	it	eq
 8006dd2:	6031      	streq	r1, [r6, #0]
 8006dd4:	5162      	str	r2, [r4, r5]
 8006dd6:	604b      	str	r3, [r1, #4]
 8006dd8:	4638      	mov	r0, r7
 8006dda:	f104 060b 	add.w	r6, r4, #11
 8006dde:	f002 f827 	bl	8008e30 <__malloc_unlock>
 8006de2:	f026 0607 	bic.w	r6, r6, #7
 8006de6:	1d23      	adds	r3, r4, #4
 8006de8:	1af2      	subs	r2, r6, r3
 8006dea:	d0b6      	beq.n	8006d5a <_malloc_r+0x22>
 8006dec:	1b9b      	subs	r3, r3, r6
 8006dee:	50a3      	str	r3, [r4, r2]
 8006df0:	e7b3      	b.n	8006d5a <_malloc_r+0x22>
 8006df2:	6862      	ldr	r2, [r4, #4]
 8006df4:	42a3      	cmp	r3, r4
 8006df6:	bf0c      	ite	eq
 8006df8:	6032      	streq	r2, [r6, #0]
 8006dfa:	605a      	strne	r2, [r3, #4]
 8006dfc:	e7ec      	b.n	8006dd8 <_malloc_r+0xa0>
 8006dfe:	4623      	mov	r3, r4
 8006e00:	6864      	ldr	r4, [r4, #4]
 8006e02:	e7b2      	b.n	8006d6a <_malloc_r+0x32>
 8006e04:	4634      	mov	r4, r6
 8006e06:	6876      	ldr	r6, [r6, #4]
 8006e08:	e7b9      	b.n	8006d7e <_malloc_r+0x46>
 8006e0a:	230c      	movs	r3, #12
 8006e0c:	603b      	str	r3, [r7, #0]
 8006e0e:	4638      	mov	r0, r7
 8006e10:	f002 f80e 	bl	8008e30 <__malloc_unlock>
 8006e14:	e7a1      	b.n	8006d5a <_malloc_r+0x22>
 8006e16:	6025      	str	r5, [r4, #0]
 8006e18:	e7de      	b.n	8006dd8 <_malloc_r+0xa0>
 8006e1a:	bf00      	nop
 8006e1c:	20000484 	.word	0x20000484

08006e20 <__cvt>:
 8006e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e24:	ec55 4b10 	vmov	r4, r5, d0
 8006e28:	2d00      	cmp	r5, #0
 8006e2a:	460e      	mov	r6, r1
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	462b      	mov	r3, r5
 8006e30:	bfbb      	ittet	lt
 8006e32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e36:	461d      	movlt	r5, r3
 8006e38:	2300      	movge	r3, #0
 8006e3a:	232d      	movlt	r3, #45	; 0x2d
 8006e3c:	700b      	strb	r3, [r1, #0]
 8006e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e44:	4691      	mov	r9, r2
 8006e46:	f023 0820 	bic.w	r8, r3, #32
 8006e4a:	bfbc      	itt	lt
 8006e4c:	4622      	movlt	r2, r4
 8006e4e:	4614      	movlt	r4, r2
 8006e50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e54:	d005      	beq.n	8006e62 <__cvt+0x42>
 8006e56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e5a:	d100      	bne.n	8006e5e <__cvt+0x3e>
 8006e5c:	3601      	adds	r6, #1
 8006e5e:	2102      	movs	r1, #2
 8006e60:	e000      	b.n	8006e64 <__cvt+0x44>
 8006e62:	2103      	movs	r1, #3
 8006e64:	ab03      	add	r3, sp, #12
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	ab02      	add	r3, sp, #8
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	ec45 4b10 	vmov	d0, r4, r5
 8006e70:	4653      	mov	r3, sl
 8006e72:	4632      	mov	r2, r6
 8006e74:	f000 ffdc 	bl	8007e30 <_dtoa_r>
 8006e78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	d102      	bne.n	8006e86 <__cvt+0x66>
 8006e80:	f019 0f01 	tst.w	r9, #1
 8006e84:	d022      	beq.n	8006ecc <__cvt+0xac>
 8006e86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e8a:	eb07 0906 	add.w	r9, r7, r6
 8006e8e:	d110      	bne.n	8006eb2 <__cvt+0x92>
 8006e90:	783b      	ldrb	r3, [r7, #0]
 8006e92:	2b30      	cmp	r3, #48	; 0x30
 8006e94:	d10a      	bne.n	8006eac <__cvt+0x8c>
 8006e96:	2200      	movs	r2, #0
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	f7f9 fe13 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ea2:	b918      	cbnz	r0, 8006eac <__cvt+0x8c>
 8006ea4:	f1c6 0601 	rsb	r6, r6, #1
 8006ea8:	f8ca 6000 	str.w	r6, [sl]
 8006eac:	f8da 3000 	ldr.w	r3, [sl]
 8006eb0:	4499      	add	r9, r3
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	4629      	mov	r1, r5
 8006eba:	f7f9 fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ebe:	b108      	cbz	r0, 8006ec4 <__cvt+0xa4>
 8006ec0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ec4:	2230      	movs	r2, #48	; 0x30
 8006ec6:	9b03      	ldr	r3, [sp, #12]
 8006ec8:	454b      	cmp	r3, r9
 8006eca:	d307      	bcc.n	8006edc <__cvt+0xbc>
 8006ecc:	9b03      	ldr	r3, [sp, #12]
 8006ece:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ed0:	1bdb      	subs	r3, r3, r7
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	b004      	add	sp, #16
 8006ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006edc:	1c59      	adds	r1, r3, #1
 8006ede:	9103      	str	r1, [sp, #12]
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	e7f0      	b.n	8006ec6 <__cvt+0xa6>

08006ee4 <__exponent>:
 8006ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2900      	cmp	r1, #0
 8006eea:	bfb8      	it	lt
 8006eec:	4249      	neglt	r1, r1
 8006eee:	f803 2b02 	strb.w	r2, [r3], #2
 8006ef2:	bfb4      	ite	lt
 8006ef4:	222d      	movlt	r2, #45	; 0x2d
 8006ef6:	222b      	movge	r2, #43	; 0x2b
 8006ef8:	2909      	cmp	r1, #9
 8006efa:	7042      	strb	r2, [r0, #1]
 8006efc:	dd2a      	ble.n	8006f54 <__exponent+0x70>
 8006efe:	f10d 0407 	add.w	r4, sp, #7
 8006f02:	46a4      	mov	ip, r4
 8006f04:	270a      	movs	r7, #10
 8006f06:	46a6      	mov	lr, r4
 8006f08:	460a      	mov	r2, r1
 8006f0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006f0e:	fb07 1516 	mls	r5, r7, r6, r1
 8006f12:	3530      	adds	r5, #48	; 0x30
 8006f14:	2a63      	cmp	r2, #99	; 0x63
 8006f16:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f1e:	4631      	mov	r1, r6
 8006f20:	dcf1      	bgt.n	8006f06 <__exponent+0x22>
 8006f22:	3130      	adds	r1, #48	; 0x30
 8006f24:	f1ae 0502 	sub.w	r5, lr, #2
 8006f28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006f2c:	1c44      	adds	r4, r0, #1
 8006f2e:	4629      	mov	r1, r5
 8006f30:	4561      	cmp	r1, ip
 8006f32:	d30a      	bcc.n	8006f4a <__exponent+0x66>
 8006f34:	f10d 0209 	add.w	r2, sp, #9
 8006f38:	eba2 020e 	sub.w	r2, r2, lr
 8006f3c:	4565      	cmp	r5, ip
 8006f3e:	bf88      	it	hi
 8006f40:	2200      	movhi	r2, #0
 8006f42:	4413      	add	r3, r2
 8006f44:	1a18      	subs	r0, r3, r0
 8006f46:	b003      	add	sp, #12
 8006f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006f52:	e7ed      	b.n	8006f30 <__exponent+0x4c>
 8006f54:	2330      	movs	r3, #48	; 0x30
 8006f56:	3130      	adds	r1, #48	; 0x30
 8006f58:	7083      	strb	r3, [r0, #2]
 8006f5a:	70c1      	strb	r1, [r0, #3]
 8006f5c:	1d03      	adds	r3, r0, #4
 8006f5e:	e7f1      	b.n	8006f44 <__exponent+0x60>

08006f60 <_printf_float>:
 8006f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	ed2d 8b02 	vpush	{d8}
 8006f68:	b08d      	sub	sp, #52	; 0x34
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006f70:	4616      	mov	r6, r2
 8006f72:	461f      	mov	r7, r3
 8006f74:	4605      	mov	r5, r0
 8006f76:	f001 ff3f 	bl	8008df8 <_localeconv_r>
 8006f7a:	f8d0 a000 	ldr.w	sl, [r0]
 8006f7e:	4650      	mov	r0, sl
 8006f80:	f7f9 f926 	bl	80001d0 <strlen>
 8006f84:	2300      	movs	r3, #0
 8006f86:	930a      	str	r3, [sp, #40]	; 0x28
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	9305      	str	r3, [sp, #20]
 8006f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f94:	3307      	adds	r3, #7
 8006f96:	f023 0307 	bic.w	r3, r3, #7
 8006f9a:	f103 0208 	add.w	r2, r3, #8
 8006f9e:	f8c8 2000 	str.w	r2, [r8]
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006faa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006fae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006fb2:	9307      	str	r3, [sp, #28]
 8006fb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006fb8:	ee08 0a10 	vmov	s16, r0
 8006fbc:	4b9f      	ldr	r3, [pc, #636]	; (800723c <_printf_float+0x2dc>)
 8006fbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc6:	f7f9 fdb1 	bl	8000b2c <__aeabi_dcmpun>
 8006fca:	bb88      	cbnz	r0, 8007030 <_printf_float+0xd0>
 8006fcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fd0:	4b9a      	ldr	r3, [pc, #616]	; (800723c <_printf_float+0x2dc>)
 8006fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd6:	f7f9 fd8b 	bl	8000af0 <__aeabi_dcmple>
 8006fda:	bb48      	cbnz	r0, 8007030 <_printf_float+0xd0>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2300      	movs	r3, #0
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	f7f9 fd7a 	bl	8000adc <__aeabi_dcmplt>
 8006fe8:	b110      	cbz	r0, 8006ff0 <_printf_float+0x90>
 8006fea:	232d      	movs	r3, #45	; 0x2d
 8006fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ff0:	4b93      	ldr	r3, [pc, #588]	; (8007240 <_printf_float+0x2e0>)
 8006ff2:	4894      	ldr	r0, [pc, #592]	; (8007244 <_printf_float+0x2e4>)
 8006ff4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ff8:	bf94      	ite	ls
 8006ffa:	4698      	movls	r8, r3
 8006ffc:	4680      	movhi	r8, r0
 8006ffe:	2303      	movs	r3, #3
 8007000:	6123      	str	r3, [r4, #16]
 8007002:	9b05      	ldr	r3, [sp, #20]
 8007004:	f023 0204 	bic.w	r2, r3, #4
 8007008:	6022      	str	r2, [r4, #0]
 800700a:	f04f 0900 	mov.w	r9, #0
 800700e:	9700      	str	r7, [sp, #0]
 8007010:	4633      	mov	r3, r6
 8007012:	aa0b      	add	r2, sp, #44	; 0x2c
 8007014:	4621      	mov	r1, r4
 8007016:	4628      	mov	r0, r5
 8007018:	f000 f9d8 	bl	80073cc <_printf_common>
 800701c:	3001      	adds	r0, #1
 800701e:	f040 8090 	bne.w	8007142 <_printf_float+0x1e2>
 8007022:	f04f 30ff 	mov.w	r0, #4294967295
 8007026:	b00d      	add	sp, #52	; 0x34
 8007028:	ecbd 8b02 	vpop	{d8}
 800702c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007030:	4642      	mov	r2, r8
 8007032:	464b      	mov	r3, r9
 8007034:	4640      	mov	r0, r8
 8007036:	4649      	mov	r1, r9
 8007038:	f7f9 fd78 	bl	8000b2c <__aeabi_dcmpun>
 800703c:	b140      	cbz	r0, 8007050 <_printf_float+0xf0>
 800703e:	464b      	mov	r3, r9
 8007040:	2b00      	cmp	r3, #0
 8007042:	bfbc      	itt	lt
 8007044:	232d      	movlt	r3, #45	; 0x2d
 8007046:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800704a:	487f      	ldr	r0, [pc, #508]	; (8007248 <_printf_float+0x2e8>)
 800704c:	4b7f      	ldr	r3, [pc, #508]	; (800724c <_printf_float+0x2ec>)
 800704e:	e7d1      	b.n	8006ff4 <_printf_float+0x94>
 8007050:	6863      	ldr	r3, [r4, #4]
 8007052:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007056:	9206      	str	r2, [sp, #24]
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	d13f      	bne.n	80070dc <_printf_float+0x17c>
 800705c:	2306      	movs	r3, #6
 800705e:	6063      	str	r3, [r4, #4]
 8007060:	9b05      	ldr	r3, [sp, #20]
 8007062:	6861      	ldr	r1, [r4, #4]
 8007064:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007068:	2300      	movs	r3, #0
 800706a:	9303      	str	r3, [sp, #12]
 800706c:	ab0a      	add	r3, sp, #40	; 0x28
 800706e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007072:	ab09      	add	r3, sp, #36	; 0x24
 8007074:	ec49 8b10 	vmov	d0, r8, r9
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	6022      	str	r2, [r4, #0]
 800707c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007080:	4628      	mov	r0, r5
 8007082:	f7ff fecd 	bl	8006e20 <__cvt>
 8007086:	9b06      	ldr	r3, [sp, #24]
 8007088:	9909      	ldr	r1, [sp, #36]	; 0x24
 800708a:	2b47      	cmp	r3, #71	; 0x47
 800708c:	4680      	mov	r8, r0
 800708e:	d108      	bne.n	80070a2 <_printf_float+0x142>
 8007090:	1cc8      	adds	r0, r1, #3
 8007092:	db02      	blt.n	800709a <_printf_float+0x13a>
 8007094:	6863      	ldr	r3, [r4, #4]
 8007096:	4299      	cmp	r1, r3
 8007098:	dd41      	ble.n	800711e <_printf_float+0x1be>
 800709a:	f1ab 0b02 	sub.w	fp, fp, #2
 800709e:	fa5f fb8b 	uxtb.w	fp, fp
 80070a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070a6:	d820      	bhi.n	80070ea <_printf_float+0x18a>
 80070a8:	3901      	subs	r1, #1
 80070aa:	465a      	mov	r2, fp
 80070ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070b0:	9109      	str	r1, [sp, #36]	; 0x24
 80070b2:	f7ff ff17 	bl	8006ee4 <__exponent>
 80070b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070b8:	1813      	adds	r3, r2, r0
 80070ba:	2a01      	cmp	r2, #1
 80070bc:	4681      	mov	r9, r0
 80070be:	6123      	str	r3, [r4, #16]
 80070c0:	dc02      	bgt.n	80070c8 <_printf_float+0x168>
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	07d2      	lsls	r2, r2, #31
 80070c6:	d501      	bpl.n	80070cc <_printf_float+0x16c>
 80070c8:	3301      	adds	r3, #1
 80070ca:	6123      	str	r3, [r4, #16]
 80070cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d09c      	beq.n	800700e <_printf_float+0xae>
 80070d4:	232d      	movs	r3, #45	; 0x2d
 80070d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070da:	e798      	b.n	800700e <_printf_float+0xae>
 80070dc:	9a06      	ldr	r2, [sp, #24]
 80070de:	2a47      	cmp	r2, #71	; 0x47
 80070e0:	d1be      	bne.n	8007060 <_printf_float+0x100>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1bc      	bne.n	8007060 <_printf_float+0x100>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e7b9      	b.n	800705e <_printf_float+0xfe>
 80070ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80070ee:	d118      	bne.n	8007122 <_printf_float+0x1c2>
 80070f0:	2900      	cmp	r1, #0
 80070f2:	6863      	ldr	r3, [r4, #4]
 80070f4:	dd0b      	ble.n	800710e <_printf_float+0x1ae>
 80070f6:	6121      	str	r1, [r4, #16]
 80070f8:	b913      	cbnz	r3, 8007100 <_printf_float+0x1a0>
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	07d0      	lsls	r0, r2, #31
 80070fe:	d502      	bpl.n	8007106 <_printf_float+0x1a6>
 8007100:	3301      	adds	r3, #1
 8007102:	440b      	add	r3, r1
 8007104:	6123      	str	r3, [r4, #16]
 8007106:	65a1      	str	r1, [r4, #88]	; 0x58
 8007108:	f04f 0900 	mov.w	r9, #0
 800710c:	e7de      	b.n	80070cc <_printf_float+0x16c>
 800710e:	b913      	cbnz	r3, 8007116 <_printf_float+0x1b6>
 8007110:	6822      	ldr	r2, [r4, #0]
 8007112:	07d2      	lsls	r2, r2, #31
 8007114:	d501      	bpl.n	800711a <_printf_float+0x1ba>
 8007116:	3302      	adds	r3, #2
 8007118:	e7f4      	b.n	8007104 <_printf_float+0x1a4>
 800711a:	2301      	movs	r3, #1
 800711c:	e7f2      	b.n	8007104 <_printf_float+0x1a4>
 800711e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007124:	4299      	cmp	r1, r3
 8007126:	db05      	blt.n	8007134 <_printf_float+0x1d4>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	6121      	str	r1, [r4, #16]
 800712c:	07d8      	lsls	r0, r3, #31
 800712e:	d5ea      	bpl.n	8007106 <_printf_float+0x1a6>
 8007130:	1c4b      	adds	r3, r1, #1
 8007132:	e7e7      	b.n	8007104 <_printf_float+0x1a4>
 8007134:	2900      	cmp	r1, #0
 8007136:	bfd4      	ite	le
 8007138:	f1c1 0202 	rsble	r2, r1, #2
 800713c:	2201      	movgt	r2, #1
 800713e:	4413      	add	r3, r2
 8007140:	e7e0      	b.n	8007104 <_printf_float+0x1a4>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	055a      	lsls	r2, r3, #21
 8007146:	d407      	bmi.n	8007158 <_printf_float+0x1f8>
 8007148:	6923      	ldr	r3, [r4, #16]
 800714a:	4642      	mov	r2, r8
 800714c:	4631      	mov	r1, r6
 800714e:	4628      	mov	r0, r5
 8007150:	47b8      	blx	r7
 8007152:	3001      	adds	r0, #1
 8007154:	d12c      	bne.n	80071b0 <_printf_float+0x250>
 8007156:	e764      	b.n	8007022 <_printf_float+0xc2>
 8007158:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800715c:	f240 80e0 	bls.w	8007320 <_printf_float+0x3c0>
 8007160:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007164:	2200      	movs	r2, #0
 8007166:	2300      	movs	r3, #0
 8007168:	f7f9 fcae 	bl	8000ac8 <__aeabi_dcmpeq>
 800716c:	2800      	cmp	r0, #0
 800716e:	d034      	beq.n	80071da <_printf_float+0x27a>
 8007170:	4a37      	ldr	r2, [pc, #220]	; (8007250 <_printf_float+0x2f0>)
 8007172:	2301      	movs	r3, #1
 8007174:	4631      	mov	r1, r6
 8007176:	4628      	mov	r0, r5
 8007178:	47b8      	blx	r7
 800717a:	3001      	adds	r0, #1
 800717c:	f43f af51 	beq.w	8007022 <_printf_float+0xc2>
 8007180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007184:	429a      	cmp	r2, r3
 8007186:	db02      	blt.n	800718e <_printf_float+0x22e>
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	07d8      	lsls	r0, r3, #31
 800718c:	d510      	bpl.n	80071b0 <_printf_float+0x250>
 800718e:	ee18 3a10 	vmov	r3, s16
 8007192:	4652      	mov	r2, sl
 8007194:	4631      	mov	r1, r6
 8007196:	4628      	mov	r0, r5
 8007198:	47b8      	blx	r7
 800719a:	3001      	adds	r0, #1
 800719c:	f43f af41 	beq.w	8007022 <_printf_float+0xc2>
 80071a0:	f04f 0800 	mov.w	r8, #0
 80071a4:	f104 091a 	add.w	r9, r4, #26
 80071a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071aa:	3b01      	subs	r3, #1
 80071ac:	4543      	cmp	r3, r8
 80071ae:	dc09      	bgt.n	80071c4 <_printf_float+0x264>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	079b      	lsls	r3, r3, #30
 80071b4:	f100 8105 	bmi.w	80073c2 <_printf_float+0x462>
 80071b8:	68e0      	ldr	r0, [r4, #12]
 80071ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071bc:	4298      	cmp	r0, r3
 80071be:	bfb8      	it	lt
 80071c0:	4618      	movlt	r0, r3
 80071c2:	e730      	b.n	8007026 <_printf_float+0xc6>
 80071c4:	2301      	movs	r3, #1
 80071c6:	464a      	mov	r2, r9
 80071c8:	4631      	mov	r1, r6
 80071ca:	4628      	mov	r0, r5
 80071cc:	47b8      	blx	r7
 80071ce:	3001      	adds	r0, #1
 80071d0:	f43f af27 	beq.w	8007022 <_printf_float+0xc2>
 80071d4:	f108 0801 	add.w	r8, r8, #1
 80071d8:	e7e6      	b.n	80071a8 <_printf_float+0x248>
 80071da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dc39      	bgt.n	8007254 <_printf_float+0x2f4>
 80071e0:	4a1b      	ldr	r2, [pc, #108]	; (8007250 <_printf_float+0x2f0>)
 80071e2:	2301      	movs	r3, #1
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	f43f af19 	beq.w	8007022 <_printf_float+0xc2>
 80071f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071f4:	4313      	orrs	r3, r2
 80071f6:	d102      	bne.n	80071fe <_printf_float+0x29e>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	07d9      	lsls	r1, r3, #31
 80071fc:	d5d8      	bpl.n	80071b0 <_printf_float+0x250>
 80071fe:	ee18 3a10 	vmov	r3, s16
 8007202:	4652      	mov	r2, sl
 8007204:	4631      	mov	r1, r6
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	f43f af09 	beq.w	8007022 <_printf_float+0xc2>
 8007210:	f04f 0900 	mov.w	r9, #0
 8007214:	f104 0a1a 	add.w	sl, r4, #26
 8007218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800721a:	425b      	negs	r3, r3
 800721c:	454b      	cmp	r3, r9
 800721e:	dc01      	bgt.n	8007224 <_printf_float+0x2c4>
 8007220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007222:	e792      	b.n	800714a <_printf_float+0x1ea>
 8007224:	2301      	movs	r3, #1
 8007226:	4652      	mov	r2, sl
 8007228:	4631      	mov	r1, r6
 800722a:	4628      	mov	r0, r5
 800722c:	47b8      	blx	r7
 800722e:	3001      	adds	r0, #1
 8007230:	f43f aef7 	beq.w	8007022 <_printf_float+0xc2>
 8007234:	f109 0901 	add.w	r9, r9, #1
 8007238:	e7ee      	b.n	8007218 <_printf_float+0x2b8>
 800723a:	bf00      	nop
 800723c:	7fefffff 	.word	0x7fefffff
 8007240:	0800a02c 	.word	0x0800a02c
 8007244:	0800a030 	.word	0x0800a030
 8007248:	0800a038 	.word	0x0800a038
 800724c:	0800a034 	.word	0x0800a034
 8007250:	0800a03c 	.word	0x0800a03c
 8007254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007256:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007258:	429a      	cmp	r2, r3
 800725a:	bfa8      	it	ge
 800725c:	461a      	movge	r2, r3
 800725e:	2a00      	cmp	r2, #0
 8007260:	4691      	mov	r9, r2
 8007262:	dc37      	bgt.n	80072d4 <_printf_float+0x374>
 8007264:	f04f 0b00 	mov.w	fp, #0
 8007268:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800726c:	f104 021a 	add.w	r2, r4, #26
 8007270:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007272:	9305      	str	r3, [sp, #20]
 8007274:	eba3 0309 	sub.w	r3, r3, r9
 8007278:	455b      	cmp	r3, fp
 800727a:	dc33      	bgt.n	80072e4 <_printf_float+0x384>
 800727c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007280:	429a      	cmp	r2, r3
 8007282:	db3b      	blt.n	80072fc <_printf_float+0x39c>
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	07da      	lsls	r2, r3, #31
 8007288:	d438      	bmi.n	80072fc <_printf_float+0x39c>
 800728a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728c:	9a05      	ldr	r2, [sp, #20]
 800728e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007290:	1a9a      	subs	r2, r3, r2
 8007292:	eba3 0901 	sub.w	r9, r3, r1
 8007296:	4591      	cmp	r9, r2
 8007298:	bfa8      	it	ge
 800729a:	4691      	movge	r9, r2
 800729c:	f1b9 0f00 	cmp.w	r9, #0
 80072a0:	dc35      	bgt.n	800730e <_printf_float+0x3ae>
 80072a2:	f04f 0800 	mov.w	r8, #0
 80072a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072aa:	f104 0a1a 	add.w	sl, r4, #26
 80072ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072b2:	1a9b      	subs	r3, r3, r2
 80072b4:	eba3 0309 	sub.w	r3, r3, r9
 80072b8:	4543      	cmp	r3, r8
 80072ba:	f77f af79 	ble.w	80071b0 <_printf_float+0x250>
 80072be:	2301      	movs	r3, #1
 80072c0:	4652      	mov	r2, sl
 80072c2:	4631      	mov	r1, r6
 80072c4:	4628      	mov	r0, r5
 80072c6:	47b8      	blx	r7
 80072c8:	3001      	adds	r0, #1
 80072ca:	f43f aeaa 	beq.w	8007022 <_printf_float+0xc2>
 80072ce:	f108 0801 	add.w	r8, r8, #1
 80072d2:	e7ec      	b.n	80072ae <_printf_float+0x34e>
 80072d4:	4613      	mov	r3, r2
 80072d6:	4631      	mov	r1, r6
 80072d8:	4642      	mov	r2, r8
 80072da:	4628      	mov	r0, r5
 80072dc:	47b8      	blx	r7
 80072de:	3001      	adds	r0, #1
 80072e0:	d1c0      	bne.n	8007264 <_printf_float+0x304>
 80072e2:	e69e      	b.n	8007022 <_printf_float+0xc2>
 80072e4:	2301      	movs	r3, #1
 80072e6:	4631      	mov	r1, r6
 80072e8:	4628      	mov	r0, r5
 80072ea:	9205      	str	r2, [sp, #20]
 80072ec:	47b8      	blx	r7
 80072ee:	3001      	adds	r0, #1
 80072f0:	f43f ae97 	beq.w	8007022 <_printf_float+0xc2>
 80072f4:	9a05      	ldr	r2, [sp, #20]
 80072f6:	f10b 0b01 	add.w	fp, fp, #1
 80072fa:	e7b9      	b.n	8007270 <_printf_float+0x310>
 80072fc:	ee18 3a10 	vmov	r3, s16
 8007300:	4652      	mov	r2, sl
 8007302:	4631      	mov	r1, r6
 8007304:	4628      	mov	r0, r5
 8007306:	47b8      	blx	r7
 8007308:	3001      	adds	r0, #1
 800730a:	d1be      	bne.n	800728a <_printf_float+0x32a>
 800730c:	e689      	b.n	8007022 <_printf_float+0xc2>
 800730e:	9a05      	ldr	r2, [sp, #20]
 8007310:	464b      	mov	r3, r9
 8007312:	4442      	add	r2, r8
 8007314:	4631      	mov	r1, r6
 8007316:	4628      	mov	r0, r5
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	d1c1      	bne.n	80072a2 <_printf_float+0x342>
 800731e:	e680      	b.n	8007022 <_printf_float+0xc2>
 8007320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007322:	2a01      	cmp	r2, #1
 8007324:	dc01      	bgt.n	800732a <_printf_float+0x3ca>
 8007326:	07db      	lsls	r3, r3, #31
 8007328:	d538      	bpl.n	800739c <_printf_float+0x43c>
 800732a:	2301      	movs	r3, #1
 800732c:	4642      	mov	r2, r8
 800732e:	4631      	mov	r1, r6
 8007330:	4628      	mov	r0, r5
 8007332:	47b8      	blx	r7
 8007334:	3001      	adds	r0, #1
 8007336:	f43f ae74 	beq.w	8007022 <_printf_float+0xc2>
 800733a:	ee18 3a10 	vmov	r3, s16
 800733e:	4652      	mov	r2, sl
 8007340:	4631      	mov	r1, r6
 8007342:	4628      	mov	r0, r5
 8007344:	47b8      	blx	r7
 8007346:	3001      	adds	r0, #1
 8007348:	f43f ae6b 	beq.w	8007022 <_printf_float+0xc2>
 800734c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007350:	2200      	movs	r2, #0
 8007352:	2300      	movs	r3, #0
 8007354:	f7f9 fbb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007358:	b9d8      	cbnz	r0, 8007392 <_printf_float+0x432>
 800735a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735c:	f108 0201 	add.w	r2, r8, #1
 8007360:	3b01      	subs	r3, #1
 8007362:	4631      	mov	r1, r6
 8007364:	4628      	mov	r0, r5
 8007366:	47b8      	blx	r7
 8007368:	3001      	adds	r0, #1
 800736a:	d10e      	bne.n	800738a <_printf_float+0x42a>
 800736c:	e659      	b.n	8007022 <_printf_float+0xc2>
 800736e:	2301      	movs	r3, #1
 8007370:	4652      	mov	r2, sl
 8007372:	4631      	mov	r1, r6
 8007374:	4628      	mov	r0, r5
 8007376:	47b8      	blx	r7
 8007378:	3001      	adds	r0, #1
 800737a:	f43f ae52 	beq.w	8007022 <_printf_float+0xc2>
 800737e:	f108 0801 	add.w	r8, r8, #1
 8007382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007384:	3b01      	subs	r3, #1
 8007386:	4543      	cmp	r3, r8
 8007388:	dcf1      	bgt.n	800736e <_printf_float+0x40e>
 800738a:	464b      	mov	r3, r9
 800738c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007390:	e6dc      	b.n	800714c <_printf_float+0x1ec>
 8007392:	f04f 0800 	mov.w	r8, #0
 8007396:	f104 0a1a 	add.w	sl, r4, #26
 800739a:	e7f2      	b.n	8007382 <_printf_float+0x422>
 800739c:	2301      	movs	r3, #1
 800739e:	4642      	mov	r2, r8
 80073a0:	e7df      	b.n	8007362 <_printf_float+0x402>
 80073a2:	2301      	movs	r3, #1
 80073a4:	464a      	mov	r2, r9
 80073a6:	4631      	mov	r1, r6
 80073a8:	4628      	mov	r0, r5
 80073aa:	47b8      	blx	r7
 80073ac:	3001      	adds	r0, #1
 80073ae:	f43f ae38 	beq.w	8007022 <_printf_float+0xc2>
 80073b2:	f108 0801 	add.w	r8, r8, #1
 80073b6:	68e3      	ldr	r3, [r4, #12]
 80073b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073ba:	1a5b      	subs	r3, r3, r1
 80073bc:	4543      	cmp	r3, r8
 80073be:	dcf0      	bgt.n	80073a2 <_printf_float+0x442>
 80073c0:	e6fa      	b.n	80071b8 <_printf_float+0x258>
 80073c2:	f04f 0800 	mov.w	r8, #0
 80073c6:	f104 0919 	add.w	r9, r4, #25
 80073ca:	e7f4      	b.n	80073b6 <_printf_float+0x456>

080073cc <_printf_common>:
 80073cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d0:	4616      	mov	r6, r2
 80073d2:	4699      	mov	r9, r3
 80073d4:	688a      	ldr	r2, [r1, #8]
 80073d6:	690b      	ldr	r3, [r1, #16]
 80073d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073dc:	4293      	cmp	r3, r2
 80073de:	bfb8      	it	lt
 80073e0:	4613      	movlt	r3, r2
 80073e2:	6033      	str	r3, [r6, #0]
 80073e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073e8:	4607      	mov	r7, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	b10a      	cbz	r2, 80073f2 <_printf_common+0x26>
 80073ee:	3301      	adds	r3, #1
 80073f0:	6033      	str	r3, [r6, #0]
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	0699      	lsls	r1, r3, #26
 80073f6:	bf42      	ittt	mi
 80073f8:	6833      	ldrmi	r3, [r6, #0]
 80073fa:	3302      	addmi	r3, #2
 80073fc:	6033      	strmi	r3, [r6, #0]
 80073fe:	6825      	ldr	r5, [r4, #0]
 8007400:	f015 0506 	ands.w	r5, r5, #6
 8007404:	d106      	bne.n	8007414 <_printf_common+0x48>
 8007406:	f104 0a19 	add.w	sl, r4, #25
 800740a:	68e3      	ldr	r3, [r4, #12]
 800740c:	6832      	ldr	r2, [r6, #0]
 800740e:	1a9b      	subs	r3, r3, r2
 8007410:	42ab      	cmp	r3, r5
 8007412:	dc26      	bgt.n	8007462 <_printf_common+0x96>
 8007414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007418:	1e13      	subs	r3, r2, #0
 800741a:	6822      	ldr	r2, [r4, #0]
 800741c:	bf18      	it	ne
 800741e:	2301      	movne	r3, #1
 8007420:	0692      	lsls	r2, r2, #26
 8007422:	d42b      	bmi.n	800747c <_printf_common+0xb0>
 8007424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007428:	4649      	mov	r1, r9
 800742a:	4638      	mov	r0, r7
 800742c:	47c0      	blx	r8
 800742e:	3001      	adds	r0, #1
 8007430:	d01e      	beq.n	8007470 <_printf_common+0xa4>
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	68e5      	ldr	r5, [r4, #12]
 8007436:	6832      	ldr	r2, [r6, #0]
 8007438:	f003 0306 	and.w	r3, r3, #6
 800743c:	2b04      	cmp	r3, #4
 800743e:	bf08      	it	eq
 8007440:	1aad      	subeq	r5, r5, r2
 8007442:	68a3      	ldr	r3, [r4, #8]
 8007444:	6922      	ldr	r2, [r4, #16]
 8007446:	bf0c      	ite	eq
 8007448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800744c:	2500      	movne	r5, #0
 800744e:	4293      	cmp	r3, r2
 8007450:	bfc4      	itt	gt
 8007452:	1a9b      	subgt	r3, r3, r2
 8007454:	18ed      	addgt	r5, r5, r3
 8007456:	2600      	movs	r6, #0
 8007458:	341a      	adds	r4, #26
 800745a:	42b5      	cmp	r5, r6
 800745c:	d11a      	bne.n	8007494 <_printf_common+0xc8>
 800745e:	2000      	movs	r0, #0
 8007460:	e008      	b.n	8007474 <_printf_common+0xa8>
 8007462:	2301      	movs	r3, #1
 8007464:	4652      	mov	r2, sl
 8007466:	4649      	mov	r1, r9
 8007468:	4638      	mov	r0, r7
 800746a:	47c0      	blx	r8
 800746c:	3001      	adds	r0, #1
 800746e:	d103      	bne.n	8007478 <_printf_common+0xac>
 8007470:	f04f 30ff 	mov.w	r0, #4294967295
 8007474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007478:	3501      	adds	r5, #1
 800747a:	e7c6      	b.n	800740a <_printf_common+0x3e>
 800747c:	18e1      	adds	r1, r4, r3
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	2030      	movs	r0, #48	; 0x30
 8007482:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007486:	4422      	add	r2, r4
 8007488:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800748c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007490:	3302      	adds	r3, #2
 8007492:	e7c7      	b.n	8007424 <_printf_common+0x58>
 8007494:	2301      	movs	r3, #1
 8007496:	4622      	mov	r2, r4
 8007498:	4649      	mov	r1, r9
 800749a:	4638      	mov	r0, r7
 800749c:	47c0      	blx	r8
 800749e:	3001      	adds	r0, #1
 80074a0:	d0e6      	beq.n	8007470 <_printf_common+0xa4>
 80074a2:	3601      	adds	r6, #1
 80074a4:	e7d9      	b.n	800745a <_printf_common+0x8e>
	...

080074a8 <_printf_i>:
 80074a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074ac:	7e0f      	ldrb	r7, [r1, #24]
 80074ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074b0:	2f78      	cmp	r7, #120	; 0x78
 80074b2:	4691      	mov	r9, r2
 80074b4:	4680      	mov	r8, r0
 80074b6:	460c      	mov	r4, r1
 80074b8:	469a      	mov	sl, r3
 80074ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074be:	d807      	bhi.n	80074d0 <_printf_i+0x28>
 80074c0:	2f62      	cmp	r7, #98	; 0x62
 80074c2:	d80a      	bhi.n	80074da <_printf_i+0x32>
 80074c4:	2f00      	cmp	r7, #0
 80074c6:	f000 80d8 	beq.w	800767a <_printf_i+0x1d2>
 80074ca:	2f58      	cmp	r7, #88	; 0x58
 80074cc:	f000 80a3 	beq.w	8007616 <_printf_i+0x16e>
 80074d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074d8:	e03a      	b.n	8007550 <_printf_i+0xa8>
 80074da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074de:	2b15      	cmp	r3, #21
 80074e0:	d8f6      	bhi.n	80074d0 <_printf_i+0x28>
 80074e2:	a101      	add	r1, pc, #4	; (adr r1, 80074e8 <_printf_i+0x40>)
 80074e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074e8:	08007541 	.word	0x08007541
 80074ec:	08007555 	.word	0x08007555
 80074f0:	080074d1 	.word	0x080074d1
 80074f4:	080074d1 	.word	0x080074d1
 80074f8:	080074d1 	.word	0x080074d1
 80074fc:	080074d1 	.word	0x080074d1
 8007500:	08007555 	.word	0x08007555
 8007504:	080074d1 	.word	0x080074d1
 8007508:	080074d1 	.word	0x080074d1
 800750c:	080074d1 	.word	0x080074d1
 8007510:	080074d1 	.word	0x080074d1
 8007514:	08007661 	.word	0x08007661
 8007518:	08007585 	.word	0x08007585
 800751c:	08007643 	.word	0x08007643
 8007520:	080074d1 	.word	0x080074d1
 8007524:	080074d1 	.word	0x080074d1
 8007528:	08007683 	.word	0x08007683
 800752c:	080074d1 	.word	0x080074d1
 8007530:	08007585 	.word	0x08007585
 8007534:	080074d1 	.word	0x080074d1
 8007538:	080074d1 	.word	0x080074d1
 800753c:	0800764b 	.word	0x0800764b
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	1d1a      	adds	r2, r3, #4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	602a      	str	r2, [r5, #0]
 8007548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800754c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007550:	2301      	movs	r3, #1
 8007552:	e0a3      	b.n	800769c <_printf_i+0x1f4>
 8007554:	6820      	ldr	r0, [r4, #0]
 8007556:	6829      	ldr	r1, [r5, #0]
 8007558:	0606      	lsls	r6, r0, #24
 800755a:	f101 0304 	add.w	r3, r1, #4
 800755e:	d50a      	bpl.n	8007576 <_printf_i+0xce>
 8007560:	680e      	ldr	r6, [r1, #0]
 8007562:	602b      	str	r3, [r5, #0]
 8007564:	2e00      	cmp	r6, #0
 8007566:	da03      	bge.n	8007570 <_printf_i+0xc8>
 8007568:	232d      	movs	r3, #45	; 0x2d
 800756a:	4276      	negs	r6, r6
 800756c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007570:	485e      	ldr	r0, [pc, #376]	; (80076ec <_printf_i+0x244>)
 8007572:	230a      	movs	r3, #10
 8007574:	e019      	b.n	80075aa <_printf_i+0x102>
 8007576:	680e      	ldr	r6, [r1, #0]
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800757e:	bf18      	it	ne
 8007580:	b236      	sxthne	r6, r6
 8007582:	e7ef      	b.n	8007564 <_printf_i+0xbc>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	6820      	ldr	r0, [r4, #0]
 8007588:	1d19      	adds	r1, r3, #4
 800758a:	6029      	str	r1, [r5, #0]
 800758c:	0601      	lsls	r1, r0, #24
 800758e:	d501      	bpl.n	8007594 <_printf_i+0xec>
 8007590:	681e      	ldr	r6, [r3, #0]
 8007592:	e002      	b.n	800759a <_printf_i+0xf2>
 8007594:	0646      	lsls	r6, r0, #25
 8007596:	d5fb      	bpl.n	8007590 <_printf_i+0xe8>
 8007598:	881e      	ldrh	r6, [r3, #0]
 800759a:	4854      	ldr	r0, [pc, #336]	; (80076ec <_printf_i+0x244>)
 800759c:	2f6f      	cmp	r7, #111	; 0x6f
 800759e:	bf0c      	ite	eq
 80075a0:	2308      	moveq	r3, #8
 80075a2:	230a      	movne	r3, #10
 80075a4:	2100      	movs	r1, #0
 80075a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075aa:	6865      	ldr	r5, [r4, #4]
 80075ac:	60a5      	str	r5, [r4, #8]
 80075ae:	2d00      	cmp	r5, #0
 80075b0:	bfa2      	ittt	ge
 80075b2:	6821      	ldrge	r1, [r4, #0]
 80075b4:	f021 0104 	bicge.w	r1, r1, #4
 80075b8:	6021      	strge	r1, [r4, #0]
 80075ba:	b90e      	cbnz	r6, 80075c0 <_printf_i+0x118>
 80075bc:	2d00      	cmp	r5, #0
 80075be:	d04d      	beq.n	800765c <_printf_i+0x1b4>
 80075c0:	4615      	mov	r5, r2
 80075c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80075c6:	fb03 6711 	mls	r7, r3, r1, r6
 80075ca:	5dc7      	ldrb	r7, [r0, r7]
 80075cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075d0:	4637      	mov	r7, r6
 80075d2:	42bb      	cmp	r3, r7
 80075d4:	460e      	mov	r6, r1
 80075d6:	d9f4      	bls.n	80075c2 <_printf_i+0x11a>
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d10b      	bne.n	80075f4 <_printf_i+0x14c>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	07de      	lsls	r6, r3, #31
 80075e0:	d508      	bpl.n	80075f4 <_printf_i+0x14c>
 80075e2:	6923      	ldr	r3, [r4, #16]
 80075e4:	6861      	ldr	r1, [r4, #4]
 80075e6:	4299      	cmp	r1, r3
 80075e8:	bfde      	ittt	le
 80075ea:	2330      	movle	r3, #48	; 0x30
 80075ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075f4:	1b52      	subs	r2, r2, r5
 80075f6:	6122      	str	r2, [r4, #16]
 80075f8:	f8cd a000 	str.w	sl, [sp]
 80075fc:	464b      	mov	r3, r9
 80075fe:	aa03      	add	r2, sp, #12
 8007600:	4621      	mov	r1, r4
 8007602:	4640      	mov	r0, r8
 8007604:	f7ff fee2 	bl	80073cc <_printf_common>
 8007608:	3001      	adds	r0, #1
 800760a:	d14c      	bne.n	80076a6 <_printf_i+0x1fe>
 800760c:	f04f 30ff 	mov.w	r0, #4294967295
 8007610:	b004      	add	sp, #16
 8007612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007616:	4835      	ldr	r0, [pc, #212]	; (80076ec <_printf_i+0x244>)
 8007618:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800761c:	6829      	ldr	r1, [r5, #0]
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	f851 6b04 	ldr.w	r6, [r1], #4
 8007624:	6029      	str	r1, [r5, #0]
 8007626:	061d      	lsls	r5, r3, #24
 8007628:	d514      	bpl.n	8007654 <_printf_i+0x1ac>
 800762a:	07df      	lsls	r7, r3, #31
 800762c:	bf44      	itt	mi
 800762e:	f043 0320 	orrmi.w	r3, r3, #32
 8007632:	6023      	strmi	r3, [r4, #0]
 8007634:	b91e      	cbnz	r6, 800763e <_printf_i+0x196>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	f023 0320 	bic.w	r3, r3, #32
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	2310      	movs	r3, #16
 8007640:	e7b0      	b.n	80075a4 <_printf_i+0xfc>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	f043 0320 	orr.w	r3, r3, #32
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	2378      	movs	r3, #120	; 0x78
 800764c:	4828      	ldr	r0, [pc, #160]	; (80076f0 <_printf_i+0x248>)
 800764e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007652:	e7e3      	b.n	800761c <_printf_i+0x174>
 8007654:	0659      	lsls	r1, r3, #25
 8007656:	bf48      	it	mi
 8007658:	b2b6      	uxthmi	r6, r6
 800765a:	e7e6      	b.n	800762a <_printf_i+0x182>
 800765c:	4615      	mov	r5, r2
 800765e:	e7bb      	b.n	80075d8 <_printf_i+0x130>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	6826      	ldr	r6, [r4, #0]
 8007664:	6961      	ldr	r1, [r4, #20]
 8007666:	1d18      	adds	r0, r3, #4
 8007668:	6028      	str	r0, [r5, #0]
 800766a:	0635      	lsls	r5, r6, #24
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	d501      	bpl.n	8007674 <_printf_i+0x1cc>
 8007670:	6019      	str	r1, [r3, #0]
 8007672:	e002      	b.n	800767a <_printf_i+0x1d2>
 8007674:	0670      	lsls	r0, r6, #25
 8007676:	d5fb      	bpl.n	8007670 <_printf_i+0x1c8>
 8007678:	8019      	strh	r1, [r3, #0]
 800767a:	2300      	movs	r3, #0
 800767c:	6123      	str	r3, [r4, #16]
 800767e:	4615      	mov	r5, r2
 8007680:	e7ba      	b.n	80075f8 <_printf_i+0x150>
 8007682:	682b      	ldr	r3, [r5, #0]
 8007684:	1d1a      	adds	r2, r3, #4
 8007686:	602a      	str	r2, [r5, #0]
 8007688:	681d      	ldr	r5, [r3, #0]
 800768a:	6862      	ldr	r2, [r4, #4]
 800768c:	2100      	movs	r1, #0
 800768e:	4628      	mov	r0, r5
 8007690:	f7f8 fda6 	bl	80001e0 <memchr>
 8007694:	b108      	cbz	r0, 800769a <_printf_i+0x1f2>
 8007696:	1b40      	subs	r0, r0, r5
 8007698:	6060      	str	r0, [r4, #4]
 800769a:	6863      	ldr	r3, [r4, #4]
 800769c:	6123      	str	r3, [r4, #16]
 800769e:	2300      	movs	r3, #0
 80076a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a4:	e7a8      	b.n	80075f8 <_printf_i+0x150>
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	462a      	mov	r2, r5
 80076aa:	4649      	mov	r1, r9
 80076ac:	4640      	mov	r0, r8
 80076ae:	47d0      	blx	sl
 80076b0:	3001      	adds	r0, #1
 80076b2:	d0ab      	beq.n	800760c <_printf_i+0x164>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	079b      	lsls	r3, r3, #30
 80076b8:	d413      	bmi.n	80076e2 <_printf_i+0x23a>
 80076ba:	68e0      	ldr	r0, [r4, #12]
 80076bc:	9b03      	ldr	r3, [sp, #12]
 80076be:	4298      	cmp	r0, r3
 80076c0:	bfb8      	it	lt
 80076c2:	4618      	movlt	r0, r3
 80076c4:	e7a4      	b.n	8007610 <_printf_i+0x168>
 80076c6:	2301      	movs	r3, #1
 80076c8:	4632      	mov	r2, r6
 80076ca:	4649      	mov	r1, r9
 80076cc:	4640      	mov	r0, r8
 80076ce:	47d0      	blx	sl
 80076d0:	3001      	adds	r0, #1
 80076d2:	d09b      	beq.n	800760c <_printf_i+0x164>
 80076d4:	3501      	adds	r5, #1
 80076d6:	68e3      	ldr	r3, [r4, #12]
 80076d8:	9903      	ldr	r1, [sp, #12]
 80076da:	1a5b      	subs	r3, r3, r1
 80076dc:	42ab      	cmp	r3, r5
 80076de:	dcf2      	bgt.n	80076c6 <_printf_i+0x21e>
 80076e0:	e7eb      	b.n	80076ba <_printf_i+0x212>
 80076e2:	2500      	movs	r5, #0
 80076e4:	f104 0619 	add.w	r6, r4, #25
 80076e8:	e7f5      	b.n	80076d6 <_printf_i+0x22e>
 80076ea:	bf00      	nop
 80076ec:	0800a03e 	.word	0x0800a03e
 80076f0:	0800a04f 	.word	0x0800a04f

080076f4 <_perror_r>:
 80076f4:	6983      	ldr	r3, [r0, #24]
 80076f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076f8:	68c4      	ldr	r4, [r0, #12]
 80076fa:	4605      	mov	r5, r0
 80076fc:	460e      	mov	r6, r1
 80076fe:	b90b      	cbnz	r3, 8007704 <_perror_r+0x10>
 8007700:	f001 fadc 	bl	8008cbc <__sinit>
 8007704:	4b43      	ldr	r3, [pc, #268]	; (8007814 <_perror_r+0x120>)
 8007706:	429c      	cmp	r4, r3
 8007708:	d132      	bne.n	8007770 <_perror_r+0x7c>
 800770a:	686c      	ldr	r4, [r5, #4]
 800770c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800770e:	07d8      	lsls	r0, r3, #31
 8007710:	d405      	bmi.n	800771e <_perror_r+0x2a>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	0599      	lsls	r1, r3, #22
 8007716:	d402      	bmi.n	800771e <_perror_r+0x2a>
 8007718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800771a:	f001 fb72 	bl	8008e02 <__retarget_lock_acquire_recursive>
 800771e:	4621      	mov	r1, r4
 8007720:	4628      	mov	r0, r5
 8007722:	f001 f9f9 	bl	8008b18 <_fflush_r>
 8007726:	bb6e      	cbnz	r6, 8007784 <_perror_r+0x90>
 8007728:	6829      	ldr	r1, [r5, #0]
 800772a:	ab01      	add	r3, sp, #4
 800772c:	2201      	movs	r2, #1
 800772e:	4628      	mov	r0, r5
 8007730:	f000 f8d6 	bl	80078e0 <_strerror_r>
 8007734:	4607      	mov	r7, r0
 8007736:	2800      	cmp	r0, #0
 8007738:	d14f      	bne.n	80077da <_perror_r+0xe6>
 800773a:	4837      	ldr	r0, [pc, #220]	; (8007818 <_perror_r+0x124>)
 800773c:	4f36      	ldr	r7, [pc, #216]	; (8007818 <_perror_r+0x124>)
 800773e:	f7f8 fd47 	bl	80001d0 <strlen>
 8007742:	4606      	mov	r6, r0
 8007744:	b156      	cbz	r6, 800775c <_perror_r+0x68>
 8007746:	4620      	mov	r0, r4
 8007748:	f001 fa22 	bl	8008b90 <fileno>
 800774c:	4633      	mov	r3, r6
 800774e:	4601      	mov	r1, r0
 8007750:	463a      	mov	r2, r7
 8007752:	4628      	mov	r0, r5
 8007754:	f000 facc 	bl	8007cf0 <_write_r>
 8007758:	2800      	cmp	r0, #0
 800775a:	da51      	bge.n	8007800 <_perror_r+0x10c>
 800775c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007760:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007766:	07d2      	lsls	r2, r2, #31
 8007768:	81a3      	strh	r3, [r4, #12]
 800776a:	d54c      	bpl.n	8007806 <_perror_r+0x112>
 800776c:	b003      	add	sp, #12
 800776e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007770:	4b2a      	ldr	r3, [pc, #168]	; (800781c <_perror_r+0x128>)
 8007772:	429c      	cmp	r4, r3
 8007774:	d101      	bne.n	800777a <_perror_r+0x86>
 8007776:	68ac      	ldr	r4, [r5, #8]
 8007778:	e7c8      	b.n	800770c <_perror_r+0x18>
 800777a:	4b29      	ldr	r3, [pc, #164]	; (8007820 <_perror_r+0x12c>)
 800777c:	429c      	cmp	r4, r3
 800777e:	bf08      	it	eq
 8007780:	68ec      	ldreq	r4, [r5, #12]
 8007782:	e7c3      	b.n	800770c <_perror_r+0x18>
 8007784:	7833      	ldrb	r3, [r6, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0ce      	beq.n	8007728 <_perror_r+0x34>
 800778a:	4630      	mov	r0, r6
 800778c:	f7f8 fd20 	bl	80001d0 <strlen>
 8007790:	4607      	mov	r7, r0
 8007792:	b157      	cbz	r7, 80077aa <_perror_r+0xb6>
 8007794:	4620      	mov	r0, r4
 8007796:	f001 f9fb 	bl	8008b90 <fileno>
 800779a:	463b      	mov	r3, r7
 800779c:	4601      	mov	r1, r0
 800779e:	4632      	mov	r2, r6
 80077a0:	4628      	mov	r0, r5
 80077a2:	f000 faa5 	bl	8007cf0 <_write_r>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	da14      	bge.n	80077d4 <_perror_r+0xe0>
 80077aa:	481e      	ldr	r0, [pc, #120]	; (8007824 <_perror_r+0x130>)
 80077ac:	4f1d      	ldr	r7, [pc, #116]	; (8007824 <_perror_r+0x130>)
 80077ae:	f7f8 fd0f 	bl	80001d0 <strlen>
 80077b2:	4606      	mov	r6, r0
 80077b4:	2e00      	cmp	r6, #0
 80077b6:	d0b7      	beq.n	8007728 <_perror_r+0x34>
 80077b8:	4620      	mov	r0, r4
 80077ba:	f001 f9e9 	bl	8008b90 <fileno>
 80077be:	4633      	mov	r3, r6
 80077c0:	4601      	mov	r1, r0
 80077c2:	463a      	mov	r2, r7
 80077c4:	4628      	mov	r0, r5
 80077c6:	f000 fa93 	bl	8007cf0 <_write_r>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	dbac      	blt.n	8007728 <_perror_r+0x34>
 80077ce:	1a36      	subs	r6, r6, r0
 80077d0:	4407      	add	r7, r0
 80077d2:	e7ef      	b.n	80077b4 <_perror_r+0xc0>
 80077d4:	1a3f      	subs	r7, r7, r0
 80077d6:	4406      	add	r6, r0
 80077d8:	e7db      	b.n	8007792 <_perror_r+0x9e>
 80077da:	f7f8 fcf9 	bl	80001d0 <strlen>
 80077de:	4606      	mov	r6, r0
 80077e0:	2e00      	cmp	r6, #0
 80077e2:	d0aa      	beq.n	800773a <_perror_r+0x46>
 80077e4:	4620      	mov	r0, r4
 80077e6:	f001 f9d3 	bl	8008b90 <fileno>
 80077ea:	4633      	mov	r3, r6
 80077ec:	4601      	mov	r1, r0
 80077ee:	463a      	mov	r2, r7
 80077f0:	4628      	mov	r0, r5
 80077f2:	f000 fa7d 	bl	8007cf0 <_write_r>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	db9f      	blt.n	800773a <_perror_r+0x46>
 80077fa:	1a36      	subs	r6, r6, r0
 80077fc:	4407      	add	r7, r0
 80077fe:	e7ef      	b.n	80077e0 <_perror_r+0xec>
 8007800:	1a36      	subs	r6, r6, r0
 8007802:	4407      	add	r7, r0
 8007804:	e79e      	b.n	8007744 <_perror_r+0x50>
 8007806:	059b      	lsls	r3, r3, #22
 8007808:	d4b0      	bmi.n	800776c <_perror_r+0x78>
 800780a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800780c:	f001 fafa 	bl	8008e04 <__retarget_lock_release_recursive>
 8007810:	e7ac      	b.n	800776c <_perror_r+0x78>
 8007812:	bf00      	nop
 8007814:	0800a7a8 	.word	0x0800a7a8
 8007818:	0800a98f 	.word	0x0800a98f
 800781c:	0800a7c8 	.word	0x0800a7c8
 8007820:	0800a788 	.word	0x0800a788
 8007824:	0800a95f 	.word	0x0800a95f

08007828 <perror>:
 8007828:	4b02      	ldr	r3, [pc, #8]	; (8007834 <perror+0xc>)
 800782a:	4601      	mov	r1, r0
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	f7ff bf61 	b.w	80076f4 <_perror_r>
 8007832:	bf00      	nop
 8007834:	2000002c 	.word	0x2000002c

08007838 <_sbrk_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	4d06      	ldr	r5, [pc, #24]	; (8007854 <_sbrk_r+0x1c>)
 800783c:	2300      	movs	r3, #0
 800783e:	4604      	mov	r4, r0
 8007840:	4608      	mov	r0, r1
 8007842:	602b      	str	r3, [r5, #0]
 8007844:	f7fa f842 	bl	80018cc <_sbrk>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	d102      	bne.n	8007852 <_sbrk_r+0x1a>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	b103      	cbz	r3, 8007852 <_sbrk_r+0x1a>
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	bd38      	pop	{r3, r4, r5, pc}
 8007854:	20000490 	.word	0x20000490

08007858 <_raise_r>:
 8007858:	291f      	cmp	r1, #31
 800785a:	b538      	push	{r3, r4, r5, lr}
 800785c:	4604      	mov	r4, r0
 800785e:	460d      	mov	r5, r1
 8007860:	d904      	bls.n	800786c <_raise_r+0x14>
 8007862:	2316      	movs	r3, #22
 8007864:	6003      	str	r3, [r0, #0]
 8007866:	f04f 30ff 	mov.w	r0, #4294967295
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800786e:	b112      	cbz	r2, 8007876 <_raise_r+0x1e>
 8007870:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007874:	b94b      	cbnz	r3, 800788a <_raise_r+0x32>
 8007876:	4620      	mov	r0, r4
 8007878:	f000 f830 	bl	80078dc <_getpid_r>
 800787c:	462a      	mov	r2, r5
 800787e:	4601      	mov	r1, r0
 8007880:	4620      	mov	r0, r4
 8007882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007886:	f000 b817 	b.w	80078b8 <_kill_r>
 800788a:	2b01      	cmp	r3, #1
 800788c:	d00a      	beq.n	80078a4 <_raise_r+0x4c>
 800788e:	1c59      	adds	r1, r3, #1
 8007890:	d103      	bne.n	800789a <_raise_r+0x42>
 8007892:	2316      	movs	r3, #22
 8007894:	6003      	str	r3, [r0, #0]
 8007896:	2001      	movs	r0, #1
 8007898:	e7e7      	b.n	800786a <_raise_r+0x12>
 800789a:	2400      	movs	r4, #0
 800789c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078a0:	4628      	mov	r0, r5
 80078a2:	4798      	blx	r3
 80078a4:	2000      	movs	r0, #0
 80078a6:	e7e0      	b.n	800786a <_raise_r+0x12>

080078a8 <raise>:
 80078a8:	4b02      	ldr	r3, [pc, #8]	; (80078b4 <raise+0xc>)
 80078aa:	4601      	mov	r1, r0
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	f7ff bfd3 	b.w	8007858 <_raise_r>
 80078b2:	bf00      	nop
 80078b4:	2000002c 	.word	0x2000002c

080078b8 <_kill_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4d07      	ldr	r5, [pc, #28]	; (80078d8 <_kill_r+0x20>)
 80078bc:	2300      	movs	r3, #0
 80078be:	4604      	mov	r4, r0
 80078c0:	4608      	mov	r0, r1
 80078c2:	4611      	mov	r1, r2
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	f7f9 ff79 	bl	80017bc <_kill>
 80078ca:	1c43      	adds	r3, r0, #1
 80078cc:	d102      	bne.n	80078d4 <_kill_r+0x1c>
 80078ce:	682b      	ldr	r3, [r5, #0]
 80078d0:	b103      	cbz	r3, 80078d4 <_kill_r+0x1c>
 80078d2:	6023      	str	r3, [r4, #0]
 80078d4:	bd38      	pop	{r3, r4, r5, pc}
 80078d6:	bf00      	nop
 80078d8:	20000490 	.word	0x20000490

080078dc <_getpid_r>:
 80078dc:	f7f9 bf66 	b.w	80017ac <_getpid>

080078e0 <_strerror_r>:
 80078e0:	b510      	push	{r4, lr}
 80078e2:	4604      	mov	r4, r0
 80078e4:	4608      	mov	r0, r1
 80078e6:	4611      	mov	r1, r2
 80078e8:	288e      	cmp	r0, #142	; 0x8e
 80078ea:	f200 8130 	bhi.w	8007b4e <_strerror_r+0x26e>
 80078ee:	e8df f010 	tbh	[pc, r0, lsl #1]
 80078f2:	0139      	.short	0x0139
 80078f4:	0092008f 	.word	0x0092008f
 80078f8:	00960094 	.word	0x00960094
 80078fc:	009a0098 	.word	0x009a0098
 8007900:	009e009c 	.word	0x009e009c
 8007904:	00a400a2 	.word	0x00a400a2
 8007908:	00aa00a8 	.word	0x00aa00a8
 800790c:	00ae00ac 	.word	0x00ae00ac
 8007910:	00b0012e 	.word	0x00b0012e
 8007914:	00b400b2 	.word	0x00b400b2
 8007918:	00b800b6 	.word	0x00b800b6
 800791c:	00c000be 	.word	0x00c000be
 8007920:	00c800c6 	.word	0x00c800c6
 8007924:	00cc00ca 	.word	0x00cc00ca
 8007928:	00d200ce 	.word	0x00d200ce
 800792c:	00d800d6 	.word	0x00d800d6
 8007930:	00dc00da 	.word	0x00dc00da
 8007934:	00e000de 	.word	0x00e000de
 8007938:	00e400e2 	.word	0x00e400e2
 800793c:	012e012e 	.word	0x012e012e
 8007940:	012e012e 	.word	0x012e012e
 8007944:	012e012e 	.word	0x012e012e
 8007948:	012e012e 	.word	0x012e012e
 800794c:	00ec00e8 	.word	0x00ec00e8
 8007950:	012e012e 	.word	0x012e012e
 8007954:	012e012e 	.word	0x012e012e
 8007958:	012e012e 	.word	0x012e012e
 800795c:	012e012e 	.word	0x012e012e
 8007960:	012e012e 	.word	0x012e012e
 8007964:	012e012e 	.word	0x012e012e
 8007968:	00ee012e 	.word	0x00ee012e
 800796c:	00f00108 	.word	0x00f00108
 8007970:	012e00f2 	.word	0x012e00f2
 8007974:	012e012e 	.word	0x012e012e
 8007978:	012e00f4 	.word	0x012e00f4
 800797c:	012e012e 	.word	0x012e012e
 8007980:	012e00f6 	.word	0x012e00f6
 8007984:	00fa012e 	.word	0x00fa012e
 8007988:	012e012e 	.word	0x012e012e
 800798c:	012e00fc 	.word	0x012e00fc
 8007990:	012e012e 	.word	0x012e012e
 8007994:	012e012e 	.word	0x012e012e
 8007998:	012e012e 	.word	0x012e012e
 800799c:	012e012e 	.word	0x012e012e
 80079a0:	00fe012e 	.word	0x00fe012e
 80079a4:	0100012e 	.word	0x0100012e
 80079a8:	01040102 	.word	0x01040102
 80079ac:	012e012e 	.word	0x012e012e
 80079b0:	012e0126 	.word	0x012e0126
 80079b4:	012e012e 	.word	0x012e012e
 80079b8:	012e012e 	.word	0x012e012e
 80079bc:	012e012e 	.word	0x012e012e
 80079c0:	0114012e 	.word	0x0114012e
 80079c4:	010a0106 	.word	0x010a0106
 80079c8:	010e010c 	.word	0x010e010c
 80079cc:	012e0110 	.word	0x012e0110
 80079d0:	01160112 	.word	0x01160112
 80079d4:	00ea011a 	.word	0x00ea011a
 80079d8:	012c00c2 	.word	0x012c00c2
 80079dc:	00d000ba 	.word	0x00d000ba
 80079e0:	00a000bc 	.word	0x00a000bc
 80079e4:	012a00a6 	.word	0x012a00a6
 80079e8:	012e00f8 	.word	0x012e00f8
 80079ec:	00c40118 	.word	0x00c40118
 80079f0:	011c011e 	.word	0x011c011e
 80079f4:	012e012e 	.word	0x012e012e
 80079f8:	012e012e 	.word	0x012e012e
 80079fc:	00d4012e 	.word	0x00d4012e
 8007a00:	012e012e 	.word	0x012e012e
 8007a04:	00e6012e 	.word	0x00e6012e
 8007a08:	01200128 	.word	0x01200128
 8007a0c:	01240122 	.word	0x01240122
 8007a10:	4b55      	ldr	r3, [pc, #340]	; (8007b68 <_strerror_r+0x288>)
 8007a12:	4618      	mov	r0, r3
 8007a14:	bd10      	pop	{r4, pc}
 8007a16:	4b55      	ldr	r3, [pc, #340]	; (8007b6c <_strerror_r+0x28c>)
 8007a18:	e7fb      	b.n	8007a12 <_strerror_r+0x132>
 8007a1a:	4b55      	ldr	r3, [pc, #340]	; (8007b70 <_strerror_r+0x290>)
 8007a1c:	e7f9      	b.n	8007a12 <_strerror_r+0x132>
 8007a1e:	4b55      	ldr	r3, [pc, #340]	; (8007b74 <_strerror_r+0x294>)
 8007a20:	e7f7      	b.n	8007a12 <_strerror_r+0x132>
 8007a22:	4b55      	ldr	r3, [pc, #340]	; (8007b78 <_strerror_r+0x298>)
 8007a24:	e7f5      	b.n	8007a12 <_strerror_r+0x132>
 8007a26:	4b55      	ldr	r3, [pc, #340]	; (8007b7c <_strerror_r+0x29c>)
 8007a28:	e7f3      	b.n	8007a12 <_strerror_r+0x132>
 8007a2a:	4b55      	ldr	r3, [pc, #340]	; (8007b80 <_strerror_r+0x2a0>)
 8007a2c:	e7f1      	b.n	8007a12 <_strerror_r+0x132>
 8007a2e:	4b55      	ldr	r3, [pc, #340]	; (8007b84 <_strerror_r+0x2a4>)
 8007a30:	e7ef      	b.n	8007a12 <_strerror_r+0x132>
 8007a32:	4b55      	ldr	r3, [pc, #340]	; (8007b88 <_strerror_r+0x2a8>)
 8007a34:	e7ed      	b.n	8007a12 <_strerror_r+0x132>
 8007a36:	4b55      	ldr	r3, [pc, #340]	; (8007b8c <_strerror_r+0x2ac>)
 8007a38:	e7eb      	b.n	8007a12 <_strerror_r+0x132>
 8007a3a:	4b55      	ldr	r3, [pc, #340]	; (8007b90 <_strerror_r+0x2b0>)
 8007a3c:	e7e9      	b.n	8007a12 <_strerror_r+0x132>
 8007a3e:	4b55      	ldr	r3, [pc, #340]	; (8007b94 <_strerror_r+0x2b4>)
 8007a40:	e7e7      	b.n	8007a12 <_strerror_r+0x132>
 8007a42:	4b55      	ldr	r3, [pc, #340]	; (8007b98 <_strerror_r+0x2b8>)
 8007a44:	e7e5      	b.n	8007a12 <_strerror_r+0x132>
 8007a46:	4b55      	ldr	r3, [pc, #340]	; (8007b9c <_strerror_r+0x2bc>)
 8007a48:	e7e3      	b.n	8007a12 <_strerror_r+0x132>
 8007a4a:	4b55      	ldr	r3, [pc, #340]	; (8007ba0 <_strerror_r+0x2c0>)
 8007a4c:	e7e1      	b.n	8007a12 <_strerror_r+0x132>
 8007a4e:	4b55      	ldr	r3, [pc, #340]	; (8007ba4 <_strerror_r+0x2c4>)
 8007a50:	e7df      	b.n	8007a12 <_strerror_r+0x132>
 8007a52:	4b55      	ldr	r3, [pc, #340]	; (8007ba8 <_strerror_r+0x2c8>)
 8007a54:	e7dd      	b.n	8007a12 <_strerror_r+0x132>
 8007a56:	4b55      	ldr	r3, [pc, #340]	; (8007bac <_strerror_r+0x2cc>)
 8007a58:	e7db      	b.n	8007a12 <_strerror_r+0x132>
 8007a5a:	4b55      	ldr	r3, [pc, #340]	; (8007bb0 <_strerror_r+0x2d0>)
 8007a5c:	e7d9      	b.n	8007a12 <_strerror_r+0x132>
 8007a5e:	4b55      	ldr	r3, [pc, #340]	; (8007bb4 <_strerror_r+0x2d4>)
 8007a60:	e7d7      	b.n	8007a12 <_strerror_r+0x132>
 8007a62:	4b55      	ldr	r3, [pc, #340]	; (8007bb8 <_strerror_r+0x2d8>)
 8007a64:	e7d5      	b.n	8007a12 <_strerror_r+0x132>
 8007a66:	4b55      	ldr	r3, [pc, #340]	; (8007bbc <_strerror_r+0x2dc>)
 8007a68:	e7d3      	b.n	8007a12 <_strerror_r+0x132>
 8007a6a:	4b55      	ldr	r3, [pc, #340]	; (8007bc0 <_strerror_r+0x2e0>)
 8007a6c:	e7d1      	b.n	8007a12 <_strerror_r+0x132>
 8007a6e:	4b55      	ldr	r3, [pc, #340]	; (8007bc4 <_strerror_r+0x2e4>)
 8007a70:	e7cf      	b.n	8007a12 <_strerror_r+0x132>
 8007a72:	4b55      	ldr	r3, [pc, #340]	; (8007bc8 <_strerror_r+0x2e8>)
 8007a74:	e7cd      	b.n	8007a12 <_strerror_r+0x132>
 8007a76:	4b55      	ldr	r3, [pc, #340]	; (8007bcc <_strerror_r+0x2ec>)
 8007a78:	e7cb      	b.n	8007a12 <_strerror_r+0x132>
 8007a7a:	4b55      	ldr	r3, [pc, #340]	; (8007bd0 <_strerror_r+0x2f0>)
 8007a7c:	e7c9      	b.n	8007a12 <_strerror_r+0x132>
 8007a7e:	4b55      	ldr	r3, [pc, #340]	; (8007bd4 <_strerror_r+0x2f4>)
 8007a80:	e7c7      	b.n	8007a12 <_strerror_r+0x132>
 8007a82:	4b55      	ldr	r3, [pc, #340]	; (8007bd8 <_strerror_r+0x2f8>)
 8007a84:	e7c5      	b.n	8007a12 <_strerror_r+0x132>
 8007a86:	4b55      	ldr	r3, [pc, #340]	; (8007bdc <_strerror_r+0x2fc>)
 8007a88:	e7c3      	b.n	8007a12 <_strerror_r+0x132>
 8007a8a:	4b55      	ldr	r3, [pc, #340]	; (8007be0 <_strerror_r+0x300>)
 8007a8c:	e7c1      	b.n	8007a12 <_strerror_r+0x132>
 8007a8e:	4b55      	ldr	r3, [pc, #340]	; (8007be4 <_strerror_r+0x304>)
 8007a90:	e7bf      	b.n	8007a12 <_strerror_r+0x132>
 8007a92:	4b55      	ldr	r3, [pc, #340]	; (8007be8 <_strerror_r+0x308>)
 8007a94:	e7bd      	b.n	8007a12 <_strerror_r+0x132>
 8007a96:	4b55      	ldr	r3, [pc, #340]	; (8007bec <_strerror_r+0x30c>)
 8007a98:	e7bb      	b.n	8007a12 <_strerror_r+0x132>
 8007a9a:	4b55      	ldr	r3, [pc, #340]	; (8007bf0 <_strerror_r+0x310>)
 8007a9c:	e7b9      	b.n	8007a12 <_strerror_r+0x132>
 8007a9e:	4b55      	ldr	r3, [pc, #340]	; (8007bf4 <_strerror_r+0x314>)
 8007aa0:	e7b7      	b.n	8007a12 <_strerror_r+0x132>
 8007aa2:	4b55      	ldr	r3, [pc, #340]	; (8007bf8 <_strerror_r+0x318>)
 8007aa4:	e7b5      	b.n	8007a12 <_strerror_r+0x132>
 8007aa6:	4b55      	ldr	r3, [pc, #340]	; (8007bfc <_strerror_r+0x31c>)
 8007aa8:	e7b3      	b.n	8007a12 <_strerror_r+0x132>
 8007aaa:	4b55      	ldr	r3, [pc, #340]	; (8007c00 <_strerror_r+0x320>)
 8007aac:	e7b1      	b.n	8007a12 <_strerror_r+0x132>
 8007aae:	4b55      	ldr	r3, [pc, #340]	; (8007c04 <_strerror_r+0x324>)
 8007ab0:	e7af      	b.n	8007a12 <_strerror_r+0x132>
 8007ab2:	4b55      	ldr	r3, [pc, #340]	; (8007c08 <_strerror_r+0x328>)
 8007ab4:	e7ad      	b.n	8007a12 <_strerror_r+0x132>
 8007ab6:	4b55      	ldr	r3, [pc, #340]	; (8007c0c <_strerror_r+0x32c>)
 8007ab8:	e7ab      	b.n	8007a12 <_strerror_r+0x132>
 8007aba:	4b55      	ldr	r3, [pc, #340]	; (8007c10 <_strerror_r+0x330>)
 8007abc:	e7a9      	b.n	8007a12 <_strerror_r+0x132>
 8007abe:	4b55      	ldr	r3, [pc, #340]	; (8007c14 <_strerror_r+0x334>)
 8007ac0:	e7a7      	b.n	8007a12 <_strerror_r+0x132>
 8007ac2:	4b55      	ldr	r3, [pc, #340]	; (8007c18 <_strerror_r+0x338>)
 8007ac4:	e7a5      	b.n	8007a12 <_strerror_r+0x132>
 8007ac6:	4b55      	ldr	r3, [pc, #340]	; (8007c1c <_strerror_r+0x33c>)
 8007ac8:	e7a3      	b.n	8007a12 <_strerror_r+0x132>
 8007aca:	4b55      	ldr	r3, [pc, #340]	; (8007c20 <_strerror_r+0x340>)
 8007acc:	e7a1      	b.n	8007a12 <_strerror_r+0x132>
 8007ace:	4b55      	ldr	r3, [pc, #340]	; (8007c24 <_strerror_r+0x344>)
 8007ad0:	e79f      	b.n	8007a12 <_strerror_r+0x132>
 8007ad2:	4b55      	ldr	r3, [pc, #340]	; (8007c28 <_strerror_r+0x348>)
 8007ad4:	e79d      	b.n	8007a12 <_strerror_r+0x132>
 8007ad6:	4b55      	ldr	r3, [pc, #340]	; (8007c2c <_strerror_r+0x34c>)
 8007ad8:	e79b      	b.n	8007a12 <_strerror_r+0x132>
 8007ada:	4b55      	ldr	r3, [pc, #340]	; (8007c30 <_strerror_r+0x350>)
 8007adc:	e799      	b.n	8007a12 <_strerror_r+0x132>
 8007ade:	4b55      	ldr	r3, [pc, #340]	; (8007c34 <_strerror_r+0x354>)
 8007ae0:	e797      	b.n	8007a12 <_strerror_r+0x132>
 8007ae2:	4b55      	ldr	r3, [pc, #340]	; (8007c38 <_strerror_r+0x358>)
 8007ae4:	e795      	b.n	8007a12 <_strerror_r+0x132>
 8007ae6:	4b55      	ldr	r3, [pc, #340]	; (8007c3c <_strerror_r+0x35c>)
 8007ae8:	e793      	b.n	8007a12 <_strerror_r+0x132>
 8007aea:	4b55      	ldr	r3, [pc, #340]	; (8007c40 <_strerror_r+0x360>)
 8007aec:	e791      	b.n	8007a12 <_strerror_r+0x132>
 8007aee:	4b55      	ldr	r3, [pc, #340]	; (8007c44 <_strerror_r+0x364>)
 8007af0:	e78f      	b.n	8007a12 <_strerror_r+0x132>
 8007af2:	4b55      	ldr	r3, [pc, #340]	; (8007c48 <_strerror_r+0x368>)
 8007af4:	e78d      	b.n	8007a12 <_strerror_r+0x132>
 8007af6:	4b55      	ldr	r3, [pc, #340]	; (8007c4c <_strerror_r+0x36c>)
 8007af8:	e78b      	b.n	8007a12 <_strerror_r+0x132>
 8007afa:	4b55      	ldr	r3, [pc, #340]	; (8007c50 <_strerror_r+0x370>)
 8007afc:	e789      	b.n	8007a12 <_strerror_r+0x132>
 8007afe:	4b55      	ldr	r3, [pc, #340]	; (8007c54 <_strerror_r+0x374>)
 8007b00:	e787      	b.n	8007a12 <_strerror_r+0x132>
 8007b02:	4b55      	ldr	r3, [pc, #340]	; (8007c58 <_strerror_r+0x378>)
 8007b04:	e785      	b.n	8007a12 <_strerror_r+0x132>
 8007b06:	4b55      	ldr	r3, [pc, #340]	; (8007c5c <_strerror_r+0x37c>)
 8007b08:	e783      	b.n	8007a12 <_strerror_r+0x132>
 8007b0a:	4b55      	ldr	r3, [pc, #340]	; (8007c60 <_strerror_r+0x380>)
 8007b0c:	e781      	b.n	8007a12 <_strerror_r+0x132>
 8007b0e:	4b55      	ldr	r3, [pc, #340]	; (8007c64 <_strerror_r+0x384>)
 8007b10:	e77f      	b.n	8007a12 <_strerror_r+0x132>
 8007b12:	4b55      	ldr	r3, [pc, #340]	; (8007c68 <_strerror_r+0x388>)
 8007b14:	e77d      	b.n	8007a12 <_strerror_r+0x132>
 8007b16:	4b55      	ldr	r3, [pc, #340]	; (8007c6c <_strerror_r+0x38c>)
 8007b18:	e77b      	b.n	8007a12 <_strerror_r+0x132>
 8007b1a:	4b55      	ldr	r3, [pc, #340]	; (8007c70 <_strerror_r+0x390>)
 8007b1c:	e779      	b.n	8007a12 <_strerror_r+0x132>
 8007b1e:	4b55      	ldr	r3, [pc, #340]	; (8007c74 <_strerror_r+0x394>)
 8007b20:	e777      	b.n	8007a12 <_strerror_r+0x132>
 8007b22:	4b55      	ldr	r3, [pc, #340]	; (8007c78 <_strerror_r+0x398>)
 8007b24:	e775      	b.n	8007a12 <_strerror_r+0x132>
 8007b26:	4b55      	ldr	r3, [pc, #340]	; (8007c7c <_strerror_r+0x39c>)
 8007b28:	e773      	b.n	8007a12 <_strerror_r+0x132>
 8007b2a:	4b55      	ldr	r3, [pc, #340]	; (8007c80 <_strerror_r+0x3a0>)
 8007b2c:	e771      	b.n	8007a12 <_strerror_r+0x132>
 8007b2e:	4b55      	ldr	r3, [pc, #340]	; (8007c84 <_strerror_r+0x3a4>)
 8007b30:	e76f      	b.n	8007a12 <_strerror_r+0x132>
 8007b32:	4b55      	ldr	r3, [pc, #340]	; (8007c88 <_strerror_r+0x3a8>)
 8007b34:	e76d      	b.n	8007a12 <_strerror_r+0x132>
 8007b36:	4b55      	ldr	r3, [pc, #340]	; (8007c8c <_strerror_r+0x3ac>)
 8007b38:	e76b      	b.n	8007a12 <_strerror_r+0x132>
 8007b3a:	4b55      	ldr	r3, [pc, #340]	; (8007c90 <_strerror_r+0x3b0>)
 8007b3c:	e769      	b.n	8007a12 <_strerror_r+0x132>
 8007b3e:	4b55      	ldr	r3, [pc, #340]	; (8007c94 <_strerror_r+0x3b4>)
 8007b40:	e767      	b.n	8007a12 <_strerror_r+0x132>
 8007b42:	4b55      	ldr	r3, [pc, #340]	; (8007c98 <_strerror_r+0x3b8>)
 8007b44:	e765      	b.n	8007a12 <_strerror_r+0x132>
 8007b46:	4b55      	ldr	r3, [pc, #340]	; (8007c9c <_strerror_r+0x3bc>)
 8007b48:	e763      	b.n	8007a12 <_strerror_r+0x132>
 8007b4a:	4b55      	ldr	r3, [pc, #340]	; (8007ca0 <_strerror_r+0x3c0>)
 8007b4c:	e761      	b.n	8007a12 <_strerror_r+0x132>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	bf14      	ite	ne
 8007b52:	461a      	movne	r2, r3
 8007b54:	4622      	moveq	r2, r4
 8007b56:	f000 f8a9 	bl	8007cac <_user_strerror>
 8007b5a:	4b52      	ldr	r3, [pc, #328]	; (8007ca4 <_strerror_r+0x3c4>)
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	bf18      	it	ne
 8007b60:	4603      	movne	r3, r0
 8007b62:	e756      	b.n	8007a12 <_strerror_r+0x132>
 8007b64:	4b50      	ldr	r3, [pc, #320]	; (8007ca8 <_strerror_r+0x3c8>)
 8007b66:	e754      	b.n	8007a12 <_strerror_r+0x132>
 8007b68:	0800a060 	.word	0x0800a060
 8007b6c:	0800a06a 	.word	0x0800a06a
 8007b70:	0800a084 	.word	0x0800a084
 8007b74:	0800a094 	.word	0x0800a094
 8007b78:	0800a0ac 	.word	0x0800a0ac
 8007b7c:	0800a0b6 	.word	0x0800a0b6
 8007b80:	0800a0d0 	.word	0x0800a0d0
 8007b84:	0800a0e2 	.word	0x0800a0e2
 8007b88:	0800a0f4 	.word	0x0800a0f4
 8007b8c:	0800a10d 	.word	0x0800a10d
 8007b90:	0800a11d 	.word	0x0800a11d
 8007b94:	0800a129 	.word	0x0800a129
 8007b98:	0800a146 	.word	0x0800a146
 8007b9c:	0800a158 	.word	0x0800a158
 8007ba0:	0800a169 	.word	0x0800a169
 8007ba4:	0800a17b 	.word	0x0800a17b
 8007ba8:	0800a187 	.word	0x0800a187
 8007bac:	0800a19f 	.word	0x0800a19f
 8007bb0:	0800a1ab 	.word	0x0800a1ab
 8007bb4:	0800a1bd 	.word	0x0800a1bd
 8007bb8:	0800a1cc 	.word	0x0800a1cc
 8007bbc:	0800a1dc 	.word	0x0800a1dc
 8007bc0:	0800a1e9 	.word	0x0800a1e9
 8007bc4:	0800a208 	.word	0x0800a208
 8007bc8:	0800a217 	.word	0x0800a217
 8007bcc:	0800a228 	.word	0x0800a228
 8007bd0:	0800a24c 	.word	0x0800a24c
 8007bd4:	0800a26a 	.word	0x0800a26a
 8007bd8:	0800a288 	.word	0x0800a288
 8007bdc:	0800a2a8 	.word	0x0800a2a8
 8007be0:	0800a2bf 	.word	0x0800a2bf
 8007be4:	0800a2ce 	.word	0x0800a2ce
 8007be8:	0800a2dd 	.word	0x0800a2dd
 8007bec:	0800a2f1 	.word	0x0800a2f1
 8007bf0:	0800a309 	.word	0x0800a309
 8007bf4:	0800a317 	.word	0x0800a317
 8007bf8:	0800a324 	.word	0x0800a324
 8007bfc:	0800a33a 	.word	0x0800a33a
 8007c00:	0800a349 	.word	0x0800a349
 8007c04:	0800a355 	.word	0x0800a355
 8007c08:	0800a384 	.word	0x0800a384
 8007c0c:	0800a395 	.word	0x0800a395
 8007c10:	0800a3b0 	.word	0x0800a3b0
 8007c14:	0800a3c3 	.word	0x0800a3c3
 8007c18:	0800a3d9 	.word	0x0800a3d9
 8007c1c:	0800a3e2 	.word	0x0800a3e2
 8007c20:	0800a3f9 	.word	0x0800a3f9
 8007c24:	0800a401 	.word	0x0800a401
 8007c28:	0800a40e 	.word	0x0800a40e
 8007c2c:	0800a423 	.word	0x0800a423
 8007c30:	0800a437 	.word	0x0800a437
 8007c34:	0800a44f 	.word	0x0800a44f
 8007c38:	0800a45e 	.word	0x0800a45e
 8007c3c:	0800a46f 	.word	0x0800a46f
 8007c40:	0800a482 	.word	0x0800a482
 8007c44:	0800a48e 	.word	0x0800a48e
 8007c48:	0800a4a7 	.word	0x0800a4a7
 8007c4c:	0800a4bb 	.word	0x0800a4bb
 8007c50:	0800a4d6 	.word	0x0800a4d6
 8007c54:	0800a4ee 	.word	0x0800a4ee
 8007c58:	0800a508 	.word	0x0800a508
 8007c5c:	0800a510 	.word	0x0800a510
 8007c60:	0800a540 	.word	0x0800a540
 8007c64:	0800a55f 	.word	0x0800a55f
 8007c68:	0800a57e 	.word	0x0800a57e
 8007c6c:	0800a595 	.word	0x0800a595
 8007c70:	0800a5a8 	.word	0x0800a5a8
 8007c74:	0800a5c1 	.word	0x0800a5c1
 8007c78:	0800a5d8 	.word	0x0800a5d8
 8007c7c:	0800a5ee 	.word	0x0800a5ee
 8007c80:	0800a60f 	.word	0x0800a60f
 8007c84:	0800a627 	.word	0x0800a627
 8007c88:	0800a643 	.word	0x0800a643
 8007c8c:	0800a656 	.word	0x0800a656
 8007c90:	0800a66c 	.word	0x0800a66c
 8007c94:	0800a680 	.word	0x0800a680
 8007c98:	0800a6a2 	.word	0x0800a6a2
 8007c9c:	0800a6c8 	.word	0x0800a6c8
 8007ca0:	0800a6d9 	.word	0x0800a6d9
 8007ca4:	0800a990 	.word	0x0800a990
 8007ca8:	0800a6ee 	.word	0x0800a6ee

08007cac <_user_strerror>:
 8007cac:	2000      	movs	r0, #0
 8007cae:	4770      	bx	lr

08007cb0 <_vsiprintf_r>:
 8007cb0:	b500      	push	{lr}
 8007cb2:	b09b      	sub	sp, #108	; 0x6c
 8007cb4:	9100      	str	r1, [sp, #0]
 8007cb6:	9104      	str	r1, [sp, #16]
 8007cb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cbc:	9105      	str	r1, [sp, #20]
 8007cbe:	9102      	str	r1, [sp, #8]
 8007cc0:	4905      	ldr	r1, [pc, #20]	; (8007cd8 <_vsiprintf_r+0x28>)
 8007cc2:	9103      	str	r1, [sp, #12]
 8007cc4:	4669      	mov	r1, sp
 8007cc6:	f001 fcaf 	bl	8009628 <_svfiprintf_r>
 8007cca:	9b00      	ldr	r3, [sp, #0]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	701a      	strb	r2, [r3, #0]
 8007cd0:	b01b      	add	sp, #108	; 0x6c
 8007cd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cd6:	bf00      	nop
 8007cd8:	ffff0208 	.word	0xffff0208

08007cdc <vsiprintf>:
 8007cdc:	4613      	mov	r3, r2
 8007cde:	460a      	mov	r2, r1
 8007ce0:	4601      	mov	r1, r0
 8007ce2:	4802      	ldr	r0, [pc, #8]	; (8007cec <vsiprintf+0x10>)
 8007ce4:	6800      	ldr	r0, [r0, #0]
 8007ce6:	f7ff bfe3 	b.w	8007cb0 <_vsiprintf_r>
 8007cea:	bf00      	nop
 8007cec:	2000002c 	.word	0x2000002c

08007cf0 <_write_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d07      	ldr	r5, [pc, #28]	; (8007d10 <_write_r+0x20>)
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	4608      	mov	r0, r1
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	602a      	str	r2, [r5, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f7f9 fd93 	bl	800182a <_write>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d102      	bne.n	8007d0e <_write_r+0x1e>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	b103      	cbz	r3, 8007d0e <_write_r+0x1e>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	20000490 	.word	0x20000490

08007d14 <quorem>:
 8007d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d18:	6903      	ldr	r3, [r0, #16]
 8007d1a:	690c      	ldr	r4, [r1, #16]
 8007d1c:	42a3      	cmp	r3, r4
 8007d1e:	4607      	mov	r7, r0
 8007d20:	f2c0 8081 	blt.w	8007e26 <quorem+0x112>
 8007d24:	3c01      	subs	r4, #1
 8007d26:	f101 0814 	add.w	r8, r1, #20
 8007d2a:	f100 0514 	add.w	r5, r0, #20
 8007d2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d48:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d4c:	d331      	bcc.n	8007db2 <quorem+0x9e>
 8007d4e:	f04f 0e00 	mov.w	lr, #0
 8007d52:	4640      	mov	r0, r8
 8007d54:	46ac      	mov	ip, r5
 8007d56:	46f2      	mov	sl, lr
 8007d58:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d5c:	b293      	uxth	r3, r2
 8007d5e:	fb06 e303 	mla	r3, r6, r3, lr
 8007d62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	ebaa 0303 	sub.w	r3, sl, r3
 8007d6c:	f8dc a000 	ldr.w	sl, [ip]
 8007d70:	0c12      	lsrs	r2, r2, #16
 8007d72:	fa13 f38a 	uxtah	r3, r3, sl
 8007d76:	fb06 e202 	mla	r2, r6, r2, lr
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	9b00      	ldr	r3, [sp, #0]
 8007d7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d82:	b292      	uxth	r2, r2
 8007d84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d8c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007d90:	4581      	cmp	r9, r0
 8007d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d96:	f84c 3b04 	str.w	r3, [ip], #4
 8007d9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d9e:	d2db      	bcs.n	8007d58 <quorem+0x44>
 8007da0:	f855 300b 	ldr.w	r3, [r5, fp]
 8007da4:	b92b      	cbnz	r3, 8007db2 <quorem+0x9e>
 8007da6:	9b01      	ldr	r3, [sp, #4]
 8007da8:	3b04      	subs	r3, #4
 8007daa:	429d      	cmp	r5, r3
 8007dac:	461a      	mov	r2, r3
 8007dae:	d32e      	bcc.n	8007e0e <quorem+0xfa>
 8007db0:	613c      	str	r4, [r7, #16]
 8007db2:	4638      	mov	r0, r7
 8007db4:	f001 fac4 	bl	8009340 <__mcmp>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	db24      	blt.n	8007e06 <quorem+0xf2>
 8007dbc:	3601      	adds	r6, #1
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f04f 0c00 	mov.w	ip, #0
 8007dc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dc8:	f8d0 e000 	ldr.w	lr, [r0]
 8007dcc:	b293      	uxth	r3, r2
 8007dce:	ebac 0303 	sub.w	r3, ip, r3
 8007dd2:	0c12      	lsrs	r2, r2, #16
 8007dd4:	fa13 f38e 	uxtah	r3, r3, lr
 8007dd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ddc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007de6:	45c1      	cmp	r9, r8
 8007de8:	f840 3b04 	str.w	r3, [r0], #4
 8007dec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007df0:	d2e8      	bcs.n	8007dc4 <quorem+0xb0>
 8007df2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007df6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dfa:	b922      	cbnz	r2, 8007e06 <quorem+0xf2>
 8007dfc:	3b04      	subs	r3, #4
 8007dfe:	429d      	cmp	r5, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	d30a      	bcc.n	8007e1a <quorem+0x106>
 8007e04:	613c      	str	r4, [r7, #16]
 8007e06:	4630      	mov	r0, r6
 8007e08:	b003      	add	sp, #12
 8007e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0e:	6812      	ldr	r2, [r2, #0]
 8007e10:	3b04      	subs	r3, #4
 8007e12:	2a00      	cmp	r2, #0
 8007e14:	d1cc      	bne.n	8007db0 <quorem+0x9c>
 8007e16:	3c01      	subs	r4, #1
 8007e18:	e7c7      	b.n	8007daa <quorem+0x96>
 8007e1a:	6812      	ldr	r2, [r2, #0]
 8007e1c:	3b04      	subs	r3, #4
 8007e1e:	2a00      	cmp	r2, #0
 8007e20:	d1f0      	bne.n	8007e04 <quorem+0xf0>
 8007e22:	3c01      	subs	r4, #1
 8007e24:	e7eb      	b.n	8007dfe <quorem+0xea>
 8007e26:	2000      	movs	r0, #0
 8007e28:	e7ee      	b.n	8007e08 <quorem+0xf4>
 8007e2a:	0000      	movs	r0, r0
 8007e2c:	0000      	movs	r0, r0
	...

08007e30 <_dtoa_r>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	ed2d 8b04 	vpush	{d8-d9}
 8007e38:	ec57 6b10 	vmov	r6, r7, d0
 8007e3c:	b093      	sub	sp, #76	; 0x4c
 8007e3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e44:	9106      	str	r1, [sp, #24]
 8007e46:	ee10 aa10 	vmov	sl, s0
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e50:	46bb      	mov	fp, r7
 8007e52:	b975      	cbnz	r5, 8007e72 <_dtoa_r+0x42>
 8007e54:	2010      	movs	r0, #16
 8007e56:	f7fe fef3 	bl	8006c40 <malloc>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	6260      	str	r0, [r4, #36]	; 0x24
 8007e5e:	b920      	cbnz	r0, 8007e6a <_dtoa_r+0x3a>
 8007e60:	4ba7      	ldr	r3, [pc, #668]	; (8008100 <_dtoa_r+0x2d0>)
 8007e62:	21ea      	movs	r1, #234	; 0xea
 8007e64:	48a7      	ldr	r0, [pc, #668]	; (8008104 <_dtoa_r+0x2d4>)
 8007e66:	f001 fd23 	bl	80098b0 <__assert_func>
 8007e6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e6e:	6005      	str	r5, [r0, #0]
 8007e70:	60c5      	str	r5, [r0, #12]
 8007e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e74:	6819      	ldr	r1, [r3, #0]
 8007e76:	b151      	cbz	r1, 8007e8e <_dtoa_r+0x5e>
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	604a      	str	r2, [r1, #4]
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	4093      	lsls	r3, r2
 8007e80:	608b      	str	r3, [r1, #8]
 8007e82:	4620      	mov	r0, r4
 8007e84:	f001 f81a 	bl	8008ebc <_Bfree>
 8007e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	1e3b      	subs	r3, r7, #0
 8007e90:	bfaa      	itet	ge
 8007e92:	2300      	movge	r3, #0
 8007e94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007e98:	f8c8 3000 	strge.w	r3, [r8]
 8007e9c:	4b9a      	ldr	r3, [pc, #616]	; (8008108 <_dtoa_r+0x2d8>)
 8007e9e:	bfbc      	itt	lt
 8007ea0:	2201      	movlt	r2, #1
 8007ea2:	f8c8 2000 	strlt.w	r2, [r8]
 8007ea6:	ea33 030b 	bics.w	r3, r3, fp
 8007eaa:	d11b      	bne.n	8007ee4 <_dtoa_r+0xb4>
 8007eac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eae:	f242 730f 	movw	r3, #9999	; 0x270f
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007eb8:	4333      	orrs	r3, r6
 8007eba:	f000 8592 	beq.w	80089e2 <_dtoa_r+0xbb2>
 8007ebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ec0:	b963      	cbnz	r3, 8007edc <_dtoa_r+0xac>
 8007ec2:	4b92      	ldr	r3, [pc, #584]	; (800810c <_dtoa_r+0x2dc>)
 8007ec4:	e022      	b.n	8007f0c <_dtoa_r+0xdc>
 8007ec6:	4b92      	ldr	r3, [pc, #584]	; (8008110 <_dtoa_r+0x2e0>)
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	3308      	adds	r3, #8
 8007ecc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	9801      	ldr	r0, [sp, #4]
 8007ed2:	b013      	add	sp, #76	; 0x4c
 8007ed4:	ecbd 8b04 	vpop	{d8-d9}
 8007ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007edc:	4b8b      	ldr	r3, [pc, #556]	; (800810c <_dtoa_r+0x2dc>)
 8007ede:	9301      	str	r3, [sp, #4]
 8007ee0:	3303      	adds	r3, #3
 8007ee2:	e7f3      	b.n	8007ecc <_dtoa_r+0x9c>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	4650      	mov	r0, sl
 8007eea:	4659      	mov	r1, fp
 8007eec:	f7f8 fdec 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ef0:	ec4b ab19 	vmov	d9, sl, fp
 8007ef4:	4680      	mov	r8, r0
 8007ef6:	b158      	cbz	r0, 8007f10 <_dtoa_r+0xe0>
 8007ef8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007efa:	2301      	movs	r3, #1
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 856b 	beq.w	80089dc <_dtoa_r+0xbac>
 8007f06:	4883      	ldr	r0, [pc, #524]	; (8008114 <_dtoa_r+0x2e4>)
 8007f08:	6018      	str	r0, [r3, #0]
 8007f0a:	1e43      	subs	r3, r0, #1
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	e7df      	b.n	8007ed0 <_dtoa_r+0xa0>
 8007f10:	ec4b ab10 	vmov	d0, sl, fp
 8007f14:	aa10      	add	r2, sp, #64	; 0x40
 8007f16:	a911      	add	r1, sp, #68	; 0x44
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f001 fab7 	bl	800948c <__d2b>
 8007f1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007f22:	ee08 0a10 	vmov	s16, r0
 8007f26:	2d00      	cmp	r5, #0
 8007f28:	f000 8084 	beq.w	8008034 <_dtoa_r+0x204>
 8007f2c:	ee19 3a90 	vmov	r3, s19
 8007f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f38:	4656      	mov	r6, sl
 8007f3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007f46:	4b74      	ldr	r3, [pc, #464]	; (8008118 <_dtoa_r+0x2e8>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	f7f8 f99b 	bl	8000288 <__aeabi_dsub>
 8007f52:	a365      	add	r3, pc, #404	; (adr r3, 80080e8 <_dtoa_r+0x2b8>)
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f7f8 fb4e 	bl	80005f8 <__aeabi_dmul>
 8007f5c:	a364      	add	r3, pc, #400	; (adr r3, 80080f0 <_dtoa_r+0x2c0>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	f7f8 f993 	bl	800028c <__adddf3>
 8007f66:	4606      	mov	r6, r0
 8007f68:	4628      	mov	r0, r5
 8007f6a:	460f      	mov	r7, r1
 8007f6c:	f7f8 fada 	bl	8000524 <__aeabi_i2d>
 8007f70:	a361      	add	r3, pc, #388	; (adr r3, 80080f8 <_dtoa_r+0x2c8>)
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f7f8 fb3f 	bl	80005f8 <__aeabi_dmul>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4630      	mov	r0, r6
 8007f80:	4639      	mov	r1, r7
 8007f82:	f7f8 f983 	bl	800028c <__adddf3>
 8007f86:	4606      	mov	r6, r0
 8007f88:	460f      	mov	r7, r1
 8007f8a:	f7f8 fde5 	bl	8000b58 <__aeabi_d2iz>
 8007f8e:	2200      	movs	r2, #0
 8007f90:	9000      	str	r0, [sp, #0]
 8007f92:	2300      	movs	r3, #0
 8007f94:	4630      	mov	r0, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	f7f8 fda0 	bl	8000adc <__aeabi_dcmplt>
 8007f9c:	b150      	cbz	r0, 8007fb4 <_dtoa_r+0x184>
 8007f9e:	9800      	ldr	r0, [sp, #0]
 8007fa0:	f7f8 fac0 	bl	8000524 <__aeabi_i2d>
 8007fa4:	4632      	mov	r2, r6
 8007fa6:	463b      	mov	r3, r7
 8007fa8:	f7f8 fd8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fac:	b910      	cbnz	r0, 8007fb4 <_dtoa_r+0x184>
 8007fae:	9b00      	ldr	r3, [sp, #0]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	9b00      	ldr	r3, [sp, #0]
 8007fb6:	2b16      	cmp	r3, #22
 8007fb8:	d85a      	bhi.n	8008070 <_dtoa_r+0x240>
 8007fba:	9a00      	ldr	r2, [sp, #0]
 8007fbc:	4b57      	ldr	r3, [pc, #348]	; (800811c <_dtoa_r+0x2ec>)
 8007fbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	ec51 0b19 	vmov	r0, r1, d9
 8007fca:	f7f8 fd87 	bl	8000adc <__aeabi_dcmplt>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d050      	beq.n	8008074 <_dtoa_r+0x244>
 8007fd2:	9b00      	ldr	r3, [sp, #0]
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	2300      	movs	r3, #0
 8007fda:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fde:	1b5d      	subs	r5, r3, r5
 8007fe0:	1e6b      	subs	r3, r5, #1
 8007fe2:	9305      	str	r3, [sp, #20]
 8007fe4:	bf45      	ittet	mi
 8007fe6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007fea:	9304      	strmi	r3, [sp, #16]
 8007fec:	2300      	movpl	r3, #0
 8007fee:	2300      	movmi	r3, #0
 8007ff0:	bf4c      	ite	mi
 8007ff2:	9305      	strmi	r3, [sp, #20]
 8007ff4:	9304      	strpl	r3, [sp, #16]
 8007ff6:	9b00      	ldr	r3, [sp, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	db3d      	blt.n	8008078 <_dtoa_r+0x248>
 8007ffc:	9b05      	ldr	r3, [sp, #20]
 8007ffe:	9a00      	ldr	r2, [sp, #0]
 8008000:	920a      	str	r2, [sp, #40]	; 0x28
 8008002:	4413      	add	r3, r2
 8008004:	9305      	str	r3, [sp, #20]
 8008006:	2300      	movs	r3, #0
 8008008:	9307      	str	r3, [sp, #28]
 800800a:	9b06      	ldr	r3, [sp, #24]
 800800c:	2b09      	cmp	r3, #9
 800800e:	f200 8089 	bhi.w	8008124 <_dtoa_r+0x2f4>
 8008012:	2b05      	cmp	r3, #5
 8008014:	bfc4      	itt	gt
 8008016:	3b04      	subgt	r3, #4
 8008018:	9306      	strgt	r3, [sp, #24]
 800801a:	9b06      	ldr	r3, [sp, #24]
 800801c:	f1a3 0302 	sub.w	r3, r3, #2
 8008020:	bfcc      	ite	gt
 8008022:	2500      	movgt	r5, #0
 8008024:	2501      	movle	r5, #1
 8008026:	2b03      	cmp	r3, #3
 8008028:	f200 8087 	bhi.w	800813a <_dtoa_r+0x30a>
 800802c:	e8df f003 	tbb	[pc, r3]
 8008030:	59383a2d 	.word	0x59383a2d
 8008034:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008038:	441d      	add	r5, r3
 800803a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800803e:	2b20      	cmp	r3, #32
 8008040:	bfc1      	itttt	gt
 8008042:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008046:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800804a:	fa0b f303 	lslgt.w	r3, fp, r3
 800804e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008052:	bfda      	itte	le
 8008054:	f1c3 0320 	rsble	r3, r3, #32
 8008058:	fa06 f003 	lslle.w	r0, r6, r3
 800805c:	4318      	orrgt	r0, r3
 800805e:	f7f8 fa51 	bl	8000504 <__aeabi_ui2d>
 8008062:	2301      	movs	r3, #1
 8008064:	4606      	mov	r6, r0
 8008066:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800806a:	3d01      	subs	r5, #1
 800806c:	930e      	str	r3, [sp, #56]	; 0x38
 800806e:	e76a      	b.n	8007f46 <_dtoa_r+0x116>
 8008070:	2301      	movs	r3, #1
 8008072:	e7b2      	b.n	8007fda <_dtoa_r+0x1aa>
 8008074:	900b      	str	r0, [sp, #44]	; 0x2c
 8008076:	e7b1      	b.n	8007fdc <_dtoa_r+0x1ac>
 8008078:	9b04      	ldr	r3, [sp, #16]
 800807a:	9a00      	ldr	r2, [sp, #0]
 800807c:	1a9b      	subs	r3, r3, r2
 800807e:	9304      	str	r3, [sp, #16]
 8008080:	4253      	negs	r3, r2
 8008082:	9307      	str	r3, [sp, #28]
 8008084:	2300      	movs	r3, #0
 8008086:	930a      	str	r3, [sp, #40]	; 0x28
 8008088:	e7bf      	b.n	800800a <_dtoa_r+0x1da>
 800808a:	2300      	movs	r3, #0
 800808c:	9308      	str	r3, [sp, #32]
 800808e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008090:	2b00      	cmp	r3, #0
 8008092:	dc55      	bgt.n	8008140 <_dtoa_r+0x310>
 8008094:	2301      	movs	r3, #1
 8008096:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800809a:	461a      	mov	r2, r3
 800809c:	9209      	str	r2, [sp, #36]	; 0x24
 800809e:	e00c      	b.n	80080ba <_dtoa_r+0x28a>
 80080a0:	2301      	movs	r3, #1
 80080a2:	e7f3      	b.n	800808c <_dtoa_r+0x25c>
 80080a4:	2300      	movs	r3, #0
 80080a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a8:	9308      	str	r3, [sp, #32]
 80080aa:	9b00      	ldr	r3, [sp, #0]
 80080ac:	4413      	add	r3, r2
 80080ae:	9302      	str	r3, [sp, #8]
 80080b0:	3301      	adds	r3, #1
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	9303      	str	r3, [sp, #12]
 80080b6:	bfb8      	it	lt
 80080b8:	2301      	movlt	r3, #1
 80080ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80080bc:	2200      	movs	r2, #0
 80080be:	6042      	str	r2, [r0, #4]
 80080c0:	2204      	movs	r2, #4
 80080c2:	f102 0614 	add.w	r6, r2, #20
 80080c6:	429e      	cmp	r6, r3
 80080c8:	6841      	ldr	r1, [r0, #4]
 80080ca:	d93d      	bls.n	8008148 <_dtoa_r+0x318>
 80080cc:	4620      	mov	r0, r4
 80080ce:	f000 feb5 	bl	8008e3c <_Balloc>
 80080d2:	9001      	str	r0, [sp, #4]
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d13b      	bne.n	8008150 <_dtoa_r+0x320>
 80080d8:	4b11      	ldr	r3, [pc, #68]	; (8008120 <_dtoa_r+0x2f0>)
 80080da:	4602      	mov	r2, r0
 80080dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080e0:	e6c0      	b.n	8007e64 <_dtoa_r+0x34>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e7df      	b.n	80080a6 <_dtoa_r+0x276>
 80080e6:	bf00      	nop
 80080e8:	636f4361 	.word	0x636f4361
 80080ec:	3fd287a7 	.word	0x3fd287a7
 80080f0:	8b60c8b3 	.word	0x8b60c8b3
 80080f4:	3fc68a28 	.word	0x3fc68a28
 80080f8:	509f79fb 	.word	0x509f79fb
 80080fc:	3fd34413 	.word	0x3fd34413
 8008100:	0800a703 	.word	0x0800a703
 8008104:	0800a71a 	.word	0x0800a71a
 8008108:	7ff00000 	.word	0x7ff00000
 800810c:	0800a6ff 	.word	0x0800a6ff
 8008110:	0800a6f6 	.word	0x0800a6f6
 8008114:	0800a03d 	.word	0x0800a03d
 8008118:	3ff80000 	.word	0x3ff80000
 800811c:	0800a870 	.word	0x0800a870
 8008120:	0800a775 	.word	0x0800a775
 8008124:	2501      	movs	r5, #1
 8008126:	2300      	movs	r3, #0
 8008128:	9306      	str	r3, [sp, #24]
 800812a:	9508      	str	r5, [sp, #32]
 800812c:	f04f 33ff 	mov.w	r3, #4294967295
 8008130:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008134:	2200      	movs	r2, #0
 8008136:	2312      	movs	r3, #18
 8008138:	e7b0      	b.n	800809c <_dtoa_r+0x26c>
 800813a:	2301      	movs	r3, #1
 800813c:	9308      	str	r3, [sp, #32]
 800813e:	e7f5      	b.n	800812c <_dtoa_r+0x2fc>
 8008140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008142:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008146:	e7b8      	b.n	80080ba <_dtoa_r+0x28a>
 8008148:	3101      	adds	r1, #1
 800814a:	6041      	str	r1, [r0, #4]
 800814c:	0052      	lsls	r2, r2, #1
 800814e:	e7b8      	b.n	80080c2 <_dtoa_r+0x292>
 8008150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008152:	9a01      	ldr	r2, [sp, #4]
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	9b03      	ldr	r3, [sp, #12]
 8008158:	2b0e      	cmp	r3, #14
 800815a:	f200 809d 	bhi.w	8008298 <_dtoa_r+0x468>
 800815e:	2d00      	cmp	r5, #0
 8008160:	f000 809a 	beq.w	8008298 <_dtoa_r+0x468>
 8008164:	9b00      	ldr	r3, [sp, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	dd32      	ble.n	80081d0 <_dtoa_r+0x3a0>
 800816a:	4ab7      	ldr	r2, [pc, #732]	; (8008448 <_dtoa_r+0x618>)
 800816c:	f003 030f 	and.w	r3, r3, #15
 8008170:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008174:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008178:	9b00      	ldr	r3, [sp, #0]
 800817a:	05d8      	lsls	r0, r3, #23
 800817c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008180:	d516      	bpl.n	80081b0 <_dtoa_r+0x380>
 8008182:	4bb2      	ldr	r3, [pc, #712]	; (800844c <_dtoa_r+0x61c>)
 8008184:	ec51 0b19 	vmov	r0, r1, d9
 8008188:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800818c:	f7f8 fb5e 	bl	800084c <__aeabi_ddiv>
 8008190:	f007 070f 	and.w	r7, r7, #15
 8008194:	4682      	mov	sl, r0
 8008196:	468b      	mov	fp, r1
 8008198:	2503      	movs	r5, #3
 800819a:	4eac      	ldr	r6, [pc, #688]	; (800844c <_dtoa_r+0x61c>)
 800819c:	b957      	cbnz	r7, 80081b4 <_dtoa_r+0x384>
 800819e:	4642      	mov	r2, r8
 80081a0:	464b      	mov	r3, r9
 80081a2:	4650      	mov	r0, sl
 80081a4:	4659      	mov	r1, fp
 80081a6:	f7f8 fb51 	bl	800084c <__aeabi_ddiv>
 80081aa:	4682      	mov	sl, r0
 80081ac:	468b      	mov	fp, r1
 80081ae:	e028      	b.n	8008202 <_dtoa_r+0x3d2>
 80081b0:	2502      	movs	r5, #2
 80081b2:	e7f2      	b.n	800819a <_dtoa_r+0x36a>
 80081b4:	07f9      	lsls	r1, r7, #31
 80081b6:	d508      	bpl.n	80081ca <_dtoa_r+0x39a>
 80081b8:	4640      	mov	r0, r8
 80081ba:	4649      	mov	r1, r9
 80081bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081c0:	f7f8 fa1a 	bl	80005f8 <__aeabi_dmul>
 80081c4:	3501      	adds	r5, #1
 80081c6:	4680      	mov	r8, r0
 80081c8:	4689      	mov	r9, r1
 80081ca:	107f      	asrs	r7, r7, #1
 80081cc:	3608      	adds	r6, #8
 80081ce:	e7e5      	b.n	800819c <_dtoa_r+0x36c>
 80081d0:	f000 809b 	beq.w	800830a <_dtoa_r+0x4da>
 80081d4:	9b00      	ldr	r3, [sp, #0]
 80081d6:	4f9d      	ldr	r7, [pc, #628]	; (800844c <_dtoa_r+0x61c>)
 80081d8:	425e      	negs	r6, r3
 80081da:	4b9b      	ldr	r3, [pc, #620]	; (8008448 <_dtoa_r+0x618>)
 80081dc:	f006 020f 	and.w	r2, r6, #15
 80081e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e8:	ec51 0b19 	vmov	r0, r1, d9
 80081ec:	f7f8 fa04 	bl	80005f8 <__aeabi_dmul>
 80081f0:	1136      	asrs	r6, r6, #4
 80081f2:	4682      	mov	sl, r0
 80081f4:	468b      	mov	fp, r1
 80081f6:	2300      	movs	r3, #0
 80081f8:	2502      	movs	r5, #2
 80081fa:	2e00      	cmp	r6, #0
 80081fc:	d17a      	bne.n	80082f4 <_dtoa_r+0x4c4>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1d3      	bne.n	80081aa <_dtoa_r+0x37a>
 8008202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8082 	beq.w	800830e <_dtoa_r+0x4de>
 800820a:	4b91      	ldr	r3, [pc, #580]	; (8008450 <_dtoa_r+0x620>)
 800820c:	2200      	movs	r2, #0
 800820e:	4650      	mov	r0, sl
 8008210:	4659      	mov	r1, fp
 8008212:	f7f8 fc63 	bl	8000adc <__aeabi_dcmplt>
 8008216:	2800      	cmp	r0, #0
 8008218:	d079      	beq.n	800830e <_dtoa_r+0x4de>
 800821a:	9b03      	ldr	r3, [sp, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d076      	beq.n	800830e <_dtoa_r+0x4de>
 8008220:	9b02      	ldr	r3, [sp, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	dd36      	ble.n	8008294 <_dtoa_r+0x464>
 8008226:	9b00      	ldr	r3, [sp, #0]
 8008228:	4650      	mov	r0, sl
 800822a:	4659      	mov	r1, fp
 800822c:	1e5f      	subs	r7, r3, #1
 800822e:	2200      	movs	r2, #0
 8008230:	4b88      	ldr	r3, [pc, #544]	; (8008454 <_dtoa_r+0x624>)
 8008232:	f7f8 f9e1 	bl	80005f8 <__aeabi_dmul>
 8008236:	9e02      	ldr	r6, [sp, #8]
 8008238:	4682      	mov	sl, r0
 800823a:	468b      	mov	fp, r1
 800823c:	3501      	adds	r5, #1
 800823e:	4628      	mov	r0, r5
 8008240:	f7f8 f970 	bl	8000524 <__aeabi_i2d>
 8008244:	4652      	mov	r2, sl
 8008246:	465b      	mov	r3, fp
 8008248:	f7f8 f9d6 	bl	80005f8 <__aeabi_dmul>
 800824c:	4b82      	ldr	r3, [pc, #520]	; (8008458 <_dtoa_r+0x628>)
 800824e:	2200      	movs	r2, #0
 8008250:	f7f8 f81c 	bl	800028c <__adddf3>
 8008254:	46d0      	mov	r8, sl
 8008256:	46d9      	mov	r9, fp
 8008258:	4682      	mov	sl, r0
 800825a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800825e:	2e00      	cmp	r6, #0
 8008260:	d158      	bne.n	8008314 <_dtoa_r+0x4e4>
 8008262:	4b7e      	ldr	r3, [pc, #504]	; (800845c <_dtoa_r+0x62c>)
 8008264:	2200      	movs	r2, #0
 8008266:	4640      	mov	r0, r8
 8008268:	4649      	mov	r1, r9
 800826a:	f7f8 f80d 	bl	8000288 <__aeabi_dsub>
 800826e:	4652      	mov	r2, sl
 8008270:	465b      	mov	r3, fp
 8008272:	4680      	mov	r8, r0
 8008274:	4689      	mov	r9, r1
 8008276:	f7f8 fc4f 	bl	8000b18 <__aeabi_dcmpgt>
 800827a:	2800      	cmp	r0, #0
 800827c:	f040 8295 	bne.w	80087aa <_dtoa_r+0x97a>
 8008280:	4652      	mov	r2, sl
 8008282:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008286:	4640      	mov	r0, r8
 8008288:	4649      	mov	r1, r9
 800828a:	f7f8 fc27 	bl	8000adc <__aeabi_dcmplt>
 800828e:	2800      	cmp	r0, #0
 8008290:	f040 8289 	bne.w	80087a6 <_dtoa_r+0x976>
 8008294:	ec5b ab19 	vmov	sl, fp, d9
 8008298:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800829a:	2b00      	cmp	r3, #0
 800829c:	f2c0 8148 	blt.w	8008530 <_dtoa_r+0x700>
 80082a0:	9a00      	ldr	r2, [sp, #0]
 80082a2:	2a0e      	cmp	r2, #14
 80082a4:	f300 8144 	bgt.w	8008530 <_dtoa_r+0x700>
 80082a8:	4b67      	ldr	r3, [pc, #412]	; (8008448 <_dtoa_r+0x618>)
 80082aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f280 80d5 	bge.w	8008464 <_dtoa_r+0x634>
 80082ba:	9b03      	ldr	r3, [sp, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f300 80d1 	bgt.w	8008464 <_dtoa_r+0x634>
 80082c2:	f040 826f 	bne.w	80087a4 <_dtoa_r+0x974>
 80082c6:	4b65      	ldr	r3, [pc, #404]	; (800845c <_dtoa_r+0x62c>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	4640      	mov	r0, r8
 80082cc:	4649      	mov	r1, r9
 80082ce:	f7f8 f993 	bl	80005f8 <__aeabi_dmul>
 80082d2:	4652      	mov	r2, sl
 80082d4:	465b      	mov	r3, fp
 80082d6:	f7f8 fc15 	bl	8000b04 <__aeabi_dcmpge>
 80082da:	9e03      	ldr	r6, [sp, #12]
 80082dc:	4637      	mov	r7, r6
 80082de:	2800      	cmp	r0, #0
 80082e0:	f040 8245 	bne.w	800876e <_dtoa_r+0x93e>
 80082e4:	9d01      	ldr	r5, [sp, #4]
 80082e6:	2331      	movs	r3, #49	; 0x31
 80082e8:	f805 3b01 	strb.w	r3, [r5], #1
 80082ec:	9b00      	ldr	r3, [sp, #0]
 80082ee:	3301      	adds	r3, #1
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	e240      	b.n	8008776 <_dtoa_r+0x946>
 80082f4:	07f2      	lsls	r2, r6, #31
 80082f6:	d505      	bpl.n	8008304 <_dtoa_r+0x4d4>
 80082f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082fc:	f7f8 f97c 	bl	80005f8 <__aeabi_dmul>
 8008300:	3501      	adds	r5, #1
 8008302:	2301      	movs	r3, #1
 8008304:	1076      	asrs	r6, r6, #1
 8008306:	3708      	adds	r7, #8
 8008308:	e777      	b.n	80081fa <_dtoa_r+0x3ca>
 800830a:	2502      	movs	r5, #2
 800830c:	e779      	b.n	8008202 <_dtoa_r+0x3d2>
 800830e:	9f00      	ldr	r7, [sp, #0]
 8008310:	9e03      	ldr	r6, [sp, #12]
 8008312:	e794      	b.n	800823e <_dtoa_r+0x40e>
 8008314:	9901      	ldr	r1, [sp, #4]
 8008316:	4b4c      	ldr	r3, [pc, #304]	; (8008448 <_dtoa_r+0x618>)
 8008318:	4431      	add	r1, r6
 800831a:	910d      	str	r1, [sp, #52]	; 0x34
 800831c:	9908      	ldr	r1, [sp, #32]
 800831e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008322:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008326:	2900      	cmp	r1, #0
 8008328:	d043      	beq.n	80083b2 <_dtoa_r+0x582>
 800832a:	494d      	ldr	r1, [pc, #308]	; (8008460 <_dtoa_r+0x630>)
 800832c:	2000      	movs	r0, #0
 800832e:	f7f8 fa8d 	bl	800084c <__aeabi_ddiv>
 8008332:	4652      	mov	r2, sl
 8008334:	465b      	mov	r3, fp
 8008336:	f7f7 ffa7 	bl	8000288 <__aeabi_dsub>
 800833a:	9d01      	ldr	r5, [sp, #4]
 800833c:	4682      	mov	sl, r0
 800833e:	468b      	mov	fp, r1
 8008340:	4649      	mov	r1, r9
 8008342:	4640      	mov	r0, r8
 8008344:	f7f8 fc08 	bl	8000b58 <__aeabi_d2iz>
 8008348:	4606      	mov	r6, r0
 800834a:	f7f8 f8eb 	bl	8000524 <__aeabi_i2d>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4640      	mov	r0, r8
 8008354:	4649      	mov	r1, r9
 8008356:	f7f7 ff97 	bl	8000288 <__aeabi_dsub>
 800835a:	3630      	adds	r6, #48	; 0x30
 800835c:	f805 6b01 	strb.w	r6, [r5], #1
 8008360:	4652      	mov	r2, sl
 8008362:	465b      	mov	r3, fp
 8008364:	4680      	mov	r8, r0
 8008366:	4689      	mov	r9, r1
 8008368:	f7f8 fbb8 	bl	8000adc <__aeabi_dcmplt>
 800836c:	2800      	cmp	r0, #0
 800836e:	d163      	bne.n	8008438 <_dtoa_r+0x608>
 8008370:	4642      	mov	r2, r8
 8008372:	464b      	mov	r3, r9
 8008374:	4936      	ldr	r1, [pc, #216]	; (8008450 <_dtoa_r+0x620>)
 8008376:	2000      	movs	r0, #0
 8008378:	f7f7 ff86 	bl	8000288 <__aeabi_dsub>
 800837c:	4652      	mov	r2, sl
 800837e:	465b      	mov	r3, fp
 8008380:	f7f8 fbac 	bl	8000adc <__aeabi_dcmplt>
 8008384:	2800      	cmp	r0, #0
 8008386:	f040 80b5 	bne.w	80084f4 <_dtoa_r+0x6c4>
 800838a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800838c:	429d      	cmp	r5, r3
 800838e:	d081      	beq.n	8008294 <_dtoa_r+0x464>
 8008390:	4b30      	ldr	r3, [pc, #192]	; (8008454 <_dtoa_r+0x624>)
 8008392:	2200      	movs	r2, #0
 8008394:	4650      	mov	r0, sl
 8008396:	4659      	mov	r1, fp
 8008398:	f7f8 f92e 	bl	80005f8 <__aeabi_dmul>
 800839c:	4b2d      	ldr	r3, [pc, #180]	; (8008454 <_dtoa_r+0x624>)
 800839e:	4682      	mov	sl, r0
 80083a0:	468b      	mov	fp, r1
 80083a2:	4640      	mov	r0, r8
 80083a4:	4649      	mov	r1, r9
 80083a6:	2200      	movs	r2, #0
 80083a8:	f7f8 f926 	bl	80005f8 <__aeabi_dmul>
 80083ac:	4680      	mov	r8, r0
 80083ae:	4689      	mov	r9, r1
 80083b0:	e7c6      	b.n	8008340 <_dtoa_r+0x510>
 80083b2:	4650      	mov	r0, sl
 80083b4:	4659      	mov	r1, fp
 80083b6:	f7f8 f91f 	bl	80005f8 <__aeabi_dmul>
 80083ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083bc:	9d01      	ldr	r5, [sp, #4]
 80083be:	930f      	str	r3, [sp, #60]	; 0x3c
 80083c0:	4682      	mov	sl, r0
 80083c2:	468b      	mov	fp, r1
 80083c4:	4649      	mov	r1, r9
 80083c6:	4640      	mov	r0, r8
 80083c8:	f7f8 fbc6 	bl	8000b58 <__aeabi_d2iz>
 80083cc:	4606      	mov	r6, r0
 80083ce:	f7f8 f8a9 	bl	8000524 <__aeabi_i2d>
 80083d2:	3630      	adds	r6, #48	; 0x30
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	4640      	mov	r0, r8
 80083da:	4649      	mov	r1, r9
 80083dc:	f7f7 ff54 	bl	8000288 <__aeabi_dsub>
 80083e0:	f805 6b01 	strb.w	r6, [r5], #1
 80083e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083e6:	429d      	cmp	r5, r3
 80083e8:	4680      	mov	r8, r0
 80083ea:	4689      	mov	r9, r1
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	d124      	bne.n	800843c <_dtoa_r+0x60c>
 80083f2:	4b1b      	ldr	r3, [pc, #108]	; (8008460 <_dtoa_r+0x630>)
 80083f4:	4650      	mov	r0, sl
 80083f6:	4659      	mov	r1, fp
 80083f8:	f7f7 ff48 	bl	800028c <__adddf3>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4640      	mov	r0, r8
 8008402:	4649      	mov	r1, r9
 8008404:	f7f8 fb88 	bl	8000b18 <__aeabi_dcmpgt>
 8008408:	2800      	cmp	r0, #0
 800840a:	d173      	bne.n	80084f4 <_dtoa_r+0x6c4>
 800840c:	4652      	mov	r2, sl
 800840e:	465b      	mov	r3, fp
 8008410:	4913      	ldr	r1, [pc, #76]	; (8008460 <_dtoa_r+0x630>)
 8008412:	2000      	movs	r0, #0
 8008414:	f7f7 ff38 	bl	8000288 <__aeabi_dsub>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4640      	mov	r0, r8
 800841e:	4649      	mov	r1, r9
 8008420:	f7f8 fb5c 	bl	8000adc <__aeabi_dcmplt>
 8008424:	2800      	cmp	r0, #0
 8008426:	f43f af35 	beq.w	8008294 <_dtoa_r+0x464>
 800842a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800842c:	1e6b      	subs	r3, r5, #1
 800842e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008430:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008434:	2b30      	cmp	r3, #48	; 0x30
 8008436:	d0f8      	beq.n	800842a <_dtoa_r+0x5fa>
 8008438:	9700      	str	r7, [sp, #0]
 800843a:	e049      	b.n	80084d0 <_dtoa_r+0x6a0>
 800843c:	4b05      	ldr	r3, [pc, #20]	; (8008454 <_dtoa_r+0x624>)
 800843e:	f7f8 f8db 	bl	80005f8 <__aeabi_dmul>
 8008442:	4680      	mov	r8, r0
 8008444:	4689      	mov	r9, r1
 8008446:	e7bd      	b.n	80083c4 <_dtoa_r+0x594>
 8008448:	0800a870 	.word	0x0800a870
 800844c:	0800a848 	.word	0x0800a848
 8008450:	3ff00000 	.word	0x3ff00000
 8008454:	40240000 	.word	0x40240000
 8008458:	401c0000 	.word	0x401c0000
 800845c:	40140000 	.word	0x40140000
 8008460:	3fe00000 	.word	0x3fe00000
 8008464:	9d01      	ldr	r5, [sp, #4]
 8008466:	4656      	mov	r6, sl
 8008468:	465f      	mov	r7, fp
 800846a:	4642      	mov	r2, r8
 800846c:	464b      	mov	r3, r9
 800846e:	4630      	mov	r0, r6
 8008470:	4639      	mov	r1, r7
 8008472:	f7f8 f9eb 	bl	800084c <__aeabi_ddiv>
 8008476:	f7f8 fb6f 	bl	8000b58 <__aeabi_d2iz>
 800847a:	4682      	mov	sl, r0
 800847c:	f7f8 f852 	bl	8000524 <__aeabi_i2d>
 8008480:	4642      	mov	r2, r8
 8008482:	464b      	mov	r3, r9
 8008484:	f7f8 f8b8 	bl	80005f8 <__aeabi_dmul>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4630      	mov	r0, r6
 800848e:	4639      	mov	r1, r7
 8008490:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008494:	f7f7 fef8 	bl	8000288 <__aeabi_dsub>
 8008498:	f805 6b01 	strb.w	r6, [r5], #1
 800849c:	9e01      	ldr	r6, [sp, #4]
 800849e:	9f03      	ldr	r7, [sp, #12]
 80084a0:	1bae      	subs	r6, r5, r6
 80084a2:	42b7      	cmp	r7, r6
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	d135      	bne.n	8008516 <_dtoa_r+0x6e6>
 80084aa:	f7f7 feef 	bl	800028c <__adddf3>
 80084ae:	4642      	mov	r2, r8
 80084b0:	464b      	mov	r3, r9
 80084b2:	4606      	mov	r6, r0
 80084b4:	460f      	mov	r7, r1
 80084b6:	f7f8 fb2f 	bl	8000b18 <__aeabi_dcmpgt>
 80084ba:	b9d0      	cbnz	r0, 80084f2 <_dtoa_r+0x6c2>
 80084bc:	4642      	mov	r2, r8
 80084be:	464b      	mov	r3, r9
 80084c0:	4630      	mov	r0, r6
 80084c2:	4639      	mov	r1, r7
 80084c4:	f7f8 fb00 	bl	8000ac8 <__aeabi_dcmpeq>
 80084c8:	b110      	cbz	r0, 80084d0 <_dtoa_r+0x6a0>
 80084ca:	f01a 0f01 	tst.w	sl, #1
 80084ce:	d110      	bne.n	80084f2 <_dtoa_r+0x6c2>
 80084d0:	4620      	mov	r0, r4
 80084d2:	ee18 1a10 	vmov	r1, s16
 80084d6:	f000 fcf1 	bl	8008ebc <_Bfree>
 80084da:	2300      	movs	r3, #0
 80084dc:	9800      	ldr	r0, [sp, #0]
 80084de:	702b      	strb	r3, [r5, #0]
 80084e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084e2:	3001      	adds	r0, #1
 80084e4:	6018      	str	r0, [r3, #0]
 80084e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f43f acf1 	beq.w	8007ed0 <_dtoa_r+0xa0>
 80084ee:	601d      	str	r5, [r3, #0]
 80084f0:	e4ee      	b.n	8007ed0 <_dtoa_r+0xa0>
 80084f2:	9f00      	ldr	r7, [sp, #0]
 80084f4:	462b      	mov	r3, r5
 80084f6:	461d      	mov	r5, r3
 80084f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084fc:	2a39      	cmp	r2, #57	; 0x39
 80084fe:	d106      	bne.n	800850e <_dtoa_r+0x6de>
 8008500:	9a01      	ldr	r2, [sp, #4]
 8008502:	429a      	cmp	r2, r3
 8008504:	d1f7      	bne.n	80084f6 <_dtoa_r+0x6c6>
 8008506:	9901      	ldr	r1, [sp, #4]
 8008508:	2230      	movs	r2, #48	; 0x30
 800850a:	3701      	adds	r7, #1
 800850c:	700a      	strb	r2, [r1, #0]
 800850e:	781a      	ldrb	r2, [r3, #0]
 8008510:	3201      	adds	r2, #1
 8008512:	701a      	strb	r2, [r3, #0]
 8008514:	e790      	b.n	8008438 <_dtoa_r+0x608>
 8008516:	4ba6      	ldr	r3, [pc, #664]	; (80087b0 <_dtoa_r+0x980>)
 8008518:	2200      	movs	r2, #0
 800851a:	f7f8 f86d 	bl	80005f8 <__aeabi_dmul>
 800851e:	2200      	movs	r2, #0
 8008520:	2300      	movs	r3, #0
 8008522:	4606      	mov	r6, r0
 8008524:	460f      	mov	r7, r1
 8008526:	f7f8 facf 	bl	8000ac8 <__aeabi_dcmpeq>
 800852a:	2800      	cmp	r0, #0
 800852c:	d09d      	beq.n	800846a <_dtoa_r+0x63a>
 800852e:	e7cf      	b.n	80084d0 <_dtoa_r+0x6a0>
 8008530:	9a08      	ldr	r2, [sp, #32]
 8008532:	2a00      	cmp	r2, #0
 8008534:	f000 80d7 	beq.w	80086e6 <_dtoa_r+0x8b6>
 8008538:	9a06      	ldr	r2, [sp, #24]
 800853a:	2a01      	cmp	r2, #1
 800853c:	f300 80ba 	bgt.w	80086b4 <_dtoa_r+0x884>
 8008540:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008542:	2a00      	cmp	r2, #0
 8008544:	f000 80b2 	beq.w	80086ac <_dtoa_r+0x87c>
 8008548:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800854c:	9e07      	ldr	r6, [sp, #28]
 800854e:	9d04      	ldr	r5, [sp, #16]
 8008550:	9a04      	ldr	r2, [sp, #16]
 8008552:	441a      	add	r2, r3
 8008554:	9204      	str	r2, [sp, #16]
 8008556:	9a05      	ldr	r2, [sp, #20]
 8008558:	2101      	movs	r1, #1
 800855a:	441a      	add	r2, r3
 800855c:	4620      	mov	r0, r4
 800855e:	9205      	str	r2, [sp, #20]
 8008560:	f000 fd64 	bl	800902c <__i2b>
 8008564:	4607      	mov	r7, r0
 8008566:	2d00      	cmp	r5, #0
 8008568:	dd0c      	ble.n	8008584 <_dtoa_r+0x754>
 800856a:	9b05      	ldr	r3, [sp, #20]
 800856c:	2b00      	cmp	r3, #0
 800856e:	dd09      	ble.n	8008584 <_dtoa_r+0x754>
 8008570:	42ab      	cmp	r3, r5
 8008572:	9a04      	ldr	r2, [sp, #16]
 8008574:	bfa8      	it	ge
 8008576:	462b      	movge	r3, r5
 8008578:	1ad2      	subs	r2, r2, r3
 800857a:	9204      	str	r2, [sp, #16]
 800857c:	9a05      	ldr	r2, [sp, #20]
 800857e:	1aed      	subs	r5, r5, r3
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	9305      	str	r3, [sp, #20]
 8008584:	9b07      	ldr	r3, [sp, #28]
 8008586:	b31b      	cbz	r3, 80085d0 <_dtoa_r+0x7a0>
 8008588:	9b08      	ldr	r3, [sp, #32]
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 80af 	beq.w	80086ee <_dtoa_r+0x8be>
 8008590:	2e00      	cmp	r6, #0
 8008592:	dd13      	ble.n	80085bc <_dtoa_r+0x78c>
 8008594:	4639      	mov	r1, r7
 8008596:	4632      	mov	r2, r6
 8008598:	4620      	mov	r0, r4
 800859a:	f000 fe07 	bl	80091ac <__pow5mult>
 800859e:	ee18 2a10 	vmov	r2, s16
 80085a2:	4601      	mov	r1, r0
 80085a4:	4607      	mov	r7, r0
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 fd56 	bl	8009058 <__multiply>
 80085ac:	ee18 1a10 	vmov	r1, s16
 80085b0:	4680      	mov	r8, r0
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 fc82 	bl	8008ebc <_Bfree>
 80085b8:	ee08 8a10 	vmov	s16, r8
 80085bc:	9b07      	ldr	r3, [sp, #28]
 80085be:	1b9a      	subs	r2, r3, r6
 80085c0:	d006      	beq.n	80085d0 <_dtoa_r+0x7a0>
 80085c2:	ee18 1a10 	vmov	r1, s16
 80085c6:	4620      	mov	r0, r4
 80085c8:	f000 fdf0 	bl	80091ac <__pow5mult>
 80085cc:	ee08 0a10 	vmov	s16, r0
 80085d0:	2101      	movs	r1, #1
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 fd2a 	bl	800902c <__i2b>
 80085d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085da:	2b00      	cmp	r3, #0
 80085dc:	4606      	mov	r6, r0
 80085de:	f340 8088 	ble.w	80086f2 <_dtoa_r+0x8c2>
 80085e2:	461a      	mov	r2, r3
 80085e4:	4601      	mov	r1, r0
 80085e6:	4620      	mov	r0, r4
 80085e8:	f000 fde0 	bl	80091ac <__pow5mult>
 80085ec:	9b06      	ldr	r3, [sp, #24]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	4606      	mov	r6, r0
 80085f2:	f340 8081 	ble.w	80086f8 <_dtoa_r+0x8c8>
 80085f6:	f04f 0800 	mov.w	r8, #0
 80085fa:	6933      	ldr	r3, [r6, #16]
 80085fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008600:	6918      	ldr	r0, [r3, #16]
 8008602:	f000 fcc3 	bl	8008f8c <__hi0bits>
 8008606:	f1c0 0020 	rsb	r0, r0, #32
 800860a:	9b05      	ldr	r3, [sp, #20]
 800860c:	4418      	add	r0, r3
 800860e:	f010 001f 	ands.w	r0, r0, #31
 8008612:	f000 8092 	beq.w	800873a <_dtoa_r+0x90a>
 8008616:	f1c0 0320 	rsb	r3, r0, #32
 800861a:	2b04      	cmp	r3, #4
 800861c:	f340 808a 	ble.w	8008734 <_dtoa_r+0x904>
 8008620:	f1c0 001c 	rsb	r0, r0, #28
 8008624:	9b04      	ldr	r3, [sp, #16]
 8008626:	4403      	add	r3, r0
 8008628:	9304      	str	r3, [sp, #16]
 800862a:	9b05      	ldr	r3, [sp, #20]
 800862c:	4403      	add	r3, r0
 800862e:	4405      	add	r5, r0
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	9b04      	ldr	r3, [sp, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	dd07      	ble.n	8008648 <_dtoa_r+0x818>
 8008638:	ee18 1a10 	vmov	r1, s16
 800863c:	461a      	mov	r2, r3
 800863e:	4620      	mov	r0, r4
 8008640:	f000 fe0e 	bl	8009260 <__lshift>
 8008644:	ee08 0a10 	vmov	s16, r0
 8008648:	9b05      	ldr	r3, [sp, #20]
 800864a:	2b00      	cmp	r3, #0
 800864c:	dd05      	ble.n	800865a <_dtoa_r+0x82a>
 800864e:	4631      	mov	r1, r6
 8008650:	461a      	mov	r2, r3
 8008652:	4620      	mov	r0, r4
 8008654:	f000 fe04 	bl	8009260 <__lshift>
 8008658:	4606      	mov	r6, r0
 800865a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d06e      	beq.n	800873e <_dtoa_r+0x90e>
 8008660:	ee18 0a10 	vmov	r0, s16
 8008664:	4631      	mov	r1, r6
 8008666:	f000 fe6b 	bl	8009340 <__mcmp>
 800866a:	2800      	cmp	r0, #0
 800866c:	da67      	bge.n	800873e <_dtoa_r+0x90e>
 800866e:	9b00      	ldr	r3, [sp, #0]
 8008670:	3b01      	subs	r3, #1
 8008672:	ee18 1a10 	vmov	r1, s16
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	220a      	movs	r2, #10
 800867a:	2300      	movs	r3, #0
 800867c:	4620      	mov	r0, r4
 800867e:	f000 fc3f 	bl	8008f00 <__multadd>
 8008682:	9b08      	ldr	r3, [sp, #32]
 8008684:	ee08 0a10 	vmov	s16, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 81b1 	beq.w	80089f0 <_dtoa_r+0xbc0>
 800868e:	2300      	movs	r3, #0
 8008690:	4639      	mov	r1, r7
 8008692:	220a      	movs	r2, #10
 8008694:	4620      	mov	r0, r4
 8008696:	f000 fc33 	bl	8008f00 <__multadd>
 800869a:	9b02      	ldr	r3, [sp, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	4607      	mov	r7, r0
 80086a0:	f300 808e 	bgt.w	80087c0 <_dtoa_r+0x990>
 80086a4:	9b06      	ldr	r3, [sp, #24]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	dc51      	bgt.n	800874e <_dtoa_r+0x91e>
 80086aa:	e089      	b.n	80087c0 <_dtoa_r+0x990>
 80086ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086b2:	e74b      	b.n	800854c <_dtoa_r+0x71c>
 80086b4:	9b03      	ldr	r3, [sp, #12]
 80086b6:	1e5e      	subs	r6, r3, #1
 80086b8:	9b07      	ldr	r3, [sp, #28]
 80086ba:	42b3      	cmp	r3, r6
 80086bc:	bfbf      	itttt	lt
 80086be:	9b07      	ldrlt	r3, [sp, #28]
 80086c0:	9607      	strlt	r6, [sp, #28]
 80086c2:	1af2      	sublt	r2, r6, r3
 80086c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80086c6:	bfb6      	itet	lt
 80086c8:	189b      	addlt	r3, r3, r2
 80086ca:	1b9e      	subge	r6, r3, r6
 80086cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	bfb8      	it	lt
 80086d2:	2600      	movlt	r6, #0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	bfb7      	itett	lt
 80086d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80086dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80086e0:	1a9d      	sublt	r5, r3, r2
 80086e2:	2300      	movlt	r3, #0
 80086e4:	e734      	b.n	8008550 <_dtoa_r+0x720>
 80086e6:	9e07      	ldr	r6, [sp, #28]
 80086e8:	9d04      	ldr	r5, [sp, #16]
 80086ea:	9f08      	ldr	r7, [sp, #32]
 80086ec:	e73b      	b.n	8008566 <_dtoa_r+0x736>
 80086ee:	9a07      	ldr	r2, [sp, #28]
 80086f0:	e767      	b.n	80085c2 <_dtoa_r+0x792>
 80086f2:	9b06      	ldr	r3, [sp, #24]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	dc18      	bgt.n	800872a <_dtoa_r+0x8fa>
 80086f8:	f1ba 0f00 	cmp.w	sl, #0
 80086fc:	d115      	bne.n	800872a <_dtoa_r+0x8fa>
 80086fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008702:	b993      	cbnz	r3, 800872a <_dtoa_r+0x8fa>
 8008704:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008708:	0d1b      	lsrs	r3, r3, #20
 800870a:	051b      	lsls	r3, r3, #20
 800870c:	b183      	cbz	r3, 8008730 <_dtoa_r+0x900>
 800870e:	9b04      	ldr	r3, [sp, #16]
 8008710:	3301      	adds	r3, #1
 8008712:	9304      	str	r3, [sp, #16]
 8008714:	9b05      	ldr	r3, [sp, #20]
 8008716:	3301      	adds	r3, #1
 8008718:	9305      	str	r3, [sp, #20]
 800871a:	f04f 0801 	mov.w	r8, #1
 800871e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008720:	2b00      	cmp	r3, #0
 8008722:	f47f af6a 	bne.w	80085fa <_dtoa_r+0x7ca>
 8008726:	2001      	movs	r0, #1
 8008728:	e76f      	b.n	800860a <_dtoa_r+0x7da>
 800872a:	f04f 0800 	mov.w	r8, #0
 800872e:	e7f6      	b.n	800871e <_dtoa_r+0x8ee>
 8008730:	4698      	mov	r8, r3
 8008732:	e7f4      	b.n	800871e <_dtoa_r+0x8ee>
 8008734:	f43f af7d 	beq.w	8008632 <_dtoa_r+0x802>
 8008738:	4618      	mov	r0, r3
 800873a:	301c      	adds	r0, #28
 800873c:	e772      	b.n	8008624 <_dtoa_r+0x7f4>
 800873e:	9b03      	ldr	r3, [sp, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	dc37      	bgt.n	80087b4 <_dtoa_r+0x984>
 8008744:	9b06      	ldr	r3, [sp, #24]
 8008746:	2b02      	cmp	r3, #2
 8008748:	dd34      	ble.n	80087b4 <_dtoa_r+0x984>
 800874a:	9b03      	ldr	r3, [sp, #12]
 800874c:	9302      	str	r3, [sp, #8]
 800874e:	9b02      	ldr	r3, [sp, #8]
 8008750:	b96b      	cbnz	r3, 800876e <_dtoa_r+0x93e>
 8008752:	4631      	mov	r1, r6
 8008754:	2205      	movs	r2, #5
 8008756:	4620      	mov	r0, r4
 8008758:	f000 fbd2 	bl	8008f00 <__multadd>
 800875c:	4601      	mov	r1, r0
 800875e:	4606      	mov	r6, r0
 8008760:	ee18 0a10 	vmov	r0, s16
 8008764:	f000 fdec 	bl	8009340 <__mcmp>
 8008768:	2800      	cmp	r0, #0
 800876a:	f73f adbb 	bgt.w	80082e4 <_dtoa_r+0x4b4>
 800876e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008770:	9d01      	ldr	r5, [sp, #4]
 8008772:	43db      	mvns	r3, r3
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	f04f 0800 	mov.w	r8, #0
 800877a:	4631      	mov	r1, r6
 800877c:	4620      	mov	r0, r4
 800877e:	f000 fb9d 	bl	8008ebc <_Bfree>
 8008782:	2f00      	cmp	r7, #0
 8008784:	f43f aea4 	beq.w	80084d0 <_dtoa_r+0x6a0>
 8008788:	f1b8 0f00 	cmp.w	r8, #0
 800878c:	d005      	beq.n	800879a <_dtoa_r+0x96a>
 800878e:	45b8      	cmp	r8, r7
 8008790:	d003      	beq.n	800879a <_dtoa_r+0x96a>
 8008792:	4641      	mov	r1, r8
 8008794:	4620      	mov	r0, r4
 8008796:	f000 fb91 	bl	8008ebc <_Bfree>
 800879a:	4639      	mov	r1, r7
 800879c:	4620      	mov	r0, r4
 800879e:	f000 fb8d 	bl	8008ebc <_Bfree>
 80087a2:	e695      	b.n	80084d0 <_dtoa_r+0x6a0>
 80087a4:	2600      	movs	r6, #0
 80087a6:	4637      	mov	r7, r6
 80087a8:	e7e1      	b.n	800876e <_dtoa_r+0x93e>
 80087aa:	9700      	str	r7, [sp, #0]
 80087ac:	4637      	mov	r7, r6
 80087ae:	e599      	b.n	80082e4 <_dtoa_r+0x4b4>
 80087b0:	40240000 	.word	0x40240000
 80087b4:	9b08      	ldr	r3, [sp, #32]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 80ca 	beq.w	8008950 <_dtoa_r+0xb20>
 80087bc:	9b03      	ldr	r3, [sp, #12]
 80087be:	9302      	str	r3, [sp, #8]
 80087c0:	2d00      	cmp	r5, #0
 80087c2:	dd05      	ble.n	80087d0 <_dtoa_r+0x9a0>
 80087c4:	4639      	mov	r1, r7
 80087c6:	462a      	mov	r2, r5
 80087c8:	4620      	mov	r0, r4
 80087ca:	f000 fd49 	bl	8009260 <__lshift>
 80087ce:	4607      	mov	r7, r0
 80087d0:	f1b8 0f00 	cmp.w	r8, #0
 80087d4:	d05b      	beq.n	800888e <_dtoa_r+0xa5e>
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 fb2f 	bl	8008e3c <_Balloc>
 80087de:	4605      	mov	r5, r0
 80087e0:	b928      	cbnz	r0, 80087ee <_dtoa_r+0x9be>
 80087e2:	4b87      	ldr	r3, [pc, #540]	; (8008a00 <_dtoa_r+0xbd0>)
 80087e4:	4602      	mov	r2, r0
 80087e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80087ea:	f7ff bb3b 	b.w	8007e64 <_dtoa_r+0x34>
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	3202      	adds	r2, #2
 80087f2:	0092      	lsls	r2, r2, #2
 80087f4:	f107 010c 	add.w	r1, r7, #12
 80087f8:	300c      	adds	r0, #12
 80087fa:	f000 fb04 	bl	8008e06 <memcpy>
 80087fe:	2201      	movs	r2, #1
 8008800:	4629      	mov	r1, r5
 8008802:	4620      	mov	r0, r4
 8008804:	f000 fd2c 	bl	8009260 <__lshift>
 8008808:	9b01      	ldr	r3, [sp, #4]
 800880a:	f103 0901 	add.w	r9, r3, #1
 800880e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008812:	4413      	add	r3, r2
 8008814:	9305      	str	r3, [sp, #20]
 8008816:	f00a 0301 	and.w	r3, sl, #1
 800881a:	46b8      	mov	r8, r7
 800881c:	9304      	str	r3, [sp, #16]
 800881e:	4607      	mov	r7, r0
 8008820:	4631      	mov	r1, r6
 8008822:	ee18 0a10 	vmov	r0, s16
 8008826:	f7ff fa75 	bl	8007d14 <quorem>
 800882a:	4641      	mov	r1, r8
 800882c:	9002      	str	r0, [sp, #8]
 800882e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008832:	ee18 0a10 	vmov	r0, s16
 8008836:	f000 fd83 	bl	8009340 <__mcmp>
 800883a:	463a      	mov	r2, r7
 800883c:	9003      	str	r0, [sp, #12]
 800883e:	4631      	mov	r1, r6
 8008840:	4620      	mov	r0, r4
 8008842:	f000 fd99 	bl	8009378 <__mdiff>
 8008846:	68c2      	ldr	r2, [r0, #12]
 8008848:	f109 3bff 	add.w	fp, r9, #4294967295
 800884c:	4605      	mov	r5, r0
 800884e:	bb02      	cbnz	r2, 8008892 <_dtoa_r+0xa62>
 8008850:	4601      	mov	r1, r0
 8008852:	ee18 0a10 	vmov	r0, s16
 8008856:	f000 fd73 	bl	8009340 <__mcmp>
 800885a:	4602      	mov	r2, r0
 800885c:	4629      	mov	r1, r5
 800885e:	4620      	mov	r0, r4
 8008860:	9207      	str	r2, [sp, #28]
 8008862:	f000 fb2b 	bl	8008ebc <_Bfree>
 8008866:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800886a:	ea43 0102 	orr.w	r1, r3, r2
 800886e:	9b04      	ldr	r3, [sp, #16]
 8008870:	430b      	orrs	r3, r1
 8008872:	464d      	mov	r5, r9
 8008874:	d10f      	bne.n	8008896 <_dtoa_r+0xa66>
 8008876:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800887a:	d02a      	beq.n	80088d2 <_dtoa_r+0xaa2>
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	dd02      	ble.n	8008888 <_dtoa_r+0xa58>
 8008882:	9b02      	ldr	r3, [sp, #8]
 8008884:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008888:	f88b a000 	strb.w	sl, [fp]
 800888c:	e775      	b.n	800877a <_dtoa_r+0x94a>
 800888e:	4638      	mov	r0, r7
 8008890:	e7ba      	b.n	8008808 <_dtoa_r+0x9d8>
 8008892:	2201      	movs	r2, #1
 8008894:	e7e2      	b.n	800885c <_dtoa_r+0xa2c>
 8008896:	9b03      	ldr	r3, [sp, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	db04      	blt.n	80088a6 <_dtoa_r+0xa76>
 800889c:	9906      	ldr	r1, [sp, #24]
 800889e:	430b      	orrs	r3, r1
 80088a0:	9904      	ldr	r1, [sp, #16]
 80088a2:	430b      	orrs	r3, r1
 80088a4:	d122      	bne.n	80088ec <_dtoa_r+0xabc>
 80088a6:	2a00      	cmp	r2, #0
 80088a8:	ddee      	ble.n	8008888 <_dtoa_r+0xa58>
 80088aa:	ee18 1a10 	vmov	r1, s16
 80088ae:	2201      	movs	r2, #1
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 fcd5 	bl	8009260 <__lshift>
 80088b6:	4631      	mov	r1, r6
 80088b8:	ee08 0a10 	vmov	s16, r0
 80088bc:	f000 fd40 	bl	8009340 <__mcmp>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	dc03      	bgt.n	80088cc <_dtoa_r+0xa9c>
 80088c4:	d1e0      	bne.n	8008888 <_dtoa_r+0xa58>
 80088c6:	f01a 0f01 	tst.w	sl, #1
 80088ca:	d0dd      	beq.n	8008888 <_dtoa_r+0xa58>
 80088cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088d0:	d1d7      	bne.n	8008882 <_dtoa_r+0xa52>
 80088d2:	2339      	movs	r3, #57	; 0x39
 80088d4:	f88b 3000 	strb.w	r3, [fp]
 80088d8:	462b      	mov	r3, r5
 80088da:	461d      	mov	r5, r3
 80088dc:	3b01      	subs	r3, #1
 80088de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088e2:	2a39      	cmp	r2, #57	; 0x39
 80088e4:	d071      	beq.n	80089ca <_dtoa_r+0xb9a>
 80088e6:	3201      	adds	r2, #1
 80088e8:	701a      	strb	r2, [r3, #0]
 80088ea:	e746      	b.n	800877a <_dtoa_r+0x94a>
 80088ec:	2a00      	cmp	r2, #0
 80088ee:	dd07      	ble.n	8008900 <_dtoa_r+0xad0>
 80088f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088f4:	d0ed      	beq.n	80088d2 <_dtoa_r+0xaa2>
 80088f6:	f10a 0301 	add.w	r3, sl, #1
 80088fa:	f88b 3000 	strb.w	r3, [fp]
 80088fe:	e73c      	b.n	800877a <_dtoa_r+0x94a>
 8008900:	9b05      	ldr	r3, [sp, #20]
 8008902:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008906:	4599      	cmp	r9, r3
 8008908:	d047      	beq.n	800899a <_dtoa_r+0xb6a>
 800890a:	ee18 1a10 	vmov	r1, s16
 800890e:	2300      	movs	r3, #0
 8008910:	220a      	movs	r2, #10
 8008912:	4620      	mov	r0, r4
 8008914:	f000 faf4 	bl	8008f00 <__multadd>
 8008918:	45b8      	cmp	r8, r7
 800891a:	ee08 0a10 	vmov	s16, r0
 800891e:	f04f 0300 	mov.w	r3, #0
 8008922:	f04f 020a 	mov.w	r2, #10
 8008926:	4641      	mov	r1, r8
 8008928:	4620      	mov	r0, r4
 800892a:	d106      	bne.n	800893a <_dtoa_r+0xb0a>
 800892c:	f000 fae8 	bl	8008f00 <__multadd>
 8008930:	4680      	mov	r8, r0
 8008932:	4607      	mov	r7, r0
 8008934:	f109 0901 	add.w	r9, r9, #1
 8008938:	e772      	b.n	8008820 <_dtoa_r+0x9f0>
 800893a:	f000 fae1 	bl	8008f00 <__multadd>
 800893e:	4639      	mov	r1, r7
 8008940:	4680      	mov	r8, r0
 8008942:	2300      	movs	r3, #0
 8008944:	220a      	movs	r2, #10
 8008946:	4620      	mov	r0, r4
 8008948:	f000 fada 	bl	8008f00 <__multadd>
 800894c:	4607      	mov	r7, r0
 800894e:	e7f1      	b.n	8008934 <_dtoa_r+0xb04>
 8008950:	9b03      	ldr	r3, [sp, #12]
 8008952:	9302      	str	r3, [sp, #8]
 8008954:	9d01      	ldr	r5, [sp, #4]
 8008956:	ee18 0a10 	vmov	r0, s16
 800895a:	4631      	mov	r1, r6
 800895c:	f7ff f9da 	bl	8007d14 <quorem>
 8008960:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008964:	9b01      	ldr	r3, [sp, #4]
 8008966:	f805 ab01 	strb.w	sl, [r5], #1
 800896a:	1aea      	subs	r2, r5, r3
 800896c:	9b02      	ldr	r3, [sp, #8]
 800896e:	4293      	cmp	r3, r2
 8008970:	dd09      	ble.n	8008986 <_dtoa_r+0xb56>
 8008972:	ee18 1a10 	vmov	r1, s16
 8008976:	2300      	movs	r3, #0
 8008978:	220a      	movs	r2, #10
 800897a:	4620      	mov	r0, r4
 800897c:	f000 fac0 	bl	8008f00 <__multadd>
 8008980:	ee08 0a10 	vmov	s16, r0
 8008984:	e7e7      	b.n	8008956 <_dtoa_r+0xb26>
 8008986:	9b02      	ldr	r3, [sp, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	bfc8      	it	gt
 800898c:	461d      	movgt	r5, r3
 800898e:	9b01      	ldr	r3, [sp, #4]
 8008990:	bfd8      	it	le
 8008992:	2501      	movle	r5, #1
 8008994:	441d      	add	r5, r3
 8008996:	f04f 0800 	mov.w	r8, #0
 800899a:	ee18 1a10 	vmov	r1, s16
 800899e:	2201      	movs	r2, #1
 80089a0:	4620      	mov	r0, r4
 80089a2:	f000 fc5d 	bl	8009260 <__lshift>
 80089a6:	4631      	mov	r1, r6
 80089a8:	ee08 0a10 	vmov	s16, r0
 80089ac:	f000 fcc8 	bl	8009340 <__mcmp>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	dc91      	bgt.n	80088d8 <_dtoa_r+0xaa8>
 80089b4:	d102      	bne.n	80089bc <_dtoa_r+0xb8c>
 80089b6:	f01a 0f01 	tst.w	sl, #1
 80089ba:	d18d      	bne.n	80088d8 <_dtoa_r+0xaa8>
 80089bc:	462b      	mov	r3, r5
 80089be:	461d      	mov	r5, r3
 80089c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089c4:	2a30      	cmp	r2, #48	; 0x30
 80089c6:	d0fa      	beq.n	80089be <_dtoa_r+0xb8e>
 80089c8:	e6d7      	b.n	800877a <_dtoa_r+0x94a>
 80089ca:	9a01      	ldr	r2, [sp, #4]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d184      	bne.n	80088da <_dtoa_r+0xaaa>
 80089d0:	9b00      	ldr	r3, [sp, #0]
 80089d2:	3301      	adds	r3, #1
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	2331      	movs	r3, #49	; 0x31
 80089d8:	7013      	strb	r3, [r2, #0]
 80089da:	e6ce      	b.n	800877a <_dtoa_r+0x94a>
 80089dc:	4b09      	ldr	r3, [pc, #36]	; (8008a04 <_dtoa_r+0xbd4>)
 80089de:	f7ff ba95 	b.w	8007f0c <_dtoa_r+0xdc>
 80089e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f47f aa6e 	bne.w	8007ec6 <_dtoa_r+0x96>
 80089ea:	4b07      	ldr	r3, [pc, #28]	; (8008a08 <_dtoa_r+0xbd8>)
 80089ec:	f7ff ba8e 	b.w	8007f0c <_dtoa_r+0xdc>
 80089f0:	9b02      	ldr	r3, [sp, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	dcae      	bgt.n	8008954 <_dtoa_r+0xb24>
 80089f6:	9b06      	ldr	r3, [sp, #24]
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	f73f aea8 	bgt.w	800874e <_dtoa_r+0x91e>
 80089fe:	e7a9      	b.n	8008954 <_dtoa_r+0xb24>
 8008a00:	0800a775 	.word	0x0800a775
 8008a04:	0800a03c 	.word	0x0800a03c
 8008a08:	0800a6f6 	.word	0x0800a6f6

08008a0c <__sflush_r>:
 8008a0c:	898a      	ldrh	r2, [r1, #12]
 8008a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a12:	4605      	mov	r5, r0
 8008a14:	0710      	lsls	r0, r2, #28
 8008a16:	460c      	mov	r4, r1
 8008a18:	d458      	bmi.n	8008acc <__sflush_r+0xc0>
 8008a1a:	684b      	ldr	r3, [r1, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dc05      	bgt.n	8008a2c <__sflush_r+0x20>
 8008a20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	dc02      	bgt.n	8008a2c <__sflush_r+0x20>
 8008a26:	2000      	movs	r0, #0
 8008a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a2e:	2e00      	cmp	r6, #0
 8008a30:	d0f9      	beq.n	8008a26 <__sflush_r+0x1a>
 8008a32:	2300      	movs	r3, #0
 8008a34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a38:	682f      	ldr	r7, [r5, #0]
 8008a3a:	602b      	str	r3, [r5, #0]
 8008a3c:	d032      	beq.n	8008aa4 <__sflush_r+0x98>
 8008a3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	075a      	lsls	r2, r3, #29
 8008a44:	d505      	bpl.n	8008a52 <__sflush_r+0x46>
 8008a46:	6863      	ldr	r3, [r4, #4]
 8008a48:	1ac0      	subs	r0, r0, r3
 8008a4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a4c:	b10b      	cbz	r3, 8008a52 <__sflush_r+0x46>
 8008a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a50:	1ac0      	subs	r0, r0, r3
 8008a52:	2300      	movs	r3, #0
 8008a54:	4602      	mov	r2, r0
 8008a56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a58:	6a21      	ldr	r1, [r4, #32]
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	47b0      	blx	r6
 8008a5e:	1c43      	adds	r3, r0, #1
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	d106      	bne.n	8008a72 <__sflush_r+0x66>
 8008a64:	6829      	ldr	r1, [r5, #0]
 8008a66:	291d      	cmp	r1, #29
 8008a68:	d82c      	bhi.n	8008ac4 <__sflush_r+0xb8>
 8008a6a:	4a2a      	ldr	r2, [pc, #168]	; (8008b14 <__sflush_r+0x108>)
 8008a6c:	40ca      	lsrs	r2, r1
 8008a6e:	07d6      	lsls	r6, r2, #31
 8008a70:	d528      	bpl.n	8008ac4 <__sflush_r+0xb8>
 8008a72:	2200      	movs	r2, #0
 8008a74:	6062      	str	r2, [r4, #4]
 8008a76:	04d9      	lsls	r1, r3, #19
 8008a78:	6922      	ldr	r2, [r4, #16]
 8008a7a:	6022      	str	r2, [r4, #0]
 8008a7c:	d504      	bpl.n	8008a88 <__sflush_r+0x7c>
 8008a7e:	1c42      	adds	r2, r0, #1
 8008a80:	d101      	bne.n	8008a86 <__sflush_r+0x7a>
 8008a82:	682b      	ldr	r3, [r5, #0]
 8008a84:	b903      	cbnz	r3, 8008a88 <__sflush_r+0x7c>
 8008a86:	6560      	str	r0, [r4, #84]	; 0x54
 8008a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a8a:	602f      	str	r7, [r5, #0]
 8008a8c:	2900      	cmp	r1, #0
 8008a8e:	d0ca      	beq.n	8008a26 <__sflush_r+0x1a>
 8008a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a94:	4299      	cmp	r1, r3
 8008a96:	d002      	beq.n	8008a9e <__sflush_r+0x92>
 8008a98:	4628      	mov	r0, r5
 8008a9a:	f7fe f8e1 	bl	8006c60 <_free_r>
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8008aa2:	e7c1      	b.n	8008a28 <__sflush_r+0x1c>
 8008aa4:	6a21      	ldr	r1, [r4, #32]
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	47b0      	blx	r6
 8008aac:	1c41      	adds	r1, r0, #1
 8008aae:	d1c7      	bne.n	8008a40 <__sflush_r+0x34>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d0c4      	beq.n	8008a40 <__sflush_r+0x34>
 8008ab6:	2b1d      	cmp	r3, #29
 8008ab8:	d001      	beq.n	8008abe <__sflush_r+0xb2>
 8008aba:	2b16      	cmp	r3, #22
 8008abc:	d101      	bne.n	8008ac2 <__sflush_r+0xb6>
 8008abe:	602f      	str	r7, [r5, #0]
 8008ac0:	e7b1      	b.n	8008a26 <__sflush_r+0x1a>
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac8:	81a3      	strh	r3, [r4, #12]
 8008aca:	e7ad      	b.n	8008a28 <__sflush_r+0x1c>
 8008acc:	690f      	ldr	r7, [r1, #16]
 8008ace:	2f00      	cmp	r7, #0
 8008ad0:	d0a9      	beq.n	8008a26 <__sflush_r+0x1a>
 8008ad2:	0793      	lsls	r3, r2, #30
 8008ad4:	680e      	ldr	r6, [r1, #0]
 8008ad6:	bf08      	it	eq
 8008ad8:	694b      	ldreq	r3, [r1, #20]
 8008ada:	600f      	str	r7, [r1, #0]
 8008adc:	bf18      	it	ne
 8008ade:	2300      	movne	r3, #0
 8008ae0:	eba6 0807 	sub.w	r8, r6, r7
 8008ae4:	608b      	str	r3, [r1, #8]
 8008ae6:	f1b8 0f00 	cmp.w	r8, #0
 8008aea:	dd9c      	ble.n	8008a26 <__sflush_r+0x1a>
 8008aec:	6a21      	ldr	r1, [r4, #32]
 8008aee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008af0:	4643      	mov	r3, r8
 8008af2:	463a      	mov	r2, r7
 8008af4:	4628      	mov	r0, r5
 8008af6:	47b0      	blx	r6
 8008af8:	2800      	cmp	r0, #0
 8008afa:	dc06      	bgt.n	8008b0a <__sflush_r+0xfe>
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b02:	81a3      	strh	r3, [r4, #12]
 8008b04:	f04f 30ff 	mov.w	r0, #4294967295
 8008b08:	e78e      	b.n	8008a28 <__sflush_r+0x1c>
 8008b0a:	4407      	add	r7, r0
 8008b0c:	eba8 0800 	sub.w	r8, r8, r0
 8008b10:	e7e9      	b.n	8008ae6 <__sflush_r+0xda>
 8008b12:	bf00      	nop
 8008b14:	20400001 	.word	0x20400001

08008b18 <_fflush_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	690b      	ldr	r3, [r1, #16]
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	460c      	mov	r4, r1
 8008b20:	b913      	cbnz	r3, 8008b28 <_fflush_r+0x10>
 8008b22:	2500      	movs	r5, #0
 8008b24:	4628      	mov	r0, r5
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	b118      	cbz	r0, 8008b32 <_fflush_r+0x1a>
 8008b2a:	6983      	ldr	r3, [r0, #24]
 8008b2c:	b90b      	cbnz	r3, 8008b32 <_fflush_r+0x1a>
 8008b2e:	f000 f8c5 	bl	8008cbc <__sinit>
 8008b32:	4b14      	ldr	r3, [pc, #80]	; (8008b84 <_fflush_r+0x6c>)
 8008b34:	429c      	cmp	r4, r3
 8008b36:	d11b      	bne.n	8008b70 <_fflush_r+0x58>
 8008b38:	686c      	ldr	r4, [r5, #4]
 8008b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0ef      	beq.n	8008b22 <_fflush_r+0xa>
 8008b42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b44:	07d0      	lsls	r0, r2, #31
 8008b46:	d404      	bmi.n	8008b52 <_fflush_r+0x3a>
 8008b48:	0599      	lsls	r1, r3, #22
 8008b4a:	d402      	bmi.n	8008b52 <_fflush_r+0x3a>
 8008b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b4e:	f000 f958 	bl	8008e02 <__retarget_lock_acquire_recursive>
 8008b52:	4628      	mov	r0, r5
 8008b54:	4621      	mov	r1, r4
 8008b56:	f7ff ff59 	bl	8008a0c <__sflush_r>
 8008b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b5c:	07da      	lsls	r2, r3, #31
 8008b5e:	4605      	mov	r5, r0
 8008b60:	d4e0      	bmi.n	8008b24 <_fflush_r+0xc>
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	059b      	lsls	r3, r3, #22
 8008b66:	d4dd      	bmi.n	8008b24 <_fflush_r+0xc>
 8008b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b6a:	f000 f94b 	bl	8008e04 <__retarget_lock_release_recursive>
 8008b6e:	e7d9      	b.n	8008b24 <_fflush_r+0xc>
 8008b70:	4b05      	ldr	r3, [pc, #20]	; (8008b88 <_fflush_r+0x70>)
 8008b72:	429c      	cmp	r4, r3
 8008b74:	d101      	bne.n	8008b7a <_fflush_r+0x62>
 8008b76:	68ac      	ldr	r4, [r5, #8]
 8008b78:	e7df      	b.n	8008b3a <_fflush_r+0x22>
 8008b7a:	4b04      	ldr	r3, [pc, #16]	; (8008b8c <_fflush_r+0x74>)
 8008b7c:	429c      	cmp	r4, r3
 8008b7e:	bf08      	it	eq
 8008b80:	68ec      	ldreq	r4, [r5, #12]
 8008b82:	e7da      	b.n	8008b3a <_fflush_r+0x22>
 8008b84:	0800a7a8 	.word	0x0800a7a8
 8008b88:	0800a7c8 	.word	0x0800a7c8
 8008b8c:	0800a788 	.word	0x0800a788

08008b90 <fileno>:
 8008b90:	b570      	push	{r4, r5, r6, lr}
 8008b92:	4e1a      	ldr	r6, [pc, #104]	; (8008bfc <fileno+0x6c>)
 8008b94:	6835      	ldr	r5, [r6, #0]
 8008b96:	4604      	mov	r4, r0
 8008b98:	b125      	cbz	r5, 8008ba4 <fileno+0x14>
 8008b9a:	69ab      	ldr	r3, [r5, #24]
 8008b9c:	b913      	cbnz	r3, 8008ba4 <fileno+0x14>
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f000 f88c 	bl	8008cbc <__sinit>
 8008ba4:	4b16      	ldr	r3, [pc, #88]	; (8008c00 <fileno+0x70>)
 8008ba6:	429c      	cmp	r4, r3
 8008ba8:	d118      	bne.n	8008bdc <fileno+0x4c>
 8008baa:	686c      	ldr	r4, [r5, #4]
 8008bac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bae:	07d8      	lsls	r0, r3, #31
 8008bb0:	d405      	bmi.n	8008bbe <fileno+0x2e>
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	0599      	lsls	r1, r3, #22
 8008bb6:	d402      	bmi.n	8008bbe <fileno+0x2e>
 8008bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bba:	f000 f922 	bl	8008e02 <__retarget_lock_acquire_recursive>
 8008bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc2:	b1ab      	cbz	r3, 8008bf0 <fileno+0x60>
 8008bc4:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8008bc8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bca:	07d2      	lsls	r2, r2, #31
 8008bcc:	d404      	bmi.n	8008bd8 <fileno+0x48>
 8008bce:	059b      	lsls	r3, r3, #22
 8008bd0:	d402      	bmi.n	8008bd8 <fileno+0x48>
 8008bd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bd4:	f000 f916 	bl	8008e04 <__retarget_lock_release_recursive>
 8008bd8:	4628      	mov	r0, r5
 8008bda:	bd70      	pop	{r4, r5, r6, pc}
 8008bdc:	4b09      	ldr	r3, [pc, #36]	; (8008c04 <fileno+0x74>)
 8008bde:	429c      	cmp	r4, r3
 8008be0:	d101      	bne.n	8008be6 <fileno+0x56>
 8008be2:	68ac      	ldr	r4, [r5, #8]
 8008be4:	e7e2      	b.n	8008bac <fileno+0x1c>
 8008be6:	4b08      	ldr	r3, [pc, #32]	; (8008c08 <fileno+0x78>)
 8008be8:	429c      	cmp	r4, r3
 8008bea:	bf08      	it	eq
 8008bec:	68ec      	ldreq	r4, [r5, #12]
 8008bee:	e7dd      	b.n	8008bac <fileno+0x1c>
 8008bf0:	6832      	ldr	r2, [r6, #0]
 8008bf2:	2109      	movs	r1, #9
 8008bf4:	6011      	str	r1, [r2, #0]
 8008bf6:	f04f 35ff 	mov.w	r5, #4294967295
 8008bfa:	e7e5      	b.n	8008bc8 <fileno+0x38>
 8008bfc:	2000002c 	.word	0x2000002c
 8008c00:	0800a7a8 	.word	0x0800a7a8
 8008c04:	0800a7c8 	.word	0x0800a7c8
 8008c08:	0800a788 	.word	0x0800a788

08008c0c <std>:
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	b510      	push	{r4, lr}
 8008c10:	4604      	mov	r4, r0
 8008c12:	e9c0 3300 	strd	r3, r3, [r0]
 8008c16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c1a:	6083      	str	r3, [r0, #8]
 8008c1c:	8181      	strh	r1, [r0, #12]
 8008c1e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c20:	81c2      	strh	r2, [r0, #14]
 8008c22:	6183      	str	r3, [r0, #24]
 8008c24:	4619      	mov	r1, r3
 8008c26:	2208      	movs	r2, #8
 8008c28:	305c      	adds	r0, #92	; 0x5c
 8008c2a:	f7fe f811 	bl	8006c50 <memset>
 8008c2e:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <std+0x38>)
 8008c30:	6263      	str	r3, [r4, #36]	; 0x24
 8008c32:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <std+0x3c>)
 8008c34:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c36:	4b05      	ldr	r3, [pc, #20]	; (8008c4c <std+0x40>)
 8008c38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c3a:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <std+0x44>)
 8008c3c:	6224      	str	r4, [r4, #32]
 8008c3e:	6323      	str	r3, [r4, #48]	; 0x30
 8008c40:	bd10      	pop	{r4, pc}
 8008c42:	bf00      	nop
 8008c44:	08009829 	.word	0x08009829
 8008c48:	0800984b 	.word	0x0800984b
 8008c4c:	08009883 	.word	0x08009883
 8008c50:	080098a7 	.word	0x080098a7

08008c54 <_cleanup_r>:
 8008c54:	4901      	ldr	r1, [pc, #4]	; (8008c5c <_cleanup_r+0x8>)
 8008c56:	f000 b8af 	b.w	8008db8 <_fwalk_reent>
 8008c5a:	bf00      	nop
 8008c5c:	08008b19 	.word	0x08008b19

08008c60 <__sfmoreglue>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	2268      	movs	r2, #104	; 0x68
 8008c64:	1e4d      	subs	r5, r1, #1
 8008c66:	4355      	muls	r5, r2
 8008c68:	460e      	mov	r6, r1
 8008c6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c6e:	f7fe f863 	bl	8006d38 <_malloc_r>
 8008c72:	4604      	mov	r4, r0
 8008c74:	b140      	cbz	r0, 8008c88 <__sfmoreglue+0x28>
 8008c76:	2100      	movs	r1, #0
 8008c78:	e9c0 1600 	strd	r1, r6, [r0]
 8008c7c:	300c      	adds	r0, #12
 8008c7e:	60a0      	str	r0, [r4, #8]
 8008c80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c84:	f7fd ffe4 	bl	8006c50 <memset>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}

08008c8c <__sfp_lock_acquire>:
 8008c8c:	4801      	ldr	r0, [pc, #4]	; (8008c94 <__sfp_lock_acquire+0x8>)
 8008c8e:	f000 b8b8 	b.w	8008e02 <__retarget_lock_acquire_recursive>
 8008c92:	bf00      	nop
 8008c94:	2000048d 	.word	0x2000048d

08008c98 <__sfp_lock_release>:
 8008c98:	4801      	ldr	r0, [pc, #4]	; (8008ca0 <__sfp_lock_release+0x8>)
 8008c9a:	f000 b8b3 	b.w	8008e04 <__retarget_lock_release_recursive>
 8008c9e:	bf00      	nop
 8008ca0:	2000048d 	.word	0x2000048d

08008ca4 <__sinit_lock_acquire>:
 8008ca4:	4801      	ldr	r0, [pc, #4]	; (8008cac <__sinit_lock_acquire+0x8>)
 8008ca6:	f000 b8ac 	b.w	8008e02 <__retarget_lock_acquire_recursive>
 8008caa:	bf00      	nop
 8008cac:	2000048e 	.word	0x2000048e

08008cb0 <__sinit_lock_release>:
 8008cb0:	4801      	ldr	r0, [pc, #4]	; (8008cb8 <__sinit_lock_release+0x8>)
 8008cb2:	f000 b8a7 	b.w	8008e04 <__retarget_lock_release_recursive>
 8008cb6:	bf00      	nop
 8008cb8:	2000048e 	.word	0x2000048e

08008cbc <__sinit>:
 8008cbc:	b510      	push	{r4, lr}
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	f7ff fff0 	bl	8008ca4 <__sinit_lock_acquire>
 8008cc4:	69a3      	ldr	r3, [r4, #24]
 8008cc6:	b11b      	cbz	r3, 8008cd0 <__sinit+0x14>
 8008cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ccc:	f7ff bff0 	b.w	8008cb0 <__sinit_lock_release>
 8008cd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008cd4:	6523      	str	r3, [r4, #80]	; 0x50
 8008cd6:	4b13      	ldr	r3, [pc, #76]	; (8008d24 <__sinit+0x68>)
 8008cd8:	4a13      	ldr	r2, [pc, #76]	; (8008d28 <__sinit+0x6c>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008cde:	42a3      	cmp	r3, r4
 8008ce0:	bf04      	itt	eq
 8008ce2:	2301      	moveq	r3, #1
 8008ce4:	61a3      	streq	r3, [r4, #24]
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f000 f820 	bl	8008d2c <__sfp>
 8008cec:	6060      	str	r0, [r4, #4]
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f000 f81c 	bl	8008d2c <__sfp>
 8008cf4:	60a0      	str	r0, [r4, #8]
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f000 f818 	bl	8008d2c <__sfp>
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	60e0      	str	r0, [r4, #12]
 8008d00:	2104      	movs	r1, #4
 8008d02:	6860      	ldr	r0, [r4, #4]
 8008d04:	f7ff ff82 	bl	8008c0c <std>
 8008d08:	68a0      	ldr	r0, [r4, #8]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	2109      	movs	r1, #9
 8008d0e:	f7ff ff7d 	bl	8008c0c <std>
 8008d12:	68e0      	ldr	r0, [r4, #12]
 8008d14:	2202      	movs	r2, #2
 8008d16:	2112      	movs	r1, #18
 8008d18:	f7ff ff78 	bl	8008c0c <std>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	61a3      	str	r3, [r4, #24]
 8008d20:	e7d2      	b.n	8008cc8 <__sinit+0xc>
 8008d22:	bf00      	nop
 8008d24:	0800a028 	.word	0x0800a028
 8008d28:	08008c55 	.word	0x08008c55

08008d2c <__sfp>:
 8008d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2e:	4607      	mov	r7, r0
 8008d30:	f7ff ffac 	bl	8008c8c <__sfp_lock_acquire>
 8008d34:	4b1e      	ldr	r3, [pc, #120]	; (8008db0 <__sfp+0x84>)
 8008d36:	681e      	ldr	r6, [r3, #0]
 8008d38:	69b3      	ldr	r3, [r6, #24]
 8008d3a:	b913      	cbnz	r3, 8008d42 <__sfp+0x16>
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f7ff ffbd 	bl	8008cbc <__sinit>
 8008d42:	3648      	adds	r6, #72	; 0x48
 8008d44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	d503      	bpl.n	8008d54 <__sfp+0x28>
 8008d4c:	6833      	ldr	r3, [r6, #0]
 8008d4e:	b30b      	cbz	r3, 8008d94 <__sfp+0x68>
 8008d50:	6836      	ldr	r6, [r6, #0]
 8008d52:	e7f7      	b.n	8008d44 <__sfp+0x18>
 8008d54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d58:	b9d5      	cbnz	r5, 8008d90 <__sfp+0x64>
 8008d5a:	4b16      	ldr	r3, [pc, #88]	; (8008db4 <__sfp+0x88>)
 8008d5c:	60e3      	str	r3, [r4, #12]
 8008d5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d62:	6665      	str	r5, [r4, #100]	; 0x64
 8008d64:	f000 f84c 	bl	8008e00 <__retarget_lock_init_recursive>
 8008d68:	f7ff ff96 	bl	8008c98 <__sfp_lock_release>
 8008d6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d74:	6025      	str	r5, [r4, #0]
 8008d76:	61a5      	str	r5, [r4, #24]
 8008d78:	2208      	movs	r2, #8
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d80:	f7fd ff66 	bl	8006c50 <memset>
 8008d84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d90:	3468      	adds	r4, #104	; 0x68
 8008d92:	e7d9      	b.n	8008d48 <__sfp+0x1c>
 8008d94:	2104      	movs	r1, #4
 8008d96:	4638      	mov	r0, r7
 8008d98:	f7ff ff62 	bl	8008c60 <__sfmoreglue>
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	6030      	str	r0, [r6, #0]
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d1d5      	bne.n	8008d50 <__sfp+0x24>
 8008da4:	f7ff ff78 	bl	8008c98 <__sfp_lock_release>
 8008da8:	230c      	movs	r3, #12
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	e7ee      	b.n	8008d8c <__sfp+0x60>
 8008dae:	bf00      	nop
 8008db0:	0800a028 	.word	0x0800a028
 8008db4:	ffff0001 	.word	0xffff0001

08008db8 <_fwalk_reent>:
 8008db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dbc:	4606      	mov	r6, r0
 8008dbe:	4688      	mov	r8, r1
 8008dc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dc4:	2700      	movs	r7, #0
 8008dc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dca:	f1b9 0901 	subs.w	r9, r9, #1
 8008dce:	d505      	bpl.n	8008ddc <_fwalk_reent+0x24>
 8008dd0:	6824      	ldr	r4, [r4, #0]
 8008dd2:	2c00      	cmp	r4, #0
 8008dd4:	d1f7      	bne.n	8008dc6 <_fwalk_reent+0xe>
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ddc:	89ab      	ldrh	r3, [r5, #12]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d907      	bls.n	8008df2 <_fwalk_reent+0x3a>
 8008de2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008de6:	3301      	adds	r3, #1
 8008de8:	d003      	beq.n	8008df2 <_fwalk_reent+0x3a>
 8008dea:	4629      	mov	r1, r5
 8008dec:	4630      	mov	r0, r6
 8008dee:	47c0      	blx	r8
 8008df0:	4307      	orrs	r7, r0
 8008df2:	3568      	adds	r5, #104	; 0x68
 8008df4:	e7e9      	b.n	8008dca <_fwalk_reent+0x12>
	...

08008df8 <_localeconv_r>:
 8008df8:	4800      	ldr	r0, [pc, #0]	; (8008dfc <_localeconv_r+0x4>)
 8008dfa:	4770      	bx	lr
 8008dfc:	20000180 	.word	0x20000180

08008e00 <__retarget_lock_init_recursive>:
 8008e00:	4770      	bx	lr

08008e02 <__retarget_lock_acquire_recursive>:
 8008e02:	4770      	bx	lr

08008e04 <__retarget_lock_release_recursive>:
 8008e04:	4770      	bx	lr

08008e06 <memcpy>:
 8008e06:	440a      	add	r2, r1
 8008e08:	4291      	cmp	r1, r2
 8008e0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e0e:	d100      	bne.n	8008e12 <memcpy+0xc>
 8008e10:	4770      	bx	lr
 8008e12:	b510      	push	{r4, lr}
 8008e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e1c:	4291      	cmp	r1, r2
 8008e1e:	d1f9      	bne.n	8008e14 <memcpy+0xe>
 8008e20:	bd10      	pop	{r4, pc}
	...

08008e24 <__malloc_lock>:
 8008e24:	4801      	ldr	r0, [pc, #4]	; (8008e2c <__malloc_lock+0x8>)
 8008e26:	f7ff bfec 	b.w	8008e02 <__retarget_lock_acquire_recursive>
 8008e2a:	bf00      	nop
 8008e2c:	2000048c 	.word	0x2000048c

08008e30 <__malloc_unlock>:
 8008e30:	4801      	ldr	r0, [pc, #4]	; (8008e38 <__malloc_unlock+0x8>)
 8008e32:	f7ff bfe7 	b.w	8008e04 <__retarget_lock_release_recursive>
 8008e36:	bf00      	nop
 8008e38:	2000048c 	.word	0x2000048c

08008e3c <_Balloc>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e40:	4604      	mov	r4, r0
 8008e42:	460d      	mov	r5, r1
 8008e44:	b976      	cbnz	r6, 8008e64 <_Balloc+0x28>
 8008e46:	2010      	movs	r0, #16
 8008e48:	f7fd fefa 	bl	8006c40 <malloc>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	6260      	str	r0, [r4, #36]	; 0x24
 8008e50:	b920      	cbnz	r0, 8008e5c <_Balloc+0x20>
 8008e52:	4b18      	ldr	r3, [pc, #96]	; (8008eb4 <_Balloc+0x78>)
 8008e54:	4818      	ldr	r0, [pc, #96]	; (8008eb8 <_Balloc+0x7c>)
 8008e56:	2166      	movs	r1, #102	; 0x66
 8008e58:	f000 fd2a 	bl	80098b0 <__assert_func>
 8008e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e60:	6006      	str	r6, [r0, #0]
 8008e62:	60c6      	str	r6, [r0, #12]
 8008e64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e66:	68f3      	ldr	r3, [r6, #12]
 8008e68:	b183      	cbz	r3, 8008e8c <_Balloc+0x50>
 8008e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e72:	b9b8      	cbnz	r0, 8008ea4 <_Balloc+0x68>
 8008e74:	2101      	movs	r1, #1
 8008e76:	fa01 f605 	lsl.w	r6, r1, r5
 8008e7a:	1d72      	adds	r2, r6, #5
 8008e7c:	0092      	lsls	r2, r2, #2
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f000 fb60 	bl	8009544 <_calloc_r>
 8008e84:	b160      	cbz	r0, 8008ea0 <_Balloc+0x64>
 8008e86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e8a:	e00e      	b.n	8008eaa <_Balloc+0x6e>
 8008e8c:	2221      	movs	r2, #33	; 0x21
 8008e8e:	2104      	movs	r1, #4
 8008e90:	4620      	mov	r0, r4
 8008e92:	f000 fb57 	bl	8009544 <_calloc_r>
 8008e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e98:	60f0      	str	r0, [r6, #12]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1e4      	bne.n	8008e6a <_Balloc+0x2e>
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}
 8008ea4:	6802      	ldr	r2, [r0, #0]
 8008ea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008eb0:	e7f7      	b.n	8008ea2 <_Balloc+0x66>
 8008eb2:	bf00      	nop
 8008eb4:	0800a703 	.word	0x0800a703
 8008eb8:	0800a7e8 	.word	0x0800a7e8

08008ebc <_Bfree>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	b976      	cbnz	r6, 8008ee4 <_Bfree+0x28>
 8008ec6:	2010      	movs	r0, #16
 8008ec8:	f7fd feba 	bl	8006c40 <malloc>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	6268      	str	r0, [r5, #36]	; 0x24
 8008ed0:	b920      	cbnz	r0, 8008edc <_Bfree+0x20>
 8008ed2:	4b09      	ldr	r3, [pc, #36]	; (8008ef8 <_Bfree+0x3c>)
 8008ed4:	4809      	ldr	r0, [pc, #36]	; (8008efc <_Bfree+0x40>)
 8008ed6:	218a      	movs	r1, #138	; 0x8a
 8008ed8:	f000 fcea 	bl	80098b0 <__assert_func>
 8008edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ee0:	6006      	str	r6, [r0, #0]
 8008ee2:	60c6      	str	r6, [r0, #12]
 8008ee4:	b13c      	cbz	r4, 8008ef6 <_Bfree+0x3a>
 8008ee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ee8:	6862      	ldr	r2, [r4, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ef0:	6021      	str	r1, [r4, #0]
 8008ef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	0800a703 	.word	0x0800a703
 8008efc:	0800a7e8 	.word	0x0800a7e8

08008f00 <__multadd>:
 8008f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f04:	690d      	ldr	r5, [r1, #16]
 8008f06:	4607      	mov	r7, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	461e      	mov	r6, r3
 8008f0c:	f101 0c14 	add.w	ip, r1, #20
 8008f10:	2000      	movs	r0, #0
 8008f12:	f8dc 3000 	ldr.w	r3, [ip]
 8008f16:	b299      	uxth	r1, r3
 8008f18:	fb02 6101 	mla	r1, r2, r1, r6
 8008f1c:	0c1e      	lsrs	r6, r3, #16
 8008f1e:	0c0b      	lsrs	r3, r1, #16
 8008f20:	fb02 3306 	mla	r3, r2, r6, r3
 8008f24:	b289      	uxth	r1, r1
 8008f26:	3001      	adds	r0, #1
 8008f28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f2c:	4285      	cmp	r5, r0
 8008f2e:	f84c 1b04 	str.w	r1, [ip], #4
 8008f32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f36:	dcec      	bgt.n	8008f12 <__multadd+0x12>
 8008f38:	b30e      	cbz	r6, 8008f7e <__multadd+0x7e>
 8008f3a:	68a3      	ldr	r3, [r4, #8]
 8008f3c:	42ab      	cmp	r3, r5
 8008f3e:	dc19      	bgt.n	8008f74 <__multadd+0x74>
 8008f40:	6861      	ldr	r1, [r4, #4]
 8008f42:	4638      	mov	r0, r7
 8008f44:	3101      	adds	r1, #1
 8008f46:	f7ff ff79 	bl	8008e3c <_Balloc>
 8008f4a:	4680      	mov	r8, r0
 8008f4c:	b928      	cbnz	r0, 8008f5a <__multadd+0x5a>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	4b0c      	ldr	r3, [pc, #48]	; (8008f84 <__multadd+0x84>)
 8008f52:	480d      	ldr	r0, [pc, #52]	; (8008f88 <__multadd+0x88>)
 8008f54:	21b5      	movs	r1, #181	; 0xb5
 8008f56:	f000 fcab 	bl	80098b0 <__assert_func>
 8008f5a:	6922      	ldr	r2, [r4, #16]
 8008f5c:	3202      	adds	r2, #2
 8008f5e:	f104 010c 	add.w	r1, r4, #12
 8008f62:	0092      	lsls	r2, r2, #2
 8008f64:	300c      	adds	r0, #12
 8008f66:	f7ff ff4e 	bl	8008e06 <memcpy>
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f7ff ffa5 	bl	8008ebc <_Bfree>
 8008f72:	4644      	mov	r4, r8
 8008f74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f78:	3501      	adds	r5, #1
 8008f7a:	615e      	str	r6, [r3, #20]
 8008f7c:	6125      	str	r5, [r4, #16]
 8008f7e:	4620      	mov	r0, r4
 8008f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f84:	0800a775 	.word	0x0800a775
 8008f88:	0800a7e8 	.word	0x0800a7e8

08008f8c <__hi0bits>:
 8008f8c:	0c03      	lsrs	r3, r0, #16
 8008f8e:	041b      	lsls	r3, r3, #16
 8008f90:	b9d3      	cbnz	r3, 8008fc8 <__hi0bits+0x3c>
 8008f92:	0400      	lsls	r0, r0, #16
 8008f94:	2310      	movs	r3, #16
 8008f96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f9a:	bf04      	itt	eq
 8008f9c:	0200      	lsleq	r0, r0, #8
 8008f9e:	3308      	addeq	r3, #8
 8008fa0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008fa4:	bf04      	itt	eq
 8008fa6:	0100      	lsleq	r0, r0, #4
 8008fa8:	3304      	addeq	r3, #4
 8008faa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008fae:	bf04      	itt	eq
 8008fb0:	0080      	lsleq	r0, r0, #2
 8008fb2:	3302      	addeq	r3, #2
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	db05      	blt.n	8008fc4 <__hi0bits+0x38>
 8008fb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008fbc:	f103 0301 	add.w	r3, r3, #1
 8008fc0:	bf08      	it	eq
 8008fc2:	2320      	moveq	r3, #32
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	4770      	bx	lr
 8008fc8:	2300      	movs	r3, #0
 8008fca:	e7e4      	b.n	8008f96 <__hi0bits+0xa>

08008fcc <__lo0bits>:
 8008fcc:	6803      	ldr	r3, [r0, #0]
 8008fce:	f013 0207 	ands.w	r2, r3, #7
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	d00b      	beq.n	8008fee <__lo0bits+0x22>
 8008fd6:	07da      	lsls	r2, r3, #31
 8008fd8:	d423      	bmi.n	8009022 <__lo0bits+0x56>
 8008fda:	0798      	lsls	r0, r3, #30
 8008fdc:	bf49      	itett	mi
 8008fde:	085b      	lsrmi	r3, r3, #1
 8008fe0:	089b      	lsrpl	r3, r3, #2
 8008fe2:	2001      	movmi	r0, #1
 8008fe4:	600b      	strmi	r3, [r1, #0]
 8008fe6:	bf5c      	itt	pl
 8008fe8:	600b      	strpl	r3, [r1, #0]
 8008fea:	2002      	movpl	r0, #2
 8008fec:	4770      	bx	lr
 8008fee:	b298      	uxth	r0, r3
 8008ff0:	b9a8      	cbnz	r0, 800901e <__lo0bits+0x52>
 8008ff2:	0c1b      	lsrs	r3, r3, #16
 8008ff4:	2010      	movs	r0, #16
 8008ff6:	b2da      	uxtb	r2, r3
 8008ff8:	b90a      	cbnz	r2, 8008ffe <__lo0bits+0x32>
 8008ffa:	3008      	adds	r0, #8
 8008ffc:	0a1b      	lsrs	r3, r3, #8
 8008ffe:	071a      	lsls	r2, r3, #28
 8009000:	bf04      	itt	eq
 8009002:	091b      	lsreq	r3, r3, #4
 8009004:	3004      	addeq	r0, #4
 8009006:	079a      	lsls	r2, r3, #30
 8009008:	bf04      	itt	eq
 800900a:	089b      	lsreq	r3, r3, #2
 800900c:	3002      	addeq	r0, #2
 800900e:	07da      	lsls	r2, r3, #31
 8009010:	d403      	bmi.n	800901a <__lo0bits+0x4e>
 8009012:	085b      	lsrs	r3, r3, #1
 8009014:	f100 0001 	add.w	r0, r0, #1
 8009018:	d005      	beq.n	8009026 <__lo0bits+0x5a>
 800901a:	600b      	str	r3, [r1, #0]
 800901c:	4770      	bx	lr
 800901e:	4610      	mov	r0, r2
 8009020:	e7e9      	b.n	8008ff6 <__lo0bits+0x2a>
 8009022:	2000      	movs	r0, #0
 8009024:	4770      	bx	lr
 8009026:	2020      	movs	r0, #32
 8009028:	4770      	bx	lr
	...

0800902c <__i2b>:
 800902c:	b510      	push	{r4, lr}
 800902e:	460c      	mov	r4, r1
 8009030:	2101      	movs	r1, #1
 8009032:	f7ff ff03 	bl	8008e3c <_Balloc>
 8009036:	4602      	mov	r2, r0
 8009038:	b928      	cbnz	r0, 8009046 <__i2b+0x1a>
 800903a:	4b05      	ldr	r3, [pc, #20]	; (8009050 <__i2b+0x24>)
 800903c:	4805      	ldr	r0, [pc, #20]	; (8009054 <__i2b+0x28>)
 800903e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009042:	f000 fc35 	bl	80098b0 <__assert_func>
 8009046:	2301      	movs	r3, #1
 8009048:	6144      	str	r4, [r0, #20]
 800904a:	6103      	str	r3, [r0, #16]
 800904c:	bd10      	pop	{r4, pc}
 800904e:	bf00      	nop
 8009050:	0800a775 	.word	0x0800a775
 8009054:	0800a7e8 	.word	0x0800a7e8

08009058 <__multiply>:
 8009058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	4691      	mov	r9, r2
 800905e:	690a      	ldr	r2, [r1, #16]
 8009060:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009064:	429a      	cmp	r2, r3
 8009066:	bfb8      	it	lt
 8009068:	460b      	movlt	r3, r1
 800906a:	460c      	mov	r4, r1
 800906c:	bfbc      	itt	lt
 800906e:	464c      	movlt	r4, r9
 8009070:	4699      	movlt	r9, r3
 8009072:	6927      	ldr	r7, [r4, #16]
 8009074:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009078:	68a3      	ldr	r3, [r4, #8]
 800907a:	6861      	ldr	r1, [r4, #4]
 800907c:	eb07 060a 	add.w	r6, r7, sl
 8009080:	42b3      	cmp	r3, r6
 8009082:	b085      	sub	sp, #20
 8009084:	bfb8      	it	lt
 8009086:	3101      	addlt	r1, #1
 8009088:	f7ff fed8 	bl	8008e3c <_Balloc>
 800908c:	b930      	cbnz	r0, 800909c <__multiply+0x44>
 800908e:	4602      	mov	r2, r0
 8009090:	4b44      	ldr	r3, [pc, #272]	; (80091a4 <__multiply+0x14c>)
 8009092:	4845      	ldr	r0, [pc, #276]	; (80091a8 <__multiply+0x150>)
 8009094:	f240 115d 	movw	r1, #349	; 0x15d
 8009098:	f000 fc0a 	bl	80098b0 <__assert_func>
 800909c:	f100 0514 	add.w	r5, r0, #20
 80090a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090a4:	462b      	mov	r3, r5
 80090a6:	2200      	movs	r2, #0
 80090a8:	4543      	cmp	r3, r8
 80090aa:	d321      	bcc.n	80090f0 <__multiply+0x98>
 80090ac:	f104 0314 	add.w	r3, r4, #20
 80090b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80090b4:	f109 0314 	add.w	r3, r9, #20
 80090b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80090bc:	9202      	str	r2, [sp, #8]
 80090be:	1b3a      	subs	r2, r7, r4
 80090c0:	3a15      	subs	r2, #21
 80090c2:	f022 0203 	bic.w	r2, r2, #3
 80090c6:	3204      	adds	r2, #4
 80090c8:	f104 0115 	add.w	r1, r4, #21
 80090cc:	428f      	cmp	r7, r1
 80090ce:	bf38      	it	cc
 80090d0:	2204      	movcc	r2, #4
 80090d2:	9201      	str	r2, [sp, #4]
 80090d4:	9a02      	ldr	r2, [sp, #8]
 80090d6:	9303      	str	r3, [sp, #12]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d80c      	bhi.n	80090f6 <__multiply+0x9e>
 80090dc:	2e00      	cmp	r6, #0
 80090de:	dd03      	ble.n	80090e8 <__multiply+0x90>
 80090e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d05a      	beq.n	800919e <__multiply+0x146>
 80090e8:	6106      	str	r6, [r0, #16]
 80090ea:	b005      	add	sp, #20
 80090ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f0:	f843 2b04 	str.w	r2, [r3], #4
 80090f4:	e7d8      	b.n	80090a8 <__multiply+0x50>
 80090f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80090fa:	f1ba 0f00 	cmp.w	sl, #0
 80090fe:	d024      	beq.n	800914a <__multiply+0xf2>
 8009100:	f104 0e14 	add.w	lr, r4, #20
 8009104:	46a9      	mov	r9, r5
 8009106:	f04f 0c00 	mov.w	ip, #0
 800910a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800910e:	f8d9 1000 	ldr.w	r1, [r9]
 8009112:	fa1f fb82 	uxth.w	fp, r2
 8009116:	b289      	uxth	r1, r1
 8009118:	fb0a 110b 	mla	r1, sl, fp, r1
 800911c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009120:	f8d9 2000 	ldr.w	r2, [r9]
 8009124:	4461      	add	r1, ip
 8009126:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800912a:	fb0a c20b 	mla	r2, sl, fp, ip
 800912e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009132:	b289      	uxth	r1, r1
 8009134:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009138:	4577      	cmp	r7, lr
 800913a:	f849 1b04 	str.w	r1, [r9], #4
 800913e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009142:	d8e2      	bhi.n	800910a <__multiply+0xb2>
 8009144:	9a01      	ldr	r2, [sp, #4]
 8009146:	f845 c002 	str.w	ip, [r5, r2]
 800914a:	9a03      	ldr	r2, [sp, #12]
 800914c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009150:	3304      	adds	r3, #4
 8009152:	f1b9 0f00 	cmp.w	r9, #0
 8009156:	d020      	beq.n	800919a <__multiply+0x142>
 8009158:	6829      	ldr	r1, [r5, #0]
 800915a:	f104 0c14 	add.w	ip, r4, #20
 800915e:	46ae      	mov	lr, r5
 8009160:	f04f 0a00 	mov.w	sl, #0
 8009164:	f8bc b000 	ldrh.w	fp, [ip]
 8009168:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800916c:	fb09 220b 	mla	r2, r9, fp, r2
 8009170:	4492      	add	sl, r2
 8009172:	b289      	uxth	r1, r1
 8009174:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009178:	f84e 1b04 	str.w	r1, [lr], #4
 800917c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009180:	f8be 1000 	ldrh.w	r1, [lr]
 8009184:	0c12      	lsrs	r2, r2, #16
 8009186:	fb09 1102 	mla	r1, r9, r2, r1
 800918a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800918e:	4567      	cmp	r7, ip
 8009190:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009194:	d8e6      	bhi.n	8009164 <__multiply+0x10c>
 8009196:	9a01      	ldr	r2, [sp, #4]
 8009198:	50a9      	str	r1, [r5, r2]
 800919a:	3504      	adds	r5, #4
 800919c:	e79a      	b.n	80090d4 <__multiply+0x7c>
 800919e:	3e01      	subs	r6, #1
 80091a0:	e79c      	b.n	80090dc <__multiply+0x84>
 80091a2:	bf00      	nop
 80091a4:	0800a775 	.word	0x0800a775
 80091a8:	0800a7e8 	.word	0x0800a7e8

080091ac <__pow5mult>:
 80091ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b0:	4615      	mov	r5, r2
 80091b2:	f012 0203 	ands.w	r2, r2, #3
 80091b6:	4606      	mov	r6, r0
 80091b8:	460f      	mov	r7, r1
 80091ba:	d007      	beq.n	80091cc <__pow5mult+0x20>
 80091bc:	4c25      	ldr	r4, [pc, #148]	; (8009254 <__pow5mult+0xa8>)
 80091be:	3a01      	subs	r2, #1
 80091c0:	2300      	movs	r3, #0
 80091c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091c6:	f7ff fe9b 	bl	8008f00 <__multadd>
 80091ca:	4607      	mov	r7, r0
 80091cc:	10ad      	asrs	r5, r5, #2
 80091ce:	d03d      	beq.n	800924c <__pow5mult+0xa0>
 80091d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091d2:	b97c      	cbnz	r4, 80091f4 <__pow5mult+0x48>
 80091d4:	2010      	movs	r0, #16
 80091d6:	f7fd fd33 	bl	8006c40 <malloc>
 80091da:	4602      	mov	r2, r0
 80091dc:	6270      	str	r0, [r6, #36]	; 0x24
 80091de:	b928      	cbnz	r0, 80091ec <__pow5mult+0x40>
 80091e0:	4b1d      	ldr	r3, [pc, #116]	; (8009258 <__pow5mult+0xac>)
 80091e2:	481e      	ldr	r0, [pc, #120]	; (800925c <__pow5mult+0xb0>)
 80091e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80091e8:	f000 fb62 	bl	80098b0 <__assert_func>
 80091ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091f0:	6004      	str	r4, [r0, #0]
 80091f2:	60c4      	str	r4, [r0, #12]
 80091f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091fc:	b94c      	cbnz	r4, 8009212 <__pow5mult+0x66>
 80091fe:	f240 2171 	movw	r1, #625	; 0x271
 8009202:	4630      	mov	r0, r6
 8009204:	f7ff ff12 	bl	800902c <__i2b>
 8009208:	2300      	movs	r3, #0
 800920a:	f8c8 0008 	str.w	r0, [r8, #8]
 800920e:	4604      	mov	r4, r0
 8009210:	6003      	str	r3, [r0, #0]
 8009212:	f04f 0900 	mov.w	r9, #0
 8009216:	07eb      	lsls	r3, r5, #31
 8009218:	d50a      	bpl.n	8009230 <__pow5mult+0x84>
 800921a:	4639      	mov	r1, r7
 800921c:	4622      	mov	r2, r4
 800921e:	4630      	mov	r0, r6
 8009220:	f7ff ff1a 	bl	8009058 <__multiply>
 8009224:	4639      	mov	r1, r7
 8009226:	4680      	mov	r8, r0
 8009228:	4630      	mov	r0, r6
 800922a:	f7ff fe47 	bl	8008ebc <_Bfree>
 800922e:	4647      	mov	r7, r8
 8009230:	106d      	asrs	r5, r5, #1
 8009232:	d00b      	beq.n	800924c <__pow5mult+0xa0>
 8009234:	6820      	ldr	r0, [r4, #0]
 8009236:	b938      	cbnz	r0, 8009248 <__pow5mult+0x9c>
 8009238:	4622      	mov	r2, r4
 800923a:	4621      	mov	r1, r4
 800923c:	4630      	mov	r0, r6
 800923e:	f7ff ff0b 	bl	8009058 <__multiply>
 8009242:	6020      	str	r0, [r4, #0]
 8009244:	f8c0 9000 	str.w	r9, [r0]
 8009248:	4604      	mov	r4, r0
 800924a:	e7e4      	b.n	8009216 <__pow5mult+0x6a>
 800924c:	4638      	mov	r0, r7
 800924e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009252:	bf00      	nop
 8009254:	0800a938 	.word	0x0800a938
 8009258:	0800a703 	.word	0x0800a703
 800925c:	0800a7e8 	.word	0x0800a7e8

08009260 <__lshift>:
 8009260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009264:	460c      	mov	r4, r1
 8009266:	6849      	ldr	r1, [r1, #4]
 8009268:	6923      	ldr	r3, [r4, #16]
 800926a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800926e:	68a3      	ldr	r3, [r4, #8]
 8009270:	4607      	mov	r7, r0
 8009272:	4691      	mov	r9, r2
 8009274:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009278:	f108 0601 	add.w	r6, r8, #1
 800927c:	42b3      	cmp	r3, r6
 800927e:	db0b      	blt.n	8009298 <__lshift+0x38>
 8009280:	4638      	mov	r0, r7
 8009282:	f7ff fddb 	bl	8008e3c <_Balloc>
 8009286:	4605      	mov	r5, r0
 8009288:	b948      	cbnz	r0, 800929e <__lshift+0x3e>
 800928a:	4602      	mov	r2, r0
 800928c:	4b2a      	ldr	r3, [pc, #168]	; (8009338 <__lshift+0xd8>)
 800928e:	482b      	ldr	r0, [pc, #172]	; (800933c <__lshift+0xdc>)
 8009290:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009294:	f000 fb0c 	bl	80098b0 <__assert_func>
 8009298:	3101      	adds	r1, #1
 800929a:	005b      	lsls	r3, r3, #1
 800929c:	e7ee      	b.n	800927c <__lshift+0x1c>
 800929e:	2300      	movs	r3, #0
 80092a0:	f100 0114 	add.w	r1, r0, #20
 80092a4:	f100 0210 	add.w	r2, r0, #16
 80092a8:	4618      	mov	r0, r3
 80092aa:	4553      	cmp	r3, sl
 80092ac:	db37      	blt.n	800931e <__lshift+0xbe>
 80092ae:	6920      	ldr	r0, [r4, #16]
 80092b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092b4:	f104 0314 	add.w	r3, r4, #20
 80092b8:	f019 091f 	ands.w	r9, r9, #31
 80092bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80092c4:	d02f      	beq.n	8009326 <__lshift+0xc6>
 80092c6:	f1c9 0e20 	rsb	lr, r9, #32
 80092ca:	468a      	mov	sl, r1
 80092cc:	f04f 0c00 	mov.w	ip, #0
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	fa02 f209 	lsl.w	r2, r2, r9
 80092d6:	ea42 020c 	orr.w	r2, r2, ip
 80092da:	f84a 2b04 	str.w	r2, [sl], #4
 80092de:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e2:	4298      	cmp	r0, r3
 80092e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80092e8:	d8f2      	bhi.n	80092d0 <__lshift+0x70>
 80092ea:	1b03      	subs	r3, r0, r4
 80092ec:	3b15      	subs	r3, #21
 80092ee:	f023 0303 	bic.w	r3, r3, #3
 80092f2:	3304      	adds	r3, #4
 80092f4:	f104 0215 	add.w	r2, r4, #21
 80092f8:	4290      	cmp	r0, r2
 80092fa:	bf38      	it	cc
 80092fc:	2304      	movcc	r3, #4
 80092fe:	f841 c003 	str.w	ip, [r1, r3]
 8009302:	f1bc 0f00 	cmp.w	ip, #0
 8009306:	d001      	beq.n	800930c <__lshift+0xac>
 8009308:	f108 0602 	add.w	r6, r8, #2
 800930c:	3e01      	subs	r6, #1
 800930e:	4638      	mov	r0, r7
 8009310:	612e      	str	r6, [r5, #16]
 8009312:	4621      	mov	r1, r4
 8009314:	f7ff fdd2 	bl	8008ebc <_Bfree>
 8009318:	4628      	mov	r0, r5
 800931a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800931e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009322:	3301      	adds	r3, #1
 8009324:	e7c1      	b.n	80092aa <__lshift+0x4a>
 8009326:	3904      	subs	r1, #4
 8009328:	f853 2b04 	ldr.w	r2, [r3], #4
 800932c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009330:	4298      	cmp	r0, r3
 8009332:	d8f9      	bhi.n	8009328 <__lshift+0xc8>
 8009334:	e7ea      	b.n	800930c <__lshift+0xac>
 8009336:	bf00      	nop
 8009338:	0800a775 	.word	0x0800a775
 800933c:	0800a7e8 	.word	0x0800a7e8

08009340 <__mcmp>:
 8009340:	b530      	push	{r4, r5, lr}
 8009342:	6902      	ldr	r2, [r0, #16]
 8009344:	690c      	ldr	r4, [r1, #16]
 8009346:	1b12      	subs	r2, r2, r4
 8009348:	d10e      	bne.n	8009368 <__mcmp+0x28>
 800934a:	f100 0314 	add.w	r3, r0, #20
 800934e:	3114      	adds	r1, #20
 8009350:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009354:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009358:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800935c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009360:	42a5      	cmp	r5, r4
 8009362:	d003      	beq.n	800936c <__mcmp+0x2c>
 8009364:	d305      	bcc.n	8009372 <__mcmp+0x32>
 8009366:	2201      	movs	r2, #1
 8009368:	4610      	mov	r0, r2
 800936a:	bd30      	pop	{r4, r5, pc}
 800936c:	4283      	cmp	r3, r0
 800936e:	d3f3      	bcc.n	8009358 <__mcmp+0x18>
 8009370:	e7fa      	b.n	8009368 <__mcmp+0x28>
 8009372:	f04f 32ff 	mov.w	r2, #4294967295
 8009376:	e7f7      	b.n	8009368 <__mcmp+0x28>

08009378 <__mdiff>:
 8009378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937c:	460c      	mov	r4, r1
 800937e:	4606      	mov	r6, r0
 8009380:	4611      	mov	r1, r2
 8009382:	4620      	mov	r0, r4
 8009384:	4690      	mov	r8, r2
 8009386:	f7ff ffdb 	bl	8009340 <__mcmp>
 800938a:	1e05      	subs	r5, r0, #0
 800938c:	d110      	bne.n	80093b0 <__mdiff+0x38>
 800938e:	4629      	mov	r1, r5
 8009390:	4630      	mov	r0, r6
 8009392:	f7ff fd53 	bl	8008e3c <_Balloc>
 8009396:	b930      	cbnz	r0, 80093a6 <__mdiff+0x2e>
 8009398:	4b3a      	ldr	r3, [pc, #232]	; (8009484 <__mdiff+0x10c>)
 800939a:	4602      	mov	r2, r0
 800939c:	f240 2132 	movw	r1, #562	; 0x232
 80093a0:	4839      	ldr	r0, [pc, #228]	; (8009488 <__mdiff+0x110>)
 80093a2:	f000 fa85 	bl	80098b0 <__assert_func>
 80093a6:	2301      	movs	r3, #1
 80093a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b0:	bfa4      	itt	ge
 80093b2:	4643      	movge	r3, r8
 80093b4:	46a0      	movge	r8, r4
 80093b6:	4630      	mov	r0, r6
 80093b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80093bc:	bfa6      	itte	ge
 80093be:	461c      	movge	r4, r3
 80093c0:	2500      	movge	r5, #0
 80093c2:	2501      	movlt	r5, #1
 80093c4:	f7ff fd3a 	bl	8008e3c <_Balloc>
 80093c8:	b920      	cbnz	r0, 80093d4 <__mdiff+0x5c>
 80093ca:	4b2e      	ldr	r3, [pc, #184]	; (8009484 <__mdiff+0x10c>)
 80093cc:	4602      	mov	r2, r0
 80093ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 80093d2:	e7e5      	b.n	80093a0 <__mdiff+0x28>
 80093d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80093d8:	6926      	ldr	r6, [r4, #16]
 80093da:	60c5      	str	r5, [r0, #12]
 80093dc:	f104 0914 	add.w	r9, r4, #20
 80093e0:	f108 0514 	add.w	r5, r8, #20
 80093e4:	f100 0e14 	add.w	lr, r0, #20
 80093e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80093ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80093f0:	f108 0210 	add.w	r2, r8, #16
 80093f4:	46f2      	mov	sl, lr
 80093f6:	2100      	movs	r1, #0
 80093f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80093fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009400:	fa1f f883 	uxth.w	r8, r3
 8009404:	fa11 f18b 	uxtah	r1, r1, fp
 8009408:	0c1b      	lsrs	r3, r3, #16
 800940a:	eba1 0808 	sub.w	r8, r1, r8
 800940e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009412:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009416:	fa1f f888 	uxth.w	r8, r8
 800941a:	1419      	asrs	r1, r3, #16
 800941c:	454e      	cmp	r6, r9
 800941e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009422:	f84a 3b04 	str.w	r3, [sl], #4
 8009426:	d8e7      	bhi.n	80093f8 <__mdiff+0x80>
 8009428:	1b33      	subs	r3, r6, r4
 800942a:	3b15      	subs	r3, #21
 800942c:	f023 0303 	bic.w	r3, r3, #3
 8009430:	3304      	adds	r3, #4
 8009432:	3415      	adds	r4, #21
 8009434:	42a6      	cmp	r6, r4
 8009436:	bf38      	it	cc
 8009438:	2304      	movcc	r3, #4
 800943a:	441d      	add	r5, r3
 800943c:	4473      	add	r3, lr
 800943e:	469e      	mov	lr, r3
 8009440:	462e      	mov	r6, r5
 8009442:	4566      	cmp	r6, ip
 8009444:	d30e      	bcc.n	8009464 <__mdiff+0xec>
 8009446:	f10c 0203 	add.w	r2, ip, #3
 800944a:	1b52      	subs	r2, r2, r5
 800944c:	f022 0203 	bic.w	r2, r2, #3
 8009450:	3d03      	subs	r5, #3
 8009452:	45ac      	cmp	ip, r5
 8009454:	bf38      	it	cc
 8009456:	2200      	movcc	r2, #0
 8009458:	441a      	add	r2, r3
 800945a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800945e:	b17b      	cbz	r3, 8009480 <__mdiff+0x108>
 8009460:	6107      	str	r7, [r0, #16]
 8009462:	e7a3      	b.n	80093ac <__mdiff+0x34>
 8009464:	f856 8b04 	ldr.w	r8, [r6], #4
 8009468:	fa11 f288 	uxtah	r2, r1, r8
 800946c:	1414      	asrs	r4, r2, #16
 800946e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009472:	b292      	uxth	r2, r2
 8009474:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009478:	f84e 2b04 	str.w	r2, [lr], #4
 800947c:	1421      	asrs	r1, r4, #16
 800947e:	e7e0      	b.n	8009442 <__mdiff+0xca>
 8009480:	3f01      	subs	r7, #1
 8009482:	e7ea      	b.n	800945a <__mdiff+0xe2>
 8009484:	0800a775 	.word	0x0800a775
 8009488:	0800a7e8 	.word	0x0800a7e8

0800948c <__d2b>:
 800948c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009490:	4689      	mov	r9, r1
 8009492:	2101      	movs	r1, #1
 8009494:	ec57 6b10 	vmov	r6, r7, d0
 8009498:	4690      	mov	r8, r2
 800949a:	f7ff fccf 	bl	8008e3c <_Balloc>
 800949e:	4604      	mov	r4, r0
 80094a0:	b930      	cbnz	r0, 80094b0 <__d2b+0x24>
 80094a2:	4602      	mov	r2, r0
 80094a4:	4b25      	ldr	r3, [pc, #148]	; (800953c <__d2b+0xb0>)
 80094a6:	4826      	ldr	r0, [pc, #152]	; (8009540 <__d2b+0xb4>)
 80094a8:	f240 310a 	movw	r1, #778	; 0x30a
 80094ac:	f000 fa00 	bl	80098b0 <__assert_func>
 80094b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80094b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094b8:	bb35      	cbnz	r5, 8009508 <__d2b+0x7c>
 80094ba:	2e00      	cmp	r6, #0
 80094bc:	9301      	str	r3, [sp, #4]
 80094be:	d028      	beq.n	8009512 <__d2b+0x86>
 80094c0:	4668      	mov	r0, sp
 80094c2:	9600      	str	r6, [sp, #0]
 80094c4:	f7ff fd82 	bl	8008fcc <__lo0bits>
 80094c8:	9900      	ldr	r1, [sp, #0]
 80094ca:	b300      	cbz	r0, 800950e <__d2b+0x82>
 80094cc:	9a01      	ldr	r2, [sp, #4]
 80094ce:	f1c0 0320 	rsb	r3, r0, #32
 80094d2:	fa02 f303 	lsl.w	r3, r2, r3
 80094d6:	430b      	orrs	r3, r1
 80094d8:	40c2      	lsrs	r2, r0
 80094da:	6163      	str	r3, [r4, #20]
 80094dc:	9201      	str	r2, [sp, #4]
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	61a3      	str	r3, [r4, #24]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	bf14      	ite	ne
 80094e6:	2202      	movne	r2, #2
 80094e8:	2201      	moveq	r2, #1
 80094ea:	6122      	str	r2, [r4, #16]
 80094ec:	b1d5      	cbz	r5, 8009524 <__d2b+0x98>
 80094ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80094f2:	4405      	add	r5, r0
 80094f4:	f8c9 5000 	str.w	r5, [r9]
 80094f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094fc:	f8c8 0000 	str.w	r0, [r8]
 8009500:	4620      	mov	r0, r4
 8009502:	b003      	add	sp, #12
 8009504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009508:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800950c:	e7d5      	b.n	80094ba <__d2b+0x2e>
 800950e:	6161      	str	r1, [r4, #20]
 8009510:	e7e5      	b.n	80094de <__d2b+0x52>
 8009512:	a801      	add	r0, sp, #4
 8009514:	f7ff fd5a 	bl	8008fcc <__lo0bits>
 8009518:	9b01      	ldr	r3, [sp, #4]
 800951a:	6163      	str	r3, [r4, #20]
 800951c:	2201      	movs	r2, #1
 800951e:	6122      	str	r2, [r4, #16]
 8009520:	3020      	adds	r0, #32
 8009522:	e7e3      	b.n	80094ec <__d2b+0x60>
 8009524:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009528:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800952c:	f8c9 0000 	str.w	r0, [r9]
 8009530:	6918      	ldr	r0, [r3, #16]
 8009532:	f7ff fd2b 	bl	8008f8c <__hi0bits>
 8009536:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800953a:	e7df      	b.n	80094fc <__d2b+0x70>
 800953c:	0800a775 	.word	0x0800a775
 8009540:	0800a7e8 	.word	0x0800a7e8

08009544 <_calloc_r>:
 8009544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009546:	fba1 2402 	umull	r2, r4, r1, r2
 800954a:	b94c      	cbnz	r4, 8009560 <_calloc_r+0x1c>
 800954c:	4611      	mov	r1, r2
 800954e:	9201      	str	r2, [sp, #4]
 8009550:	f7fd fbf2 	bl	8006d38 <_malloc_r>
 8009554:	9a01      	ldr	r2, [sp, #4]
 8009556:	4605      	mov	r5, r0
 8009558:	b930      	cbnz	r0, 8009568 <_calloc_r+0x24>
 800955a:	4628      	mov	r0, r5
 800955c:	b003      	add	sp, #12
 800955e:	bd30      	pop	{r4, r5, pc}
 8009560:	220c      	movs	r2, #12
 8009562:	6002      	str	r2, [r0, #0]
 8009564:	2500      	movs	r5, #0
 8009566:	e7f8      	b.n	800955a <_calloc_r+0x16>
 8009568:	4621      	mov	r1, r4
 800956a:	f7fd fb71 	bl	8006c50 <memset>
 800956e:	e7f4      	b.n	800955a <_calloc_r+0x16>

08009570 <__ssputs_r>:
 8009570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009574:	688e      	ldr	r6, [r1, #8]
 8009576:	429e      	cmp	r6, r3
 8009578:	4682      	mov	sl, r0
 800957a:	460c      	mov	r4, r1
 800957c:	4690      	mov	r8, r2
 800957e:	461f      	mov	r7, r3
 8009580:	d838      	bhi.n	80095f4 <__ssputs_r+0x84>
 8009582:	898a      	ldrh	r2, [r1, #12]
 8009584:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009588:	d032      	beq.n	80095f0 <__ssputs_r+0x80>
 800958a:	6825      	ldr	r5, [r4, #0]
 800958c:	6909      	ldr	r1, [r1, #16]
 800958e:	eba5 0901 	sub.w	r9, r5, r1
 8009592:	6965      	ldr	r5, [r4, #20]
 8009594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009598:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800959c:	3301      	adds	r3, #1
 800959e:	444b      	add	r3, r9
 80095a0:	106d      	asrs	r5, r5, #1
 80095a2:	429d      	cmp	r5, r3
 80095a4:	bf38      	it	cc
 80095a6:	461d      	movcc	r5, r3
 80095a8:	0553      	lsls	r3, r2, #21
 80095aa:	d531      	bpl.n	8009610 <__ssputs_r+0xa0>
 80095ac:	4629      	mov	r1, r5
 80095ae:	f7fd fbc3 	bl	8006d38 <_malloc_r>
 80095b2:	4606      	mov	r6, r0
 80095b4:	b950      	cbnz	r0, 80095cc <__ssputs_r+0x5c>
 80095b6:	230c      	movs	r3, #12
 80095b8:	f8ca 3000 	str.w	r3, [sl]
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095c2:	81a3      	strh	r3, [r4, #12]
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295
 80095c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095cc:	6921      	ldr	r1, [r4, #16]
 80095ce:	464a      	mov	r2, r9
 80095d0:	f7ff fc19 	bl	8008e06 <memcpy>
 80095d4:	89a3      	ldrh	r3, [r4, #12]
 80095d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095de:	81a3      	strh	r3, [r4, #12]
 80095e0:	6126      	str	r6, [r4, #16]
 80095e2:	6165      	str	r5, [r4, #20]
 80095e4:	444e      	add	r6, r9
 80095e6:	eba5 0509 	sub.w	r5, r5, r9
 80095ea:	6026      	str	r6, [r4, #0]
 80095ec:	60a5      	str	r5, [r4, #8]
 80095ee:	463e      	mov	r6, r7
 80095f0:	42be      	cmp	r6, r7
 80095f2:	d900      	bls.n	80095f6 <__ssputs_r+0x86>
 80095f4:	463e      	mov	r6, r7
 80095f6:	6820      	ldr	r0, [r4, #0]
 80095f8:	4632      	mov	r2, r6
 80095fa:	4641      	mov	r1, r8
 80095fc:	f000 f9bc 	bl	8009978 <memmove>
 8009600:	68a3      	ldr	r3, [r4, #8]
 8009602:	1b9b      	subs	r3, r3, r6
 8009604:	60a3      	str	r3, [r4, #8]
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	4433      	add	r3, r6
 800960a:	6023      	str	r3, [r4, #0]
 800960c:	2000      	movs	r0, #0
 800960e:	e7db      	b.n	80095c8 <__ssputs_r+0x58>
 8009610:	462a      	mov	r2, r5
 8009612:	f000 f9cb 	bl	80099ac <_realloc_r>
 8009616:	4606      	mov	r6, r0
 8009618:	2800      	cmp	r0, #0
 800961a:	d1e1      	bne.n	80095e0 <__ssputs_r+0x70>
 800961c:	6921      	ldr	r1, [r4, #16]
 800961e:	4650      	mov	r0, sl
 8009620:	f7fd fb1e 	bl	8006c60 <_free_r>
 8009624:	e7c7      	b.n	80095b6 <__ssputs_r+0x46>
	...

08009628 <_svfiprintf_r>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	4698      	mov	r8, r3
 800962e:	898b      	ldrh	r3, [r1, #12]
 8009630:	061b      	lsls	r3, r3, #24
 8009632:	b09d      	sub	sp, #116	; 0x74
 8009634:	4607      	mov	r7, r0
 8009636:	460d      	mov	r5, r1
 8009638:	4614      	mov	r4, r2
 800963a:	d50e      	bpl.n	800965a <_svfiprintf_r+0x32>
 800963c:	690b      	ldr	r3, [r1, #16]
 800963e:	b963      	cbnz	r3, 800965a <_svfiprintf_r+0x32>
 8009640:	2140      	movs	r1, #64	; 0x40
 8009642:	f7fd fb79 	bl	8006d38 <_malloc_r>
 8009646:	6028      	str	r0, [r5, #0]
 8009648:	6128      	str	r0, [r5, #16]
 800964a:	b920      	cbnz	r0, 8009656 <_svfiprintf_r+0x2e>
 800964c:	230c      	movs	r3, #12
 800964e:	603b      	str	r3, [r7, #0]
 8009650:	f04f 30ff 	mov.w	r0, #4294967295
 8009654:	e0d1      	b.n	80097fa <_svfiprintf_r+0x1d2>
 8009656:	2340      	movs	r3, #64	; 0x40
 8009658:	616b      	str	r3, [r5, #20]
 800965a:	2300      	movs	r3, #0
 800965c:	9309      	str	r3, [sp, #36]	; 0x24
 800965e:	2320      	movs	r3, #32
 8009660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009664:	f8cd 800c 	str.w	r8, [sp, #12]
 8009668:	2330      	movs	r3, #48	; 0x30
 800966a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009814 <_svfiprintf_r+0x1ec>
 800966e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009672:	f04f 0901 	mov.w	r9, #1
 8009676:	4623      	mov	r3, r4
 8009678:	469a      	mov	sl, r3
 800967a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800967e:	b10a      	cbz	r2, 8009684 <_svfiprintf_r+0x5c>
 8009680:	2a25      	cmp	r2, #37	; 0x25
 8009682:	d1f9      	bne.n	8009678 <_svfiprintf_r+0x50>
 8009684:	ebba 0b04 	subs.w	fp, sl, r4
 8009688:	d00b      	beq.n	80096a2 <_svfiprintf_r+0x7a>
 800968a:	465b      	mov	r3, fp
 800968c:	4622      	mov	r2, r4
 800968e:	4629      	mov	r1, r5
 8009690:	4638      	mov	r0, r7
 8009692:	f7ff ff6d 	bl	8009570 <__ssputs_r>
 8009696:	3001      	adds	r0, #1
 8009698:	f000 80aa 	beq.w	80097f0 <_svfiprintf_r+0x1c8>
 800969c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800969e:	445a      	add	r2, fp
 80096a0:	9209      	str	r2, [sp, #36]	; 0x24
 80096a2:	f89a 3000 	ldrb.w	r3, [sl]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 80a2 	beq.w	80097f0 <_svfiprintf_r+0x1c8>
 80096ac:	2300      	movs	r3, #0
 80096ae:	f04f 32ff 	mov.w	r2, #4294967295
 80096b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096b6:	f10a 0a01 	add.w	sl, sl, #1
 80096ba:	9304      	str	r3, [sp, #16]
 80096bc:	9307      	str	r3, [sp, #28]
 80096be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096c2:	931a      	str	r3, [sp, #104]	; 0x68
 80096c4:	4654      	mov	r4, sl
 80096c6:	2205      	movs	r2, #5
 80096c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096cc:	4851      	ldr	r0, [pc, #324]	; (8009814 <_svfiprintf_r+0x1ec>)
 80096ce:	f7f6 fd87 	bl	80001e0 <memchr>
 80096d2:	9a04      	ldr	r2, [sp, #16]
 80096d4:	b9d8      	cbnz	r0, 800970e <_svfiprintf_r+0xe6>
 80096d6:	06d0      	lsls	r0, r2, #27
 80096d8:	bf44      	itt	mi
 80096da:	2320      	movmi	r3, #32
 80096dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e0:	0711      	lsls	r1, r2, #28
 80096e2:	bf44      	itt	mi
 80096e4:	232b      	movmi	r3, #43	; 0x2b
 80096e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ea:	f89a 3000 	ldrb.w	r3, [sl]
 80096ee:	2b2a      	cmp	r3, #42	; 0x2a
 80096f0:	d015      	beq.n	800971e <_svfiprintf_r+0xf6>
 80096f2:	9a07      	ldr	r2, [sp, #28]
 80096f4:	4654      	mov	r4, sl
 80096f6:	2000      	movs	r0, #0
 80096f8:	f04f 0c0a 	mov.w	ip, #10
 80096fc:	4621      	mov	r1, r4
 80096fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009702:	3b30      	subs	r3, #48	; 0x30
 8009704:	2b09      	cmp	r3, #9
 8009706:	d94e      	bls.n	80097a6 <_svfiprintf_r+0x17e>
 8009708:	b1b0      	cbz	r0, 8009738 <_svfiprintf_r+0x110>
 800970a:	9207      	str	r2, [sp, #28]
 800970c:	e014      	b.n	8009738 <_svfiprintf_r+0x110>
 800970e:	eba0 0308 	sub.w	r3, r0, r8
 8009712:	fa09 f303 	lsl.w	r3, r9, r3
 8009716:	4313      	orrs	r3, r2
 8009718:	9304      	str	r3, [sp, #16]
 800971a:	46a2      	mov	sl, r4
 800971c:	e7d2      	b.n	80096c4 <_svfiprintf_r+0x9c>
 800971e:	9b03      	ldr	r3, [sp, #12]
 8009720:	1d19      	adds	r1, r3, #4
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	9103      	str	r1, [sp, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	bfbb      	ittet	lt
 800972a:	425b      	neglt	r3, r3
 800972c:	f042 0202 	orrlt.w	r2, r2, #2
 8009730:	9307      	strge	r3, [sp, #28]
 8009732:	9307      	strlt	r3, [sp, #28]
 8009734:	bfb8      	it	lt
 8009736:	9204      	strlt	r2, [sp, #16]
 8009738:	7823      	ldrb	r3, [r4, #0]
 800973a:	2b2e      	cmp	r3, #46	; 0x2e
 800973c:	d10c      	bne.n	8009758 <_svfiprintf_r+0x130>
 800973e:	7863      	ldrb	r3, [r4, #1]
 8009740:	2b2a      	cmp	r3, #42	; 0x2a
 8009742:	d135      	bne.n	80097b0 <_svfiprintf_r+0x188>
 8009744:	9b03      	ldr	r3, [sp, #12]
 8009746:	1d1a      	adds	r2, r3, #4
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	9203      	str	r2, [sp, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	bfb8      	it	lt
 8009750:	f04f 33ff 	movlt.w	r3, #4294967295
 8009754:	3402      	adds	r4, #2
 8009756:	9305      	str	r3, [sp, #20]
 8009758:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009824 <_svfiprintf_r+0x1fc>
 800975c:	7821      	ldrb	r1, [r4, #0]
 800975e:	2203      	movs	r2, #3
 8009760:	4650      	mov	r0, sl
 8009762:	f7f6 fd3d 	bl	80001e0 <memchr>
 8009766:	b140      	cbz	r0, 800977a <_svfiprintf_r+0x152>
 8009768:	2340      	movs	r3, #64	; 0x40
 800976a:	eba0 000a 	sub.w	r0, r0, sl
 800976e:	fa03 f000 	lsl.w	r0, r3, r0
 8009772:	9b04      	ldr	r3, [sp, #16]
 8009774:	4303      	orrs	r3, r0
 8009776:	3401      	adds	r4, #1
 8009778:	9304      	str	r3, [sp, #16]
 800977a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977e:	4826      	ldr	r0, [pc, #152]	; (8009818 <_svfiprintf_r+0x1f0>)
 8009780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009784:	2206      	movs	r2, #6
 8009786:	f7f6 fd2b 	bl	80001e0 <memchr>
 800978a:	2800      	cmp	r0, #0
 800978c:	d038      	beq.n	8009800 <_svfiprintf_r+0x1d8>
 800978e:	4b23      	ldr	r3, [pc, #140]	; (800981c <_svfiprintf_r+0x1f4>)
 8009790:	bb1b      	cbnz	r3, 80097da <_svfiprintf_r+0x1b2>
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	3307      	adds	r3, #7
 8009796:	f023 0307 	bic.w	r3, r3, #7
 800979a:	3308      	adds	r3, #8
 800979c:	9303      	str	r3, [sp, #12]
 800979e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a0:	4433      	add	r3, r6
 80097a2:	9309      	str	r3, [sp, #36]	; 0x24
 80097a4:	e767      	b.n	8009676 <_svfiprintf_r+0x4e>
 80097a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80097aa:	460c      	mov	r4, r1
 80097ac:	2001      	movs	r0, #1
 80097ae:	e7a5      	b.n	80096fc <_svfiprintf_r+0xd4>
 80097b0:	2300      	movs	r3, #0
 80097b2:	3401      	adds	r4, #1
 80097b4:	9305      	str	r3, [sp, #20]
 80097b6:	4619      	mov	r1, r3
 80097b8:	f04f 0c0a 	mov.w	ip, #10
 80097bc:	4620      	mov	r0, r4
 80097be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097c2:	3a30      	subs	r2, #48	; 0x30
 80097c4:	2a09      	cmp	r2, #9
 80097c6:	d903      	bls.n	80097d0 <_svfiprintf_r+0x1a8>
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0c5      	beq.n	8009758 <_svfiprintf_r+0x130>
 80097cc:	9105      	str	r1, [sp, #20]
 80097ce:	e7c3      	b.n	8009758 <_svfiprintf_r+0x130>
 80097d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80097d4:	4604      	mov	r4, r0
 80097d6:	2301      	movs	r3, #1
 80097d8:	e7f0      	b.n	80097bc <_svfiprintf_r+0x194>
 80097da:	ab03      	add	r3, sp, #12
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	462a      	mov	r2, r5
 80097e0:	4b0f      	ldr	r3, [pc, #60]	; (8009820 <_svfiprintf_r+0x1f8>)
 80097e2:	a904      	add	r1, sp, #16
 80097e4:	4638      	mov	r0, r7
 80097e6:	f7fd fbbb 	bl	8006f60 <_printf_float>
 80097ea:	1c42      	adds	r2, r0, #1
 80097ec:	4606      	mov	r6, r0
 80097ee:	d1d6      	bne.n	800979e <_svfiprintf_r+0x176>
 80097f0:	89ab      	ldrh	r3, [r5, #12]
 80097f2:	065b      	lsls	r3, r3, #25
 80097f4:	f53f af2c 	bmi.w	8009650 <_svfiprintf_r+0x28>
 80097f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097fa:	b01d      	add	sp, #116	; 0x74
 80097fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009800:	ab03      	add	r3, sp, #12
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	462a      	mov	r2, r5
 8009806:	4b06      	ldr	r3, [pc, #24]	; (8009820 <_svfiprintf_r+0x1f8>)
 8009808:	a904      	add	r1, sp, #16
 800980a:	4638      	mov	r0, r7
 800980c:	f7fd fe4c 	bl	80074a8 <_printf_i>
 8009810:	e7eb      	b.n	80097ea <_svfiprintf_r+0x1c2>
 8009812:	bf00      	nop
 8009814:	0800a944 	.word	0x0800a944
 8009818:	0800a94e 	.word	0x0800a94e
 800981c:	08006f61 	.word	0x08006f61
 8009820:	08009571 	.word	0x08009571
 8009824:	0800a94a 	.word	0x0800a94a

08009828 <__sread>:
 8009828:	b510      	push	{r4, lr}
 800982a:	460c      	mov	r4, r1
 800982c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009830:	f000 fa44 	bl	8009cbc <_read_r>
 8009834:	2800      	cmp	r0, #0
 8009836:	bfab      	itete	ge
 8009838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800983a:	89a3      	ldrhlt	r3, [r4, #12]
 800983c:	181b      	addge	r3, r3, r0
 800983e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009842:	bfac      	ite	ge
 8009844:	6563      	strge	r3, [r4, #84]	; 0x54
 8009846:	81a3      	strhlt	r3, [r4, #12]
 8009848:	bd10      	pop	{r4, pc}

0800984a <__swrite>:
 800984a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800984e:	461f      	mov	r7, r3
 8009850:	898b      	ldrh	r3, [r1, #12]
 8009852:	05db      	lsls	r3, r3, #23
 8009854:	4605      	mov	r5, r0
 8009856:	460c      	mov	r4, r1
 8009858:	4616      	mov	r6, r2
 800985a:	d505      	bpl.n	8009868 <__swrite+0x1e>
 800985c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009860:	2302      	movs	r3, #2
 8009862:	2200      	movs	r2, #0
 8009864:	f000 f864 	bl	8009930 <_lseek_r>
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800986e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009872:	81a3      	strh	r3, [r4, #12]
 8009874:	4632      	mov	r2, r6
 8009876:	463b      	mov	r3, r7
 8009878:	4628      	mov	r0, r5
 800987a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800987e:	f7fe ba37 	b.w	8007cf0 <_write_r>

08009882 <__sseek>:
 8009882:	b510      	push	{r4, lr}
 8009884:	460c      	mov	r4, r1
 8009886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800988a:	f000 f851 	bl	8009930 <_lseek_r>
 800988e:	1c43      	adds	r3, r0, #1
 8009890:	89a3      	ldrh	r3, [r4, #12]
 8009892:	bf15      	itete	ne
 8009894:	6560      	strne	r0, [r4, #84]	; 0x54
 8009896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800989a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800989e:	81a3      	strheq	r3, [r4, #12]
 80098a0:	bf18      	it	ne
 80098a2:	81a3      	strhne	r3, [r4, #12]
 80098a4:	bd10      	pop	{r4, pc}

080098a6 <__sclose>:
 80098a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098aa:	f000 b81f 	b.w	80098ec <_close_r>
	...

080098b0 <__assert_func>:
 80098b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098b2:	4614      	mov	r4, r2
 80098b4:	461a      	mov	r2, r3
 80098b6:	4b09      	ldr	r3, [pc, #36]	; (80098dc <__assert_func+0x2c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4605      	mov	r5, r0
 80098bc:	68d8      	ldr	r0, [r3, #12]
 80098be:	b14c      	cbz	r4, 80098d4 <__assert_func+0x24>
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <__assert_func+0x30>)
 80098c2:	9100      	str	r1, [sp, #0]
 80098c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098c8:	4906      	ldr	r1, [pc, #24]	; (80098e4 <__assert_func+0x34>)
 80098ca:	462b      	mov	r3, r5
 80098cc:	f000 f81e 	bl	800990c <fiprintf>
 80098d0:	f7fd f984 	bl	8006bdc <abort>
 80098d4:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <__assert_func+0x38>)
 80098d6:	461c      	mov	r4, r3
 80098d8:	e7f3      	b.n	80098c2 <__assert_func+0x12>
 80098da:	bf00      	nop
 80098dc:	2000002c 	.word	0x2000002c
 80098e0:	0800a955 	.word	0x0800a955
 80098e4:	0800a962 	.word	0x0800a962
 80098e8:	0800a990 	.word	0x0800a990

080098ec <_close_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	4d06      	ldr	r5, [pc, #24]	; (8009908 <_close_r+0x1c>)
 80098f0:	2300      	movs	r3, #0
 80098f2:	4604      	mov	r4, r0
 80098f4:	4608      	mov	r0, r1
 80098f6:	602b      	str	r3, [r5, #0]
 80098f8:	f7f7 ffb3 	bl	8001862 <_close>
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	d102      	bne.n	8009906 <_close_r+0x1a>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	b103      	cbz	r3, 8009906 <_close_r+0x1a>
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	bd38      	pop	{r3, r4, r5, pc}
 8009908:	20000490 	.word	0x20000490

0800990c <fiprintf>:
 800990c:	b40e      	push	{r1, r2, r3}
 800990e:	b503      	push	{r0, r1, lr}
 8009910:	4601      	mov	r1, r0
 8009912:	ab03      	add	r3, sp, #12
 8009914:	4805      	ldr	r0, [pc, #20]	; (800992c <fiprintf+0x20>)
 8009916:	f853 2b04 	ldr.w	r2, [r3], #4
 800991a:	6800      	ldr	r0, [r0, #0]
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	f000 f89d 	bl	8009a5c <_vfiprintf_r>
 8009922:	b002      	add	sp, #8
 8009924:	f85d eb04 	ldr.w	lr, [sp], #4
 8009928:	b003      	add	sp, #12
 800992a:	4770      	bx	lr
 800992c:	2000002c 	.word	0x2000002c

08009930 <_lseek_r>:
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	4d07      	ldr	r5, [pc, #28]	; (8009950 <_lseek_r+0x20>)
 8009934:	4604      	mov	r4, r0
 8009936:	4608      	mov	r0, r1
 8009938:	4611      	mov	r1, r2
 800993a:	2200      	movs	r2, #0
 800993c:	602a      	str	r2, [r5, #0]
 800993e:	461a      	mov	r2, r3
 8009940:	f7f7 ffb6 	bl	80018b0 <_lseek>
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d102      	bne.n	800994e <_lseek_r+0x1e>
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	b103      	cbz	r3, 800994e <_lseek_r+0x1e>
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	20000490 	.word	0x20000490

08009954 <__ascii_mbtowc>:
 8009954:	b082      	sub	sp, #8
 8009956:	b901      	cbnz	r1, 800995a <__ascii_mbtowc+0x6>
 8009958:	a901      	add	r1, sp, #4
 800995a:	b142      	cbz	r2, 800996e <__ascii_mbtowc+0x1a>
 800995c:	b14b      	cbz	r3, 8009972 <__ascii_mbtowc+0x1e>
 800995e:	7813      	ldrb	r3, [r2, #0]
 8009960:	600b      	str	r3, [r1, #0]
 8009962:	7812      	ldrb	r2, [r2, #0]
 8009964:	1e10      	subs	r0, r2, #0
 8009966:	bf18      	it	ne
 8009968:	2001      	movne	r0, #1
 800996a:	b002      	add	sp, #8
 800996c:	4770      	bx	lr
 800996e:	4610      	mov	r0, r2
 8009970:	e7fb      	b.n	800996a <__ascii_mbtowc+0x16>
 8009972:	f06f 0001 	mvn.w	r0, #1
 8009976:	e7f8      	b.n	800996a <__ascii_mbtowc+0x16>

08009978 <memmove>:
 8009978:	4288      	cmp	r0, r1
 800997a:	b510      	push	{r4, lr}
 800997c:	eb01 0402 	add.w	r4, r1, r2
 8009980:	d902      	bls.n	8009988 <memmove+0x10>
 8009982:	4284      	cmp	r4, r0
 8009984:	4623      	mov	r3, r4
 8009986:	d807      	bhi.n	8009998 <memmove+0x20>
 8009988:	1e43      	subs	r3, r0, #1
 800998a:	42a1      	cmp	r1, r4
 800998c:	d008      	beq.n	80099a0 <memmove+0x28>
 800998e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009992:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009996:	e7f8      	b.n	800998a <memmove+0x12>
 8009998:	4402      	add	r2, r0
 800999a:	4601      	mov	r1, r0
 800999c:	428a      	cmp	r2, r1
 800999e:	d100      	bne.n	80099a2 <memmove+0x2a>
 80099a0:	bd10      	pop	{r4, pc}
 80099a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099aa:	e7f7      	b.n	800999c <memmove+0x24>

080099ac <_realloc_r>:
 80099ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b0:	4680      	mov	r8, r0
 80099b2:	4614      	mov	r4, r2
 80099b4:	460e      	mov	r6, r1
 80099b6:	b921      	cbnz	r1, 80099c2 <_realloc_r+0x16>
 80099b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099bc:	4611      	mov	r1, r2
 80099be:	f7fd b9bb 	b.w	8006d38 <_malloc_r>
 80099c2:	b92a      	cbnz	r2, 80099d0 <_realloc_r+0x24>
 80099c4:	f7fd f94c 	bl	8006c60 <_free_r>
 80099c8:	4625      	mov	r5, r4
 80099ca:	4628      	mov	r0, r5
 80099cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d0:	f000 faba 	bl	8009f48 <_malloc_usable_size_r>
 80099d4:	4284      	cmp	r4, r0
 80099d6:	4607      	mov	r7, r0
 80099d8:	d802      	bhi.n	80099e0 <_realloc_r+0x34>
 80099da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099de:	d812      	bhi.n	8009a06 <_realloc_r+0x5a>
 80099e0:	4621      	mov	r1, r4
 80099e2:	4640      	mov	r0, r8
 80099e4:	f7fd f9a8 	bl	8006d38 <_malloc_r>
 80099e8:	4605      	mov	r5, r0
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d0ed      	beq.n	80099ca <_realloc_r+0x1e>
 80099ee:	42bc      	cmp	r4, r7
 80099f0:	4622      	mov	r2, r4
 80099f2:	4631      	mov	r1, r6
 80099f4:	bf28      	it	cs
 80099f6:	463a      	movcs	r2, r7
 80099f8:	f7ff fa05 	bl	8008e06 <memcpy>
 80099fc:	4631      	mov	r1, r6
 80099fe:	4640      	mov	r0, r8
 8009a00:	f7fd f92e 	bl	8006c60 <_free_r>
 8009a04:	e7e1      	b.n	80099ca <_realloc_r+0x1e>
 8009a06:	4635      	mov	r5, r6
 8009a08:	e7df      	b.n	80099ca <_realloc_r+0x1e>

08009a0a <__sfputc_r>:
 8009a0a:	6893      	ldr	r3, [r2, #8]
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	b410      	push	{r4}
 8009a12:	6093      	str	r3, [r2, #8]
 8009a14:	da08      	bge.n	8009a28 <__sfputc_r+0x1e>
 8009a16:	6994      	ldr	r4, [r2, #24]
 8009a18:	42a3      	cmp	r3, r4
 8009a1a:	db01      	blt.n	8009a20 <__sfputc_r+0x16>
 8009a1c:	290a      	cmp	r1, #10
 8009a1e:	d103      	bne.n	8009a28 <__sfputc_r+0x1e>
 8009a20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a24:	f000 b95c 	b.w	8009ce0 <__swbuf_r>
 8009a28:	6813      	ldr	r3, [r2, #0]
 8009a2a:	1c58      	adds	r0, r3, #1
 8009a2c:	6010      	str	r0, [r2, #0]
 8009a2e:	7019      	strb	r1, [r3, #0]
 8009a30:	4608      	mov	r0, r1
 8009a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <__sfputs_r>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	460f      	mov	r7, r1
 8009a3e:	4614      	mov	r4, r2
 8009a40:	18d5      	adds	r5, r2, r3
 8009a42:	42ac      	cmp	r4, r5
 8009a44:	d101      	bne.n	8009a4a <__sfputs_r+0x12>
 8009a46:	2000      	movs	r0, #0
 8009a48:	e007      	b.n	8009a5a <__sfputs_r+0x22>
 8009a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4e:	463a      	mov	r2, r7
 8009a50:	4630      	mov	r0, r6
 8009a52:	f7ff ffda 	bl	8009a0a <__sfputc_r>
 8009a56:	1c43      	adds	r3, r0, #1
 8009a58:	d1f3      	bne.n	8009a42 <__sfputs_r+0xa>
 8009a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a5c <_vfiprintf_r>:
 8009a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a60:	460d      	mov	r5, r1
 8009a62:	b09d      	sub	sp, #116	; 0x74
 8009a64:	4614      	mov	r4, r2
 8009a66:	4698      	mov	r8, r3
 8009a68:	4606      	mov	r6, r0
 8009a6a:	b118      	cbz	r0, 8009a74 <_vfiprintf_r+0x18>
 8009a6c:	6983      	ldr	r3, [r0, #24]
 8009a6e:	b90b      	cbnz	r3, 8009a74 <_vfiprintf_r+0x18>
 8009a70:	f7ff f924 	bl	8008cbc <__sinit>
 8009a74:	4b89      	ldr	r3, [pc, #548]	; (8009c9c <_vfiprintf_r+0x240>)
 8009a76:	429d      	cmp	r5, r3
 8009a78:	d11b      	bne.n	8009ab2 <_vfiprintf_r+0x56>
 8009a7a:	6875      	ldr	r5, [r6, #4]
 8009a7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a7e:	07d9      	lsls	r1, r3, #31
 8009a80:	d405      	bmi.n	8009a8e <_vfiprintf_r+0x32>
 8009a82:	89ab      	ldrh	r3, [r5, #12]
 8009a84:	059a      	lsls	r2, r3, #22
 8009a86:	d402      	bmi.n	8009a8e <_vfiprintf_r+0x32>
 8009a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a8a:	f7ff f9ba 	bl	8008e02 <__retarget_lock_acquire_recursive>
 8009a8e:	89ab      	ldrh	r3, [r5, #12]
 8009a90:	071b      	lsls	r3, r3, #28
 8009a92:	d501      	bpl.n	8009a98 <_vfiprintf_r+0x3c>
 8009a94:	692b      	ldr	r3, [r5, #16]
 8009a96:	b9eb      	cbnz	r3, 8009ad4 <_vfiprintf_r+0x78>
 8009a98:	4629      	mov	r1, r5
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f000 f980 	bl	8009da0 <__swsetup_r>
 8009aa0:	b1c0      	cbz	r0, 8009ad4 <_vfiprintf_r+0x78>
 8009aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aa4:	07dc      	lsls	r4, r3, #31
 8009aa6:	d50e      	bpl.n	8009ac6 <_vfiprintf_r+0x6a>
 8009aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aac:	b01d      	add	sp, #116	; 0x74
 8009aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab2:	4b7b      	ldr	r3, [pc, #492]	; (8009ca0 <_vfiprintf_r+0x244>)
 8009ab4:	429d      	cmp	r5, r3
 8009ab6:	d101      	bne.n	8009abc <_vfiprintf_r+0x60>
 8009ab8:	68b5      	ldr	r5, [r6, #8]
 8009aba:	e7df      	b.n	8009a7c <_vfiprintf_r+0x20>
 8009abc:	4b79      	ldr	r3, [pc, #484]	; (8009ca4 <_vfiprintf_r+0x248>)
 8009abe:	429d      	cmp	r5, r3
 8009ac0:	bf08      	it	eq
 8009ac2:	68f5      	ldreq	r5, [r6, #12]
 8009ac4:	e7da      	b.n	8009a7c <_vfiprintf_r+0x20>
 8009ac6:	89ab      	ldrh	r3, [r5, #12]
 8009ac8:	0598      	lsls	r0, r3, #22
 8009aca:	d4ed      	bmi.n	8009aa8 <_vfiprintf_r+0x4c>
 8009acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ace:	f7ff f999 	bl	8008e04 <__retarget_lock_release_recursive>
 8009ad2:	e7e9      	b.n	8009aa8 <_vfiprintf_r+0x4c>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad8:	2320      	movs	r3, #32
 8009ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ade:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ae2:	2330      	movs	r3, #48	; 0x30
 8009ae4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ca8 <_vfiprintf_r+0x24c>
 8009ae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aec:	f04f 0901 	mov.w	r9, #1
 8009af0:	4623      	mov	r3, r4
 8009af2:	469a      	mov	sl, r3
 8009af4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009af8:	b10a      	cbz	r2, 8009afe <_vfiprintf_r+0xa2>
 8009afa:	2a25      	cmp	r2, #37	; 0x25
 8009afc:	d1f9      	bne.n	8009af2 <_vfiprintf_r+0x96>
 8009afe:	ebba 0b04 	subs.w	fp, sl, r4
 8009b02:	d00b      	beq.n	8009b1c <_vfiprintf_r+0xc0>
 8009b04:	465b      	mov	r3, fp
 8009b06:	4622      	mov	r2, r4
 8009b08:	4629      	mov	r1, r5
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f7ff ff94 	bl	8009a38 <__sfputs_r>
 8009b10:	3001      	adds	r0, #1
 8009b12:	f000 80aa 	beq.w	8009c6a <_vfiprintf_r+0x20e>
 8009b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b18:	445a      	add	r2, fp
 8009b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 80a2 	beq.w	8009c6a <_vfiprintf_r+0x20e>
 8009b26:	2300      	movs	r3, #0
 8009b28:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b30:	f10a 0a01 	add.w	sl, sl, #1
 8009b34:	9304      	str	r3, [sp, #16]
 8009b36:	9307      	str	r3, [sp, #28]
 8009b38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b3c:	931a      	str	r3, [sp, #104]	; 0x68
 8009b3e:	4654      	mov	r4, sl
 8009b40:	2205      	movs	r2, #5
 8009b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b46:	4858      	ldr	r0, [pc, #352]	; (8009ca8 <_vfiprintf_r+0x24c>)
 8009b48:	f7f6 fb4a 	bl	80001e0 <memchr>
 8009b4c:	9a04      	ldr	r2, [sp, #16]
 8009b4e:	b9d8      	cbnz	r0, 8009b88 <_vfiprintf_r+0x12c>
 8009b50:	06d1      	lsls	r1, r2, #27
 8009b52:	bf44      	itt	mi
 8009b54:	2320      	movmi	r3, #32
 8009b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b5a:	0713      	lsls	r3, r2, #28
 8009b5c:	bf44      	itt	mi
 8009b5e:	232b      	movmi	r3, #43	; 0x2b
 8009b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b64:	f89a 3000 	ldrb.w	r3, [sl]
 8009b68:	2b2a      	cmp	r3, #42	; 0x2a
 8009b6a:	d015      	beq.n	8009b98 <_vfiprintf_r+0x13c>
 8009b6c:	9a07      	ldr	r2, [sp, #28]
 8009b6e:	4654      	mov	r4, sl
 8009b70:	2000      	movs	r0, #0
 8009b72:	f04f 0c0a 	mov.w	ip, #10
 8009b76:	4621      	mov	r1, r4
 8009b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b7c:	3b30      	subs	r3, #48	; 0x30
 8009b7e:	2b09      	cmp	r3, #9
 8009b80:	d94e      	bls.n	8009c20 <_vfiprintf_r+0x1c4>
 8009b82:	b1b0      	cbz	r0, 8009bb2 <_vfiprintf_r+0x156>
 8009b84:	9207      	str	r2, [sp, #28]
 8009b86:	e014      	b.n	8009bb2 <_vfiprintf_r+0x156>
 8009b88:	eba0 0308 	sub.w	r3, r0, r8
 8009b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8009b90:	4313      	orrs	r3, r2
 8009b92:	9304      	str	r3, [sp, #16]
 8009b94:	46a2      	mov	sl, r4
 8009b96:	e7d2      	b.n	8009b3e <_vfiprintf_r+0xe2>
 8009b98:	9b03      	ldr	r3, [sp, #12]
 8009b9a:	1d19      	adds	r1, r3, #4
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	9103      	str	r1, [sp, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	bfbb      	ittet	lt
 8009ba4:	425b      	neglt	r3, r3
 8009ba6:	f042 0202 	orrlt.w	r2, r2, #2
 8009baa:	9307      	strge	r3, [sp, #28]
 8009bac:	9307      	strlt	r3, [sp, #28]
 8009bae:	bfb8      	it	lt
 8009bb0:	9204      	strlt	r2, [sp, #16]
 8009bb2:	7823      	ldrb	r3, [r4, #0]
 8009bb4:	2b2e      	cmp	r3, #46	; 0x2e
 8009bb6:	d10c      	bne.n	8009bd2 <_vfiprintf_r+0x176>
 8009bb8:	7863      	ldrb	r3, [r4, #1]
 8009bba:	2b2a      	cmp	r3, #42	; 0x2a
 8009bbc:	d135      	bne.n	8009c2a <_vfiprintf_r+0x1ce>
 8009bbe:	9b03      	ldr	r3, [sp, #12]
 8009bc0:	1d1a      	adds	r2, r3, #4
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	9203      	str	r2, [sp, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	bfb8      	it	lt
 8009bca:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bce:	3402      	adds	r4, #2
 8009bd0:	9305      	str	r3, [sp, #20]
 8009bd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009cb8 <_vfiprintf_r+0x25c>
 8009bd6:	7821      	ldrb	r1, [r4, #0]
 8009bd8:	2203      	movs	r2, #3
 8009bda:	4650      	mov	r0, sl
 8009bdc:	f7f6 fb00 	bl	80001e0 <memchr>
 8009be0:	b140      	cbz	r0, 8009bf4 <_vfiprintf_r+0x198>
 8009be2:	2340      	movs	r3, #64	; 0x40
 8009be4:	eba0 000a 	sub.w	r0, r0, sl
 8009be8:	fa03 f000 	lsl.w	r0, r3, r0
 8009bec:	9b04      	ldr	r3, [sp, #16]
 8009bee:	4303      	orrs	r3, r0
 8009bf0:	3401      	adds	r4, #1
 8009bf2:	9304      	str	r3, [sp, #16]
 8009bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf8:	482c      	ldr	r0, [pc, #176]	; (8009cac <_vfiprintf_r+0x250>)
 8009bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bfe:	2206      	movs	r2, #6
 8009c00:	f7f6 faee 	bl	80001e0 <memchr>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d03f      	beq.n	8009c88 <_vfiprintf_r+0x22c>
 8009c08:	4b29      	ldr	r3, [pc, #164]	; (8009cb0 <_vfiprintf_r+0x254>)
 8009c0a:	bb1b      	cbnz	r3, 8009c54 <_vfiprintf_r+0x1f8>
 8009c0c:	9b03      	ldr	r3, [sp, #12]
 8009c0e:	3307      	adds	r3, #7
 8009c10:	f023 0307 	bic.w	r3, r3, #7
 8009c14:	3308      	adds	r3, #8
 8009c16:	9303      	str	r3, [sp, #12]
 8009c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c1a:	443b      	add	r3, r7
 8009c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c1e:	e767      	b.n	8009af0 <_vfiprintf_r+0x94>
 8009c20:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c24:	460c      	mov	r4, r1
 8009c26:	2001      	movs	r0, #1
 8009c28:	e7a5      	b.n	8009b76 <_vfiprintf_r+0x11a>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	3401      	adds	r4, #1
 8009c2e:	9305      	str	r3, [sp, #20]
 8009c30:	4619      	mov	r1, r3
 8009c32:	f04f 0c0a 	mov.w	ip, #10
 8009c36:	4620      	mov	r0, r4
 8009c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c3c:	3a30      	subs	r2, #48	; 0x30
 8009c3e:	2a09      	cmp	r2, #9
 8009c40:	d903      	bls.n	8009c4a <_vfiprintf_r+0x1ee>
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0c5      	beq.n	8009bd2 <_vfiprintf_r+0x176>
 8009c46:	9105      	str	r1, [sp, #20]
 8009c48:	e7c3      	b.n	8009bd2 <_vfiprintf_r+0x176>
 8009c4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c4e:	4604      	mov	r4, r0
 8009c50:	2301      	movs	r3, #1
 8009c52:	e7f0      	b.n	8009c36 <_vfiprintf_r+0x1da>
 8009c54:	ab03      	add	r3, sp, #12
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	462a      	mov	r2, r5
 8009c5a:	4b16      	ldr	r3, [pc, #88]	; (8009cb4 <_vfiprintf_r+0x258>)
 8009c5c:	a904      	add	r1, sp, #16
 8009c5e:	4630      	mov	r0, r6
 8009c60:	f7fd f97e 	bl	8006f60 <_printf_float>
 8009c64:	4607      	mov	r7, r0
 8009c66:	1c78      	adds	r0, r7, #1
 8009c68:	d1d6      	bne.n	8009c18 <_vfiprintf_r+0x1bc>
 8009c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c6c:	07d9      	lsls	r1, r3, #31
 8009c6e:	d405      	bmi.n	8009c7c <_vfiprintf_r+0x220>
 8009c70:	89ab      	ldrh	r3, [r5, #12]
 8009c72:	059a      	lsls	r2, r3, #22
 8009c74:	d402      	bmi.n	8009c7c <_vfiprintf_r+0x220>
 8009c76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c78:	f7ff f8c4 	bl	8008e04 <__retarget_lock_release_recursive>
 8009c7c:	89ab      	ldrh	r3, [r5, #12]
 8009c7e:	065b      	lsls	r3, r3, #25
 8009c80:	f53f af12 	bmi.w	8009aa8 <_vfiprintf_r+0x4c>
 8009c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c86:	e711      	b.n	8009aac <_vfiprintf_r+0x50>
 8009c88:	ab03      	add	r3, sp, #12
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	462a      	mov	r2, r5
 8009c8e:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <_vfiprintf_r+0x258>)
 8009c90:	a904      	add	r1, sp, #16
 8009c92:	4630      	mov	r0, r6
 8009c94:	f7fd fc08 	bl	80074a8 <_printf_i>
 8009c98:	e7e4      	b.n	8009c64 <_vfiprintf_r+0x208>
 8009c9a:	bf00      	nop
 8009c9c:	0800a7a8 	.word	0x0800a7a8
 8009ca0:	0800a7c8 	.word	0x0800a7c8
 8009ca4:	0800a788 	.word	0x0800a788
 8009ca8:	0800a944 	.word	0x0800a944
 8009cac:	0800a94e 	.word	0x0800a94e
 8009cb0:	08006f61 	.word	0x08006f61
 8009cb4:	08009a39 	.word	0x08009a39
 8009cb8:	0800a94a 	.word	0x0800a94a

08009cbc <_read_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4d07      	ldr	r5, [pc, #28]	; (8009cdc <_read_r+0x20>)
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	4608      	mov	r0, r1
 8009cc4:	4611      	mov	r1, r2
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	602a      	str	r2, [r5, #0]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f7f7 fd90 	bl	80017f0 <_read>
 8009cd0:	1c43      	adds	r3, r0, #1
 8009cd2:	d102      	bne.n	8009cda <_read_r+0x1e>
 8009cd4:	682b      	ldr	r3, [r5, #0]
 8009cd6:	b103      	cbz	r3, 8009cda <_read_r+0x1e>
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	20000490 	.word	0x20000490

08009ce0 <__swbuf_r>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	460e      	mov	r6, r1
 8009ce4:	4614      	mov	r4, r2
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	b118      	cbz	r0, 8009cf2 <__swbuf_r+0x12>
 8009cea:	6983      	ldr	r3, [r0, #24]
 8009cec:	b90b      	cbnz	r3, 8009cf2 <__swbuf_r+0x12>
 8009cee:	f7fe ffe5 	bl	8008cbc <__sinit>
 8009cf2:	4b21      	ldr	r3, [pc, #132]	; (8009d78 <__swbuf_r+0x98>)
 8009cf4:	429c      	cmp	r4, r3
 8009cf6:	d12b      	bne.n	8009d50 <__swbuf_r+0x70>
 8009cf8:	686c      	ldr	r4, [r5, #4]
 8009cfa:	69a3      	ldr	r3, [r4, #24]
 8009cfc:	60a3      	str	r3, [r4, #8]
 8009cfe:	89a3      	ldrh	r3, [r4, #12]
 8009d00:	071a      	lsls	r2, r3, #28
 8009d02:	d52f      	bpl.n	8009d64 <__swbuf_r+0x84>
 8009d04:	6923      	ldr	r3, [r4, #16]
 8009d06:	b36b      	cbz	r3, 8009d64 <__swbuf_r+0x84>
 8009d08:	6923      	ldr	r3, [r4, #16]
 8009d0a:	6820      	ldr	r0, [r4, #0]
 8009d0c:	1ac0      	subs	r0, r0, r3
 8009d0e:	6963      	ldr	r3, [r4, #20]
 8009d10:	b2f6      	uxtb	r6, r6
 8009d12:	4283      	cmp	r3, r0
 8009d14:	4637      	mov	r7, r6
 8009d16:	dc04      	bgt.n	8009d22 <__swbuf_r+0x42>
 8009d18:	4621      	mov	r1, r4
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	f7fe fefc 	bl	8008b18 <_fflush_r>
 8009d20:	bb30      	cbnz	r0, 8009d70 <__swbuf_r+0x90>
 8009d22:	68a3      	ldr	r3, [r4, #8]
 8009d24:	3b01      	subs	r3, #1
 8009d26:	60a3      	str	r3, [r4, #8]
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	1c5a      	adds	r2, r3, #1
 8009d2c:	6022      	str	r2, [r4, #0]
 8009d2e:	701e      	strb	r6, [r3, #0]
 8009d30:	6963      	ldr	r3, [r4, #20]
 8009d32:	3001      	adds	r0, #1
 8009d34:	4283      	cmp	r3, r0
 8009d36:	d004      	beq.n	8009d42 <__swbuf_r+0x62>
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	07db      	lsls	r3, r3, #31
 8009d3c:	d506      	bpl.n	8009d4c <__swbuf_r+0x6c>
 8009d3e:	2e0a      	cmp	r6, #10
 8009d40:	d104      	bne.n	8009d4c <__swbuf_r+0x6c>
 8009d42:	4621      	mov	r1, r4
 8009d44:	4628      	mov	r0, r5
 8009d46:	f7fe fee7 	bl	8008b18 <_fflush_r>
 8009d4a:	b988      	cbnz	r0, 8009d70 <__swbuf_r+0x90>
 8009d4c:	4638      	mov	r0, r7
 8009d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d50:	4b0a      	ldr	r3, [pc, #40]	; (8009d7c <__swbuf_r+0x9c>)
 8009d52:	429c      	cmp	r4, r3
 8009d54:	d101      	bne.n	8009d5a <__swbuf_r+0x7a>
 8009d56:	68ac      	ldr	r4, [r5, #8]
 8009d58:	e7cf      	b.n	8009cfa <__swbuf_r+0x1a>
 8009d5a:	4b09      	ldr	r3, [pc, #36]	; (8009d80 <__swbuf_r+0xa0>)
 8009d5c:	429c      	cmp	r4, r3
 8009d5e:	bf08      	it	eq
 8009d60:	68ec      	ldreq	r4, [r5, #12]
 8009d62:	e7ca      	b.n	8009cfa <__swbuf_r+0x1a>
 8009d64:	4621      	mov	r1, r4
 8009d66:	4628      	mov	r0, r5
 8009d68:	f000 f81a 	bl	8009da0 <__swsetup_r>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d0cb      	beq.n	8009d08 <__swbuf_r+0x28>
 8009d70:	f04f 37ff 	mov.w	r7, #4294967295
 8009d74:	e7ea      	b.n	8009d4c <__swbuf_r+0x6c>
 8009d76:	bf00      	nop
 8009d78:	0800a7a8 	.word	0x0800a7a8
 8009d7c:	0800a7c8 	.word	0x0800a7c8
 8009d80:	0800a788 	.word	0x0800a788

08009d84 <__ascii_wctomb>:
 8009d84:	b149      	cbz	r1, 8009d9a <__ascii_wctomb+0x16>
 8009d86:	2aff      	cmp	r2, #255	; 0xff
 8009d88:	bf85      	ittet	hi
 8009d8a:	238a      	movhi	r3, #138	; 0x8a
 8009d8c:	6003      	strhi	r3, [r0, #0]
 8009d8e:	700a      	strbls	r2, [r1, #0]
 8009d90:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d94:	bf98      	it	ls
 8009d96:	2001      	movls	r0, #1
 8009d98:	4770      	bx	lr
 8009d9a:	4608      	mov	r0, r1
 8009d9c:	4770      	bx	lr
	...

08009da0 <__swsetup_r>:
 8009da0:	4b32      	ldr	r3, [pc, #200]	; (8009e6c <__swsetup_r+0xcc>)
 8009da2:	b570      	push	{r4, r5, r6, lr}
 8009da4:	681d      	ldr	r5, [r3, #0]
 8009da6:	4606      	mov	r6, r0
 8009da8:	460c      	mov	r4, r1
 8009daa:	b125      	cbz	r5, 8009db6 <__swsetup_r+0x16>
 8009dac:	69ab      	ldr	r3, [r5, #24]
 8009dae:	b913      	cbnz	r3, 8009db6 <__swsetup_r+0x16>
 8009db0:	4628      	mov	r0, r5
 8009db2:	f7fe ff83 	bl	8008cbc <__sinit>
 8009db6:	4b2e      	ldr	r3, [pc, #184]	; (8009e70 <__swsetup_r+0xd0>)
 8009db8:	429c      	cmp	r4, r3
 8009dba:	d10f      	bne.n	8009ddc <__swsetup_r+0x3c>
 8009dbc:	686c      	ldr	r4, [r5, #4]
 8009dbe:	89a3      	ldrh	r3, [r4, #12]
 8009dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dc4:	0719      	lsls	r1, r3, #28
 8009dc6:	d42c      	bmi.n	8009e22 <__swsetup_r+0x82>
 8009dc8:	06dd      	lsls	r5, r3, #27
 8009dca:	d411      	bmi.n	8009df0 <__swsetup_r+0x50>
 8009dcc:	2309      	movs	r3, #9
 8009dce:	6033      	str	r3, [r6, #0]
 8009dd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dd4:	81a3      	strh	r3, [r4, #12]
 8009dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dda:	e03e      	b.n	8009e5a <__swsetup_r+0xba>
 8009ddc:	4b25      	ldr	r3, [pc, #148]	; (8009e74 <__swsetup_r+0xd4>)
 8009dde:	429c      	cmp	r4, r3
 8009de0:	d101      	bne.n	8009de6 <__swsetup_r+0x46>
 8009de2:	68ac      	ldr	r4, [r5, #8]
 8009de4:	e7eb      	b.n	8009dbe <__swsetup_r+0x1e>
 8009de6:	4b24      	ldr	r3, [pc, #144]	; (8009e78 <__swsetup_r+0xd8>)
 8009de8:	429c      	cmp	r4, r3
 8009dea:	bf08      	it	eq
 8009dec:	68ec      	ldreq	r4, [r5, #12]
 8009dee:	e7e6      	b.n	8009dbe <__swsetup_r+0x1e>
 8009df0:	0758      	lsls	r0, r3, #29
 8009df2:	d512      	bpl.n	8009e1a <__swsetup_r+0x7a>
 8009df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009df6:	b141      	cbz	r1, 8009e0a <__swsetup_r+0x6a>
 8009df8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dfc:	4299      	cmp	r1, r3
 8009dfe:	d002      	beq.n	8009e06 <__swsetup_r+0x66>
 8009e00:	4630      	mov	r0, r6
 8009e02:	f7fc ff2d 	bl	8006c60 <_free_r>
 8009e06:	2300      	movs	r3, #0
 8009e08:	6363      	str	r3, [r4, #52]	; 0x34
 8009e0a:	89a3      	ldrh	r3, [r4, #12]
 8009e0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e10:	81a3      	strh	r3, [r4, #12]
 8009e12:	2300      	movs	r3, #0
 8009e14:	6063      	str	r3, [r4, #4]
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	f043 0308 	orr.w	r3, r3, #8
 8009e20:	81a3      	strh	r3, [r4, #12]
 8009e22:	6923      	ldr	r3, [r4, #16]
 8009e24:	b94b      	cbnz	r3, 8009e3a <__swsetup_r+0x9a>
 8009e26:	89a3      	ldrh	r3, [r4, #12]
 8009e28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e30:	d003      	beq.n	8009e3a <__swsetup_r+0x9a>
 8009e32:	4621      	mov	r1, r4
 8009e34:	4630      	mov	r0, r6
 8009e36:	f000 f847 	bl	8009ec8 <__smakebuf_r>
 8009e3a:	89a0      	ldrh	r0, [r4, #12]
 8009e3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e40:	f010 0301 	ands.w	r3, r0, #1
 8009e44:	d00a      	beq.n	8009e5c <__swsetup_r+0xbc>
 8009e46:	2300      	movs	r3, #0
 8009e48:	60a3      	str	r3, [r4, #8]
 8009e4a:	6963      	ldr	r3, [r4, #20]
 8009e4c:	425b      	negs	r3, r3
 8009e4e:	61a3      	str	r3, [r4, #24]
 8009e50:	6923      	ldr	r3, [r4, #16]
 8009e52:	b943      	cbnz	r3, 8009e66 <__swsetup_r+0xc6>
 8009e54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e58:	d1ba      	bne.n	8009dd0 <__swsetup_r+0x30>
 8009e5a:	bd70      	pop	{r4, r5, r6, pc}
 8009e5c:	0781      	lsls	r1, r0, #30
 8009e5e:	bf58      	it	pl
 8009e60:	6963      	ldrpl	r3, [r4, #20]
 8009e62:	60a3      	str	r3, [r4, #8]
 8009e64:	e7f4      	b.n	8009e50 <__swsetup_r+0xb0>
 8009e66:	2000      	movs	r0, #0
 8009e68:	e7f7      	b.n	8009e5a <__swsetup_r+0xba>
 8009e6a:	bf00      	nop
 8009e6c:	2000002c 	.word	0x2000002c
 8009e70:	0800a7a8 	.word	0x0800a7a8
 8009e74:	0800a7c8 	.word	0x0800a7c8
 8009e78:	0800a788 	.word	0x0800a788

08009e7c <__swhatbuf_r>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	460e      	mov	r6, r1
 8009e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e84:	2900      	cmp	r1, #0
 8009e86:	b096      	sub	sp, #88	; 0x58
 8009e88:	4614      	mov	r4, r2
 8009e8a:	461d      	mov	r5, r3
 8009e8c:	da08      	bge.n	8009ea0 <__swhatbuf_r+0x24>
 8009e8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	602a      	str	r2, [r5, #0]
 8009e96:	061a      	lsls	r2, r3, #24
 8009e98:	d410      	bmi.n	8009ebc <__swhatbuf_r+0x40>
 8009e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e9e:	e00e      	b.n	8009ebe <__swhatbuf_r+0x42>
 8009ea0:	466a      	mov	r2, sp
 8009ea2:	f000 f859 	bl	8009f58 <_fstat_r>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	dbf1      	blt.n	8009e8e <__swhatbuf_r+0x12>
 8009eaa:	9a01      	ldr	r2, [sp, #4]
 8009eac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009eb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009eb4:	425a      	negs	r2, r3
 8009eb6:	415a      	adcs	r2, r3
 8009eb8:	602a      	str	r2, [r5, #0]
 8009eba:	e7ee      	b.n	8009e9a <__swhatbuf_r+0x1e>
 8009ebc:	2340      	movs	r3, #64	; 0x40
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	6023      	str	r3, [r4, #0]
 8009ec2:	b016      	add	sp, #88	; 0x58
 8009ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ec8 <__smakebuf_r>:
 8009ec8:	898b      	ldrh	r3, [r1, #12]
 8009eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ecc:	079d      	lsls	r5, r3, #30
 8009ece:	4606      	mov	r6, r0
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	d507      	bpl.n	8009ee4 <__smakebuf_r+0x1c>
 8009ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	6123      	str	r3, [r4, #16]
 8009edc:	2301      	movs	r3, #1
 8009ede:	6163      	str	r3, [r4, #20]
 8009ee0:	b002      	add	sp, #8
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
 8009ee4:	ab01      	add	r3, sp, #4
 8009ee6:	466a      	mov	r2, sp
 8009ee8:	f7ff ffc8 	bl	8009e7c <__swhatbuf_r>
 8009eec:	9900      	ldr	r1, [sp, #0]
 8009eee:	4605      	mov	r5, r0
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f7fc ff21 	bl	8006d38 <_malloc_r>
 8009ef6:	b948      	cbnz	r0, 8009f0c <__smakebuf_r+0x44>
 8009ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009efc:	059a      	lsls	r2, r3, #22
 8009efe:	d4ef      	bmi.n	8009ee0 <__smakebuf_r+0x18>
 8009f00:	f023 0303 	bic.w	r3, r3, #3
 8009f04:	f043 0302 	orr.w	r3, r3, #2
 8009f08:	81a3      	strh	r3, [r4, #12]
 8009f0a:	e7e3      	b.n	8009ed4 <__smakebuf_r+0xc>
 8009f0c:	4b0d      	ldr	r3, [pc, #52]	; (8009f44 <__smakebuf_r+0x7c>)
 8009f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	6020      	str	r0, [r4, #0]
 8009f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	9b00      	ldr	r3, [sp, #0]
 8009f1c:	6163      	str	r3, [r4, #20]
 8009f1e:	9b01      	ldr	r3, [sp, #4]
 8009f20:	6120      	str	r0, [r4, #16]
 8009f22:	b15b      	cbz	r3, 8009f3c <__smakebuf_r+0x74>
 8009f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f000 f827 	bl	8009f7c <_isatty_r>
 8009f2e:	b128      	cbz	r0, 8009f3c <__smakebuf_r+0x74>
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	f023 0303 	bic.w	r3, r3, #3
 8009f36:	f043 0301 	orr.w	r3, r3, #1
 8009f3a:	81a3      	strh	r3, [r4, #12]
 8009f3c:	89a0      	ldrh	r0, [r4, #12]
 8009f3e:	4305      	orrs	r5, r0
 8009f40:	81a5      	strh	r5, [r4, #12]
 8009f42:	e7cd      	b.n	8009ee0 <__smakebuf_r+0x18>
 8009f44:	08008c55 	.word	0x08008c55

08009f48 <_malloc_usable_size_r>:
 8009f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f4c:	1f18      	subs	r0, r3, #4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	bfbc      	itt	lt
 8009f52:	580b      	ldrlt	r3, [r1, r0]
 8009f54:	18c0      	addlt	r0, r0, r3
 8009f56:	4770      	bx	lr

08009f58 <_fstat_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d07      	ldr	r5, [pc, #28]	; (8009f78 <_fstat_r+0x20>)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4608      	mov	r0, r1
 8009f62:	4611      	mov	r1, r2
 8009f64:	602b      	str	r3, [r5, #0]
 8009f66:	f7f7 fc88 	bl	800187a <_fstat>
 8009f6a:	1c43      	adds	r3, r0, #1
 8009f6c:	d102      	bne.n	8009f74 <_fstat_r+0x1c>
 8009f6e:	682b      	ldr	r3, [r5, #0]
 8009f70:	b103      	cbz	r3, 8009f74 <_fstat_r+0x1c>
 8009f72:	6023      	str	r3, [r4, #0]
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
 8009f76:	bf00      	nop
 8009f78:	20000490 	.word	0x20000490

08009f7c <_isatty_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d06      	ldr	r5, [pc, #24]	; (8009f98 <_isatty_r+0x1c>)
 8009f80:	2300      	movs	r3, #0
 8009f82:	4604      	mov	r4, r0
 8009f84:	4608      	mov	r0, r1
 8009f86:	602b      	str	r3, [r5, #0]
 8009f88:	f7f7 fc87 	bl	800189a <_isatty>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_isatty_r+0x1a>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_isatty_r+0x1a>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	20000490 	.word	0x20000490

08009f9c <_init>:
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9e:	bf00      	nop
 8009fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa2:	bc08      	pop	{r3}
 8009fa4:	469e      	mov	lr, r3
 8009fa6:	4770      	bx	lr

08009fa8 <_fini>:
 8009fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009faa:	bf00      	nop
 8009fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fae:	bc08      	pop	{r3}
 8009fb0:	469e      	mov	lr, r3
 8009fb2:	4770      	bx	lr
