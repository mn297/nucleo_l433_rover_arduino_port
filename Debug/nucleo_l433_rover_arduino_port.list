
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d244  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c74  0800d3d8  0800d3d8  0001d3d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e04c  0800e04c  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800e04c  0800e04c  0001e04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e054  0800e054  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e054  0800e054  0001e054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e05c  0800e05c  0001e05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800e060  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000210  0800e270  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800e270  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af66  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c02  00000000  00000000  0003b1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  0003eda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  00040280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fe5  00000000  00000000  000415d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001976b  00000000  00000000  000695b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de40c  00000000  00000000  00082d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016112c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007004  00000000  00000000  0016117c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d3bc 	.word	0x0800d3bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800d3bc 	.word	0x0800d3bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_DMA_Init+0x38>)
 8001000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <MX_DMA_Init+0x38>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6493      	str	r3, [r2, #72]	; 0x48
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_DMA_Init+0x38>)
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2010      	movs	r0, #16
 800101c:	f001 ffb3 	bl	8002f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001020:	2010      	movs	r0, #16
 8001022:	f001 ffcc 	bl	8002fbe <HAL_NVIC_EnableIRQ>

}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000

08001034 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB8   ------> S_TIM16_CH1
*/
void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	4b5c      	ldr	r3, [pc, #368]	; (80011bc <MX_GPIO_Init+0x188>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a5b      	ldr	r2, [pc, #364]	; (80011bc <MX_GPIO_Init+0x188>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b59      	ldr	r3, [pc, #356]	; (80011bc <MX_GPIO_Init+0x188>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	4b56      	ldr	r3, [pc, #344]	; (80011bc <MX_GPIO_Init+0x188>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a55      	ldr	r2, [pc, #340]	; (80011bc <MX_GPIO_Init+0x188>)
 8001068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <MX_GPIO_Init+0x188>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b50      	ldr	r3, [pc, #320]	; (80011bc <MX_GPIO_Init+0x188>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a4f      	ldr	r2, [pc, #316]	; (80011bc <MX_GPIO_Init+0x188>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b4d      	ldr	r3, [pc, #308]	; (80011bc <MX_GPIO_Init+0x188>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b4a      	ldr	r3, [pc, #296]	; (80011bc <MX_GPIO_Init+0x188>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a49      	ldr	r2, [pc, #292]	; (80011bc <MX_GPIO_Init+0x188>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b47      	ldr	r3, [pc, #284]	; (80011bc <MX_GPIO_Init+0x188>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 80010aa:	2200      	movs	r2, #0
 80010ac:	f248 11b0 	movw	r1, #33200	; 0x81b0
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f002 fafe 	bl	80036b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f242 0160 	movw	r1, #8288	; 0x2060
 80010be:	4840      	ldr	r0, [pc, #256]	; (80011c0 <MX_GPIO_Init+0x18c>)
 80010c0:	f002 faf8 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	483e      	ldr	r0, [pc, #248]	; (80011c4 <MX_GPIO_Init+0x190>)
 80010ca:	f002 faf3 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4837      	ldr	r0, [pc, #220]	; (80011c4 <MX_GPIO_Init+0x190>)
 80010e6:	f002 f96b 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 80010ea:	f248 13b0 	movw	r3, #33200	; 0x81b0
 80010ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f002 f95b 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001112:	2301      	movs	r3, #1
 8001114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f002 f94e 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 8001124:	f242 0360 	movw	r3, #8288	; 0x2060
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4820      	ldr	r0, [pc, #128]	; (80011c0 <MX_GPIO_Init+0x18c>)
 800113e:	f002 f93f 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001142:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001154:	2305      	movs	r3, #5
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <MX_GPIO_Init+0x18c>)
 8001160:	f002 f92e 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4812      	ldr	r0, [pc, #72]	; (80011c4 <MX_GPIO_Init+0x190>)
 800117c:	f002 f920 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001192:	230e      	movs	r3, #14
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4808      	ldr	r0, [pc, #32]	; (80011c0 <MX_GPIO_Init+0x18c>)
 800119e:	f002 f90f 	bl	80033c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2101      	movs	r1, #1
 80011a6:	2028      	movs	r0, #40	; 0x28
 80011a8:	f001 feed 	bl	8002f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ac:	2028      	movs	r0, #40	; 0x28
 80011ae:	f001 ff06 	bl	8002fbe <HAL_NVIC_EnableIRQ>

}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	48000800 	.word	0x48000800

080011c8 <_ZN3PinC1Ev>:
    uint16_t pin;
    bool valid;
    TIM_HandleTypeDef* p_tim;
    unsigned int channel;

    Pin() : port(nullptr), pin(0), valid(false), p_tim(nullptr), channel(0) {}
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	809a      	strh	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	719a      	strb	r2, [r3, #6]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <_ZN3PinC1EP12GPIO_TypeDeft>:
    Pin(GPIO_TypeDef* p, uint16_t pn) : port(p), pin(pn), valid(true), p_tim(nullptr), channel(0) {} // no timer
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	4613      	mov	r3, r2
 8001208:	80fb      	strh	r3, [r7, #6]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	88fa      	ldrh	r2, [r7, #6]
 8001214:	809a      	strh	r2, [r3, #4]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2201      	movs	r2, #1
 800121a:	719a      	strb	r2, [r3, #6]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>:
    Pin(GPIO_TypeDef* p, uint16_t pn, TIM_HandleTypeDef* t, unsigned int c) : port(p), pin(pn), valid(true), p_tim(t), channel(c) {}
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4613      	mov	r3, r2
 8001244:	80fb      	strh	r3, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	88fa      	ldrh	r2, [r7, #6]
 8001250:	809a      	strh	r2, [r3, #4]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2201      	movs	r2, #1
 8001256:	719a      	strb	r2, [r3, #6]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4618      	mov	r0, r3
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <_Z5printPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7fe ffa7 	bl	80001d0 <strlen>
 8001282:	4603      	mov	r3, r0
 8001284:	b29a      	uxth	r2, r3
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <_Z5printPKc+0x2c>)
 800128e:	f005 f8dd 	bl	800644c <HAL_UART_Transmit>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000058c 	.word	0x2000058c

080012a4 <printf>:
int printf(const char* s, ...){
 80012a4:	b40f      	push	{r0, r1, r2, r3}
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b0c2      	sub	sp, #264	; 0x108
 80012aa:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 80012ac:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80012b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80012b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80012b8:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 80012ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80012be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80012c2:	f107 0008 	add.w	r0, r7, #8
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80012cc:	f008 fe8c 	bl	8009fe8 <vsiprintf>
	perror(buffer);
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	4618      	mov	r0, r3
 80012d6:	f007 fce9 	bl	8008cac <perror>
	print(buffer);
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ffc8 	bl	8001274 <_Z5printPKc>
	va_end(args);
//	#endif
	return strlen(buffer);
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe ff71 	bl	80001d0 <strlen>
 80012ee:	4603      	mov	r3, r0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80012f6:	46bd      	mov	sp, r7
 80012f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012fc:	b004      	add	sp, #16
 80012fe:	4770      	bx	lr

08001300 <_Z12print_CYTRONPc>:
Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin, &htim2, TIM_CHANNEL_2);
Pin AMT22_1(GPIOC, GPIO_PIN_7);
RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);
int button_counter = 0;

void print_CYTRON(char* msg){
 8001300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001304:	b08f      	sub	sp, #60	; 0x3c
 8001306:	af0a      	add	r7, sp, #40	; 0x28
 8001308:	60f8      	str	r0, [r7, #12]
  current_angle = Wrist_Roll.get_current_angle();
 800130a:	481f      	ldr	r0, [pc, #124]	; (8001388 <_Z12print_CYTRONPc+0x88>)
 800130c:	f001 f982 	bl	8002614 <_ZN13RoverArmMotor17get_current_angleEv>
 8001310:	eeb0 7a40 	vmov.f32	s14, s0
 8001314:	eef0 7a60 	vmov.f32	s15, s1
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <_Z12print_CYTRONPc+0x8c>)
 800131a:	ed83 7b00 	vstr	d7, [r3]
  current_angle_sw = Wrist_Roll.get_current_angle_sw();
 800131e:	481a      	ldr	r0, [pc, #104]	; (8001388 <_Z12print_CYTRONPc+0x88>)
 8001320:	f001 f9be 	bl	80026a0 <_ZN13RoverArmMotor20get_current_angle_swEv>
 8001324:	eeb0 7a40 	vmov.f32	s14, s0
 8001328:	eef0 7a60 	vmov.f32	s15, s1
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <_Z12print_CYTRONPc+0x90>)
 800132e:	ed83 7b00 	vstr	d7, [r3]
  printf("%s angle_raw %.2f, angle_sw %.2f, setpoint %.2f, zero_sw %.2f, _outputSum %.2f, output %.2f\r\n", 
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <_Z12print_CYTRONPc+0x8c>)
 8001334:	ed93 7b00 	vldr	d7, [r3]
 8001338:	ed87 7b00 	vstr	d7, [r7]
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <_Z12print_CYTRONPc+0x90>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	4911      	ldr	r1, [pc, #68]	; (8001388 <_Z12print_CYTRONPc+0x88>)
 8001344:	e9d1 0150 	ldrd	r0, r1, [r1, #320]	; 0x140
 8001348:	4c0f      	ldr	r4, [pc, #60]	; (8001388 <_Z12print_CYTRONPc+0x88>)
 800134a:	e9d4 4558 	ldrd	r4, r5, [r4, #352]	; 0x160
 800134e:	4e0e      	ldr	r6, [pc, #56]	; (8001388 <_Z12print_CYTRONPc+0x88>)
 8001350:	e9d6 8914 	ldrd	r8, r9, [r6, #80]	; 0x50
    msg, current_angle, current_angle_sw, Wrist_Roll.setpoint, Wrist_Roll.zero_angle_sw,
    Wrist_Roll.internalPIDInstance._outputSum, *Wrist_Roll.internalPIDInstance._myOutput);
 8001354:	4e0c      	ldr	r6, [pc, #48]	; (8001388 <_Z12print_CYTRONPc+0x88>)
 8001356:	6c76      	ldr	r6, [r6, #68]	; 0x44
  printf("%s angle_raw %.2f, angle_sw %.2f, setpoint %.2f, zero_sw %.2f, _outputSum %.2f, output %.2f\r\n", 
 8001358:	e9d6 ab00 	ldrd	sl, fp, [r6]
 800135c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001360:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001364:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800136c:	e9cd 2300 	strd	r2, r3, [sp]
 8001370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001374:	68f9      	ldr	r1, [r7, #12]
 8001376:	4807      	ldr	r0, [pc, #28]	; (8001394 <_Z12print_CYTRONPc+0x94>)
 8001378:	f7ff ff94 	bl	80012a4 <printf>
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001386:	bf00      	nop
 8001388:	20000278 	.word	0x20000278
 800138c:	20000230 	.word	0x20000230
 8001390:	20000238 	.word	0x20000238
 8001394:	0800d3d8 	.word	0x0800d3d8

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139e:	f001 fc77 	bl	8002c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a2:	f000 f8ad 	bl	8001500 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a6:	f7ff fe45 	bl	8001034 <MX_GPIO_Init>
  MX_DMA_Init();
 80013aa:	f7ff fe25 	bl	8000ff8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013ae:	f000 fe4b 	bl	8002048 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80013b2:	f000 fa41 	bl	8001838 <MX_SPI1_Init>
//  MX_SPI2_Init();
  MX_SPI3_Init();
 80013b6:	f000 fa7d 	bl	80018b4 <MX_SPI3_Init>
  MX_TIM1_Init();
 80013ba:	f000 fc71 	bl	8001ca0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013be:	f000 fd1b 	bl	8001df8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderData_1 = 99;
 80013c2:	2363      	movs	r3, #99	; 0x63
 80013c4:	82fb      	strh	r3, [r7, #22]
  uint16_t encoderData_2 = 99;
 80013c6:	2363      	movs	r3, #99	; 0x63
 80013c8:	82bb      	strh	r3, [r7, #20]
  uint16_t encoderData_3 = 99;
 80013ca:	2363      	movs	r3, #99	; 0x63
 80013cc:	827b      	strh	r3, [r7, #18]
  uint16_t encoder_max = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	823b      	strh	r3, [r7, #16]
  uint16_t encoder_min = 4100;
 80013d2:	f241 0304 	movw	r3, #4100	; 0x1004
 80013d6:	81fb      	strh	r3, [r7, #14]
  HAL_TIM_Base_Start(&htim1);
 80013d8:	483b      	ldr	r0, [pc, #236]	; (80014c8 <main+0x130>)
 80013da:	f003 ffff 	bl	80053dc <HAL_TIM_Base_Start>

  /*---AMT22 setup---*/
  // resetAMT22(&hspi1, GPIOC, GPIO_PIN_7, &htim1);

  /*---ESC setup---*/
  int32_t  CH2_ESC = 1500-1;
 80013de:	f240 53db 	movw	r3, #1499	; 0x5db
 80013e2:	60bb      	str	r3, [r7, #8]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013e4:	2104      	movs	r1, #4
 80013e6:	4838      	ldr	r0, [pc, #224]	; (80014c8 <main+0x130>)
 80013e8:	f004 f8a6 	bl	8005538 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 80013ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f0:	f001 fcca 	bl	8002d88 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500-1);
 80013f4:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <main+0x130>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f240 52db 	movw	r2, #1499	; 0x5db
 80013fc:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(500);
 80013fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001402:	f001 fcc1 	bl	8002d88 <HAL_Delay>




  /*---CYTRON setup---*/
  int32_t  CH2_DC = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800140a:	2104      	movs	r1, #4
 800140c:	482f      	ldr	r0, [pc, #188]	; (80014cc <main+0x134>)
 800140e:	f004 f893 	bl	8005538 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001412:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <main+0x134>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2200      	movs	r2, #0
 8001418:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(10);
 800141a:	200a      	movs	r0, #10
 800141c:	f001 fcb4 	bl	8002d88 <HAL_Delay>
  Wrist_Roll.wrist_waist = 1;
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <main+0x138>)
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
  Wrist_Roll.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <main+0x13c>)
 800142a:	ed93 7b00 	vldr	d7, [r3]
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <main+0x140>)
 8001430:	ed93 6b00 	vldr	d6, [r3]
 8001434:	4b29      	ldr	r3, [pc, #164]	; (80014dc <main+0x144>)
 8001436:	ed93 2b00 	vldr	d2, [r3]
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <main+0x148>)
 800143c:	ed93 3b00 	vldr	d3, [r3]
 8001440:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <main+0x14c>)
 8001442:	ed93 4b00 	vldr	d4, [r3]
 8001446:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <main+0x150>)
 8001448:	ed93 5b00 	vldr	d5, [r3]
 800144c:	eeb0 1a46 	vmov.f32	s2, s12
 8001450:	eef0 1a66 	vmov.f32	s3, s13
 8001454:	eeb0 0a47 	vmov.f32	s0, s14
 8001458:	eef0 0a67 	vmov.f32	s1, s15
 800145c:	481c      	ldr	r0, [pc, #112]	; (80014d0 <main+0x138>)
 800145e:	f000 ff9b 	bl	8002398 <_ZN13RoverArmMotor5beginEdddddd>
  Wrist_Roll.setAngleLimits(2, 120.0f); //for angle limits test
 8001462:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80014b8 <main+0x120>
 8001466:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80014c0 <main+0x128>
 800146a:	4819      	ldr	r0, [pc, #100]	; (80014d0 <main+0x138>)
 800146c:	f001 f871 	bl	8002552 <_ZN13RoverArmMotor14setAngleLimitsEdd>
  Wrist_Roll.reset_encoder();
 8001470:	4817      	ldr	r0, [pc, #92]	; (80014d0 <main+0x138>)
 8001472:	f001 f892 	bl	800259a <_ZN13RoverArmMotor13reset_encoderEv>
  // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 70);
  // current_angle = Wrist_Roll.get_current_angle();
  // printf("current angle is %f\r\n, current_angle");
  // Wrist_Roll.newSetpoint(current_angle + 150);

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 30);
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <main+0x134>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	221e      	movs	r2, #30
 800147c:	639a      	str	r2, [r3, #56]	; 0x38
  while(!brakeSet){
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <main+0x154>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d103      	bne.n	800148e <main+0xf6>
    print_CYTRON("BRAKE");
 8001486:	481a      	ldr	r0, [pc, #104]	; (80014f0 <main+0x158>)
 8001488:	f7ff ff3a 	bl	8001300 <_Z12print_CYTRONPc>
  while(!brakeSet){
 800148c:	e7f7      	b.n	800147e <main+0xe6>
    // printf("waiting for brake set\r\n");
  }
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <main+0x134>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2200      	movs	r2, #0
 8001494:	639a      	str	r2, [r3, #56]	; 0x38

  /*---UART setup---*/
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8001496:	2201      	movs	r2, #1
 8001498:	4916      	ldr	r1, [pc, #88]	; (80014f4 <main+0x15c>)
 800149a:	4817      	ldr	r0, [pc, #92]	; (80014f8 <main+0x160>)
 800149c:	f005 f86a 	bl	8006574 <HAL_UART_Receive_IT>
    //   }
    // }

    /*--------------------------------------UART test loop--------------------------------------*/
    // HAL_UART_Receive(&huart2, rx_buffer, 4, 2000);
     HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80014a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a4:	4815      	ldr	r0, [pc, #84]	; (80014fc <main+0x164>)
 80014a6:	f002 f91d 	bl	80036e4 <HAL_GPIO_TogglePin>
     HAL_Delay(200);
 80014aa:	20c8      	movs	r0, #200	; 0xc8
 80014ac:	f001 fc6c 	bl	8002d88 <HAL_Delay>
     HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80014b0:	e7f6      	b.n	80014a0 <main+0x108>
 80014b2:	bf00      	nop
 80014b4:	f3af 8000 	nop.w
 80014b8:	00000000 	.word	0x00000000
 80014bc:	405e0000 	.word	0x405e0000
 80014c0:	00000000 	.word	0x00000000
 80014c4:	40000000 	.word	0x40000000
 80014c8:	200004f4 	.word	0x200004f4
 80014cc:	20000540 	.word	0x20000540
 80014d0:	20000278 	.word	0x20000278
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000008 	.word	0x20000008
 80014dc:	20000010 	.word	0x20000010
 80014e0:	20000018 	.word	0x20000018
 80014e4:	20000020 	.word	0x20000020
 80014e8:	20000028 	.word	0x20000028
 80014ec:	20000240 	.word	0x20000240
 80014f0:	0800d438 	.word	0x0800d438
 80014f4:	200003e4 	.word	0x200003e4
 80014f8:	2000058c 	.word	0x2000058c
 80014fc:	48000400 	.word	0x48000400

08001500 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b096      	sub	sp, #88	; 0x58
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	2244      	movs	r2, #68	; 0x44
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f006 fbd0 	bl	8007cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	463b      	mov	r3, r7
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001522:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001526:	f002 f91d 	bl	8003764 <HAL_PWREx_ControlVoltageScaling>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf14      	ite	ne
 8001530:	2301      	movne	r3, #1
 8001532:	2300      	moveq	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800153a:	f000 f90b 	bl	8001754 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800153e:	2302      	movs	r3, #2
 8001540:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001548:	2310      	movs	r3, #16
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154c:	2302      	movs	r3, #2
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001550:	2302      	movs	r3, #2
 8001552:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001554:	2301      	movs	r3, #1
 8001556:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001558:	230a      	movs	r3, #10
 800155a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800155c:	2307      	movs	r3, #7
 800155e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001560:	2302      	movs	r3, #2
 8001562:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001564:	2302      	movs	r3, #2
 8001566:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4618      	mov	r0, r3
 800156e:	f002 f94f 	bl	8003810 <HAL_RCC_OscConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf14      	ite	ne
 8001578:	2301      	movne	r3, #1
 800157a:	2300      	moveq	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8001582:	f000 f8e7 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001586:	230f      	movs	r3, #15
 8001588:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158a:	2303      	movs	r3, #3
 800158c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	2104      	movs	r1, #4
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fd4a 	bl	8004038 <HAL_RCC_ClockConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bf14      	ite	ne
 80015aa:	2301      	movne	r3, #1
 80015ac:	2300      	moveq	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 80015b4:	f000 f8ce 	bl	8001754 <Error_Handler>
  }
}
 80015b8:	bf00      	nop
 80015ba:	3758      	adds	r7, #88	; 0x58
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
  // if(!brakeSet) {
    if(GPIO_Pin == B1_Pin) // INT Source is pin A9
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015d0:	d115      	bne.n	80015fe <HAL_GPIO_EXTI_Callback+0x3e>
    {
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);  // set encoder stationary
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <HAL_GPIO_EXTI_Callback+0x44>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_Delay(100);  
 80015da:	2064      	movs	r0, #100	; 0x64
 80015dc:	f001 fbd4 	bl	8002d88 <HAL_Delay>
      button_counter++;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_GPIO_EXTI_Callback+0x48>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_GPIO_EXTI_Callback+0x48>)
 80015e8:	6013      	str	r3, [r2, #0]
      Wrist_Roll.set_zero_angle_sw();
 80015ea:	4808      	ldr	r0, [pc, #32]	; (800160c <HAL_GPIO_EXTI_Callback+0x4c>)
 80015ec:	f000 ffe9 	bl	80025c2 <_ZN13RoverArmMotor17set_zero_angle_swEv>
      brakeSet = 1;
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_GPIO_EXTI_Callback+0x50>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
      HAL_Delay(100);
 80015f6:	2064      	movs	r0, #100	; 0x64
 80015f8:	f001 fbc6 	bl	8002d88 <HAL_Delay>
      return;
 80015fc:	bf00      	nop
    }
  // }
}
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000540 	.word	0x20000540
 8001608:	200003e0 	.word	0x200003e0
 800160c:	20000278 	.word	0x20000278
 8001610:	20000240 	.word	0x20000240

08001614 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001614:	b5b0      	push	{r4, r5, r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af04      	add	r7, sp, #16
 800161a:	6078      	str	r0, [r7, #4]
  // if(huart->Instance == USART2)
  // {
    if(rx_index < RX_BUFFER_SIZE - 1) // check if buffer is not full
 800161c:	4b41      	ldr	r3, [pc, #260]	; (8001724 <HAL_UART_RxCpltCallback+0x110>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b1c      	cmp	r3, #28
 8001622:	d850      	bhi.n	80016c6 <HAL_UART_RxCpltCallback+0xb2>
    {
      rx_buffer[rx_index++] = (uint8_t)rx_data[0]; // add received byte to buffer
 8001624:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <HAL_UART_RxCpltCallback+0x110>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	493e      	ldr	r1, [pc, #248]	; (8001724 <HAL_UART_RxCpltCallback+0x110>)
 800162c:	600a      	str	r2, [r1, #0]
 800162e:	4a3e      	ldr	r2, [pc, #248]	; (8001728 <HAL_UART_RxCpltCallback+0x114>)
 8001630:	7811      	ldrb	r1, [r2, #0]
 8001632:	4a3e      	ldr	r2, [pc, #248]	; (800172c <HAL_UART_RxCpltCallback+0x118>)
 8001634:	54d1      	strb	r1, [r2, r3]
      if(rx_data[0] == '\n' || rx_data[0] == '\r') // check for Enter key
 8001636:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <HAL_UART_RxCpltCallback+0x114>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b0a      	cmp	r3, #10
 800163c:	d003      	beq.n	8001646 <HAL_UART_RxCpltCallback+0x32>
 800163e:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <HAL_UART_RxCpltCallback+0x114>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b0d      	cmp	r3, #13
 8001644:	d165      	bne.n	8001712 <HAL_UART_RxCpltCallback+0xfe>
      {
        rx_buffer[rx_index] = '\0'; // add null terminator to make it a string
 8001646:	4b37      	ldr	r3, [pc, #220]	; (8001724 <HAL_UART_RxCpltCallback+0x110>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a38      	ldr	r2, [pc, #224]	; (800172c <HAL_UART_RxCpltCallback+0x118>)
 800164c:	2100      	movs	r1, #0
 800164e:	54d1      	strb	r1, [r2, r3]
        rx_index = 0; // reset buffer index
 8001650:	4b34      	ldr	r3, [pc, #208]	; (8001724 <HAL_UART_RxCpltCallback+0x110>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
        // do something with the received data
        sscanf(rx_buffer, "%lf %lf %lf", &Kp, &Ki, &Kd);
 8001656:	4b36      	ldr	r3, [pc, #216]	; (8001730 <HAL_UART_RxCpltCallback+0x11c>)
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_UART_RxCpltCallback+0x120>)
 800165c:	4a36      	ldr	r2, [pc, #216]	; (8001738 <HAL_UART_RxCpltCallback+0x124>)
 800165e:	4937      	ldr	r1, [pc, #220]	; (800173c <HAL_UART_RxCpltCallback+0x128>)
 8001660:	4832      	ldr	r0, [pc, #200]	; (800172c <HAL_UART_RxCpltCallback+0x118>)
 8001662:	f007 fba5 	bl	8008db0 <siscanf>
        Wrist_Roll.set_PID_params(Kp, Ki, Kd, Kp, Ki, Kd);
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <HAL_UART_RxCpltCallback+0x124>)
 8001668:	ed93 7b00 	vldr	d7, [r3]
 800166c:	4b31      	ldr	r3, [pc, #196]	; (8001734 <HAL_UART_RxCpltCallback+0x120>)
 800166e:	ed93 6b00 	vldr	d6, [r3]
 8001672:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_UART_RxCpltCallback+0x11c>)
 8001674:	ed93 2b00 	vldr	d2, [r3]
 8001678:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <HAL_UART_RxCpltCallback+0x124>)
 800167a:	ed93 3b00 	vldr	d3, [r3]
 800167e:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <HAL_UART_RxCpltCallback+0x120>)
 8001680:	ed93 4b00 	vldr	d4, [r3]
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <HAL_UART_RxCpltCallback+0x11c>)
 8001686:	ed93 5b00 	vldr	d5, [r3]
 800168a:	eeb0 1a46 	vmov.f32	s2, s12
 800168e:	eef0 1a66 	vmov.f32	s3, s13
 8001692:	eeb0 0a47 	vmov.f32	s0, s14
 8001696:	eef0 0a67 	vmov.f32	s1, s15
 800169a:	4829      	ldr	r0, [pc, #164]	; (8001740 <HAL_UART_RxCpltCallback+0x12c>)
 800169c:	f000 ff0e 	bl	80024bc <_ZN13RoverArmMotor14set_PID_paramsEdddddd>
        printf("set to Kp: %lf, Ki: %lf, Kd: %lf\r\n", Kp, Ki, Kd);
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <HAL_UART_RxCpltCallback+0x124>)
 80016a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <HAL_UART_RxCpltCallback+0x120>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	4920      	ldr	r1, [pc, #128]	; (8001730 <HAL_UART_RxCpltCallback+0x11c>)
 80016ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80016b6:	e9cd 2300 	strd	r2, r3, [sp]
 80016ba:	4622      	mov	r2, r4
 80016bc:	462b      	mov	r3, r5
 80016be:	4821      	ldr	r0, [pc, #132]	; (8001744 <HAL_UART_RxCpltCallback+0x130>)
 80016c0:	f7ff fdf0 	bl	80012a4 <printf>
 80016c4:	e025      	b.n	8001712 <HAL_UART_RxCpltCallback+0xfe>
      }
    }
    else if (rx_index == RX_BUFFER_SIZE - 1) // buffer is full
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_UART_RxCpltCallback+0x110>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b1d      	cmp	r3, #29
 80016cc:	d121      	bne.n	8001712 <HAL_UART_RxCpltCallback+0xfe>
    {
      rx_buffer[rx_index] = '\0'; // add null terminator to make it a string
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_UART_RxCpltCallback+0x110>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a16      	ldr	r2, [pc, #88]	; (800172c <HAL_UART_RxCpltCallback+0x118>)
 80016d4:	2100      	movs	r1, #0
 80016d6:	54d1      	strb	r1, [r2, r3]
      rx_index = 0; // reset buffer index
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_UART_RxCpltCallback+0x110>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
      // do something with the received data
      sscanf(rx_buffer, "%lf %lf %lf\n", &Kp, &Ki, &Kd);
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_UART_RxCpltCallback+0x11c>)
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <HAL_UART_RxCpltCallback+0x120>)
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <HAL_UART_RxCpltCallback+0x124>)
 80016e6:	4918      	ldr	r1, [pc, #96]	; (8001748 <HAL_UART_RxCpltCallback+0x134>)
 80016e8:	4810      	ldr	r0, [pc, #64]	; (800172c <HAL_UART_RxCpltCallback+0x118>)
 80016ea:	f007 fb61 	bl	8008db0 <siscanf>
      printf("Kp: %lf, Ki: %lf, Kd: %lf\r\n", Kp, Ki, Kd);
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_UART_RxCpltCallback+0x124>)
 80016f0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_UART_RxCpltCallback+0x120>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	490d      	ldr	r1, [pc, #52]	; (8001730 <HAL_UART_RxCpltCallback+0x11c>)
 80016fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001700:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001704:	e9cd 2300 	strd	r2, r3, [sp]
 8001708:	4622      	mov	r2, r4
 800170a:	462b      	mov	r3, r5
 800170c:	480f      	ldr	r0, [pc, #60]	; (800174c <HAL_UART_RxCpltCallback+0x138>)
 800170e:	f7ff fdc9 	bl	80012a4 <printf>
    }
  // }
  HAL_UART_Receive_IT(&huart2, rx_data, 1); // start listening for next byte
 8001712:	2201      	movs	r2, #1
 8001714:	4904      	ldr	r1, [pc, #16]	; (8001728 <HAL_UART_RxCpltCallback+0x114>)
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <HAL_UART_RxCpltCallback+0x13c>)
 8001718:	f004 ff2c 	bl	8006574 <HAL_UART_Receive_IT>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bdb0      	pop	{r4, r5, r7, pc}
 8001724:	2000040c 	.word	0x2000040c
 8001728:	200003e4 	.word	0x200003e4
 800172c:	200003ec 	.word	0x200003ec
 8001730:	20000420 	.word	0x20000420
 8001734:	20000418 	.word	0x20000418
 8001738:	20000410 	.word	0x20000410
 800173c:	0800d440 	.word	0x0800d440
 8001740:	20000278 	.word	0x20000278
 8001744:	0800d44c 	.word	0x0800d44c
 8001748:	0800d470 	.word	0x0800d470
 800174c:	0800d480 	.word	0x0800d480
 8001750:	2000058c 	.word	0x2000058c

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	e7fe      	b.n	800175c <Error_Handler+0x8>
	...

08001760 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	b096      	sub	sp, #88	; 0x58
 8001764:	af10      	add	r7, sp, #64	; 0x40
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d13f      	bne.n	80017f0 <_Z41__static_initialization_and_destruction_0ii+0x90>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001776:	4293      	cmp	r3, r2
 8001778:	d13a      	bne.n	80017f0 <_Z41__static_initialization_and_destruction_0ii+0x90>
Pin CYTRON_DIR_1(CYTRON_DIR_1_GPIO_Port, CYTRON_DIR_1_Pin);
 800177a:	2220      	movs	r2, #32
 800177c:	4922      	ldr	r1, [pc, #136]	; (8001808 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800177e:	4823      	ldr	r0, [pc, #140]	; (800180c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001780:	f7ff fd3c 	bl	80011fc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin, &htim2, TIM_CHANNEL_2);
 8001784:	2304      	movs	r3, #4
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4b21      	ldr	r3, [pc, #132]	; (8001810 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800178a:	2208      	movs	r2, #8
 800178c:	491e      	ldr	r1, [pc, #120]	; (8001808 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800178e:	4821      	ldr	r0, [pc, #132]	; (8001814 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001790:	f7ff fd51 	bl	8001236 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>
Pin AMT22_1(GPIOC, GPIO_PIN_7);
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	4920      	ldr	r1, [pc, #128]	; (8001818 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001798:	4820      	ldr	r0, [pc, #128]	; (800181c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800179a:	f7ff fd2f 	bl	80011fc <_ZN3PinC1EP12GPIO_TypeDeft>
RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fd10 	bl	80011c8 <_ZN3PinC1Ev>
 80017a8:	4c1a      	ldr	r4, [pc, #104]	; (8001814 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80017aa:	ad0b      	add	r5, sp, #44	; 0x2c
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017b6:	2300      	movs	r3, #0
 80017b8:	930a      	str	r3, [sp, #40]	; 0x28
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80017bc:	ad06      	add	r5, sp, #24
 80017be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80017c6:	ad02      	add	r5, sp, #8
 80017c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017ce:	466a      	mov	r2, sp
 80017d0:	f104 0308 	add.w	r3, r4, #8
 80017d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017d8:	e882 0003 	stmia.w	r2, {r0, r1}
 80017dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017e0:	ed9f 1b05 	vldr	d1, [pc, #20]	; 80017f8 <_Z41__static_initialization_and_destruction_0ii+0x98>
 80017e4:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8001800 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80017e8:	490d      	ldr	r1, [pc, #52]	; (8001820 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80017ea:	480e      	ldr	r0, [pc, #56]	; (8001824 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80017ec:	f000 fd2b 	bl	8002246 <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>
}
 80017f0:	bf00      	nop
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bdb0      	pop	{r4, r5, r7, pc}
 80017f8:	00000000 	.word	0x00000000
 80017fc:	40767000 	.word	0x40767000
	...
 8001808:	48000400 	.word	0x48000400
 800180c:	20000244 	.word	0x20000244
 8001810:	20000540 	.word	0x20000540
 8001814:	20000254 	.word	0x20000254
 8001818:	48000800 	.word	0x48000800
 800181c:	20000264 	.word	0x20000264
 8001820:	20000428 	.word	0x20000428
 8001824:	20000278 	.word	0x20000278

08001828 <_GLOBAL__sub_I_aggKp>:
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
 800182c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001830:	2001      	movs	r0, #1
 8001832:	f7ff ff95 	bl	8001760 <_Z41__static_initialization_and_destruction_0ii>
 8001836:	bd80      	pop	{r7, pc}

08001838 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <MX_SPI1_Init+0x74>)
 800183e:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <MX_SPI1_Init+0x78>)
 8001840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_SPI1_Init+0x74>)
 8001844:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <MX_SPI1_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_SPI1_Init+0x74>)
 8001852:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001856:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_SPI1_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <MX_SPI1_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_SPI1_Init+0x74>)
 8001866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_SPI1_Init+0x74>)
 800186e:	2228      	movs	r2, #40	; 0x28
 8001870:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_SPI1_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_SPI1_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <MX_SPI1_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_SPI1_Init+0x74>)
 8001886:	2207      	movs	r2, #7
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <MX_SPI1_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_SPI1_Init+0x74>)
 8001892:	2208      	movs	r2, #8
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_SPI1_Init+0x74>)
 8001898:	f003 f92e 	bl	8004af8 <HAL_SPI_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f7ff ff57 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000428 	.word	0x20000428
 80018b0:	40013000 	.word	0x40013000

080018b4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <MX_SPI3_Init+0x74>)
 80018ba:	4a1c      	ldr	r2, [pc, #112]	; (800192c <MX_SPI3_Init+0x78>)
 80018bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <MX_SPI3_Init+0x74>)
 80018c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <MX_SPI3_Init+0x74>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <MX_SPI3_Init+0x74>)
 80018ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018d2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <MX_SPI3_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <MX_SPI3_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MX_SPI3_Init+0x74>)
 80018e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MX_SPI3_Init+0x74>)
 80018ea:	2220      	movs	r2, #32
 80018ec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <MX_SPI3_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_SPI3_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <MX_SPI3_Init+0x74>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_SPI3_Init+0x74>)
 8001902:	2207      	movs	r2, #7
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <MX_SPI3_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_SPI3_Init+0x74>)
 800190e:	2208      	movs	r2, #8
 8001910:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_SPI3_Init+0x74>)
 8001914:	f003 f8f0 	bl	8004af8 <HAL_SPI_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800191e:	f7ff ff19 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000048c 	.word	0x2000048c
 800192c:	40003c00 	.word	0x40003c00

08001930 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	; 0x30
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a2f      	ldr	r2, [pc, #188]	; (8001a0c <HAL_SPI_MspInit+0xdc>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d12a      	bne.n	80019a8 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_SPI_MspInit+0xe0>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001956:	4a2e      	ldr	r2, [pc, #184]	; (8001a10 <HAL_SPI_MspInit+0xe0>)
 8001958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800195c:	6613      	str	r3, [r2, #96]	; 0x60
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <HAL_SPI_MspInit+0xe0>)
 8001960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <HAL_SPI_MspInit+0xe0>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a28      	ldr	r2, [pc, #160]	; (8001a10 <HAL_SPI_MspInit+0xe0>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <HAL_SPI_MspInit+0xe0>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001982:	f641 0302 	movw	r3, #6146	; 0x1802
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001994:	2305      	movs	r3, #5
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4619      	mov	r1, r3
 800199e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a2:	f001 fd0d 	bl	80033c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80019a6:	e02d      	b.n	8001a04 <HAL_SPI_MspInit+0xd4>
  else if(spiHandle->Instance==SPI3)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <HAL_SPI_MspInit+0xe4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d128      	bne.n	8001a04 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_SPI_MspInit+0xe0>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <HAL_SPI_MspInit+0xe0>)
 80019b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019bc:	6593      	str	r3, [r2, #88]	; 0x58
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_SPI_MspInit+0xe0>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_SPI_MspInit+0xe0>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_SPI_MspInit+0xe0>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_SPI_MspInit+0xe0>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019f4:	2306      	movs	r3, #6
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4619      	mov	r1, r3
 80019fe:	4806      	ldr	r0, [pc, #24]	; (8001a18 <HAL_SPI_MspInit+0xe8>)
 8001a00:	f001 fcde 	bl	80033c0 <HAL_GPIO_Init>
}
 8001a04:	bf00      	nop
 8001a06:	3730      	adds	r7, #48	; 0x30
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40013000 	.word	0x40013000
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40003c00 	.word	0x40003c00
 8001a18:	48000800 	.word	0x48000800

08001a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_MspInit+0x44>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a26:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <HAL_MspInit+0x44>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_MspInit+0x44>)
 8001a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_MspInit+0x44>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <HAL_MspInit+0x44>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6593      	str	r3, [r2, #88]	; 0x58
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_MspInit+0x44>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <NMI_Handler+0x4>

08001a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <MemManage_Handler+0x4>

08001a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab0:	f001 f94a 	bl	8002d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <DMA1_Channel6_IRQHandler+0x10>)
 8001abe:	f001 fbd0 	bl	8003262 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000610 	.word	0x20000610

08001acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <USART2_IRQHandler+0x10>)
 8001ad2:	f004 fda5 	bl	8006620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000058c 	.word	0x2000058c

08001ae0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ae4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ae8:	f001 fe16 	bl	8003718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return 1;
 8001af4:	2301      	movs	r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_kill>:

int _kill(int pid, int sig)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b0a:	f006 f8a1 	bl	8007c50 <__errno>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2216      	movs	r2, #22
 8001b12:	601a      	str	r2, [r3, #0]
  return -1;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_exit>:

void _exit (int status)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ffe7 	bl	8001b00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b32:	e7fe      	b.n	8001b32 <_exit+0x12>

08001b34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	e00a      	b.n	8001b5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b46:	f3af 8000 	nop.w
 8001b4a:	4601      	mov	r1, r0
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	60ba      	str	r2, [r7, #8]
 8001b52:	b2ca      	uxtb	r2, r1
 8001b54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dbf0      	blt.n	8001b46 <_read+0x12>
  }

  return len;
 8001b64:	687b      	ldr	r3, [r7, #4]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	e009      	b.n	8001b94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	60ba      	str	r2, [r7, #8]
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3301      	adds	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	dbf1      	blt.n	8001b80 <_write+0x12>
  }
  return len;
 8001b9c:	687b      	ldr	r3, [r7, #4]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <_close>:

int _close(int file)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bce:	605a      	str	r2, [r3, #4]
  return 0;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <_isatty>:

int _isatty(int file)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <_sbrk+0x5c>)
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <_sbrk+0x60>)
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d102      	bne.n	8001c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <_sbrk+0x64>)
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <_sbrk+0x68>)
 8001c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d207      	bcs.n	8001c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c40:	f006 f806 	bl	8007c50 <__errno>
 8001c44:	4603      	mov	r3, r0
 8001c46:	220c      	movs	r2, #12
 8001c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	e009      	b.n	8001c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <_sbrk+0x64>)
 8001c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20010000 	.word	0x20010000
 8001c70:	00000400 	.word	0x00000400
 8001c74:	200004f0 	.word	0x200004f0
 8001c78:	20000670 	.word	0x20000670

08001c7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <SystemInit+0x20>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <SystemInit+0x20>)
 8001c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b09a      	sub	sp, #104	; 0x68
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
 8001cd0:	615a      	str	r2, [r3, #20]
 8001cd2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	222c      	movs	r2, #44	; 0x2c
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f005 ffea 	bl	8007cb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ce0:	4b43      	ldr	r3, [pc, #268]	; (8001df0 <MX_TIM1_Init+0x150>)
 8001ce2:	4a44      	ldr	r2, [pc, #272]	; (8001df4 <MX_TIM1_Init+0x154>)
 8001ce4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001ce6:	4b42      	ldr	r3, [pc, #264]	; (8001df0 <MX_TIM1_Init+0x150>)
 8001ce8:	224f      	movs	r2, #79	; 0x4f
 8001cea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <MX_TIM1_Init+0x150>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500-1;
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <MX_TIM1_Init+0x150>)
 8001cf4:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001cf8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <MX_TIM1_Init+0x150>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d00:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <MX_TIM1_Init+0x150>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <MX_TIM1_Init+0x150>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d0c:	4838      	ldr	r0, [pc, #224]	; (8001df0 <MX_TIM1_Init+0x150>)
 8001d0e:	f003 fb0d 	bl	800532c <HAL_TIM_Base_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001d18:	f7ff fd1c 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d20:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d26:	4619      	mov	r1, r3
 8001d28:	4831      	ldr	r0, [pc, #196]	; (8001df0 <MX_TIM1_Init+0x150>)
 8001d2a:	f003 fdf7 	bl	800591c <HAL_TIM_ConfigClockSource>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001d34:	f7ff fd0e 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d38:	482d      	ldr	r0, [pc, #180]	; (8001df0 <MX_TIM1_Init+0x150>)
 8001d3a:	f003 fb9b 	bl	8005474 <HAL_TIM_PWM_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001d44:	f7ff fd06 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4825      	ldr	r0, [pc, #148]	; (8001df0 <MX_TIM1_Init+0x150>)
 8001d5c:	f004 fa4a 	bl	80061f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001d66:	f7ff fcf5 	bl	8001754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6a:	2360      	movs	r3, #96	; 0x60
 8001d6c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d72:	2300      	movs	r3, #0
 8001d74:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d76:	2300      	movs	r3, #0
 8001d78:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4818      	ldr	r0, [pc, #96]	; (8001df0 <MX_TIM1_Init+0x150>)
 8001d90:	f003 fcb0 	bl	80056f4 <HAL_TIM_PWM_ConfigChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001d9a:	f7ff fcdb 	bl	8001754 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001db2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001dc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4807      	ldr	r0, [pc, #28]	; (8001df0 <MX_TIM1_Init+0x150>)
 8001dd4:	f004 fa74 	bl	80062c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001dde:	f7ff fcb9 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001de2:	4803      	ldr	r0, [pc, #12]	; (8001df0 <MX_TIM1_Init+0x150>)
 8001de4:	f000 f8d4 	bl	8001f90 <HAL_TIM_MspPostInit>

}
 8001de8:	bf00      	nop
 8001dea:	3768      	adds	r7, #104	; 0x68
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200004f4 	.word	0x200004f4
 8001df4:	40012c00 	.word	0x40012c00

08001df8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08e      	sub	sp, #56	; 0x38
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e18:	463b      	mov	r3, r7
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
 8001e24:	611a      	str	r2, [r3, #16]
 8001e26:	615a      	str	r2, [r3, #20]
 8001e28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e34:	224f      	movs	r2, #79	; 0x4f
 8001e36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001e3e:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e40:	2263      	movs	r2, #99	; 0x63
 8001e42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e44:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e50:	4823      	ldr	r0, [pc, #140]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e52:	f003 fa6b 	bl	800532c <HAL_TIM_Base_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e5c:	f7ff fc7a 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	481c      	ldr	r0, [pc, #112]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e6e:	f003 fd55 	bl	800591c <HAL_TIM_ConfigClockSource>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e78:	f7ff fc6c 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e7c:	4818      	ldr	r0, [pc, #96]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e7e:	f003 faf9 	bl	8005474 <HAL_TIM_PWM_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e88:	f7ff fc64 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4811      	ldr	r0, [pc, #68]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e9c:	f004 f9aa 	bl	80061f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ea6:	f7ff fc55 	bl	8001754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eaa:	2360      	movs	r3, #96	; 0x60
 8001eac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eba:	463b      	mov	r3, r7
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001ec2:	f003 fc17 	bl	80056f4 <HAL_TIM_PWM_ConfigChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ecc:	f7ff fc42 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ed0:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001ed2:	f000 f85d 	bl	8001f90 <HAL_TIM_MspPostInit>

}
 8001ed6:	bf00      	nop
 8001ed8:	3738      	adds	r7, #56	; 0x38
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000540 	.word	0x20000540

08001ee4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a20      	ldr	r2, [pc, #128]	; (8001f84 <HAL_TIM_Base_MspInit+0xa0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d10c      	bne.n	8001f20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_TIM_Base_MspInit+0xa4>)
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <HAL_TIM_Base_MspInit+0xa4>)
 8001f0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f10:	6613      	str	r3, [r2, #96]	; 0x60
 8001f12:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <HAL_TIM_Base_MspInit+0xa4>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f1e:	e02d      	b.n	8001f7c <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f28:	d128      	bne.n	8001f7c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <HAL_TIM_Base_MspInit+0xa4>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <HAL_TIM_Base_MspInit+0xa4>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_TIM_Base_MspInit+0xa4>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_TIM_Base_MspInit+0xa4>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <HAL_TIM_Base_MspInit+0xa4>)
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_TIM_Base_MspInit+0xa4>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <HAL_TIM_Base_MspInit+0xa8>)
 8001f78:	f001 fa22 	bl	80033c0 <HAL_GPIO_Init>
}
 8001f7c:	bf00      	nop
 8001f7e:	3728      	adds	r7, #40	; 0x28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40012c00 	.word	0x40012c00
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	48000400 	.word	0x48000400

08001f90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a23      	ldr	r2, [pc, #140]	; (800203c <HAL_TIM_MspPostInit+0xac>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d11e      	bne.n	8001ff0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	4b23      	ldr	r3, [pc, #140]	; (8002040 <HAL_TIM_MspPostInit+0xb0>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	4a22      	ldr	r2, [pc, #136]	; (8002040 <HAL_TIM_MspPostInit+0xb0>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fbe:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_TIM_MspPostInit+0xb0>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 8001fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fea:	f001 f9e9 	bl	80033c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fee:	e020      	b.n	8002032 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff8:	d11b      	bne.n	8002032 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_TIM_MspPostInit+0xb0>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	4a10      	ldr	r2, [pc, #64]	; (8002040 <HAL_TIM_MspPostInit+0xb0>)
 8002000:	f043 0302 	orr.w	r3, r3, #2
 8002004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <HAL_TIM_MspPostInit+0xb0>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 8002012:	2308      	movs	r3, #8
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002022:	2301      	movs	r3, #1
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <HAL_TIM_MspPostInit+0xb4>)
 800202e:	f001 f9c7 	bl	80033c0 <HAL_GPIO_Init>
}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40012c00 	.word	0x40012c00
 8002040:	40021000 	.word	0x40021000
 8002044:	48000400 	.word	0x48000400

08002048 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <MX_USART2_UART_Init+0x58>)
 800204e:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <MX_USART2_UART_Init+0x5c>)
 8002050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <MX_USART2_UART_Init+0x58>)
 8002054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <MX_USART2_UART_Init+0x58>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <MX_USART2_UART_Init+0x58>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <MX_USART2_UART_Init+0x58>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <MX_USART2_UART_Init+0x58>)
 800206e:	220c      	movs	r2, #12
 8002070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <MX_USART2_UART_Init+0x58>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <MX_USART2_UART_Init+0x58>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <MX_USART2_UART_Init+0x58>)
 8002080:	2200      	movs	r2, #0
 8002082:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <MX_USART2_UART_Init+0x58>)
 8002086:	2200      	movs	r2, #0
 8002088:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_USART2_UART_Init+0x58>)
 800208c:	f004 f990 	bl	80063b0 <HAL_UART_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002096:	f7ff fb5d 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000058c 	.word	0x2000058c
 80020a4:	40004400 	.word	0x40004400

080020a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0a2      	sub	sp, #136	; 0x88
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2260      	movs	r2, #96	; 0x60
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f005 fdf3 	bl	8007cb4 <memset>
  if(uartHandle->Instance==USART2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a38      	ldr	r2, [pc, #224]	; (80021b4 <HAL_UART_MspInit+0x10c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d169      	bne.n	80021ac <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020d8:	2302      	movs	r3, #2
 80020da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020dc:	2300      	movs	r3, #0
 80020de:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 f9cb 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020f0:	f7ff fb30 	bl	8001754 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020f4:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_UART_MspInit+0x110>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	4a2f      	ldr	r2, [pc, #188]	; (80021b8 <HAL_UART_MspInit+0x110>)
 80020fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002100:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_UART_MspInit+0x110>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210c:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <HAL_UART_MspInit+0x110>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	4a29      	ldr	r2, [pc, #164]	; (80021b8 <HAL_UART_MspInit+0x110>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <HAL_UART_MspInit+0x110>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002124:	230c      	movs	r3, #12
 8002126:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002136:	2307      	movs	r3, #7
 8002138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002140:	4619      	mov	r1, r3
 8002142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002146:	f001 f93b 	bl	80033c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_UART_MspInit+0x114>)
 800214c:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <HAL_UART_MspInit+0x118>)
 800214e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_UART_MspInit+0x114>)
 8002152:	2202      	movs	r2, #2
 8002154:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002156:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_UART_MspInit+0x114>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_UART_MspInit+0x114>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_UART_MspInit+0x114>)
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_UART_MspInit+0x114>)
 800216a:	2200      	movs	r2, #0
 800216c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_UART_MspInit+0x114>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_UART_MspInit+0x114>)
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_UART_MspInit+0x114>)
 800217c:	2200      	movs	r2, #0
 800217e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002180:	480e      	ldr	r0, [pc, #56]	; (80021bc <HAL_UART_MspInit+0x114>)
 8002182:	f000 ff37 	bl	8002ff4 <HAL_DMA_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800218c:	f7ff fae2 	bl	8001754 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_UART_MspInit+0x114>)
 8002194:	671a      	str	r2, [r3, #112]	; 0x70
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_UART_MspInit+0x114>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800219c:	2200      	movs	r2, #0
 800219e:	2100      	movs	r1, #0
 80021a0:	2026      	movs	r0, #38	; 0x26
 80021a2:	f000 fef0 	bl	8002f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021a6:	2026      	movs	r0, #38	; 0x26
 80021a8:	f000 ff09 	bl	8002fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021ac:	bf00      	nop
 80021ae:	3788      	adds	r7, #136	; 0x88
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40004400 	.word	0x40004400
 80021b8:	40021000 	.word	0x40021000
 80021bc:	20000610 	.word	0x20000610
 80021c0:	4002006c 	.word	0x4002006c

080021c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021c8:	f7ff fd58 	bl	8001c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021cc:	480c      	ldr	r0, [pc, #48]	; (8002200 <LoopForever+0x6>)
  ldr r1, =_edata
 80021ce:	490d      	ldr	r1, [pc, #52]	; (8002204 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <LoopForever+0xe>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d4:	e002      	b.n	80021dc <LoopCopyDataInit>

080021d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021da:	3304      	adds	r3, #4

080021dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e0:	d3f9      	bcc.n	80021d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <LoopForever+0x12>)
  ldr r4, =_ebss
 80021e4:	4c0a      	ldr	r4, [pc, #40]	; (8002210 <LoopForever+0x16>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e8:	e001      	b.n	80021ee <LoopFillZerobss>

080021ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ec:	3204      	adds	r2, #4

080021ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f0:	d3fb      	bcc.n	80021ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021f2:	f005 fd33 	bl	8007c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021f6:	f7ff f8cf 	bl	8001398 <main>

080021fa <LoopForever>:

LoopForever:
    b LoopForever
 80021fa:	e7fe      	b.n	80021fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002204:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002208:	0800e060 	.word	0x0800e060
  ldr r2, =_sbss
 800220c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002210:	20000670 	.word	0x20000670

08002214 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC1_IRQHandler>

08002216 <_ZN9movingAvgC1Ei>:
#define MOVINGAVG_H_INCLUDED

class movingAvg
{
    public:
        movingAvg(int interval)
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
            : m_interval{interval}, m_nbrReadings{0}, m_sum{0}, m_next{0} {}
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>:

// TODO: Test this class with the old code, remember to create backup beforehand!
// I'm very suspicious of the way I handled user defined pointers...

// The motor will not move until begin() is called!
RoverArmMotor::RoverArmMotor(SPI_HandleTypeDef* spi_handle, Pin pwm_pin, Pin dir_pin, Pin encoder_pin, int esc_type, double minimum_angle, double maximum_angle, Pin brake_pin)
 8002246:	b082      	sub	sp, #8
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af02      	add	r7, sp, #8
 800224e:	6178      	str	r0, [r7, #20]
 8002250:	6139      	str	r1, [r7, #16]
 8002252:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002256:	e881 000c 	stmia.w	r1, {r2, r3}
 800225a:	ed87 0b02 	vstr	d0, [r7, #8]
 800225e:	ed87 1b00 	vstr	d1, [r7]
                :internalPIDInstance(&input, &output, &setpoint, regularKp, regularKi, regularKd, _PID_CD_DIRECT)
                ,internalAveragerInstance(15){
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8002288:	2300      	movs	r3, #0
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	eeb0 2a45 	vmov.f32	s4, s10
 8002290:	eef0 2a65 	vmov.f32	s5, s11
 8002294:	eeb0 1a46 	vmov.f32	s2, s12
 8002298:	eef0 1a66 	vmov.f32	s3, s13
 800229c:	eeb0 0a47 	vmov.f32	s0, s14
 80022a0:	eef0 0a67 	vmov.f32	s1, s15
 80022a4:	4623      	mov	r3, r4
 80022a6:	f000 fb07 	bl	80028b8 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	3370      	adds	r3, #112	; 0x70
 80022ae:	210f      	movs	r1, #15
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ffb0 	bl	8002216 <_ZN9movingAvgC1Ei>
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	33b8      	adds	r3, #184	; 0xb8
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe ff84 	bl	80011c8 <_ZN3PinC1Ev>
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	33c8      	adds	r3, #200	; 0xc8
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe ff7f 	bl	80011c8 <_ZN3PinC1Ev>
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	33d8      	adds	r3, #216	; 0xd8
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe ff7a 	bl	80011c8 <_ZN3PinC1Ev>
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	33e8      	adds	r3, #232	; 0xe8
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe ff75 	bl	80011c8 <_ZN3PinC1Ev>

    //constructor
    spi = spi_handle;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    pwm = pwm_pin;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80022ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    dir = dir_pin;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80022fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002302:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    encoder = encoder_pin;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800230c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002310:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002312:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    brake = brake_pin;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 800231c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002320:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002322:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    escType = esc_type;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800232a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    lowestAngle = minimum_angle;
 800232e:	6979      	ldr	r1, [r7, #20]
 8002330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002334:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = maximum_angle;
 8002338:	6979      	ldr	r1, [r7, #20]
 800233a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800233e:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108

    //clean up variables
    input = 0;
 8002342:	6979      	ldr	r1, [r7, #20]
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
    output = 0;
 8002350:	6979      	ldr	r1, [r7, #20]
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
    lastAngle = 0;
 800235e:	6979      	ldr	r1, [r7, #20]
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    sw_angle = 1;  //use software angle
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2201      	movs	r2, #1
 8002370:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    zero_angle_sw = 0;  //mn297
 8002374:	6979      	ldr	r1, [r7, #20]
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
    
}
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	4618      	mov	r0, r3
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800238e:	b002      	add	sp, #8
 8002390:	4770      	bx	lr
 8002392:	0000      	movs	r0, r0
 8002394:	0000      	movs	r0, r0
	...

08002398 <_ZN13RoverArmMotor5beginEdddddd>:

void RoverArmMotor::begin(double aggP, double aggI, double aggD, double regP, double regI, double regD){
 8002398:	b580      	push	{r7, lr}
 800239a:	b08e      	sub	sp, #56	; 0x38
 800239c:	af00      	add	r7, sp, #0
 800239e:	6378      	str	r0, [r7, #52]	; 0x34
 80023a0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80023a4:	ed87 1b08 	vstr	d1, [r7, #32]
 80023a8:	ed87 2b06 	vstr	d2, [r7, #24]
 80023ac:	ed87 3b04 	vstr	d3, [r7, #16]
 80023b0:	ed87 4b02 	vstr	d4, [r7, #8]
 80023b4:	ed87 5b00 	vstr	d5, [r7]
    /*------------------Initialize pins------------------*/ 
    // Initialize given pins
    // pinMode(encoder, INPUT); // not needed since we use HAL library
    // pinMode(pwm, OUTPUT);

    if(escType == CYTRON){
 80023b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ba:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d107      	bne.n	80023d2 <_ZN13RoverArmMotor5beginEdddddd+0x3a>
        // pinMode(dir, OUTPUT); // not needed since we use HAL library

        // Allow negative outputs, the sign will be interpreted as
        // the direction pin
        internalPIDInstance.SetOutputLimits(5, 99); // PWM duty cycle mn297 TOOD: check this
 80023c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c4:	ed9f 1b38 	vldr	d1, [pc, #224]	; 80024a8 <_ZN13RoverArmMotor5beginEdddddd+0x110>
 80023c8:	ed9f 0b39 	vldr	d0, [pc, #228]	; 80024b0 <_ZN13RoverArmMotor5beginEdddddd+0x118>
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 faee 	bl	80029ae <_ZN3PID15SetOutputLimitsEdd>
    //     // internalServoInstance.attach(pwm);
    //     internalServoInstance.attach(pwm, 1100, 1900, 1500); // mn297
    // }
    
    /*------------------Initialize moving average------------------*/
    internalAveragerInstance.begin();
 80023d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d4:	3370      	adds	r3, #112	; 0x70
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fa07 	bl	80027ea <_ZN9movingAvg5beginEv>

    /*------------------Initialize PID------------------*/
    internalPIDInstance.Init();
 80023dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fa8d 	bl	80028fe <_ZN3PID4InitEv>
    internalPIDInstance.SetMode(_PID_MODE_AUTOMATIC);
 80023e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e6:	2101      	movs	r1, #1
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fac2 	bl	8002972 <_ZN3PID7SetModeE15PIDMode_TypeDef>
    /*------------------Get setpoint------------------*/
    // Get current location and set it as setpoint. Essential to prevent jerkiness
    // as the microcontroller initializes.
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    //after setup, currentAngle is same as setpoint
    currentAngle = get_current_angle();    // fix setpoint not equal to current angle
 80023ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80023f0:	f000 f910 	bl	8002614 <_ZN13RoverArmMotor17get_current_angleEv>
 80023f4:	eeb0 7a40 	vmov.f32	s14, s0
 80023f8:	eef0 7a60 	vmov.f32	s15, s1
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fe:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    setpoint = currentAngle;
 8002402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002404:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8002408:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800240a:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140



    /*------------------Set PID parameters------------------*/
    regularKp = regP;
 800240e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002410:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002414:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    regularKi = regI;
 8002418:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800241a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800241e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    regularKd = regD;
 8002422:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002428:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    aggressiveKp = aggP;
 800242c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800242e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002432:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    aggressiveKi = aggI;
 8002436:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002438:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800243c:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    aggressiveKd = aggD;
 8002440:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002442:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002446:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

    internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 800244a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800244c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244e:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8002452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002454:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245a:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 800245e:	eeb0 2a45 	vmov.f32	s4, s10
 8002462:	eef0 2a65 	vmov.f32	s5, s11
 8002466:	eeb0 1a46 	vmov.f32	s2, s12
 800246a:	eef0 1a66 	vmov.f32	s3, s13
 800246e:	eeb0 0a47 	vmov.f32	s0, s14
 8002472:	eef0 0a67 	vmov.f32	s1, s15
 8002476:	4610      	mov	r0, r2
 8002478:	f000 fb07 	bl	8002a8a <_ZN3PID10SetTuningsEddd>
    // if(brake)  engageBrake(); //use brake if there is one
    if (brake.valid != 0)  engageBrake(); //use brake if there is one
 800247c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247e:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <_ZN13RoverArmMotor5beginEdddddd+0xf4>
 8002486:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002488:	f000 f8ad 	bl	80025e6 <_ZN13RoverArmMotor11engageBrakeEv>

    //initialize the multiplier bool to false and the multiplier to 1. 
    wrist_waist = false; 
 800248c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    //multiplier = 1;
    gearRatio = 1;  //TODO check if this is correct
 8002494:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <_ZN13RoverArmMotor5beginEdddddd+0x120>)
 800249c:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150

}
 80024a0:	bf00      	nop
 80024a2:	3738      	adds	r7, #56	; 0x38
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	00000000 	.word	0x00000000
 80024ac:	4058c000 	.word	0x4058c000
 80024b0:	00000000 	.word	0x00000000
 80024b4:	40140000 	.word	0x40140000
 80024b8:	3ff00000 	.word	0x3ff00000

080024bc <_ZN13RoverArmMotor14set_PID_paramsEdddddd>:

    //------------------Update angle------------------//
    lastAngle = currentAngle;
    
}
void RoverArmMotor::set_PID_params(double aggP, double aggI, double aggD, double regP, double regI, double regD) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08e      	sub	sp, #56	; 0x38
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6378      	str	r0, [r7, #52]	; 0x34
 80024c4:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80024c8:	ed87 1b08 	vstr	d1, [r7, #32]
 80024cc:	ed87 2b06 	vstr	d2, [r7, #24]
 80024d0:	ed87 3b04 	vstr	d3, [r7, #16]
 80024d4:	ed87 4b02 	vstr	d4, [r7, #8]
 80024d8:	ed87 5b00 	vstr	d5, [r7]
    regularKp = regP;
 80024dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024e2:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    regularKi = regI;
 80024e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024ec:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    regularKd = regD;
 80024f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024f6:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    aggressiveKp = aggP;
 80024fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002500:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    aggressiveKi = aggI;
 8002504:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800250a:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    aggressiveKd = aggD;
 800250e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002514:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 8002518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800251a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251c:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8002520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002522:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 800252c:	eeb0 2a45 	vmov.f32	s4, s10
 8002530:	eef0 2a65 	vmov.f32	s5, s11
 8002534:	eeb0 1a46 	vmov.f32	s2, s12
 8002538:	eef0 1a66 	vmov.f32	s3, s13
 800253c:	eeb0 0a47 	vmov.f32	s0, s14
 8002540:	eef0 0a67 	vmov.f32	s1, s15
 8002544:	4610      	mov	r0, r2
 8002546:	f000 faa0 	bl	8002a8a <_ZN3PID10SetTuningsEddd>
}
 800254a:	bf00      	nop
 800254c:	3738      	adds	r7, #56	; 0x38
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_ZN13RoverArmMotor14setAngleLimitsEdd>:

// void RoverArmMotor::setGearRatio(double ratio){
//     gearRatio = ratio;
// }

void RoverArmMotor::setAngleLimits(double lowest, double highest){
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	6178      	str	r0, [r7, #20]
 800255a:	ed87 0b02 	vstr	d0, [r7, #8]
 800255e:	ed87 1b00 	vstr	d1, [r7]
    lowestAngle = lowest * gearRatio;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 8002568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800256c:	f7fe f844 	bl	80005f8 <__aeabi_dmul>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	6979      	ldr	r1, [r7, #20]
 8002576:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = highest * gearRatio;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 8002580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002584:	f7fe f838 	bl	80005f8 <__aeabi_dmul>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	6979      	ldr	r1, [r7, #20]
 800258e:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <_ZN13RoverArmMotor13reset_encoderEv>:

void RoverArmMotor::set_zero_angle(){
    setZeroSPI(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
}
void RoverArmMotor::reset_encoder(){
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
    resetAMT22(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 80025b4:	2300      	movs	r3, #0
 80025b6:	f005 fae4 	bl	8007b82 <resetAMT22>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <_ZN13RoverArmMotor17set_zero_angle_swEv>:
void RoverArmMotor::set_zero_angle_sw(){
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
    zero_angle_sw = this->get_current_angle();
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f822 	bl	8002614 <_ZN13RoverArmMotor17get_current_angleEv>
 80025d0:	eeb0 7a40 	vmov.f32	s14, s0
 80025d4:	eef0 7a60 	vmov.f32	s15, s1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160
}  //mn297 software zero angle
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_ZN13RoverArmMotor11engageBrakeEv>:
    //   digitalWrite(brake, LOW);  
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_RESET); //mn297
    }
}

void RoverArmMotor::engageBrake(){
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
    if(brake.valid != 0){
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <_ZN13RoverArmMotor11engageBrakeEv+0x26>
    //    digitalWrite(brake, HIGH); 
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_SET); //mn297
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8002604:	2201      	movs	r2, #1
 8002606:	4619      	mov	r1, r3
 8002608:	f001 f854 	bl	80036b4 <HAL_GPIO_WritePin>
    }
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <_ZN13RoverArmMotor17get_current_angleEv>:
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
    adcResult = internalAveragerInstance.reading(encoderData);  // implicit cast to int
    currentAngle = mapFloat((float) adcResult, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
    return currentAngle / gearRatio;
}
double RoverArmMotor::get_current_angle(){    //mn297
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af02      	add	r7, sp, #8
 800261a:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 800262e:	2300      	movs	r3, #0
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	230c      	movs	r3, #12
 8002634:	f005 fa15 	bl	8007a62 <getPositionSPI>
 8002638:	4603      	mov	r3, r0
 800263a:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 800263c:	89fb      	ldrh	r3, [r7, #14]
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002646:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8002694 <_ZN13RoverArmMotor17get_current_angleEv+0x80>
 800264a:	eddf 1a13 	vldr	s3, [pc, #76]	; 8002698 <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 800264e:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800269c <_ZN13RoverArmMotor17get_current_angleEv+0x88>
 8002652:	eddf 0a11 	vldr	s1, [pc, #68]	; 8002698 <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 8002656:	eeb0 0a67 	vmov.f32	s0, s15
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f88a 	bl	8002774 <_ZN13RoverArmMotor8mapFloatEfffff>
 8002660:	eeb0 7a40 	vmov.f32	s14, s0
 8002664:	eef0 7a60 	vmov.f32	s15, s1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    return currentAngle / gearRatio;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800267a:	f7fe f8e7 	bl	800084c <__aeabi_ddiv>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	ec43 2b17 	vmov	d7, r2, r3
}
 8002686:	eeb0 0a47 	vmov.f32	s0, s14
 800268a:	eef0 0a67 	vmov.f32	s1, s15
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	43b38000 	.word	0x43b38000
 8002698:	00000000 	.word	0x00000000
 800269c:	457ff000 	.word	0x457ff000

080026a0 <_ZN13RoverArmMotor20get_current_angle_swEv>:
double RoverArmMotor::get_current_angle_sw(){    //TODO mn297
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 80026ba:	2300      	movs	r3, #0
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	230c      	movs	r3, #12
 80026c0:	f005 f9cf 	bl	8007a62 <getPositionSPI>
 80026c4:	4603      	mov	r3, r0
 80026c6:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 80026c8:	89fb      	ldrh	r3, [r7, #14]
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d2:	ed9f 2a24 	vldr	s4, [pc, #144]	; 8002764 <_ZN13RoverArmMotor20get_current_angle_swEv+0xc4>
 80026d6:	eddf 1a24 	vldr	s3, [pc, #144]	; 8002768 <_ZN13RoverArmMotor20get_current_angle_swEv+0xc8>
 80026da:	ed9f 1a24 	vldr	s2, [pc, #144]	; 800276c <_ZN13RoverArmMotor20get_current_angle_swEv+0xcc>
 80026de:	eddf 0a22 	vldr	s1, [pc, #136]	; 8002768 <_ZN13RoverArmMotor20get_current_angle_swEv+0xc8>
 80026e2:	eeb0 0a67 	vmov.f32	s0, s15
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f844 	bl	8002774 <_ZN13RoverArmMotor8mapFloatEfffff>
 80026ec:	eeb0 7a40 	vmov.f32	s14, s0
 80026f0:	eef0 7a60 	vmov.f32	s15, s1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    
    double diff = currentAngle - zero_angle_sw;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 8002706:	f7fd fdbf 	bl	8000288 <__aeabi_dsub>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if(diff < 0) diff += 360;
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800271e:	f7fe f9dd 	bl	8000adc <__aeabi_dcmplt>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <_ZN13RoverArmMotor20get_current_angle_swEv+0x9e>
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <_ZN13RoverArmMotor20get_current_angle_swEv+0xd0>)
 800272e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002732:	f7fd fdab 	bl	800028c <__adddf3>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return diff / gearRatio;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8002744:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002748:	f7fe f880 	bl	800084c <__aeabi_ddiv>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	ec43 2b17 	vmov	d7, r2, r3
}
 8002754:	eeb0 0a47 	vmov.f32	s0, s14
 8002758:	eef0 0a67 	vmov.f32	s1, s15
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	43b38000 	.word	0x43b38000
 8002768:	00000000 	.word	0x00000000
 800276c:	457ff000 	.word	0x457ff000
 8002770:	40768000 	.word	0x40768000

08002774 <_ZN13RoverArmMotor8mapFloatEfffff>:

double RoverArmMotor::getCurrentOutput(){
    return output;
}

double RoverArmMotor::mapFloat(float x, float in_min, float in_max, float out_min, float out_max){
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6178      	str	r0, [r7, #20]
 800277c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002780:	edc7 0a03 	vstr	s1, [r7, #12]
 8002784:	ed87 1a02 	vstr	s2, [r7, #8]
 8002788:	edc7 1a01 	vstr	s3, [r7, #4]
 800278c:	ed87 2a00 	vstr	s4, [r7]
    double result = ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8002790:	ed97 7a04 	vldr	s14, [r7, #16]
 8002794:	edd7 7a03 	vldr	s15, [r7, #12]
 8002798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800279c:	edd7 6a00 	vldr	s13, [r7]
 80027a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80027a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80027a8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80027ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80027b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80027b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80027c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c4:	ee17 0a90 	vmov	r0, s15
 80027c8:	f7fd febe 	bl	8000548 <__aeabi_f2d>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result; 
 80027d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d8:	ec43 2b17 	vmov	d7, r2, r3
    }
 80027dc:	eeb0 0a47 	vmov.f32	s0, s14
 80027e0:	eef0 0a67 	vmov.f32	s1, s15
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <_ZN9movingAvg5beginEv>:

#include <movingAvg.h>

// initialize - allocate the interval array
void movingAvg::begin()
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
    m_readings = new int[m_interval];
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d201      	bcs.n	8002802 <_ZN9movingAvg5beginEv+0x18>
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	e001      	b.n	8002806 <_ZN9movingAvg5beginEv+0x1c>
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	4618      	mov	r0, r3
 8002808:	f005 f9fe 	bl	8007c08 <_Znaj>
 800280c:	4603      	mov	r3, r0
 800280e:	461a      	mov	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	611a      	str	r2, [r3, #16]
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	0000      	movs	r0, r0
	...

08002820 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~ Constructor ~~~~~~~~~~~~~~~~ */
PID::PID() { }

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6278      	str	r0, [r7, #36]	; 0x24
 8002828:	6239      	str	r1, [r7, #32]
 800282a:	61fa      	str	r2, [r7, #28]
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002832:	ed87 1b02 	vstr	d1, [r7, #8]
 8002836:	ed87 2b00 	vstr	d2, [r7]
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_myOutput   = Output;
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	645a      	str	r2, [r3, #68]	; 0x44
	_myInput    = Input;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	6a3a      	ldr	r2, [r7, #32]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
	_mySetpoint = Setpoint;
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	649a      	str	r2, [r3, #72]	; 0x48
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	2200      	movs	r2, #0
 8002850:	705a      	strb	r2, [r3, #1]
	
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8002852:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80028a8 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x88>
 8002856:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80028b0 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x90>
 800285a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800285c:	f000 f8a7 	bl	80029ae <_ZN3PID15SetOutputLimitsEdd>
	
	_sampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	2264      	movs	r2, #100	; 0x64
 8002864:	609a      	str	r2, [r3, #8]
	
	PID::SetControllerDirection(ControllerDirection);
 8002866:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800286a:	4619      	mov	r1, r3
 800286c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800286e:	f000 f9cf 	bl	8002c10 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>
	PID::SetTunings(Kp, Ki, Kd, POn);
 8002872:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002876:	4619      	mov	r1, r3
 8002878:	ed97 2b00 	vldr	d2, [r7]
 800287c:	ed97 1b02 	vldr	d1, [r7, #8]
 8002880:	ed97 0b04 	vldr	d0, [r7, #16]
 8002884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002886:	f000 f91b 	bl	8002ac0 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
	
	_lastTime = GetTime() - _sampleTime;
 800288a:	f000 fa71 	bl	8002d70 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	1ad2      	subs	r2, r2, r3
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	605a      	str	r2, [r3, #4]
	
}
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	4618      	mov	r0, r3
 800289e:	3728      	adds	r7, #40	; 0x28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	f3af 8000 	nop.w
 80028a8:	00000000 	.word	0x00000000
 80028ac:	406fe000 	.word	0x406fe000
	...

080028b8 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>:

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection) : PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection)
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	; 0x30
 80028bc:	af02      	add	r7, sp, #8
 80028be:	6278      	str	r0, [r7, #36]	; 0x24
 80028c0:	6239      	str	r1, [r7, #32]
 80028c2:	61fa      	str	r2, [r7, #28]
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	ed87 0b04 	vstr	d0, [r7, #16]
 80028ca:	ed87 1b02 	vstr	d1, [r7, #8]
 80028ce:	ed87 2b00 	vstr	d2, [r7]
 80028d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	2301      	movs	r3, #1
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	ed97 2b00 	vldr	d2, [r7]
 80028e0:	ed97 1b02 	vldr	d1, [r7, #8]
 80028e4:	ed97 0b04 	vldr	d0, [r7, #16]
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	6a39      	ldr	r1, [r7, #32]
 80028ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028f0:	f7ff ff96 	bl	8002820 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>
{ }
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	4618      	mov	r0, r3
 80028f8:	3728      	adds	r7, #40	; 0x28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <_ZN3PID4InitEv>:



/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	_lastInput = *_myInput;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (_outputSum > _outMax)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800292e:	f7fe f8f3 	bl	8000b18 <__aeabi_dcmpgt>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d006      	beq.n	8002946 <_ZN3PID4InitEv+0x48>
	{
		_outputSum = _outMax;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		_outputSum = _outMin;
	}
	else { }	
	
}
 8002944:	e011      	b.n	800296a <_ZN3PID4InitEv+0x6c>
	else if (_outputSum < _outMin)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002952:	f7fe f8c3 	bl	8000adc <__aeabi_dcmplt>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d100      	bne.n	800295e <_ZN3PID4InitEv+0x60>
}
 800295c:	e005      	b.n	800296a <_ZN3PID4InitEv+0x6c>
		_outputSum = _outMin;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <_ZN3PID7SetModeE15PIDMode_TypeDef>:
	
}

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID::SetMode(PIDMode_TypeDef Mode)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	460b      	mov	r3, r1
 800297c:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	2b01      	cmp	r3, #1
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !_inAuto)
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	785b      	ldrb	r3, [r3, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
	{
		Init();
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ffaf 	bl	80028fe <_ZN3PID4InitEv>
	}
	
	_inAuto = (PIDMode_TypeDef)newAuto;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	705a      	strb	r2, [r3, #1]
	
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <_ZN3PID15SetOutputLimitsEdd>:
	return _inAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(double Min, double Max)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6178      	str	r0, [r7, #20]
 80029b6:	ed87 0b02 	vstr	d0, [r7, #8]
 80029ba:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80029be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029c6:	f7fe f89d 	bl	8000b04 <__aeabi_dcmpge>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d158      	bne.n	8002a82 <_ZN3PID15SetOutputLimitsEdd+0xd4>
	{
		return;
	}
	
	_outMin = Min;
 80029d0:	6979      	ldr	r1, [r7, #20]
 80029d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029d6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	_outMax = Max;
 80029da:	6979      	ldr	r1, [r7, #20]
 80029dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029e0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d04b      	beq.n	8002a84 <_ZN3PID15SetOutputLimitsEdd+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80029fa:	f7fe f88d 	bl	8000b18 <__aeabi_dcmpgt>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <_ZN3PID15SetOutputLimitsEdd+0x66>
		{
			*_myOutput = _outMax;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a0e:	e9c1 2300 	strd	r2, r3, [r1]
 8002a12:	e012      	b.n	8002a3a <_ZN3PID15SetOutputLimitsEdd+0x8c>
		}
		else if (*_myOutput < _outMin)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a22:	f7fe f85b 	bl	8000adc <__aeabi_dcmplt>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d006      	beq.n	8002a3a <_ZN3PID15SetOutputLimitsEdd+0x8c>
		{
			*_myOutput = _outMin;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a36:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a46:	f7fe f867 	bl	8000b18 <__aeabi_dcmpgt>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d006      	beq.n	8002a5e <_ZN3PID15SetOutputLimitsEdd+0xb0>
		{
			_outputSum = _outMax;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a56:	6979      	ldr	r1, [r7, #20]
 8002a58:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002a5c:	e012      	b.n	8002a84 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		}
		else if (_outputSum < _outMin)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a6a:	f7fe f837 	bl	8000adc <__aeabi_dcmplt>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		{
			_outputSum = _outMin;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a7a:	6979      	ldr	r1, [r7, #20]
 8002a7c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002a80:	e000      	b.n	8002a84 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		return;
 8002a82:	bf00      	nop
		}
		else { }
		
	}
	
}
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <_ZN3PID10SetTuningsEddd>:

/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID::SetTunings(double Kp, double Ki, double Kd)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b088      	sub	sp, #32
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	61f8      	str	r0, [r7, #28]
 8002a92:	ed87 0b04 	vstr	d0, [r7, #16]
 8002a96:	ed87 1b02 	vstr	d1, [r7, #8]
 8002a9a:	ed87 2b00 	vstr	d2, [r7]
	PID::SetTunings(Kp, Ki, Kd, _pOn);
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	789b      	ldrb	r3, [r3, #2]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	ed97 2b00 	vldr	d2, [r7]
 8002aa8:	ed97 1b02 	vldr	d1, [r7, #8]
 8002aac:	ed97 0b04 	vldr	d0, [r7, #16]
 8002ab0:	69f8      	ldr	r0, [r7, #28]
 8002ab2:	f000 f805 	bl	8002ac0 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
}
 8002ab6:	bf00      	nop
 8002ab8:	3720      	adds	r7, #32
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>:
void PID::SetTunings(double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08a      	sub	sp, #40	; 0x28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	61f8      	str	r0, [r7, #28]
 8002ac8:	ed87 0b04 	vstr	d0, [r7, #16]
 8002acc:	ed87 1b02 	vstr	d1, [r7, #8]
 8002ad0:	ed87 2b00 	vstr	d2, [r7]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ae4:	f7fd fffa 	bl	8000adc <__aeabi_dcmplt>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 8089 	bne.w	8002c02 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002afc:	f7fd ffee 	bl	8000adc <__aeabi_dcmplt>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d17d      	bne.n	8002c02 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b12:	f7fd ffe3 	bl	8000adc <__aeabi_dcmplt>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d172      	bne.n	8002c02 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	_pOn    = POn;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	7efa      	ldrb	r2, [r7, #27]
 8002b20:	709a      	strb	r2, [r3, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002b22:	7efb      	ldrb	r3, [r7, #27]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	701a      	strb	r2, [r3, #0]

	_dispKp = Kp;
 8002b34:	69f9      	ldr	r1, [r7, #28]
 8002b36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b3a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_dispKi = Ki;
 8002b3e:	69f9      	ldr	r1, [r7, #28]
 8002b40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b44:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_dispKd = Kd;
 8002b48:	69f9      	ldr	r1, [r7, #28]
 8002b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b4e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)_sampleTime) / 1000;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fcd4 	bl	8000504 <__aeabi_ui2d>
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x14c>)
 8002b62:	f7fd fe73 	bl	800084c <__aeabi_ddiv>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	_kp = Kp;
 8002b6e:	69f9      	ldr	r1, [r7, #28]
 8002b70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b74:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	_ki = Ki * SampleTimeInSec;
 8002b78:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b80:	f7fd fd3a 	bl	80005f8 <__aeabi_dmul>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	69f9      	ldr	r1, [r7, #28]
 8002b8a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	_kd = Kd / SampleTimeInSec;
 8002b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b96:	f7fd fe59 	bl	800084c <__aeabi_ddiv>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	69f9      	ldr	r1, [r7, #28]
 8002ba0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (_controllerDirection == _PID_CD_REVERSE)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	78db      	ldrb	r3, [r3, #3]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d12b      	bne.n	8002c04 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
	{
		
		_kp = (0 - _kp);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002bb2:	f04f 0000 	mov.w	r0, #0
 8002bb6:	f04f 0100 	mov.w	r1, #0
 8002bba:	f7fd fb65 	bl	8000288 <__aeabi_dsub>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	69f9      	ldr	r1, [r7, #28]
 8002bc4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002bce:	f04f 0000 	mov.w	r0, #0
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	f7fd fb57 	bl	8000288 <__aeabi_dsub>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	69f9      	ldr	r1, [r7, #28]
 8002be0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002bea:	f04f 0000 	mov.w	r0, #0
 8002bee:	f04f 0100 	mov.w	r1, #0
 8002bf2:	f7fd fb49 	bl	8000288 <__aeabi_dsub>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	69f9      	ldr	r1, [r7, #28]
 8002bfc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002c00:	e000      	b.n	8002c04 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
		return;
 8002c02:	bf00      	nop
		
	}
	
}
 8002c04:	3728      	adds	r7, #40	; 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	408f4000 	.word	0x408f4000

08002c10 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	785b      	ldrb	r3, [r3, #1]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d02e      	beq.n	8002c82 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	78db      	ldrb	r3, [r3, #3]
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d029      	beq.n	8002c82 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
	{
		
		_kp = (0 - _kp);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c34:	f04f 0000 	mov.w	r0, #0
 8002c38:	f04f 0100 	mov.w	r1, #0
 8002c3c:	f7fd fb24 	bl	8000288 <__aeabi_dsub>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c50:	f04f 0000 	mov.w	r0, #0
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	f7fd fb16 	bl	8000288 <__aeabi_dsub>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c6c:	f04f 0000 	mov.w	r0, #0
 8002c70:	f04f 0100 	mov.w	r1, #0
 8002c74:	f7fd fb08 	bl	8000288 <__aeabi_dsub>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	_controllerDirection = Direction;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	70da      	strb	r2, [r3, #3]
	
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_Init+0x3c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <HAL_Init+0x3c>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca6:	2003      	movs	r0, #3
 8002ca8:	f000 f962 	bl	8002f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cac:	2000      	movs	r0, #0
 8002cae:	f000 f80f 	bl	8002cd0 <HAL_InitTick>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	71fb      	strb	r3, [r7, #7]
 8002cbc:	e001      	b.n	8002cc2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cbe:	f7fe fead 	bl	8001a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40022000 	.word	0x40022000

08002cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002cdc:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <HAL_InitTick+0x6c>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d023      	beq.n	8002d2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <HAL_InitTick+0x70>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <HAL_InitTick+0x6c>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	4619      	mov	r1, r3
 8002cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f96d 	bl	8002fda <HAL_SYSTICK_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10f      	bne.n	8002d26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b0f      	cmp	r3, #15
 8002d0a:	d809      	bhi.n	8002d20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295
 8002d14:	f000 f937 	bl	8002f86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d18:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <HAL_InitTick+0x74>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e007      	b.n	8002d30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
 8002d24:	e004      	b.n	8002d30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
 8002d2a:	e001      	b.n	8002d30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000038 	.word	0x20000038
 8002d40:	20000030 	.word	0x20000030
 8002d44:	20000034 	.word	0x20000034

08002d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_IncTick+0x20>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_IncTick+0x24>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <HAL_IncTick+0x24>)
 8002d5a:	6013      	str	r3, [r2, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	20000038 	.word	0x20000038
 8002d6c:	20000658 	.word	0x20000658

08002d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return uwTick;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_GetTick+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000658 	.word	0x20000658

08002d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d90:	f7ff ffee 	bl	8002d70 <HAL_GetTick>
 8002d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d005      	beq.n	8002dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <HAL_Delay+0x44>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dae:	bf00      	nop
 8002db0:	f7ff ffde 	bl	8002d70 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d8f7      	bhi.n	8002db0 <HAL_Delay+0x28>
  {
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000038 	.word	0x20000038

08002dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <__NVIC_SetPriorityGrouping+0x44>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dec:	4013      	ands	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e02:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <__NVIC_SetPriorityGrouping+0x44>)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	60d3      	str	r3, [r2, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <__NVIC_GetPriorityGrouping+0x18>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	0a1b      	lsrs	r3, r3, #8
 8002e22:	f003 0307 	and.w	r3, r3, #7
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	db0b      	blt.n	8002e5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	4907      	ldr	r1, [pc, #28]	; (8002e6c <__NVIC_EnableIRQ+0x38>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	2001      	movs	r0, #1
 8002e56:	fa00 f202 	lsl.w	r2, r0, r2
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000e100 	.word	0xe000e100

08002e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	6039      	str	r1, [r7, #0]
 8002e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	db0a      	blt.n	8002e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	490c      	ldr	r1, [pc, #48]	; (8002ebc <__NVIC_SetPriority+0x4c>)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	0112      	lsls	r2, r2, #4
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	440b      	add	r3, r1
 8002e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e98:	e00a      	b.n	8002eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	4908      	ldr	r1, [pc, #32]	; (8002ec0 <__NVIC_SetPriority+0x50>)
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	3b04      	subs	r3, #4
 8002ea8:	0112      	lsls	r2, r2, #4
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	440b      	add	r3, r1
 8002eae:	761a      	strb	r2, [r3, #24]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000e100 	.word	0xe000e100
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f1c3 0307 	rsb	r3, r3, #7
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	bf28      	it	cs
 8002ee2:	2304      	movcs	r3, #4
 8002ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d902      	bls.n	8002ef4 <NVIC_EncodePriority+0x30>
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3b03      	subs	r3, #3
 8002ef2:	e000      	b.n	8002ef6 <NVIC_EncodePriority+0x32>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43da      	mvns	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	401a      	ands	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	43d9      	mvns	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	4313      	orrs	r3, r2
         );
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f3c:	d301      	bcc.n	8002f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00f      	b.n	8002f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f42:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <SysTick_Config+0x40>)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f4a:	210f      	movs	r1, #15
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f50:	f7ff ff8e 	bl	8002e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f54:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <SysTick_Config+0x40>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f5a:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <SysTick_Config+0x40>)
 8002f5c:	2207      	movs	r2, #7
 8002f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	e000e010 	.word	0xe000e010

08002f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff ff29 	bl	8002dd0 <__NVIC_SetPriorityGrouping>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b086      	sub	sp, #24
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f98:	f7ff ff3e 	bl	8002e18 <__NVIC_GetPriorityGrouping>
 8002f9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	6978      	ldr	r0, [r7, #20]
 8002fa4:	f7ff ff8e 	bl	8002ec4 <NVIC_EncodePriority>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff5d 	bl	8002e70 <__NVIC_SetPriority>
}
 8002fb6:	bf00      	nop
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff31 	bl	8002e34 <__NVIC_EnableIRQ>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff ffa2 	bl	8002f2c <SysTick_Config>
 8002fe8:	4603      	mov	r3, r0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e098      	b.n	8003138 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	4b4d      	ldr	r3, [pc, #308]	; (8003144 <HAL_DMA_Init+0x150>)
 800300e:	429a      	cmp	r2, r3
 8003010:	d80f      	bhi.n	8003032 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	4b4b      	ldr	r3, [pc, #300]	; (8003148 <HAL_DMA_Init+0x154>)
 800301a:	4413      	add	r3, r2
 800301c:	4a4b      	ldr	r2, [pc, #300]	; (800314c <HAL_DMA_Init+0x158>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	091b      	lsrs	r3, r3, #4
 8003024:	009a      	lsls	r2, r3, #2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a48      	ldr	r2, [pc, #288]	; (8003150 <HAL_DMA_Init+0x15c>)
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
 8003030:	e00e      	b.n	8003050 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	4b46      	ldr	r3, [pc, #280]	; (8003154 <HAL_DMA_Init+0x160>)
 800303a:	4413      	add	r3, r2
 800303c:	4a43      	ldr	r2, [pc, #268]	; (800314c <HAL_DMA_Init+0x158>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	009a      	lsls	r2, r3, #2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a42      	ldr	r2, [pc, #264]	; (8003158 <HAL_DMA_Init+0x164>)
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030aa:	d039      	beq.n	8003120 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	4a27      	ldr	r2, [pc, #156]	; (8003150 <HAL_DMA_Init+0x15c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d11a      	bne.n	80030ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030b6:	4b29      	ldr	r3, [pc, #164]	; (800315c <HAL_DMA_Init+0x168>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f003 031c 	and.w	r3, r3, #28
 80030c2:	210f      	movs	r1, #15
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	4924      	ldr	r1, [pc, #144]	; (800315c <HAL_DMA_Init+0x168>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030d0:	4b22      	ldr	r3, [pc, #136]	; (800315c <HAL_DMA_Init+0x168>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030dc:	f003 031c 	and.w	r3, r3, #28
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	491d      	ldr	r1, [pc, #116]	; (800315c <HAL_DMA_Init+0x168>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
 80030ea:	e019      	b.n	8003120 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030ec:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <HAL_DMA_Init+0x16c>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	f003 031c 	and.w	r3, r3, #28
 80030f8:	210f      	movs	r1, #15
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	4917      	ldr	r1, [pc, #92]	; (8003160 <HAL_DMA_Init+0x16c>)
 8003102:	4013      	ands	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003106:	4b16      	ldr	r3, [pc, #88]	; (8003160 <HAL_DMA_Init+0x16c>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6859      	ldr	r1, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f003 031c 	and.w	r3, r3, #28
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	4911      	ldr	r1, [pc, #68]	; (8003160 <HAL_DMA_Init+0x16c>)
 800311c:	4313      	orrs	r3, r2
 800311e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	40020407 	.word	0x40020407
 8003148:	bffdfff8 	.word	0xbffdfff8
 800314c:	cccccccd 	.word	0xcccccccd
 8003150:	40020000 	.word	0x40020000
 8003154:	bffdfbf8 	.word	0xbffdfbf8
 8003158:	40020400 	.word	0x40020400
 800315c:	400200a8 	.word	0x400200a8
 8003160:	400204a8 	.word	0x400204a8

08003164 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d008      	beq.n	800318e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2204      	movs	r2, #4
 8003180:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e022      	b.n	80031d4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 020e 	bic.w	r2, r2, #14
 800319c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f003 021c 	and.w	r2, r3, #28
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f202 	lsl.w	r2, r1, r2
 80031c0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d005      	beq.n	8003204 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2204      	movs	r2, #4
 80031fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
 8003202:	e029      	b.n	8003258 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 020e 	bic.w	r2, r2, #14
 8003212:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	f003 021c 	and.w	r2, r3, #28
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	2101      	movs	r1, #1
 8003232:	fa01 f202 	lsl.w	r2, r1, r2
 8003236:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4798      	blx	r3
    }
  }
  return status;
 8003258:	7bfb      	ldrb	r3, [r7, #15]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f003 031c 	and.w	r3, r3, #28
 8003282:	2204      	movs	r2, #4
 8003284:	409a      	lsls	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d026      	beq.n	80032dc <HAL_DMA_IRQHandler+0x7a>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d021      	beq.n	80032dc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d107      	bne.n	80032b6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0204 	bic.w	r2, r2, #4
 80032b4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	f003 021c 	and.w	r2, r3, #28
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	2104      	movs	r1, #4
 80032c4:	fa01 f202 	lsl.w	r2, r1, r2
 80032c8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d071      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80032da:	e06c      	b.n	80033b6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	f003 031c 	and.w	r3, r3, #28
 80032e4:	2202      	movs	r2, #2
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d02e      	beq.n	800334e <HAL_DMA_IRQHandler+0xec>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d029      	beq.n	800334e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10b      	bne.n	8003320 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 020a 	bic.w	r2, r2, #10
 8003316:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	f003 021c 	and.w	r2, r3, #28
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	2102      	movs	r1, #2
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d038      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800334c:	e033      	b.n	80033b6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	f003 031c 	and.w	r3, r3, #28
 8003356:	2208      	movs	r2, #8
 8003358:	409a      	lsls	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d02a      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x156>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d025      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 020e 	bic.w	r2, r2, #14
 800337a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003380:	f003 021c 	and.w	r2, r3, #28
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	2101      	movs	r1, #1
 800338a:	fa01 f202 	lsl.w	r2, r1, r2
 800338e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d004      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033b6:	bf00      	nop
 80033b8:	bf00      	nop
}
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ce:	e154      	b.n	800367a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2101      	movs	r1, #1
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	4013      	ands	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8146 	beq.w	8003674 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d005      	beq.n	8003400 <HAL_GPIO_Init+0x40>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d130      	bne.n	8003462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003436:	2201      	movs	r2, #1
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0201 	and.w	r2, r3, #1
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b03      	cmp	r3, #3
 800346c:	d017      	beq.n	800349e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d123      	bne.n	80034f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	08da      	lsrs	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3208      	adds	r2, #8
 80034b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	08da      	lsrs	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3208      	adds	r2, #8
 80034ec:	6939      	ldr	r1, [r7, #16]
 80034ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0203 	and.w	r2, r3, #3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80a0 	beq.w	8003674 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003534:	4b58      	ldr	r3, [pc, #352]	; (8003698 <HAL_GPIO_Init+0x2d8>)
 8003536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003538:	4a57      	ldr	r2, [pc, #348]	; (8003698 <HAL_GPIO_Init+0x2d8>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6613      	str	r3, [r2, #96]	; 0x60
 8003540:	4b55      	ldr	r3, [pc, #340]	; (8003698 <HAL_GPIO_Init+0x2d8>)
 8003542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800354c:	4a53      	ldr	r2, [pc, #332]	; (800369c <HAL_GPIO_Init+0x2dc>)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	3302      	adds	r3, #2
 8003554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	220f      	movs	r2, #15
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003576:	d019      	beq.n	80035ac <HAL_GPIO_Init+0x1ec>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a49      	ldr	r2, [pc, #292]	; (80036a0 <HAL_GPIO_Init+0x2e0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d013      	beq.n	80035a8 <HAL_GPIO_Init+0x1e8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a48      	ldr	r2, [pc, #288]	; (80036a4 <HAL_GPIO_Init+0x2e4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00d      	beq.n	80035a4 <HAL_GPIO_Init+0x1e4>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a47      	ldr	r2, [pc, #284]	; (80036a8 <HAL_GPIO_Init+0x2e8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d007      	beq.n	80035a0 <HAL_GPIO_Init+0x1e0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a46      	ldr	r2, [pc, #280]	; (80036ac <HAL_GPIO_Init+0x2ec>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <HAL_GPIO_Init+0x1dc>
 8003598:	2304      	movs	r3, #4
 800359a:	e008      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 800359c:	2307      	movs	r3, #7
 800359e:	e006      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035a0:	2303      	movs	r3, #3
 80035a2:	e004      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e002      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035ac:	2300      	movs	r3, #0
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	f002 0203 	and.w	r2, r2, #3
 80035b4:	0092      	lsls	r2, r2, #2
 80035b6:	4093      	lsls	r3, r2
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035be:	4937      	ldr	r1, [pc, #220]	; (800369c <HAL_GPIO_Init+0x2dc>)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	3302      	adds	r3, #2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035cc:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035f0:	4a2f      	ldr	r2, [pc, #188]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035f6:	4b2e      	ldr	r3, [pc, #184]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800361a:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003620:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	43db      	mvns	r3, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003644:	4a1a      	ldr	r2, [pc, #104]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800364a:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800366e:	4a10      	ldr	r2, [pc, #64]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	3301      	adds	r3, #1
 8003678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	f47f aea3 	bne.w	80033d0 <HAL_GPIO_Init+0x10>
  }
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	40021000 	.word	0x40021000
 800369c:	40010000 	.word	0x40010000
 80036a0:	48000400 	.word	0x48000400
 80036a4:	48000800 	.word	0x48000800
 80036a8:	48000c00 	.word	0x48000c00
 80036ac:	48001000 	.word	0x48001000
 80036b0:	40010400 	.word	0x40010400

080036b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
 80036c0:	4613      	mov	r3, r2
 80036c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c4:	787b      	ldrb	r3, [r7, #1]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ca:	887a      	ldrh	r2, [r7, #2]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036d0:	e002      	b.n	80036d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036f6:	887a      	ldrh	r2, [r7, #2]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4013      	ands	r3, r2
 80036fc:	041a      	lsls	r2, r3, #16
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	43d9      	mvns	r1, r3
 8003702:	887b      	ldrh	r3, [r7, #2]
 8003704:	400b      	ands	r3, r1
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d006      	beq.n	800373c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800372e:	4a05      	ldr	r2, [pc, #20]	; (8003744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd ff42 	bl	80015c0 <HAL_GPIO_EXTI_Callback>
  }
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40010400 	.word	0x40010400

08003748 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800374c:	4b04      	ldr	r3, [pc, #16]	; (8003760 <HAL_PWREx_GetVoltageRange+0x18>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40007000 	.word	0x40007000

08003764 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003772:	d130      	bne.n	80037d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003774:	4b23      	ldr	r3, [pc, #140]	; (8003804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800377c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003780:	d038      	beq.n	80037f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003782:	4b20      	ldr	r3, [pc, #128]	; (8003804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800378a:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800378c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003790:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003792:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2232      	movs	r2, #50	; 0x32
 8003798:	fb02 f303 	mul.w	r3, r2, r3
 800379c:	4a1b      	ldr	r2, [pc, #108]	; (800380c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	0c9b      	lsrs	r3, r3, #18
 80037a4:	3301      	adds	r3, #1
 80037a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037a8:	e002      	b.n	80037b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037b0:	4b14      	ldr	r3, [pc, #80]	; (8003804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037bc:	d102      	bne.n	80037c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1f2      	bne.n	80037aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037c4:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d0:	d110      	bne.n	80037f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e00f      	b.n	80037f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e2:	d007      	beq.n	80037f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037e4:	4b07      	ldr	r3, [pc, #28]	; (8003804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037ec:	4a05      	ldr	r2, [pc, #20]	; (8003804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40007000 	.word	0x40007000
 8003808:	20000030 	.word	0x20000030
 800380c:	431bde83 	.word	0x431bde83

08003810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f000 bc02 	b.w	8004028 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003824:	4b96      	ldr	r3, [pc, #600]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 030c 	and.w	r3, r3, #12
 800382c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800382e:	4b94      	ldr	r3, [pc, #592]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80e4 	beq.w	8003a0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <HAL_RCC_OscConfig+0x4c>
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	2b0c      	cmp	r3, #12
 8003850:	f040 808b 	bne.w	800396a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b01      	cmp	r3, #1
 8003858:	f040 8087 	bne.w	800396a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800385c:	4b88      	ldr	r3, [pc, #544]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_OscConfig+0x64>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e3d9      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1a      	ldr	r2, [r3, #32]
 8003878:	4b81      	ldr	r3, [pc, #516]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d004      	beq.n	800388e <HAL_RCC_OscConfig+0x7e>
 8003884:	4b7e      	ldr	r3, [pc, #504]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800388c:	e005      	b.n	800389a <HAL_RCC_OscConfig+0x8a>
 800388e:	4b7c      	ldr	r3, [pc, #496]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800389a:	4293      	cmp	r3, r2
 800389c:	d223      	bcs.n	80038e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fd8c 	bl	80043c0 <RCC_SetFlashLatencyFromMSIRange>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e3ba      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038b2:	4b73      	ldr	r3, [pc, #460]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a72      	ldr	r2, [pc, #456]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80038b8:	f043 0308 	orr.w	r3, r3, #8
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b70      	ldr	r3, [pc, #448]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	496d      	ldr	r1, [pc, #436]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038d0:	4b6b      	ldr	r3, [pc, #428]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	4968      	ldr	r1, [pc, #416]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
 80038e4:	e025      	b.n	8003932 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038e6:	4b66      	ldr	r3, [pc, #408]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a65      	ldr	r2, [pc, #404]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80038ec:	f043 0308 	orr.w	r3, r3, #8
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b63      	ldr	r3, [pc, #396]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	4960      	ldr	r1, [pc, #384]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003900:	4313      	orrs	r3, r2
 8003902:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003904:	4b5e      	ldr	r3, [pc, #376]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	495b      	ldr	r1, [pc, #364]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fd4c 	bl	80043c0 <RCC_SetFlashLatencyFromMSIRange>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e37a      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003932:	f000 fc81 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 8003936:	4602      	mov	r2, r0
 8003938:	4b51      	ldr	r3, [pc, #324]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	4950      	ldr	r1, [pc, #320]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003944:	5ccb      	ldrb	r3, [r1, r3]
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	fa22 f303 	lsr.w	r3, r2, r3
 800394e:	4a4e      	ldr	r2, [pc, #312]	; (8003a88 <HAL_RCC_OscConfig+0x278>)
 8003950:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003952:	4b4e      	ldr	r3, [pc, #312]	; (8003a8c <HAL_RCC_OscConfig+0x27c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff f9ba 	bl	8002cd0 <HAL_InitTick>
 800395c:	4603      	mov	r3, r0
 800395e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d052      	beq.n	8003a0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	e35e      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d032      	beq.n	80039d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003972:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a42      	ldr	r2, [pc, #264]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800397e:	f7ff f9f7 	bl	8002d70 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003986:	f7ff f9f3 	bl	8002d70 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e347      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003998:	4b39      	ldr	r3, [pc, #228]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039a4:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a35      	ldr	r2, [pc, #212]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039aa:	f043 0308 	orr.w	r3, r3, #8
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4b33      	ldr	r3, [pc, #204]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	4930      	ldr	r1, [pc, #192]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039c2:	4b2f      	ldr	r3, [pc, #188]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	492b      	ldr	r1, [pc, #172]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	604b      	str	r3, [r1, #4]
 80039d6:	e01a      	b.n	8003a0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039d8:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039e4:	f7ff f9c4 	bl	8002d70 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039ec:	f7ff f9c0 	bl	8002d70 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e314      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x1dc>
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d073      	beq.n	8003b02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_OscConfig+0x21c>
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d10e      	bne.n	8003a44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d10b      	bne.n	8003a44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2c:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d063      	beq.n	8003b00 <HAL_RCC_OscConfig+0x2f0>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d15f      	bne.n	8003b00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e2f1      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4c:	d106      	bne.n	8003a5c <HAL_RCC_OscConfig+0x24c>
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a0b      	ldr	r2, [pc, #44]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e025      	b.n	8003aa8 <HAL_RCC_OscConfig+0x298>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a64:	d114      	bne.n	8003a90 <HAL_RCC_OscConfig+0x280>
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a05      	ldr	r2, [pc, #20]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a02      	ldr	r2, [pc, #8]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e013      	b.n	8003aa8 <HAL_RCC_OscConfig+0x298>
 8003a80:	40021000 	.word	0x40021000
 8003a84:	0800d4a8 	.word	0x0800d4a8
 8003a88:	20000030 	.word	0x20000030
 8003a8c:	20000034 	.word	0x20000034
 8003a90:	4ba0      	ldr	r3, [pc, #640]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a9f      	ldr	r2, [pc, #636]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	4b9d      	ldr	r3, [pc, #628]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a9c      	ldr	r2, [pc, #624]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7ff f95e 	bl	8002d70 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7ff f95a 	bl	8002d70 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e2ae      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aca:	4b92      	ldr	r3, [pc, #584]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x2a8>
 8003ad6:	e014      	b.n	8003b02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7ff f94a 	bl	8002d70 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae0:	f7ff f946 	bl	8002d70 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	; 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e29a      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003af2:	4b88      	ldr	r3, [pc, #544]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x2d0>
 8003afe:	e000      	b.n	8003b02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d060      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_OscConfig+0x310>
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b0c      	cmp	r3, #12
 8003b18:	d119      	bne.n	8003b4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d116      	bne.n	8003b4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b20:	4b7c      	ldr	r3, [pc, #496]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_OscConfig+0x328>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e277      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b38:	4b76      	ldr	r3, [pc, #472]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	061b      	lsls	r3, r3, #24
 8003b46:	4973      	ldr	r1, [pc, #460]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b4c:	e040      	b.n	8003bd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d023      	beq.n	8003b9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b56:	4b6f      	ldr	r3, [pc, #444]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a6e      	ldr	r2, [pc, #440]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7ff f905 	bl	8002d70 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6a:	f7ff f901 	bl	8002d70 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e255      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b7c:	4b65      	ldr	r3, [pc, #404]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b88:	4b62      	ldr	r3, [pc, #392]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	495f      	ldr	r1, [pc, #380]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	604b      	str	r3, [r1, #4]
 8003b9c:	e018      	b.n	8003bd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b9e:	4b5d      	ldr	r3, [pc, #372]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a5c      	ldr	r2, [pc, #368]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7ff f8e1 	bl	8002d70 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb2:	f7ff f8dd 	bl	8002d70 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e231      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bc4:	4b53      	ldr	r3, [pc, #332]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f0      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d03c      	beq.n	8003c56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d01c      	beq.n	8003c1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be4:	4b4b      	ldr	r3, [pc, #300]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bea:	4a4a      	ldr	r2, [pc, #296]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7ff f8bc 	bl	8002d70 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bfc:	f7ff f8b8 	bl	8002d70 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e20c      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c0e:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0ef      	beq.n	8003bfc <HAL_RCC_OscConfig+0x3ec>
 8003c1c:	e01b      	b.n	8003c56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c1e:	4b3d      	ldr	r3, [pc, #244]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c24:	4a3b      	ldr	r2, [pc, #236]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003c26:	f023 0301 	bic.w	r3, r3, #1
 8003c2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2e:	f7ff f89f 	bl	8002d70 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c36:	f7ff f89b 	bl	8002d70 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e1ef      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c48:	4b32      	ldr	r3, [pc, #200]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1ef      	bne.n	8003c36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80a6 	beq.w	8003db0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c64:	2300      	movs	r3, #0
 8003c66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c68:	4b2a      	ldr	r3, [pc, #168]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10d      	bne.n	8003c90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c74:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c78:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c80:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c90:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <HAL_RCC_OscConfig+0x508>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d118      	bne.n	8003cce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c9c:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <HAL_RCC_OscConfig+0x508>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1d      	ldr	r2, [pc, #116]	; (8003d18 <HAL_RCC_OscConfig+0x508>)
 8003ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca8:	f7ff f862 	bl	8002d70 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb0:	f7ff f85e 	bl	8002d70 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e1b2      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc2:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <HAL_RCC_OscConfig+0x508>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d108      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4d8>
 8003cd6:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	4a0d      	ldr	r2, [pc, #52]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ce6:	e029      	b.n	8003d3c <HAL_RCC_OscConfig+0x52c>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	d115      	bne.n	8003d1c <HAL_RCC_OscConfig+0x50c>
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	4a07      	ldr	r2, [pc, #28]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003cf8:	f043 0304 	orr.w	r3, r3, #4
 8003cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	4a03      	ldr	r2, [pc, #12]	; (8003d14 <HAL_RCC_OscConfig+0x504>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d10:	e014      	b.n	8003d3c <HAL_RCC_OscConfig+0x52c>
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40007000 	.word	0x40007000
 8003d1c:	4b9a      	ldr	r3, [pc, #616]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	4a99      	ldr	r2, [pc, #612]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d2c:	4b96      	ldr	r3, [pc, #600]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	4a95      	ldr	r2, [pc, #596]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d016      	beq.n	8003d72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d44:	f7ff f814 	bl	8002d70 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4c:	f7ff f810 	bl	8002d70 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e162      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d62:	4b89      	ldr	r3, [pc, #548]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0ed      	beq.n	8003d4c <HAL_RCC_OscConfig+0x53c>
 8003d70:	e015      	b.n	8003d9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d72:	f7fe fffd 	bl	8002d70 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d78:	e00a      	b.n	8003d90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7a:	f7fe fff9 	bl	8002d70 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e14b      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d90:	4b7d      	ldr	r3, [pc, #500]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1ed      	bne.n	8003d7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d9e:	7ffb      	ldrb	r3, [r7, #31]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d105      	bne.n	8003db0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da4:	4b78      	ldr	r3, [pc, #480]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da8:	4a77      	ldr	r2, [pc, #476]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0320 	and.w	r3, r3, #32
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d03c      	beq.n	8003e36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01c      	beq.n	8003dfe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dc4:	4b70      	ldr	r3, [pc, #448]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dca:	4a6f      	ldr	r2, [pc, #444]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd4:	f7fe ffcc 	bl	8002d70 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ddc:	f7fe ffc8 	bl	8002d70 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e11c      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dee:	4b66      	ldr	r3, [pc, #408]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0ef      	beq.n	8003ddc <HAL_RCC_OscConfig+0x5cc>
 8003dfc:	e01b      	b.n	8003e36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dfe:	4b62      	ldr	r3, [pc, #392]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e04:	4a60      	ldr	r2, [pc, #384]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0e:	f7fe ffaf 	bl	8002d70 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e16:	f7fe ffab 	bl	8002d70 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e0ff      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e28:	4b57      	ldr	r3, [pc, #348]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1ef      	bne.n	8003e16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 80f3 	beq.w	8004026 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	f040 80c9 	bne.w	8003fdc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e4a:	4b4f      	ldr	r3, [pc, #316]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f003 0203 	and.w	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d12c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d123      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d113      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d109      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d06b      	beq.n	8003f90 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	d062      	beq.n	8003f84 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ebe:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e0ac      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ece:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a2d      	ldr	r2, [pc, #180]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003ed4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eda:	f7fe ff49 	bl	8002d70 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7fe ff45 	bl	8002d70 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e099      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef4:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f00:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	4b21      	ldr	r3, [pc, #132]	; (8003f8c <HAL_RCC_OscConfig+0x77c>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f10:	3a01      	subs	r2, #1
 8003f12:	0112      	lsls	r2, r2, #4
 8003f14:	4311      	orrs	r1, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f1a:	0212      	lsls	r2, r2, #8
 8003f1c:	4311      	orrs	r1, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f22:	0852      	lsrs	r2, r2, #1
 8003f24:	3a01      	subs	r2, #1
 8003f26:	0552      	lsls	r2, r2, #21
 8003f28:	4311      	orrs	r1, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f2e:	0852      	lsrs	r2, r2, #1
 8003f30:	3a01      	subs	r2, #1
 8003f32:	0652      	lsls	r2, r2, #25
 8003f34:	4311      	orrs	r1, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f3a:	06d2      	lsls	r2, r2, #27
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	4912      	ldr	r1, [pc, #72]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f44:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a0f      	ldr	r2, [pc, #60]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a0c      	ldr	r2, [pc, #48]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f5c:	f7fe ff08 	bl	8002d70 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe ff04 	bl	8002d70 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e058      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f76:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <HAL_RCC_OscConfig+0x778>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f82:	e050      	b.n	8004026 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e04f      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f90:	4b27      	ldr	r3, [pc, #156]	; (8004030 <HAL_RCC_OscConfig+0x820>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d144      	bne.n	8004026 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b24      	ldr	r3, [pc, #144]	; (8004030 <HAL_RCC_OscConfig+0x820>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a23      	ldr	r2, [pc, #140]	; (8004030 <HAL_RCC_OscConfig+0x820>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <HAL_RCC_OscConfig+0x820>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a20      	ldr	r2, [pc, #128]	; (8004030 <HAL_RCC_OscConfig+0x820>)
 8003fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fb4:	f7fe fedc 	bl	8002d70 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fe fed8 	bl	8002d70 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e02c      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fce:	4b18      	ldr	r3, [pc, #96]	; (8004030 <HAL_RCC_OscConfig+0x820>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x7ac>
 8003fda:	e024      	b.n	8004026 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d01f      	beq.n	8004022 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe2:	4b13      	ldr	r3, [pc, #76]	; (8004030 <HAL_RCC_OscConfig+0x820>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a12      	ldr	r2, [pc, #72]	; (8004030 <HAL_RCC_OscConfig+0x820>)
 8003fe8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fee:	f7fe febf 	bl	8002d70 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff6:	f7fe febb 	bl	8002d70 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e00f      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004008:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_OscConfig+0x820>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f0      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004014:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_RCC_OscConfig+0x820>)
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	4905      	ldr	r1, [pc, #20]	; (8004030 <HAL_RCC_OscConfig+0x820>)
 800401a:	4b06      	ldr	r3, [pc, #24]	; (8004034 <HAL_RCC_OscConfig+0x824>)
 800401c:	4013      	ands	r3, r2
 800401e:	60cb      	str	r3, [r1, #12]
 8004020:	e001      	b.n	8004026 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40021000 	.word	0x40021000
 8004034:	feeefffc 	.word	0xfeeefffc

08004038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0e7      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800404c:	4b75      	ldr	r3, [pc, #468]	; (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d910      	bls.n	800407c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405a:	4b72      	ldr	r3, [pc, #456]	; (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 0207 	bic.w	r2, r3, #7
 8004062:	4970      	ldr	r1, [pc, #448]	; (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	4313      	orrs	r3, r2
 8004068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b6e      	ldr	r3, [pc, #440]	; (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0cf      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d010      	beq.n	80040aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	4b66      	ldr	r3, [pc, #408]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004094:	429a      	cmp	r2, r3
 8004096:	d908      	bls.n	80040aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004098:	4b63      	ldr	r3, [pc, #396]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4960      	ldr	r1, [pc, #384]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d04c      	beq.n	8004150 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040be:	4b5a      	ldr	r3, [pc, #360]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d121      	bne.n	800410e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e0a6      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040d6:	4b54      	ldr	r3, [pc, #336]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d115      	bne.n	800410e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e09a      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040ee:	4b4e      	ldr	r3, [pc, #312]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e08e      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040fe:	4b4a      	ldr	r3, [pc, #296]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e086      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800410e:	4b46      	ldr	r3, [pc, #280]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 0203 	bic.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4943      	ldr	r1, [pc, #268]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 800411c:	4313      	orrs	r3, r2
 800411e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004120:	f7fe fe26 	bl	8002d70 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004126:	e00a      	b.n	800413e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004128:	f7fe fe22 	bl	8002d70 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	; 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e06e      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413e:	4b3a      	ldr	r3, [pc, #232]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 020c 	and.w	r2, r3, #12
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	429a      	cmp	r2, r3
 800414e:	d1eb      	bne.n	8004128 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d010      	beq.n	800417e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	4b31      	ldr	r3, [pc, #196]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004168:	429a      	cmp	r2, r3
 800416a:	d208      	bcs.n	800417e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800416c:	4b2e      	ldr	r3, [pc, #184]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	492b      	ldr	r1, [pc, #172]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800417e:	4b29      	ldr	r3, [pc, #164]	; (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d210      	bcs.n	80041ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418c:	4b25      	ldr	r3, [pc, #148]	; (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 0207 	bic.w	r2, r3, #7
 8004194:	4923      	ldr	r1, [pc, #140]	; (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	4313      	orrs	r3, r2
 800419a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419c:	4b21      	ldr	r3, [pc, #132]	; (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d001      	beq.n	80041ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e036      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ba:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	4918      	ldr	r1, [pc, #96]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d009      	beq.n	80041ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041d8:	4b13      	ldr	r3, [pc, #76]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4910      	ldr	r1, [pc, #64]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041ec:	f000 f824 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	091b      	lsrs	r3, r3, #4
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	490b      	ldr	r1, [pc, #44]	; (800422c <HAL_RCC_ClockConfig+0x1f4>)
 80041fe:	5ccb      	ldrb	r3, [r1, r3]
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
 8004208:	4a09      	ldr	r2, [pc, #36]	; (8004230 <HAL_RCC_ClockConfig+0x1f8>)
 800420a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800420c:	4b09      	ldr	r3, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x1fc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7fe fd5d 	bl	8002cd0 <HAL_InitTick>
 8004216:	4603      	mov	r3, r0
 8004218:	72fb      	strb	r3, [r7, #11]

  return status;
 800421a:	7afb      	ldrb	r3, [r7, #11]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40022000 	.word	0x40022000
 8004228:	40021000 	.word	0x40021000
 800422c:	0800d4a8 	.word	0x0800d4a8
 8004230:	20000030 	.word	0x20000030
 8004234:	20000034 	.word	0x20000034

08004238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004238:	b480      	push	{r7}
 800423a:	b089      	sub	sp, #36	; 0x24
 800423c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004246:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004250:	4b3b      	ldr	r3, [pc, #236]	; (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x34>
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d121      	bne.n	80042aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d11e      	bne.n	80042aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800426c:	4b34      	ldr	r3, [pc, #208]	; (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d107      	bne.n	8004288 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004278:	4b31      	ldr	r3, [pc, #196]	; (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 800427a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800427e:	0a1b      	lsrs	r3, r3, #8
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	e005      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004288:	4b2d      	ldr	r3, [pc, #180]	; (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004294:	4a2b      	ldr	r2, [pc, #172]	; (8004344 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10d      	bne.n	80042c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042a8:	e00a      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d102      	bne.n	80042b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042b0:	4b25      	ldr	r3, [pc, #148]	; (8004348 <HAL_RCC_GetSysClockFreq+0x110>)
 80042b2:	61bb      	str	r3, [r7, #24]
 80042b4:	e004      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042bc:	4b23      	ldr	r3, [pc, #140]	; (800434c <HAL_RCC_GetSysClockFreq+0x114>)
 80042be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b0c      	cmp	r3, #12
 80042c4:	d134      	bne.n	8004330 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042c6:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d003      	beq.n	80042de <HAL_RCC_GetSysClockFreq+0xa6>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d003      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0xac>
 80042dc:	e005      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042de:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <HAL_RCC_GetSysClockFreq+0x110>)
 80042e0:	617b      	str	r3, [r7, #20]
      break;
 80042e2:	e005      	b.n	80042f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042e4:	4b19      	ldr	r3, [pc, #100]	; (800434c <HAL_RCC_GetSysClockFreq+0x114>)
 80042e6:	617b      	str	r3, [r7, #20]
      break;
 80042e8:	e002      	b.n	80042f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	617b      	str	r3, [r7, #20]
      break;
 80042ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042f0:	4b13      	ldr	r3, [pc, #76]	; (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	091b      	lsrs	r3, r3, #4
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	3301      	adds	r3, #1
 80042fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042fe:	4b10      	ldr	r3, [pc, #64]	; (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	0a1b      	lsrs	r3, r3, #8
 8004304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	fb03 f202 	mul.w	r2, r3, r2
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004316:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	0e5b      	lsrs	r3, r3, #25
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	3301      	adds	r3, #1
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004330:	69bb      	ldr	r3, [r7, #24]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3724      	adds	r7, #36	; 0x24
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000
 8004344:	0800d4c0 	.word	0x0800d4c0
 8004348:	00f42400 	.word	0x00f42400
 800434c:	007a1200 	.word	0x007a1200

08004350 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004354:	4b03      	ldr	r3, [pc, #12]	; (8004364 <HAL_RCC_GetHCLKFreq+0x14>)
 8004356:	681b      	ldr	r3, [r3, #0]
}
 8004358:	4618      	mov	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	20000030 	.word	0x20000030

08004368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800436c:	f7ff fff0 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	0a1b      	lsrs	r3, r3, #8
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4904      	ldr	r1, [pc, #16]	; (8004390 <HAL_RCC_GetPCLK1Freq+0x28>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004388:	4618      	mov	r0, r3
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40021000 	.word	0x40021000
 8004390:	0800d4b8 	.word	0x0800d4b8

08004394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004398:	f7ff ffda 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	0adb      	lsrs	r3, r3, #11
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	4904      	ldr	r1, [pc, #16]	; (80043bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021000 	.word	0x40021000
 80043bc:	0800d4b8 	.word	0x0800d4b8

080043c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043cc:	4b2a      	ldr	r3, [pc, #168]	; (8004478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043d8:	f7ff f9b6 	bl	8003748 <HAL_PWREx_GetVoltageRange>
 80043dc:	6178      	str	r0, [r7, #20]
 80043de:	e014      	b.n	800440a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e4:	4a24      	ldr	r2, [pc, #144]	; (8004478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ea:	6593      	str	r3, [r2, #88]	; 0x58
 80043ec:	4b22      	ldr	r3, [pc, #136]	; (8004478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043f8:	f7ff f9a6 	bl	8003748 <HAL_PWREx_GetVoltageRange>
 80043fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043fe:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004402:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004408:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004410:	d10b      	bne.n	800442a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b80      	cmp	r3, #128	; 0x80
 8004416:	d919      	bls.n	800444c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2ba0      	cmp	r3, #160	; 0xa0
 800441c:	d902      	bls.n	8004424 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800441e:	2302      	movs	r3, #2
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	e013      	b.n	800444c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004424:	2301      	movs	r3, #1
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	e010      	b.n	800444c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b80      	cmp	r3, #128	; 0x80
 800442e:	d902      	bls.n	8004436 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004430:	2303      	movs	r3, #3
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	e00a      	b.n	800444c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b80      	cmp	r3, #128	; 0x80
 800443a:	d102      	bne.n	8004442 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800443c:	2302      	movs	r3, #2
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	e004      	b.n	800444c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b70      	cmp	r3, #112	; 0x70
 8004446:	d101      	bne.n	800444c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004448:	2301      	movs	r3, #1
 800444a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 0207 	bic.w	r2, r3, #7
 8004454:	4909      	ldr	r1, [pc, #36]	; (800447c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800445c:	4b07      	ldr	r3, [pc, #28]	; (800447c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	429a      	cmp	r2, r3
 8004468:	d001      	beq.n	800446e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40021000 	.word	0x40021000
 800447c:	40022000 	.word	0x40022000

08004480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004488:	2300      	movs	r3, #0
 800448a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800448c:	2300      	movs	r3, #0
 800448e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004498:	2b00      	cmp	r3, #0
 800449a:	d031      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044a4:	d01a      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80044a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044aa:	d814      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d009      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044b4:	d10f      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80044b6:	4b5d      	ldr	r3, [pc, #372]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	4a5c      	ldr	r2, [pc, #368]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044c2:	e00c      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fa22 	bl	8004914 <RCCEx_PLLSAI1_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044d4:	e003      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	74fb      	strb	r3, [r7, #19]
      break;
 80044da:	e000      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80044dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044de:	7cfb      	ldrb	r3, [r7, #19]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10b      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044e4:	4b51      	ldr	r3, [pc, #324]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	494e      	ldr	r1, [pc, #312]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044fa:	e001      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 809e 	beq.w	800464a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004512:	4b46      	ldr	r3, [pc, #280]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004522:	2300      	movs	r3, #0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00d      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004528:	4b40      	ldr	r3, [pc, #256]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	4a3f      	ldr	r2, [pc, #252]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800452e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004532:	6593      	str	r3, [r2, #88]	; 0x58
 8004534:	4b3d      	ldr	r3, [pc, #244]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004540:	2301      	movs	r3, #1
 8004542:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004544:	4b3a      	ldr	r3, [pc, #232]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a39      	ldr	r2, [pc, #228]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800454a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004550:	f7fe fc0e 	bl	8002d70 <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004556:	e009      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004558:	f7fe fc0a 	bl	8002d70 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d902      	bls.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	74fb      	strb	r3, [r7, #19]
        break;
 800456a:	e005      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800456c:	4b30      	ldr	r3, [pc, #192]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ef      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d15a      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800457e:	4b2b      	ldr	r3, [pc, #172]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004588:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01e      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	429a      	cmp	r2, r3
 8004598:	d019      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800459a:	4b24      	ldr	r3, [pc, #144]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045a6:	4b21      	ldr	r3, [pc, #132]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ac:	4a1f      	ldr	r2, [pc, #124]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045b6:	4b1d      	ldr	r3, [pc, #116]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045bc:	4a1b      	ldr	r2, [pc, #108]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045c6:	4a19      	ldr	r2, [pc, #100]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d016      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fe fbca 	bl	8002d70 <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045de:	e00b      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e0:	f7fe fbc6 	bl	8002d70 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d902      	bls.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	74fb      	strb	r3, [r7, #19]
            break;
 80045f6:	e006      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0ec      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004606:	7cfb      	ldrb	r3, [r7, #19]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10b      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800460c:	4b07      	ldr	r3, [pc, #28]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461a:	4904      	ldr	r1, [pc, #16]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004622:	e009      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	74bb      	strb	r3, [r7, #18]
 8004628:	e006      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
 8004630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004638:	7c7b      	ldrb	r3, [r7, #17]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d105      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463e:	4b8d      	ldr	r3, [pc, #564]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004642:	4a8c      	ldr	r2, [pc, #560]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004648:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004656:	4b87      	ldr	r3, [pc, #540]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465c:	f023 0203 	bic.w	r2, r3, #3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	4983      	ldr	r1, [pc, #524]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004678:	4b7e      	ldr	r3, [pc, #504]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467e:	f023 020c 	bic.w	r2, r3, #12
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	497b      	ldr	r1, [pc, #492]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800469a:	4b76      	ldr	r3, [pc, #472]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	4972      	ldr	r1, [pc, #456]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046bc:	4b6d      	ldr	r3, [pc, #436]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	496a      	ldr	r1, [pc, #424]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046de:	4b65      	ldr	r3, [pc, #404]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ec:	4961      	ldr	r1, [pc, #388]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004700:	4b5c      	ldr	r3, [pc, #368]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004706:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	4959      	ldr	r1, [pc, #356]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004722:	4b54      	ldr	r3, [pc, #336]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	4950      	ldr	r1, [pc, #320]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004744:	4b4b      	ldr	r3, [pc, #300]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004752:	4948      	ldr	r1, [pc, #288]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004766:	4b43      	ldr	r3, [pc, #268]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	493f      	ldr	r1, [pc, #252]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d028      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004788:	4b3a      	ldr	r3, [pc, #232]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004796:	4937      	ldr	r1, [pc, #220]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a6:	d106      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a8:	4b32      	ldr	r3, [pc, #200]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a31      	ldr	r2, [pc, #196]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b2:	60d3      	str	r3, [r2, #12]
 80047b4:	e011      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047be:	d10c      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3304      	adds	r3, #4
 80047c4:	2101      	movs	r1, #1
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f8a4 	bl	8004914 <RCCEx_PLLSAI1_Config>
 80047cc:	4603      	mov	r3, r0
 80047ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d028      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047e6:	4b23      	ldr	r3, [pc, #140]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f4:	491f      	ldr	r1, [pc, #124]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004804:	d106      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004806:	4b1b      	ldr	r3, [pc, #108]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	4a1a      	ldr	r2, [pc, #104]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800480c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004810:	60d3      	str	r3, [r2, #12]
 8004812:	e011      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004818:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800481c:	d10c      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3304      	adds	r3, #4
 8004822:	2101      	movs	r1, #1
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f875 	bl	8004914 <RCCEx_PLLSAI1_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800482e:	7cfb      	ldrb	r3, [r7, #19]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d02b      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004852:	4908      	ldr	r1, [pc, #32]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004862:	d109      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004864:	4b03      	ldr	r3, [pc, #12]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a02      	ldr	r2, [pc, #8]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800486a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800486e:	60d3      	str	r3, [r2, #12]
 8004870:	e014      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004872:	bf00      	nop
 8004874:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004880:	d10c      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3304      	adds	r3, #4
 8004886:	2101      	movs	r1, #1
 8004888:	4618      	mov	r0, r3
 800488a:	f000 f843 	bl	8004914 <RCCEx_PLLSAI1_Config>
 800488e:	4603      	mov	r3, r0
 8004890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004892:	7cfb      	ldrb	r3, [r7, #19]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01c      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	4916      	ldr	r1, [pc, #88]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048c6:	d10c      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	2102      	movs	r1, #2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f820 	bl	8004914 <RCCEx_PLLSAI1_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048d8:	7cfb      	ldrb	r3, [r7, #19]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80048de:	7cfb      	ldrb	r3, [r7, #19]
 80048e0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048ee:	4b08      	ldr	r3, [pc, #32]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fc:	4904      	ldr	r1, [pc, #16]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004904:	7cbb      	ldrb	r3, [r7, #18]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40021000 	.word	0x40021000

08004914 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004922:	4b74      	ldr	r3, [pc, #464]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d018      	beq.n	8004960 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800492e:	4b71      	ldr	r3, [pc, #452]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0203 	and.w	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d10d      	bne.n	800495a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
       ||
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004946:	4b6b      	ldr	r3, [pc, #428]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
       ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d047      	beq.n	80049ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
 800495e:	e044      	b.n	80049ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b03      	cmp	r3, #3
 8004966:	d018      	beq.n	800499a <RCCEx_PLLSAI1_Config+0x86>
 8004968:	2b03      	cmp	r3, #3
 800496a:	d825      	bhi.n	80049b8 <RCCEx_PLLSAI1_Config+0xa4>
 800496c:	2b01      	cmp	r3, #1
 800496e:	d002      	beq.n	8004976 <RCCEx_PLLSAI1_Config+0x62>
 8004970:	2b02      	cmp	r3, #2
 8004972:	d009      	beq.n	8004988 <RCCEx_PLLSAI1_Config+0x74>
 8004974:	e020      	b.n	80049b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004976:	4b5f      	ldr	r3, [pc, #380]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d11d      	bne.n	80049be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004986:	e01a      	b.n	80049be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004988:	4b5a      	ldr	r3, [pc, #360]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004990:	2b00      	cmp	r3, #0
 8004992:	d116      	bne.n	80049c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004998:	e013      	b.n	80049c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800499a:	4b56      	ldr	r3, [pc, #344]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10f      	bne.n	80049c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049a6:	4b53      	ldr	r3, [pc, #332]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049b6:	e006      	b.n	80049c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	73fb      	strb	r3, [r7, #15]
      break;
 80049bc:	e004      	b.n	80049c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049be:	bf00      	nop
 80049c0:	e002      	b.n	80049c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049c2:	bf00      	nop
 80049c4:	e000      	b.n	80049c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10d      	bne.n	80049ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049ce:	4b49      	ldr	r3, [pc, #292]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6819      	ldr	r1, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	3b01      	subs	r3, #1
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	430b      	orrs	r3, r1
 80049e4:	4943      	ldr	r1, [pc, #268]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d17c      	bne.n	8004aea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049f0:	4b40      	ldr	r3, [pc, #256]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a3f      	ldr	r2, [pc, #252]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fc:	f7fe f9b8 	bl	8002d70 <HAL_GetTick>
 8004a00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a02:	e009      	b.n	8004a18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a04:	f7fe f9b4 	bl	8002d70 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d902      	bls.n	8004a18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	73fb      	strb	r3, [r7, #15]
        break;
 8004a16:	e005      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a18:	4b36      	ldr	r3, [pc, #216]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1ef      	bne.n	8004a04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d15f      	bne.n	8004aea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d110      	bne.n	8004a52 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a30:	4b30      	ldr	r3, [pc, #192]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6892      	ldr	r2, [r2, #8]
 8004a40:	0211      	lsls	r1, r2, #8
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68d2      	ldr	r2, [r2, #12]
 8004a46:	06d2      	lsls	r2, r2, #27
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	492a      	ldr	r1, [pc, #168]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	610b      	str	r3, [r1, #16]
 8004a50:	e027      	b.n	8004aa2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d112      	bne.n	8004a7e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a58:	4b26      	ldr	r3, [pc, #152]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6892      	ldr	r2, [r2, #8]
 8004a68:	0211      	lsls	r1, r2, #8
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6912      	ldr	r2, [r2, #16]
 8004a6e:	0852      	lsrs	r2, r2, #1
 8004a70:	3a01      	subs	r2, #1
 8004a72:	0552      	lsls	r2, r2, #21
 8004a74:	430a      	orrs	r2, r1
 8004a76:	491f      	ldr	r1, [pc, #124]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	610b      	str	r3, [r1, #16]
 8004a7c:	e011      	b.n	8004aa2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a7e:	4b1d      	ldr	r3, [pc, #116]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6892      	ldr	r2, [r2, #8]
 8004a8e:	0211      	lsls	r1, r2, #8
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6952      	ldr	r2, [r2, #20]
 8004a94:	0852      	lsrs	r2, r2, #1
 8004a96:	3a01      	subs	r2, #1
 8004a98:	0652      	lsls	r2, r2, #25
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	4915      	ldr	r1, [pc, #84]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004aa2:	4b14      	ldr	r3, [pc, #80]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a13      	ldr	r2, [pc, #76]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aae:	f7fe f95f 	bl	8002d70 <HAL_GetTick>
 8004ab2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ab4:	e009      	b.n	8004aca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ab6:	f7fe f95b 	bl	8002d70 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d902      	bls.n	8004aca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	73fb      	strb	r3, [r7, #15]
          break;
 8004ac8:	e005      	b.n	8004ad6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aca:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0ef      	beq.n	8004ab6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	4903      	ldr	r1, [pc, #12]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40021000 	.word	0x40021000

08004af8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e095      	b.n	8004c36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d108      	bne.n	8004b24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b1a:	d009      	beq.n	8004b30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	61da      	str	r2, [r3, #28]
 8004b22:	e005      	b.n	8004b30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fc fef0 	bl	8001930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b70:	d902      	bls.n	8004b78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e002      	b.n	8004b7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b86:	d007      	beq.n	8004b98 <HAL_SPI_Init+0xa0>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b90:	d002      	beq.n	8004b98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	ea42 0103 	orr.w	r1, r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	0c1b      	lsrs	r3, r3, #16
 8004bf4:	f003 0204 	and.w	r2, r3, #4
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c14:	ea42 0103 	orr.w	r1, r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b08a      	sub	sp, #40	; 0x28
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	607a      	str	r2, [r7, #4]
 8004c4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_SPI_TransmitReceive+0x26>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e1fb      	b.n	800505c <HAL_SPI_TransmitReceive+0x41e>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c6c:	f7fe f880 	bl	8002d70 <HAL_GetTick>
 8004c70:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c78:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004c84:	887b      	ldrh	r3, [r7, #2]
 8004c86:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c88:	7efb      	ldrb	r3, [r7, #27]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d00e      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x6e>
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c94:	d106      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d102      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x66>
 8004c9e:	7efb      	ldrb	r3, [r7, #27]
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d003      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004caa:	e1cd      	b.n	8005048 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x80>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x80>
 8004cb8:	887b      	ldrh	r3, [r7, #2]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004cc4:	e1c0      	b.n	8005048 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d003      	beq.n	8004cda <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2205      	movs	r2, #5
 8004cd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	887a      	ldrh	r2, [r7, #2]
 8004cea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	887a      	ldrh	r2, [r7, #2]
 8004cf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	887a      	ldrh	r2, [r7, #2]
 8004d00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	887a      	ldrh	r2, [r7, #2]
 8004d06:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d1c:	d802      	bhi.n	8004d24 <HAL_SPI_TransmitReceive+0xe6>
 8004d1e:	8a3b      	ldrh	r3, [r7, #16]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d908      	bls.n	8004d36 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d32:	605a      	str	r2, [r3, #4]
 8004d34:	e007      	b.n	8004d46 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d44:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	d007      	beq.n	8004d64 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d6c:	d97c      	bls.n	8004e68 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0x13e>
 8004d76:	8a7b      	ldrh	r3, [r7, #18]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d169      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	881a      	ldrh	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	1c9a      	adds	r2, r3, #2
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004da0:	e056      	b.n	8004e50 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d11b      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x1aa>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d016      	beq.n	8004de8 <HAL_SPI_TransmitReceive+0x1aa>
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d113      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	881a      	ldrh	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	1c9a      	adds	r2, r3, #2
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d11c      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0x1f2>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d016      	beq.n	8004e30 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	b292      	uxth	r2, r2
 8004e0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	1c9a      	adds	r2, r3, #2
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e30:	f7fd ff9e 	bl	8002d70 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d807      	bhi.n	8004e50 <HAL_SPI_TransmitReceive+0x212>
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d003      	beq.n	8004e50 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004e4e:	e0fb      	b.n	8005048 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1a3      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x164>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d19d      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x164>
 8004e66:	e0df      	b.n	8005028 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_SPI_TransmitReceive+0x23a>
 8004e70:	8a7b      	ldrh	r3, [r7, #18]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	f040 80cb 	bne.w	800500e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d912      	bls.n	8004ea8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	881a      	ldrh	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	1c9a      	adds	r2, r3, #2
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b02      	subs	r3, #2
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ea6:	e0b2      	b.n	800500e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	7812      	ldrb	r2, [r2, #0]
 8004eb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ece:	e09e      	b.n	800500e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d134      	bne.n	8004f48 <HAL_SPI_TransmitReceive+0x30a>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d02f      	beq.n	8004f48 <HAL_SPI_TransmitReceive+0x30a>
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d12c      	bne.n	8004f48 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d912      	bls.n	8004f1e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	881a      	ldrh	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	1c9a      	adds	r2, r3, #2
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b02      	subs	r3, #2
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f1c:	e012      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	330c      	adds	r3, #12
 8004f28:	7812      	ldrb	r2, [r2, #0]
 8004f2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d148      	bne.n	8004fe8 <HAL_SPI_TransmitReceive+0x3aa>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d042      	beq.n	8004fe8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d923      	bls.n	8004fb6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	b292      	uxth	r2, r2
 8004f7a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	1c9a      	adds	r2, r3, #2
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b02      	subs	r3, #2
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d81f      	bhi.n	8004fe4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fb2:	605a      	str	r2, [r3, #4]
 8004fb4:	e016      	b.n	8004fe4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f103 020c 	add.w	r2, r3, #12
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	7812      	ldrb	r2, [r2, #0]
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fe8:	f7fd fec2 	bl	8002d70 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d803      	bhi.n	8005000 <HAL_SPI_TransmitReceive+0x3c2>
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffe:	d102      	bne.n	8005006 <HAL_SPI_TransmitReceive+0x3c8>
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	2b00      	cmp	r3, #0
 8005004:	d103      	bne.n	800500e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800500c:	e01c      	b.n	8005048 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	f47f af5b 	bne.w	8004ed0 <HAL_SPI_TransmitReceive+0x292>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	f47f af54 	bne.w	8004ed0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f937 	bl	80052a0 <SPI_EndRxTxTransaction>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d006      	beq.n	8005046 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	661a      	str	r2, [r3, #96]	; 0x60
 8005044:	e000      	b.n	8005048 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005046:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005058:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800505c:	4618      	mov	r0, r3
 800505e:	3728      	adds	r7, #40	; 0x28
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	4613      	mov	r3, r2
 8005072:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005074:	f7fd fe7c 	bl	8002d70 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507c:	1a9b      	subs	r3, r3, r2
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	4413      	add	r3, r2
 8005082:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005084:	f7fd fe74 	bl	8002d70 <HAL_GetTick>
 8005088:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800508a:	4b39      	ldr	r3, [pc, #228]	; (8005170 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	015b      	lsls	r3, r3, #5
 8005090:	0d1b      	lsrs	r3, r3, #20
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	fb02 f303 	mul.w	r3, r2, r3
 8005098:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800509a:	e054      	b.n	8005146 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	d050      	beq.n	8005146 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050a4:	f7fd fe64 	bl	8002d70 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d902      	bls.n	80050ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d13d      	bne.n	8005136 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050d2:	d111      	bne.n	80050f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050dc:	d004      	beq.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e6:	d107      	bne.n	80050f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005100:	d10f      	bne.n	8005122 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005120:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e017      	b.n	8005166 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	3b01      	subs	r3, #1
 8005144:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4013      	ands	r3, r2
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	429a      	cmp	r2, r3
 8005154:	bf0c      	ite	eq
 8005156:	2301      	moveq	r3, #1
 8005158:	2300      	movne	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	461a      	mov	r2, r3
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	429a      	cmp	r2, r3
 8005162:	d19b      	bne.n	800509c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000030 	.word	0x20000030

08005174 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08a      	sub	sp, #40	; 0x28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005186:	f7fd fdf3 	bl	8002d70 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	1a9b      	subs	r3, r3, r2
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	4413      	add	r3, r2
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005196:	f7fd fdeb 	bl	8002d70 <HAL_GetTick>
 800519a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80051a4:	4b3d      	ldr	r3, [pc, #244]	; (800529c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	00da      	lsls	r2, r3, #3
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	0d1b      	lsrs	r3, r3, #20
 80051b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80051bc:	e060      	b.n	8005280 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80051c4:	d107      	bne.n	80051d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80051d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d050      	beq.n	8005280 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051de:	f7fd fdc7 	bl	8002d70 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d902      	bls.n	80051f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d13d      	bne.n	8005270 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005202:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800520c:	d111      	bne.n	8005232 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005216:	d004      	beq.n	8005222 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005220:	d107      	bne.n	8005232 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005230:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523a:	d10f      	bne.n	800525c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800525a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e010      	b.n	8005292 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	3b01      	subs	r3, #1
 800527e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4013      	ands	r3, r2
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	429a      	cmp	r2, r3
 800528e:	d196      	bne.n	80051be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3728      	adds	r7, #40	; 0x28
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000030 	.word	0x20000030

080052a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7ff ff5b 	bl	8005174 <SPI_WaitFifoStateUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c8:	f043 0220 	orr.w	r2, r3, #32
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e027      	b.n	8005324 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2200      	movs	r2, #0
 80052dc:	2180      	movs	r1, #128	; 0x80
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7ff fec0 	bl	8005064 <SPI_WaitFlagStateUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d007      	beq.n	80052fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ee:	f043 0220 	orr.w	r2, r3, #32
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e014      	b.n	8005324 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2200      	movs	r2, #0
 8005302:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f7ff ff34 	bl	8005174 <SPI_WaitFifoStateUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d007      	beq.n	8005322 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005316:	f043 0220 	orr.w	r2, r3, #32
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e000      	b.n	8005324 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e049      	b.n	80053d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fc fdc6 	bl	8001ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3304      	adds	r3, #4
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f000 fba0 	bl	8005ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d001      	beq.n	80053f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e033      	b.n	800545c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a19      	ldr	r2, [pc, #100]	; (8005468 <HAL_TIM_Base_Start+0x8c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_TIM_Base_Start+0x3e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540e:	d004      	beq.n	800541a <HAL_TIM_Base_Start+0x3e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a15      	ldr	r2, [pc, #84]	; (800546c <HAL_TIM_Base_Start+0x90>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d115      	bne.n	8005446 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	4b13      	ldr	r3, [pc, #76]	; (8005470 <HAL_TIM_Base_Start+0x94>)
 8005422:	4013      	ands	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b06      	cmp	r3, #6
 800542a:	d015      	beq.n	8005458 <HAL_TIM_Base_Start+0x7c>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005432:	d011      	beq.n	8005458 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005444:	e008      	b.n	8005458 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0201 	orr.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	e000      	b.n	800545a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005458:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40012c00 	.word	0x40012c00
 800546c:	40014000 	.word	0x40014000
 8005470:	00010007 	.word	0x00010007

08005474 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e049      	b.n	800551a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f841 	bl	8005522 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4619      	mov	r1, r3
 80054b2:	4610      	mov	r0, r2
 80054b4:	f000 fafc 	bl	8005ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
	...

08005538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <HAL_TIM_PWM_Start+0x24>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	bf14      	ite	ne
 8005554:	2301      	movne	r3, #1
 8005556:	2300      	moveq	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	e03c      	b.n	80055d6 <HAL_TIM_PWM_Start+0x9e>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b04      	cmp	r3, #4
 8005560:	d109      	bne.n	8005576 <HAL_TIM_PWM_Start+0x3e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b01      	cmp	r3, #1
 800556c:	bf14      	ite	ne
 800556e:	2301      	movne	r3, #1
 8005570:	2300      	moveq	r3, #0
 8005572:	b2db      	uxtb	r3, r3
 8005574:	e02f      	b.n	80055d6 <HAL_TIM_PWM_Start+0x9e>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b08      	cmp	r3, #8
 800557a:	d109      	bne.n	8005590 <HAL_TIM_PWM_Start+0x58>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	bf14      	ite	ne
 8005588:	2301      	movne	r3, #1
 800558a:	2300      	moveq	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	e022      	b.n	80055d6 <HAL_TIM_PWM_Start+0x9e>
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2b0c      	cmp	r3, #12
 8005594:	d109      	bne.n	80055aa <HAL_TIM_PWM_Start+0x72>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b01      	cmp	r3, #1
 80055a0:	bf14      	ite	ne
 80055a2:	2301      	movne	r3, #1
 80055a4:	2300      	moveq	r3, #0
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	e015      	b.n	80055d6 <HAL_TIM_PWM_Start+0x9e>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d109      	bne.n	80055c4 <HAL_TIM_PWM_Start+0x8c>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	bf14      	ite	ne
 80055bc:	2301      	movne	r3, #1
 80055be:	2300      	moveq	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e008      	b.n	80055d6 <HAL_TIM_PWM_Start+0x9e>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	bf14      	ite	ne
 80055d0:	2301      	movne	r3, #1
 80055d2:	2300      	moveq	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e07e      	b.n	80056dc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d104      	bne.n	80055ee <HAL_TIM_PWM_Start+0xb6>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ec:	e023      	b.n	8005636 <HAL_TIM_PWM_Start+0xfe>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_PWM_Start+0xc6>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055fc:	e01b      	b.n	8005636 <HAL_TIM_PWM_Start+0xfe>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b08      	cmp	r3, #8
 8005602:	d104      	bne.n	800560e <HAL_TIM_PWM_Start+0xd6>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800560c:	e013      	b.n	8005636 <HAL_TIM_PWM_Start+0xfe>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b0c      	cmp	r3, #12
 8005612:	d104      	bne.n	800561e <HAL_TIM_PWM_Start+0xe6>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800561c:	e00b      	b.n	8005636 <HAL_TIM_PWM_Start+0xfe>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b10      	cmp	r3, #16
 8005622:	d104      	bne.n	800562e <HAL_TIM_PWM_Start+0xf6>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800562c:	e003      	b.n	8005636 <HAL_TIM_PWM_Start+0xfe>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2201      	movs	r2, #1
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fdb2 	bl	80061a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a26      	ldr	r2, [pc, #152]	; (80056e4 <HAL_TIM_PWM_Start+0x1ac>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_TIM_PWM_Start+0x12a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a25      	ldr	r2, [pc, #148]	; (80056e8 <HAL_TIM_PWM_Start+0x1b0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_TIM_PWM_Start+0x12a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a23      	ldr	r2, [pc, #140]	; (80056ec <HAL_TIM_PWM_Start+0x1b4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d101      	bne.n	8005666 <HAL_TIM_PWM_Start+0x12e>
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <HAL_TIM_PWM_Start+0x130>
 8005666:	2300      	movs	r3, #0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800567a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <HAL_TIM_PWM_Start+0x1ac>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d009      	beq.n	800569a <HAL_TIM_PWM_Start+0x162>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568e:	d004      	beq.n	800569a <HAL_TIM_PWM_Start+0x162>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a14      	ldr	r2, [pc, #80]	; (80056e8 <HAL_TIM_PWM_Start+0x1b0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d115      	bne.n	80056c6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <HAL_TIM_PWM_Start+0x1b8>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b06      	cmp	r3, #6
 80056aa:	d015      	beq.n	80056d8 <HAL_TIM_PWM_Start+0x1a0>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b2:	d011      	beq.n	80056d8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c4:	e008      	b.n	80056d8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0201 	orr.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	e000      	b.n	80056da <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40012c00 	.word	0x40012c00
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400
 80056f0:	00010007 	.word	0x00010007

080056f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800570e:	2302      	movs	r3, #2
 8005710:	e0ff      	b.n	8005912 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b14      	cmp	r3, #20
 800571e:	f200 80f0 	bhi.w	8005902 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005722:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	0800577d 	.word	0x0800577d
 800572c:	08005903 	.word	0x08005903
 8005730:	08005903 	.word	0x08005903
 8005734:	08005903 	.word	0x08005903
 8005738:	080057bd 	.word	0x080057bd
 800573c:	08005903 	.word	0x08005903
 8005740:	08005903 	.word	0x08005903
 8005744:	08005903 	.word	0x08005903
 8005748:	080057ff 	.word	0x080057ff
 800574c:	08005903 	.word	0x08005903
 8005750:	08005903 	.word	0x08005903
 8005754:	08005903 	.word	0x08005903
 8005758:	0800583f 	.word	0x0800583f
 800575c:	08005903 	.word	0x08005903
 8005760:	08005903 	.word	0x08005903
 8005764:	08005903 	.word	0x08005903
 8005768:	08005881 	.word	0x08005881
 800576c:	08005903 	.word	0x08005903
 8005770:	08005903 	.word	0x08005903
 8005774:	08005903 	.word	0x08005903
 8005778:	080058c1 	.word	0x080058c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	4618      	mov	r0, r3
 8005784:	f000 f9f8 	bl	8005b78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0208 	orr.w	r2, r2, #8
 8005796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0204 	bic.w	r2, r2, #4
 80057a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6999      	ldr	r1, [r3, #24]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	619a      	str	r2, [r3, #24]
      break;
 80057ba:	e0a5      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fa54 	bl	8005c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6999      	ldr	r1, [r3, #24]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	021a      	lsls	r2, r3, #8
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	619a      	str	r2, [r3, #24]
      break;
 80057fc:	e084      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	4618      	mov	r0, r3
 8005806:	f000 faad 	bl	8005d64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69da      	ldr	r2, [r3, #28]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0208 	orr.w	r2, r2, #8
 8005818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	69da      	ldr	r2, [r3, #28]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0204 	bic.w	r2, r2, #4
 8005828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69d9      	ldr	r1, [r3, #28]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	61da      	str	r2, [r3, #28]
      break;
 800583c:	e064      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fb05 	bl	8005e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69da      	ldr	r2, [r3, #28]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69da      	ldr	r2, [r3, #28]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69d9      	ldr	r1, [r3, #28]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	021a      	lsls	r2, r3, #8
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	61da      	str	r2, [r3, #28]
      break;
 800587e:	e043      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fb42 	bl	8005f10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0208 	orr.w	r2, r2, #8
 800589a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0204 	bic.w	r2, r2, #4
 80058aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	691a      	ldr	r2, [r3, #16]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058be:	e023      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fb7a 	bl	8005fc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	021a      	lsls	r2, r3, #8
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005900:	e002      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	75fb      	strb	r3, [r7, #23]
      break;
 8005906:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005910:	7dfb      	ldrb	r3, [r7, #23]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop

0800591c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_TIM_ConfigClockSource+0x1c>
 8005934:	2302      	movs	r3, #2
 8005936:	e0b6      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x18a>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800595a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005974:	d03e      	beq.n	80059f4 <HAL_TIM_ConfigClockSource+0xd8>
 8005976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597a:	f200 8087 	bhi.w	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 800597e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005982:	f000 8086 	beq.w	8005a92 <HAL_TIM_ConfigClockSource+0x176>
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598a:	d87f      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 800598c:	2b70      	cmp	r3, #112	; 0x70
 800598e:	d01a      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0xaa>
 8005990:	2b70      	cmp	r3, #112	; 0x70
 8005992:	d87b      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 8005994:	2b60      	cmp	r3, #96	; 0x60
 8005996:	d050      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x11e>
 8005998:	2b60      	cmp	r3, #96	; 0x60
 800599a:	d877      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 800599c:	2b50      	cmp	r3, #80	; 0x50
 800599e:	d03c      	beq.n	8005a1a <HAL_TIM_ConfigClockSource+0xfe>
 80059a0:	2b50      	cmp	r3, #80	; 0x50
 80059a2:	d873      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d058      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x13e>
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d86f      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 80059ac:	2b30      	cmp	r3, #48	; 0x30
 80059ae:	d064      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15e>
 80059b0:	2b30      	cmp	r3, #48	; 0x30
 80059b2:	d86b      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d060      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15e>
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d867      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d05c      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15e>
 80059c0:	2b10      	cmp	r3, #16
 80059c2:	d05a      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15e>
 80059c4:	e062      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6818      	ldr	r0, [r3, #0]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6899      	ldr	r1, [r3, #8]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f000 fbc7 	bl	8006168 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	609a      	str	r2, [r3, #8]
      break;
 80059f2:	e04f      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6818      	ldr	r0, [r3, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	6899      	ldr	r1, [r3, #8]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f000 fbb0 	bl	8006168 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a16:	609a      	str	r2, [r3, #8]
      break;
 8005a18:	e03c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6859      	ldr	r1, [r3, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f000 fb24 	bl	8006074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2150      	movs	r1, #80	; 0x50
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fb7d 	bl	8006132 <TIM_ITRx_SetConfig>
      break;
 8005a38:	e02c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6859      	ldr	r1, [r3, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	461a      	mov	r2, r3
 8005a48:	f000 fb43 	bl	80060d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2160      	movs	r1, #96	; 0x60
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fb6d 	bl	8006132 <TIM_ITRx_SetConfig>
      break;
 8005a58:	e01c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6859      	ldr	r1, [r3, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f000 fb04 	bl	8006074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2140      	movs	r1, #64	; 0x40
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fb5d 	bl	8006132 <TIM_ITRx_SetConfig>
      break;
 8005a78:	e00c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f000 fb54 	bl	8006132 <TIM_ITRx_SetConfig>
      break;
 8005a8a:	e003      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a90:	e000      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a2a      	ldr	r2, [pc, #168]	; (8005b6c <TIM_Base_SetConfig+0xbc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_Base_SetConfig+0x20>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ace:	d108      	bne.n	8005ae2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a21      	ldr	r2, [pc, #132]	; (8005b6c <TIM_Base_SetConfig+0xbc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00b      	beq.n	8005b02 <TIM_Base_SetConfig+0x52>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af0:	d007      	beq.n	8005b02 <TIM_Base_SetConfig+0x52>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a1e      	ldr	r2, [pc, #120]	; (8005b70 <TIM_Base_SetConfig+0xc0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d003      	beq.n	8005b02 <TIM_Base_SetConfig+0x52>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a1d      	ldr	r2, [pc, #116]	; (8005b74 <TIM_Base_SetConfig+0xc4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d108      	bne.n	8005b14 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a0c      	ldr	r2, [pc, #48]	; (8005b6c <TIM_Base_SetConfig+0xbc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d007      	beq.n	8005b50 <TIM_Base_SetConfig+0xa0>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a0b      	ldr	r2, [pc, #44]	; (8005b70 <TIM_Base_SetConfig+0xc0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_Base_SetConfig+0xa0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <TIM_Base_SetConfig+0xc4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d103      	bne.n	8005b58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	615a      	str	r2, [r3, #20]
}
 8005b5e:	bf00      	nop
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40012c00 	.word	0x40012c00
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400

08005b78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	f023 0201 	bic.w	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0303 	bic.w	r3, r3, #3
 8005bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f023 0302 	bic.w	r3, r3, #2
 8005bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a24      	ldr	r2, [pc, #144]	; (8005c64 <TIM_OC1_SetConfig+0xec>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d007      	beq.n	8005be8 <TIM_OC1_SetConfig+0x70>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a23      	ldr	r2, [pc, #140]	; (8005c68 <TIM_OC1_SetConfig+0xf0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_OC1_SetConfig+0x70>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a22      	ldr	r2, [pc, #136]	; (8005c6c <TIM_OC1_SetConfig+0xf4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d10c      	bne.n	8005c02 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0308 	bic.w	r3, r3, #8
 8005bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f023 0304 	bic.w	r3, r3, #4
 8005c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a17      	ldr	r2, [pc, #92]	; (8005c64 <TIM_OC1_SetConfig+0xec>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d007      	beq.n	8005c1a <TIM_OC1_SetConfig+0xa2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a16      	ldr	r2, [pc, #88]	; (8005c68 <TIM_OC1_SetConfig+0xf0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d003      	beq.n	8005c1a <TIM_OC1_SetConfig+0xa2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a15      	ldr	r2, [pc, #84]	; (8005c6c <TIM_OC1_SetConfig+0xf4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d111      	bne.n	8005c3e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	621a      	str	r2, [r3, #32]
}
 8005c58:	bf00      	nop
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	40012c00 	.word	0x40012c00
 8005c68:	40014000 	.word	0x40014000
 8005c6c:	40014400 	.word	0x40014400

08005c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f023 0210 	bic.w	r2, r3, #16
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	021b      	lsls	r3, r3, #8
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f023 0320 	bic.w	r3, r3, #32
 8005cbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a22      	ldr	r2, [pc, #136]	; (8005d58 <TIM_OC2_SetConfig+0xe8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d10d      	bne.n	8005cf0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a19      	ldr	r2, [pc, #100]	; (8005d58 <TIM_OC2_SetConfig+0xe8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d007      	beq.n	8005d08 <TIM_OC2_SetConfig+0x98>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a18      	ldr	r2, [pc, #96]	; (8005d5c <TIM_OC2_SetConfig+0xec>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d003      	beq.n	8005d08 <TIM_OC2_SetConfig+0x98>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a17      	ldr	r2, [pc, #92]	; (8005d60 <TIM_OC2_SetConfig+0xf0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d113      	bne.n	8005d30 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40012c00 	.word	0x40012c00
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	40014400 	.word	0x40014400

08005d64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0303 	bic.w	r3, r3, #3
 8005d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a21      	ldr	r2, [pc, #132]	; (8005e48 <TIM_OC3_SetConfig+0xe4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d10d      	bne.n	8005de2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <TIM_OC3_SetConfig+0xe4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d007      	beq.n	8005dfa <TIM_OC3_SetConfig+0x96>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <TIM_OC3_SetConfig+0xe8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d003      	beq.n	8005dfa <TIM_OC3_SetConfig+0x96>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <TIM_OC3_SetConfig+0xec>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d113      	bne.n	8005e22 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	621a      	str	r2, [r3, #32]
}
 8005e3c:	bf00      	nop
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	40012c00 	.word	0x40012c00
 8005e4c:	40014000 	.word	0x40014000
 8005e50:	40014400 	.word	0x40014400

08005e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	031b      	lsls	r3, r3, #12
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a14      	ldr	r2, [pc, #80]	; (8005f04 <TIM_OC4_SetConfig+0xb0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d007      	beq.n	8005ec8 <TIM_OC4_SetConfig+0x74>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a13      	ldr	r2, [pc, #76]	; (8005f08 <TIM_OC4_SetConfig+0xb4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d003      	beq.n	8005ec8 <TIM_OC4_SetConfig+0x74>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a12      	ldr	r2, [pc, #72]	; (8005f0c <TIM_OC4_SetConfig+0xb8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d109      	bne.n	8005edc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	019b      	lsls	r3, r3, #6
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	621a      	str	r2, [r3, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40012c00 	.word	0x40012c00
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40014400 	.word	0x40014400

08005f10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	041b      	lsls	r3, r3, #16
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a13      	ldr	r2, [pc, #76]	; (8005fb4 <TIM_OC5_SetConfig+0xa4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d007      	beq.n	8005f7a <TIM_OC5_SetConfig+0x6a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a12      	ldr	r2, [pc, #72]	; (8005fb8 <TIM_OC5_SetConfig+0xa8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d003      	beq.n	8005f7a <TIM_OC5_SetConfig+0x6a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a11      	ldr	r2, [pc, #68]	; (8005fbc <TIM_OC5_SetConfig+0xac>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d109      	bne.n	8005f8e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	621a      	str	r2, [r3, #32]
}
 8005fa8:	bf00      	nop
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	40012c00 	.word	0x40012c00
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40014400 	.word	0x40014400

08005fc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	051b      	lsls	r3, r3, #20
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a14      	ldr	r2, [pc, #80]	; (8006068 <TIM_OC6_SetConfig+0xa8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d007      	beq.n	800602c <TIM_OC6_SetConfig+0x6c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a13      	ldr	r2, [pc, #76]	; (800606c <TIM_OC6_SetConfig+0xac>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <TIM_OC6_SetConfig+0x6c>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a12      	ldr	r2, [pc, #72]	; (8006070 <TIM_OC6_SetConfig+0xb0>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d109      	bne.n	8006040 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006032:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	029b      	lsls	r3, r3, #10
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	621a      	str	r2, [r3, #32]
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40012c00 	.word	0x40012c00
 800606c:	40014000 	.word	0x40014000
 8006070:	40014400 	.word	0x40014400

08006074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	f023 0201 	bic.w	r2, r3, #1
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800609e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f023 030a 	bic.w	r3, r3, #10
 80060b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	621a      	str	r2, [r3, #32]
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b087      	sub	sp, #28
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0210 	bic.w	r2, r3, #16
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	031b      	lsls	r3, r3, #12
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800610e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	621a      	str	r2, [r3, #32]
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006132:	b480      	push	{r7}
 8006134:	b085      	sub	sp, #20
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	f043 0307 	orr.w	r3, r3, #7
 8006154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	609a      	str	r2, [r3, #8]
}
 800615c:	bf00      	nop
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	021a      	lsls	r2, r3, #8
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	431a      	orrs	r2, r3
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4313      	orrs	r3, r2
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	4313      	orrs	r3, r2
 8006194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	609a      	str	r2, [r3, #8]
}
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f003 031f 	and.w	r3, r3, #31
 80061ba:	2201      	movs	r2, #1
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a1a      	ldr	r2, [r3, #32]
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	43db      	mvns	r3, r3
 80061ca:	401a      	ands	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a1a      	ldr	r2, [r3, #32]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f003 031f 	and.w	r3, r3, #31
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	fa01 f303 	lsl.w	r3, r1, r3
 80061e0:	431a      	orrs	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	621a      	str	r2, [r3, #32]
}
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
	...

080061f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006208:	2302      	movs	r3, #2
 800620a:	e04f      	b.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a21      	ldr	r2, [pc, #132]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d108      	bne.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800623c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a14      	ldr	r2, [pc, #80]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006274:	d004      	beq.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a10      	ldr	r2, [pc, #64]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10c      	bne.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006286:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	4313      	orrs	r3, r2
 8006290:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	40012c00 	.word	0x40012c00
 80062bc:	40014000 	.word	0x40014000

080062c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062d8:	2302      	movs	r3, #2
 80062da:	e060      	b.n	800639e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4313      	orrs	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	4313      	orrs	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	041b      	lsls	r3, r3, #16
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a14      	ldr	r2, [pc, #80]	; (80063ac <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d115      	bne.n	800638c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	051b      	lsls	r3, r3, #20
 800636c:	4313      	orrs	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	4313      	orrs	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40012c00 	.word	0x40012c00

080063b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e040      	b.n	8006444 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fb fe68 	bl	80020a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2224      	movs	r2, #36	; 0x24
 80063dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0201 	bic.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fc18 	bl	8006c24 <UART_SetConfig>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e022      	b.n	8006444 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fe66 	bl	80070d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800641a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800642a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 feed 	bl	800721c <UART_CheckIdleState>
 8006442:	4603      	mov	r3, r0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08a      	sub	sp, #40	; 0x28
 8006450:	af02      	add	r7, sp, #8
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	4613      	mov	r3, r2
 800645a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006460:	2b20      	cmp	r3, #32
 8006462:	f040 8082 	bne.w	800656a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <HAL_UART_Transmit+0x26>
 800646c:	88fb      	ldrh	r3, [r7, #6]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e07a      	b.n	800656c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_UART_Transmit+0x38>
 8006480:	2302      	movs	r3, #2
 8006482:	e073      	b.n	800656c <HAL_UART_Transmit+0x120>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2221      	movs	r2, #33	; 0x21
 8006498:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800649a:	f7fc fc69 	bl	8002d70 <HAL_GetTick>
 800649e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	88fa      	ldrh	r2, [r7, #6]
 80064ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b8:	d108      	bne.n	80064cc <HAL_UART_Transmit+0x80>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d104      	bne.n	80064cc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	e003      	b.n	80064d4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80064dc:	e02d      	b.n	800653a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2200      	movs	r2, #0
 80064e6:	2180      	movs	r1, #128	; 0x80
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fee0 	bl	80072ae <UART_WaitOnFlagUntilTimeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e039      	b.n	800656c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10b      	bne.n	8006516 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	881a      	ldrh	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800650a:	b292      	uxth	r2, r2
 800650c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	3302      	adds	r3, #2
 8006512:	61bb      	str	r3, [r7, #24]
 8006514:	e008      	b.n	8006528 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	781a      	ldrb	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	b292      	uxth	r2, r2
 8006520:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	3301      	adds	r3, #1
 8006526:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1cb      	bne.n	80064de <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2200      	movs	r2, #0
 800654e:	2140      	movs	r1, #64	; 0x40
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 feac 	bl	80072ae <UART_WaitOnFlagUntilTimeout>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e005      	b.n	800656c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	e000      	b.n	800656c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800656a:	2302      	movs	r3, #2
  }
}
 800656c:	4618      	mov	r0, r3
 800656e:	3720      	adds	r7, #32
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08a      	sub	sp, #40	; 0x28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	4613      	mov	r3, r2
 8006580:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006586:	2b20      	cmp	r3, #32
 8006588:	d142      	bne.n	8006610 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <HAL_UART_Receive_IT+0x22>
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e03b      	b.n	8006612 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <HAL_UART_Receive_IT+0x34>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e034      	b.n	8006612 <HAL_UART_Receive_IT+0x9e>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a18      	ldr	r2, [pc, #96]	; (800661c <HAL_UART_Receive_IT+0xa8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d01f      	beq.n	8006600 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d018      	beq.n	8006600 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	613b      	str	r3, [r7, #16]
   return(result);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	461a      	mov	r2, r3
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	623b      	str	r3, [r7, #32]
 80065ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f0:	69f9      	ldr	r1, [r7, #28]
 80065f2:	6a3a      	ldr	r2, [r7, #32]
 80065f4:	e841 2300 	strex	r3, r2, [r1]
 80065f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e6      	bne.n	80065ce <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006600:	88fb      	ldrh	r3, [r7, #6]
 8006602:	461a      	mov	r2, r3
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 ff16 	bl	8007438 <UART_Start_Receive_IT>
 800660c:	4603      	mov	r3, r0
 800660e:	e000      	b.n	8006612 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006610:	2302      	movs	r3, #2
  }
}
 8006612:	4618      	mov	r0, r3
 8006614:	3728      	adds	r7, #40	; 0x28
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40008000 	.word	0x40008000

08006620 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b0ba      	sub	sp, #232	; 0xe8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006646:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800664a:	f640 030f 	movw	r3, #2063	; 0x80f
 800664e:	4013      	ands	r3, r2
 8006650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d115      	bne.n	8006688 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800665c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00f      	beq.n	8006688 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b00      	cmp	r3, #0
 8006672:	d009      	beq.n	8006688 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 82a6 	beq.w	8006bca <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	4798      	blx	r3
      }
      return;
 8006686:	e2a0      	b.n	8006bca <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8117 	beq.w	80068c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800669e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066a2:	4b85      	ldr	r3, [pc, #532]	; (80068b8 <HAL_UART_IRQHandler+0x298>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 810a 	beq.w	80068c0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d011      	beq.n	80066dc <HAL_UART_IRQHandler+0xbc>
 80066b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2201      	movs	r2, #1
 80066ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066d2:	f043 0201 	orr.w	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d011      	beq.n	800670c <HAL_UART_IRQHandler+0xec>
 80066e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00b      	beq.n	800670c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2202      	movs	r2, #2
 80066fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006702:	f043 0204 	orr.w	r2, r3, #4
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800670c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d011      	beq.n	800673c <HAL_UART_IRQHandler+0x11c>
 8006718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2204      	movs	r2, #4
 800672a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006732:	f043 0202 	orr.w	r2, r3, #2
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800673c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d017      	beq.n	8006778 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800674c:	f003 0320 	and.w	r3, r3, #32
 8006750:	2b00      	cmp	r3, #0
 8006752:	d105      	bne.n	8006760 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006758:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2208      	movs	r2, #8
 8006766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800676e:	f043 0208 	orr.w	r2, r3, #8
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006780:	2b00      	cmp	r3, #0
 8006782:	d012      	beq.n	80067aa <HAL_UART_IRQHandler+0x18a>
 8006784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00c      	beq.n	80067aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067a0:	f043 0220 	orr.w	r2, r3, #32
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 820c 	beq.w	8006bce <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80067b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00d      	beq.n	80067de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f2:	2b40      	cmp	r3, #64	; 0x40
 80067f4:	d005      	beq.n	8006802 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d04f      	beq.n	80068a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fee2 	bl	80075cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006812:	2b40      	cmp	r3, #64	; 0x40
 8006814:	d141      	bne.n	800689a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3308      	adds	r3, #8
 800681c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800682c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3308      	adds	r3, #8
 800683e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006842:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800684e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800685a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1d9      	bne.n	8006816 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006866:	2b00      	cmp	r3, #0
 8006868:	d013      	beq.n	8006892 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686e:	4a13      	ldr	r2, [pc, #76]	; (80068bc <HAL_UART_IRQHandler+0x29c>)
 8006870:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	4618      	mov	r0, r3
 8006878:	f7fc fcb2 	bl	80031e0 <HAL_DMA_Abort_IT>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d017      	beq.n	80068b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800688c:	4610      	mov	r0, r2
 800688e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006890:	e00f      	b.n	80068b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f9b0 	bl	8006bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006898:	e00b      	b.n	80068b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f9ac 	bl	8006bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a0:	e007      	b.n	80068b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f9a8 	bl	8006bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80068b0:	e18d      	b.n	8006bce <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b2:	bf00      	nop
    return;
 80068b4:	e18b      	b.n	8006bce <HAL_UART_IRQHandler+0x5ae>
 80068b6:	bf00      	nop
 80068b8:	04000120 	.word	0x04000120
 80068bc:	08007693 	.word	0x08007693

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	f040 8146 	bne.w	8006b56 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ce:	f003 0310 	and.w	r3, r3, #16
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 813f 	beq.w	8006b56 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80068d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068dc:	f003 0310 	and.w	r3, r3, #16
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 8138 	beq.w	8006b56 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2210      	movs	r2, #16
 80068ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b40      	cmp	r3, #64	; 0x40
 80068fa:	f040 80b4 	bne.w	8006a66 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800690a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 815f 	beq.w	8006bd2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800691a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800691e:	429a      	cmp	r2, r3
 8006920:	f080 8157 	bcs.w	8006bd2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800692a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	f040 8085 	bne.w	8006a4a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800695c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800696a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800696e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006976:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006982:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1da      	bne.n	8006940 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3308      	adds	r3, #8
 8006990:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800699a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800699c:	f023 0301 	bic.w	r3, r3, #1
 80069a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3308      	adds	r3, #8
 80069aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e1      	bne.n	800698a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3308      	adds	r3, #8
 80069cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3308      	adds	r3, #8
 80069e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e3      	bne.n	80069c6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a1a:	f023 0310 	bic.w	r3, r3, #16
 8006a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e4      	bne.n	8006a0a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fc fb8d 	bl	8003164 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f8d4 	bl	8006c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a64:	e0b5      	b.n	8006bd2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 80a7 	beq.w	8006bd6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 80a2 	beq.w	8006bd6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ab6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e4      	bne.n	8006a92 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3308      	adds	r3, #8
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	f023 0301 	bic.w	r3, r3, #1
 8006ade:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006aec:	633a      	str	r2, [r7, #48]	; 0x30
 8006aee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af4:	e841 2300 	strex	r3, r2, [r1]
 8006af8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e3      	bne.n	8006ac8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2220      	movs	r2, #32
 8006b04:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0310 	bic.w	r3, r3, #16
 8006b26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b34:	61fb      	str	r3, [r7, #28]
 8006b36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	69b9      	ldr	r1, [r7, #24]
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	617b      	str	r3, [r7, #20]
   return(result);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e4      	bne.n	8006b12 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f85c 	bl	8006c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b54:	e03f      	b.n	8006bd6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00e      	beq.n	8006b80 <HAL_UART_IRQHandler+0x560>
 8006b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d008      	beq.n	8006b80 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 ff2a 	bl	80079d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b7e:	e02d      	b.n	8006bdc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00e      	beq.n	8006baa <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d008      	beq.n	8006baa <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01c      	beq.n	8006bda <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	4798      	blx	r3
    }
    return;
 8006ba8:	e017      	b.n	8006bda <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d012      	beq.n	8006bdc <HAL_UART_IRQHandler+0x5bc>
 8006bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00c      	beq.n	8006bdc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fd7b 	bl	80076be <UART_EndTransmit_IT>
    return;
 8006bc8:	e008      	b.n	8006bdc <HAL_UART_IRQHandler+0x5bc>
      return;
 8006bca:	bf00      	nop
 8006bcc:	e006      	b.n	8006bdc <HAL_UART_IRQHandler+0x5bc>
    return;
 8006bce:	bf00      	nop
 8006bd0:	e004      	b.n	8006bdc <HAL_UART_IRQHandler+0x5bc>
      return;
 8006bd2:	bf00      	nop
 8006bd4:	e002      	b.n	8006bdc <HAL_UART_IRQHandler+0x5bc>
      return;
 8006bd6:	bf00      	nop
 8006bd8:	e000      	b.n	8006bdc <HAL_UART_IRQHandler+0x5bc>
    return;
 8006bda:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006bdc:	37e8      	adds	r7, #232	; 0xe8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop

08006be4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c28:	b08a      	sub	sp, #40	; 0x28
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	431a      	orrs	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b9e      	ldr	r3, [pc, #632]	; (8006ecc <UART_SetConfig+0x2a8>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a93      	ldr	r2, [pc, #588]	; (8006ed0 <UART_SetConfig+0x2ac>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a8a      	ldr	r2, [pc, #552]	; (8006ed4 <UART_SetConfig+0x2b0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d126      	bne.n	8006cfc <UART_SetConfig+0xd8>
 8006cae:	4b8a      	ldr	r3, [pc, #552]	; (8006ed8 <UART_SetConfig+0x2b4>)
 8006cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb4:	f003 0303 	and.w	r3, r3, #3
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d81b      	bhi.n	8006cf4 <UART_SetConfig+0xd0>
 8006cbc:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <UART_SetConfig+0xa0>)
 8006cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc2:	bf00      	nop
 8006cc4:	08006cd5 	.word	0x08006cd5
 8006cc8:	08006ce5 	.word	0x08006ce5
 8006ccc:	08006cdd 	.word	0x08006cdd
 8006cd0:	08006ced 	.word	0x08006ced
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cda:	e0ab      	b.n	8006e34 <UART_SetConfig+0x210>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce2:	e0a7      	b.n	8006e34 <UART_SetConfig+0x210>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cea:	e0a3      	b.n	8006e34 <UART_SetConfig+0x210>
 8006cec:	2308      	movs	r3, #8
 8006cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cf2:	e09f      	b.n	8006e34 <UART_SetConfig+0x210>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cfa:	e09b      	b.n	8006e34 <UART_SetConfig+0x210>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a76      	ldr	r2, [pc, #472]	; (8006edc <UART_SetConfig+0x2b8>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d138      	bne.n	8006d78 <UART_SetConfig+0x154>
 8006d06:	4b74      	ldr	r3, [pc, #464]	; (8006ed8 <UART_SetConfig+0x2b4>)
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0c:	f003 030c 	and.w	r3, r3, #12
 8006d10:	2b0c      	cmp	r3, #12
 8006d12:	d82d      	bhi.n	8006d70 <UART_SetConfig+0x14c>
 8006d14:	a201      	add	r2, pc, #4	; (adr r2, 8006d1c <UART_SetConfig+0xf8>)
 8006d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1a:	bf00      	nop
 8006d1c:	08006d51 	.word	0x08006d51
 8006d20:	08006d71 	.word	0x08006d71
 8006d24:	08006d71 	.word	0x08006d71
 8006d28:	08006d71 	.word	0x08006d71
 8006d2c:	08006d61 	.word	0x08006d61
 8006d30:	08006d71 	.word	0x08006d71
 8006d34:	08006d71 	.word	0x08006d71
 8006d38:	08006d71 	.word	0x08006d71
 8006d3c:	08006d59 	.word	0x08006d59
 8006d40:	08006d71 	.word	0x08006d71
 8006d44:	08006d71 	.word	0x08006d71
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d69 	.word	0x08006d69
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d56:	e06d      	b.n	8006e34 <UART_SetConfig+0x210>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d5e:	e069      	b.n	8006e34 <UART_SetConfig+0x210>
 8006d60:	2304      	movs	r3, #4
 8006d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d66:	e065      	b.n	8006e34 <UART_SetConfig+0x210>
 8006d68:	2308      	movs	r3, #8
 8006d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d6e:	e061      	b.n	8006e34 <UART_SetConfig+0x210>
 8006d70:	2310      	movs	r3, #16
 8006d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d76:	e05d      	b.n	8006e34 <UART_SetConfig+0x210>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a58      	ldr	r2, [pc, #352]	; (8006ee0 <UART_SetConfig+0x2bc>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d125      	bne.n	8006dce <UART_SetConfig+0x1aa>
 8006d82:	4b55      	ldr	r3, [pc, #340]	; (8006ed8 <UART_SetConfig+0x2b4>)
 8006d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d8c:	2b30      	cmp	r3, #48	; 0x30
 8006d8e:	d016      	beq.n	8006dbe <UART_SetConfig+0x19a>
 8006d90:	2b30      	cmp	r3, #48	; 0x30
 8006d92:	d818      	bhi.n	8006dc6 <UART_SetConfig+0x1a2>
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	d00a      	beq.n	8006dae <UART_SetConfig+0x18a>
 8006d98:	2b20      	cmp	r3, #32
 8006d9a:	d814      	bhi.n	8006dc6 <UART_SetConfig+0x1a2>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <UART_SetConfig+0x182>
 8006da0:	2b10      	cmp	r3, #16
 8006da2:	d008      	beq.n	8006db6 <UART_SetConfig+0x192>
 8006da4:	e00f      	b.n	8006dc6 <UART_SetConfig+0x1a2>
 8006da6:	2300      	movs	r3, #0
 8006da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dac:	e042      	b.n	8006e34 <UART_SetConfig+0x210>
 8006dae:	2302      	movs	r3, #2
 8006db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006db4:	e03e      	b.n	8006e34 <UART_SetConfig+0x210>
 8006db6:	2304      	movs	r3, #4
 8006db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dbc:	e03a      	b.n	8006e34 <UART_SetConfig+0x210>
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dc4:	e036      	b.n	8006e34 <UART_SetConfig+0x210>
 8006dc6:	2310      	movs	r3, #16
 8006dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dcc:	e032      	b.n	8006e34 <UART_SetConfig+0x210>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a3f      	ldr	r2, [pc, #252]	; (8006ed0 <UART_SetConfig+0x2ac>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d12a      	bne.n	8006e2e <UART_SetConfig+0x20a>
 8006dd8:	4b3f      	ldr	r3, [pc, #252]	; (8006ed8 <UART_SetConfig+0x2b4>)
 8006dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006de2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006de6:	d01a      	beq.n	8006e1e <UART_SetConfig+0x1fa>
 8006de8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dec:	d81b      	bhi.n	8006e26 <UART_SetConfig+0x202>
 8006dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006df2:	d00c      	beq.n	8006e0e <UART_SetConfig+0x1ea>
 8006df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006df8:	d815      	bhi.n	8006e26 <UART_SetConfig+0x202>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <UART_SetConfig+0x1e2>
 8006dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e02:	d008      	beq.n	8006e16 <UART_SetConfig+0x1f2>
 8006e04:	e00f      	b.n	8006e26 <UART_SetConfig+0x202>
 8006e06:	2300      	movs	r3, #0
 8006e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e0c:	e012      	b.n	8006e34 <UART_SetConfig+0x210>
 8006e0e:	2302      	movs	r3, #2
 8006e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e14:	e00e      	b.n	8006e34 <UART_SetConfig+0x210>
 8006e16:	2304      	movs	r3, #4
 8006e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e1c:	e00a      	b.n	8006e34 <UART_SetConfig+0x210>
 8006e1e:	2308      	movs	r3, #8
 8006e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e24:	e006      	b.n	8006e34 <UART_SetConfig+0x210>
 8006e26:	2310      	movs	r3, #16
 8006e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e2c:	e002      	b.n	8006e34 <UART_SetConfig+0x210>
 8006e2e:	2310      	movs	r3, #16
 8006e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a25      	ldr	r2, [pc, #148]	; (8006ed0 <UART_SetConfig+0x2ac>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	f040 808a 	bne.w	8006f54 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d824      	bhi.n	8006e92 <UART_SetConfig+0x26e>
 8006e48:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <UART_SetConfig+0x22c>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e75 	.word	0x08006e75
 8006e54:	08006e93 	.word	0x08006e93
 8006e58:	08006e7d 	.word	0x08006e7d
 8006e5c:	08006e93 	.word	0x08006e93
 8006e60:	08006e83 	.word	0x08006e83
 8006e64:	08006e93 	.word	0x08006e93
 8006e68:	08006e93 	.word	0x08006e93
 8006e6c:	08006e93 	.word	0x08006e93
 8006e70:	08006e8b 	.word	0x08006e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e74:	f7fd fa78 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 8006e78:	61f8      	str	r0, [r7, #28]
        break;
 8006e7a:	e010      	b.n	8006e9e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e7c:	4b19      	ldr	r3, [pc, #100]	; (8006ee4 <UART_SetConfig+0x2c0>)
 8006e7e:	61fb      	str	r3, [r7, #28]
        break;
 8006e80:	e00d      	b.n	8006e9e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e82:	f7fd f9d9 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 8006e86:	61f8      	str	r0, [r7, #28]
        break;
 8006e88:	e009      	b.n	8006e9e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e8e:	61fb      	str	r3, [r7, #28]
        break;
 8006e90:	e005      	b.n	8006e9e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8109 	beq.w	80070b8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	4413      	add	r3, r2
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d305      	bcc.n	8006ec2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d912      	bls.n	8006ee8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ec8:	e0f6      	b.n	80070b8 <UART_SetConfig+0x494>
 8006eca:	bf00      	nop
 8006ecc:	efff69f3 	.word	0xefff69f3
 8006ed0:	40008000 	.word	0x40008000
 8006ed4:	40013800 	.word	0x40013800
 8006ed8:	40021000 	.word	0x40021000
 8006edc:	40004400 	.word	0x40004400
 8006ee0:	40004800 	.word	0x40004800
 8006ee4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	2200      	movs	r2, #0
 8006eec:	461c      	mov	r4, r3
 8006eee:	4615      	mov	r5, r2
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	022b      	lsls	r3, r5, #8
 8006efa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006efe:	0222      	lsls	r2, r4, #8
 8006f00:	68f9      	ldr	r1, [r7, #12]
 8006f02:	6849      	ldr	r1, [r1, #4]
 8006f04:	0849      	lsrs	r1, r1, #1
 8006f06:	2000      	movs	r0, #0
 8006f08:	4688      	mov	r8, r1
 8006f0a:	4681      	mov	r9, r0
 8006f0c:	eb12 0a08 	adds.w	sl, r2, r8
 8006f10:	eb43 0b09 	adc.w	fp, r3, r9
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	607a      	str	r2, [r7, #4]
 8006f1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f22:	4650      	mov	r0, sl
 8006f24:	4659      	mov	r1, fp
 8006f26:	f7f9 feaf 	bl	8000c88 <__aeabi_uldivmod>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4613      	mov	r3, r2
 8006f30:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f38:	d308      	bcc.n	8006f4c <UART_SetConfig+0x328>
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f40:	d204      	bcs.n	8006f4c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	60da      	str	r2, [r3, #12]
 8006f4a:	e0b5      	b.n	80070b8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f52:	e0b1      	b.n	80070b8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f5c:	d15d      	bne.n	800701a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006f5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f62:	2b08      	cmp	r3, #8
 8006f64:	d827      	bhi.n	8006fb6 <UART_SetConfig+0x392>
 8006f66:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <UART_SetConfig+0x348>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08006f91 	.word	0x08006f91
 8006f70:	08006f99 	.word	0x08006f99
 8006f74:	08006fa1 	.word	0x08006fa1
 8006f78:	08006fb7 	.word	0x08006fb7
 8006f7c:	08006fa7 	.word	0x08006fa7
 8006f80:	08006fb7 	.word	0x08006fb7
 8006f84:	08006fb7 	.word	0x08006fb7
 8006f88:	08006fb7 	.word	0x08006fb7
 8006f8c:	08006faf 	.word	0x08006faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f90:	f7fd f9ea 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 8006f94:	61f8      	str	r0, [r7, #28]
        break;
 8006f96:	e014      	b.n	8006fc2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f98:	f7fd f9fc 	bl	8004394 <HAL_RCC_GetPCLK2Freq>
 8006f9c:	61f8      	str	r0, [r7, #28]
        break;
 8006f9e:	e010      	b.n	8006fc2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fa0:	4b4c      	ldr	r3, [pc, #304]	; (80070d4 <UART_SetConfig+0x4b0>)
 8006fa2:	61fb      	str	r3, [r7, #28]
        break;
 8006fa4:	e00d      	b.n	8006fc2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fa6:	f7fd f947 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 8006faa:	61f8      	str	r0, [r7, #28]
        break;
 8006fac:	e009      	b.n	8006fc2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb2:	61fb      	str	r3, [r7, #28]
        break;
 8006fb4:	e005      	b.n	8006fc2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d077      	beq.n	80070b8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	005a      	lsls	r2, r3, #1
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	085b      	lsrs	r3, r3, #1
 8006fd2:	441a      	add	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fdc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b0f      	cmp	r3, #15
 8006fe2:	d916      	bls.n	8007012 <UART_SetConfig+0x3ee>
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fea:	d212      	bcs.n	8007012 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f023 030f 	bic.w	r3, r3, #15
 8006ff4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	085b      	lsrs	r3, r3, #1
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	f003 0307 	and.w	r3, r3, #7
 8007000:	b29a      	uxth	r2, r3
 8007002:	8afb      	ldrh	r3, [r7, #22]
 8007004:	4313      	orrs	r3, r2
 8007006:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	8afa      	ldrh	r2, [r7, #22]
 800700e:	60da      	str	r2, [r3, #12]
 8007010:	e052      	b.n	80070b8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007018:	e04e      	b.n	80070b8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800701a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800701e:	2b08      	cmp	r3, #8
 8007020:	d827      	bhi.n	8007072 <UART_SetConfig+0x44e>
 8007022:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <UART_SetConfig+0x404>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	0800704d 	.word	0x0800704d
 800702c:	08007055 	.word	0x08007055
 8007030:	0800705d 	.word	0x0800705d
 8007034:	08007073 	.word	0x08007073
 8007038:	08007063 	.word	0x08007063
 800703c:	08007073 	.word	0x08007073
 8007040:	08007073 	.word	0x08007073
 8007044:	08007073 	.word	0x08007073
 8007048:	0800706b 	.word	0x0800706b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800704c:	f7fd f98c 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 8007050:	61f8      	str	r0, [r7, #28]
        break;
 8007052:	e014      	b.n	800707e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007054:	f7fd f99e 	bl	8004394 <HAL_RCC_GetPCLK2Freq>
 8007058:	61f8      	str	r0, [r7, #28]
        break;
 800705a:	e010      	b.n	800707e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800705c:	4b1d      	ldr	r3, [pc, #116]	; (80070d4 <UART_SetConfig+0x4b0>)
 800705e:	61fb      	str	r3, [r7, #28]
        break;
 8007060:	e00d      	b.n	800707e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007062:	f7fd f8e9 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 8007066:	61f8      	str	r0, [r7, #28]
        break;
 8007068:	e009      	b.n	800707e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800706a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800706e:	61fb      	str	r3, [r7, #28]
        break;
 8007070:	e005      	b.n	800707e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800707c:	bf00      	nop
    }

    if (pclk != 0U)
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d019      	beq.n	80070b8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	085a      	lsrs	r2, r3, #1
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	441a      	add	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	fbb2 f3f3 	udiv	r3, r2, r3
 8007096:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	2b0f      	cmp	r3, #15
 800709c:	d909      	bls.n	80070b2 <UART_SetConfig+0x48e>
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a4:	d205      	bcs.n	80070b2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60da      	str	r2, [r3, #12]
 80070b0:	e002      	b.n	80070b8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80070c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3728      	adds	r7, #40	; 0x28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070d2:	bf00      	nop
 80070d4:	00f42400 	.word	0x00f42400

080070d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	f003 0310 	and.w	r3, r3, #16
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01a      	beq.n	80071ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d6:	d10a      	bne.n	80071ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	605a      	str	r2, [r3, #4]
  }
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af02      	add	r7, sp, #8
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800722c:	f7fb fda0 	bl	8002d70 <HAL_GetTick>
 8007230:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b08      	cmp	r3, #8
 800723e:	d10e      	bne.n	800725e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f82d 	bl	80072ae <UART_WaitOnFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e023      	b.n	80072a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b04      	cmp	r3, #4
 800726a:	d10e      	bne.n	800728a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800726c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f817 	bl	80072ae <UART_WaitOnFlagUntilTimeout>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e00d      	b.n	80072a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2220      	movs	r2, #32
 800728e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b09c      	sub	sp, #112	; 0x70
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	60b9      	str	r1, [r7, #8]
 80072b8:	603b      	str	r3, [r7, #0]
 80072ba:	4613      	mov	r3, r2
 80072bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072be:	e0a5      	b.n	800740c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c6:	f000 80a1 	beq.w	800740c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ca:	f7fb fd51 	bl	8002d70 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d302      	bcc.n	80072e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80072da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d13e      	bne.n	800735e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072f4:	667b      	str	r3, [r7, #100]	; 0x64
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007300:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007304:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800730c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e6      	bne.n	80072e0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	f023 0301 	bic.w	r3, r3, #1
 8007328:	663b      	str	r3, [r7, #96]	; 0x60
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3308      	adds	r3, #8
 8007330:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007332:	64ba      	str	r2, [r7, #72]	; 0x48
 8007334:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007338:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e5      	bne.n	8007312 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2220      	movs	r2, #32
 8007350:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e067      	b.n	800742e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	d04f      	beq.n	800740c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800737a:	d147      	bne.n	800740c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007384:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	e853 3f00 	ldrex	r3, [r3]
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800739a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	461a      	mov	r2, r3
 80073a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a4:	637b      	str	r3, [r7, #52]	; 0x34
 80073a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073ac:	e841 2300 	strex	r3, r2, [r1]
 80073b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e6      	bne.n	8007386 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3308      	adds	r3, #8
 80073be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	e853 3f00 	ldrex	r3, [r3]
 80073c6:	613b      	str	r3, [r7, #16]
   return(result);
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f023 0301 	bic.w	r3, r3, #1
 80073ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3308      	adds	r3, #8
 80073d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073d8:	623a      	str	r2, [r7, #32]
 80073da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	69f9      	ldr	r1, [r7, #28]
 80073de:	6a3a      	ldr	r2, [r7, #32]
 80073e0:	e841 2300 	strex	r3, r2, [r1]
 80073e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e5      	bne.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2220      	movs	r2, #32
 80073f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2220      	movs	r2, #32
 80073f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e010      	b.n	800742e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69da      	ldr	r2, [r3, #28]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	4013      	ands	r3, r2
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	429a      	cmp	r2, r3
 800741a:	bf0c      	ite	eq
 800741c:	2301      	moveq	r3, #1
 800741e:	2300      	movne	r3, #0
 8007420:	b2db      	uxtb	r3, r3
 8007422:	461a      	mov	r2, r3
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	429a      	cmp	r2, r3
 8007428:	f43f af4a 	beq.w	80072c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3770      	adds	r7, #112	; 0x70
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007438:	b480      	push	{r7}
 800743a:	b097      	sub	sp, #92	; 0x5c
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	4613      	mov	r3, r2
 8007444:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	88fa      	ldrh	r2, [r7, #6]
 8007450:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	88fa      	ldrh	r2, [r7, #6]
 8007458:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746a:	d10e      	bne.n	800748a <UART_Start_Receive_IT+0x52>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d105      	bne.n	8007480 <UART_Start_Receive_IT+0x48>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f240 12ff 	movw	r2, #511	; 0x1ff
 800747a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800747e:	e02d      	b.n	80074dc <UART_Start_Receive_IT+0xa4>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	22ff      	movs	r2, #255	; 0xff
 8007484:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007488:	e028      	b.n	80074dc <UART_Start_Receive_IT+0xa4>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10d      	bne.n	80074ae <UART_Start_Receive_IT+0x76>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d104      	bne.n	80074a4 <UART_Start_Receive_IT+0x6c>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	22ff      	movs	r2, #255	; 0xff
 800749e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074a2:	e01b      	b.n	80074dc <UART_Start_Receive_IT+0xa4>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	227f      	movs	r2, #127	; 0x7f
 80074a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074ac:	e016      	b.n	80074dc <UART_Start_Receive_IT+0xa4>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074b6:	d10d      	bne.n	80074d4 <UART_Start_Receive_IT+0x9c>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d104      	bne.n	80074ca <UART_Start_Receive_IT+0x92>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	227f      	movs	r2, #127	; 0x7f
 80074c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074c8:	e008      	b.n	80074dc <UART_Start_Receive_IT+0xa4>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	223f      	movs	r2, #63	; 0x3f
 80074ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074d2:	e003      	b.n	80074dc <UART_Start_Receive_IT+0xa4>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2222      	movs	r2, #34	; 0x22
 80074e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fc:	f043 0301 	orr.w	r3, r3, #1
 8007500:	657b      	str	r3, [r7, #84]	; 0x54
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3308      	adds	r3, #8
 8007508:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800750a:	64ba      	str	r2, [r7, #72]	; 0x48
 800750c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e5      	bne.n	80074ea <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007526:	d107      	bne.n	8007538 <UART_Start_Receive_IT+0x100>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d103      	bne.n	8007538 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4a24      	ldr	r2, [pc, #144]	; (80075c4 <UART_Start_Receive_IT+0x18c>)
 8007534:	665a      	str	r2, [r3, #100]	; 0x64
 8007536:	e002      	b.n	800753e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4a23      	ldr	r2, [pc, #140]	; (80075c8 <UART_Start_Receive_IT+0x190>)
 800753c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d019      	beq.n	8007582 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
 800756e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e6      	bne.n	800754e <UART_Start_Receive_IT+0x116>
 8007580:	e018      	b.n	80075b4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	613b      	str	r3, [r7, #16]
   return(result);
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f043 0320 	orr.w	r3, r3, #32
 8007596:	653b      	str	r3, [r7, #80]	; 0x50
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a0:	623b      	str	r3, [r7, #32]
 80075a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	69f9      	ldr	r1, [r7, #28]
 80075a6:	6a3a      	ldr	r2, [r7, #32]
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e6      	bne.n	8007582 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	375c      	adds	r7, #92	; 0x5c
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	08007873 	.word	0x08007873
 80075c8:	08007713 	.word	0x08007713

080075cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b095      	sub	sp, #84	; 0x54
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075f2:	643b      	str	r3, [r7, #64]	; 0x40
 80075f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075fa:	e841 2300 	strex	r3, r2, [r1]
 80075fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e6      	bne.n	80075d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3308      	adds	r3, #8
 800760c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	e853 3f00 	ldrex	r3, [r3]
 8007614:	61fb      	str	r3, [r7, #28]
   return(result);
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	f023 0301 	bic.w	r3, r3, #1
 800761c:	64bb      	str	r3, [r7, #72]	; 0x48
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3308      	adds	r3, #8
 8007624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007626:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007628:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800762c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800762e:	e841 2300 	strex	r3, r2, [r1]
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1e5      	bne.n	8007606 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800763e:	2b01      	cmp	r3, #1
 8007640:	d118      	bne.n	8007674 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f023 0310 	bic.w	r3, r3, #16
 8007656:	647b      	str	r3, [r7, #68]	; 0x44
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	461a      	mov	r2, r3
 800765e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007660:	61bb      	str	r3, [r7, #24]
 8007662:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	6979      	ldr	r1, [r7, #20]
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	613b      	str	r3, [r7, #16]
   return(result);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e6      	bne.n	8007642 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007686:	bf00      	nop
 8007688:	3754      	adds	r7, #84	; 0x54
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7ff faa1 	bl	8006bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076b6:	bf00      	nop
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b088      	sub	sp, #32
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	e853 3f00 	ldrex	r3, [r3]
 80076d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076da:	61fb      	str	r3, [r7, #28]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	61bb      	str	r3, [r7, #24]
 80076e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e8:	6979      	ldr	r1, [r7, #20]
 80076ea:	69ba      	ldr	r2, [r7, #24]
 80076ec:	e841 2300 	strex	r3, r2, [r1]
 80076f0:	613b      	str	r3, [r7, #16]
   return(result);
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1e6      	bne.n	80076c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2220      	movs	r2, #32
 80076fc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7ff fa6d 	bl	8006be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800770a:	bf00      	nop
 800770c:	3720      	adds	r7, #32
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b096      	sub	sp, #88	; 0x58
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007720:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007728:	2b22      	cmp	r3, #34	; 0x22
 800772a:	f040 8094 	bne.w	8007856 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007734:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007738:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800773c:	b2d9      	uxtb	r1, r3
 800773e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007742:	b2da      	uxtb	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007748:	400a      	ands	r2, r1
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800775e:	b29b      	uxth	r3, r3
 8007760:	3b01      	subs	r3, #1
 8007762:	b29a      	uxth	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d179      	bne.n	800786a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	e853 3f00 	ldrex	r3, [r3]
 8007782:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800778a:	653b      	str	r3, [r7, #80]	; 0x50
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007794:	647b      	str	r3, [r7, #68]	; 0x44
 8007796:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007798:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800779a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800779c:	e841 2300 	strex	r3, r2, [r1]
 80077a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e6      	bne.n	8007776 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3308      	adds	r3, #8
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	623b      	str	r3, [r7, #32]
   return(result);
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	f023 0301 	bic.w	r3, r3, #1
 80077be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3308      	adds	r3, #8
 80077c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077c8:	633a      	str	r2, [r7, #48]	; 0x30
 80077ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e5      	bne.n	80077a8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d12e      	bne.n	800784e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	e853 3f00 	ldrex	r3, [r3]
 8007802:	60fb      	str	r3, [r7, #12]
   return(result);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0310 	bic.w	r3, r3, #16
 800780a:	64bb      	str	r3, [r7, #72]	; 0x48
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007814:	61fb      	str	r3, [r7, #28]
 8007816:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	69b9      	ldr	r1, [r7, #24]
 800781a:	69fa      	ldr	r2, [r7, #28]
 800781c:	e841 2300 	strex	r3, r2, [r1]
 8007820:	617b      	str	r3, [r7, #20]
   return(result);
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e6      	bne.n	80077f6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	f003 0310 	and.w	r3, r3, #16
 8007832:	2b10      	cmp	r3, #16
 8007834:	d103      	bne.n	800783e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2210      	movs	r2, #16
 800783c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7ff f9e0 	bl	8006c0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800784c:	e00d      	b.n	800786a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7f9 fee0 	bl	8001614 <HAL_UART_RxCpltCallback>
}
 8007854:	e009      	b.n	800786a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	8b1b      	ldrh	r3, [r3, #24]
 800785c:	b29a      	uxth	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0208 	orr.w	r2, r2, #8
 8007866:	b292      	uxth	r2, r2
 8007868:	831a      	strh	r2, [r3, #24]
}
 800786a:	bf00      	nop
 800786c:	3758      	adds	r7, #88	; 0x58
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b096      	sub	sp, #88	; 0x58
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007880:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007888:	2b22      	cmp	r3, #34	; 0x22
 800788a:	f040 8094 	bne.w	80079b6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007894:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800789e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80078a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078a6:	4013      	ands	r3, r2
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b2:	1c9a      	adds	r2, r3, #2
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d179      	bne.n	80079ca <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	461a      	mov	r2, r3
 80078f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f4:	643b      	str	r3, [r7, #64]	; 0x40
 80078f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e6      	bne.n	80078d6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3308      	adds	r3, #8
 800790e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	61fb      	str	r3, [r7, #28]
   return(result);
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	f023 0301 	bic.w	r3, r3, #1
 800791e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3308      	adds	r3, #8
 8007926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007928:	62fa      	str	r2, [r7, #44]	; 0x2c
 800792a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800792e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e5      	bne.n	8007908 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2220      	movs	r2, #32
 8007940:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800794c:	2b01      	cmp	r3, #1
 800794e:	d12e      	bne.n	80079ae <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	e853 3f00 	ldrex	r3, [r3]
 8007962:	60bb      	str	r3, [r7, #8]
   return(result);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	f023 0310 	bic.w	r3, r3, #16
 800796a:	647b      	str	r3, [r7, #68]	; 0x44
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	461a      	mov	r2, r3
 8007972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007974:	61bb      	str	r3, [r7, #24]
 8007976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007978:	6979      	ldr	r1, [r7, #20]
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	e841 2300 	strex	r3, r2, [r1]
 8007980:	613b      	str	r3, [r7, #16]
   return(result);
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e6      	bne.n	8007956 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	f003 0310 	and.w	r3, r3, #16
 8007992:	2b10      	cmp	r3, #16
 8007994:	d103      	bne.n	800799e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2210      	movs	r2, #16
 800799c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff f930 	bl	8006c0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079ac:	e00d      	b.n	80079ca <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7f9 fe30 	bl	8001614 <HAL_UART_RxCpltCallback>
}
 80079b4:	e009      	b.n	80079ca <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	8b1b      	ldrh	r3, [r3, #24]
 80079bc:	b29a      	uxth	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f042 0208 	orr.w	r2, r2, #8
 80079c6:	b292      	uxth	r2, r2
 80079c8:	831a      	strh	r2, [r3, #24]
}
 80079ca:	bf00      	nop
 80079cc:	3758      	adds	r7, #88	; 0x58
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <setCSLine>:
#define RES14           14

#define AMT22_DELAY     10

void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	807b      	strh	r3, [r7, #2]
 80079f2:	4613      	mov	r3, r2
 80079f4:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 80079f6:	787a      	ldrb	r2, [r7, #1]
 80079f8:	887b      	ldrh	r3, [r7, #2]
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7fb fe59 	bl	80036b4 <HAL_GPIO_WritePin>
}
 8007a02:	bf00      	nop
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b088      	sub	sp, #32
 8007a0e:	af02      	add	r7, sp, #8
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	461a      	mov	r2, r3
 8007a16:	460b      	mov	r3, r1
 8007a18:	72fb      	strb	r3, [r7, #11]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 8007a1e:	893b      	ldrh	r3, [r7, #8]
 8007a20:	2200      	movs	r2, #0
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff ffde 	bl	80079e6 <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8007a2a:	200a      	movs	r0, #10
 8007a2c:	f000 f8d2 	bl	8007bd4 <delay_us_AMT22>

  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8007a30:	f107 0217 	add.w	r2, r7, #23
 8007a34:	f107 010b 	add.w	r1, r7, #11
 8007a38:	230a      	movs	r3, #10
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f7fd f8fd 	bl	8004c3e <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  //  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8007a44:	200a      	movs	r0, #10
 8007a46:	f000 f8c5 	bl	8007bd4 <delay_us_AMT22>

  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 8007a4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007a4e:	893b      	ldrh	r3, [r7, #8]
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7ff ffc7 	bl	80079e6 <setCSLine>

  return data;
 8007a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b08c      	sub	sp, #48	; 0x30
 8007a66:	af02      	add	r7, sp, #8
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	461a      	mov	r2, r3
 8007a70:	460b      	mov	r3, r1
 8007a72:	80fb      	strh	r3, [r7, #6]
 8007a74:	4613      	mov	r3, r2
 8007a76:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8;
 8007a78:	88fa      	ldrh	r2, [r7, #6]
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	4613      	mov	r3, r2
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	2100      	movs	r1, #0
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f7ff ffbe 	bl	8007a0a <spiWriteRead>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	021b      	lsls	r3, r3, #8
 8007a94:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8007a96:	200a      	movs	r0, #10
 8007a98:	f000 f89c 	bl	8007bd4 <delay_us_AMT22>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer);
 8007a9c:	88fa      	ldrh	r2, [r7, #6]
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	9301      	str	r3, [sp, #4]
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	2100      	movs	r1, #0
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f7ff ffac 	bl	8007a0a <spiWriteRead>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 8007abc:	2300      	movs	r3, #0
 8007abe:	623b      	str	r3, [r7, #32]
 8007ac0:	e010      	b.n	8007ae4 <getPositionSPI+0x82>
 8007ac2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	fa42 f303 	asr.w	r3, r2, r3
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	b2d9      	uxtb	r1, r3
 8007ad2:	f107 0210 	add.w	r2, r7, #16
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	4413      	add	r3, r2
 8007ada:	460a      	mov	r2, r1
 8007adc:	701a      	strb	r2, [r3, #0]
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	623b      	str	r3, [r7, #32]
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	2b0f      	cmp	r3, #15
 8007ae8:	ddeb      	ble.n	8007ac2 <getPositionSPI+0x60>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
 if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8007aea:	7ffb      	ldrb	r3, [r7, #31]
 8007aec:	4619      	mov	r1, r3
 8007aee:	7f7a      	ldrb	r2, [r7, #29]
 8007af0:	7efb      	ldrb	r3, [r7, #27]
 8007af2:	4053      	eors	r3, r2
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	7e7b      	ldrb	r3, [r7, #25]
 8007af8:	4053      	eors	r3, r2
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	4053      	eors	r3, r2
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	7d7b      	ldrb	r3, [r7, #21]
 8007b04:	4053      	eors	r3, r2
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	7cfb      	ldrb	r3, [r7, #19]
 8007b0a:	4053      	eors	r3, r2
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	7c7b      	ldrb	r3, [r7, #17]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	bf0c      	ite	eq
 8007b14:	2301      	moveq	r3, #1
 8007b16:	2300      	movne	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	4299      	cmp	r1, r3
 8007b1c:	d11e      	bne.n	8007b5c <getPositionSPI+0xfa>
         && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8007b1e:	7fbb      	ldrb	r3, [r7, #30]
 8007b20:	4619      	mov	r1, r3
 8007b22:	7f3a      	ldrb	r2, [r7, #28]
 8007b24:	7ebb      	ldrb	r3, [r7, #26]
 8007b26:	4053      	eors	r3, r2
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	7e3b      	ldrb	r3, [r7, #24]
 8007b2c:	4053      	eors	r3, r2
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	7dbb      	ldrb	r3, [r7, #22]
 8007b32:	4053      	eors	r3, r2
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	7d3b      	ldrb	r3, [r7, #20]
 8007b38:	4053      	eors	r3, r2
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	7cbb      	ldrb	r3, [r7, #18]
 8007b3e:	4053      	eors	r3, r2
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	7c3b      	ldrb	r3, [r7, #16]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	bf0c      	ite	eq
 8007b48:	2301      	moveq	r3, #1
 8007b4a:	2300      	movne	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	4299      	cmp	r1, r3
 8007b50:	d104      	bne.n	8007b5c <getPositionSPI+0xfa>
   {
     //we got back a good position, so just mask away the checkbits
     currentPosition &= 0x3FFF;
 8007b52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b54:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007b58:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007b5a:	e002      	b.n	8007b62 <getPositionSPI+0x100>
   }
 else
 {
   currentPosition = 0xFFFF; //bad position
 8007b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b60:	84fb      	strh	r3, [r7, #38]	; 0x26
 }
  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 8007b62:	797b      	ldrb	r3, [r7, #5]
 8007b64:	2b0c      	cmp	r3, #12
 8007b66:	d107      	bne.n	8007b78 <getPositionSPI+0x116>
 8007b68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d002      	beq.n	8007b78 <getPositionSPI+0x116>
 8007b72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b74:	089b      	lsrs	r3, r3, #2
 8007b76:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 8007b78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3728      	adds	r7, #40	; 0x28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <resetAMT22>:
  //power on delay is 200ms
  HAL_Delay(250);
}

void resetAMT22(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, TIM_HandleTypeDef *timer)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b086      	sub	sp, #24
 8007b86:	af02      	add	r7, sp, #8
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	603b      	str	r3, [r7, #0]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	80fb      	strh	r3, [r7, #6]
  spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer);
 8007b92:	88fa      	ldrh	r2, [r7, #6]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	2300      	movs	r3, #0
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f7ff ff31 	bl	8007a0a <spiWriteRead>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8007ba8:	200a      	movs	r0, #10
 8007baa:	f000 f813 	bl	8007bd4 <delay_us_AMT22>

  spiWriteRead(hspi, AMT22_RESET, encoderPort, encoderPin, 1, timer);
 8007bae:	88fa      	ldrh	r2, [r7, #6]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	2160      	movs	r1, #96	; 0x60
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f7ff ff23 	bl	8007a0a <spiWriteRead>

//  delay(timer, 250);
  // delay_us_AMT22(250);
  //power on delay is 200ms
  HAL_Delay(250);
 8007bc4:	20fa      	movs	r0, #250	; 0xfa
 8007bc6:	f7fb f8df 	bl	8002d88 <HAL_Delay>
}
 8007bca:	bf00      	nop
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <delay_us_AMT22>:
			passedTime +=timer->Init.Period;
		}
	}
}
void delay_us_AMT22 (uint16_t us)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8007bde:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <delay_us_AMT22+0x30>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2200      	movs	r2, #0
 8007be4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8007be6:	bf00      	nop
 8007be8:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <delay_us_AMT22+0x30>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bee:	88fb      	ldrh	r3, [r7, #6]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d3f9      	bcc.n	8007be8 <delay_us_AMT22+0x14>
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	200004f4 	.word	0x200004f4

08007c08 <_Znaj>:
 8007c08:	f000 b800 	b.w	8007c0c <_Znwj>

08007c0c <_Znwj>:
 8007c0c:	2801      	cmp	r0, #1
 8007c0e:	bf38      	it	cc
 8007c10:	2001      	movcc	r0, #1
 8007c12:	b510      	push	{r4, lr}
 8007c14:	4604      	mov	r4, r0
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 f844 	bl	8007ca4 <malloc>
 8007c1c:	b930      	cbnz	r0, 8007c2c <_Znwj+0x20>
 8007c1e:	f000 f807 	bl	8007c30 <_ZSt15get_new_handlerv>
 8007c22:	b908      	cbnz	r0, 8007c28 <_Znwj+0x1c>
 8007c24:	f000 f80c 	bl	8007c40 <abort>
 8007c28:	4780      	blx	r0
 8007c2a:	e7f4      	b.n	8007c16 <_Znwj+0xa>
 8007c2c:	bd10      	pop	{r4, pc}
	...

08007c30 <_ZSt15get_new_handlerv>:
 8007c30:	4b02      	ldr	r3, [pc, #8]	; (8007c3c <_ZSt15get_new_handlerv+0xc>)
 8007c32:	6818      	ldr	r0, [r3, #0]
 8007c34:	f3bf 8f5b 	dmb	ish
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	2000065c 	.word	0x2000065c

08007c40 <abort>:
 8007c40:	b508      	push	{r3, lr}
 8007c42:	2006      	movs	r0, #6
 8007c44:	f001 f878 	bl	8008d38 <raise>
 8007c48:	2001      	movs	r0, #1
 8007c4a:	f7f9 ff69 	bl	8001b20 <_exit>
	...

08007c50 <__errno>:
 8007c50:	4b01      	ldr	r3, [pc, #4]	; (8007c58 <__errno+0x8>)
 8007c52:	6818      	ldr	r0, [r3, #0]
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	2000003c 	.word	0x2000003c

08007c5c <__libc_init_array>:
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	4d0d      	ldr	r5, [pc, #52]	; (8007c94 <__libc_init_array+0x38>)
 8007c60:	4c0d      	ldr	r4, [pc, #52]	; (8007c98 <__libc_init_array+0x3c>)
 8007c62:	1b64      	subs	r4, r4, r5
 8007c64:	10a4      	asrs	r4, r4, #2
 8007c66:	2600      	movs	r6, #0
 8007c68:	42a6      	cmp	r6, r4
 8007c6a:	d109      	bne.n	8007c80 <__libc_init_array+0x24>
 8007c6c:	4d0b      	ldr	r5, [pc, #44]	; (8007c9c <__libc_init_array+0x40>)
 8007c6e:	4c0c      	ldr	r4, [pc, #48]	; (8007ca0 <__libc_init_array+0x44>)
 8007c70:	f005 fba4 	bl	800d3bc <_init>
 8007c74:	1b64      	subs	r4, r4, r5
 8007c76:	10a4      	asrs	r4, r4, #2
 8007c78:	2600      	movs	r6, #0
 8007c7a:	42a6      	cmp	r6, r4
 8007c7c:	d105      	bne.n	8007c8a <__libc_init_array+0x2e>
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c84:	4798      	blx	r3
 8007c86:	3601      	adds	r6, #1
 8007c88:	e7ee      	b.n	8007c68 <__libc_init_array+0xc>
 8007c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8e:	4798      	blx	r3
 8007c90:	3601      	adds	r6, #1
 8007c92:	e7f2      	b.n	8007c7a <__libc_init_array+0x1e>
 8007c94:	0800e054 	.word	0x0800e054
 8007c98:	0800e054 	.word	0x0800e054
 8007c9c:	0800e054 	.word	0x0800e054
 8007ca0:	0800e05c 	.word	0x0800e05c

08007ca4 <malloc>:
 8007ca4:	4b02      	ldr	r3, [pc, #8]	; (8007cb0 <malloc+0xc>)
 8007ca6:	4601      	mov	r1, r0
 8007ca8:	6818      	ldr	r0, [r3, #0]
 8007caa:	f000 b877 	b.w	8007d9c <_malloc_r>
 8007cae:	bf00      	nop
 8007cb0:	2000003c 	.word	0x2000003c

08007cb4 <memset>:
 8007cb4:	4402      	add	r2, r0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d100      	bne.n	8007cbe <memset+0xa>
 8007cbc:	4770      	bx	lr
 8007cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007cc2:	e7f9      	b.n	8007cb8 <memset+0x4>

08007cc4 <_free_r>:
 8007cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cc6:	2900      	cmp	r1, #0
 8007cc8:	d044      	beq.n	8007d54 <_free_r+0x90>
 8007cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cce:	9001      	str	r0, [sp, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8007cd6:	bfb8      	it	lt
 8007cd8:	18e4      	addlt	r4, r4, r3
 8007cda:	f003 fdc9 	bl	800b870 <__malloc_lock>
 8007cde:	4a1e      	ldr	r2, [pc, #120]	; (8007d58 <_free_r+0x94>)
 8007ce0:	9801      	ldr	r0, [sp, #4]
 8007ce2:	6813      	ldr	r3, [r2, #0]
 8007ce4:	b933      	cbnz	r3, 8007cf4 <_free_r+0x30>
 8007ce6:	6063      	str	r3, [r4, #4]
 8007ce8:	6014      	str	r4, [r2, #0]
 8007cea:	b003      	add	sp, #12
 8007cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cf0:	f003 bdc4 	b.w	800b87c <__malloc_unlock>
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	d908      	bls.n	8007d0a <_free_r+0x46>
 8007cf8:	6825      	ldr	r5, [r4, #0]
 8007cfa:	1961      	adds	r1, r4, r5
 8007cfc:	428b      	cmp	r3, r1
 8007cfe:	bf01      	itttt	eq
 8007d00:	6819      	ldreq	r1, [r3, #0]
 8007d02:	685b      	ldreq	r3, [r3, #4]
 8007d04:	1949      	addeq	r1, r1, r5
 8007d06:	6021      	streq	r1, [r4, #0]
 8007d08:	e7ed      	b.n	8007ce6 <_free_r+0x22>
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	b10b      	cbz	r3, 8007d14 <_free_r+0x50>
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	d9fa      	bls.n	8007d0a <_free_r+0x46>
 8007d14:	6811      	ldr	r1, [r2, #0]
 8007d16:	1855      	adds	r5, r2, r1
 8007d18:	42a5      	cmp	r5, r4
 8007d1a:	d10b      	bne.n	8007d34 <_free_r+0x70>
 8007d1c:	6824      	ldr	r4, [r4, #0]
 8007d1e:	4421      	add	r1, r4
 8007d20:	1854      	adds	r4, r2, r1
 8007d22:	42a3      	cmp	r3, r4
 8007d24:	6011      	str	r1, [r2, #0]
 8007d26:	d1e0      	bne.n	8007cea <_free_r+0x26>
 8007d28:	681c      	ldr	r4, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	6053      	str	r3, [r2, #4]
 8007d2e:	4421      	add	r1, r4
 8007d30:	6011      	str	r1, [r2, #0]
 8007d32:	e7da      	b.n	8007cea <_free_r+0x26>
 8007d34:	d902      	bls.n	8007d3c <_free_r+0x78>
 8007d36:	230c      	movs	r3, #12
 8007d38:	6003      	str	r3, [r0, #0]
 8007d3a:	e7d6      	b.n	8007cea <_free_r+0x26>
 8007d3c:	6825      	ldr	r5, [r4, #0]
 8007d3e:	1961      	adds	r1, r4, r5
 8007d40:	428b      	cmp	r3, r1
 8007d42:	bf04      	itt	eq
 8007d44:	6819      	ldreq	r1, [r3, #0]
 8007d46:	685b      	ldreq	r3, [r3, #4]
 8007d48:	6063      	str	r3, [r4, #4]
 8007d4a:	bf04      	itt	eq
 8007d4c:	1949      	addeq	r1, r1, r5
 8007d4e:	6021      	streq	r1, [r4, #0]
 8007d50:	6054      	str	r4, [r2, #4]
 8007d52:	e7ca      	b.n	8007cea <_free_r+0x26>
 8007d54:	b003      	add	sp, #12
 8007d56:	bd30      	pop	{r4, r5, pc}
 8007d58:	20000660 	.word	0x20000660

08007d5c <sbrk_aligned>:
 8007d5c:	b570      	push	{r4, r5, r6, lr}
 8007d5e:	4e0e      	ldr	r6, [pc, #56]	; (8007d98 <sbrk_aligned+0x3c>)
 8007d60:	460c      	mov	r4, r1
 8007d62:	6831      	ldr	r1, [r6, #0]
 8007d64:	4605      	mov	r5, r0
 8007d66:	b911      	cbnz	r1, 8007d6e <sbrk_aligned+0x12>
 8007d68:	f000 ffa8 	bl	8008cbc <_sbrk_r>
 8007d6c:	6030      	str	r0, [r6, #0]
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 ffa3 	bl	8008cbc <_sbrk_r>
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	d00a      	beq.n	8007d90 <sbrk_aligned+0x34>
 8007d7a:	1cc4      	adds	r4, r0, #3
 8007d7c:	f024 0403 	bic.w	r4, r4, #3
 8007d80:	42a0      	cmp	r0, r4
 8007d82:	d007      	beq.n	8007d94 <sbrk_aligned+0x38>
 8007d84:	1a21      	subs	r1, r4, r0
 8007d86:	4628      	mov	r0, r5
 8007d88:	f000 ff98 	bl	8008cbc <_sbrk_r>
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d101      	bne.n	8007d94 <sbrk_aligned+0x38>
 8007d90:	f04f 34ff 	mov.w	r4, #4294967295
 8007d94:	4620      	mov	r0, r4
 8007d96:	bd70      	pop	{r4, r5, r6, pc}
 8007d98:	20000664 	.word	0x20000664

08007d9c <_malloc_r>:
 8007d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da0:	1ccd      	adds	r5, r1, #3
 8007da2:	f025 0503 	bic.w	r5, r5, #3
 8007da6:	3508      	adds	r5, #8
 8007da8:	2d0c      	cmp	r5, #12
 8007daa:	bf38      	it	cc
 8007dac:	250c      	movcc	r5, #12
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	4607      	mov	r7, r0
 8007db2:	db01      	blt.n	8007db8 <_malloc_r+0x1c>
 8007db4:	42a9      	cmp	r1, r5
 8007db6:	d905      	bls.n	8007dc4 <_malloc_r+0x28>
 8007db8:	230c      	movs	r3, #12
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	2600      	movs	r6, #0
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc4:	4e2e      	ldr	r6, [pc, #184]	; (8007e80 <_malloc_r+0xe4>)
 8007dc6:	f003 fd53 	bl	800b870 <__malloc_lock>
 8007dca:	6833      	ldr	r3, [r6, #0]
 8007dcc:	461c      	mov	r4, r3
 8007dce:	bb34      	cbnz	r4, 8007e1e <_malloc_r+0x82>
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	f7ff ffc2 	bl	8007d5c <sbrk_aligned>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	4604      	mov	r4, r0
 8007ddc:	d14d      	bne.n	8007e7a <_malloc_r+0xde>
 8007dde:	6834      	ldr	r4, [r6, #0]
 8007de0:	4626      	mov	r6, r4
 8007de2:	2e00      	cmp	r6, #0
 8007de4:	d140      	bne.n	8007e68 <_malloc_r+0xcc>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	4631      	mov	r1, r6
 8007dea:	4638      	mov	r0, r7
 8007dec:	eb04 0803 	add.w	r8, r4, r3
 8007df0:	f000 ff64 	bl	8008cbc <_sbrk_r>
 8007df4:	4580      	cmp	r8, r0
 8007df6:	d13a      	bne.n	8007e6e <_malloc_r+0xd2>
 8007df8:	6821      	ldr	r1, [r4, #0]
 8007dfa:	3503      	adds	r5, #3
 8007dfc:	1a6d      	subs	r5, r5, r1
 8007dfe:	f025 0503 	bic.w	r5, r5, #3
 8007e02:	3508      	adds	r5, #8
 8007e04:	2d0c      	cmp	r5, #12
 8007e06:	bf38      	it	cc
 8007e08:	250c      	movcc	r5, #12
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f7ff ffa5 	bl	8007d5c <sbrk_aligned>
 8007e12:	3001      	adds	r0, #1
 8007e14:	d02b      	beq.n	8007e6e <_malloc_r+0xd2>
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	442b      	add	r3, r5
 8007e1a:	6023      	str	r3, [r4, #0]
 8007e1c:	e00e      	b.n	8007e3c <_malloc_r+0xa0>
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	1b52      	subs	r2, r2, r5
 8007e22:	d41e      	bmi.n	8007e62 <_malloc_r+0xc6>
 8007e24:	2a0b      	cmp	r2, #11
 8007e26:	d916      	bls.n	8007e56 <_malloc_r+0xba>
 8007e28:	1961      	adds	r1, r4, r5
 8007e2a:	42a3      	cmp	r3, r4
 8007e2c:	6025      	str	r5, [r4, #0]
 8007e2e:	bf18      	it	ne
 8007e30:	6059      	strne	r1, [r3, #4]
 8007e32:	6863      	ldr	r3, [r4, #4]
 8007e34:	bf08      	it	eq
 8007e36:	6031      	streq	r1, [r6, #0]
 8007e38:	5162      	str	r2, [r4, r5]
 8007e3a:	604b      	str	r3, [r1, #4]
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	f104 060b 	add.w	r6, r4, #11
 8007e42:	f003 fd1b 	bl	800b87c <__malloc_unlock>
 8007e46:	f026 0607 	bic.w	r6, r6, #7
 8007e4a:	1d23      	adds	r3, r4, #4
 8007e4c:	1af2      	subs	r2, r6, r3
 8007e4e:	d0b6      	beq.n	8007dbe <_malloc_r+0x22>
 8007e50:	1b9b      	subs	r3, r3, r6
 8007e52:	50a3      	str	r3, [r4, r2]
 8007e54:	e7b3      	b.n	8007dbe <_malloc_r+0x22>
 8007e56:	6862      	ldr	r2, [r4, #4]
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	bf0c      	ite	eq
 8007e5c:	6032      	streq	r2, [r6, #0]
 8007e5e:	605a      	strne	r2, [r3, #4]
 8007e60:	e7ec      	b.n	8007e3c <_malloc_r+0xa0>
 8007e62:	4623      	mov	r3, r4
 8007e64:	6864      	ldr	r4, [r4, #4]
 8007e66:	e7b2      	b.n	8007dce <_malloc_r+0x32>
 8007e68:	4634      	mov	r4, r6
 8007e6a:	6876      	ldr	r6, [r6, #4]
 8007e6c:	e7b9      	b.n	8007de2 <_malloc_r+0x46>
 8007e6e:	230c      	movs	r3, #12
 8007e70:	603b      	str	r3, [r7, #0]
 8007e72:	4638      	mov	r0, r7
 8007e74:	f003 fd02 	bl	800b87c <__malloc_unlock>
 8007e78:	e7a1      	b.n	8007dbe <_malloc_r+0x22>
 8007e7a:	6025      	str	r5, [r4, #0]
 8007e7c:	e7de      	b.n	8007e3c <_malloc_r+0xa0>
 8007e7e:	bf00      	nop
 8007e80:	20000660 	.word	0x20000660

08007e84 <__cvt>:
 8007e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e88:	ec55 4b10 	vmov	r4, r5, d0
 8007e8c:	2d00      	cmp	r5, #0
 8007e8e:	460e      	mov	r6, r1
 8007e90:	4619      	mov	r1, r3
 8007e92:	462b      	mov	r3, r5
 8007e94:	bfbb      	ittet	lt
 8007e96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e9a:	461d      	movlt	r5, r3
 8007e9c:	2300      	movge	r3, #0
 8007e9e:	232d      	movlt	r3, #45	; 0x2d
 8007ea0:	700b      	strb	r3, [r1, #0]
 8007ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ea4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ea8:	4691      	mov	r9, r2
 8007eaa:	f023 0820 	bic.w	r8, r3, #32
 8007eae:	bfbc      	itt	lt
 8007eb0:	4622      	movlt	r2, r4
 8007eb2:	4614      	movlt	r4, r2
 8007eb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007eb8:	d005      	beq.n	8007ec6 <__cvt+0x42>
 8007eba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007ebe:	d100      	bne.n	8007ec2 <__cvt+0x3e>
 8007ec0:	3601      	adds	r6, #1
 8007ec2:	2102      	movs	r1, #2
 8007ec4:	e000      	b.n	8007ec8 <__cvt+0x44>
 8007ec6:	2103      	movs	r1, #3
 8007ec8:	ab03      	add	r3, sp, #12
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	ab02      	add	r3, sp, #8
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	ec45 4b10 	vmov	d0, r4, r5
 8007ed4:	4653      	mov	r3, sl
 8007ed6:	4632      	mov	r2, r6
 8007ed8:	f002 f93e 	bl	800a158 <_dtoa_r>
 8007edc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ee0:	4607      	mov	r7, r0
 8007ee2:	d102      	bne.n	8007eea <__cvt+0x66>
 8007ee4:	f019 0f01 	tst.w	r9, #1
 8007ee8:	d022      	beq.n	8007f30 <__cvt+0xac>
 8007eea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007eee:	eb07 0906 	add.w	r9, r7, r6
 8007ef2:	d110      	bne.n	8007f16 <__cvt+0x92>
 8007ef4:	783b      	ldrb	r3, [r7, #0]
 8007ef6:	2b30      	cmp	r3, #48	; 0x30
 8007ef8:	d10a      	bne.n	8007f10 <__cvt+0x8c>
 8007efa:	2200      	movs	r2, #0
 8007efc:	2300      	movs	r3, #0
 8007efe:	4620      	mov	r0, r4
 8007f00:	4629      	mov	r1, r5
 8007f02:	f7f8 fde1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f06:	b918      	cbnz	r0, 8007f10 <__cvt+0x8c>
 8007f08:	f1c6 0601 	rsb	r6, r6, #1
 8007f0c:	f8ca 6000 	str.w	r6, [sl]
 8007f10:	f8da 3000 	ldr.w	r3, [sl]
 8007f14:	4499      	add	r9, r3
 8007f16:	2200      	movs	r2, #0
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	f7f8 fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f22:	b108      	cbz	r0, 8007f28 <__cvt+0xa4>
 8007f24:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f28:	2230      	movs	r2, #48	; 0x30
 8007f2a:	9b03      	ldr	r3, [sp, #12]
 8007f2c:	454b      	cmp	r3, r9
 8007f2e:	d307      	bcc.n	8007f40 <__cvt+0xbc>
 8007f30:	9b03      	ldr	r3, [sp, #12]
 8007f32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f34:	1bdb      	subs	r3, r3, r7
 8007f36:	4638      	mov	r0, r7
 8007f38:	6013      	str	r3, [r2, #0]
 8007f3a:	b004      	add	sp, #16
 8007f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f40:	1c59      	adds	r1, r3, #1
 8007f42:	9103      	str	r1, [sp, #12]
 8007f44:	701a      	strb	r2, [r3, #0]
 8007f46:	e7f0      	b.n	8007f2a <__cvt+0xa6>

08007f48 <__exponent>:
 8007f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	bfb8      	it	lt
 8007f50:	4249      	neglt	r1, r1
 8007f52:	f803 2b02 	strb.w	r2, [r3], #2
 8007f56:	bfb4      	ite	lt
 8007f58:	222d      	movlt	r2, #45	; 0x2d
 8007f5a:	222b      	movge	r2, #43	; 0x2b
 8007f5c:	2909      	cmp	r1, #9
 8007f5e:	7042      	strb	r2, [r0, #1]
 8007f60:	dd2a      	ble.n	8007fb8 <__exponent+0x70>
 8007f62:	f10d 0407 	add.w	r4, sp, #7
 8007f66:	46a4      	mov	ip, r4
 8007f68:	270a      	movs	r7, #10
 8007f6a:	46a6      	mov	lr, r4
 8007f6c:	460a      	mov	r2, r1
 8007f6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007f72:	fb07 1516 	mls	r5, r7, r6, r1
 8007f76:	3530      	adds	r5, #48	; 0x30
 8007f78:	2a63      	cmp	r2, #99	; 0x63
 8007f7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007f7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007f82:	4631      	mov	r1, r6
 8007f84:	dcf1      	bgt.n	8007f6a <__exponent+0x22>
 8007f86:	3130      	adds	r1, #48	; 0x30
 8007f88:	f1ae 0502 	sub.w	r5, lr, #2
 8007f8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007f90:	1c44      	adds	r4, r0, #1
 8007f92:	4629      	mov	r1, r5
 8007f94:	4561      	cmp	r1, ip
 8007f96:	d30a      	bcc.n	8007fae <__exponent+0x66>
 8007f98:	f10d 0209 	add.w	r2, sp, #9
 8007f9c:	eba2 020e 	sub.w	r2, r2, lr
 8007fa0:	4565      	cmp	r5, ip
 8007fa2:	bf88      	it	hi
 8007fa4:	2200      	movhi	r2, #0
 8007fa6:	4413      	add	r3, r2
 8007fa8:	1a18      	subs	r0, r3, r0
 8007faa:	b003      	add	sp, #12
 8007fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007fb6:	e7ed      	b.n	8007f94 <__exponent+0x4c>
 8007fb8:	2330      	movs	r3, #48	; 0x30
 8007fba:	3130      	adds	r1, #48	; 0x30
 8007fbc:	7083      	strb	r3, [r0, #2]
 8007fbe:	70c1      	strb	r1, [r0, #3]
 8007fc0:	1d03      	adds	r3, r0, #4
 8007fc2:	e7f1      	b.n	8007fa8 <__exponent+0x60>

08007fc4 <_printf_float>:
 8007fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc8:	ed2d 8b02 	vpush	{d8}
 8007fcc:	b08d      	sub	sp, #52	; 0x34
 8007fce:	460c      	mov	r4, r1
 8007fd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007fd4:	4616      	mov	r6, r2
 8007fd6:	461f      	mov	r7, r3
 8007fd8:	4605      	mov	r5, r0
 8007fda:	f003 fc0f 	bl	800b7fc <_localeconv_r>
 8007fde:	f8d0 a000 	ldr.w	sl, [r0]
 8007fe2:	4650      	mov	r0, sl
 8007fe4:	f7f8 f8f4 	bl	80001d0 <strlen>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	930a      	str	r3, [sp, #40]	; 0x28
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	9305      	str	r3, [sp, #20]
 8007ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ff4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ff8:	3307      	adds	r3, #7
 8007ffa:	f023 0307 	bic.w	r3, r3, #7
 8007ffe:	f103 0208 	add.w	r2, r3, #8
 8008002:	f8c8 2000 	str.w	r2, [r8]
 8008006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800800e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008012:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008016:	9307      	str	r3, [sp, #28]
 8008018:	f8cd 8018 	str.w	r8, [sp, #24]
 800801c:	ee08 0a10 	vmov	s16, r0
 8008020:	4b9f      	ldr	r3, [pc, #636]	; (80082a0 <_printf_float+0x2dc>)
 8008022:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008026:	f04f 32ff 	mov.w	r2, #4294967295
 800802a:	f7f8 fd7f 	bl	8000b2c <__aeabi_dcmpun>
 800802e:	bb88      	cbnz	r0, 8008094 <_printf_float+0xd0>
 8008030:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008034:	4b9a      	ldr	r3, [pc, #616]	; (80082a0 <_printf_float+0x2dc>)
 8008036:	f04f 32ff 	mov.w	r2, #4294967295
 800803a:	f7f8 fd59 	bl	8000af0 <__aeabi_dcmple>
 800803e:	bb48      	cbnz	r0, 8008094 <_printf_float+0xd0>
 8008040:	2200      	movs	r2, #0
 8008042:	2300      	movs	r3, #0
 8008044:	4640      	mov	r0, r8
 8008046:	4649      	mov	r1, r9
 8008048:	f7f8 fd48 	bl	8000adc <__aeabi_dcmplt>
 800804c:	b110      	cbz	r0, 8008054 <_printf_float+0x90>
 800804e:	232d      	movs	r3, #45	; 0x2d
 8008050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008054:	4b93      	ldr	r3, [pc, #588]	; (80082a4 <_printf_float+0x2e0>)
 8008056:	4894      	ldr	r0, [pc, #592]	; (80082a8 <_printf_float+0x2e4>)
 8008058:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800805c:	bf94      	ite	ls
 800805e:	4698      	movls	r8, r3
 8008060:	4680      	movhi	r8, r0
 8008062:	2303      	movs	r3, #3
 8008064:	6123      	str	r3, [r4, #16]
 8008066:	9b05      	ldr	r3, [sp, #20]
 8008068:	f023 0204 	bic.w	r2, r3, #4
 800806c:	6022      	str	r2, [r4, #0]
 800806e:	f04f 0900 	mov.w	r9, #0
 8008072:	9700      	str	r7, [sp, #0]
 8008074:	4633      	mov	r3, r6
 8008076:	aa0b      	add	r2, sp, #44	; 0x2c
 8008078:	4621      	mov	r1, r4
 800807a:	4628      	mov	r0, r5
 800807c:	f000 f9d8 	bl	8008430 <_printf_common>
 8008080:	3001      	adds	r0, #1
 8008082:	f040 8090 	bne.w	80081a6 <_printf_float+0x1e2>
 8008086:	f04f 30ff 	mov.w	r0, #4294967295
 800808a:	b00d      	add	sp, #52	; 0x34
 800808c:	ecbd 8b02 	vpop	{d8}
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	4642      	mov	r2, r8
 8008096:	464b      	mov	r3, r9
 8008098:	4640      	mov	r0, r8
 800809a:	4649      	mov	r1, r9
 800809c:	f7f8 fd46 	bl	8000b2c <__aeabi_dcmpun>
 80080a0:	b140      	cbz	r0, 80080b4 <_printf_float+0xf0>
 80080a2:	464b      	mov	r3, r9
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bfbc      	itt	lt
 80080a8:	232d      	movlt	r3, #45	; 0x2d
 80080aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80080ae:	487f      	ldr	r0, [pc, #508]	; (80082ac <_printf_float+0x2e8>)
 80080b0:	4b7f      	ldr	r3, [pc, #508]	; (80082b0 <_printf_float+0x2ec>)
 80080b2:	e7d1      	b.n	8008058 <_printf_float+0x94>
 80080b4:	6863      	ldr	r3, [r4, #4]
 80080b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80080ba:	9206      	str	r2, [sp, #24]
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	d13f      	bne.n	8008140 <_printf_float+0x17c>
 80080c0:	2306      	movs	r3, #6
 80080c2:	6063      	str	r3, [r4, #4]
 80080c4:	9b05      	ldr	r3, [sp, #20]
 80080c6:	6861      	ldr	r1, [r4, #4]
 80080c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80080cc:	2300      	movs	r3, #0
 80080ce:	9303      	str	r3, [sp, #12]
 80080d0:	ab0a      	add	r3, sp, #40	; 0x28
 80080d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80080d6:	ab09      	add	r3, sp, #36	; 0x24
 80080d8:	ec49 8b10 	vmov	d0, r8, r9
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	6022      	str	r2, [r4, #0]
 80080e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80080e4:	4628      	mov	r0, r5
 80080e6:	f7ff fecd 	bl	8007e84 <__cvt>
 80080ea:	9b06      	ldr	r3, [sp, #24]
 80080ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080ee:	2b47      	cmp	r3, #71	; 0x47
 80080f0:	4680      	mov	r8, r0
 80080f2:	d108      	bne.n	8008106 <_printf_float+0x142>
 80080f4:	1cc8      	adds	r0, r1, #3
 80080f6:	db02      	blt.n	80080fe <_printf_float+0x13a>
 80080f8:	6863      	ldr	r3, [r4, #4]
 80080fa:	4299      	cmp	r1, r3
 80080fc:	dd41      	ble.n	8008182 <_printf_float+0x1be>
 80080fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8008102:	fa5f fb8b 	uxtb.w	fp, fp
 8008106:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800810a:	d820      	bhi.n	800814e <_printf_float+0x18a>
 800810c:	3901      	subs	r1, #1
 800810e:	465a      	mov	r2, fp
 8008110:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008114:	9109      	str	r1, [sp, #36]	; 0x24
 8008116:	f7ff ff17 	bl	8007f48 <__exponent>
 800811a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800811c:	1813      	adds	r3, r2, r0
 800811e:	2a01      	cmp	r2, #1
 8008120:	4681      	mov	r9, r0
 8008122:	6123      	str	r3, [r4, #16]
 8008124:	dc02      	bgt.n	800812c <_printf_float+0x168>
 8008126:	6822      	ldr	r2, [r4, #0]
 8008128:	07d2      	lsls	r2, r2, #31
 800812a:	d501      	bpl.n	8008130 <_printf_float+0x16c>
 800812c:	3301      	adds	r3, #1
 800812e:	6123      	str	r3, [r4, #16]
 8008130:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008134:	2b00      	cmp	r3, #0
 8008136:	d09c      	beq.n	8008072 <_printf_float+0xae>
 8008138:	232d      	movs	r3, #45	; 0x2d
 800813a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800813e:	e798      	b.n	8008072 <_printf_float+0xae>
 8008140:	9a06      	ldr	r2, [sp, #24]
 8008142:	2a47      	cmp	r2, #71	; 0x47
 8008144:	d1be      	bne.n	80080c4 <_printf_float+0x100>
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1bc      	bne.n	80080c4 <_printf_float+0x100>
 800814a:	2301      	movs	r3, #1
 800814c:	e7b9      	b.n	80080c2 <_printf_float+0xfe>
 800814e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008152:	d118      	bne.n	8008186 <_printf_float+0x1c2>
 8008154:	2900      	cmp	r1, #0
 8008156:	6863      	ldr	r3, [r4, #4]
 8008158:	dd0b      	ble.n	8008172 <_printf_float+0x1ae>
 800815a:	6121      	str	r1, [r4, #16]
 800815c:	b913      	cbnz	r3, 8008164 <_printf_float+0x1a0>
 800815e:	6822      	ldr	r2, [r4, #0]
 8008160:	07d0      	lsls	r0, r2, #31
 8008162:	d502      	bpl.n	800816a <_printf_float+0x1a6>
 8008164:	3301      	adds	r3, #1
 8008166:	440b      	add	r3, r1
 8008168:	6123      	str	r3, [r4, #16]
 800816a:	65a1      	str	r1, [r4, #88]	; 0x58
 800816c:	f04f 0900 	mov.w	r9, #0
 8008170:	e7de      	b.n	8008130 <_printf_float+0x16c>
 8008172:	b913      	cbnz	r3, 800817a <_printf_float+0x1b6>
 8008174:	6822      	ldr	r2, [r4, #0]
 8008176:	07d2      	lsls	r2, r2, #31
 8008178:	d501      	bpl.n	800817e <_printf_float+0x1ba>
 800817a:	3302      	adds	r3, #2
 800817c:	e7f4      	b.n	8008168 <_printf_float+0x1a4>
 800817e:	2301      	movs	r3, #1
 8008180:	e7f2      	b.n	8008168 <_printf_float+0x1a4>
 8008182:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008188:	4299      	cmp	r1, r3
 800818a:	db05      	blt.n	8008198 <_printf_float+0x1d4>
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	6121      	str	r1, [r4, #16]
 8008190:	07d8      	lsls	r0, r3, #31
 8008192:	d5ea      	bpl.n	800816a <_printf_float+0x1a6>
 8008194:	1c4b      	adds	r3, r1, #1
 8008196:	e7e7      	b.n	8008168 <_printf_float+0x1a4>
 8008198:	2900      	cmp	r1, #0
 800819a:	bfd4      	ite	le
 800819c:	f1c1 0202 	rsble	r2, r1, #2
 80081a0:	2201      	movgt	r2, #1
 80081a2:	4413      	add	r3, r2
 80081a4:	e7e0      	b.n	8008168 <_printf_float+0x1a4>
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	055a      	lsls	r2, r3, #21
 80081aa:	d407      	bmi.n	80081bc <_printf_float+0x1f8>
 80081ac:	6923      	ldr	r3, [r4, #16]
 80081ae:	4642      	mov	r2, r8
 80081b0:	4631      	mov	r1, r6
 80081b2:	4628      	mov	r0, r5
 80081b4:	47b8      	blx	r7
 80081b6:	3001      	adds	r0, #1
 80081b8:	d12c      	bne.n	8008214 <_printf_float+0x250>
 80081ba:	e764      	b.n	8008086 <_printf_float+0xc2>
 80081bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081c0:	f240 80e0 	bls.w	8008384 <_printf_float+0x3c0>
 80081c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081c8:	2200      	movs	r2, #0
 80081ca:	2300      	movs	r3, #0
 80081cc:	f7f8 fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d034      	beq.n	800823e <_printf_float+0x27a>
 80081d4:	4a37      	ldr	r2, [pc, #220]	; (80082b4 <_printf_float+0x2f0>)
 80081d6:	2301      	movs	r3, #1
 80081d8:	4631      	mov	r1, r6
 80081da:	4628      	mov	r0, r5
 80081dc:	47b8      	blx	r7
 80081de:	3001      	adds	r0, #1
 80081e0:	f43f af51 	beq.w	8008086 <_printf_float+0xc2>
 80081e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081e8:	429a      	cmp	r2, r3
 80081ea:	db02      	blt.n	80081f2 <_printf_float+0x22e>
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	07d8      	lsls	r0, r3, #31
 80081f0:	d510      	bpl.n	8008214 <_printf_float+0x250>
 80081f2:	ee18 3a10 	vmov	r3, s16
 80081f6:	4652      	mov	r2, sl
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	f43f af41 	beq.w	8008086 <_printf_float+0xc2>
 8008204:	f04f 0800 	mov.w	r8, #0
 8008208:	f104 091a 	add.w	r9, r4, #26
 800820c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800820e:	3b01      	subs	r3, #1
 8008210:	4543      	cmp	r3, r8
 8008212:	dc09      	bgt.n	8008228 <_printf_float+0x264>
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	079b      	lsls	r3, r3, #30
 8008218:	f100 8105 	bmi.w	8008426 <_printf_float+0x462>
 800821c:	68e0      	ldr	r0, [r4, #12]
 800821e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008220:	4298      	cmp	r0, r3
 8008222:	bfb8      	it	lt
 8008224:	4618      	movlt	r0, r3
 8008226:	e730      	b.n	800808a <_printf_float+0xc6>
 8008228:	2301      	movs	r3, #1
 800822a:	464a      	mov	r2, r9
 800822c:	4631      	mov	r1, r6
 800822e:	4628      	mov	r0, r5
 8008230:	47b8      	blx	r7
 8008232:	3001      	adds	r0, #1
 8008234:	f43f af27 	beq.w	8008086 <_printf_float+0xc2>
 8008238:	f108 0801 	add.w	r8, r8, #1
 800823c:	e7e6      	b.n	800820c <_printf_float+0x248>
 800823e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008240:	2b00      	cmp	r3, #0
 8008242:	dc39      	bgt.n	80082b8 <_printf_float+0x2f4>
 8008244:	4a1b      	ldr	r2, [pc, #108]	; (80082b4 <_printf_float+0x2f0>)
 8008246:	2301      	movs	r3, #1
 8008248:	4631      	mov	r1, r6
 800824a:	4628      	mov	r0, r5
 800824c:	47b8      	blx	r7
 800824e:	3001      	adds	r0, #1
 8008250:	f43f af19 	beq.w	8008086 <_printf_float+0xc2>
 8008254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008258:	4313      	orrs	r3, r2
 800825a:	d102      	bne.n	8008262 <_printf_float+0x29e>
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	07d9      	lsls	r1, r3, #31
 8008260:	d5d8      	bpl.n	8008214 <_printf_float+0x250>
 8008262:	ee18 3a10 	vmov	r3, s16
 8008266:	4652      	mov	r2, sl
 8008268:	4631      	mov	r1, r6
 800826a:	4628      	mov	r0, r5
 800826c:	47b8      	blx	r7
 800826e:	3001      	adds	r0, #1
 8008270:	f43f af09 	beq.w	8008086 <_printf_float+0xc2>
 8008274:	f04f 0900 	mov.w	r9, #0
 8008278:	f104 0a1a 	add.w	sl, r4, #26
 800827c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827e:	425b      	negs	r3, r3
 8008280:	454b      	cmp	r3, r9
 8008282:	dc01      	bgt.n	8008288 <_printf_float+0x2c4>
 8008284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008286:	e792      	b.n	80081ae <_printf_float+0x1ea>
 8008288:	2301      	movs	r3, #1
 800828a:	4652      	mov	r2, sl
 800828c:	4631      	mov	r1, r6
 800828e:	4628      	mov	r0, r5
 8008290:	47b8      	blx	r7
 8008292:	3001      	adds	r0, #1
 8008294:	f43f aef7 	beq.w	8008086 <_printf_float+0xc2>
 8008298:	f109 0901 	add.w	r9, r9, #1
 800829c:	e7ee      	b.n	800827c <_printf_float+0x2b8>
 800829e:	bf00      	nop
 80082a0:	7fefffff 	.word	0x7fefffff
 80082a4:	0800d4f4 	.word	0x0800d4f4
 80082a8:	0800d4f8 	.word	0x0800d4f8
 80082ac:	0800d500 	.word	0x0800d500
 80082b0:	0800d4fc 	.word	0x0800d4fc
 80082b4:	0800dff9 	.word	0x0800dff9
 80082b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082bc:	429a      	cmp	r2, r3
 80082be:	bfa8      	it	ge
 80082c0:	461a      	movge	r2, r3
 80082c2:	2a00      	cmp	r2, #0
 80082c4:	4691      	mov	r9, r2
 80082c6:	dc37      	bgt.n	8008338 <_printf_float+0x374>
 80082c8:	f04f 0b00 	mov.w	fp, #0
 80082cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082d0:	f104 021a 	add.w	r2, r4, #26
 80082d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082d6:	9305      	str	r3, [sp, #20]
 80082d8:	eba3 0309 	sub.w	r3, r3, r9
 80082dc:	455b      	cmp	r3, fp
 80082de:	dc33      	bgt.n	8008348 <_printf_float+0x384>
 80082e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082e4:	429a      	cmp	r2, r3
 80082e6:	db3b      	blt.n	8008360 <_printf_float+0x39c>
 80082e8:	6823      	ldr	r3, [r4, #0]
 80082ea:	07da      	lsls	r2, r3, #31
 80082ec:	d438      	bmi.n	8008360 <_printf_float+0x39c>
 80082ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f0:	9a05      	ldr	r2, [sp, #20]
 80082f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082f4:	1a9a      	subs	r2, r3, r2
 80082f6:	eba3 0901 	sub.w	r9, r3, r1
 80082fa:	4591      	cmp	r9, r2
 80082fc:	bfa8      	it	ge
 80082fe:	4691      	movge	r9, r2
 8008300:	f1b9 0f00 	cmp.w	r9, #0
 8008304:	dc35      	bgt.n	8008372 <_printf_float+0x3ae>
 8008306:	f04f 0800 	mov.w	r8, #0
 800830a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800830e:	f104 0a1a 	add.w	sl, r4, #26
 8008312:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008316:	1a9b      	subs	r3, r3, r2
 8008318:	eba3 0309 	sub.w	r3, r3, r9
 800831c:	4543      	cmp	r3, r8
 800831e:	f77f af79 	ble.w	8008214 <_printf_float+0x250>
 8008322:	2301      	movs	r3, #1
 8008324:	4652      	mov	r2, sl
 8008326:	4631      	mov	r1, r6
 8008328:	4628      	mov	r0, r5
 800832a:	47b8      	blx	r7
 800832c:	3001      	adds	r0, #1
 800832e:	f43f aeaa 	beq.w	8008086 <_printf_float+0xc2>
 8008332:	f108 0801 	add.w	r8, r8, #1
 8008336:	e7ec      	b.n	8008312 <_printf_float+0x34e>
 8008338:	4613      	mov	r3, r2
 800833a:	4631      	mov	r1, r6
 800833c:	4642      	mov	r2, r8
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	d1c0      	bne.n	80082c8 <_printf_float+0x304>
 8008346:	e69e      	b.n	8008086 <_printf_float+0xc2>
 8008348:	2301      	movs	r3, #1
 800834a:	4631      	mov	r1, r6
 800834c:	4628      	mov	r0, r5
 800834e:	9205      	str	r2, [sp, #20]
 8008350:	47b8      	blx	r7
 8008352:	3001      	adds	r0, #1
 8008354:	f43f ae97 	beq.w	8008086 <_printf_float+0xc2>
 8008358:	9a05      	ldr	r2, [sp, #20]
 800835a:	f10b 0b01 	add.w	fp, fp, #1
 800835e:	e7b9      	b.n	80082d4 <_printf_float+0x310>
 8008360:	ee18 3a10 	vmov	r3, s16
 8008364:	4652      	mov	r2, sl
 8008366:	4631      	mov	r1, r6
 8008368:	4628      	mov	r0, r5
 800836a:	47b8      	blx	r7
 800836c:	3001      	adds	r0, #1
 800836e:	d1be      	bne.n	80082ee <_printf_float+0x32a>
 8008370:	e689      	b.n	8008086 <_printf_float+0xc2>
 8008372:	9a05      	ldr	r2, [sp, #20]
 8008374:	464b      	mov	r3, r9
 8008376:	4442      	add	r2, r8
 8008378:	4631      	mov	r1, r6
 800837a:	4628      	mov	r0, r5
 800837c:	47b8      	blx	r7
 800837e:	3001      	adds	r0, #1
 8008380:	d1c1      	bne.n	8008306 <_printf_float+0x342>
 8008382:	e680      	b.n	8008086 <_printf_float+0xc2>
 8008384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008386:	2a01      	cmp	r2, #1
 8008388:	dc01      	bgt.n	800838e <_printf_float+0x3ca>
 800838a:	07db      	lsls	r3, r3, #31
 800838c:	d538      	bpl.n	8008400 <_printf_float+0x43c>
 800838e:	2301      	movs	r3, #1
 8008390:	4642      	mov	r2, r8
 8008392:	4631      	mov	r1, r6
 8008394:	4628      	mov	r0, r5
 8008396:	47b8      	blx	r7
 8008398:	3001      	adds	r0, #1
 800839a:	f43f ae74 	beq.w	8008086 <_printf_float+0xc2>
 800839e:	ee18 3a10 	vmov	r3, s16
 80083a2:	4652      	mov	r2, sl
 80083a4:	4631      	mov	r1, r6
 80083a6:	4628      	mov	r0, r5
 80083a8:	47b8      	blx	r7
 80083aa:	3001      	adds	r0, #1
 80083ac:	f43f ae6b 	beq.w	8008086 <_printf_float+0xc2>
 80083b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083b4:	2200      	movs	r2, #0
 80083b6:	2300      	movs	r3, #0
 80083b8:	f7f8 fb86 	bl	8000ac8 <__aeabi_dcmpeq>
 80083bc:	b9d8      	cbnz	r0, 80083f6 <_printf_float+0x432>
 80083be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c0:	f108 0201 	add.w	r2, r8, #1
 80083c4:	3b01      	subs	r3, #1
 80083c6:	4631      	mov	r1, r6
 80083c8:	4628      	mov	r0, r5
 80083ca:	47b8      	blx	r7
 80083cc:	3001      	adds	r0, #1
 80083ce:	d10e      	bne.n	80083ee <_printf_float+0x42a>
 80083d0:	e659      	b.n	8008086 <_printf_float+0xc2>
 80083d2:	2301      	movs	r3, #1
 80083d4:	4652      	mov	r2, sl
 80083d6:	4631      	mov	r1, r6
 80083d8:	4628      	mov	r0, r5
 80083da:	47b8      	blx	r7
 80083dc:	3001      	adds	r0, #1
 80083de:	f43f ae52 	beq.w	8008086 <_printf_float+0xc2>
 80083e2:	f108 0801 	add.w	r8, r8, #1
 80083e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083e8:	3b01      	subs	r3, #1
 80083ea:	4543      	cmp	r3, r8
 80083ec:	dcf1      	bgt.n	80083d2 <_printf_float+0x40e>
 80083ee:	464b      	mov	r3, r9
 80083f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80083f4:	e6dc      	b.n	80081b0 <_printf_float+0x1ec>
 80083f6:	f04f 0800 	mov.w	r8, #0
 80083fa:	f104 0a1a 	add.w	sl, r4, #26
 80083fe:	e7f2      	b.n	80083e6 <_printf_float+0x422>
 8008400:	2301      	movs	r3, #1
 8008402:	4642      	mov	r2, r8
 8008404:	e7df      	b.n	80083c6 <_printf_float+0x402>
 8008406:	2301      	movs	r3, #1
 8008408:	464a      	mov	r2, r9
 800840a:	4631      	mov	r1, r6
 800840c:	4628      	mov	r0, r5
 800840e:	47b8      	blx	r7
 8008410:	3001      	adds	r0, #1
 8008412:	f43f ae38 	beq.w	8008086 <_printf_float+0xc2>
 8008416:	f108 0801 	add.w	r8, r8, #1
 800841a:	68e3      	ldr	r3, [r4, #12]
 800841c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800841e:	1a5b      	subs	r3, r3, r1
 8008420:	4543      	cmp	r3, r8
 8008422:	dcf0      	bgt.n	8008406 <_printf_float+0x442>
 8008424:	e6fa      	b.n	800821c <_printf_float+0x258>
 8008426:	f04f 0800 	mov.w	r8, #0
 800842a:	f104 0919 	add.w	r9, r4, #25
 800842e:	e7f4      	b.n	800841a <_printf_float+0x456>

08008430 <_printf_common>:
 8008430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008434:	4616      	mov	r6, r2
 8008436:	4699      	mov	r9, r3
 8008438:	688a      	ldr	r2, [r1, #8]
 800843a:	690b      	ldr	r3, [r1, #16]
 800843c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008440:	4293      	cmp	r3, r2
 8008442:	bfb8      	it	lt
 8008444:	4613      	movlt	r3, r2
 8008446:	6033      	str	r3, [r6, #0]
 8008448:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800844c:	4607      	mov	r7, r0
 800844e:	460c      	mov	r4, r1
 8008450:	b10a      	cbz	r2, 8008456 <_printf_common+0x26>
 8008452:	3301      	adds	r3, #1
 8008454:	6033      	str	r3, [r6, #0]
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	0699      	lsls	r1, r3, #26
 800845a:	bf42      	ittt	mi
 800845c:	6833      	ldrmi	r3, [r6, #0]
 800845e:	3302      	addmi	r3, #2
 8008460:	6033      	strmi	r3, [r6, #0]
 8008462:	6825      	ldr	r5, [r4, #0]
 8008464:	f015 0506 	ands.w	r5, r5, #6
 8008468:	d106      	bne.n	8008478 <_printf_common+0x48>
 800846a:	f104 0a19 	add.w	sl, r4, #25
 800846e:	68e3      	ldr	r3, [r4, #12]
 8008470:	6832      	ldr	r2, [r6, #0]
 8008472:	1a9b      	subs	r3, r3, r2
 8008474:	42ab      	cmp	r3, r5
 8008476:	dc26      	bgt.n	80084c6 <_printf_common+0x96>
 8008478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800847c:	1e13      	subs	r3, r2, #0
 800847e:	6822      	ldr	r2, [r4, #0]
 8008480:	bf18      	it	ne
 8008482:	2301      	movne	r3, #1
 8008484:	0692      	lsls	r2, r2, #26
 8008486:	d42b      	bmi.n	80084e0 <_printf_common+0xb0>
 8008488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800848c:	4649      	mov	r1, r9
 800848e:	4638      	mov	r0, r7
 8008490:	47c0      	blx	r8
 8008492:	3001      	adds	r0, #1
 8008494:	d01e      	beq.n	80084d4 <_printf_common+0xa4>
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	68e5      	ldr	r5, [r4, #12]
 800849a:	6832      	ldr	r2, [r6, #0]
 800849c:	f003 0306 	and.w	r3, r3, #6
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	bf08      	it	eq
 80084a4:	1aad      	subeq	r5, r5, r2
 80084a6:	68a3      	ldr	r3, [r4, #8]
 80084a8:	6922      	ldr	r2, [r4, #16]
 80084aa:	bf0c      	ite	eq
 80084ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084b0:	2500      	movne	r5, #0
 80084b2:	4293      	cmp	r3, r2
 80084b4:	bfc4      	itt	gt
 80084b6:	1a9b      	subgt	r3, r3, r2
 80084b8:	18ed      	addgt	r5, r5, r3
 80084ba:	2600      	movs	r6, #0
 80084bc:	341a      	adds	r4, #26
 80084be:	42b5      	cmp	r5, r6
 80084c0:	d11a      	bne.n	80084f8 <_printf_common+0xc8>
 80084c2:	2000      	movs	r0, #0
 80084c4:	e008      	b.n	80084d8 <_printf_common+0xa8>
 80084c6:	2301      	movs	r3, #1
 80084c8:	4652      	mov	r2, sl
 80084ca:	4649      	mov	r1, r9
 80084cc:	4638      	mov	r0, r7
 80084ce:	47c0      	blx	r8
 80084d0:	3001      	adds	r0, #1
 80084d2:	d103      	bne.n	80084dc <_printf_common+0xac>
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084dc:	3501      	adds	r5, #1
 80084de:	e7c6      	b.n	800846e <_printf_common+0x3e>
 80084e0:	18e1      	adds	r1, r4, r3
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	2030      	movs	r0, #48	; 0x30
 80084e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084ea:	4422      	add	r2, r4
 80084ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084f4:	3302      	adds	r3, #2
 80084f6:	e7c7      	b.n	8008488 <_printf_common+0x58>
 80084f8:	2301      	movs	r3, #1
 80084fa:	4622      	mov	r2, r4
 80084fc:	4649      	mov	r1, r9
 80084fe:	4638      	mov	r0, r7
 8008500:	47c0      	blx	r8
 8008502:	3001      	adds	r0, #1
 8008504:	d0e6      	beq.n	80084d4 <_printf_common+0xa4>
 8008506:	3601      	adds	r6, #1
 8008508:	e7d9      	b.n	80084be <_printf_common+0x8e>
	...

0800850c <_printf_i>:
 800850c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008510:	7e0f      	ldrb	r7, [r1, #24]
 8008512:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008514:	2f78      	cmp	r7, #120	; 0x78
 8008516:	4691      	mov	r9, r2
 8008518:	4680      	mov	r8, r0
 800851a:	460c      	mov	r4, r1
 800851c:	469a      	mov	sl, r3
 800851e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008522:	d807      	bhi.n	8008534 <_printf_i+0x28>
 8008524:	2f62      	cmp	r7, #98	; 0x62
 8008526:	d80a      	bhi.n	800853e <_printf_i+0x32>
 8008528:	2f00      	cmp	r7, #0
 800852a:	f000 80d8 	beq.w	80086de <_printf_i+0x1d2>
 800852e:	2f58      	cmp	r7, #88	; 0x58
 8008530:	f000 80a3 	beq.w	800867a <_printf_i+0x16e>
 8008534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800853c:	e03a      	b.n	80085b4 <_printf_i+0xa8>
 800853e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008542:	2b15      	cmp	r3, #21
 8008544:	d8f6      	bhi.n	8008534 <_printf_i+0x28>
 8008546:	a101      	add	r1, pc, #4	; (adr r1, 800854c <_printf_i+0x40>)
 8008548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800854c:	080085a5 	.word	0x080085a5
 8008550:	080085b9 	.word	0x080085b9
 8008554:	08008535 	.word	0x08008535
 8008558:	08008535 	.word	0x08008535
 800855c:	08008535 	.word	0x08008535
 8008560:	08008535 	.word	0x08008535
 8008564:	080085b9 	.word	0x080085b9
 8008568:	08008535 	.word	0x08008535
 800856c:	08008535 	.word	0x08008535
 8008570:	08008535 	.word	0x08008535
 8008574:	08008535 	.word	0x08008535
 8008578:	080086c5 	.word	0x080086c5
 800857c:	080085e9 	.word	0x080085e9
 8008580:	080086a7 	.word	0x080086a7
 8008584:	08008535 	.word	0x08008535
 8008588:	08008535 	.word	0x08008535
 800858c:	080086e7 	.word	0x080086e7
 8008590:	08008535 	.word	0x08008535
 8008594:	080085e9 	.word	0x080085e9
 8008598:	08008535 	.word	0x08008535
 800859c:	08008535 	.word	0x08008535
 80085a0:	080086af 	.word	0x080086af
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	1d1a      	adds	r2, r3, #4
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	602a      	str	r2, [r5, #0]
 80085ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085b4:	2301      	movs	r3, #1
 80085b6:	e0a3      	b.n	8008700 <_printf_i+0x1f4>
 80085b8:	6820      	ldr	r0, [r4, #0]
 80085ba:	6829      	ldr	r1, [r5, #0]
 80085bc:	0606      	lsls	r6, r0, #24
 80085be:	f101 0304 	add.w	r3, r1, #4
 80085c2:	d50a      	bpl.n	80085da <_printf_i+0xce>
 80085c4:	680e      	ldr	r6, [r1, #0]
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	2e00      	cmp	r6, #0
 80085ca:	da03      	bge.n	80085d4 <_printf_i+0xc8>
 80085cc:	232d      	movs	r3, #45	; 0x2d
 80085ce:	4276      	negs	r6, r6
 80085d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085d4:	485e      	ldr	r0, [pc, #376]	; (8008750 <_printf_i+0x244>)
 80085d6:	230a      	movs	r3, #10
 80085d8:	e019      	b.n	800860e <_printf_i+0x102>
 80085da:	680e      	ldr	r6, [r1, #0]
 80085dc:	602b      	str	r3, [r5, #0]
 80085de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80085e2:	bf18      	it	ne
 80085e4:	b236      	sxthne	r6, r6
 80085e6:	e7ef      	b.n	80085c8 <_printf_i+0xbc>
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	6820      	ldr	r0, [r4, #0]
 80085ec:	1d19      	adds	r1, r3, #4
 80085ee:	6029      	str	r1, [r5, #0]
 80085f0:	0601      	lsls	r1, r0, #24
 80085f2:	d501      	bpl.n	80085f8 <_printf_i+0xec>
 80085f4:	681e      	ldr	r6, [r3, #0]
 80085f6:	e002      	b.n	80085fe <_printf_i+0xf2>
 80085f8:	0646      	lsls	r6, r0, #25
 80085fa:	d5fb      	bpl.n	80085f4 <_printf_i+0xe8>
 80085fc:	881e      	ldrh	r6, [r3, #0]
 80085fe:	4854      	ldr	r0, [pc, #336]	; (8008750 <_printf_i+0x244>)
 8008600:	2f6f      	cmp	r7, #111	; 0x6f
 8008602:	bf0c      	ite	eq
 8008604:	2308      	moveq	r3, #8
 8008606:	230a      	movne	r3, #10
 8008608:	2100      	movs	r1, #0
 800860a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800860e:	6865      	ldr	r5, [r4, #4]
 8008610:	60a5      	str	r5, [r4, #8]
 8008612:	2d00      	cmp	r5, #0
 8008614:	bfa2      	ittt	ge
 8008616:	6821      	ldrge	r1, [r4, #0]
 8008618:	f021 0104 	bicge.w	r1, r1, #4
 800861c:	6021      	strge	r1, [r4, #0]
 800861e:	b90e      	cbnz	r6, 8008624 <_printf_i+0x118>
 8008620:	2d00      	cmp	r5, #0
 8008622:	d04d      	beq.n	80086c0 <_printf_i+0x1b4>
 8008624:	4615      	mov	r5, r2
 8008626:	fbb6 f1f3 	udiv	r1, r6, r3
 800862a:	fb03 6711 	mls	r7, r3, r1, r6
 800862e:	5dc7      	ldrb	r7, [r0, r7]
 8008630:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008634:	4637      	mov	r7, r6
 8008636:	42bb      	cmp	r3, r7
 8008638:	460e      	mov	r6, r1
 800863a:	d9f4      	bls.n	8008626 <_printf_i+0x11a>
 800863c:	2b08      	cmp	r3, #8
 800863e:	d10b      	bne.n	8008658 <_printf_i+0x14c>
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	07de      	lsls	r6, r3, #31
 8008644:	d508      	bpl.n	8008658 <_printf_i+0x14c>
 8008646:	6923      	ldr	r3, [r4, #16]
 8008648:	6861      	ldr	r1, [r4, #4]
 800864a:	4299      	cmp	r1, r3
 800864c:	bfde      	ittt	le
 800864e:	2330      	movle	r3, #48	; 0x30
 8008650:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008654:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008658:	1b52      	subs	r2, r2, r5
 800865a:	6122      	str	r2, [r4, #16]
 800865c:	f8cd a000 	str.w	sl, [sp]
 8008660:	464b      	mov	r3, r9
 8008662:	aa03      	add	r2, sp, #12
 8008664:	4621      	mov	r1, r4
 8008666:	4640      	mov	r0, r8
 8008668:	f7ff fee2 	bl	8008430 <_printf_common>
 800866c:	3001      	adds	r0, #1
 800866e:	d14c      	bne.n	800870a <_printf_i+0x1fe>
 8008670:	f04f 30ff 	mov.w	r0, #4294967295
 8008674:	b004      	add	sp, #16
 8008676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867a:	4835      	ldr	r0, [pc, #212]	; (8008750 <_printf_i+0x244>)
 800867c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008680:	6829      	ldr	r1, [r5, #0]
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	f851 6b04 	ldr.w	r6, [r1], #4
 8008688:	6029      	str	r1, [r5, #0]
 800868a:	061d      	lsls	r5, r3, #24
 800868c:	d514      	bpl.n	80086b8 <_printf_i+0x1ac>
 800868e:	07df      	lsls	r7, r3, #31
 8008690:	bf44      	itt	mi
 8008692:	f043 0320 	orrmi.w	r3, r3, #32
 8008696:	6023      	strmi	r3, [r4, #0]
 8008698:	b91e      	cbnz	r6, 80086a2 <_printf_i+0x196>
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	f023 0320 	bic.w	r3, r3, #32
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	2310      	movs	r3, #16
 80086a4:	e7b0      	b.n	8008608 <_printf_i+0xfc>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	f043 0320 	orr.w	r3, r3, #32
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	2378      	movs	r3, #120	; 0x78
 80086b0:	4828      	ldr	r0, [pc, #160]	; (8008754 <_printf_i+0x248>)
 80086b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086b6:	e7e3      	b.n	8008680 <_printf_i+0x174>
 80086b8:	0659      	lsls	r1, r3, #25
 80086ba:	bf48      	it	mi
 80086bc:	b2b6      	uxthmi	r6, r6
 80086be:	e7e6      	b.n	800868e <_printf_i+0x182>
 80086c0:	4615      	mov	r5, r2
 80086c2:	e7bb      	b.n	800863c <_printf_i+0x130>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	6826      	ldr	r6, [r4, #0]
 80086c8:	6961      	ldr	r1, [r4, #20]
 80086ca:	1d18      	adds	r0, r3, #4
 80086cc:	6028      	str	r0, [r5, #0]
 80086ce:	0635      	lsls	r5, r6, #24
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	d501      	bpl.n	80086d8 <_printf_i+0x1cc>
 80086d4:	6019      	str	r1, [r3, #0]
 80086d6:	e002      	b.n	80086de <_printf_i+0x1d2>
 80086d8:	0670      	lsls	r0, r6, #25
 80086da:	d5fb      	bpl.n	80086d4 <_printf_i+0x1c8>
 80086dc:	8019      	strh	r1, [r3, #0]
 80086de:	2300      	movs	r3, #0
 80086e0:	6123      	str	r3, [r4, #16]
 80086e2:	4615      	mov	r5, r2
 80086e4:	e7ba      	b.n	800865c <_printf_i+0x150>
 80086e6:	682b      	ldr	r3, [r5, #0]
 80086e8:	1d1a      	adds	r2, r3, #4
 80086ea:	602a      	str	r2, [r5, #0]
 80086ec:	681d      	ldr	r5, [r3, #0]
 80086ee:	6862      	ldr	r2, [r4, #4]
 80086f0:	2100      	movs	r1, #0
 80086f2:	4628      	mov	r0, r5
 80086f4:	f7f7 fd74 	bl	80001e0 <memchr>
 80086f8:	b108      	cbz	r0, 80086fe <_printf_i+0x1f2>
 80086fa:	1b40      	subs	r0, r0, r5
 80086fc:	6060      	str	r0, [r4, #4]
 80086fe:	6863      	ldr	r3, [r4, #4]
 8008700:	6123      	str	r3, [r4, #16]
 8008702:	2300      	movs	r3, #0
 8008704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008708:	e7a8      	b.n	800865c <_printf_i+0x150>
 800870a:	6923      	ldr	r3, [r4, #16]
 800870c:	462a      	mov	r2, r5
 800870e:	4649      	mov	r1, r9
 8008710:	4640      	mov	r0, r8
 8008712:	47d0      	blx	sl
 8008714:	3001      	adds	r0, #1
 8008716:	d0ab      	beq.n	8008670 <_printf_i+0x164>
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	079b      	lsls	r3, r3, #30
 800871c:	d413      	bmi.n	8008746 <_printf_i+0x23a>
 800871e:	68e0      	ldr	r0, [r4, #12]
 8008720:	9b03      	ldr	r3, [sp, #12]
 8008722:	4298      	cmp	r0, r3
 8008724:	bfb8      	it	lt
 8008726:	4618      	movlt	r0, r3
 8008728:	e7a4      	b.n	8008674 <_printf_i+0x168>
 800872a:	2301      	movs	r3, #1
 800872c:	4632      	mov	r2, r6
 800872e:	4649      	mov	r1, r9
 8008730:	4640      	mov	r0, r8
 8008732:	47d0      	blx	sl
 8008734:	3001      	adds	r0, #1
 8008736:	d09b      	beq.n	8008670 <_printf_i+0x164>
 8008738:	3501      	adds	r5, #1
 800873a:	68e3      	ldr	r3, [r4, #12]
 800873c:	9903      	ldr	r1, [sp, #12]
 800873e:	1a5b      	subs	r3, r3, r1
 8008740:	42ab      	cmp	r3, r5
 8008742:	dcf2      	bgt.n	800872a <_printf_i+0x21e>
 8008744:	e7eb      	b.n	800871e <_printf_i+0x212>
 8008746:	2500      	movs	r5, #0
 8008748:	f104 0619 	add.w	r6, r4, #25
 800874c:	e7f5      	b.n	800873a <_printf_i+0x22e>
 800874e:	bf00      	nop
 8008750:	0800d504 	.word	0x0800d504
 8008754:	0800d515 	.word	0x0800d515

08008758 <_scanf_float>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	b087      	sub	sp, #28
 800875e:	4617      	mov	r7, r2
 8008760:	9303      	str	r3, [sp, #12]
 8008762:	688b      	ldr	r3, [r1, #8]
 8008764:	1e5a      	subs	r2, r3, #1
 8008766:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800876a:	bf83      	ittte	hi
 800876c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008770:	195b      	addhi	r3, r3, r5
 8008772:	9302      	strhi	r3, [sp, #8]
 8008774:	2300      	movls	r3, #0
 8008776:	bf86      	itte	hi
 8008778:	f240 135d 	movwhi	r3, #349	; 0x15d
 800877c:	608b      	strhi	r3, [r1, #8]
 800877e:	9302      	strls	r3, [sp, #8]
 8008780:	680b      	ldr	r3, [r1, #0]
 8008782:	468b      	mov	fp, r1
 8008784:	2500      	movs	r5, #0
 8008786:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800878a:	f84b 3b1c 	str.w	r3, [fp], #28
 800878e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008792:	4680      	mov	r8, r0
 8008794:	460c      	mov	r4, r1
 8008796:	465e      	mov	r6, fp
 8008798:	46aa      	mov	sl, r5
 800879a:	46a9      	mov	r9, r5
 800879c:	9501      	str	r5, [sp, #4]
 800879e:	68a2      	ldr	r2, [r4, #8]
 80087a0:	b152      	cbz	r2, 80087b8 <_scanf_float+0x60>
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b4e      	cmp	r3, #78	; 0x4e
 80087a8:	d864      	bhi.n	8008874 <_scanf_float+0x11c>
 80087aa:	2b40      	cmp	r3, #64	; 0x40
 80087ac:	d83c      	bhi.n	8008828 <_scanf_float+0xd0>
 80087ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80087b2:	b2c8      	uxtb	r0, r1
 80087b4:	280e      	cmp	r0, #14
 80087b6:	d93a      	bls.n	800882e <_scanf_float+0xd6>
 80087b8:	f1b9 0f00 	cmp.w	r9, #0
 80087bc:	d003      	beq.n	80087c6 <_scanf_float+0x6e>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087ca:	f1ba 0f01 	cmp.w	sl, #1
 80087ce:	f200 8113 	bhi.w	80089f8 <_scanf_float+0x2a0>
 80087d2:	455e      	cmp	r6, fp
 80087d4:	f200 8105 	bhi.w	80089e2 <_scanf_float+0x28a>
 80087d8:	2501      	movs	r5, #1
 80087da:	4628      	mov	r0, r5
 80087dc:	b007      	add	sp, #28
 80087de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80087e6:	2a0d      	cmp	r2, #13
 80087e8:	d8e6      	bhi.n	80087b8 <_scanf_float+0x60>
 80087ea:	a101      	add	r1, pc, #4	; (adr r1, 80087f0 <_scanf_float+0x98>)
 80087ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80087f0:	0800892f 	.word	0x0800892f
 80087f4:	080087b9 	.word	0x080087b9
 80087f8:	080087b9 	.word	0x080087b9
 80087fc:	080087b9 	.word	0x080087b9
 8008800:	0800898f 	.word	0x0800898f
 8008804:	08008967 	.word	0x08008967
 8008808:	080087b9 	.word	0x080087b9
 800880c:	080087b9 	.word	0x080087b9
 8008810:	0800893d 	.word	0x0800893d
 8008814:	080087b9 	.word	0x080087b9
 8008818:	080087b9 	.word	0x080087b9
 800881c:	080087b9 	.word	0x080087b9
 8008820:	080087b9 	.word	0x080087b9
 8008824:	080088f5 	.word	0x080088f5
 8008828:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800882c:	e7db      	b.n	80087e6 <_scanf_float+0x8e>
 800882e:	290e      	cmp	r1, #14
 8008830:	d8c2      	bhi.n	80087b8 <_scanf_float+0x60>
 8008832:	a001      	add	r0, pc, #4	; (adr r0, 8008838 <_scanf_float+0xe0>)
 8008834:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008838:	080088e7 	.word	0x080088e7
 800883c:	080087b9 	.word	0x080087b9
 8008840:	080088e7 	.word	0x080088e7
 8008844:	0800897b 	.word	0x0800897b
 8008848:	080087b9 	.word	0x080087b9
 800884c:	08008895 	.word	0x08008895
 8008850:	080088d1 	.word	0x080088d1
 8008854:	080088d1 	.word	0x080088d1
 8008858:	080088d1 	.word	0x080088d1
 800885c:	080088d1 	.word	0x080088d1
 8008860:	080088d1 	.word	0x080088d1
 8008864:	080088d1 	.word	0x080088d1
 8008868:	080088d1 	.word	0x080088d1
 800886c:	080088d1 	.word	0x080088d1
 8008870:	080088d1 	.word	0x080088d1
 8008874:	2b6e      	cmp	r3, #110	; 0x6e
 8008876:	d809      	bhi.n	800888c <_scanf_float+0x134>
 8008878:	2b60      	cmp	r3, #96	; 0x60
 800887a:	d8b2      	bhi.n	80087e2 <_scanf_float+0x8a>
 800887c:	2b54      	cmp	r3, #84	; 0x54
 800887e:	d077      	beq.n	8008970 <_scanf_float+0x218>
 8008880:	2b59      	cmp	r3, #89	; 0x59
 8008882:	d199      	bne.n	80087b8 <_scanf_float+0x60>
 8008884:	2d07      	cmp	r5, #7
 8008886:	d197      	bne.n	80087b8 <_scanf_float+0x60>
 8008888:	2508      	movs	r5, #8
 800888a:	e029      	b.n	80088e0 <_scanf_float+0x188>
 800888c:	2b74      	cmp	r3, #116	; 0x74
 800888e:	d06f      	beq.n	8008970 <_scanf_float+0x218>
 8008890:	2b79      	cmp	r3, #121	; 0x79
 8008892:	e7f6      	b.n	8008882 <_scanf_float+0x12a>
 8008894:	6821      	ldr	r1, [r4, #0]
 8008896:	05c8      	lsls	r0, r1, #23
 8008898:	d51a      	bpl.n	80088d0 <_scanf_float+0x178>
 800889a:	9b02      	ldr	r3, [sp, #8]
 800889c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80088a0:	6021      	str	r1, [r4, #0]
 80088a2:	f109 0901 	add.w	r9, r9, #1
 80088a6:	b11b      	cbz	r3, 80088b0 <_scanf_float+0x158>
 80088a8:	3b01      	subs	r3, #1
 80088aa:	3201      	adds	r2, #1
 80088ac:	9302      	str	r3, [sp, #8]
 80088ae:	60a2      	str	r2, [r4, #8]
 80088b0:	68a3      	ldr	r3, [r4, #8]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	60a3      	str	r3, [r4, #8]
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	3301      	adds	r3, #1
 80088ba:	6123      	str	r3, [r4, #16]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	3b01      	subs	r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	f340 8084 	ble.w	80089d0 <_scanf_float+0x278>
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	3301      	adds	r3, #1
 80088cc:	603b      	str	r3, [r7, #0]
 80088ce:	e766      	b.n	800879e <_scanf_float+0x46>
 80088d0:	eb1a 0f05 	cmn.w	sl, r5
 80088d4:	f47f af70 	bne.w	80087b8 <_scanf_float+0x60>
 80088d8:	6822      	ldr	r2, [r4, #0]
 80088da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80088de:	6022      	str	r2, [r4, #0]
 80088e0:	f806 3b01 	strb.w	r3, [r6], #1
 80088e4:	e7e4      	b.n	80088b0 <_scanf_float+0x158>
 80088e6:	6822      	ldr	r2, [r4, #0]
 80088e8:	0610      	lsls	r0, r2, #24
 80088ea:	f57f af65 	bpl.w	80087b8 <_scanf_float+0x60>
 80088ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088f2:	e7f4      	b.n	80088de <_scanf_float+0x186>
 80088f4:	f1ba 0f00 	cmp.w	sl, #0
 80088f8:	d10e      	bne.n	8008918 <_scanf_float+0x1c0>
 80088fa:	f1b9 0f00 	cmp.w	r9, #0
 80088fe:	d10e      	bne.n	800891e <_scanf_float+0x1c6>
 8008900:	6822      	ldr	r2, [r4, #0]
 8008902:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008906:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800890a:	d108      	bne.n	800891e <_scanf_float+0x1c6>
 800890c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008910:	6022      	str	r2, [r4, #0]
 8008912:	f04f 0a01 	mov.w	sl, #1
 8008916:	e7e3      	b.n	80088e0 <_scanf_float+0x188>
 8008918:	f1ba 0f02 	cmp.w	sl, #2
 800891c:	d055      	beq.n	80089ca <_scanf_float+0x272>
 800891e:	2d01      	cmp	r5, #1
 8008920:	d002      	beq.n	8008928 <_scanf_float+0x1d0>
 8008922:	2d04      	cmp	r5, #4
 8008924:	f47f af48 	bne.w	80087b8 <_scanf_float+0x60>
 8008928:	3501      	adds	r5, #1
 800892a:	b2ed      	uxtb	r5, r5
 800892c:	e7d8      	b.n	80088e0 <_scanf_float+0x188>
 800892e:	f1ba 0f01 	cmp.w	sl, #1
 8008932:	f47f af41 	bne.w	80087b8 <_scanf_float+0x60>
 8008936:	f04f 0a02 	mov.w	sl, #2
 800893a:	e7d1      	b.n	80088e0 <_scanf_float+0x188>
 800893c:	b97d      	cbnz	r5, 800895e <_scanf_float+0x206>
 800893e:	f1b9 0f00 	cmp.w	r9, #0
 8008942:	f47f af3c 	bne.w	80087be <_scanf_float+0x66>
 8008946:	6822      	ldr	r2, [r4, #0]
 8008948:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800894c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008950:	f47f af39 	bne.w	80087c6 <_scanf_float+0x6e>
 8008954:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008958:	6022      	str	r2, [r4, #0]
 800895a:	2501      	movs	r5, #1
 800895c:	e7c0      	b.n	80088e0 <_scanf_float+0x188>
 800895e:	2d03      	cmp	r5, #3
 8008960:	d0e2      	beq.n	8008928 <_scanf_float+0x1d0>
 8008962:	2d05      	cmp	r5, #5
 8008964:	e7de      	b.n	8008924 <_scanf_float+0x1cc>
 8008966:	2d02      	cmp	r5, #2
 8008968:	f47f af26 	bne.w	80087b8 <_scanf_float+0x60>
 800896c:	2503      	movs	r5, #3
 800896e:	e7b7      	b.n	80088e0 <_scanf_float+0x188>
 8008970:	2d06      	cmp	r5, #6
 8008972:	f47f af21 	bne.w	80087b8 <_scanf_float+0x60>
 8008976:	2507      	movs	r5, #7
 8008978:	e7b2      	b.n	80088e0 <_scanf_float+0x188>
 800897a:	6822      	ldr	r2, [r4, #0]
 800897c:	0591      	lsls	r1, r2, #22
 800897e:	f57f af1b 	bpl.w	80087b8 <_scanf_float+0x60>
 8008982:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008986:	6022      	str	r2, [r4, #0]
 8008988:	f8cd 9004 	str.w	r9, [sp, #4]
 800898c:	e7a8      	b.n	80088e0 <_scanf_float+0x188>
 800898e:	6822      	ldr	r2, [r4, #0]
 8008990:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008994:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008998:	d006      	beq.n	80089a8 <_scanf_float+0x250>
 800899a:	0550      	lsls	r0, r2, #21
 800899c:	f57f af0c 	bpl.w	80087b8 <_scanf_float+0x60>
 80089a0:	f1b9 0f00 	cmp.w	r9, #0
 80089a4:	f43f af0f 	beq.w	80087c6 <_scanf_float+0x6e>
 80089a8:	0591      	lsls	r1, r2, #22
 80089aa:	bf58      	it	pl
 80089ac:	9901      	ldrpl	r1, [sp, #4]
 80089ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089b2:	bf58      	it	pl
 80089b4:	eba9 0101 	subpl.w	r1, r9, r1
 80089b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80089bc:	bf58      	it	pl
 80089be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80089c2:	6022      	str	r2, [r4, #0]
 80089c4:	f04f 0900 	mov.w	r9, #0
 80089c8:	e78a      	b.n	80088e0 <_scanf_float+0x188>
 80089ca:	f04f 0a03 	mov.w	sl, #3
 80089ce:	e787      	b.n	80088e0 <_scanf_float+0x188>
 80089d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80089d4:	4639      	mov	r1, r7
 80089d6:	4640      	mov	r0, r8
 80089d8:	4798      	blx	r3
 80089da:	2800      	cmp	r0, #0
 80089dc:	f43f aedf 	beq.w	800879e <_scanf_float+0x46>
 80089e0:	e6ea      	b.n	80087b8 <_scanf_float+0x60>
 80089e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80089ea:	463a      	mov	r2, r7
 80089ec:	4640      	mov	r0, r8
 80089ee:	4798      	blx	r3
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	3b01      	subs	r3, #1
 80089f4:	6123      	str	r3, [r4, #16]
 80089f6:	e6ec      	b.n	80087d2 <_scanf_float+0x7a>
 80089f8:	1e6b      	subs	r3, r5, #1
 80089fa:	2b06      	cmp	r3, #6
 80089fc:	d825      	bhi.n	8008a4a <_scanf_float+0x2f2>
 80089fe:	2d02      	cmp	r5, #2
 8008a00:	d836      	bhi.n	8008a70 <_scanf_float+0x318>
 8008a02:	455e      	cmp	r6, fp
 8008a04:	f67f aee8 	bls.w	80087d8 <_scanf_float+0x80>
 8008a08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a10:	463a      	mov	r2, r7
 8008a12:	4640      	mov	r0, r8
 8008a14:	4798      	blx	r3
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	6123      	str	r3, [r4, #16]
 8008a1c:	e7f1      	b.n	8008a02 <_scanf_float+0x2aa>
 8008a1e:	9802      	ldr	r0, [sp, #8]
 8008a20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008a28:	9002      	str	r0, [sp, #8]
 8008a2a:	463a      	mov	r2, r7
 8008a2c:	4640      	mov	r0, r8
 8008a2e:	4798      	blx	r3
 8008a30:	6923      	ldr	r3, [r4, #16]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	6123      	str	r3, [r4, #16]
 8008a36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a3a:	fa5f fa8a 	uxtb.w	sl, sl
 8008a3e:	f1ba 0f02 	cmp.w	sl, #2
 8008a42:	d1ec      	bne.n	8008a1e <_scanf_float+0x2c6>
 8008a44:	3d03      	subs	r5, #3
 8008a46:	b2ed      	uxtb	r5, r5
 8008a48:	1b76      	subs	r6, r6, r5
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	05da      	lsls	r2, r3, #23
 8008a4e:	d52f      	bpl.n	8008ab0 <_scanf_float+0x358>
 8008a50:	055b      	lsls	r3, r3, #21
 8008a52:	d510      	bpl.n	8008a76 <_scanf_float+0x31e>
 8008a54:	455e      	cmp	r6, fp
 8008a56:	f67f aebf 	bls.w	80087d8 <_scanf_float+0x80>
 8008a5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a62:	463a      	mov	r2, r7
 8008a64:	4640      	mov	r0, r8
 8008a66:	4798      	blx	r3
 8008a68:	6923      	ldr	r3, [r4, #16]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	6123      	str	r3, [r4, #16]
 8008a6e:	e7f1      	b.n	8008a54 <_scanf_float+0x2fc>
 8008a70:	46aa      	mov	sl, r5
 8008a72:	9602      	str	r6, [sp, #8]
 8008a74:	e7df      	b.n	8008a36 <_scanf_float+0x2de>
 8008a76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008a7a:	6923      	ldr	r3, [r4, #16]
 8008a7c:	2965      	cmp	r1, #101	; 0x65
 8008a7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a82:	f106 35ff 	add.w	r5, r6, #4294967295
 8008a86:	6123      	str	r3, [r4, #16]
 8008a88:	d00c      	beq.n	8008aa4 <_scanf_float+0x34c>
 8008a8a:	2945      	cmp	r1, #69	; 0x45
 8008a8c:	d00a      	beq.n	8008aa4 <_scanf_float+0x34c>
 8008a8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a92:	463a      	mov	r2, r7
 8008a94:	4640      	mov	r0, r8
 8008a96:	4798      	blx	r3
 8008a98:	6923      	ldr	r3, [r4, #16]
 8008a9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	1eb5      	subs	r5, r6, #2
 8008aa2:	6123      	str	r3, [r4, #16]
 8008aa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aa8:	463a      	mov	r2, r7
 8008aaa:	4640      	mov	r0, r8
 8008aac:	4798      	blx	r3
 8008aae:	462e      	mov	r6, r5
 8008ab0:	6825      	ldr	r5, [r4, #0]
 8008ab2:	f015 0510 	ands.w	r5, r5, #16
 8008ab6:	d159      	bne.n	8008b6c <_scanf_float+0x414>
 8008ab8:	7035      	strb	r5, [r6, #0]
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ac4:	d11b      	bne.n	8008afe <_scanf_float+0x3a6>
 8008ac6:	9b01      	ldr	r3, [sp, #4]
 8008ac8:	454b      	cmp	r3, r9
 8008aca:	eba3 0209 	sub.w	r2, r3, r9
 8008ace:	d123      	bne.n	8008b18 <_scanf_float+0x3c0>
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	4659      	mov	r1, fp
 8008ad4:	4640      	mov	r0, r8
 8008ad6:	f001 f9e5 	bl	8009ea4 <_strtod_r>
 8008ada:	6822      	ldr	r2, [r4, #0]
 8008adc:	9b03      	ldr	r3, [sp, #12]
 8008ade:	f012 0f02 	tst.w	r2, #2
 8008ae2:	ec57 6b10 	vmov	r6, r7, d0
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	d021      	beq.n	8008b2e <_scanf_float+0x3d6>
 8008aea:	9903      	ldr	r1, [sp, #12]
 8008aec:	1d1a      	adds	r2, r3, #4
 8008aee:	600a      	str	r2, [r1, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	e9c3 6700 	strd	r6, r7, [r3]
 8008af6:	68e3      	ldr	r3, [r4, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	60e3      	str	r3, [r4, #12]
 8008afc:	e66d      	b.n	80087da <_scanf_float+0x82>
 8008afe:	9b04      	ldr	r3, [sp, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d0e5      	beq.n	8008ad0 <_scanf_float+0x378>
 8008b04:	9905      	ldr	r1, [sp, #20]
 8008b06:	230a      	movs	r3, #10
 8008b08:	462a      	mov	r2, r5
 8008b0a:	3101      	adds	r1, #1
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	f001 fa51 	bl	8009fb4 <_strtol_r>
 8008b12:	9b04      	ldr	r3, [sp, #16]
 8008b14:	9e05      	ldr	r6, [sp, #20]
 8008b16:	1ac2      	subs	r2, r0, r3
 8008b18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008b1c:	429e      	cmp	r6, r3
 8008b1e:	bf28      	it	cs
 8008b20:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008b24:	4912      	ldr	r1, [pc, #72]	; (8008b70 <_scanf_float+0x418>)
 8008b26:	4630      	mov	r0, r6
 8008b28:	f000 f922 	bl	8008d70 <siprintf>
 8008b2c:	e7d0      	b.n	8008ad0 <_scanf_float+0x378>
 8008b2e:	9903      	ldr	r1, [sp, #12]
 8008b30:	f012 0f04 	tst.w	r2, #4
 8008b34:	f103 0204 	add.w	r2, r3, #4
 8008b38:	600a      	str	r2, [r1, #0]
 8008b3a:	d1d9      	bne.n	8008af0 <_scanf_float+0x398>
 8008b3c:	f8d3 8000 	ldr.w	r8, [r3]
 8008b40:	ee10 2a10 	vmov	r2, s0
 8008b44:	ee10 0a10 	vmov	r0, s0
 8008b48:	463b      	mov	r3, r7
 8008b4a:	4639      	mov	r1, r7
 8008b4c:	f7f7 ffee 	bl	8000b2c <__aeabi_dcmpun>
 8008b50:	b128      	cbz	r0, 8008b5e <_scanf_float+0x406>
 8008b52:	4808      	ldr	r0, [pc, #32]	; (8008b74 <_scanf_float+0x41c>)
 8008b54:	f000 f8c2 	bl	8008cdc <nanf>
 8008b58:	ed88 0a00 	vstr	s0, [r8]
 8008b5c:	e7cb      	b.n	8008af6 <_scanf_float+0x39e>
 8008b5e:	4630      	mov	r0, r6
 8008b60:	4639      	mov	r1, r7
 8008b62:	f7f8 f841 	bl	8000be8 <__aeabi_d2f>
 8008b66:	f8c8 0000 	str.w	r0, [r8]
 8008b6a:	e7c4      	b.n	8008af6 <_scanf_float+0x39e>
 8008b6c:	2500      	movs	r5, #0
 8008b6e:	e634      	b.n	80087da <_scanf_float+0x82>
 8008b70:	0800d526 	.word	0x0800d526
 8008b74:	0800e04b 	.word	0x0800e04b

08008b78 <_perror_r>:
 8008b78:	6983      	ldr	r3, [r0, #24]
 8008b7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b7c:	68c4      	ldr	r4, [r0, #12]
 8008b7e:	4605      	mov	r5, r0
 8008b80:	460e      	mov	r6, r1
 8008b82:	b90b      	cbnz	r3, 8008b88 <_perror_r+0x10>
 8008b84:	f002 fa2e 	bl	800afe4 <__sinit>
 8008b88:	4b43      	ldr	r3, [pc, #268]	; (8008c98 <_perror_r+0x120>)
 8008b8a:	429c      	cmp	r4, r3
 8008b8c:	d132      	bne.n	8008bf4 <_perror_r+0x7c>
 8008b8e:	686c      	ldr	r4, [r5, #4]
 8008b90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b92:	07d8      	lsls	r0, r3, #31
 8008b94:	d405      	bmi.n	8008ba2 <_perror_r+0x2a>
 8008b96:	89a3      	ldrh	r3, [r4, #12]
 8008b98:	0599      	lsls	r1, r3, #22
 8008b9a:	d402      	bmi.n	8008ba2 <_perror_r+0x2a>
 8008b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b9e:	f002 fe32 	bl	800b806 <__retarget_lock_acquire_recursive>
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	f002 f94b 	bl	800ae40 <_fflush_r>
 8008baa:	bb6e      	cbnz	r6, 8008c08 <_perror_r+0x90>
 8008bac:	6829      	ldr	r1, [r5, #0]
 8008bae:	ab01      	add	r3, sp, #4
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f000 f96e 	bl	8008e94 <_strerror_r>
 8008bb8:	4607      	mov	r7, r0
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d14f      	bne.n	8008c5e <_perror_r+0xe6>
 8008bbe:	4837      	ldr	r0, [pc, #220]	; (8008c9c <_perror_r+0x124>)
 8008bc0:	4f36      	ldr	r7, [pc, #216]	; (8008c9c <_perror_r+0x124>)
 8008bc2:	f7f7 fb05 	bl	80001d0 <strlen>
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	b156      	cbz	r6, 8008be0 <_perror_r+0x68>
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f002 f974 	bl	800aeb8 <fileno>
 8008bd0:	4633      	mov	r3, r6
 8008bd2:	4601      	mov	r1, r0
 8008bd4:	463a      	mov	r2, r7
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f001 fa10 	bl	8009ffc <_write_r>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	da51      	bge.n	8008c84 <_perror_r+0x10c>
 8008be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bea:	07d2      	lsls	r2, r2, #31
 8008bec:	81a3      	strh	r3, [r4, #12]
 8008bee:	d54c      	bpl.n	8008c8a <_perror_r+0x112>
 8008bf0:	b003      	add	sp, #12
 8008bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf4:	4b2a      	ldr	r3, [pc, #168]	; (8008ca0 <_perror_r+0x128>)
 8008bf6:	429c      	cmp	r4, r3
 8008bf8:	d101      	bne.n	8008bfe <_perror_r+0x86>
 8008bfa:	68ac      	ldr	r4, [r5, #8]
 8008bfc:	e7c8      	b.n	8008b90 <_perror_r+0x18>
 8008bfe:	4b29      	ldr	r3, [pc, #164]	; (8008ca4 <_perror_r+0x12c>)
 8008c00:	429c      	cmp	r4, r3
 8008c02:	bf08      	it	eq
 8008c04:	68ec      	ldreq	r4, [r5, #12]
 8008c06:	e7c3      	b.n	8008b90 <_perror_r+0x18>
 8008c08:	7833      	ldrb	r3, [r6, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0ce      	beq.n	8008bac <_perror_r+0x34>
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f7f7 fade 	bl	80001d0 <strlen>
 8008c14:	4607      	mov	r7, r0
 8008c16:	b157      	cbz	r7, 8008c2e <_perror_r+0xb6>
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f002 f94d 	bl	800aeb8 <fileno>
 8008c1e:	463b      	mov	r3, r7
 8008c20:	4601      	mov	r1, r0
 8008c22:	4632      	mov	r2, r6
 8008c24:	4628      	mov	r0, r5
 8008c26:	f001 f9e9 	bl	8009ffc <_write_r>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	da14      	bge.n	8008c58 <_perror_r+0xe0>
 8008c2e:	481e      	ldr	r0, [pc, #120]	; (8008ca8 <_perror_r+0x130>)
 8008c30:	4f1d      	ldr	r7, [pc, #116]	; (8008ca8 <_perror_r+0x130>)
 8008c32:	f7f7 facd 	bl	80001d0 <strlen>
 8008c36:	4606      	mov	r6, r0
 8008c38:	2e00      	cmp	r6, #0
 8008c3a:	d0b7      	beq.n	8008bac <_perror_r+0x34>
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f002 f93b 	bl	800aeb8 <fileno>
 8008c42:	4633      	mov	r3, r6
 8008c44:	4601      	mov	r1, r0
 8008c46:	463a      	mov	r2, r7
 8008c48:	4628      	mov	r0, r5
 8008c4a:	f001 f9d7 	bl	8009ffc <_write_r>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	dbac      	blt.n	8008bac <_perror_r+0x34>
 8008c52:	1a36      	subs	r6, r6, r0
 8008c54:	4407      	add	r7, r0
 8008c56:	e7ef      	b.n	8008c38 <_perror_r+0xc0>
 8008c58:	1a3f      	subs	r7, r7, r0
 8008c5a:	4406      	add	r6, r0
 8008c5c:	e7db      	b.n	8008c16 <_perror_r+0x9e>
 8008c5e:	f7f7 fab7 	bl	80001d0 <strlen>
 8008c62:	4606      	mov	r6, r0
 8008c64:	2e00      	cmp	r6, #0
 8008c66:	d0aa      	beq.n	8008bbe <_perror_r+0x46>
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f002 f925 	bl	800aeb8 <fileno>
 8008c6e:	4633      	mov	r3, r6
 8008c70:	4601      	mov	r1, r0
 8008c72:	463a      	mov	r2, r7
 8008c74:	4628      	mov	r0, r5
 8008c76:	f001 f9c1 	bl	8009ffc <_write_r>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	db9f      	blt.n	8008bbe <_perror_r+0x46>
 8008c7e:	1a36      	subs	r6, r6, r0
 8008c80:	4407      	add	r7, r0
 8008c82:	e7ef      	b.n	8008c64 <_perror_r+0xec>
 8008c84:	1a36      	subs	r6, r6, r0
 8008c86:	4407      	add	r7, r0
 8008c88:	e79e      	b.n	8008bc8 <_perror_r+0x50>
 8008c8a:	059b      	lsls	r3, r3, #22
 8008c8c:	d4b0      	bmi.n	8008bf0 <_perror_r+0x78>
 8008c8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c90:	f002 fdba 	bl	800b808 <__retarget_lock_release_recursive>
 8008c94:	e7ac      	b.n	8008bf0 <_perror_r+0x78>
 8008c96:	bf00      	nop
 8008c98:	0800ddcc 	.word	0x0800ddcc
 8008c9c:	0800e04a 	.word	0x0800e04a
 8008ca0:	0800ddec 	.word	0x0800ddec
 8008ca4:	0800ddac 	.word	0x0800ddac
 8008ca8:	0800e01a 	.word	0x0800e01a

08008cac <perror>:
 8008cac:	4b02      	ldr	r3, [pc, #8]	; (8008cb8 <perror+0xc>)
 8008cae:	4601      	mov	r1, r0
 8008cb0:	6818      	ldr	r0, [r3, #0]
 8008cb2:	f7ff bf61 	b.w	8008b78 <_perror_r>
 8008cb6:	bf00      	nop
 8008cb8:	2000003c 	.word	0x2000003c

08008cbc <_sbrk_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	4d06      	ldr	r5, [pc, #24]	; (8008cd8 <_sbrk_r+0x1c>)
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	4608      	mov	r0, r1
 8008cc6:	602b      	str	r3, [r5, #0]
 8008cc8:	f7f8 ffa2 	bl	8001c10 <_sbrk>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	d102      	bne.n	8008cd6 <_sbrk_r+0x1a>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	b103      	cbz	r3, 8008cd6 <_sbrk_r+0x1a>
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	2000066c 	.word	0x2000066c

08008cdc <nanf>:
 8008cdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008ce4 <nanf+0x8>
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	7fc00000 	.word	0x7fc00000

08008ce8 <_raise_r>:
 8008ce8:	291f      	cmp	r1, #31
 8008cea:	b538      	push	{r3, r4, r5, lr}
 8008cec:	4604      	mov	r4, r0
 8008cee:	460d      	mov	r5, r1
 8008cf0:	d904      	bls.n	8008cfc <_raise_r+0x14>
 8008cf2:	2316      	movs	r3, #22
 8008cf4:	6003      	str	r3, [r0, #0]
 8008cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
 8008cfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008cfe:	b112      	cbz	r2, 8008d06 <_raise_r+0x1e>
 8008d00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d04:	b94b      	cbnz	r3, 8008d1a <_raise_r+0x32>
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 f830 	bl	8008d6c <_getpid_r>
 8008d0c:	462a      	mov	r2, r5
 8008d0e:	4601      	mov	r1, r0
 8008d10:	4620      	mov	r0, r4
 8008d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d16:	f000 b817 	b.w	8008d48 <_kill_r>
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d00a      	beq.n	8008d34 <_raise_r+0x4c>
 8008d1e:	1c59      	adds	r1, r3, #1
 8008d20:	d103      	bne.n	8008d2a <_raise_r+0x42>
 8008d22:	2316      	movs	r3, #22
 8008d24:	6003      	str	r3, [r0, #0]
 8008d26:	2001      	movs	r0, #1
 8008d28:	e7e7      	b.n	8008cfa <_raise_r+0x12>
 8008d2a:	2400      	movs	r4, #0
 8008d2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d30:	4628      	mov	r0, r5
 8008d32:	4798      	blx	r3
 8008d34:	2000      	movs	r0, #0
 8008d36:	e7e0      	b.n	8008cfa <_raise_r+0x12>

08008d38 <raise>:
 8008d38:	4b02      	ldr	r3, [pc, #8]	; (8008d44 <raise+0xc>)
 8008d3a:	4601      	mov	r1, r0
 8008d3c:	6818      	ldr	r0, [r3, #0]
 8008d3e:	f7ff bfd3 	b.w	8008ce8 <_raise_r>
 8008d42:	bf00      	nop
 8008d44:	2000003c 	.word	0x2000003c

08008d48 <_kill_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4d07      	ldr	r5, [pc, #28]	; (8008d68 <_kill_r+0x20>)
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	4611      	mov	r1, r2
 8008d54:	602b      	str	r3, [r5, #0]
 8008d56:	f7f8 fed3 	bl	8001b00 <_kill>
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	d102      	bne.n	8008d64 <_kill_r+0x1c>
 8008d5e:	682b      	ldr	r3, [r5, #0]
 8008d60:	b103      	cbz	r3, 8008d64 <_kill_r+0x1c>
 8008d62:	6023      	str	r3, [r4, #0]
 8008d64:	bd38      	pop	{r3, r4, r5, pc}
 8008d66:	bf00      	nop
 8008d68:	2000066c 	.word	0x2000066c

08008d6c <_getpid_r>:
 8008d6c:	f7f8 bec0 	b.w	8001af0 <_getpid>

08008d70 <siprintf>:
 8008d70:	b40e      	push	{r1, r2, r3}
 8008d72:	b500      	push	{lr}
 8008d74:	b09c      	sub	sp, #112	; 0x70
 8008d76:	ab1d      	add	r3, sp, #116	; 0x74
 8008d78:	9002      	str	r0, [sp, #8]
 8008d7a:	9006      	str	r0, [sp, #24]
 8008d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d80:	4809      	ldr	r0, [pc, #36]	; (8008da8 <siprintf+0x38>)
 8008d82:	9107      	str	r1, [sp, #28]
 8008d84:	9104      	str	r1, [sp, #16]
 8008d86:	4909      	ldr	r1, [pc, #36]	; (8008dac <siprintf+0x3c>)
 8008d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d8c:	9105      	str	r1, [sp, #20]
 8008d8e:	6800      	ldr	r0, [r0, #0]
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	a902      	add	r1, sp, #8
 8008d94:	f003 faaa 	bl	800c2ec <_svfiprintf_r>
 8008d98:	9b02      	ldr	r3, [sp, #8]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	701a      	strb	r2, [r3, #0]
 8008d9e:	b01c      	add	sp, #112	; 0x70
 8008da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008da4:	b003      	add	sp, #12
 8008da6:	4770      	bx	lr
 8008da8:	2000003c 	.word	0x2000003c
 8008dac:	ffff0208 	.word	0xffff0208

08008db0 <siscanf>:
 8008db0:	b40e      	push	{r1, r2, r3}
 8008db2:	b510      	push	{r4, lr}
 8008db4:	b09f      	sub	sp, #124	; 0x7c
 8008db6:	ac21      	add	r4, sp, #132	; 0x84
 8008db8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008dbc:	f854 2b04 	ldr.w	r2, [r4], #4
 8008dc0:	9201      	str	r2, [sp, #4]
 8008dc2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008dc6:	9004      	str	r0, [sp, #16]
 8008dc8:	9008      	str	r0, [sp, #32]
 8008dca:	f7f7 fa01 	bl	80001d0 <strlen>
 8008dce:	4b0c      	ldr	r3, [pc, #48]	; (8008e00 <siscanf+0x50>)
 8008dd0:	9005      	str	r0, [sp, #20]
 8008dd2:	9009      	str	r0, [sp, #36]	; 0x24
 8008dd4:	930d      	str	r3, [sp, #52]	; 0x34
 8008dd6:	480b      	ldr	r0, [pc, #44]	; (8008e04 <siscanf+0x54>)
 8008dd8:	9a01      	ldr	r2, [sp, #4]
 8008dda:	6800      	ldr	r0, [r0, #0]
 8008ddc:	9403      	str	r4, [sp, #12]
 8008dde:	2300      	movs	r3, #0
 8008de0:	9311      	str	r3, [sp, #68]	; 0x44
 8008de2:	9316      	str	r3, [sp, #88]	; 0x58
 8008de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008de8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008dec:	a904      	add	r1, sp, #16
 8008dee:	4623      	mov	r3, r4
 8008df0:	f003 fbd6 	bl	800c5a0 <__ssvfiscanf_r>
 8008df4:	b01f      	add	sp, #124	; 0x7c
 8008df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dfa:	b003      	add	sp, #12
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	08008e2b 	.word	0x08008e2b
 8008e04:	2000003c 	.word	0x2000003c

08008e08 <__sread>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e10:	f003 fe90 	bl	800cb34 <_read_r>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	bfab      	itete	ge
 8008e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e1c:	181b      	addge	r3, r3, r0
 8008e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e22:	bfac      	ite	ge
 8008e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e26:	81a3      	strhlt	r3, [r4, #12]
 8008e28:	bd10      	pop	{r4, pc}

08008e2a <__seofread>:
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	4770      	bx	lr

08008e2e <__swrite>:
 8008e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e32:	461f      	mov	r7, r3
 8008e34:	898b      	ldrh	r3, [r1, #12]
 8008e36:	05db      	lsls	r3, r3, #23
 8008e38:	4605      	mov	r5, r0
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	4616      	mov	r6, r2
 8008e3e:	d505      	bpl.n	8008e4c <__swrite+0x1e>
 8008e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e44:	2302      	movs	r3, #2
 8008e46:	2200      	movs	r2, #0
 8008e48:	f002 fce0 	bl	800b80c <_lseek_r>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e56:	81a3      	strh	r3, [r4, #12]
 8008e58:	4632      	mov	r2, r6
 8008e5a:	463b      	mov	r3, r7
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e62:	f001 b8cb 	b.w	8009ffc <_write_r>

08008e66 <__sseek>:
 8008e66:	b510      	push	{r4, lr}
 8008e68:	460c      	mov	r4, r1
 8008e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e6e:	f002 fccd 	bl	800b80c <_lseek_r>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	bf15      	itete	ne
 8008e78:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e82:	81a3      	strheq	r3, [r4, #12]
 8008e84:	bf18      	it	ne
 8008e86:	81a3      	strhne	r3, [r4, #12]
 8008e88:	bd10      	pop	{r4, pc}

08008e8a <__sclose>:
 8008e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e8e:	f001 b8c7 	b.w	800a020 <_close_r>
	...

08008e94 <_strerror_r>:
 8008e94:	b510      	push	{r4, lr}
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	288e      	cmp	r0, #142	; 0x8e
 8008e9e:	f200 8130 	bhi.w	8009102 <_strerror_r+0x26e>
 8008ea2:	e8df f010 	tbh	[pc, r0, lsl #1]
 8008ea6:	0139      	.short	0x0139
 8008ea8:	0092008f 	.word	0x0092008f
 8008eac:	00960094 	.word	0x00960094
 8008eb0:	009a0098 	.word	0x009a0098
 8008eb4:	009e009c 	.word	0x009e009c
 8008eb8:	00a400a2 	.word	0x00a400a2
 8008ebc:	00aa00a8 	.word	0x00aa00a8
 8008ec0:	00ae00ac 	.word	0x00ae00ac
 8008ec4:	00b0012e 	.word	0x00b0012e
 8008ec8:	00b400b2 	.word	0x00b400b2
 8008ecc:	00b800b6 	.word	0x00b800b6
 8008ed0:	00c000be 	.word	0x00c000be
 8008ed4:	00c800c6 	.word	0x00c800c6
 8008ed8:	00cc00ca 	.word	0x00cc00ca
 8008edc:	00d200ce 	.word	0x00d200ce
 8008ee0:	00d800d6 	.word	0x00d800d6
 8008ee4:	00dc00da 	.word	0x00dc00da
 8008ee8:	00e000de 	.word	0x00e000de
 8008eec:	00e400e2 	.word	0x00e400e2
 8008ef0:	012e012e 	.word	0x012e012e
 8008ef4:	012e012e 	.word	0x012e012e
 8008ef8:	012e012e 	.word	0x012e012e
 8008efc:	012e012e 	.word	0x012e012e
 8008f00:	00ec00e8 	.word	0x00ec00e8
 8008f04:	012e012e 	.word	0x012e012e
 8008f08:	012e012e 	.word	0x012e012e
 8008f0c:	012e012e 	.word	0x012e012e
 8008f10:	012e012e 	.word	0x012e012e
 8008f14:	012e012e 	.word	0x012e012e
 8008f18:	012e012e 	.word	0x012e012e
 8008f1c:	00ee012e 	.word	0x00ee012e
 8008f20:	00f00108 	.word	0x00f00108
 8008f24:	012e00f2 	.word	0x012e00f2
 8008f28:	012e012e 	.word	0x012e012e
 8008f2c:	012e00f4 	.word	0x012e00f4
 8008f30:	012e012e 	.word	0x012e012e
 8008f34:	012e00f6 	.word	0x012e00f6
 8008f38:	00fa012e 	.word	0x00fa012e
 8008f3c:	012e012e 	.word	0x012e012e
 8008f40:	012e00fc 	.word	0x012e00fc
 8008f44:	012e012e 	.word	0x012e012e
 8008f48:	012e012e 	.word	0x012e012e
 8008f4c:	012e012e 	.word	0x012e012e
 8008f50:	012e012e 	.word	0x012e012e
 8008f54:	00fe012e 	.word	0x00fe012e
 8008f58:	0100012e 	.word	0x0100012e
 8008f5c:	01040102 	.word	0x01040102
 8008f60:	012e012e 	.word	0x012e012e
 8008f64:	012e0126 	.word	0x012e0126
 8008f68:	012e012e 	.word	0x012e012e
 8008f6c:	012e012e 	.word	0x012e012e
 8008f70:	012e012e 	.word	0x012e012e
 8008f74:	0114012e 	.word	0x0114012e
 8008f78:	010a0106 	.word	0x010a0106
 8008f7c:	010e010c 	.word	0x010e010c
 8008f80:	012e0110 	.word	0x012e0110
 8008f84:	01160112 	.word	0x01160112
 8008f88:	00ea011a 	.word	0x00ea011a
 8008f8c:	012c00c2 	.word	0x012c00c2
 8008f90:	00d000ba 	.word	0x00d000ba
 8008f94:	00a000bc 	.word	0x00a000bc
 8008f98:	012a00a6 	.word	0x012a00a6
 8008f9c:	012e00f8 	.word	0x012e00f8
 8008fa0:	00c40118 	.word	0x00c40118
 8008fa4:	011c011e 	.word	0x011c011e
 8008fa8:	012e012e 	.word	0x012e012e
 8008fac:	012e012e 	.word	0x012e012e
 8008fb0:	00d4012e 	.word	0x00d4012e
 8008fb4:	012e012e 	.word	0x012e012e
 8008fb8:	00e6012e 	.word	0x00e6012e
 8008fbc:	01200128 	.word	0x01200128
 8008fc0:	01240122 	.word	0x01240122
 8008fc4:	4b55      	ldr	r3, [pc, #340]	; (800911c <_strerror_r+0x288>)
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	bd10      	pop	{r4, pc}
 8008fca:	4b55      	ldr	r3, [pc, #340]	; (8009120 <_strerror_r+0x28c>)
 8008fcc:	e7fb      	b.n	8008fc6 <_strerror_r+0x132>
 8008fce:	4b55      	ldr	r3, [pc, #340]	; (8009124 <_strerror_r+0x290>)
 8008fd0:	e7f9      	b.n	8008fc6 <_strerror_r+0x132>
 8008fd2:	4b55      	ldr	r3, [pc, #340]	; (8009128 <_strerror_r+0x294>)
 8008fd4:	e7f7      	b.n	8008fc6 <_strerror_r+0x132>
 8008fd6:	4b55      	ldr	r3, [pc, #340]	; (800912c <_strerror_r+0x298>)
 8008fd8:	e7f5      	b.n	8008fc6 <_strerror_r+0x132>
 8008fda:	4b55      	ldr	r3, [pc, #340]	; (8009130 <_strerror_r+0x29c>)
 8008fdc:	e7f3      	b.n	8008fc6 <_strerror_r+0x132>
 8008fde:	4b55      	ldr	r3, [pc, #340]	; (8009134 <_strerror_r+0x2a0>)
 8008fe0:	e7f1      	b.n	8008fc6 <_strerror_r+0x132>
 8008fe2:	4b55      	ldr	r3, [pc, #340]	; (8009138 <_strerror_r+0x2a4>)
 8008fe4:	e7ef      	b.n	8008fc6 <_strerror_r+0x132>
 8008fe6:	4b55      	ldr	r3, [pc, #340]	; (800913c <_strerror_r+0x2a8>)
 8008fe8:	e7ed      	b.n	8008fc6 <_strerror_r+0x132>
 8008fea:	4b55      	ldr	r3, [pc, #340]	; (8009140 <_strerror_r+0x2ac>)
 8008fec:	e7eb      	b.n	8008fc6 <_strerror_r+0x132>
 8008fee:	4b55      	ldr	r3, [pc, #340]	; (8009144 <_strerror_r+0x2b0>)
 8008ff0:	e7e9      	b.n	8008fc6 <_strerror_r+0x132>
 8008ff2:	4b55      	ldr	r3, [pc, #340]	; (8009148 <_strerror_r+0x2b4>)
 8008ff4:	e7e7      	b.n	8008fc6 <_strerror_r+0x132>
 8008ff6:	4b55      	ldr	r3, [pc, #340]	; (800914c <_strerror_r+0x2b8>)
 8008ff8:	e7e5      	b.n	8008fc6 <_strerror_r+0x132>
 8008ffa:	4b55      	ldr	r3, [pc, #340]	; (8009150 <_strerror_r+0x2bc>)
 8008ffc:	e7e3      	b.n	8008fc6 <_strerror_r+0x132>
 8008ffe:	4b55      	ldr	r3, [pc, #340]	; (8009154 <_strerror_r+0x2c0>)
 8009000:	e7e1      	b.n	8008fc6 <_strerror_r+0x132>
 8009002:	4b55      	ldr	r3, [pc, #340]	; (8009158 <_strerror_r+0x2c4>)
 8009004:	e7df      	b.n	8008fc6 <_strerror_r+0x132>
 8009006:	4b55      	ldr	r3, [pc, #340]	; (800915c <_strerror_r+0x2c8>)
 8009008:	e7dd      	b.n	8008fc6 <_strerror_r+0x132>
 800900a:	4b55      	ldr	r3, [pc, #340]	; (8009160 <_strerror_r+0x2cc>)
 800900c:	e7db      	b.n	8008fc6 <_strerror_r+0x132>
 800900e:	4b55      	ldr	r3, [pc, #340]	; (8009164 <_strerror_r+0x2d0>)
 8009010:	e7d9      	b.n	8008fc6 <_strerror_r+0x132>
 8009012:	4b55      	ldr	r3, [pc, #340]	; (8009168 <_strerror_r+0x2d4>)
 8009014:	e7d7      	b.n	8008fc6 <_strerror_r+0x132>
 8009016:	4b55      	ldr	r3, [pc, #340]	; (800916c <_strerror_r+0x2d8>)
 8009018:	e7d5      	b.n	8008fc6 <_strerror_r+0x132>
 800901a:	4b55      	ldr	r3, [pc, #340]	; (8009170 <_strerror_r+0x2dc>)
 800901c:	e7d3      	b.n	8008fc6 <_strerror_r+0x132>
 800901e:	4b55      	ldr	r3, [pc, #340]	; (8009174 <_strerror_r+0x2e0>)
 8009020:	e7d1      	b.n	8008fc6 <_strerror_r+0x132>
 8009022:	4b55      	ldr	r3, [pc, #340]	; (8009178 <_strerror_r+0x2e4>)
 8009024:	e7cf      	b.n	8008fc6 <_strerror_r+0x132>
 8009026:	4b55      	ldr	r3, [pc, #340]	; (800917c <_strerror_r+0x2e8>)
 8009028:	e7cd      	b.n	8008fc6 <_strerror_r+0x132>
 800902a:	4b55      	ldr	r3, [pc, #340]	; (8009180 <_strerror_r+0x2ec>)
 800902c:	e7cb      	b.n	8008fc6 <_strerror_r+0x132>
 800902e:	4b55      	ldr	r3, [pc, #340]	; (8009184 <_strerror_r+0x2f0>)
 8009030:	e7c9      	b.n	8008fc6 <_strerror_r+0x132>
 8009032:	4b55      	ldr	r3, [pc, #340]	; (8009188 <_strerror_r+0x2f4>)
 8009034:	e7c7      	b.n	8008fc6 <_strerror_r+0x132>
 8009036:	4b55      	ldr	r3, [pc, #340]	; (800918c <_strerror_r+0x2f8>)
 8009038:	e7c5      	b.n	8008fc6 <_strerror_r+0x132>
 800903a:	4b55      	ldr	r3, [pc, #340]	; (8009190 <_strerror_r+0x2fc>)
 800903c:	e7c3      	b.n	8008fc6 <_strerror_r+0x132>
 800903e:	4b55      	ldr	r3, [pc, #340]	; (8009194 <_strerror_r+0x300>)
 8009040:	e7c1      	b.n	8008fc6 <_strerror_r+0x132>
 8009042:	4b55      	ldr	r3, [pc, #340]	; (8009198 <_strerror_r+0x304>)
 8009044:	e7bf      	b.n	8008fc6 <_strerror_r+0x132>
 8009046:	4b55      	ldr	r3, [pc, #340]	; (800919c <_strerror_r+0x308>)
 8009048:	e7bd      	b.n	8008fc6 <_strerror_r+0x132>
 800904a:	4b55      	ldr	r3, [pc, #340]	; (80091a0 <_strerror_r+0x30c>)
 800904c:	e7bb      	b.n	8008fc6 <_strerror_r+0x132>
 800904e:	4b55      	ldr	r3, [pc, #340]	; (80091a4 <_strerror_r+0x310>)
 8009050:	e7b9      	b.n	8008fc6 <_strerror_r+0x132>
 8009052:	4b55      	ldr	r3, [pc, #340]	; (80091a8 <_strerror_r+0x314>)
 8009054:	e7b7      	b.n	8008fc6 <_strerror_r+0x132>
 8009056:	4b55      	ldr	r3, [pc, #340]	; (80091ac <_strerror_r+0x318>)
 8009058:	e7b5      	b.n	8008fc6 <_strerror_r+0x132>
 800905a:	4b55      	ldr	r3, [pc, #340]	; (80091b0 <_strerror_r+0x31c>)
 800905c:	e7b3      	b.n	8008fc6 <_strerror_r+0x132>
 800905e:	4b55      	ldr	r3, [pc, #340]	; (80091b4 <_strerror_r+0x320>)
 8009060:	e7b1      	b.n	8008fc6 <_strerror_r+0x132>
 8009062:	4b55      	ldr	r3, [pc, #340]	; (80091b8 <_strerror_r+0x324>)
 8009064:	e7af      	b.n	8008fc6 <_strerror_r+0x132>
 8009066:	4b55      	ldr	r3, [pc, #340]	; (80091bc <_strerror_r+0x328>)
 8009068:	e7ad      	b.n	8008fc6 <_strerror_r+0x132>
 800906a:	4b55      	ldr	r3, [pc, #340]	; (80091c0 <_strerror_r+0x32c>)
 800906c:	e7ab      	b.n	8008fc6 <_strerror_r+0x132>
 800906e:	4b55      	ldr	r3, [pc, #340]	; (80091c4 <_strerror_r+0x330>)
 8009070:	e7a9      	b.n	8008fc6 <_strerror_r+0x132>
 8009072:	4b55      	ldr	r3, [pc, #340]	; (80091c8 <_strerror_r+0x334>)
 8009074:	e7a7      	b.n	8008fc6 <_strerror_r+0x132>
 8009076:	4b55      	ldr	r3, [pc, #340]	; (80091cc <_strerror_r+0x338>)
 8009078:	e7a5      	b.n	8008fc6 <_strerror_r+0x132>
 800907a:	4b55      	ldr	r3, [pc, #340]	; (80091d0 <_strerror_r+0x33c>)
 800907c:	e7a3      	b.n	8008fc6 <_strerror_r+0x132>
 800907e:	4b55      	ldr	r3, [pc, #340]	; (80091d4 <_strerror_r+0x340>)
 8009080:	e7a1      	b.n	8008fc6 <_strerror_r+0x132>
 8009082:	4b55      	ldr	r3, [pc, #340]	; (80091d8 <_strerror_r+0x344>)
 8009084:	e79f      	b.n	8008fc6 <_strerror_r+0x132>
 8009086:	4b55      	ldr	r3, [pc, #340]	; (80091dc <_strerror_r+0x348>)
 8009088:	e79d      	b.n	8008fc6 <_strerror_r+0x132>
 800908a:	4b55      	ldr	r3, [pc, #340]	; (80091e0 <_strerror_r+0x34c>)
 800908c:	e79b      	b.n	8008fc6 <_strerror_r+0x132>
 800908e:	4b55      	ldr	r3, [pc, #340]	; (80091e4 <_strerror_r+0x350>)
 8009090:	e799      	b.n	8008fc6 <_strerror_r+0x132>
 8009092:	4b55      	ldr	r3, [pc, #340]	; (80091e8 <_strerror_r+0x354>)
 8009094:	e797      	b.n	8008fc6 <_strerror_r+0x132>
 8009096:	4b55      	ldr	r3, [pc, #340]	; (80091ec <_strerror_r+0x358>)
 8009098:	e795      	b.n	8008fc6 <_strerror_r+0x132>
 800909a:	4b55      	ldr	r3, [pc, #340]	; (80091f0 <_strerror_r+0x35c>)
 800909c:	e793      	b.n	8008fc6 <_strerror_r+0x132>
 800909e:	4b55      	ldr	r3, [pc, #340]	; (80091f4 <_strerror_r+0x360>)
 80090a0:	e791      	b.n	8008fc6 <_strerror_r+0x132>
 80090a2:	4b55      	ldr	r3, [pc, #340]	; (80091f8 <_strerror_r+0x364>)
 80090a4:	e78f      	b.n	8008fc6 <_strerror_r+0x132>
 80090a6:	4b55      	ldr	r3, [pc, #340]	; (80091fc <_strerror_r+0x368>)
 80090a8:	e78d      	b.n	8008fc6 <_strerror_r+0x132>
 80090aa:	4b55      	ldr	r3, [pc, #340]	; (8009200 <_strerror_r+0x36c>)
 80090ac:	e78b      	b.n	8008fc6 <_strerror_r+0x132>
 80090ae:	4b55      	ldr	r3, [pc, #340]	; (8009204 <_strerror_r+0x370>)
 80090b0:	e789      	b.n	8008fc6 <_strerror_r+0x132>
 80090b2:	4b55      	ldr	r3, [pc, #340]	; (8009208 <_strerror_r+0x374>)
 80090b4:	e787      	b.n	8008fc6 <_strerror_r+0x132>
 80090b6:	4b55      	ldr	r3, [pc, #340]	; (800920c <_strerror_r+0x378>)
 80090b8:	e785      	b.n	8008fc6 <_strerror_r+0x132>
 80090ba:	4b55      	ldr	r3, [pc, #340]	; (8009210 <_strerror_r+0x37c>)
 80090bc:	e783      	b.n	8008fc6 <_strerror_r+0x132>
 80090be:	4b55      	ldr	r3, [pc, #340]	; (8009214 <_strerror_r+0x380>)
 80090c0:	e781      	b.n	8008fc6 <_strerror_r+0x132>
 80090c2:	4b55      	ldr	r3, [pc, #340]	; (8009218 <_strerror_r+0x384>)
 80090c4:	e77f      	b.n	8008fc6 <_strerror_r+0x132>
 80090c6:	4b55      	ldr	r3, [pc, #340]	; (800921c <_strerror_r+0x388>)
 80090c8:	e77d      	b.n	8008fc6 <_strerror_r+0x132>
 80090ca:	4b55      	ldr	r3, [pc, #340]	; (8009220 <_strerror_r+0x38c>)
 80090cc:	e77b      	b.n	8008fc6 <_strerror_r+0x132>
 80090ce:	4b55      	ldr	r3, [pc, #340]	; (8009224 <_strerror_r+0x390>)
 80090d0:	e779      	b.n	8008fc6 <_strerror_r+0x132>
 80090d2:	4b55      	ldr	r3, [pc, #340]	; (8009228 <_strerror_r+0x394>)
 80090d4:	e777      	b.n	8008fc6 <_strerror_r+0x132>
 80090d6:	4b55      	ldr	r3, [pc, #340]	; (800922c <_strerror_r+0x398>)
 80090d8:	e775      	b.n	8008fc6 <_strerror_r+0x132>
 80090da:	4b55      	ldr	r3, [pc, #340]	; (8009230 <_strerror_r+0x39c>)
 80090dc:	e773      	b.n	8008fc6 <_strerror_r+0x132>
 80090de:	4b55      	ldr	r3, [pc, #340]	; (8009234 <_strerror_r+0x3a0>)
 80090e0:	e771      	b.n	8008fc6 <_strerror_r+0x132>
 80090e2:	4b55      	ldr	r3, [pc, #340]	; (8009238 <_strerror_r+0x3a4>)
 80090e4:	e76f      	b.n	8008fc6 <_strerror_r+0x132>
 80090e6:	4b55      	ldr	r3, [pc, #340]	; (800923c <_strerror_r+0x3a8>)
 80090e8:	e76d      	b.n	8008fc6 <_strerror_r+0x132>
 80090ea:	4b55      	ldr	r3, [pc, #340]	; (8009240 <_strerror_r+0x3ac>)
 80090ec:	e76b      	b.n	8008fc6 <_strerror_r+0x132>
 80090ee:	4b55      	ldr	r3, [pc, #340]	; (8009244 <_strerror_r+0x3b0>)
 80090f0:	e769      	b.n	8008fc6 <_strerror_r+0x132>
 80090f2:	4b55      	ldr	r3, [pc, #340]	; (8009248 <_strerror_r+0x3b4>)
 80090f4:	e767      	b.n	8008fc6 <_strerror_r+0x132>
 80090f6:	4b55      	ldr	r3, [pc, #340]	; (800924c <_strerror_r+0x3b8>)
 80090f8:	e765      	b.n	8008fc6 <_strerror_r+0x132>
 80090fa:	4b55      	ldr	r3, [pc, #340]	; (8009250 <_strerror_r+0x3bc>)
 80090fc:	e763      	b.n	8008fc6 <_strerror_r+0x132>
 80090fe:	4b55      	ldr	r3, [pc, #340]	; (8009254 <_strerror_r+0x3c0>)
 8009100:	e761      	b.n	8008fc6 <_strerror_r+0x132>
 8009102:	2b00      	cmp	r3, #0
 8009104:	bf14      	ite	ne
 8009106:	461a      	movne	r2, r3
 8009108:	4622      	moveq	r2, r4
 800910a:	f000 ff55 	bl	8009fb8 <_user_strerror>
 800910e:	4b52      	ldr	r3, [pc, #328]	; (8009258 <_strerror_r+0x3c4>)
 8009110:	2800      	cmp	r0, #0
 8009112:	bf18      	it	ne
 8009114:	4603      	movne	r3, r0
 8009116:	e756      	b.n	8008fc6 <_strerror_r+0x132>
 8009118:	4b50      	ldr	r3, [pc, #320]	; (800925c <_strerror_r+0x3c8>)
 800911a:	e754      	b.n	8008fc6 <_strerror_r+0x132>
 800911c:	0800d52b 	.word	0x0800d52b
 8009120:	0800d535 	.word	0x0800d535
 8009124:	0800d54f 	.word	0x0800d54f
 8009128:	0800d55f 	.word	0x0800d55f
 800912c:	0800d577 	.word	0x0800d577
 8009130:	0800d581 	.word	0x0800d581
 8009134:	0800d59b 	.word	0x0800d59b
 8009138:	0800d5ad 	.word	0x0800d5ad
 800913c:	0800d5bf 	.word	0x0800d5bf
 8009140:	0800d5d8 	.word	0x0800d5d8
 8009144:	0800d5e8 	.word	0x0800d5e8
 8009148:	0800d5f4 	.word	0x0800d5f4
 800914c:	0800d611 	.word	0x0800d611
 8009150:	0800d623 	.word	0x0800d623
 8009154:	0800d634 	.word	0x0800d634
 8009158:	0800d646 	.word	0x0800d646
 800915c:	0800d652 	.word	0x0800d652
 8009160:	0800d66a 	.word	0x0800d66a
 8009164:	0800d676 	.word	0x0800d676
 8009168:	0800d688 	.word	0x0800d688
 800916c:	0800d697 	.word	0x0800d697
 8009170:	0800d6a7 	.word	0x0800d6a7
 8009174:	0800d6b4 	.word	0x0800d6b4
 8009178:	0800d6d3 	.word	0x0800d6d3
 800917c:	0800d6e2 	.word	0x0800d6e2
 8009180:	0800d6f3 	.word	0x0800d6f3
 8009184:	0800d717 	.word	0x0800d717
 8009188:	0800d735 	.word	0x0800d735
 800918c:	0800d753 	.word	0x0800d753
 8009190:	0800d773 	.word	0x0800d773
 8009194:	0800d78a 	.word	0x0800d78a
 8009198:	0800d799 	.word	0x0800d799
 800919c:	0800d7a8 	.word	0x0800d7a8
 80091a0:	0800d7bc 	.word	0x0800d7bc
 80091a4:	0800d7d4 	.word	0x0800d7d4
 80091a8:	0800d7e2 	.word	0x0800d7e2
 80091ac:	0800d7ef 	.word	0x0800d7ef
 80091b0:	0800d805 	.word	0x0800d805
 80091b4:	0800d814 	.word	0x0800d814
 80091b8:	0800d820 	.word	0x0800d820
 80091bc:	0800d84f 	.word	0x0800d84f
 80091c0:	0800d860 	.word	0x0800d860
 80091c4:	0800d87b 	.word	0x0800d87b
 80091c8:	0800d88e 	.word	0x0800d88e
 80091cc:	0800d8a4 	.word	0x0800d8a4
 80091d0:	0800d8ad 	.word	0x0800d8ad
 80091d4:	0800d8c4 	.word	0x0800d8c4
 80091d8:	0800d8cc 	.word	0x0800d8cc
 80091dc:	0800d8d9 	.word	0x0800d8d9
 80091e0:	0800d8ee 	.word	0x0800d8ee
 80091e4:	0800d902 	.word	0x0800d902
 80091e8:	0800d91a 	.word	0x0800d91a
 80091ec:	0800d929 	.word	0x0800d929
 80091f0:	0800d93a 	.word	0x0800d93a
 80091f4:	0800d94d 	.word	0x0800d94d
 80091f8:	0800d959 	.word	0x0800d959
 80091fc:	0800d972 	.word	0x0800d972
 8009200:	0800d986 	.word	0x0800d986
 8009204:	0800d9a1 	.word	0x0800d9a1
 8009208:	0800d9b9 	.word	0x0800d9b9
 800920c:	0800d9d3 	.word	0x0800d9d3
 8009210:	0800d9db 	.word	0x0800d9db
 8009214:	0800da0b 	.word	0x0800da0b
 8009218:	0800da2a 	.word	0x0800da2a
 800921c:	0800da49 	.word	0x0800da49
 8009220:	0800da60 	.word	0x0800da60
 8009224:	0800da73 	.word	0x0800da73
 8009228:	0800da8c 	.word	0x0800da8c
 800922c:	0800daa3 	.word	0x0800daa3
 8009230:	0800dab9 	.word	0x0800dab9
 8009234:	0800dada 	.word	0x0800dada
 8009238:	0800daf2 	.word	0x0800daf2
 800923c:	0800db0e 	.word	0x0800db0e
 8009240:	0800db21 	.word	0x0800db21
 8009244:	0800db37 	.word	0x0800db37
 8009248:	0800db4b 	.word	0x0800db4b
 800924c:	0800db6d 	.word	0x0800db6d
 8009250:	0800db93 	.word	0x0800db93
 8009254:	0800dba4 	.word	0x0800dba4
 8009258:	0800e04b 	.word	0x0800e04b
 800925c:	0800dbb9 	.word	0x0800dbb9

08009260 <sulp>:
 8009260:	b570      	push	{r4, r5, r6, lr}
 8009262:	4604      	mov	r4, r0
 8009264:	460d      	mov	r5, r1
 8009266:	ec45 4b10 	vmov	d0, r4, r5
 800926a:	4616      	mov	r6, r2
 800926c:	f002 fe7e 	bl	800bf6c <__ulp>
 8009270:	ec51 0b10 	vmov	r0, r1, d0
 8009274:	b17e      	cbz	r6, 8009296 <sulp+0x36>
 8009276:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800927a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800927e:	2b00      	cmp	r3, #0
 8009280:	dd09      	ble.n	8009296 <sulp+0x36>
 8009282:	051b      	lsls	r3, r3, #20
 8009284:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009288:	2400      	movs	r4, #0
 800928a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800928e:	4622      	mov	r2, r4
 8009290:	462b      	mov	r3, r5
 8009292:	f7f7 f9b1 	bl	80005f8 <__aeabi_dmul>
 8009296:	bd70      	pop	{r4, r5, r6, pc}

08009298 <_strtod_l>:
 8009298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929c:	ed2d 8b02 	vpush	{d8}
 80092a0:	b09d      	sub	sp, #116	; 0x74
 80092a2:	461f      	mov	r7, r3
 80092a4:	2300      	movs	r3, #0
 80092a6:	9318      	str	r3, [sp, #96]	; 0x60
 80092a8:	4ba2      	ldr	r3, [pc, #648]	; (8009534 <_strtod_l+0x29c>)
 80092aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	9305      	str	r3, [sp, #20]
 80092b0:	4604      	mov	r4, r0
 80092b2:	4618      	mov	r0, r3
 80092b4:	4688      	mov	r8, r1
 80092b6:	f7f6 ff8b 	bl	80001d0 <strlen>
 80092ba:	f04f 0a00 	mov.w	sl, #0
 80092be:	4605      	mov	r5, r0
 80092c0:	f04f 0b00 	mov.w	fp, #0
 80092c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80092c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092ca:	781a      	ldrb	r2, [r3, #0]
 80092cc:	2a2b      	cmp	r2, #43	; 0x2b
 80092ce:	d04e      	beq.n	800936e <_strtod_l+0xd6>
 80092d0:	d83b      	bhi.n	800934a <_strtod_l+0xb2>
 80092d2:	2a0d      	cmp	r2, #13
 80092d4:	d834      	bhi.n	8009340 <_strtod_l+0xa8>
 80092d6:	2a08      	cmp	r2, #8
 80092d8:	d834      	bhi.n	8009344 <_strtod_l+0xac>
 80092da:	2a00      	cmp	r2, #0
 80092dc:	d03e      	beq.n	800935c <_strtod_l+0xc4>
 80092de:	2300      	movs	r3, #0
 80092e0:	930a      	str	r3, [sp, #40]	; 0x28
 80092e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80092e4:	7833      	ldrb	r3, [r6, #0]
 80092e6:	2b30      	cmp	r3, #48	; 0x30
 80092e8:	f040 80b0 	bne.w	800944c <_strtod_l+0x1b4>
 80092ec:	7873      	ldrb	r3, [r6, #1]
 80092ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092f2:	2b58      	cmp	r3, #88	; 0x58
 80092f4:	d168      	bne.n	80093c8 <_strtod_l+0x130>
 80092f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f8:	9301      	str	r3, [sp, #4]
 80092fa:	ab18      	add	r3, sp, #96	; 0x60
 80092fc:	9702      	str	r7, [sp, #8]
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	4a8d      	ldr	r2, [pc, #564]	; (8009538 <_strtod_l+0x2a0>)
 8009302:	ab19      	add	r3, sp, #100	; 0x64
 8009304:	a917      	add	r1, sp, #92	; 0x5c
 8009306:	4620      	mov	r0, r4
 8009308:	f001 ff70 	bl	800b1ec <__gethex>
 800930c:	f010 0707 	ands.w	r7, r0, #7
 8009310:	4605      	mov	r5, r0
 8009312:	d005      	beq.n	8009320 <_strtod_l+0x88>
 8009314:	2f06      	cmp	r7, #6
 8009316:	d12c      	bne.n	8009372 <_strtod_l+0xda>
 8009318:	3601      	adds	r6, #1
 800931a:	2300      	movs	r3, #0
 800931c:	9617      	str	r6, [sp, #92]	; 0x5c
 800931e:	930a      	str	r3, [sp, #40]	; 0x28
 8009320:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009322:	2b00      	cmp	r3, #0
 8009324:	f040 8590 	bne.w	8009e48 <_strtod_l+0xbb0>
 8009328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800932a:	b1eb      	cbz	r3, 8009368 <_strtod_l+0xd0>
 800932c:	4652      	mov	r2, sl
 800932e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009332:	ec43 2b10 	vmov	d0, r2, r3
 8009336:	b01d      	add	sp, #116	; 0x74
 8009338:	ecbd 8b02 	vpop	{d8}
 800933c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009340:	2a20      	cmp	r2, #32
 8009342:	d1cc      	bne.n	80092de <_strtod_l+0x46>
 8009344:	3301      	adds	r3, #1
 8009346:	9317      	str	r3, [sp, #92]	; 0x5c
 8009348:	e7be      	b.n	80092c8 <_strtod_l+0x30>
 800934a:	2a2d      	cmp	r2, #45	; 0x2d
 800934c:	d1c7      	bne.n	80092de <_strtod_l+0x46>
 800934e:	2201      	movs	r2, #1
 8009350:	920a      	str	r2, [sp, #40]	; 0x28
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	9217      	str	r2, [sp, #92]	; 0x5c
 8009356:	785b      	ldrb	r3, [r3, #1]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1c2      	bne.n	80092e2 <_strtod_l+0x4a>
 800935c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800935e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009362:	2b00      	cmp	r3, #0
 8009364:	f040 856e 	bne.w	8009e44 <_strtod_l+0xbac>
 8009368:	4652      	mov	r2, sl
 800936a:	465b      	mov	r3, fp
 800936c:	e7e1      	b.n	8009332 <_strtod_l+0x9a>
 800936e:	2200      	movs	r2, #0
 8009370:	e7ee      	b.n	8009350 <_strtod_l+0xb8>
 8009372:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009374:	b13a      	cbz	r2, 8009386 <_strtod_l+0xee>
 8009376:	2135      	movs	r1, #53	; 0x35
 8009378:	a81a      	add	r0, sp, #104	; 0x68
 800937a:	f002 ff02 	bl	800c182 <__copybits>
 800937e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009380:	4620      	mov	r0, r4
 8009382:	f002 fac1 	bl	800b908 <_Bfree>
 8009386:	3f01      	subs	r7, #1
 8009388:	2f04      	cmp	r7, #4
 800938a:	d806      	bhi.n	800939a <_strtod_l+0x102>
 800938c:	e8df f007 	tbb	[pc, r7]
 8009390:	1714030a 	.word	0x1714030a
 8009394:	0a          	.byte	0x0a
 8009395:	00          	.byte	0x00
 8009396:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800939a:	0728      	lsls	r0, r5, #28
 800939c:	d5c0      	bpl.n	8009320 <_strtod_l+0x88>
 800939e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80093a2:	e7bd      	b.n	8009320 <_strtod_l+0x88>
 80093a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80093a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80093aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80093ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80093b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80093b6:	e7f0      	b.n	800939a <_strtod_l+0x102>
 80093b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800953c <_strtod_l+0x2a4>
 80093bc:	e7ed      	b.n	800939a <_strtod_l+0x102>
 80093be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80093c2:	f04f 3aff 	mov.w	sl, #4294967295
 80093c6:	e7e8      	b.n	800939a <_strtod_l+0x102>
 80093c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80093ce:	785b      	ldrb	r3, [r3, #1]
 80093d0:	2b30      	cmp	r3, #48	; 0x30
 80093d2:	d0f9      	beq.n	80093c8 <_strtod_l+0x130>
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0a3      	beq.n	8009320 <_strtod_l+0x88>
 80093d8:	2301      	movs	r3, #1
 80093da:	f04f 0900 	mov.w	r9, #0
 80093de:	9304      	str	r3, [sp, #16]
 80093e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093e2:	9308      	str	r3, [sp, #32]
 80093e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80093e8:	464f      	mov	r7, r9
 80093ea:	220a      	movs	r2, #10
 80093ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80093ee:	7806      	ldrb	r6, [r0, #0]
 80093f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80093f4:	b2d9      	uxtb	r1, r3
 80093f6:	2909      	cmp	r1, #9
 80093f8:	d92a      	bls.n	8009450 <_strtod_l+0x1b8>
 80093fa:	9905      	ldr	r1, [sp, #20]
 80093fc:	462a      	mov	r2, r5
 80093fe:	f003 fbeb 	bl	800cbd8 <strncmp>
 8009402:	b398      	cbz	r0, 800946c <_strtod_l+0x1d4>
 8009404:	2000      	movs	r0, #0
 8009406:	4632      	mov	r2, r6
 8009408:	463d      	mov	r5, r7
 800940a:	9005      	str	r0, [sp, #20]
 800940c:	4603      	mov	r3, r0
 800940e:	2a65      	cmp	r2, #101	; 0x65
 8009410:	d001      	beq.n	8009416 <_strtod_l+0x17e>
 8009412:	2a45      	cmp	r2, #69	; 0x45
 8009414:	d118      	bne.n	8009448 <_strtod_l+0x1b0>
 8009416:	b91d      	cbnz	r5, 8009420 <_strtod_l+0x188>
 8009418:	9a04      	ldr	r2, [sp, #16]
 800941a:	4302      	orrs	r2, r0
 800941c:	d09e      	beq.n	800935c <_strtod_l+0xc4>
 800941e:	2500      	movs	r5, #0
 8009420:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009424:	f108 0201 	add.w	r2, r8, #1
 8009428:	9217      	str	r2, [sp, #92]	; 0x5c
 800942a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800942e:	2a2b      	cmp	r2, #43	; 0x2b
 8009430:	d075      	beq.n	800951e <_strtod_l+0x286>
 8009432:	2a2d      	cmp	r2, #45	; 0x2d
 8009434:	d07b      	beq.n	800952e <_strtod_l+0x296>
 8009436:	f04f 0c00 	mov.w	ip, #0
 800943a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800943e:	2909      	cmp	r1, #9
 8009440:	f240 8082 	bls.w	8009548 <_strtod_l+0x2b0>
 8009444:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009448:	2600      	movs	r6, #0
 800944a:	e09d      	b.n	8009588 <_strtod_l+0x2f0>
 800944c:	2300      	movs	r3, #0
 800944e:	e7c4      	b.n	80093da <_strtod_l+0x142>
 8009450:	2f08      	cmp	r7, #8
 8009452:	bfd8      	it	le
 8009454:	9907      	ldrle	r1, [sp, #28]
 8009456:	f100 0001 	add.w	r0, r0, #1
 800945a:	bfda      	itte	le
 800945c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009460:	9307      	strle	r3, [sp, #28]
 8009462:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009466:	3701      	adds	r7, #1
 8009468:	9017      	str	r0, [sp, #92]	; 0x5c
 800946a:	e7bf      	b.n	80093ec <_strtod_l+0x154>
 800946c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800946e:	195a      	adds	r2, r3, r5
 8009470:	9217      	str	r2, [sp, #92]	; 0x5c
 8009472:	5d5a      	ldrb	r2, [r3, r5]
 8009474:	2f00      	cmp	r7, #0
 8009476:	d037      	beq.n	80094e8 <_strtod_l+0x250>
 8009478:	9005      	str	r0, [sp, #20]
 800947a:	463d      	mov	r5, r7
 800947c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009480:	2b09      	cmp	r3, #9
 8009482:	d912      	bls.n	80094aa <_strtod_l+0x212>
 8009484:	2301      	movs	r3, #1
 8009486:	e7c2      	b.n	800940e <_strtod_l+0x176>
 8009488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	9217      	str	r2, [sp, #92]	; 0x5c
 800948e:	785a      	ldrb	r2, [r3, #1]
 8009490:	3001      	adds	r0, #1
 8009492:	2a30      	cmp	r2, #48	; 0x30
 8009494:	d0f8      	beq.n	8009488 <_strtod_l+0x1f0>
 8009496:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800949a:	2b08      	cmp	r3, #8
 800949c:	f200 84d9 	bhi.w	8009e52 <_strtod_l+0xbba>
 80094a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094a2:	9005      	str	r0, [sp, #20]
 80094a4:	2000      	movs	r0, #0
 80094a6:	9308      	str	r3, [sp, #32]
 80094a8:	4605      	mov	r5, r0
 80094aa:	3a30      	subs	r2, #48	; 0x30
 80094ac:	f100 0301 	add.w	r3, r0, #1
 80094b0:	d014      	beq.n	80094dc <_strtod_l+0x244>
 80094b2:	9905      	ldr	r1, [sp, #20]
 80094b4:	4419      	add	r1, r3
 80094b6:	9105      	str	r1, [sp, #20]
 80094b8:	462b      	mov	r3, r5
 80094ba:	eb00 0e05 	add.w	lr, r0, r5
 80094be:	210a      	movs	r1, #10
 80094c0:	4573      	cmp	r3, lr
 80094c2:	d113      	bne.n	80094ec <_strtod_l+0x254>
 80094c4:	182b      	adds	r3, r5, r0
 80094c6:	2b08      	cmp	r3, #8
 80094c8:	f105 0501 	add.w	r5, r5, #1
 80094cc:	4405      	add	r5, r0
 80094ce:	dc1c      	bgt.n	800950a <_strtod_l+0x272>
 80094d0:	9907      	ldr	r1, [sp, #28]
 80094d2:	230a      	movs	r3, #10
 80094d4:	fb03 2301 	mla	r3, r3, r1, r2
 80094d8:	9307      	str	r3, [sp, #28]
 80094da:	2300      	movs	r3, #0
 80094dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094de:	1c51      	adds	r1, r2, #1
 80094e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80094e2:	7852      	ldrb	r2, [r2, #1]
 80094e4:	4618      	mov	r0, r3
 80094e6:	e7c9      	b.n	800947c <_strtod_l+0x1e4>
 80094e8:	4638      	mov	r0, r7
 80094ea:	e7d2      	b.n	8009492 <_strtod_l+0x1fa>
 80094ec:	2b08      	cmp	r3, #8
 80094ee:	dc04      	bgt.n	80094fa <_strtod_l+0x262>
 80094f0:	9e07      	ldr	r6, [sp, #28]
 80094f2:	434e      	muls	r6, r1
 80094f4:	9607      	str	r6, [sp, #28]
 80094f6:	3301      	adds	r3, #1
 80094f8:	e7e2      	b.n	80094c0 <_strtod_l+0x228>
 80094fa:	f103 0c01 	add.w	ip, r3, #1
 80094fe:	f1bc 0f10 	cmp.w	ip, #16
 8009502:	bfd8      	it	le
 8009504:	fb01 f909 	mulle.w	r9, r1, r9
 8009508:	e7f5      	b.n	80094f6 <_strtod_l+0x25e>
 800950a:	2d10      	cmp	r5, #16
 800950c:	bfdc      	itt	le
 800950e:	230a      	movle	r3, #10
 8009510:	fb03 2909 	mlale	r9, r3, r9, r2
 8009514:	e7e1      	b.n	80094da <_strtod_l+0x242>
 8009516:	2300      	movs	r3, #0
 8009518:	9305      	str	r3, [sp, #20]
 800951a:	2301      	movs	r3, #1
 800951c:	e77c      	b.n	8009418 <_strtod_l+0x180>
 800951e:	f04f 0c00 	mov.w	ip, #0
 8009522:	f108 0202 	add.w	r2, r8, #2
 8009526:	9217      	str	r2, [sp, #92]	; 0x5c
 8009528:	f898 2002 	ldrb.w	r2, [r8, #2]
 800952c:	e785      	b.n	800943a <_strtod_l+0x1a2>
 800952e:	f04f 0c01 	mov.w	ip, #1
 8009532:	e7f6      	b.n	8009522 <_strtod_l+0x28a>
 8009534:	0800de74 	.word	0x0800de74
 8009538:	0800dbc4 	.word	0x0800dbc4
 800953c:	7ff00000 	.word	0x7ff00000
 8009540:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009542:	1c51      	adds	r1, r2, #1
 8009544:	9117      	str	r1, [sp, #92]	; 0x5c
 8009546:	7852      	ldrb	r2, [r2, #1]
 8009548:	2a30      	cmp	r2, #48	; 0x30
 800954a:	d0f9      	beq.n	8009540 <_strtod_l+0x2a8>
 800954c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009550:	2908      	cmp	r1, #8
 8009552:	f63f af79 	bhi.w	8009448 <_strtod_l+0x1b0>
 8009556:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800955a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800955c:	9206      	str	r2, [sp, #24]
 800955e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009560:	1c51      	adds	r1, r2, #1
 8009562:	9117      	str	r1, [sp, #92]	; 0x5c
 8009564:	7852      	ldrb	r2, [r2, #1]
 8009566:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800956a:	2e09      	cmp	r6, #9
 800956c:	d937      	bls.n	80095de <_strtod_l+0x346>
 800956e:	9e06      	ldr	r6, [sp, #24]
 8009570:	1b89      	subs	r1, r1, r6
 8009572:	2908      	cmp	r1, #8
 8009574:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009578:	dc02      	bgt.n	8009580 <_strtod_l+0x2e8>
 800957a:	4576      	cmp	r6, lr
 800957c:	bfa8      	it	ge
 800957e:	4676      	movge	r6, lr
 8009580:	f1bc 0f00 	cmp.w	ip, #0
 8009584:	d000      	beq.n	8009588 <_strtod_l+0x2f0>
 8009586:	4276      	negs	r6, r6
 8009588:	2d00      	cmp	r5, #0
 800958a:	d14d      	bne.n	8009628 <_strtod_l+0x390>
 800958c:	9904      	ldr	r1, [sp, #16]
 800958e:	4301      	orrs	r1, r0
 8009590:	f47f aec6 	bne.w	8009320 <_strtod_l+0x88>
 8009594:	2b00      	cmp	r3, #0
 8009596:	f47f aee1 	bne.w	800935c <_strtod_l+0xc4>
 800959a:	2a69      	cmp	r2, #105	; 0x69
 800959c:	d027      	beq.n	80095ee <_strtod_l+0x356>
 800959e:	dc24      	bgt.n	80095ea <_strtod_l+0x352>
 80095a0:	2a49      	cmp	r2, #73	; 0x49
 80095a2:	d024      	beq.n	80095ee <_strtod_l+0x356>
 80095a4:	2a4e      	cmp	r2, #78	; 0x4e
 80095a6:	f47f aed9 	bne.w	800935c <_strtod_l+0xc4>
 80095aa:	499f      	ldr	r1, [pc, #636]	; (8009828 <_strtod_l+0x590>)
 80095ac:	a817      	add	r0, sp, #92	; 0x5c
 80095ae:	f002 f875 	bl	800b69c <__match>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	f43f aed2 	beq.w	800935c <_strtod_l+0xc4>
 80095b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	2b28      	cmp	r3, #40	; 0x28
 80095be:	d12d      	bne.n	800961c <_strtod_l+0x384>
 80095c0:	499a      	ldr	r1, [pc, #616]	; (800982c <_strtod_l+0x594>)
 80095c2:	aa1a      	add	r2, sp, #104	; 0x68
 80095c4:	a817      	add	r0, sp, #92	; 0x5c
 80095c6:	f002 f87d 	bl	800b6c4 <__hexnan>
 80095ca:	2805      	cmp	r0, #5
 80095cc:	d126      	bne.n	800961c <_strtod_l+0x384>
 80095ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80095d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80095d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80095dc:	e6a0      	b.n	8009320 <_strtod_l+0x88>
 80095de:	210a      	movs	r1, #10
 80095e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80095e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80095e8:	e7b9      	b.n	800955e <_strtod_l+0x2c6>
 80095ea:	2a6e      	cmp	r2, #110	; 0x6e
 80095ec:	e7db      	b.n	80095a6 <_strtod_l+0x30e>
 80095ee:	4990      	ldr	r1, [pc, #576]	; (8009830 <_strtod_l+0x598>)
 80095f0:	a817      	add	r0, sp, #92	; 0x5c
 80095f2:	f002 f853 	bl	800b69c <__match>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	f43f aeb0 	beq.w	800935c <_strtod_l+0xc4>
 80095fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095fe:	498d      	ldr	r1, [pc, #564]	; (8009834 <_strtod_l+0x59c>)
 8009600:	3b01      	subs	r3, #1
 8009602:	a817      	add	r0, sp, #92	; 0x5c
 8009604:	9317      	str	r3, [sp, #92]	; 0x5c
 8009606:	f002 f849 	bl	800b69c <__match>
 800960a:	b910      	cbnz	r0, 8009612 <_strtod_l+0x37a>
 800960c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800960e:	3301      	adds	r3, #1
 8009610:	9317      	str	r3, [sp, #92]	; 0x5c
 8009612:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009844 <_strtod_l+0x5ac>
 8009616:	f04f 0a00 	mov.w	sl, #0
 800961a:	e681      	b.n	8009320 <_strtod_l+0x88>
 800961c:	4886      	ldr	r0, [pc, #536]	; (8009838 <_strtod_l+0x5a0>)
 800961e:	f003 fa9b 	bl	800cb58 <nan>
 8009622:	ec5b ab10 	vmov	sl, fp, d0
 8009626:	e67b      	b.n	8009320 <_strtod_l+0x88>
 8009628:	9b05      	ldr	r3, [sp, #20]
 800962a:	9807      	ldr	r0, [sp, #28]
 800962c:	1af3      	subs	r3, r6, r3
 800962e:	2f00      	cmp	r7, #0
 8009630:	bf08      	it	eq
 8009632:	462f      	moveq	r7, r5
 8009634:	2d10      	cmp	r5, #16
 8009636:	9306      	str	r3, [sp, #24]
 8009638:	46a8      	mov	r8, r5
 800963a:	bfa8      	it	ge
 800963c:	f04f 0810 	movge.w	r8, #16
 8009640:	f7f6 ff60 	bl	8000504 <__aeabi_ui2d>
 8009644:	2d09      	cmp	r5, #9
 8009646:	4682      	mov	sl, r0
 8009648:	468b      	mov	fp, r1
 800964a:	dd13      	ble.n	8009674 <_strtod_l+0x3dc>
 800964c:	4b7b      	ldr	r3, [pc, #492]	; (800983c <_strtod_l+0x5a4>)
 800964e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009652:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009656:	f7f6 ffcf 	bl	80005f8 <__aeabi_dmul>
 800965a:	4682      	mov	sl, r0
 800965c:	4648      	mov	r0, r9
 800965e:	468b      	mov	fp, r1
 8009660:	f7f6 ff50 	bl	8000504 <__aeabi_ui2d>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	4650      	mov	r0, sl
 800966a:	4659      	mov	r1, fp
 800966c:	f7f6 fe0e 	bl	800028c <__adddf3>
 8009670:	4682      	mov	sl, r0
 8009672:	468b      	mov	fp, r1
 8009674:	2d0f      	cmp	r5, #15
 8009676:	dc38      	bgt.n	80096ea <_strtod_l+0x452>
 8009678:	9b06      	ldr	r3, [sp, #24]
 800967a:	2b00      	cmp	r3, #0
 800967c:	f43f ae50 	beq.w	8009320 <_strtod_l+0x88>
 8009680:	dd24      	ble.n	80096cc <_strtod_l+0x434>
 8009682:	2b16      	cmp	r3, #22
 8009684:	dc0b      	bgt.n	800969e <_strtod_l+0x406>
 8009686:	496d      	ldr	r1, [pc, #436]	; (800983c <_strtod_l+0x5a4>)
 8009688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800968c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009690:	4652      	mov	r2, sl
 8009692:	465b      	mov	r3, fp
 8009694:	f7f6 ffb0 	bl	80005f8 <__aeabi_dmul>
 8009698:	4682      	mov	sl, r0
 800969a:	468b      	mov	fp, r1
 800969c:	e640      	b.n	8009320 <_strtod_l+0x88>
 800969e:	9a06      	ldr	r2, [sp, #24]
 80096a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80096a4:	4293      	cmp	r3, r2
 80096a6:	db20      	blt.n	80096ea <_strtod_l+0x452>
 80096a8:	4c64      	ldr	r4, [pc, #400]	; (800983c <_strtod_l+0x5a4>)
 80096aa:	f1c5 050f 	rsb	r5, r5, #15
 80096ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80096b2:	4652      	mov	r2, sl
 80096b4:	465b      	mov	r3, fp
 80096b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096ba:	f7f6 ff9d 	bl	80005f8 <__aeabi_dmul>
 80096be:	9b06      	ldr	r3, [sp, #24]
 80096c0:	1b5d      	subs	r5, r3, r5
 80096c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80096c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096ca:	e7e3      	b.n	8009694 <_strtod_l+0x3fc>
 80096cc:	9b06      	ldr	r3, [sp, #24]
 80096ce:	3316      	adds	r3, #22
 80096d0:	db0b      	blt.n	80096ea <_strtod_l+0x452>
 80096d2:	9b05      	ldr	r3, [sp, #20]
 80096d4:	1b9e      	subs	r6, r3, r6
 80096d6:	4b59      	ldr	r3, [pc, #356]	; (800983c <_strtod_l+0x5a4>)
 80096d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80096dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096e0:	4650      	mov	r0, sl
 80096e2:	4659      	mov	r1, fp
 80096e4:	f7f7 f8b2 	bl	800084c <__aeabi_ddiv>
 80096e8:	e7d6      	b.n	8009698 <_strtod_l+0x400>
 80096ea:	9b06      	ldr	r3, [sp, #24]
 80096ec:	eba5 0808 	sub.w	r8, r5, r8
 80096f0:	4498      	add	r8, r3
 80096f2:	f1b8 0f00 	cmp.w	r8, #0
 80096f6:	dd74      	ble.n	80097e2 <_strtod_l+0x54a>
 80096f8:	f018 030f 	ands.w	r3, r8, #15
 80096fc:	d00a      	beq.n	8009714 <_strtod_l+0x47c>
 80096fe:	494f      	ldr	r1, [pc, #316]	; (800983c <_strtod_l+0x5a4>)
 8009700:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009704:	4652      	mov	r2, sl
 8009706:	465b      	mov	r3, fp
 8009708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800970c:	f7f6 ff74 	bl	80005f8 <__aeabi_dmul>
 8009710:	4682      	mov	sl, r0
 8009712:	468b      	mov	fp, r1
 8009714:	f038 080f 	bics.w	r8, r8, #15
 8009718:	d04f      	beq.n	80097ba <_strtod_l+0x522>
 800971a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800971e:	dd22      	ble.n	8009766 <_strtod_l+0x4ce>
 8009720:	2500      	movs	r5, #0
 8009722:	462e      	mov	r6, r5
 8009724:	9507      	str	r5, [sp, #28]
 8009726:	9505      	str	r5, [sp, #20]
 8009728:	2322      	movs	r3, #34	; 0x22
 800972a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009844 <_strtod_l+0x5ac>
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	f04f 0a00 	mov.w	sl, #0
 8009734:	9b07      	ldr	r3, [sp, #28]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f43f adf2 	beq.w	8009320 <_strtod_l+0x88>
 800973c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800973e:	4620      	mov	r0, r4
 8009740:	f002 f8e2 	bl	800b908 <_Bfree>
 8009744:	9905      	ldr	r1, [sp, #20]
 8009746:	4620      	mov	r0, r4
 8009748:	f002 f8de 	bl	800b908 <_Bfree>
 800974c:	4631      	mov	r1, r6
 800974e:	4620      	mov	r0, r4
 8009750:	f002 f8da 	bl	800b908 <_Bfree>
 8009754:	9907      	ldr	r1, [sp, #28]
 8009756:	4620      	mov	r0, r4
 8009758:	f002 f8d6 	bl	800b908 <_Bfree>
 800975c:	4629      	mov	r1, r5
 800975e:	4620      	mov	r0, r4
 8009760:	f002 f8d2 	bl	800b908 <_Bfree>
 8009764:	e5dc      	b.n	8009320 <_strtod_l+0x88>
 8009766:	4b36      	ldr	r3, [pc, #216]	; (8009840 <_strtod_l+0x5a8>)
 8009768:	9304      	str	r3, [sp, #16]
 800976a:	2300      	movs	r3, #0
 800976c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009770:	4650      	mov	r0, sl
 8009772:	4659      	mov	r1, fp
 8009774:	4699      	mov	r9, r3
 8009776:	f1b8 0f01 	cmp.w	r8, #1
 800977a:	dc21      	bgt.n	80097c0 <_strtod_l+0x528>
 800977c:	b10b      	cbz	r3, 8009782 <_strtod_l+0x4ea>
 800977e:	4682      	mov	sl, r0
 8009780:	468b      	mov	fp, r1
 8009782:	4b2f      	ldr	r3, [pc, #188]	; (8009840 <_strtod_l+0x5a8>)
 8009784:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009788:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800978c:	4652      	mov	r2, sl
 800978e:	465b      	mov	r3, fp
 8009790:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009794:	f7f6 ff30 	bl	80005f8 <__aeabi_dmul>
 8009798:	4b2a      	ldr	r3, [pc, #168]	; (8009844 <_strtod_l+0x5ac>)
 800979a:	460a      	mov	r2, r1
 800979c:	400b      	ands	r3, r1
 800979e:	492a      	ldr	r1, [pc, #168]	; (8009848 <_strtod_l+0x5b0>)
 80097a0:	428b      	cmp	r3, r1
 80097a2:	4682      	mov	sl, r0
 80097a4:	d8bc      	bhi.n	8009720 <_strtod_l+0x488>
 80097a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80097aa:	428b      	cmp	r3, r1
 80097ac:	bf86      	itte	hi
 80097ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800984c <_strtod_l+0x5b4>
 80097b2:	f04f 3aff 	movhi.w	sl, #4294967295
 80097b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80097ba:	2300      	movs	r3, #0
 80097bc:	9304      	str	r3, [sp, #16]
 80097be:	e084      	b.n	80098ca <_strtod_l+0x632>
 80097c0:	f018 0f01 	tst.w	r8, #1
 80097c4:	d005      	beq.n	80097d2 <_strtod_l+0x53a>
 80097c6:	9b04      	ldr	r3, [sp, #16]
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	f7f6 ff14 	bl	80005f8 <__aeabi_dmul>
 80097d0:	2301      	movs	r3, #1
 80097d2:	9a04      	ldr	r2, [sp, #16]
 80097d4:	3208      	adds	r2, #8
 80097d6:	f109 0901 	add.w	r9, r9, #1
 80097da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80097de:	9204      	str	r2, [sp, #16]
 80097e0:	e7c9      	b.n	8009776 <_strtod_l+0x4de>
 80097e2:	d0ea      	beq.n	80097ba <_strtod_l+0x522>
 80097e4:	f1c8 0800 	rsb	r8, r8, #0
 80097e8:	f018 020f 	ands.w	r2, r8, #15
 80097ec:	d00a      	beq.n	8009804 <_strtod_l+0x56c>
 80097ee:	4b13      	ldr	r3, [pc, #76]	; (800983c <_strtod_l+0x5a4>)
 80097f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097f4:	4650      	mov	r0, sl
 80097f6:	4659      	mov	r1, fp
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	f7f7 f826 	bl	800084c <__aeabi_ddiv>
 8009800:	4682      	mov	sl, r0
 8009802:	468b      	mov	fp, r1
 8009804:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009808:	d0d7      	beq.n	80097ba <_strtod_l+0x522>
 800980a:	f1b8 0f1f 	cmp.w	r8, #31
 800980e:	dd1f      	ble.n	8009850 <_strtod_l+0x5b8>
 8009810:	2500      	movs	r5, #0
 8009812:	462e      	mov	r6, r5
 8009814:	9507      	str	r5, [sp, #28]
 8009816:	9505      	str	r5, [sp, #20]
 8009818:	2322      	movs	r3, #34	; 0x22
 800981a:	f04f 0a00 	mov.w	sl, #0
 800981e:	f04f 0b00 	mov.w	fp, #0
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	e786      	b.n	8009734 <_strtod_l+0x49c>
 8009826:	bf00      	nop
 8009828:	0800d501 	.word	0x0800d501
 800982c:	0800dbd8 	.word	0x0800dbd8
 8009830:	0800d4f9 	.word	0x0800d4f9
 8009834:	0800dd1c 	.word	0x0800dd1c
 8009838:	0800e04b 	.word	0x0800e04b
 800983c:	0800df10 	.word	0x0800df10
 8009840:	0800dee8 	.word	0x0800dee8
 8009844:	7ff00000 	.word	0x7ff00000
 8009848:	7ca00000 	.word	0x7ca00000
 800984c:	7fefffff 	.word	0x7fefffff
 8009850:	f018 0310 	ands.w	r3, r8, #16
 8009854:	bf18      	it	ne
 8009856:	236a      	movne	r3, #106	; 0x6a
 8009858:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009c08 <_strtod_l+0x970>
 800985c:	9304      	str	r3, [sp, #16]
 800985e:	4650      	mov	r0, sl
 8009860:	4659      	mov	r1, fp
 8009862:	2300      	movs	r3, #0
 8009864:	f018 0f01 	tst.w	r8, #1
 8009868:	d004      	beq.n	8009874 <_strtod_l+0x5dc>
 800986a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800986e:	f7f6 fec3 	bl	80005f8 <__aeabi_dmul>
 8009872:	2301      	movs	r3, #1
 8009874:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009878:	f109 0908 	add.w	r9, r9, #8
 800987c:	d1f2      	bne.n	8009864 <_strtod_l+0x5cc>
 800987e:	b10b      	cbz	r3, 8009884 <_strtod_l+0x5ec>
 8009880:	4682      	mov	sl, r0
 8009882:	468b      	mov	fp, r1
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	b1c3      	cbz	r3, 80098ba <_strtod_l+0x622>
 8009888:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800988c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009890:	2b00      	cmp	r3, #0
 8009892:	4659      	mov	r1, fp
 8009894:	dd11      	ble.n	80098ba <_strtod_l+0x622>
 8009896:	2b1f      	cmp	r3, #31
 8009898:	f340 8124 	ble.w	8009ae4 <_strtod_l+0x84c>
 800989c:	2b34      	cmp	r3, #52	; 0x34
 800989e:	bfde      	ittt	le
 80098a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80098a4:	f04f 33ff 	movle.w	r3, #4294967295
 80098a8:	fa03 f202 	lslle.w	r2, r3, r2
 80098ac:	f04f 0a00 	mov.w	sl, #0
 80098b0:	bfcc      	ite	gt
 80098b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80098b6:	ea02 0b01 	andle.w	fp, r2, r1
 80098ba:	2200      	movs	r2, #0
 80098bc:	2300      	movs	r3, #0
 80098be:	4650      	mov	r0, sl
 80098c0:	4659      	mov	r1, fp
 80098c2:	f7f7 f901 	bl	8000ac8 <__aeabi_dcmpeq>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d1a2      	bne.n	8009810 <_strtod_l+0x578>
 80098ca:	9b07      	ldr	r3, [sp, #28]
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	9908      	ldr	r1, [sp, #32]
 80098d0:	462b      	mov	r3, r5
 80098d2:	463a      	mov	r2, r7
 80098d4:	4620      	mov	r0, r4
 80098d6:	f002 f87f 	bl	800b9d8 <__s2b>
 80098da:	9007      	str	r0, [sp, #28]
 80098dc:	2800      	cmp	r0, #0
 80098de:	f43f af1f 	beq.w	8009720 <_strtod_l+0x488>
 80098e2:	9b05      	ldr	r3, [sp, #20]
 80098e4:	1b9e      	subs	r6, r3, r6
 80098e6:	9b06      	ldr	r3, [sp, #24]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	bfb4      	ite	lt
 80098ec:	4633      	movlt	r3, r6
 80098ee:	2300      	movge	r3, #0
 80098f0:	930c      	str	r3, [sp, #48]	; 0x30
 80098f2:	9b06      	ldr	r3, [sp, #24]
 80098f4:	2500      	movs	r5, #0
 80098f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80098fa:	9312      	str	r3, [sp, #72]	; 0x48
 80098fc:	462e      	mov	r6, r5
 80098fe:	9b07      	ldr	r3, [sp, #28]
 8009900:	4620      	mov	r0, r4
 8009902:	6859      	ldr	r1, [r3, #4]
 8009904:	f001 ffc0 	bl	800b888 <_Balloc>
 8009908:	9005      	str	r0, [sp, #20]
 800990a:	2800      	cmp	r0, #0
 800990c:	f43f af0c 	beq.w	8009728 <_strtod_l+0x490>
 8009910:	9b07      	ldr	r3, [sp, #28]
 8009912:	691a      	ldr	r2, [r3, #16]
 8009914:	3202      	adds	r2, #2
 8009916:	f103 010c 	add.w	r1, r3, #12
 800991a:	0092      	lsls	r2, r2, #2
 800991c:	300c      	adds	r0, #12
 800991e:	f001 ff99 	bl	800b854 <memcpy>
 8009922:	ec4b ab10 	vmov	d0, sl, fp
 8009926:	aa1a      	add	r2, sp, #104	; 0x68
 8009928:	a919      	add	r1, sp, #100	; 0x64
 800992a:	4620      	mov	r0, r4
 800992c:	f002 fb9a 	bl	800c064 <__d2b>
 8009930:	ec4b ab18 	vmov	d8, sl, fp
 8009934:	9018      	str	r0, [sp, #96]	; 0x60
 8009936:	2800      	cmp	r0, #0
 8009938:	f43f aef6 	beq.w	8009728 <_strtod_l+0x490>
 800993c:	2101      	movs	r1, #1
 800993e:	4620      	mov	r0, r4
 8009940:	f002 f8e4 	bl	800bb0c <__i2b>
 8009944:	4606      	mov	r6, r0
 8009946:	2800      	cmp	r0, #0
 8009948:	f43f aeee 	beq.w	8009728 <_strtod_l+0x490>
 800994c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800994e:	9904      	ldr	r1, [sp, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	bfab      	itete	ge
 8009954:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009956:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009958:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800995a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800995e:	bfac      	ite	ge
 8009960:	eb03 0902 	addge.w	r9, r3, r2
 8009964:	1ad7      	sublt	r7, r2, r3
 8009966:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009968:	eba3 0801 	sub.w	r8, r3, r1
 800996c:	4490      	add	r8, r2
 800996e:	4ba1      	ldr	r3, [pc, #644]	; (8009bf4 <_strtod_l+0x95c>)
 8009970:	f108 38ff 	add.w	r8, r8, #4294967295
 8009974:	4598      	cmp	r8, r3
 8009976:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800997a:	f280 80c7 	bge.w	8009b0c <_strtod_l+0x874>
 800997e:	eba3 0308 	sub.w	r3, r3, r8
 8009982:	2b1f      	cmp	r3, #31
 8009984:	eba2 0203 	sub.w	r2, r2, r3
 8009988:	f04f 0101 	mov.w	r1, #1
 800998c:	f300 80b1 	bgt.w	8009af2 <_strtod_l+0x85a>
 8009990:	fa01 f303 	lsl.w	r3, r1, r3
 8009994:	930d      	str	r3, [sp, #52]	; 0x34
 8009996:	2300      	movs	r3, #0
 8009998:	9308      	str	r3, [sp, #32]
 800999a:	eb09 0802 	add.w	r8, r9, r2
 800999e:	9b04      	ldr	r3, [sp, #16]
 80099a0:	45c1      	cmp	r9, r8
 80099a2:	4417      	add	r7, r2
 80099a4:	441f      	add	r7, r3
 80099a6:	464b      	mov	r3, r9
 80099a8:	bfa8      	it	ge
 80099aa:	4643      	movge	r3, r8
 80099ac:	42bb      	cmp	r3, r7
 80099ae:	bfa8      	it	ge
 80099b0:	463b      	movge	r3, r7
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	bfc2      	ittt	gt
 80099b6:	eba8 0803 	subgt.w	r8, r8, r3
 80099ba:	1aff      	subgt	r7, r7, r3
 80099bc:	eba9 0903 	subgt.w	r9, r9, r3
 80099c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	dd17      	ble.n	80099f6 <_strtod_l+0x75e>
 80099c6:	4631      	mov	r1, r6
 80099c8:	461a      	mov	r2, r3
 80099ca:	4620      	mov	r0, r4
 80099cc:	f002 f95e 	bl	800bc8c <__pow5mult>
 80099d0:	4606      	mov	r6, r0
 80099d2:	2800      	cmp	r0, #0
 80099d4:	f43f aea8 	beq.w	8009728 <_strtod_l+0x490>
 80099d8:	4601      	mov	r1, r0
 80099da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80099dc:	4620      	mov	r0, r4
 80099de:	f002 f8ab 	bl	800bb38 <__multiply>
 80099e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80099e4:	2800      	cmp	r0, #0
 80099e6:	f43f ae9f 	beq.w	8009728 <_strtod_l+0x490>
 80099ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099ec:	4620      	mov	r0, r4
 80099ee:	f001 ff8b 	bl	800b908 <_Bfree>
 80099f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099f4:	9318      	str	r3, [sp, #96]	; 0x60
 80099f6:	f1b8 0f00 	cmp.w	r8, #0
 80099fa:	f300 808c 	bgt.w	8009b16 <_strtod_l+0x87e>
 80099fe:	9b06      	ldr	r3, [sp, #24]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	dd08      	ble.n	8009a16 <_strtod_l+0x77e>
 8009a04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a06:	9905      	ldr	r1, [sp, #20]
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f002 f93f 	bl	800bc8c <__pow5mult>
 8009a0e:	9005      	str	r0, [sp, #20]
 8009a10:	2800      	cmp	r0, #0
 8009a12:	f43f ae89 	beq.w	8009728 <_strtod_l+0x490>
 8009a16:	2f00      	cmp	r7, #0
 8009a18:	dd08      	ble.n	8009a2c <_strtod_l+0x794>
 8009a1a:	9905      	ldr	r1, [sp, #20]
 8009a1c:	463a      	mov	r2, r7
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f002 f98e 	bl	800bd40 <__lshift>
 8009a24:	9005      	str	r0, [sp, #20]
 8009a26:	2800      	cmp	r0, #0
 8009a28:	f43f ae7e 	beq.w	8009728 <_strtod_l+0x490>
 8009a2c:	f1b9 0f00 	cmp.w	r9, #0
 8009a30:	dd08      	ble.n	8009a44 <_strtod_l+0x7ac>
 8009a32:	4631      	mov	r1, r6
 8009a34:	464a      	mov	r2, r9
 8009a36:	4620      	mov	r0, r4
 8009a38:	f002 f982 	bl	800bd40 <__lshift>
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f43f ae72 	beq.w	8009728 <_strtod_l+0x490>
 8009a44:	9a05      	ldr	r2, [sp, #20]
 8009a46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f002 fa05 	bl	800be58 <__mdiff>
 8009a4e:	4605      	mov	r5, r0
 8009a50:	2800      	cmp	r0, #0
 8009a52:	f43f ae69 	beq.w	8009728 <_strtod_l+0x490>
 8009a56:	68c3      	ldr	r3, [r0, #12]
 8009a58:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	60c3      	str	r3, [r0, #12]
 8009a5e:	4631      	mov	r1, r6
 8009a60:	f002 f9de 	bl	800be20 <__mcmp>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	da60      	bge.n	8009b2a <_strtod_l+0x892>
 8009a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a6a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a6e:	f040 8082 	bne.w	8009b76 <_strtod_l+0x8de>
 8009a72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d17d      	bne.n	8009b76 <_strtod_l+0x8de>
 8009a7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a7e:	0d1b      	lsrs	r3, r3, #20
 8009a80:	051b      	lsls	r3, r3, #20
 8009a82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a86:	d976      	bls.n	8009b76 <_strtod_l+0x8de>
 8009a88:	696b      	ldr	r3, [r5, #20]
 8009a8a:	b913      	cbnz	r3, 8009a92 <_strtod_l+0x7fa>
 8009a8c:	692b      	ldr	r3, [r5, #16]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	dd71      	ble.n	8009b76 <_strtod_l+0x8de>
 8009a92:	4629      	mov	r1, r5
 8009a94:	2201      	movs	r2, #1
 8009a96:	4620      	mov	r0, r4
 8009a98:	f002 f952 	bl	800bd40 <__lshift>
 8009a9c:	4631      	mov	r1, r6
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	f002 f9be 	bl	800be20 <__mcmp>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	dd66      	ble.n	8009b76 <_strtod_l+0x8de>
 8009aa8:	9904      	ldr	r1, [sp, #16]
 8009aaa:	4a53      	ldr	r2, [pc, #332]	; (8009bf8 <_strtod_l+0x960>)
 8009aac:	465b      	mov	r3, fp
 8009aae:	2900      	cmp	r1, #0
 8009ab0:	f000 8081 	beq.w	8009bb6 <_strtod_l+0x91e>
 8009ab4:	ea02 010b 	and.w	r1, r2, fp
 8009ab8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009abc:	dc7b      	bgt.n	8009bb6 <_strtod_l+0x91e>
 8009abe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009ac2:	f77f aea9 	ble.w	8009818 <_strtod_l+0x580>
 8009ac6:	4b4d      	ldr	r3, [pc, #308]	; (8009bfc <_strtod_l+0x964>)
 8009ac8:	4650      	mov	r0, sl
 8009aca:	4659      	mov	r1, fp
 8009acc:	2200      	movs	r2, #0
 8009ace:	f7f6 fd93 	bl	80005f8 <__aeabi_dmul>
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4303      	orrs	r3, r0
 8009ad6:	bf08      	it	eq
 8009ad8:	2322      	moveq	r3, #34	; 0x22
 8009ada:	4682      	mov	sl, r0
 8009adc:	468b      	mov	fp, r1
 8009ade:	bf08      	it	eq
 8009ae0:	6023      	streq	r3, [r4, #0]
 8009ae2:	e62b      	b.n	800973c <_strtod_l+0x4a4>
 8009ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aec:	ea03 0a0a 	and.w	sl, r3, sl
 8009af0:	e6e3      	b.n	80098ba <_strtod_l+0x622>
 8009af2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009af6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009afa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009afe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009b02:	fa01 f308 	lsl.w	r3, r1, r8
 8009b06:	9308      	str	r3, [sp, #32]
 8009b08:	910d      	str	r1, [sp, #52]	; 0x34
 8009b0a:	e746      	b.n	800999a <_strtod_l+0x702>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	9308      	str	r3, [sp, #32]
 8009b10:	2301      	movs	r3, #1
 8009b12:	930d      	str	r3, [sp, #52]	; 0x34
 8009b14:	e741      	b.n	800999a <_strtod_l+0x702>
 8009b16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b18:	4642      	mov	r2, r8
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f002 f910 	bl	800bd40 <__lshift>
 8009b20:	9018      	str	r0, [sp, #96]	; 0x60
 8009b22:	2800      	cmp	r0, #0
 8009b24:	f47f af6b 	bne.w	80099fe <_strtod_l+0x766>
 8009b28:	e5fe      	b.n	8009728 <_strtod_l+0x490>
 8009b2a:	465f      	mov	r7, fp
 8009b2c:	d16e      	bne.n	8009c0c <_strtod_l+0x974>
 8009b2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b34:	b342      	cbz	r2, 8009b88 <_strtod_l+0x8f0>
 8009b36:	4a32      	ldr	r2, [pc, #200]	; (8009c00 <_strtod_l+0x968>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d128      	bne.n	8009b8e <_strtod_l+0x8f6>
 8009b3c:	9b04      	ldr	r3, [sp, #16]
 8009b3e:	4651      	mov	r1, sl
 8009b40:	b1eb      	cbz	r3, 8009b7e <_strtod_l+0x8e6>
 8009b42:	4b2d      	ldr	r3, [pc, #180]	; (8009bf8 <_strtod_l+0x960>)
 8009b44:	403b      	ands	r3, r7
 8009b46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4e:	d819      	bhi.n	8009b84 <_strtod_l+0x8ec>
 8009b50:	0d1b      	lsrs	r3, r3, #20
 8009b52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b56:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5a:	4299      	cmp	r1, r3
 8009b5c:	d117      	bne.n	8009b8e <_strtod_l+0x8f6>
 8009b5e:	4b29      	ldr	r3, [pc, #164]	; (8009c04 <_strtod_l+0x96c>)
 8009b60:	429f      	cmp	r7, r3
 8009b62:	d102      	bne.n	8009b6a <_strtod_l+0x8d2>
 8009b64:	3101      	adds	r1, #1
 8009b66:	f43f addf 	beq.w	8009728 <_strtod_l+0x490>
 8009b6a:	4b23      	ldr	r3, [pc, #140]	; (8009bf8 <_strtod_l+0x960>)
 8009b6c:	403b      	ands	r3, r7
 8009b6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009b72:	f04f 0a00 	mov.w	sl, #0
 8009b76:	9b04      	ldr	r3, [sp, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1a4      	bne.n	8009ac6 <_strtod_l+0x82e>
 8009b7c:	e5de      	b.n	800973c <_strtod_l+0x4a4>
 8009b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b82:	e7ea      	b.n	8009b5a <_strtod_l+0x8c2>
 8009b84:	4613      	mov	r3, r2
 8009b86:	e7e8      	b.n	8009b5a <_strtod_l+0x8c2>
 8009b88:	ea53 030a 	orrs.w	r3, r3, sl
 8009b8c:	d08c      	beq.n	8009aa8 <_strtod_l+0x810>
 8009b8e:	9b08      	ldr	r3, [sp, #32]
 8009b90:	b1db      	cbz	r3, 8009bca <_strtod_l+0x932>
 8009b92:	423b      	tst	r3, r7
 8009b94:	d0ef      	beq.n	8009b76 <_strtod_l+0x8de>
 8009b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b98:	9a04      	ldr	r2, [sp, #16]
 8009b9a:	4650      	mov	r0, sl
 8009b9c:	4659      	mov	r1, fp
 8009b9e:	b1c3      	cbz	r3, 8009bd2 <_strtod_l+0x93a>
 8009ba0:	f7ff fb5e 	bl	8009260 <sulp>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	ec51 0b18 	vmov	r0, r1, d8
 8009bac:	f7f6 fb6e 	bl	800028c <__adddf3>
 8009bb0:	4682      	mov	sl, r0
 8009bb2:	468b      	mov	fp, r1
 8009bb4:	e7df      	b.n	8009b76 <_strtod_l+0x8de>
 8009bb6:	4013      	ands	r3, r2
 8009bb8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009bbc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009bc0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009bc4:	f04f 3aff 	mov.w	sl, #4294967295
 8009bc8:	e7d5      	b.n	8009b76 <_strtod_l+0x8de>
 8009bca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bcc:	ea13 0f0a 	tst.w	r3, sl
 8009bd0:	e7e0      	b.n	8009b94 <_strtod_l+0x8fc>
 8009bd2:	f7ff fb45 	bl	8009260 <sulp>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	460b      	mov	r3, r1
 8009bda:	ec51 0b18 	vmov	r0, r1, d8
 8009bde:	f7f6 fb53 	bl	8000288 <__aeabi_dsub>
 8009be2:	2200      	movs	r2, #0
 8009be4:	2300      	movs	r3, #0
 8009be6:	4682      	mov	sl, r0
 8009be8:	468b      	mov	fp, r1
 8009bea:	f7f6 ff6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d0c1      	beq.n	8009b76 <_strtod_l+0x8de>
 8009bf2:	e611      	b.n	8009818 <_strtod_l+0x580>
 8009bf4:	fffffc02 	.word	0xfffffc02
 8009bf8:	7ff00000 	.word	0x7ff00000
 8009bfc:	39500000 	.word	0x39500000
 8009c00:	000fffff 	.word	0x000fffff
 8009c04:	7fefffff 	.word	0x7fefffff
 8009c08:	0800dbf0 	.word	0x0800dbf0
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4628      	mov	r0, r5
 8009c10:	f002 fa84 	bl	800c11c <__ratio>
 8009c14:	ec59 8b10 	vmov	r8, r9, d0
 8009c18:	ee10 0a10 	vmov	r0, s0
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c22:	4649      	mov	r1, r9
 8009c24:	f7f6 ff64 	bl	8000af0 <__aeabi_dcmple>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d07a      	beq.n	8009d22 <_strtod_l+0xa8a>
 8009c2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d04a      	beq.n	8009cc8 <_strtod_l+0xa30>
 8009c32:	4b95      	ldr	r3, [pc, #596]	; (8009e88 <_strtod_l+0xbf0>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009e88 <_strtod_l+0xbf0>
 8009c3e:	f04f 0800 	mov.w	r8, #0
 8009c42:	4b92      	ldr	r3, [pc, #584]	; (8009e8c <_strtod_l+0xbf4>)
 8009c44:	403b      	ands	r3, r7
 8009c46:	930d      	str	r3, [sp, #52]	; 0x34
 8009c48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c4a:	4b91      	ldr	r3, [pc, #580]	; (8009e90 <_strtod_l+0xbf8>)
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	f040 80b0 	bne.w	8009db2 <_strtod_l+0xb1a>
 8009c52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c56:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009c5a:	ec4b ab10 	vmov	d0, sl, fp
 8009c5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c62:	f002 f983 	bl	800bf6c <__ulp>
 8009c66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c6a:	ec53 2b10 	vmov	r2, r3, d0
 8009c6e:	f7f6 fcc3 	bl	80005f8 <__aeabi_dmul>
 8009c72:	4652      	mov	r2, sl
 8009c74:	465b      	mov	r3, fp
 8009c76:	f7f6 fb09 	bl	800028c <__adddf3>
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	4983      	ldr	r1, [pc, #524]	; (8009e8c <_strtod_l+0xbf4>)
 8009c7e:	4a85      	ldr	r2, [pc, #532]	; (8009e94 <_strtod_l+0xbfc>)
 8009c80:	4019      	ands	r1, r3
 8009c82:	4291      	cmp	r1, r2
 8009c84:	4682      	mov	sl, r0
 8009c86:	d960      	bls.n	8009d4a <_strtod_l+0xab2>
 8009c88:	ee18 3a90 	vmov	r3, s17
 8009c8c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d104      	bne.n	8009c9e <_strtod_l+0xa06>
 8009c94:	ee18 3a10 	vmov	r3, s16
 8009c98:	3301      	adds	r3, #1
 8009c9a:	f43f ad45 	beq.w	8009728 <_strtod_l+0x490>
 8009c9e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009ea0 <_strtod_l+0xc08>
 8009ca2:	f04f 3aff 	mov.w	sl, #4294967295
 8009ca6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f001 fe2d 	bl	800b908 <_Bfree>
 8009cae:	9905      	ldr	r1, [sp, #20]
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f001 fe29 	bl	800b908 <_Bfree>
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f001 fe25 	bl	800b908 <_Bfree>
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f001 fe21 	bl	800b908 <_Bfree>
 8009cc6:	e61a      	b.n	80098fe <_strtod_l+0x666>
 8009cc8:	f1ba 0f00 	cmp.w	sl, #0
 8009ccc:	d11b      	bne.n	8009d06 <_strtod_l+0xa6e>
 8009cce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cd2:	b9f3      	cbnz	r3, 8009d12 <_strtod_l+0xa7a>
 8009cd4:	4b6c      	ldr	r3, [pc, #432]	; (8009e88 <_strtod_l+0xbf0>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	4640      	mov	r0, r8
 8009cda:	4649      	mov	r1, r9
 8009cdc:	f7f6 fefe 	bl	8000adc <__aeabi_dcmplt>
 8009ce0:	b9d0      	cbnz	r0, 8009d18 <_strtod_l+0xa80>
 8009ce2:	4640      	mov	r0, r8
 8009ce4:	4649      	mov	r1, r9
 8009ce6:	4b6c      	ldr	r3, [pc, #432]	; (8009e98 <_strtod_l+0xc00>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f7f6 fc85 	bl	80005f8 <__aeabi_dmul>
 8009cee:	4680      	mov	r8, r0
 8009cf0:	4689      	mov	r9, r1
 8009cf2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009cf6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009cfa:	9315      	str	r3, [sp, #84]	; 0x54
 8009cfc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009d00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d04:	e79d      	b.n	8009c42 <_strtod_l+0x9aa>
 8009d06:	f1ba 0f01 	cmp.w	sl, #1
 8009d0a:	d102      	bne.n	8009d12 <_strtod_l+0xa7a>
 8009d0c:	2f00      	cmp	r7, #0
 8009d0e:	f43f ad83 	beq.w	8009818 <_strtod_l+0x580>
 8009d12:	4b62      	ldr	r3, [pc, #392]	; (8009e9c <_strtod_l+0xc04>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	e78e      	b.n	8009c36 <_strtod_l+0x99e>
 8009d18:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009e98 <_strtod_l+0xc00>
 8009d1c:	f04f 0800 	mov.w	r8, #0
 8009d20:	e7e7      	b.n	8009cf2 <_strtod_l+0xa5a>
 8009d22:	4b5d      	ldr	r3, [pc, #372]	; (8009e98 <_strtod_l+0xc00>)
 8009d24:	4640      	mov	r0, r8
 8009d26:	4649      	mov	r1, r9
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f7f6 fc65 	bl	80005f8 <__aeabi_dmul>
 8009d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d30:	4680      	mov	r8, r0
 8009d32:	4689      	mov	r9, r1
 8009d34:	b933      	cbnz	r3, 8009d44 <_strtod_l+0xaac>
 8009d36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d3a:	900e      	str	r0, [sp, #56]	; 0x38
 8009d3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009d42:	e7dd      	b.n	8009d00 <_strtod_l+0xa68>
 8009d44:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009d48:	e7f9      	b.n	8009d3e <_strtod_l+0xaa6>
 8009d4a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009d4e:	9b04      	ldr	r3, [sp, #16]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1a8      	bne.n	8009ca6 <_strtod_l+0xa0e>
 8009d54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d5a:	0d1b      	lsrs	r3, r3, #20
 8009d5c:	051b      	lsls	r3, r3, #20
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d1a1      	bne.n	8009ca6 <_strtod_l+0xa0e>
 8009d62:	4640      	mov	r0, r8
 8009d64:	4649      	mov	r1, r9
 8009d66:	f7f6 ffa7 	bl	8000cb8 <__aeabi_d2lz>
 8009d6a:	f7f6 fc17 	bl	800059c <__aeabi_l2d>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	4640      	mov	r0, r8
 8009d74:	4649      	mov	r1, r9
 8009d76:	f7f6 fa87 	bl	8000288 <__aeabi_dsub>
 8009d7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d80:	ea43 030a 	orr.w	r3, r3, sl
 8009d84:	4313      	orrs	r3, r2
 8009d86:	4680      	mov	r8, r0
 8009d88:	4689      	mov	r9, r1
 8009d8a:	d055      	beq.n	8009e38 <_strtod_l+0xba0>
 8009d8c:	a336      	add	r3, pc, #216	; (adr r3, 8009e68 <_strtod_l+0xbd0>)
 8009d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d92:	f7f6 fea3 	bl	8000adc <__aeabi_dcmplt>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	f47f acd0 	bne.w	800973c <_strtod_l+0x4a4>
 8009d9c:	a334      	add	r3, pc, #208	; (adr r3, 8009e70 <_strtod_l+0xbd8>)
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	4640      	mov	r0, r8
 8009da4:	4649      	mov	r1, r9
 8009da6:	f7f6 feb7 	bl	8000b18 <__aeabi_dcmpgt>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f43f af7b 	beq.w	8009ca6 <_strtod_l+0xa0e>
 8009db0:	e4c4      	b.n	800973c <_strtod_l+0x4a4>
 8009db2:	9b04      	ldr	r3, [sp, #16]
 8009db4:	b333      	cbz	r3, 8009e04 <_strtod_l+0xb6c>
 8009db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009db8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009dbc:	d822      	bhi.n	8009e04 <_strtod_l+0xb6c>
 8009dbe:	a32e      	add	r3, pc, #184	; (adr r3, 8009e78 <_strtod_l+0xbe0>)
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	4640      	mov	r0, r8
 8009dc6:	4649      	mov	r1, r9
 8009dc8:	f7f6 fe92 	bl	8000af0 <__aeabi_dcmple>
 8009dcc:	b1a0      	cbz	r0, 8009df8 <_strtod_l+0xb60>
 8009dce:	4649      	mov	r1, r9
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	f7f6 fee9 	bl	8000ba8 <__aeabi_d2uiz>
 8009dd6:	2801      	cmp	r0, #1
 8009dd8:	bf38      	it	cc
 8009dda:	2001      	movcc	r0, #1
 8009ddc:	f7f6 fb92 	bl	8000504 <__aeabi_ui2d>
 8009de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009de2:	4680      	mov	r8, r0
 8009de4:	4689      	mov	r9, r1
 8009de6:	bb23      	cbnz	r3, 8009e32 <_strtod_l+0xb9a>
 8009de8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dec:	9010      	str	r0, [sp, #64]	; 0x40
 8009dee:	9311      	str	r3, [sp, #68]	; 0x44
 8009df0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009df4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dfc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009e00:	1a9b      	subs	r3, r3, r2
 8009e02:	9309      	str	r3, [sp, #36]	; 0x24
 8009e04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e08:	eeb0 0a48 	vmov.f32	s0, s16
 8009e0c:	eef0 0a68 	vmov.f32	s1, s17
 8009e10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e14:	f002 f8aa 	bl	800bf6c <__ulp>
 8009e18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e1c:	ec53 2b10 	vmov	r2, r3, d0
 8009e20:	f7f6 fbea 	bl	80005f8 <__aeabi_dmul>
 8009e24:	ec53 2b18 	vmov	r2, r3, d8
 8009e28:	f7f6 fa30 	bl	800028c <__adddf3>
 8009e2c:	4682      	mov	sl, r0
 8009e2e:	468b      	mov	fp, r1
 8009e30:	e78d      	b.n	8009d4e <_strtod_l+0xab6>
 8009e32:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009e36:	e7db      	b.n	8009df0 <_strtod_l+0xb58>
 8009e38:	a311      	add	r3, pc, #68	; (adr r3, 8009e80 <_strtod_l+0xbe8>)
 8009e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3e:	f7f6 fe4d 	bl	8000adc <__aeabi_dcmplt>
 8009e42:	e7b2      	b.n	8009daa <_strtod_l+0xb12>
 8009e44:	2300      	movs	r3, #0
 8009e46:	930a      	str	r3, [sp, #40]	; 0x28
 8009e48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	f7ff ba6b 	b.w	8009328 <_strtod_l+0x90>
 8009e52:	2a65      	cmp	r2, #101	; 0x65
 8009e54:	f43f ab5f 	beq.w	8009516 <_strtod_l+0x27e>
 8009e58:	2a45      	cmp	r2, #69	; 0x45
 8009e5a:	f43f ab5c 	beq.w	8009516 <_strtod_l+0x27e>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	f7ff bb94 	b.w	800958c <_strtod_l+0x2f4>
 8009e64:	f3af 8000 	nop.w
 8009e68:	94a03595 	.word	0x94a03595
 8009e6c:	3fdfffff 	.word	0x3fdfffff
 8009e70:	35afe535 	.word	0x35afe535
 8009e74:	3fe00000 	.word	0x3fe00000
 8009e78:	ffc00000 	.word	0xffc00000
 8009e7c:	41dfffff 	.word	0x41dfffff
 8009e80:	94a03595 	.word	0x94a03595
 8009e84:	3fcfffff 	.word	0x3fcfffff
 8009e88:	3ff00000 	.word	0x3ff00000
 8009e8c:	7ff00000 	.word	0x7ff00000
 8009e90:	7fe00000 	.word	0x7fe00000
 8009e94:	7c9fffff 	.word	0x7c9fffff
 8009e98:	3fe00000 	.word	0x3fe00000
 8009e9c:	bff00000 	.word	0xbff00000
 8009ea0:	7fefffff 	.word	0x7fefffff

08009ea4 <_strtod_r>:
 8009ea4:	4b01      	ldr	r3, [pc, #4]	; (8009eac <_strtod_r+0x8>)
 8009ea6:	f7ff b9f7 	b.w	8009298 <_strtod_l>
 8009eaa:	bf00      	nop
 8009eac:	200000a4 	.word	0x200000a4

08009eb0 <_strtol_l.constprop.0>:
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb6:	d001      	beq.n	8009ebc <_strtol_l.constprop.0+0xc>
 8009eb8:	2b24      	cmp	r3, #36	; 0x24
 8009eba:	d906      	bls.n	8009eca <_strtol_l.constprop.0+0x1a>
 8009ebc:	f7fd fec8 	bl	8007c50 <__errno>
 8009ec0:	2316      	movs	r3, #22
 8009ec2:	6003      	str	r3, [r0, #0]
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009fb0 <_strtol_l.constprop.0+0x100>
 8009ece:	460d      	mov	r5, r1
 8009ed0:	462e      	mov	r6, r5
 8009ed2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ed6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009eda:	f017 0708 	ands.w	r7, r7, #8
 8009ede:	d1f7      	bne.n	8009ed0 <_strtol_l.constprop.0+0x20>
 8009ee0:	2c2d      	cmp	r4, #45	; 0x2d
 8009ee2:	d132      	bne.n	8009f4a <_strtol_l.constprop.0+0x9a>
 8009ee4:	782c      	ldrb	r4, [r5, #0]
 8009ee6:	2701      	movs	r7, #1
 8009ee8:	1cb5      	adds	r5, r6, #2
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d05b      	beq.n	8009fa6 <_strtol_l.constprop.0+0xf6>
 8009eee:	2b10      	cmp	r3, #16
 8009ef0:	d109      	bne.n	8009f06 <_strtol_l.constprop.0+0x56>
 8009ef2:	2c30      	cmp	r4, #48	; 0x30
 8009ef4:	d107      	bne.n	8009f06 <_strtol_l.constprop.0+0x56>
 8009ef6:	782c      	ldrb	r4, [r5, #0]
 8009ef8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009efc:	2c58      	cmp	r4, #88	; 0x58
 8009efe:	d14d      	bne.n	8009f9c <_strtol_l.constprop.0+0xec>
 8009f00:	786c      	ldrb	r4, [r5, #1]
 8009f02:	2310      	movs	r3, #16
 8009f04:	3502      	adds	r5, #2
 8009f06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009f0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f0e:	f04f 0c00 	mov.w	ip, #0
 8009f12:	fbb8 f9f3 	udiv	r9, r8, r3
 8009f16:	4666      	mov	r6, ip
 8009f18:	fb03 8a19 	mls	sl, r3, r9, r8
 8009f1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009f20:	f1be 0f09 	cmp.w	lr, #9
 8009f24:	d816      	bhi.n	8009f54 <_strtol_l.constprop.0+0xa4>
 8009f26:	4674      	mov	r4, lr
 8009f28:	42a3      	cmp	r3, r4
 8009f2a:	dd24      	ble.n	8009f76 <_strtol_l.constprop.0+0xc6>
 8009f2c:	f1bc 0f00 	cmp.w	ip, #0
 8009f30:	db1e      	blt.n	8009f70 <_strtol_l.constprop.0+0xc0>
 8009f32:	45b1      	cmp	r9, r6
 8009f34:	d31c      	bcc.n	8009f70 <_strtol_l.constprop.0+0xc0>
 8009f36:	d101      	bne.n	8009f3c <_strtol_l.constprop.0+0x8c>
 8009f38:	45a2      	cmp	sl, r4
 8009f3a:	db19      	blt.n	8009f70 <_strtol_l.constprop.0+0xc0>
 8009f3c:	fb06 4603 	mla	r6, r6, r3, r4
 8009f40:	f04f 0c01 	mov.w	ip, #1
 8009f44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f48:	e7e8      	b.n	8009f1c <_strtol_l.constprop.0+0x6c>
 8009f4a:	2c2b      	cmp	r4, #43	; 0x2b
 8009f4c:	bf04      	itt	eq
 8009f4e:	782c      	ldrbeq	r4, [r5, #0]
 8009f50:	1cb5      	addeq	r5, r6, #2
 8009f52:	e7ca      	b.n	8009eea <_strtol_l.constprop.0+0x3a>
 8009f54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009f58:	f1be 0f19 	cmp.w	lr, #25
 8009f5c:	d801      	bhi.n	8009f62 <_strtol_l.constprop.0+0xb2>
 8009f5e:	3c37      	subs	r4, #55	; 0x37
 8009f60:	e7e2      	b.n	8009f28 <_strtol_l.constprop.0+0x78>
 8009f62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009f66:	f1be 0f19 	cmp.w	lr, #25
 8009f6a:	d804      	bhi.n	8009f76 <_strtol_l.constprop.0+0xc6>
 8009f6c:	3c57      	subs	r4, #87	; 0x57
 8009f6e:	e7db      	b.n	8009f28 <_strtol_l.constprop.0+0x78>
 8009f70:	f04f 3cff 	mov.w	ip, #4294967295
 8009f74:	e7e6      	b.n	8009f44 <_strtol_l.constprop.0+0x94>
 8009f76:	f1bc 0f00 	cmp.w	ip, #0
 8009f7a:	da05      	bge.n	8009f88 <_strtol_l.constprop.0+0xd8>
 8009f7c:	2322      	movs	r3, #34	; 0x22
 8009f7e:	6003      	str	r3, [r0, #0]
 8009f80:	4646      	mov	r6, r8
 8009f82:	b942      	cbnz	r2, 8009f96 <_strtol_l.constprop.0+0xe6>
 8009f84:	4630      	mov	r0, r6
 8009f86:	e79e      	b.n	8009ec6 <_strtol_l.constprop.0+0x16>
 8009f88:	b107      	cbz	r7, 8009f8c <_strtol_l.constprop.0+0xdc>
 8009f8a:	4276      	negs	r6, r6
 8009f8c:	2a00      	cmp	r2, #0
 8009f8e:	d0f9      	beq.n	8009f84 <_strtol_l.constprop.0+0xd4>
 8009f90:	f1bc 0f00 	cmp.w	ip, #0
 8009f94:	d000      	beq.n	8009f98 <_strtol_l.constprop.0+0xe8>
 8009f96:	1e69      	subs	r1, r5, #1
 8009f98:	6011      	str	r1, [r2, #0]
 8009f9a:	e7f3      	b.n	8009f84 <_strtol_l.constprop.0+0xd4>
 8009f9c:	2430      	movs	r4, #48	; 0x30
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1b1      	bne.n	8009f06 <_strtol_l.constprop.0+0x56>
 8009fa2:	2308      	movs	r3, #8
 8009fa4:	e7af      	b.n	8009f06 <_strtol_l.constprop.0+0x56>
 8009fa6:	2c30      	cmp	r4, #48	; 0x30
 8009fa8:	d0a5      	beq.n	8009ef6 <_strtol_l.constprop.0+0x46>
 8009faa:	230a      	movs	r3, #10
 8009fac:	e7ab      	b.n	8009f06 <_strtol_l.constprop.0+0x56>
 8009fae:	bf00      	nop
 8009fb0:	0800dc19 	.word	0x0800dc19

08009fb4 <_strtol_r>:
 8009fb4:	f7ff bf7c 	b.w	8009eb0 <_strtol_l.constprop.0>

08009fb8 <_user_strerror>:
 8009fb8:	2000      	movs	r0, #0
 8009fba:	4770      	bx	lr

08009fbc <_vsiprintf_r>:
 8009fbc:	b500      	push	{lr}
 8009fbe:	b09b      	sub	sp, #108	; 0x6c
 8009fc0:	9100      	str	r1, [sp, #0]
 8009fc2:	9104      	str	r1, [sp, #16]
 8009fc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009fc8:	9105      	str	r1, [sp, #20]
 8009fca:	9102      	str	r1, [sp, #8]
 8009fcc:	4905      	ldr	r1, [pc, #20]	; (8009fe4 <_vsiprintf_r+0x28>)
 8009fce:	9103      	str	r1, [sp, #12]
 8009fd0:	4669      	mov	r1, sp
 8009fd2:	f002 f98b 	bl	800c2ec <_svfiprintf_r>
 8009fd6:	9b00      	ldr	r3, [sp, #0]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	701a      	strb	r2, [r3, #0]
 8009fdc:	b01b      	add	sp, #108	; 0x6c
 8009fde:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fe2:	bf00      	nop
 8009fe4:	ffff0208 	.word	0xffff0208

08009fe8 <vsiprintf>:
 8009fe8:	4613      	mov	r3, r2
 8009fea:	460a      	mov	r2, r1
 8009fec:	4601      	mov	r1, r0
 8009fee:	4802      	ldr	r0, [pc, #8]	; (8009ff8 <vsiprintf+0x10>)
 8009ff0:	6800      	ldr	r0, [r0, #0]
 8009ff2:	f7ff bfe3 	b.w	8009fbc <_vsiprintf_r>
 8009ff6:	bf00      	nop
 8009ff8:	2000003c 	.word	0x2000003c

08009ffc <_write_r>:
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	4d07      	ldr	r5, [pc, #28]	; (800a01c <_write_r+0x20>)
 800a000:	4604      	mov	r4, r0
 800a002:	4608      	mov	r0, r1
 800a004:	4611      	mov	r1, r2
 800a006:	2200      	movs	r2, #0
 800a008:	602a      	str	r2, [r5, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	f7f7 fdaf 	bl	8001b6e <_write>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d102      	bne.n	800a01a <_write_r+0x1e>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	b103      	cbz	r3, 800a01a <_write_r+0x1e>
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	bd38      	pop	{r3, r4, r5, pc}
 800a01c:	2000066c 	.word	0x2000066c

0800a020 <_close_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4d06      	ldr	r5, [pc, #24]	; (800a03c <_close_r+0x1c>)
 800a024:	2300      	movs	r3, #0
 800a026:	4604      	mov	r4, r0
 800a028:	4608      	mov	r0, r1
 800a02a:	602b      	str	r3, [r5, #0]
 800a02c:	f7f7 fdbb 	bl	8001ba6 <_close>
 800a030:	1c43      	adds	r3, r0, #1
 800a032:	d102      	bne.n	800a03a <_close_r+0x1a>
 800a034:	682b      	ldr	r3, [r5, #0]
 800a036:	b103      	cbz	r3, 800a03a <_close_r+0x1a>
 800a038:	6023      	str	r3, [r4, #0]
 800a03a:	bd38      	pop	{r3, r4, r5, pc}
 800a03c:	2000066c 	.word	0x2000066c

0800a040 <quorem>:
 800a040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	6903      	ldr	r3, [r0, #16]
 800a046:	690c      	ldr	r4, [r1, #16]
 800a048:	42a3      	cmp	r3, r4
 800a04a:	4607      	mov	r7, r0
 800a04c:	f2c0 8081 	blt.w	800a152 <quorem+0x112>
 800a050:	3c01      	subs	r4, #1
 800a052:	f101 0814 	add.w	r8, r1, #20
 800a056:	f100 0514 	add.w	r5, r0, #20
 800a05a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a05e:	9301      	str	r3, [sp, #4]
 800a060:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a068:	3301      	adds	r3, #1
 800a06a:	429a      	cmp	r2, r3
 800a06c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a070:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a074:	fbb2 f6f3 	udiv	r6, r2, r3
 800a078:	d331      	bcc.n	800a0de <quorem+0x9e>
 800a07a:	f04f 0e00 	mov.w	lr, #0
 800a07e:	4640      	mov	r0, r8
 800a080:	46ac      	mov	ip, r5
 800a082:	46f2      	mov	sl, lr
 800a084:	f850 2b04 	ldr.w	r2, [r0], #4
 800a088:	b293      	uxth	r3, r2
 800a08a:	fb06 e303 	mla	r3, r6, r3, lr
 800a08e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a092:	b29b      	uxth	r3, r3
 800a094:	ebaa 0303 	sub.w	r3, sl, r3
 800a098:	f8dc a000 	ldr.w	sl, [ip]
 800a09c:	0c12      	lsrs	r2, r2, #16
 800a09e:	fa13 f38a 	uxtah	r3, r3, sl
 800a0a2:	fb06 e202 	mla	r2, r6, r2, lr
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	9b00      	ldr	r3, [sp, #0]
 800a0aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0ae:	b292      	uxth	r2, r2
 800a0b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a0b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a0bc:	4581      	cmp	r9, r0
 800a0be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0c2:	f84c 3b04 	str.w	r3, [ip], #4
 800a0c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0ca:	d2db      	bcs.n	800a084 <quorem+0x44>
 800a0cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a0d0:	b92b      	cbnz	r3, 800a0de <quorem+0x9e>
 800a0d2:	9b01      	ldr	r3, [sp, #4]
 800a0d4:	3b04      	subs	r3, #4
 800a0d6:	429d      	cmp	r5, r3
 800a0d8:	461a      	mov	r2, r3
 800a0da:	d32e      	bcc.n	800a13a <quorem+0xfa>
 800a0dc:	613c      	str	r4, [r7, #16]
 800a0de:	4638      	mov	r0, r7
 800a0e0:	f001 fe9e 	bl	800be20 <__mcmp>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	db24      	blt.n	800a132 <quorem+0xf2>
 800a0e8:	3601      	adds	r6, #1
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	f04f 0c00 	mov.w	ip, #0
 800a0f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0f4:	f8d0 e000 	ldr.w	lr, [r0]
 800a0f8:	b293      	uxth	r3, r2
 800a0fa:	ebac 0303 	sub.w	r3, ip, r3
 800a0fe:	0c12      	lsrs	r2, r2, #16
 800a100:	fa13 f38e 	uxtah	r3, r3, lr
 800a104:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a112:	45c1      	cmp	r9, r8
 800a114:	f840 3b04 	str.w	r3, [r0], #4
 800a118:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a11c:	d2e8      	bcs.n	800a0f0 <quorem+0xb0>
 800a11e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a126:	b922      	cbnz	r2, 800a132 <quorem+0xf2>
 800a128:	3b04      	subs	r3, #4
 800a12a:	429d      	cmp	r5, r3
 800a12c:	461a      	mov	r2, r3
 800a12e:	d30a      	bcc.n	800a146 <quorem+0x106>
 800a130:	613c      	str	r4, [r7, #16]
 800a132:	4630      	mov	r0, r6
 800a134:	b003      	add	sp, #12
 800a136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13a:	6812      	ldr	r2, [r2, #0]
 800a13c:	3b04      	subs	r3, #4
 800a13e:	2a00      	cmp	r2, #0
 800a140:	d1cc      	bne.n	800a0dc <quorem+0x9c>
 800a142:	3c01      	subs	r4, #1
 800a144:	e7c7      	b.n	800a0d6 <quorem+0x96>
 800a146:	6812      	ldr	r2, [r2, #0]
 800a148:	3b04      	subs	r3, #4
 800a14a:	2a00      	cmp	r2, #0
 800a14c:	d1f0      	bne.n	800a130 <quorem+0xf0>
 800a14e:	3c01      	subs	r4, #1
 800a150:	e7eb      	b.n	800a12a <quorem+0xea>
 800a152:	2000      	movs	r0, #0
 800a154:	e7ee      	b.n	800a134 <quorem+0xf4>
	...

0800a158 <_dtoa_r>:
 800a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	ed2d 8b04 	vpush	{d8-d9}
 800a160:	ec57 6b10 	vmov	r6, r7, d0
 800a164:	b093      	sub	sp, #76	; 0x4c
 800a166:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a168:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a16c:	9106      	str	r1, [sp, #24]
 800a16e:	ee10 aa10 	vmov	sl, s0
 800a172:	4604      	mov	r4, r0
 800a174:	9209      	str	r2, [sp, #36]	; 0x24
 800a176:	930c      	str	r3, [sp, #48]	; 0x30
 800a178:	46bb      	mov	fp, r7
 800a17a:	b975      	cbnz	r5, 800a19a <_dtoa_r+0x42>
 800a17c:	2010      	movs	r0, #16
 800a17e:	f7fd fd91 	bl	8007ca4 <malloc>
 800a182:	4602      	mov	r2, r0
 800a184:	6260      	str	r0, [r4, #36]	; 0x24
 800a186:	b920      	cbnz	r0, 800a192 <_dtoa_r+0x3a>
 800a188:	4ba7      	ldr	r3, [pc, #668]	; (800a428 <_dtoa_r+0x2d0>)
 800a18a:	21ea      	movs	r1, #234	; 0xea
 800a18c:	48a7      	ldr	r0, [pc, #668]	; (800a42c <_dtoa_r+0x2d4>)
 800a18e:	f002 fdf3 	bl	800cd78 <__assert_func>
 800a192:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a196:	6005      	str	r5, [r0, #0]
 800a198:	60c5      	str	r5, [r0, #12]
 800a19a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a19c:	6819      	ldr	r1, [r3, #0]
 800a19e:	b151      	cbz	r1, 800a1b6 <_dtoa_r+0x5e>
 800a1a0:	685a      	ldr	r2, [r3, #4]
 800a1a2:	604a      	str	r2, [r1, #4]
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	4093      	lsls	r3, r2
 800a1a8:	608b      	str	r3, [r1, #8]
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f001 fbac 	bl	800b908 <_Bfree>
 800a1b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	1e3b      	subs	r3, r7, #0
 800a1b8:	bfaa      	itet	ge
 800a1ba:	2300      	movge	r3, #0
 800a1bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a1c0:	f8c8 3000 	strge.w	r3, [r8]
 800a1c4:	4b9a      	ldr	r3, [pc, #616]	; (800a430 <_dtoa_r+0x2d8>)
 800a1c6:	bfbc      	itt	lt
 800a1c8:	2201      	movlt	r2, #1
 800a1ca:	f8c8 2000 	strlt.w	r2, [r8]
 800a1ce:	ea33 030b 	bics.w	r3, r3, fp
 800a1d2:	d11b      	bne.n	800a20c <_dtoa_r+0xb4>
 800a1d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1da:	6013      	str	r3, [r2, #0]
 800a1dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1e0:	4333      	orrs	r3, r6
 800a1e2:	f000 8592 	beq.w	800ad0a <_dtoa_r+0xbb2>
 800a1e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1e8:	b963      	cbnz	r3, 800a204 <_dtoa_r+0xac>
 800a1ea:	4b92      	ldr	r3, [pc, #584]	; (800a434 <_dtoa_r+0x2dc>)
 800a1ec:	e022      	b.n	800a234 <_dtoa_r+0xdc>
 800a1ee:	4b92      	ldr	r3, [pc, #584]	; (800a438 <_dtoa_r+0x2e0>)
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	3308      	adds	r3, #8
 800a1f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1f6:	6013      	str	r3, [r2, #0]
 800a1f8:	9801      	ldr	r0, [sp, #4]
 800a1fa:	b013      	add	sp, #76	; 0x4c
 800a1fc:	ecbd 8b04 	vpop	{d8-d9}
 800a200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a204:	4b8b      	ldr	r3, [pc, #556]	; (800a434 <_dtoa_r+0x2dc>)
 800a206:	9301      	str	r3, [sp, #4]
 800a208:	3303      	adds	r3, #3
 800a20a:	e7f3      	b.n	800a1f4 <_dtoa_r+0x9c>
 800a20c:	2200      	movs	r2, #0
 800a20e:	2300      	movs	r3, #0
 800a210:	4650      	mov	r0, sl
 800a212:	4659      	mov	r1, fp
 800a214:	f7f6 fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 800a218:	ec4b ab19 	vmov	d9, sl, fp
 800a21c:	4680      	mov	r8, r0
 800a21e:	b158      	cbz	r0, 800a238 <_dtoa_r+0xe0>
 800a220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a222:	2301      	movs	r3, #1
 800a224:	6013      	str	r3, [r2, #0]
 800a226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 856b 	beq.w	800ad04 <_dtoa_r+0xbac>
 800a22e:	4883      	ldr	r0, [pc, #524]	; (800a43c <_dtoa_r+0x2e4>)
 800a230:	6018      	str	r0, [r3, #0]
 800a232:	1e43      	subs	r3, r0, #1
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	e7df      	b.n	800a1f8 <_dtoa_r+0xa0>
 800a238:	ec4b ab10 	vmov	d0, sl, fp
 800a23c:	aa10      	add	r2, sp, #64	; 0x40
 800a23e:	a911      	add	r1, sp, #68	; 0x44
 800a240:	4620      	mov	r0, r4
 800a242:	f001 ff0f 	bl	800c064 <__d2b>
 800a246:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a24a:	ee08 0a10 	vmov	s16, r0
 800a24e:	2d00      	cmp	r5, #0
 800a250:	f000 8084 	beq.w	800a35c <_dtoa_r+0x204>
 800a254:	ee19 3a90 	vmov	r3, s19
 800a258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a25c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a260:	4656      	mov	r6, sl
 800a262:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a266:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a26a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a26e:	4b74      	ldr	r3, [pc, #464]	; (800a440 <_dtoa_r+0x2e8>)
 800a270:	2200      	movs	r2, #0
 800a272:	4630      	mov	r0, r6
 800a274:	4639      	mov	r1, r7
 800a276:	f7f6 f807 	bl	8000288 <__aeabi_dsub>
 800a27a:	a365      	add	r3, pc, #404	; (adr r3, 800a410 <_dtoa_r+0x2b8>)
 800a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a280:	f7f6 f9ba 	bl	80005f8 <__aeabi_dmul>
 800a284:	a364      	add	r3, pc, #400	; (adr r3, 800a418 <_dtoa_r+0x2c0>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	f7f5 ffff 	bl	800028c <__adddf3>
 800a28e:	4606      	mov	r6, r0
 800a290:	4628      	mov	r0, r5
 800a292:	460f      	mov	r7, r1
 800a294:	f7f6 f946 	bl	8000524 <__aeabi_i2d>
 800a298:	a361      	add	r3, pc, #388	; (adr r3, 800a420 <_dtoa_r+0x2c8>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	f7f6 f9ab 	bl	80005f8 <__aeabi_dmul>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	4639      	mov	r1, r7
 800a2aa:	f7f5 ffef 	bl	800028c <__adddf3>
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	460f      	mov	r7, r1
 800a2b2:	f7f6 fc51 	bl	8000b58 <__aeabi_d2iz>
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	9000      	str	r0, [sp, #0]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	4630      	mov	r0, r6
 800a2be:	4639      	mov	r1, r7
 800a2c0:	f7f6 fc0c 	bl	8000adc <__aeabi_dcmplt>
 800a2c4:	b150      	cbz	r0, 800a2dc <_dtoa_r+0x184>
 800a2c6:	9800      	ldr	r0, [sp, #0]
 800a2c8:	f7f6 f92c 	bl	8000524 <__aeabi_i2d>
 800a2cc:	4632      	mov	r2, r6
 800a2ce:	463b      	mov	r3, r7
 800a2d0:	f7f6 fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2d4:	b910      	cbnz	r0, 800a2dc <_dtoa_r+0x184>
 800a2d6:	9b00      	ldr	r3, [sp, #0]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	9b00      	ldr	r3, [sp, #0]
 800a2de:	2b16      	cmp	r3, #22
 800a2e0:	d85a      	bhi.n	800a398 <_dtoa_r+0x240>
 800a2e2:	9a00      	ldr	r2, [sp, #0]
 800a2e4:	4b57      	ldr	r3, [pc, #348]	; (800a444 <_dtoa_r+0x2ec>)
 800a2e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	ec51 0b19 	vmov	r0, r1, d9
 800a2f2:	f7f6 fbf3 	bl	8000adc <__aeabi_dcmplt>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d050      	beq.n	800a39c <_dtoa_r+0x244>
 800a2fa:	9b00      	ldr	r3, [sp, #0]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	2300      	movs	r3, #0
 800a302:	930b      	str	r3, [sp, #44]	; 0x2c
 800a304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a306:	1b5d      	subs	r5, r3, r5
 800a308:	1e6b      	subs	r3, r5, #1
 800a30a:	9305      	str	r3, [sp, #20]
 800a30c:	bf45      	ittet	mi
 800a30e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a312:	9304      	strmi	r3, [sp, #16]
 800a314:	2300      	movpl	r3, #0
 800a316:	2300      	movmi	r3, #0
 800a318:	bf4c      	ite	mi
 800a31a:	9305      	strmi	r3, [sp, #20]
 800a31c:	9304      	strpl	r3, [sp, #16]
 800a31e:	9b00      	ldr	r3, [sp, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	db3d      	blt.n	800a3a0 <_dtoa_r+0x248>
 800a324:	9b05      	ldr	r3, [sp, #20]
 800a326:	9a00      	ldr	r2, [sp, #0]
 800a328:	920a      	str	r2, [sp, #40]	; 0x28
 800a32a:	4413      	add	r3, r2
 800a32c:	9305      	str	r3, [sp, #20]
 800a32e:	2300      	movs	r3, #0
 800a330:	9307      	str	r3, [sp, #28]
 800a332:	9b06      	ldr	r3, [sp, #24]
 800a334:	2b09      	cmp	r3, #9
 800a336:	f200 8089 	bhi.w	800a44c <_dtoa_r+0x2f4>
 800a33a:	2b05      	cmp	r3, #5
 800a33c:	bfc4      	itt	gt
 800a33e:	3b04      	subgt	r3, #4
 800a340:	9306      	strgt	r3, [sp, #24]
 800a342:	9b06      	ldr	r3, [sp, #24]
 800a344:	f1a3 0302 	sub.w	r3, r3, #2
 800a348:	bfcc      	ite	gt
 800a34a:	2500      	movgt	r5, #0
 800a34c:	2501      	movle	r5, #1
 800a34e:	2b03      	cmp	r3, #3
 800a350:	f200 8087 	bhi.w	800a462 <_dtoa_r+0x30a>
 800a354:	e8df f003 	tbb	[pc, r3]
 800a358:	59383a2d 	.word	0x59383a2d
 800a35c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a360:	441d      	add	r5, r3
 800a362:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a366:	2b20      	cmp	r3, #32
 800a368:	bfc1      	itttt	gt
 800a36a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a36e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a372:	fa0b f303 	lslgt.w	r3, fp, r3
 800a376:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a37a:	bfda      	itte	le
 800a37c:	f1c3 0320 	rsble	r3, r3, #32
 800a380:	fa06 f003 	lslle.w	r0, r6, r3
 800a384:	4318      	orrgt	r0, r3
 800a386:	f7f6 f8bd 	bl	8000504 <__aeabi_ui2d>
 800a38a:	2301      	movs	r3, #1
 800a38c:	4606      	mov	r6, r0
 800a38e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a392:	3d01      	subs	r5, #1
 800a394:	930e      	str	r3, [sp, #56]	; 0x38
 800a396:	e76a      	b.n	800a26e <_dtoa_r+0x116>
 800a398:	2301      	movs	r3, #1
 800a39a:	e7b2      	b.n	800a302 <_dtoa_r+0x1aa>
 800a39c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a39e:	e7b1      	b.n	800a304 <_dtoa_r+0x1ac>
 800a3a0:	9b04      	ldr	r3, [sp, #16]
 800a3a2:	9a00      	ldr	r2, [sp, #0]
 800a3a4:	1a9b      	subs	r3, r3, r2
 800a3a6:	9304      	str	r3, [sp, #16]
 800a3a8:	4253      	negs	r3, r2
 800a3aa:	9307      	str	r3, [sp, #28]
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a3b0:	e7bf      	b.n	800a332 <_dtoa_r+0x1da>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	9308      	str	r3, [sp, #32]
 800a3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	dc55      	bgt.n	800a468 <_dtoa_r+0x310>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a3c6:	e00c      	b.n	800a3e2 <_dtoa_r+0x28a>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e7f3      	b.n	800a3b4 <_dtoa_r+0x25c>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3d0:	9308      	str	r3, [sp, #32]
 800a3d2:	9b00      	ldr	r3, [sp, #0]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	9302      	str	r3, [sp, #8]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	9303      	str	r3, [sp, #12]
 800a3de:	bfb8      	it	lt
 800a3e0:	2301      	movlt	r3, #1
 800a3e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	6042      	str	r2, [r0, #4]
 800a3e8:	2204      	movs	r2, #4
 800a3ea:	f102 0614 	add.w	r6, r2, #20
 800a3ee:	429e      	cmp	r6, r3
 800a3f0:	6841      	ldr	r1, [r0, #4]
 800a3f2:	d93d      	bls.n	800a470 <_dtoa_r+0x318>
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f001 fa47 	bl	800b888 <_Balloc>
 800a3fa:	9001      	str	r0, [sp, #4]
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d13b      	bne.n	800a478 <_dtoa_r+0x320>
 800a400:	4b11      	ldr	r3, [pc, #68]	; (800a448 <_dtoa_r+0x2f0>)
 800a402:	4602      	mov	r2, r0
 800a404:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a408:	e6c0      	b.n	800a18c <_dtoa_r+0x34>
 800a40a:	2301      	movs	r3, #1
 800a40c:	e7df      	b.n	800a3ce <_dtoa_r+0x276>
 800a40e:	bf00      	nop
 800a410:	636f4361 	.word	0x636f4361
 800a414:	3fd287a7 	.word	0x3fd287a7
 800a418:	8b60c8b3 	.word	0x8b60c8b3
 800a41c:	3fc68a28 	.word	0x3fc68a28
 800a420:	509f79fb 	.word	0x509f79fb
 800a424:	3fd34413 	.word	0x3fd34413
 800a428:	0800dd26 	.word	0x0800dd26
 800a42c:	0800dd3d 	.word	0x0800dd3d
 800a430:	7ff00000 	.word	0x7ff00000
 800a434:	0800dd22 	.word	0x0800dd22
 800a438:	0800dd19 	.word	0x0800dd19
 800a43c:	0800dffa 	.word	0x0800dffa
 800a440:	3ff80000 	.word	0x3ff80000
 800a444:	0800df10 	.word	0x0800df10
 800a448:	0800dd98 	.word	0x0800dd98
 800a44c:	2501      	movs	r5, #1
 800a44e:	2300      	movs	r3, #0
 800a450:	9306      	str	r3, [sp, #24]
 800a452:	9508      	str	r5, [sp, #32]
 800a454:	f04f 33ff 	mov.w	r3, #4294967295
 800a458:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a45c:	2200      	movs	r2, #0
 800a45e:	2312      	movs	r3, #18
 800a460:	e7b0      	b.n	800a3c4 <_dtoa_r+0x26c>
 800a462:	2301      	movs	r3, #1
 800a464:	9308      	str	r3, [sp, #32]
 800a466:	e7f5      	b.n	800a454 <_dtoa_r+0x2fc>
 800a468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a46e:	e7b8      	b.n	800a3e2 <_dtoa_r+0x28a>
 800a470:	3101      	adds	r1, #1
 800a472:	6041      	str	r1, [r0, #4]
 800a474:	0052      	lsls	r2, r2, #1
 800a476:	e7b8      	b.n	800a3ea <_dtoa_r+0x292>
 800a478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a47a:	9a01      	ldr	r2, [sp, #4]
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	9b03      	ldr	r3, [sp, #12]
 800a480:	2b0e      	cmp	r3, #14
 800a482:	f200 809d 	bhi.w	800a5c0 <_dtoa_r+0x468>
 800a486:	2d00      	cmp	r5, #0
 800a488:	f000 809a 	beq.w	800a5c0 <_dtoa_r+0x468>
 800a48c:	9b00      	ldr	r3, [sp, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dd32      	ble.n	800a4f8 <_dtoa_r+0x3a0>
 800a492:	4ab7      	ldr	r2, [pc, #732]	; (800a770 <_dtoa_r+0x618>)
 800a494:	f003 030f 	and.w	r3, r3, #15
 800a498:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a49c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4a0:	9b00      	ldr	r3, [sp, #0]
 800a4a2:	05d8      	lsls	r0, r3, #23
 800a4a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a4a8:	d516      	bpl.n	800a4d8 <_dtoa_r+0x380>
 800a4aa:	4bb2      	ldr	r3, [pc, #712]	; (800a774 <_dtoa_r+0x61c>)
 800a4ac:	ec51 0b19 	vmov	r0, r1, d9
 800a4b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4b4:	f7f6 f9ca 	bl	800084c <__aeabi_ddiv>
 800a4b8:	f007 070f 	and.w	r7, r7, #15
 800a4bc:	4682      	mov	sl, r0
 800a4be:	468b      	mov	fp, r1
 800a4c0:	2503      	movs	r5, #3
 800a4c2:	4eac      	ldr	r6, [pc, #688]	; (800a774 <_dtoa_r+0x61c>)
 800a4c4:	b957      	cbnz	r7, 800a4dc <_dtoa_r+0x384>
 800a4c6:	4642      	mov	r2, r8
 800a4c8:	464b      	mov	r3, r9
 800a4ca:	4650      	mov	r0, sl
 800a4cc:	4659      	mov	r1, fp
 800a4ce:	f7f6 f9bd 	bl	800084c <__aeabi_ddiv>
 800a4d2:	4682      	mov	sl, r0
 800a4d4:	468b      	mov	fp, r1
 800a4d6:	e028      	b.n	800a52a <_dtoa_r+0x3d2>
 800a4d8:	2502      	movs	r5, #2
 800a4da:	e7f2      	b.n	800a4c2 <_dtoa_r+0x36a>
 800a4dc:	07f9      	lsls	r1, r7, #31
 800a4de:	d508      	bpl.n	800a4f2 <_dtoa_r+0x39a>
 800a4e0:	4640      	mov	r0, r8
 800a4e2:	4649      	mov	r1, r9
 800a4e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4e8:	f7f6 f886 	bl	80005f8 <__aeabi_dmul>
 800a4ec:	3501      	adds	r5, #1
 800a4ee:	4680      	mov	r8, r0
 800a4f0:	4689      	mov	r9, r1
 800a4f2:	107f      	asrs	r7, r7, #1
 800a4f4:	3608      	adds	r6, #8
 800a4f6:	e7e5      	b.n	800a4c4 <_dtoa_r+0x36c>
 800a4f8:	f000 809b 	beq.w	800a632 <_dtoa_r+0x4da>
 800a4fc:	9b00      	ldr	r3, [sp, #0]
 800a4fe:	4f9d      	ldr	r7, [pc, #628]	; (800a774 <_dtoa_r+0x61c>)
 800a500:	425e      	negs	r6, r3
 800a502:	4b9b      	ldr	r3, [pc, #620]	; (800a770 <_dtoa_r+0x618>)
 800a504:	f006 020f 	and.w	r2, r6, #15
 800a508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a510:	ec51 0b19 	vmov	r0, r1, d9
 800a514:	f7f6 f870 	bl	80005f8 <__aeabi_dmul>
 800a518:	1136      	asrs	r6, r6, #4
 800a51a:	4682      	mov	sl, r0
 800a51c:	468b      	mov	fp, r1
 800a51e:	2300      	movs	r3, #0
 800a520:	2502      	movs	r5, #2
 800a522:	2e00      	cmp	r6, #0
 800a524:	d17a      	bne.n	800a61c <_dtoa_r+0x4c4>
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1d3      	bne.n	800a4d2 <_dtoa_r+0x37a>
 800a52a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 8082 	beq.w	800a636 <_dtoa_r+0x4de>
 800a532:	4b91      	ldr	r3, [pc, #580]	; (800a778 <_dtoa_r+0x620>)
 800a534:	2200      	movs	r2, #0
 800a536:	4650      	mov	r0, sl
 800a538:	4659      	mov	r1, fp
 800a53a:	f7f6 facf 	bl	8000adc <__aeabi_dcmplt>
 800a53e:	2800      	cmp	r0, #0
 800a540:	d079      	beq.n	800a636 <_dtoa_r+0x4de>
 800a542:	9b03      	ldr	r3, [sp, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d076      	beq.n	800a636 <_dtoa_r+0x4de>
 800a548:	9b02      	ldr	r3, [sp, #8]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	dd36      	ble.n	800a5bc <_dtoa_r+0x464>
 800a54e:	9b00      	ldr	r3, [sp, #0]
 800a550:	4650      	mov	r0, sl
 800a552:	4659      	mov	r1, fp
 800a554:	1e5f      	subs	r7, r3, #1
 800a556:	2200      	movs	r2, #0
 800a558:	4b88      	ldr	r3, [pc, #544]	; (800a77c <_dtoa_r+0x624>)
 800a55a:	f7f6 f84d 	bl	80005f8 <__aeabi_dmul>
 800a55e:	9e02      	ldr	r6, [sp, #8]
 800a560:	4682      	mov	sl, r0
 800a562:	468b      	mov	fp, r1
 800a564:	3501      	adds	r5, #1
 800a566:	4628      	mov	r0, r5
 800a568:	f7f5 ffdc 	bl	8000524 <__aeabi_i2d>
 800a56c:	4652      	mov	r2, sl
 800a56e:	465b      	mov	r3, fp
 800a570:	f7f6 f842 	bl	80005f8 <__aeabi_dmul>
 800a574:	4b82      	ldr	r3, [pc, #520]	; (800a780 <_dtoa_r+0x628>)
 800a576:	2200      	movs	r2, #0
 800a578:	f7f5 fe88 	bl	800028c <__adddf3>
 800a57c:	46d0      	mov	r8, sl
 800a57e:	46d9      	mov	r9, fp
 800a580:	4682      	mov	sl, r0
 800a582:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a586:	2e00      	cmp	r6, #0
 800a588:	d158      	bne.n	800a63c <_dtoa_r+0x4e4>
 800a58a:	4b7e      	ldr	r3, [pc, #504]	; (800a784 <_dtoa_r+0x62c>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	4640      	mov	r0, r8
 800a590:	4649      	mov	r1, r9
 800a592:	f7f5 fe79 	bl	8000288 <__aeabi_dsub>
 800a596:	4652      	mov	r2, sl
 800a598:	465b      	mov	r3, fp
 800a59a:	4680      	mov	r8, r0
 800a59c:	4689      	mov	r9, r1
 800a59e:	f7f6 fabb 	bl	8000b18 <__aeabi_dcmpgt>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	f040 8295 	bne.w	800aad2 <_dtoa_r+0x97a>
 800a5a8:	4652      	mov	r2, sl
 800a5aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a5ae:	4640      	mov	r0, r8
 800a5b0:	4649      	mov	r1, r9
 800a5b2:	f7f6 fa93 	bl	8000adc <__aeabi_dcmplt>
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	f040 8289 	bne.w	800aace <_dtoa_r+0x976>
 800a5bc:	ec5b ab19 	vmov	sl, fp, d9
 800a5c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f2c0 8148 	blt.w	800a858 <_dtoa_r+0x700>
 800a5c8:	9a00      	ldr	r2, [sp, #0]
 800a5ca:	2a0e      	cmp	r2, #14
 800a5cc:	f300 8144 	bgt.w	800a858 <_dtoa_r+0x700>
 800a5d0:	4b67      	ldr	r3, [pc, #412]	; (800a770 <_dtoa_r+0x618>)
 800a5d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f280 80d5 	bge.w	800a78c <_dtoa_r+0x634>
 800a5e2:	9b03      	ldr	r3, [sp, #12]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f300 80d1 	bgt.w	800a78c <_dtoa_r+0x634>
 800a5ea:	f040 826f 	bne.w	800aacc <_dtoa_r+0x974>
 800a5ee:	4b65      	ldr	r3, [pc, #404]	; (800a784 <_dtoa_r+0x62c>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	4640      	mov	r0, r8
 800a5f4:	4649      	mov	r1, r9
 800a5f6:	f7f5 ffff 	bl	80005f8 <__aeabi_dmul>
 800a5fa:	4652      	mov	r2, sl
 800a5fc:	465b      	mov	r3, fp
 800a5fe:	f7f6 fa81 	bl	8000b04 <__aeabi_dcmpge>
 800a602:	9e03      	ldr	r6, [sp, #12]
 800a604:	4637      	mov	r7, r6
 800a606:	2800      	cmp	r0, #0
 800a608:	f040 8245 	bne.w	800aa96 <_dtoa_r+0x93e>
 800a60c:	9d01      	ldr	r5, [sp, #4]
 800a60e:	2331      	movs	r3, #49	; 0x31
 800a610:	f805 3b01 	strb.w	r3, [r5], #1
 800a614:	9b00      	ldr	r3, [sp, #0]
 800a616:	3301      	adds	r3, #1
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	e240      	b.n	800aa9e <_dtoa_r+0x946>
 800a61c:	07f2      	lsls	r2, r6, #31
 800a61e:	d505      	bpl.n	800a62c <_dtoa_r+0x4d4>
 800a620:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a624:	f7f5 ffe8 	bl	80005f8 <__aeabi_dmul>
 800a628:	3501      	adds	r5, #1
 800a62a:	2301      	movs	r3, #1
 800a62c:	1076      	asrs	r6, r6, #1
 800a62e:	3708      	adds	r7, #8
 800a630:	e777      	b.n	800a522 <_dtoa_r+0x3ca>
 800a632:	2502      	movs	r5, #2
 800a634:	e779      	b.n	800a52a <_dtoa_r+0x3d2>
 800a636:	9f00      	ldr	r7, [sp, #0]
 800a638:	9e03      	ldr	r6, [sp, #12]
 800a63a:	e794      	b.n	800a566 <_dtoa_r+0x40e>
 800a63c:	9901      	ldr	r1, [sp, #4]
 800a63e:	4b4c      	ldr	r3, [pc, #304]	; (800a770 <_dtoa_r+0x618>)
 800a640:	4431      	add	r1, r6
 800a642:	910d      	str	r1, [sp, #52]	; 0x34
 800a644:	9908      	ldr	r1, [sp, #32]
 800a646:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a64a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a64e:	2900      	cmp	r1, #0
 800a650:	d043      	beq.n	800a6da <_dtoa_r+0x582>
 800a652:	494d      	ldr	r1, [pc, #308]	; (800a788 <_dtoa_r+0x630>)
 800a654:	2000      	movs	r0, #0
 800a656:	f7f6 f8f9 	bl	800084c <__aeabi_ddiv>
 800a65a:	4652      	mov	r2, sl
 800a65c:	465b      	mov	r3, fp
 800a65e:	f7f5 fe13 	bl	8000288 <__aeabi_dsub>
 800a662:	9d01      	ldr	r5, [sp, #4]
 800a664:	4682      	mov	sl, r0
 800a666:	468b      	mov	fp, r1
 800a668:	4649      	mov	r1, r9
 800a66a:	4640      	mov	r0, r8
 800a66c:	f7f6 fa74 	bl	8000b58 <__aeabi_d2iz>
 800a670:	4606      	mov	r6, r0
 800a672:	f7f5 ff57 	bl	8000524 <__aeabi_i2d>
 800a676:	4602      	mov	r2, r0
 800a678:	460b      	mov	r3, r1
 800a67a:	4640      	mov	r0, r8
 800a67c:	4649      	mov	r1, r9
 800a67e:	f7f5 fe03 	bl	8000288 <__aeabi_dsub>
 800a682:	3630      	adds	r6, #48	; 0x30
 800a684:	f805 6b01 	strb.w	r6, [r5], #1
 800a688:	4652      	mov	r2, sl
 800a68a:	465b      	mov	r3, fp
 800a68c:	4680      	mov	r8, r0
 800a68e:	4689      	mov	r9, r1
 800a690:	f7f6 fa24 	bl	8000adc <__aeabi_dcmplt>
 800a694:	2800      	cmp	r0, #0
 800a696:	d163      	bne.n	800a760 <_dtoa_r+0x608>
 800a698:	4642      	mov	r2, r8
 800a69a:	464b      	mov	r3, r9
 800a69c:	4936      	ldr	r1, [pc, #216]	; (800a778 <_dtoa_r+0x620>)
 800a69e:	2000      	movs	r0, #0
 800a6a0:	f7f5 fdf2 	bl	8000288 <__aeabi_dsub>
 800a6a4:	4652      	mov	r2, sl
 800a6a6:	465b      	mov	r3, fp
 800a6a8:	f7f6 fa18 	bl	8000adc <__aeabi_dcmplt>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	f040 80b5 	bne.w	800a81c <_dtoa_r+0x6c4>
 800a6b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6b4:	429d      	cmp	r5, r3
 800a6b6:	d081      	beq.n	800a5bc <_dtoa_r+0x464>
 800a6b8:	4b30      	ldr	r3, [pc, #192]	; (800a77c <_dtoa_r+0x624>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	4650      	mov	r0, sl
 800a6be:	4659      	mov	r1, fp
 800a6c0:	f7f5 ff9a 	bl	80005f8 <__aeabi_dmul>
 800a6c4:	4b2d      	ldr	r3, [pc, #180]	; (800a77c <_dtoa_r+0x624>)
 800a6c6:	4682      	mov	sl, r0
 800a6c8:	468b      	mov	fp, r1
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f7f5 ff92 	bl	80005f8 <__aeabi_dmul>
 800a6d4:	4680      	mov	r8, r0
 800a6d6:	4689      	mov	r9, r1
 800a6d8:	e7c6      	b.n	800a668 <_dtoa_r+0x510>
 800a6da:	4650      	mov	r0, sl
 800a6dc:	4659      	mov	r1, fp
 800a6de:	f7f5 ff8b 	bl	80005f8 <__aeabi_dmul>
 800a6e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6e4:	9d01      	ldr	r5, [sp, #4]
 800a6e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6e8:	4682      	mov	sl, r0
 800a6ea:	468b      	mov	fp, r1
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	4640      	mov	r0, r8
 800a6f0:	f7f6 fa32 	bl	8000b58 <__aeabi_d2iz>
 800a6f4:	4606      	mov	r6, r0
 800a6f6:	f7f5 ff15 	bl	8000524 <__aeabi_i2d>
 800a6fa:	3630      	adds	r6, #48	; 0x30
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	4640      	mov	r0, r8
 800a702:	4649      	mov	r1, r9
 800a704:	f7f5 fdc0 	bl	8000288 <__aeabi_dsub>
 800a708:	f805 6b01 	strb.w	r6, [r5], #1
 800a70c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a70e:	429d      	cmp	r5, r3
 800a710:	4680      	mov	r8, r0
 800a712:	4689      	mov	r9, r1
 800a714:	f04f 0200 	mov.w	r2, #0
 800a718:	d124      	bne.n	800a764 <_dtoa_r+0x60c>
 800a71a:	4b1b      	ldr	r3, [pc, #108]	; (800a788 <_dtoa_r+0x630>)
 800a71c:	4650      	mov	r0, sl
 800a71e:	4659      	mov	r1, fp
 800a720:	f7f5 fdb4 	bl	800028c <__adddf3>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4640      	mov	r0, r8
 800a72a:	4649      	mov	r1, r9
 800a72c:	f7f6 f9f4 	bl	8000b18 <__aeabi_dcmpgt>
 800a730:	2800      	cmp	r0, #0
 800a732:	d173      	bne.n	800a81c <_dtoa_r+0x6c4>
 800a734:	4652      	mov	r2, sl
 800a736:	465b      	mov	r3, fp
 800a738:	4913      	ldr	r1, [pc, #76]	; (800a788 <_dtoa_r+0x630>)
 800a73a:	2000      	movs	r0, #0
 800a73c:	f7f5 fda4 	bl	8000288 <__aeabi_dsub>
 800a740:	4602      	mov	r2, r0
 800a742:	460b      	mov	r3, r1
 800a744:	4640      	mov	r0, r8
 800a746:	4649      	mov	r1, r9
 800a748:	f7f6 f9c8 	bl	8000adc <__aeabi_dcmplt>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	f43f af35 	beq.w	800a5bc <_dtoa_r+0x464>
 800a752:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a754:	1e6b      	subs	r3, r5, #1
 800a756:	930f      	str	r3, [sp, #60]	; 0x3c
 800a758:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a75c:	2b30      	cmp	r3, #48	; 0x30
 800a75e:	d0f8      	beq.n	800a752 <_dtoa_r+0x5fa>
 800a760:	9700      	str	r7, [sp, #0]
 800a762:	e049      	b.n	800a7f8 <_dtoa_r+0x6a0>
 800a764:	4b05      	ldr	r3, [pc, #20]	; (800a77c <_dtoa_r+0x624>)
 800a766:	f7f5 ff47 	bl	80005f8 <__aeabi_dmul>
 800a76a:	4680      	mov	r8, r0
 800a76c:	4689      	mov	r9, r1
 800a76e:	e7bd      	b.n	800a6ec <_dtoa_r+0x594>
 800a770:	0800df10 	.word	0x0800df10
 800a774:	0800dee8 	.word	0x0800dee8
 800a778:	3ff00000 	.word	0x3ff00000
 800a77c:	40240000 	.word	0x40240000
 800a780:	401c0000 	.word	0x401c0000
 800a784:	40140000 	.word	0x40140000
 800a788:	3fe00000 	.word	0x3fe00000
 800a78c:	9d01      	ldr	r5, [sp, #4]
 800a78e:	4656      	mov	r6, sl
 800a790:	465f      	mov	r7, fp
 800a792:	4642      	mov	r2, r8
 800a794:	464b      	mov	r3, r9
 800a796:	4630      	mov	r0, r6
 800a798:	4639      	mov	r1, r7
 800a79a:	f7f6 f857 	bl	800084c <__aeabi_ddiv>
 800a79e:	f7f6 f9db 	bl	8000b58 <__aeabi_d2iz>
 800a7a2:	4682      	mov	sl, r0
 800a7a4:	f7f5 febe 	bl	8000524 <__aeabi_i2d>
 800a7a8:	4642      	mov	r2, r8
 800a7aa:	464b      	mov	r3, r9
 800a7ac:	f7f5 ff24 	bl	80005f8 <__aeabi_dmul>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	4639      	mov	r1, r7
 800a7b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a7bc:	f7f5 fd64 	bl	8000288 <__aeabi_dsub>
 800a7c0:	f805 6b01 	strb.w	r6, [r5], #1
 800a7c4:	9e01      	ldr	r6, [sp, #4]
 800a7c6:	9f03      	ldr	r7, [sp, #12]
 800a7c8:	1bae      	subs	r6, r5, r6
 800a7ca:	42b7      	cmp	r7, r6
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	d135      	bne.n	800a83e <_dtoa_r+0x6e6>
 800a7d2:	f7f5 fd5b 	bl	800028c <__adddf3>
 800a7d6:	4642      	mov	r2, r8
 800a7d8:	464b      	mov	r3, r9
 800a7da:	4606      	mov	r6, r0
 800a7dc:	460f      	mov	r7, r1
 800a7de:	f7f6 f99b 	bl	8000b18 <__aeabi_dcmpgt>
 800a7e2:	b9d0      	cbnz	r0, 800a81a <_dtoa_r+0x6c2>
 800a7e4:	4642      	mov	r2, r8
 800a7e6:	464b      	mov	r3, r9
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f6 f96c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7f0:	b110      	cbz	r0, 800a7f8 <_dtoa_r+0x6a0>
 800a7f2:	f01a 0f01 	tst.w	sl, #1
 800a7f6:	d110      	bne.n	800a81a <_dtoa_r+0x6c2>
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	ee18 1a10 	vmov	r1, s16
 800a7fe:	f001 f883 	bl	800b908 <_Bfree>
 800a802:	2300      	movs	r3, #0
 800a804:	9800      	ldr	r0, [sp, #0]
 800a806:	702b      	strb	r3, [r5, #0]
 800a808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a80a:	3001      	adds	r0, #1
 800a80c:	6018      	str	r0, [r3, #0]
 800a80e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a810:	2b00      	cmp	r3, #0
 800a812:	f43f acf1 	beq.w	800a1f8 <_dtoa_r+0xa0>
 800a816:	601d      	str	r5, [r3, #0]
 800a818:	e4ee      	b.n	800a1f8 <_dtoa_r+0xa0>
 800a81a:	9f00      	ldr	r7, [sp, #0]
 800a81c:	462b      	mov	r3, r5
 800a81e:	461d      	mov	r5, r3
 800a820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a824:	2a39      	cmp	r2, #57	; 0x39
 800a826:	d106      	bne.n	800a836 <_dtoa_r+0x6de>
 800a828:	9a01      	ldr	r2, [sp, #4]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d1f7      	bne.n	800a81e <_dtoa_r+0x6c6>
 800a82e:	9901      	ldr	r1, [sp, #4]
 800a830:	2230      	movs	r2, #48	; 0x30
 800a832:	3701      	adds	r7, #1
 800a834:	700a      	strb	r2, [r1, #0]
 800a836:	781a      	ldrb	r2, [r3, #0]
 800a838:	3201      	adds	r2, #1
 800a83a:	701a      	strb	r2, [r3, #0]
 800a83c:	e790      	b.n	800a760 <_dtoa_r+0x608>
 800a83e:	4ba6      	ldr	r3, [pc, #664]	; (800aad8 <_dtoa_r+0x980>)
 800a840:	2200      	movs	r2, #0
 800a842:	f7f5 fed9 	bl	80005f8 <__aeabi_dmul>
 800a846:	2200      	movs	r2, #0
 800a848:	2300      	movs	r3, #0
 800a84a:	4606      	mov	r6, r0
 800a84c:	460f      	mov	r7, r1
 800a84e:	f7f6 f93b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a852:	2800      	cmp	r0, #0
 800a854:	d09d      	beq.n	800a792 <_dtoa_r+0x63a>
 800a856:	e7cf      	b.n	800a7f8 <_dtoa_r+0x6a0>
 800a858:	9a08      	ldr	r2, [sp, #32]
 800a85a:	2a00      	cmp	r2, #0
 800a85c:	f000 80d7 	beq.w	800aa0e <_dtoa_r+0x8b6>
 800a860:	9a06      	ldr	r2, [sp, #24]
 800a862:	2a01      	cmp	r2, #1
 800a864:	f300 80ba 	bgt.w	800a9dc <_dtoa_r+0x884>
 800a868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a86a:	2a00      	cmp	r2, #0
 800a86c:	f000 80b2 	beq.w	800a9d4 <_dtoa_r+0x87c>
 800a870:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a874:	9e07      	ldr	r6, [sp, #28]
 800a876:	9d04      	ldr	r5, [sp, #16]
 800a878:	9a04      	ldr	r2, [sp, #16]
 800a87a:	441a      	add	r2, r3
 800a87c:	9204      	str	r2, [sp, #16]
 800a87e:	9a05      	ldr	r2, [sp, #20]
 800a880:	2101      	movs	r1, #1
 800a882:	441a      	add	r2, r3
 800a884:	4620      	mov	r0, r4
 800a886:	9205      	str	r2, [sp, #20]
 800a888:	f001 f940 	bl	800bb0c <__i2b>
 800a88c:	4607      	mov	r7, r0
 800a88e:	2d00      	cmp	r5, #0
 800a890:	dd0c      	ble.n	800a8ac <_dtoa_r+0x754>
 800a892:	9b05      	ldr	r3, [sp, #20]
 800a894:	2b00      	cmp	r3, #0
 800a896:	dd09      	ble.n	800a8ac <_dtoa_r+0x754>
 800a898:	42ab      	cmp	r3, r5
 800a89a:	9a04      	ldr	r2, [sp, #16]
 800a89c:	bfa8      	it	ge
 800a89e:	462b      	movge	r3, r5
 800a8a0:	1ad2      	subs	r2, r2, r3
 800a8a2:	9204      	str	r2, [sp, #16]
 800a8a4:	9a05      	ldr	r2, [sp, #20]
 800a8a6:	1aed      	subs	r5, r5, r3
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	9305      	str	r3, [sp, #20]
 800a8ac:	9b07      	ldr	r3, [sp, #28]
 800a8ae:	b31b      	cbz	r3, 800a8f8 <_dtoa_r+0x7a0>
 800a8b0:	9b08      	ldr	r3, [sp, #32]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 80af 	beq.w	800aa16 <_dtoa_r+0x8be>
 800a8b8:	2e00      	cmp	r6, #0
 800a8ba:	dd13      	ble.n	800a8e4 <_dtoa_r+0x78c>
 800a8bc:	4639      	mov	r1, r7
 800a8be:	4632      	mov	r2, r6
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f001 f9e3 	bl	800bc8c <__pow5mult>
 800a8c6:	ee18 2a10 	vmov	r2, s16
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	4607      	mov	r7, r0
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f001 f932 	bl	800bb38 <__multiply>
 800a8d4:	ee18 1a10 	vmov	r1, s16
 800a8d8:	4680      	mov	r8, r0
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f001 f814 	bl	800b908 <_Bfree>
 800a8e0:	ee08 8a10 	vmov	s16, r8
 800a8e4:	9b07      	ldr	r3, [sp, #28]
 800a8e6:	1b9a      	subs	r2, r3, r6
 800a8e8:	d006      	beq.n	800a8f8 <_dtoa_r+0x7a0>
 800a8ea:	ee18 1a10 	vmov	r1, s16
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f001 f9cc 	bl	800bc8c <__pow5mult>
 800a8f4:	ee08 0a10 	vmov	s16, r0
 800a8f8:	2101      	movs	r1, #1
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f001 f906 	bl	800bb0c <__i2b>
 800a900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a902:	2b00      	cmp	r3, #0
 800a904:	4606      	mov	r6, r0
 800a906:	f340 8088 	ble.w	800aa1a <_dtoa_r+0x8c2>
 800a90a:	461a      	mov	r2, r3
 800a90c:	4601      	mov	r1, r0
 800a90e:	4620      	mov	r0, r4
 800a910:	f001 f9bc 	bl	800bc8c <__pow5mult>
 800a914:	9b06      	ldr	r3, [sp, #24]
 800a916:	2b01      	cmp	r3, #1
 800a918:	4606      	mov	r6, r0
 800a91a:	f340 8081 	ble.w	800aa20 <_dtoa_r+0x8c8>
 800a91e:	f04f 0800 	mov.w	r8, #0
 800a922:	6933      	ldr	r3, [r6, #16]
 800a924:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a928:	6918      	ldr	r0, [r3, #16]
 800a92a:	f001 f89f 	bl	800ba6c <__hi0bits>
 800a92e:	f1c0 0020 	rsb	r0, r0, #32
 800a932:	9b05      	ldr	r3, [sp, #20]
 800a934:	4418      	add	r0, r3
 800a936:	f010 001f 	ands.w	r0, r0, #31
 800a93a:	f000 8092 	beq.w	800aa62 <_dtoa_r+0x90a>
 800a93e:	f1c0 0320 	rsb	r3, r0, #32
 800a942:	2b04      	cmp	r3, #4
 800a944:	f340 808a 	ble.w	800aa5c <_dtoa_r+0x904>
 800a948:	f1c0 001c 	rsb	r0, r0, #28
 800a94c:	9b04      	ldr	r3, [sp, #16]
 800a94e:	4403      	add	r3, r0
 800a950:	9304      	str	r3, [sp, #16]
 800a952:	9b05      	ldr	r3, [sp, #20]
 800a954:	4403      	add	r3, r0
 800a956:	4405      	add	r5, r0
 800a958:	9305      	str	r3, [sp, #20]
 800a95a:	9b04      	ldr	r3, [sp, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dd07      	ble.n	800a970 <_dtoa_r+0x818>
 800a960:	ee18 1a10 	vmov	r1, s16
 800a964:	461a      	mov	r2, r3
 800a966:	4620      	mov	r0, r4
 800a968:	f001 f9ea 	bl	800bd40 <__lshift>
 800a96c:	ee08 0a10 	vmov	s16, r0
 800a970:	9b05      	ldr	r3, [sp, #20]
 800a972:	2b00      	cmp	r3, #0
 800a974:	dd05      	ble.n	800a982 <_dtoa_r+0x82a>
 800a976:	4631      	mov	r1, r6
 800a978:	461a      	mov	r2, r3
 800a97a:	4620      	mov	r0, r4
 800a97c:	f001 f9e0 	bl	800bd40 <__lshift>
 800a980:	4606      	mov	r6, r0
 800a982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a984:	2b00      	cmp	r3, #0
 800a986:	d06e      	beq.n	800aa66 <_dtoa_r+0x90e>
 800a988:	ee18 0a10 	vmov	r0, s16
 800a98c:	4631      	mov	r1, r6
 800a98e:	f001 fa47 	bl	800be20 <__mcmp>
 800a992:	2800      	cmp	r0, #0
 800a994:	da67      	bge.n	800aa66 <_dtoa_r+0x90e>
 800a996:	9b00      	ldr	r3, [sp, #0]
 800a998:	3b01      	subs	r3, #1
 800a99a:	ee18 1a10 	vmov	r1, s16
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	220a      	movs	r2, #10
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f000 ffd1 	bl	800b94c <__multadd>
 800a9aa:	9b08      	ldr	r3, [sp, #32]
 800a9ac:	ee08 0a10 	vmov	s16, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 81b1 	beq.w	800ad18 <_dtoa_r+0xbc0>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	220a      	movs	r2, #10
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f000 ffc5 	bl	800b94c <__multadd>
 800a9c2:	9b02      	ldr	r3, [sp, #8]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	4607      	mov	r7, r0
 800a9c8:	f300 808e 	bgt.w	800aae8 <_dtoa_r+0x990>
 800a9cc:	9b06      	ldr	r3, [sp, #24]
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	dc51      	bgt.n	800aa76 <_dtoa_r+0x91e>
 800a9d2:	e089      	b.n	800aae8 <_dtoa_r+0x990>
 800a9d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9da:	e74b      	b.n	800a874 <_dtoa_r+0x71c>
 800a9dc:	9b03      	ldr	r3, [sp, #12]
 800a9de:	1e5e      	subs	r6, r3, #1
 800a9e0:	9b07      	ldr	r3, [sp, #28]
 800a9e2:	42b3      	cmp	r3, r6
 800a9e4:	bfbf      	itttt	lt
 800a9e6:	9b07      	ldrlt	r3, [sp, #28]
 800a9e8:	9607      	strlt	r6, [sp, #28]
 800a9ea:	1af2      	sublt	r2, r6, r3
 800a9ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a9ee:	bfb6      	itet	lt
 800a9f0:	189b      	addlt	r3, r3, r2
 800a9f2:	1b9e      	subge	r6, r3, r6
 800a9f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a9f6:	9b03      	ldr	r3, [sp, #12]
 800a9f8:	bfb8      	it	lt
 800a9fa:	2600      	movlt	r6, #0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	bfb7      	itett	lt
 800aa00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aa04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aa08:	1a9d      	sublt	r5, r3, r2
 800aa0a:	2300      	movlt	r3, #0
 800aa0c:	e734      	b.n	800a878 <_dtoa_r+0x720>
 800aa0e:	9e07      	ldr	r6, [sp, #28]
 800aa10:	9d04      	ldr	r5, [sp, #16]
 800aa12:	9f08      	ldr	r7, [sp, #32]
 800aa14:	e73b      	b.n	800a88e <_dtoa_r+0x736>
 800aa16:	9a07      	ldr	r2, [sp, #28]
 800aa18:	e767      	b.n	800a8ea <_dtoa_r+0x792>
 800aa1a:	9b06      	ldr	r3, [sp, #24]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	dc18      	bgt.n	800aa52 <_dtoa_r+0x8fa>
 800aa20:	f1ba 0f00 	cmp.w	sl, #0
 800aa24:	d115      	bne.n	800aa52 <_dtoa_r+0x8fa>
 800aa26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa2a:	b993      	cbnz	r3, 800aa52 <_dtoa_r+0x8fa>
 800aa2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa30:	0d1b      	lsrs	r3, r3, #20
 800aa32:	051b      	lsls	r3, r3, #20
 800aa34:	b183      	cbz	r3, 800aa58 <_dtoa_r+0x900>
 800aa36:	9b04      	ldr	r3, [sp, #16]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	9304      	str	r3, [sp, #16]
 800aa3c:	9b05      	ldr	r3, [sp, #20]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	9305      	str	r3, [sp, #20]
 800aa42:	f04f 0801 	mov.w	r8, #1
 800aa46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f47f af6a 	bne.w	800a922 <_dtoa_r+0x7ca>
 800aa4e:	2001      	movs	r0, #1
 800aa50:	e76f      	b.n	800a932 <_dtoa_r+0x7da>
 800aa52:	f04f 0800 	mov.w	r8, #0
 800aa56:	e7f6      	b.n	800aa46 <_dtoa_r+0x8ee>
 800aa58:	4698      	mov	r8, r3
 800aa5a:	e7f4      	b.n	800aa46 <_dtoa_r+0x8ee>
 800aa5c:	f43f af7d 	beq.w	800a95a <_dtoa_r+0x802>
 800aa60:	4618      	mov	r0, r3
 800aa62:	301c      	adds	r0, #28
 800aa64:	e772      	b.n	800a94c <_dtoa_r+0x7f4>
 800aa66:	9b03      	ldr	r3, [sp, #12]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	dc37      	bgt.n	800aadc <_dtoa_r+0x984>
 800aa6c:	9b06      	ldr	r3, [sp, #24]
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	dd34      	ble.n	800aadc <_dtoa_r+0x984>
 800aa72:	9b03      	ldr	r3, [sp, #12]
 800aa74:	9302      	str	r3, [sp, #8]
 800aa76:	9b02      	ldr	r3, [sp, #8]
 800aa78:	b96b      	cbnz	r3, 800aa96 <_dtoa_r+0x93e>
 800aa7a:	4631      	mov	r1, r6
 800aa7c:	2205      	movs	r2, #5
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f000 ff64 	bl	800b94c <__multadd>
 800aa84:	4601      	mov	r1, r0
 800aa86:	4606      	mov	r6, r0
 800aa88:	ee18 0a10 	vmov	r0, s16
 800aa8c:	f001 f9c8 	bl	800be20 <__mcmp>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	f73f adbb 	bgt.w	800a60c <_dtoa_r+0x4b4>
 800aa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa98:	9d01      	ldr	r5, [sp, #4]
 800aa9a:	43db      	mvns	r3, r3
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	f04f 0800 	mov.w	r8, #0
 800aaa2:	4631      	mov	r1, r6
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 ff2f 	bl	800b908 <_Bfree>
 800aaaa:	2f00      	cmp	r7, #0
 800aaac:	f43f aea4 	beq.w	800a7f8 <_dtoa_r+0x6a0>
 800aab0:	f1b8 0f00 	cmp.w	r8, #0
 800aab4:	d005      	beq.n	800aac2 <_dtoa_r+0x96a>
 800aab6:	45b8      	cmp	r8, r7
 800aab8:	d003      	beq.n	800aac2 <_dtoa_r+0x96a>
 800aaba:	4641      	mov	r1, r8
 800aabc:	4620      	mov	r0, r4
 800aabe:	f000 ff23 	bl	800b908 <_Bfree>
 800aac2:	4639      	mov	r1, r7
 800aac4:	4620      	mov	r0, r4
 800aac6:	f000 ff1f 	bl	800b908 <_Bfree>
 800aaca:	e695      	b.n	800a7f8 <_dtoa_r+0x6a0>
 800aacc:	2600      	movs	r6, #0
 800aace:	4637      	mov	r7, r6
 800aad0:	e7e1      	b.n	800aa96 <_dtoa_r+0x93e>
 800aad2:	9700      	str	r7, [sp, #0]
 800aad4:	4637      	mov	r7, r6
 800aad6:	e599      	b.n	800a60c <_dtoa_r+0x4b4>
 800aad8:	40240000 	.word	0x40240000
 800aadc:	9b08      	ldr	r3, [sp, #32]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f000 80ca 	beq.w	800ac78 <_dtoa_r+0xb20>
 800aae4:	9b03      	ldr	r3, [sp, #12]
 800aae6:	9302      	str	r3, [sp, #8]
 800aae8:	2d00      	cmp	r5, #0
 800aaea:	dd05      	ble.n	800aaf8 <_dtoa_r+0x9a0>
 800aaec:	4639      	mov	r1, r7
 800aaee:	462a      	mov	r2, r5
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f001 f925 	bl	800bd40 <__lshift>
 800aaf6:	4607      	mov	r7, r0
 800aaf8:	f1b8 0f00 	cmp.w	r8, #0
 800aafc:	d05b      	beq.n	800abb6 <_dtoa_r+0xa5e>
 800aafe:	6879      	ldr	r1, [r7, #4]
 800ab00:	4620      	mov	r0, r4
 800ab02:	f000 fec1 	bl	800b888 <_Balloc>
 800ab06:	4605      	mov	r5, r0
 800ab08:	b928      	cbnz	r0, 800ab16 <_dtoa_r+0x9be>
 800ab0a:	4b87      	ldr	r3, [pc, #540]	; (800ad28 <_dtoa_r+0xbd0>)
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab12:	f7ff bb3b 	b.w	800a18c <_dtoa_r+0x34>
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	3202      	adds	r2, #2
 800ab1a:	0092      	lsls	r2, r2, #2
 800ab1c:	f107 010c 	add.w	r1, r7, #12
 800ab20:	300c      	adds	r0, #12
 800ab22:	f000 fe97 	bl	800b854 <memcpy>
 800ab26:	2201      	movs	r2, #1
 800ab28:	4629      	mov	r1, r5
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f001 f908 	bl	800bd40 <__lshift>
 800ab30:	9b01      	ldr	r3, [sp, #4]
 800ab32:	f103 0901 	add.w	r9, r3, #1
 800ab36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	9305      	str	r3, [sp, #20]
 800ab3e:	f00a 0301 	and.w	r3, sl, #1
 800ab42:	46b8      	mov	r8, r7
 800ab44:	9304      	str	r3, [sp, #16]
 800ab46:	4607      	mov	r7, r0
 800ab48:	4631      	mov	r1, r6
 800ab4a:	ee18 0a10 	vmov	r0, s16
 800ab4e:	f7ff fa77 	bl	800a040 <quorem>
 800ab52:	4641      	mov	r1, r8
 800ab54:	9002      	str	r0, [sp, #8]
 800ab56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab5a:	ee18 0a10 	vmov	r0, s16
 800ab5e:	f001 f95f 	bl	800be20 <__mcmp>
 800ab62:	463a      	mov	r2, r7
 800ab64:	9003      	str	r0, [sp, #12]
 800ab66:	4631      	mov	r1, r6
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f001 f975 	bl	800be58 <__mdiff>
 800ab6e:	68c2      	ldr	r2, [r0, #12]
 800ab70:	f109 3bff 	add.w	fp, r9, #4294967295
 800ab74:	4605      	mov	r5, r0
 800ab76:	bb02      	cbnz	r2, 800abba <_dtoa_r+0xa62>
 800ab78:	4601      	mov	r1, r0
 800ab7a:	ee18 0a10 	vmov	r0, s16
 800ab7e:	f001 f94f 	bl	800be20 <__mcmp>
 800ab82:	4602      	mov	r2, r0
 800ab84:	4629      	mov	r1, r5
 800ab86:	4620      	mov	r0, r4
 800ab88:	9207      	str	r2, [sp, #28]
 800ab8a:	f000 febd 	bl	800b908 <_Bfree>
 800ab8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ab92:	ea43 0102 	orr.w	r1, r3, r2
 800ab96:	9b04      	ldr	r3, [sp, #16]
 800ab98:	430b      	orrs	r3, r1
 800ab9a:	464d      	mov	r5, r9
 800ab9c:	d10f      	bne.n	800abbe <_dtoa_r+0xa66>
 800ab9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aba2:	d02a      	beq.n	800abfa <_dtoa_r+0xaa2>
 800aba4:	9b03      	ldr	r3, [sp, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	dd02      	ble.n	800abb0 <_dtoa_r+0xa58>
 800abaa:	9b02      	ldr	r3, [sp, #8]
 800abac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800abb0:	f88b a000 	strb.w	sl, [fp]
 800abb4:	e775      	b.n	800aaa2 <_dtoa_r+0x94a>
 800abb6:	4638      	mov	r0, r7
 800abb8:	e7ba      	b.n	800ab30 <_dtoa_r+0x9d8>
 800abba:	2201      	movs	r2, #1
 800abbc:	e7e2      	b.n	800ab84 <_dtoa_r+0xa2c>
 800abbe:	9b03      	ldr	r3, [sp, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	db04      	blt.n	800abce <_dtoa_r+0xa76>
 800abc4:	9906      	ldr	r1, [sp, #24]
 800abc6:	430b      	orrs	r3, r1
 800abc8:	9904      	ldr	r1, [sp, #16]
 800abca:	430b      	orrs	r3, r1
 800abcc:	d122      	bne.n	800ac14 <_dtoa_r+0xabc>
 800abce:	2a00      	cmp	r2, #0
 800abd0:	ddee      	ble.n	800abb0 <_dtoa_r+0xa58>
 800abd2:	ee18 1a10 	vmov	r1, s16
 800abd6:	2201      	movs	r2, #1
 800abd8:	4620      	mov	r0, r4
 800abda:	f001 f8b1 	bl	800bd40 <__lshift>
 800abde:	4631      	mov	r1, r6
 800abe0:	ee08 0a10 	vmov	s16, r0
 800abe4:	f001 f91c 	bl	800be20 <__mcmp>
 800abe8:	2800      	cmp	r0, #0
 800abea:	dc03      	bgt.n	800abf4 <_dtoa_r+0xa9c>
 800abec:	d1e0      	bne.n	800abb0 <_dtoa_r+0xa58>
 800abee:	f01a 0f01 	tst.w	sl, #1
 800abf2:	d0dd      	beq.n	800abb0 <_dtoa_r+0xa58>
 800abf4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800abf8:	d1d7      	bne.n	800abaa <_dtoa_r+0xa52>
 800abfa:	2339      	movs	r3, #57	; 0x39
 800abfc:	f88b 3000 	strb.w	r3, [fp]
 800ac00:	462b      	mov	r3, r5
 800ac02:	461d      	mov	r5, r3
 800ac04:	3b01      	subs	r3, #1
 800ac06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac0a:	2a39      	cmp	r2, #57	; 0x39
 800ac0c:	d071      	beq.n	800acf2 <_dtoa_r+0xb9a>
 800ac0e:	3201      	adds	r2, #1
 800ac10:	701a      	strb	r2, [r3, #0]
 800ac12:	e746      	b.n	800aaa2 <_dtoa_r+0x94a>
 800ac14:	2a00      	cmp	r2, #0
 800ac16:	dd07      	ble.n	800ac28 <_dtoa_r+0xad0>
 800ac18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac1c:	d0ed      	beq.n	800abfa <_dtoa_r+0xaa2>
 800ac1e:	f10a 0301 	add.w	r3, sl, #1
 800ac22:	f88b 3000 	strb.w	r3, [fp]
 800ac26:	e73c      	b.n	800aaa2 <_dtoa_r+0x94a>
 800ac28:	9b05      	ldr	r3, [sp, #20]
 800ac2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ac2e:	4599      	cmp	r9, r3
 800ac30:	d047      	beq.n	800acc2 <_dtoa_r+0xb6a>
 800ac32:	ee18 1a10 	vmov	r1, s16
 800ac36:	2300      	movs	r3, #0
 800ac38:	220a      	movs	r2, #10
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f000 fe86 	bl	800b94c <__multadd>
 800ac40:	45b8      	cmp	r8, r7
 800ac42:	ee08 0a10 	vmov	s16, r0
 800ac46:	f04f 0300 	mov.w	r3, #0
 800ac4a:	f04f 020a 	mov.w	r2, #10
 800ac4e:	4641      	mov	r1, r8
 800ac50:	4620      	mov	r0, r4
 800ac52:	d106      	bne.n	800ac62 <_dtoa_r+0xb0a>
 800ac54:	f000 fe7a 	bl	800b94c <__multadd>
 800ac58:	4680      	mov	r8, r0
 800ac5a:	4607      	mov	r7, r0
 800ac5c:	f109 0901 	add.w	r9, r9, #1
 800ac60:	e772      	b.n	800ab48 <_dtoa_r+0x9f0>
 800ac62:	f000 fe73 	bl	800b94c <__multadd>
 800ac66:	4639      	mov	r1, r7
 800ac68:	4680      	mov	r8, r0
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	220a      	movs	r2, #10
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f000 fe6c 	bl	800b94c <__multadd>
 800ac74:	4607      	mov	r7, r0
 800ac76:	e7f1      	b.n	800ac5c <_dtoa_r+0xb04>
 800ac78:	9b03      	ldr	r3, [sp, #12]
 800ac7a:	9302      	str	r3, [sp, #8]
 800ac7c:	9d01      	ldr	r5, [sp, #4]
 800ac7e:	ee18 0a10 	vmov	r0, s16
 800ac82:	4631      	mov	r1, r6
 800ac84:	f7ff f9dc 	bl	800a040 <quorem>
 800ac88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac8c:	9b01      	ldr	r3, [sp, #4]
 800ac8e:	f805 ab01 	strb.w	sl, [r5], #1
 800ac92:	1aea      	subs	r2, r5, r3
 800ac94:	9b02      	ldr	r3, [sp, #8]
 800ac96:	4293      	cmp	r3, r2
 800ac98:	dd09      	ble.n	800acae <_dtoa_r+0xb56>
 800ac9a:	ee18 1a10 	vmov	r1, s16
 800ac9e:	2300      	movs	r3, #0
 800aca0:	220a      	movs	r2, #10
 800aca2:	4620      	mov	r0, r4
 800aca4:	f000 fe52 	bl	800b94c <__multadd>
 800aca8:	ee08 0a10 	vmov	s16, r0
 800acac:	e7e7      	b.n	800ac7e <_dtoa_r+0xb26>
 800acae:	9b02      	ldr	r3, [sp, #8]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	bfc8      	it	gt
 800acb4:	461d      	movgt	r5, r3
 800acb6:	9b01      	ldr	r3, [sp, #4]
 800acb8:	bfd8      	it	le
 800acba:	2501      	movle	r5, #1
 800acbc:	441d      	add	r5, r3
 800acbe:	f04f 0800 	mov.w	r8, #0
 800acc2:	ee18 1a10 	vmov	r1, s16
 800acc6:	2201      	movs	r2, #1
 800acc8:	4620      	mov	r0, r4
 800acca:	f001 f839 	bl	800bd40 <__lshift>
 800acce:	4631      	mov	r1, r6
 800acd0:	ee08 0a10 	vmov	s16, r0
 800acd4:	f001 f8a4 	bl	800be20 <__mcmp>
 800acd8:	2800      	cmp	r0, #0
 800acda:	dc91      	bgt.n	800ac00 <_dtoa_r+0xaa8>
 800acdc:	d102      	bne.n	800ace4 <_dtoa_r+0xb8c>
 800acde:	f01a 0f01 	tst.w	sl, #1
 800ace2:	d18d      	bne.n	800ac00 <_dtoa_r+0xaa8>
 800ace4:	462b      	mov	r3, r5
 800ace6:	461d      	mov	r5, r3
 800ace8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acec:	2a30      	cmp	r2, #48	; 0x30
 800acee:	d0fa      	beq.n	800ace6 <_dtoa_r+0xb8e>
 800acf0:	e6d7      	b.n	800aaa2 <_dtoa_r+0x94a>
 800acf2:	9a01      	ldr	r2, [sp, #4]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d184      	bne.n	800ac02 <_dtoa_r+0xaaa>
 800acf8:	9b00      	ldr	r3, [sp, #0]
 800acfa:	3301      	adds	r3, #1
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	2331      	movs	r3, #49	; 0x31
 800ad00:	7013      	strb	r3, [r2, #0]
 800ad02:	e6ce      	b.n	800aaa2 <_dtoa_r+0x94a>
 800ad04:	4b09      	ldr	r3, [pc, #36]	; (800ad2c <_dtoa_r+0xbd4>)
 800ad06:	f7ff ba95 	b.w	800a234 <_dtoa_r+0xdc>
 800ad0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f47f aa6e 	bne.w	800a1ee <_dtoa_r+0x96>
 800ad12:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <_dtoa_r+0xbd8>)
 800ad14:	f7ff ba8e 	b.w	800a234 <_dtoa_r+0xdc>
 800ad18:	9b02      	ldr	r3, [sp, #8]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	dcae      	bgt.n	800ac7c <_dtoa_r+0xb24>
 800ad1e:	9b06      	ldr	r3, [sp, #24]
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	f73f aea8 	bgt.w	800aa76 <_dtoa_r+0x91e>
 800ad26:	e7a9      	b.n	800ac7c <_dtoa_r+0xb24>
 800ad28:	0800dd98 	.word	0x0800dd98
 800ad2c:	0800dff9 	.word	0x0800dff9
 800ad30:	0800dd19 	.word	0x0800dd19

0800ad34 <__sflush_r>:
 800ad34:	898a      	ldrh	r2, [r1, #12]
 800ad36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	0710      	lsls	r0, r2, #28
 800ad3e:	460c      	mov	r4, r1
 800ad40:	d458      	bmi.n	800adf4 <__sflush_r+0xc0>
 800ad42:	684b      	ldr	r3, [r1, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	dc05      	bgt.n	800ad54 <__sflush_r+0x20>
 800ad48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	dc02      	bgt.n	800ad54 <__sflush_r+0x20>
 800ad4e:	2000      	movs	r0, #0
 800ad50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad56:	2e00      	cmp	r6, #0
 800ad58:	d0f9      	beq.n	800ad4e <__sflush_r+0x1a>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad60:	682f      	ldr	r7, [r5, #0]
 800ad62:	602b      	str	r3, [r5, #0]
 800ad64:	d032      	beq.n	800adcc <__sflush_r+0x98>
 800ad66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	075a      	lsls	r2, r3, #29
 800ad6c:	d505      	bpl.n	800ad7a <__sflush_r+0x46>
 800ad6e:	6863      	ldr	r3, [r4, #4]
 800ad70:	1ac0      	subs	r0, r0, r3
 800ad72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad74:	b10b      	cbz	r3, 800ad7a <__sflush_r+0x46>
 800ad76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad78:	1ac0      	subs	r0, r0, r3
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad80:	6a21      	ldr	r1, [r4, #32]
 800ad82:	4628      	mov	r0, r5
 800ad84:	47b0      	blx	r6
 800ad86:	1c43      	adds	r3, r0, #1
 800ad88:	89a3      	ldrh	r3, [r4, #12]
 800ad8a:	d106      	bne.n	800ad9a <__sflush_r+0x66>
 800ad8c:	6829      	ldr	r1, [r5, #0]
 800ad8e:	291d      	cmp	r1, #29
 800ad90:	d82c      	bhi.n	800adec <__sflush_r+0xb8>
 800ad92:	4a2a      	ldr	r2, [pc, #168]	; (800ae3c <__sflush_r+0x108>)
 800ad94:	40ca      	lsrs	r2, r1
 800ad96:	07d6      	lsls	r6, r2, #31
 800ad98:	d528      	bpl.n	800adec <__sflush_r+0xb8>
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	6062      	str	r2, [r4, #4]
 800ad9e:	04d9      	lsls	r1, r3, #19
 800ada0:	6922      	ldr	r2, [r4, #16]
 800ada2:	6022      	str	r2, [r4, #0]
 800ada4:	d504      	bpl.n	800adb0 <__sflush_r+0x7c>
 800ada6:	1c42      	adds	r2, r0, #1
 800ada8:	d101      	bne.n	800adae <__sflush_r+0x7a>
 800adaa:	682b      	ldr	r3, [r5, #0]
 800adac:	b903      	cbnz	r3, 800adb0 <__sflush_r+0x7c>
 800adae:	6560      	str	r0, [r4, #84]	; 0x54
 800adb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adb2:	602f      	str	r7, [r5, #0]
 800adb4:	2900      	cmp	r1, #0
 800adb6:	d0ca      	beq.n	800ad4e <__sflush_r+0x1a>
 800adb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adbc:	4299      	cmp	r1, r3
 800adbe:	d002      	beq.n	800adc6 <__sflush_r+0x92>
 800adc0:	4628      	mov	r0, r5
 800adc2:	f7fc ff7f 	bl	8007cc4 <_free_r>
 800adc6:	2000      	movs	r0, #0
 800adc8:	6360      	str	r0, [r4, #52]	; 0x34
 800adca:	e7c1      	b.n	800ad50 <__sflush_r+0x1c>
 800adcc:	6a21      	ldr	r1, [r4, #32]
 800adce:	2301      	movs	r3, #1
 800add0:	4628      	mov	r0, r5
 800add2:	47b0      	blx	r6
 800add4:	1c41      	adds	r1, r0, #1
 800add6:	d1c7      	bne.n	800ad68 <__sflush_r+0x34>
 800add8:	682b      	ldr	r3, [r5, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0c4      	beq.n	800ad68 <__sflush_r+0x34>
 800adde:	2b1d      	cmp	r3, #29
 800ade0:	d001      	beq.n	800ade6 <__sflush_r+0xb2>
 800ade2:	2b16      	cmp	r3, #22
 800ade4:	d101      	bne.n	800adea <__sflush_r+0xb6>
 800ade6:	602f      	str	r7, [r5, #0]
 800ade8:	e7b1      	b.n	800ad4e <__sflush_r+0x1a>
 800adea:	89a3      	ldrh	r3, [r4, #12]
 800adec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	e7ad      	b.n	800ad50 <__sflush_r+0x1c>
 800adf4:	690f      	ldr	r7, [r1, #16]
 800adf6:	2f00      	cmp	r7, #0
 800adf8:	d0a9      	beq.n	800ad4e <__sflush_r+0x1a>
 800adfa:	0793      	lsls	r3, r2, #30
 800adfc:	680e      	ldr	r6, [r1, #0]
 800adfe:	bf08      	it	eq
 800ae00:	694b      	ldreq	r3, [r1, #20]
 800ae02:	600f      	str	r7, [r1, #0]
 800ae04:	bf18      	it	ne
 800ae06:	2300      	movne	r3, #0
 800ae08:	eba6 0807 	sub.w	r8, r6, r7
 800ae0c:	608b      	str	r3, [r1, #8]
 800ae0e:	f1b8 0f00 	cmp.w	r8, #0
 800ae12:	dd9c      	ble.n	800ad4e <__sflush_r+0x1a>
 800ae14:	6a21      	ldr	r1, [r4, #32]
 800ae16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae18:	4643      	mov	r3, r8
 800ae1a:	463a      	mov	r2, r7
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	47b0      	blx	r6
 800ae20:	2800      	cmp	r0, #0
 800ae22:	dc06      	bgt.n	800ae32 <__sflush_r+0xfe>
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae2a:	81a3      	strh	r3, [r4, #12]
 800ae2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae30:	e78e      	b.n	800ad50 <__sflush_r+0x1c>
 800ae32:	4407      	add	r7, r0
 800ae34:	eba8 0800 	sub.w	r8, r8, r0
 800ae38:	e7e9      	b.n	800ae0e <__sflush_r+0xda>
 800ae3a:	bf00      	nop
 800ae3c:	20400001 	.word	0x20400001

0800ae40 <_fflush_r>:
 800ae40:	b538      	push	{r3, r4, r5, lr}
 800ae42:	690b      	ldr	r3, [r1, #16]
 800ae44:	4605      	mov	r5, r0
 800ae46:	460c      	mov	r4, r1
 800ae48:	b913      	cbnz	r3, 800ae50 <_fflush_r+0x10>
 800ae4a:	2500      	movs	r5, #0
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	bd38      	pop	{r3, r4, r5, pc}
 800ae50:	b118      	cbz	r0, 800ae5a <_fflush_r+0x1a>
 800ae52:	6983      	ldr	r3, [r0, #24]
 800ae54:	b90b      	cbnz	r3, 800ae5a <_fflush_r+0x1a>
 800ae56:	f000 f8c5 	bl	800afe4 <__sinit>
 800ae5a:	4b14      	ldr	r3, [pc, #80]	; (800aeac <_fflush_r+0x6c>)
 800ae5c:	429c      	cmp	r4, r3
 800ae5e:	d11b      	bne.n	800ae98 <_fflush_r+0x58>
 800ae60:	686c      	ldr	r4, [r5, #4]
 800ae62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d0ef      	beq.n	800ae4a <_fflush_r+0xa>
 800ae6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae6c:	07d0      	lsls	r0, r2, #31
 800ae6e:	d404      	bmi.n	800ae7a <_fflush_r+0x3a>
 800ae70:	0599      	lsls	r1, r3, #22
 800ae72:	d402      	bmi.n	800ae7a <_fflush_r+0x3a>
 800ae74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae76:	f000 fcc6 	bl	800b806 <__retarget_lock_acquire_recursive>
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	f7ff ff59 	bl	800ad34 <__sflush_r>
 800ae82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae84:	07da      	lsls	r2, r3, #31
 800ae86:	4605      	mov	r5, r0
 800ae88:	d4e0      	bmi.n	800ae4c <_fflush_r+0xc>
 800ae8a:	89a3      	ldrh	r3, [r4, #12]
 800ae8c:	059b      	lsls	r3, r3, #22
 800ae8e:	d4dd      	bmi.n	800ae4c <_fflush_r+0xc>
 800ae90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae92:	f000 fcb9 	bl	800b808 <__retarget_lock_release_recursive>
 800ae96:	e7d9      	b.n	800ae4c <_fflush_r+0xc>
 800ae98:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <_fflush_r+0x70>)
 800ae9a:	429c      	cmp	r4, r3
 800ae9c:	d101      	bne.n	800aea2 <_fflush_r+0x62>
 800ae9e:	68ac      	ldr	r4, [r5, #8]
 800aea0:	e7df      	b.n	800ae62 <_fflush_r+0x22>
 800aea2:	4b04      	ldr	r3, [pc, #16]	; (800aeb4 <_fflush_r+0x74>)
 800aea4:	429c      	cmp	r4, r3
 800aea6:	bf08      	it	eq
 800aea8:	68ec      	ldreq	r4, [r5, #12]
 800aeaa:	e7da      	b.n	800ae62 <_fflush_r+0x22>
 800aeac:	0800ddcc 	.word	0x0800ddcc
 800aeb0:	0800ddec 	.word	0x0800ddec
 800aeb4:	0800ddac 	.word	0x0800ddac

0800aeb8 <fileno>:
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	4e1a      	ldr	r6, [pc, #104]	; (800af24 <fileno+0x6c>)
 800aebc:	6835      	ldr	r5, [r6, #0]
 800aebe:	4604      	mov	r4, r0
 800aec0:	b125      	cbz	r5, 800aecc <fileno+0x14>
 800aec2:	69ab      	ldr	r3, [r5, #24]
 800aec4:	b913      	cbnz	r3, 800aecc <fileno+0x14>
 800aec6:	4628      	mov	r0, r5
 800aec8:	f000 f88c 	bl	800afe4 <__sinit>
 800aecc:	4b16      	ldr	r3, [pc, #88]	; (800af28 <fileno+0x70>)
 800aece:	429c      	cmp	r4, r3
 800aed0:	d118      	bne.n	800af04 <fileno+0x4c>
 800aed2:	686c      	ldr	r4, [r5, #4]
 800aed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aed6:	07d8      	lsls	r0, r3, #31
 800aed8:	d405      	bmi.n	800aee6 <fileno+0x2e>
 800aeda:	89a3      	ldrh	r3, [r4, #12]
 800aedc:	0599      	lsls	r1, r3, #22
 800aede:	d402      	bmi.n	800aee6 <fileno+0x2e>
 800aee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aee2:	f000 fc90 	bl	800b806 <__retarget_lock_acquire_recursive>
 800aee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeea:	b1ab      	cbz	r3, 800af18 <fileno+0x60>
 800aeec:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800aef0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aef2:	07d2      	lsls	r2, r2, #31
 800aef4:	d404      	bmi.n	800af00 <fileno+0x48>
 800aef6:	059b      	lsls	r3, r3, #22
 800aef8:	d402      	bmi.n	800af00 <fileno+0x48>
 800aefa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aefc:	f000 fc84 	bl	800b808 <__retarget_lock_release_recursive>
 800af00:	4628      	mov	r0, r5
 800af02:	bd70      	pop	{r4, r5, r6, pc}
 800af04:	4b09      	ldr	r3, [pc, #36]	; (800af2c <fileno+0x74>)
 800af06:	429c      	cmp	r4, r3
 800af08:	d101      	bne.n	800af0e <fileno+0x56>
 800af0a:	68ac      	ldr	r4, [r5, #8]
 800af0c:	e7e2      	b.n	800aed4 <fileno+0x1c>
 800af0e:	4b08      	ldr	r3, [pc, #32]	; (800af30 <fileno+0x78>)
 800af10:	429c      	cmp	r4, r3
 800af12:	bf08      	it	eq
 800af14:	68ec      	ldreq	r4, [r5, #12]
 800af16:	e7dd      	b.n	800aed4 <fileno+0x1c>
 800af18:	6832      	ldr	r2, [r6, #0]
 800af1a:	2109      	movs	r1, #9
 800af1c:	6011      	str	r1, [r2, #0]
 800af1e:	f04f 35ff 	mov.w	r5, #4294967295
 800af22:	e7e5      	b.n	800aef0 <fileno+0x38>
 800af24:	2000003c 	.word	0x2000003c
 800af28:	0800ddcc 	.word	0x0800ddcc
 800af2c:	0800ddec 	.word	0x0800ddec
 800af30:	0800ddac 	.word	0x0800ddac

0800af34 <std>:
 800af34:	2300      	movs	r3, #0
 800af36:	b510      	push	{r4, lr}
 800af38:	4604      	mov	r4, r0
 800af3a:	e9c0 3300 	strd	r3, r3, [r0]
 800af3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af42:	6083      	str	r3, [r0, #8]
 800af44:	8181      	strh	r1, [r0, #12]
 800af46:	6643      	str	r3, [r0, #100]	; 0x64
 800af48:	81c2      	strh	r2, [r0, #14]
 800af4a:	6183      	str	r3, [r0, #24]
 800af4c:	4619      	mov	r1, r3
 800af4e:	2208      	movs	r2, #8
 800af50:	305c      	adds	r0, #92	; 0x5c
 800af52:	f7fc feaf 	bl	8007cb4 <memset>
 800af56:	4b05      	ldr	r3, [pc, #20]	; (800af6c <std+0x38>)
 800af58:	6263      	str	r3, [r4, #36]	; 0x24
 800af5a:	4b05      	ldr	r3, [pc, #20]	; (800af70 <std+0x3c>)
 800af5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800af5e:	4b05      	ldr	r3, [pc, #20]	; (800af74 <std+0x40>)
 800af60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af62:	4b05      	ldr	r3, [pc, #20]	; (800af78 <std+0x44>)
 800af64:	6224      	str	r4, [r4, #32]
 800af66:	6323      	str	r3, [r4, #48]	; 0x30
 800af68:	bd10      	pop	{r4, pc}
 800af6a:	bf00      	nop
 800af6c:	08008e09 	.word	0x08008e09
 800af70:	08008e2f 	.word	0x08008e2f
 800af74:	08008e67 	.word	0x08008e67
 800af78:	08008e8b 	.word	0x08008e8b

0800af7c <_cleanup_r>:
 800af7c:	4901      	ldr	r1, [pc, #4]	; (800af84 <_cleanup_r+0x8>)
 800af7e:	f000 b8af 	b.w	800b0e0 <_fwalk_reent>
 800af82:	bf00      	nop
 800af84:	0800ae41 	.word	0x0800ae41

0800af88 <__sfmoreglue>:
 800af88:	b570      	push	{r4, r5, r6, lr}
 800af8a:	2268      	movs	r2, #104	; 0x68
 800af8c:	1e4d      	subs	r5, r1, #1
 800af8e:	4355      	muls	r5, r2
 800af90:	460e      	mov	r6, r1
 800af92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af96:	f7fc ff01 	bl	8007d9c <_malloc_r>
 800af9a:	4604      	mov	r4, r0
 800af9c:	b140      	cbz	r0, 800afb0 <__sfmoreglue+0x28>
 800af9e:	2100      	movs	r1, #0
 800afa0:	e9c0 1600 	strd	r1, r6, [r0]
 800afa4:	300c      	adds	r0, #12
 800afa6:	60a0      	str	r0, [r4, #8]
 800afa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800afac:	f7fc fe82 	bl	8007cb4 <memset>
 800afb0:	4620      	mov	r0, r4
 800afb2:	bd70      	pop	{r4, r5, r6, pc}

0800afb4 <__sfp_lock_acquire>:
 800afb4:	4801      	ldr	r0, [pc, #4]	; (800afbc <__sfp_lock_acquire+0x8>)
 800afb6:	f000 bc26 	b.w	800b806 <__retarget_lock_acquire_recursive>
 800afba:	bf00      	nop
 800afbc:	20000669 	.word	0x20000669

0800afc0 <__sfp_lock_release>:
 800afc0:	4801      	ldr	r0, [pc, #4]	; (800afc8 <__sfp_lock_release+0x8>)
 800afc2:	f000 bc21 	b.w	800b808 <__retarget_lock_release_recursive>
 800afc6:	bf00      	nop
 800afc8:	20000669 	.word	0x20000669

0800afcc <__sinit_lock_acquire>:
 800afcc:	4801      	ldr	r0, [pc, #4]	; (800afd4 <__sinit_lock_acquire+0x8>)
 800afce:	f000 bc1a 	b.w	800b806 <__retarget_lock_acquire_recursive>
 800afd2:	bf00      	nop
 800afd4:	2000066a 	.word	0x2000066a

0800afd8 <__sinit_lock_release>:
 800afd8:	4801      	ldr	r0, [pc, #4]	; (800afe0 <__sinit_lock_release+0x8>)
 800afda:	f000 bc15 	b.w	800b808 <__retarget_lock_release_recursive>
 800afde:	bf00      	nop
 800afe0:	2000066a 	.word	0x2000066a

0800afe4 <__sinit>:
 800afe4:	b510      	push	{r4, lr}
 800afe6:	4604      	mov	r4, r0
 800afe8:	f7ff fff0 	bl	800afcc <__sinit_lock_acquire>
 800afec:	69a3      	ldr	r3, [r4, #24]
 800afee:	b11b      	cbz	r3, 800aff8 <__sinit+0x14>
 800aff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aff4:	f7ff bff0 	b.w	800afd8 <__sinit_lock_release>
 800aff8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800affc:	6523      	str	r3, [r4, #80]	; 0x50
 800affe:	4b13      	ldr	r3, [pc, #76]	; (800b04c <__sinit+0x68>)
 800b000:	4a13      	ldr	r2, [pc, #76]	; (800b050 <__sinit+0x6c>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	62a2      	str	r2, [r4, #40]	; 0x28
 800b006:	42a3      	cmp	r3, r4
 800b008:	bf04      	itt	eq
 800b00a:	2301      	moveq	r3, #1
 800b00c:	61a3      	streq	r3, [r4, #24]
 800b00e:	4620      	mov	r0, r4
 800b010:	f000 f820 	bl	800b054 <__sfp>
 800b014:	6060      	str	r0, [r4, #4]
 800b016:	4620      	mov	r0, r4
 800b018:	f000 f81c 	bl	800b054 <__sfp>
 800b01c:	60a0      	str	r0, [r4, #8]
 800b01e:	4620      	mov	r0, r4
 800b020:	f000 f818 	bl	800b054 <__sfp>
 800b024:	2200      	movs	r2, #0
 800b026:	60e0      	str	r0, [r4, #12]
 800b028:	2104      	movs	r1, #4
 800b02a:	6860      	ldr	r0, [r4, #4]
 800b02c:	f7ff ff82 	bl	800af34 <std>
 800b030:	68a0      	ldr	r0, [r4, #8]
 800b032:	2201      	movs	r2, #1
 800b034:	2109      	movs	r1, #9
 800b036:	f7ff ff7d 	bl	800af34 <std>
 800b03a:	68e0      	ldr	r0, [r4, #12]
 800b03c:	2202      	movs	r2, #2
 800b03e:	2112      	movs	r1, #18
 800b040:	f7ff ff78 	bl	800af34 <std>
 800b044:	2301      	movs	r3, #1
 800b046:	61a3      	str	r3, [r4, #24]
 800b048:	e7d2      	b.n	800aff0 <__sinit+0xc>
 800b04a:	bf00      	nop
 800b04c:	0800d4f0 	.word	0x0800d4f0
 800b050:	0800af7d 	.word	0x0800af7d

0800b054 <__sfp>:
 800b054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b056:	4607      	mov	r7, r0
 800b058:	f7ff ffac 	bl	800afb4 <__sfp_lock_acquire>
 800b05c:	4b1e      	ldr	r3, [pc, #120]	; (800b0d8 <__sfp+0x84>)
 800b05e:	681e      	ldr	r6, [r3, #0]
 800b060:	69b3      	ldr	r3, [r6, #24]
 800b062:	b913      	cbnz	r3, 800b06a <__sfp+0x16>
 800b064:	4630      	mov	r0, r6
 800b066:	f7ff ffbd 	bl	800afe4 <__sinit>
 800b06a:	3648      	adds	r6, #72	; 0x48
 800b06c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b070:	3b01      	subs	r3, #1
 800b072:	d503      	bpl.n	800b07c <__sfp+0x28>
 800b074:	6833      	ldr	r3, [r6, #0]
 800b076:	b30b      	cbz	r3, 800b0bc <__sfp+0x68>
 800b078:	6836      	ldr	r6, [r6, #0]
 800b07a:	e7f7      	b.n	800b06c <__sfp+0x18>
 800b07c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b080:	b9d5      	cbnz	r5, 800b0b8 <__sfp+0x64>
 800b082:	4b16      	ldr	r3, [pc, #88]	; (800b0dc <__sfp+0x88>)
 800b084:	60e3      	str	r3, [r4, #12]
 800b086:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b08a:	6665      	str	r5, [r4, #100]	; 0x64
 800b08c:	f000 fbba 	bl	800b804 <__retarget_lock_init_recursive>
 800b090:	f7ff ff96 	bl	800afc0 <__sfp_lock_release>
 800b094:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b098:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b09c:	6025      	str	r5, [r4, #0]
 800b09e:	61a5      	str	r5, [r4, #24]
 800b0a0:	2208      	movs	r2, #8
 800b0a2:	4629      	mov	r1, r5
 800b0a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0a8:	f7fc fe04 	bl	8007cb4 <memset>
 800b0ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b0b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b8:	3468      	adds	r4, #104	; 0x68
 800b0ba:	e7d9      	b.n	800b070 <__sfp+0x1c>
 800b0bc:	2104      	movs	r1, #4
 800b0be:	4638      	mov	r0, r7
 800b0c0:	f7ff ff62 	bl	800af88 <__sfmoreglue>
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	6030      	str	r0, [r6, #0]
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d1d5      	bne.n	800b078 <__sfp+0x24>
 800b0cc:	f7ff ff78 	bl	800afc0 <__sfp_lock_release>
 800b0d0:	230c      	movs	r3, #12
 800b0d2:	603b      	str	r3, [r7, #0]
 800b0d4:	e7ee      	b.n	800b0b4 <__sfp+0x60>
 800b0d6:	bf00      	nop
 800b0d8:	0800d4f0 	.word	0x0800d4f0
 800b0dc:	ffff0001 	.word	0xffff0001

0800b0e0 <_fwalk_reent>:
 800b0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0e4:	4606      	mov	r6, r0
 800b0e6:	4688      	mov	r8, r1
 800b0e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0ec:	2700      	movs	r7, #0
 800b0ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0f2:	f1b9 0901 	subs.w	r9, r9, #1
 800b0f6:	d505      	bpl.n	800b104 <_fwalk_reent+0x24>
 800b0f8:	6824      	ldr	r4, [r4, #0]
 800b0fa:	2c00      	cmp	r4, #0
 800b0fc:	d1f7      	bne.n	800b0ee <_fwalk_reent+0xe>
 800b0fe:	4638      	mov	r0, r7
 800b100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b104:	89ab      	ldrh	r3, [r5, #12]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d907      	bls.n	800b11a <_fwalk_reent+0x3a>
 800b10a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b10e:	3301      	adds	r3, #1
 800b110:	d003      	beq.n	800b11a <_fwalk_reent+0x3a>
 800b112:	4629      	mov	r1, r5
 800b114:	4630      	mov	r0, r6
 800b116:	47c0      	blx	r8
 800b118:	4307      	orrs	r7, r0
 800b11a:	3568      	adds	r5, #104	; 0x68
 800b11c:	e7e9      	b.n	800b0f2 <_fwalk_reent+0x12>

0800b11e <rshift>:
 800b11e:	6903      	ldr	r3, [r0, #16]
 800b120:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b128:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b12c:	f100 0414 	add.w	r4, r0, #20
 800b130:	dd45      	ble.n	800b1be <rshift+0xa0>
 800b132:	f011 011f 	ands.w	r1, r1, #31
 800b136:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b13a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b13e:	d10c      	bne.n	800b15a <rshift+0x3c>
 800b140:	f100 0710 	add.w	r7, r0, #16
 800b144:	4629      	mov	r1, r5
 800b146:	42b1      	cmp	r1, r6
 800b148:	d334      	bcc.n	800b1b4 <rshift+0x96>
 800b14a:	1a9b      	subs	r3, r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	1eea      	subs	r2, r5, #3
 800b150:	4296      	cmp	r6, r2
 800b152:	bf38      	it	cc
 800b154:	2300      	movcc	r3, #0
 800b156:	4423      	add	r3, r4
 800b158:	e015      	b.n	800b186 <rshift+0x68>
 800b15a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b15e:	f1c1 0820 	rsb	r8, r1, #32
 800b162:	40cf      	lsrs	r7, r1
 800b164:	f105 0e04 	add.w	lr, r5, #4
 800b168:	46a1      	mov	r9, r4
 800b16a:	4576      	cmp	r6, lr
 800b16c:	46f4      	mov	ip, lr
 800b16e:	d815      	bhi.n	800b19c <rshift+0x7e>
 800b170:	1a9a      	subs	r2, r3, r2
 800b172:	0092      	lsls	r2, r2, #2
 800b174:	3a04      	subs	r2, #4
 800b176:	3501      	adds	r5, #1
 800b178:	42ae      	cmp	r6, r5
 800b17a:	bf38      	it	cc
 800b17c:	2200      	movcc	r2, #0
 800b17e:	18a3      	adds	r3, r4, r2
 800b180:	50a7      	str	r7, [r4, r2]
 800b182:	b107      	cbz	r7, 800b186 <rshift+0x68>
 800b184:	3304      	adds	r3, #4
 800b186:	1b1a      	subs	r2, r3, r4
 800b188:	42a3      	cmp	r3, r4
 800b18a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b18e:	bf08      	it	eq
 800b190:	2300      	moveq	r3, #0
 800b192:	6102      	str	r2, [r0, #16]
 800b194:	bf08      	it	eq
 800b196:	6143      	streq	r3, [r0, #20]
 800b198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b19c:	f8dc c000 	ldr.w	ip, [ip]
 800b1a0:	fa0c fc08 	lsl.w	ip, ip, r8
 800b1a4:	ea4c 0707 	orr.w	r7, ip, r7
 800b1a8:	f849 7b04 	str.w	r7, [r9], #4
 800b1ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1b0:	40cf      	lsrs	r7, r1
 800b1b2:	e7da      	b.n	800b16a <rshift+0x4c>
 800b1b4:	f851 cb04 	ldr.w	ip, [r1], #4
 800b1b8:	f847 cf04 	str.w	ip, [r7, #4]!
 800b1bc:	e7c3      	b.n	800b146 <rshift+0x28>
 800b1be:	4623      	mov	r3, r4
 800b1c0:	e7e1      	b.n	800b186 <rshift+0x68>

0800b1c2 <__hexdig_fun>:
 800b1c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b1c6:	2b09      	cmp	r3, #9
 800b1c8:	d802      	bhi.n	800b1d0 <__hexdig_fun+0xe>
 800b1ca:	3820      	subs	r0, #32
 800b1cc:	b2c0      	uxtb	r0, r0
 800b1ce:	4770      	bx	lr
 800b1d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b1d4:	2b05      	cmp	r3, #5
 800b1d6:	d801      	bhi.n	800b1dc <__hexdig_fun+0x1a>
 800b1d8:	3847      	subs	r0, #71	; 0x47
 800b1da:	e7f7      	b.n	800b1cc <__hexdig_fun+0xa>
 800b1dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b1e0:	2b05      	cmp	r3, #5
 800b1e2:	d801      	bhi.n	800b1e8 <__hexdig_fun+0x26>
 800b1e4:	3827      	subs	r0, #39	; 0x27
 800b1e6:	e7f1      	b.n	800b1cc <__hexdig_fun+0xa>
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	4770      	bx	lr

0800b1ec <__gethex>:
 800b1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f0:	ed2d 8b02 	vpush	{d8}
 800b1f4:	b089      	sub	sp, #36	; 0x24
 800b1f6:	ee08 0a10 	vmov	s16, r0
 800b1fa:	9304      	str	r3, [sp, #16]
 800b1fc:	4bb4      	ldr	r3, [pc, #720]	; (800b4d0 <__gethex+0x2e4>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	9301      	str	r3, [sp, #4]
 800b202:	4618      	mov	r0, r3
 800b204:	468b      	mov	fp, r1
 800b206:	4690      	mov	r8, r2
 800b208:	f7f4 ffe2 	bl	80001d0 <strlen>
 800b20c:	9b01      	ldr	r3, [sp, #4]
 800b20e:	f8db 2000 	ldr.w	r2, [fp]
 800b212:	4403      	add	r3, r0
 800b214:	4682      	mov	sl, r0
 800b216:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b21a:	9305      	str	r3, [sp, #20]
 800b21c:	1c93      	adds	r3, r2, #2
 800b21e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b222:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b226:	32fe      	adds	r2, #254	; 0xfe
 800b228:	18d1      	adds	r1, r2, r3
 800b22a:	461f      	mov	r7, r3
 800b22c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b230:	9100      	str	r1, [sp, #0]
 800b232:	2830      	cmp	r0, #48	; 0x30
 800b234:	d0f8      	beq.n	800b228 <__gethex+0x3c>
 800b236:	f7ff ffc4 	bl	800b1c2 <__hexdig_fun>
 800b23a:	4604      	mov	r4, r0
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d13a      	bne.n	800b2b6 <__gethex+0xca>
 800b240:	9901      	ldr	r1, [sp, #4]
 800b242:	4652      	mov	r2, sl
 800b244:	4638      	mov	r0, r7
 800b246:	f001 fcc7 	bl	800cbd8 <strncmp>
 800b24a:	4605      	mov	r5, r0
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d168      	bne.n	800b322 <__gethex+0x136>
 800b250:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b254:	eb07 060a 	add.w	r6, r7, sl
 800b258:	f7ff ffb3 	bl	800b1c2 <__hexdig_fun>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	d062      	beq.n	800b326 <__gethex+0x13a>
 800b260:	4633      	mov	r3, r6
 800b262:	7818      	ldrb	r0, [r3, #0]
 800b264:	2830      	cmp	r0, #48	; 0x30
 800b266:	461f      	mov	r7, r3
 800b268:	f103 0301 	add.w	r3, r3, #1
 800b26c:	d0f9      	beq.n	800b262 <__gethex+0x76>
 800b26e:	f7ff ffa8 	bl	800b1c2 <__hexdig_fun>
 800b272:	2301      	movs	r3, #1
 800b274:	fab0 f480 	clz	r4, r0
 800b278:	0964      	lsrs	r4, r4, #5
 800b27a:	4635      	mov	r5, r6
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	463a      	mov	r2, r7
 800b280:	4616      	mov	r6, r2
 800b282:	3201      	adds	r2, #1
 800b284:	7830      	ldrb	r0, [r6, #0]
 800b286:	f7ff ff9c 	bl	800b1c2 <__hexdig_fun>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d1f8      	bne.n	800b280 <__gethex+0x94>
 800b28e:	9901      	ldr	r1, [sp, #4]
 800b290:	4652      	mov	r2, sl
 800b292:	4630      	mov	r0, r6
 800b294:	f001 fca0 	bl	800cbd8 <strncmp>
 800b298:	b980      	cbnz	r0, 800b2bc <__gethex+0xd0>
 800b29a:	b94d      	cbnz	r5, 800b2b0 <__gethex+0xc4>
 800b29c:	eb06 050a 	add.w	r5, r6, sl
 800b2a0:	462a      	mov	r2, r5
 800b2a2:	4616      	mov	r6, r2
 800b2a4:	3201      	adds	r2, #1
 800b2a6:	7830      	ldrb	r0, [r6, #0]
 800b2a8:	f7ff ff8b 	bl	800b1c2 <__hexdig_fun>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d1f8      	bne.n	800b2a2 <__gethex+0xb6>
 800b2b0:	1bad      	subs	r5, r5, r6
 800b2b2:	00ad      	lsls	r5, r5, #2
 800b2b4:	e004      	b.n	800b2c0 <__gethex+0xd4>
 800b2b6:	2400      	movs	r4, #0
 800b2b8:	4625      	mov	r5, r4
 800b2ba:	e7e0      	b.n	800b27e <__gethex+0x92>
 800b2bc:	2d00      	cmp	r5, #0
 800b2be:	d1f7      	bne.n	800b2b0 <__gethex+0xc4>
 800b2c0:	7833      	ldrb	r3, [r6, #0]
 800b2c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b2c6:	2b50      	cmp	r3, #80	; 0x50
 800b2c8:	d13b      	bne.n	800b342 <__gethex+0x156>
 800b2ca:	7873      	ldrb	r3, [r6, #1]
 800b2cc:	2b2b      	cmp	r3, #43	; 0x2b
 800b2ce:	d02c      	beq.n	800b32a <__gethex+0x13e>
 800b2d0:	2b2d      	cmp	r3, #45	; 0x2d
 800b2d2:	d02e      	beq.n	800b332 <__gethex+0x146>
 800b2d4:	1c71      	adds	r1, r6, #1
 800b2d6:	f04f 0900 	mov.w	r9, #0
 800b2da:	7808      	ldrb	r0, [r1, #0]
 800b2dc:	f7ff ff71 	bl	800b1c2 <__hexdig_fun>
 800b2e0:	1e43      	subs	r3, r0, #1
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b18      	cmp	r3, #24
 800b2e6:	d82c      	bhi.n	800b342 <__gethex+0x156>
 800b2e8:	f1a0 0210 	sub.w	r2, r0, #16
 800b2ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b2f0:	f7ff ff67 	bl	800b1c2 <__hexdig_fun>
 800b2f4:	1e43      	subs	r3, r0, #1
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	2b18      	cmp	r3, #24
 800b2fa:	d91d      	bls.n	800b338 <__gethex+0x14c>
 800b2fc:	f1b9 0f00 	cmp.w	r9, #0
 800b300:	d000      	beq.n	800b304 <__gethex+0x118>
 800b302:	4252      	negs	r2, r2
 800b304:	4415      	add	r5, r2
 800b306:	f8cb 1000 	str.w	r1, [fp]
 800b30a:	b1e4      	cbz	r4, 800b346 <__gethex+0x15a>
 800b30c:	9b00      	ldr	r3, [sp, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	bf14      	ite	ne
 800b312:	2700      	movne	r7, #0
 800b314:	2706      	moveq	r7, #6
 800b316:	4638      	mov	r0, r7
 800b318:	b009      	add	sp, #36	; 0x24
 800b31a:	ecbd 8b02 	vpop	{d8}
 800b31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b322:	463e      	mov	r6, r7
 800b324:	4625      	mov	r5, r4
 800b326:	2401      	movs	r4, #1
 800b328:	e7ca      	b.n	800b2c0 <__gethex+0xd4>
 800b32a:	f04f 0900 	mov.w	r9, #0
 800b32e:	1cb1      	adds	r1, r6, #2
 800b330:	e7d3      	b.n	800b2da <__gethex+0xee>
 800b332:	f04f 0901 	mov.w	r9, #1
 800b336:	e7fa      	b.n	800b32e <__gethex+0x142>
 800b338:	230a      	movs	r3, #10
 800b33a:	fb03 0202 	mla	r2, r3, r2, r0
 800b33e:	3a10      	subs	r2, #16
 800b340:	e7d4      	b.n	800b2ec <__gethex+0x100>
 800b342:	4631      	mov	r1, r6
 800b344:	e7df      	b.n	800b306 <__gethex+0x11a>
 800b346:	1bf3      	subs	r3, r6, r7
 800b348:	3b01      	subs	r3, #1
 800b34a:	4621      	mov	r1, r4
 800b34c:	2b07      	cmp	r3, #7
 800b34e:	dc0b      	bgt.n	800b368 <__gethex+0x17c>
 800b350:	ee18 0a10 	vmov	r0, s16
 800b354:	f000 fa98 	bl	800b888 <_Balloc>
 800b358:	4604      	mov	r4, r0
 800b35a:	b940      	cbnz	r0, 800b36e <__gethex+0x182>
 800b35c:	4b5d      	ldr	r3, [pc, #372]	; (800b4d4 <__gethex+0x2e8>)
 800b35e:	4602      	mov	r2, r0
 800b360:	21de      	movs	r1, #222	; 0xde
 800b362:	485d      	ldr	r0, [pc, #372]	; (800b4d8 <__gethex+0x2ec>)
 800b364:	f001 fd08 	bl	800cd78 <__assert_func>
 800b368:	3101      	adds	r1, #1
 800b36a:	105b      	asrs	r3, r3, #1
 800b36c:	e7ee      	b.n	800b34c <__gethex+0x160>
 800b36e:	f100 0914 	add.w	r9, r0, #20
 800b372:	f04f 0b00 	mov.w	fp, #0
 800b376:	f1ca 0301 	rsb	r3, sl, #1
 800b37a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b37e:	f8cd b000 	str.w	fp, [sp]
 800b382:	9306      	str	r3, [sp, #24]
 800b384:	42b7      	cmp	r7, r6
 800b386:	d340      	bcc.n	800b40a <__gethex+0x21e>
 800b388:	9802      	ldr	r0, [sp, #8]
 800b38a:	9b00      	ldr	r3, [sp, #0]
 800b38c:	f840 3b04 	str.w	r3, [r0], #4
 800b390:	eba0 0009 	sub.w	r0, r0, r9
 800b394:	1080      	asrs	r0, r0, #2
 800b396:	0146      	lsls	r6, r0, #5
 800b398:	6120      	str	r0, [r4, #16]
 800b39a:	4618      	mov	r0, r3
 800b39c:	f000 fb66 	bl	800ba6c <__hi0bits>
 800b3a0:	1a30      	subs	r0, r6, r0
 800b3a2:	f8d8 6000 	ldr.w	r6, [r8]
 800b3a6:	42b0      	cmp	r0, r6
 800b3a8:	dd63      	ble.n	800b472 <__gethex+0x286>
 800b3aa:	1b87      	subs	r7, r0, r6
 800b3ac:	4639      	mov	r1, r7
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f000 ff0a 	bl	800c1c8 <__any_on>
 800b3b4:	4682      	mov	sl, r0
 800b3b6:	b1a8      	cbz	r0, 800b3e4 <__gethex+0x1f8>
 800b3b8:	1e7b      	subs	r3, r7, #1
 800b3ba:	1159      	asrs	r1, r3, #5
 800b3bc:	f003 021f 	and.w	r2, r3, #31
 800b3c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b3c4:	f04f 0a01 	mov.w	sl, #1
 800b3c8:	fa0a f202 	lsl.w	r2, sl, r2
 800b3cc:	420a      	tst	r2, r1
 800b3ce:	d009      	beq.n	800b3e4 <__gethex+0x1f8>
 800b3d0:	4553      	cmp	r3, sl
 800b3d2:	dd05      	ble.n	800b3e0 <__gethex+0x1f4>
 800b3d4:	1eb9      	subs	r1, r7, #2
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f000 fef6 	bl	800c1c8 <__any_on>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d145      	bne.n	800b46c <__gethex+0x280>
 800b3e0:	f04f 0a02 	mov.w	sl, #2
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f7ff fe99 	bl	800b11e <rshift>
 800b3ec:	443d      	add	r5, r7
 800b3ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3f2:	42ab      	cmp	r3, r5
 800b3f4:	da4c      	bge.n	800b490 <__gethex+0x2a4>
 800b3f6:	ee18 0a10 	vmov	r0, s16
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	f000 fa84 	bl	800b908 <_Bfree>
 800b400:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b402:	2300      	movs	r3, #0
 800b404:	6013      	str	r3, [r2, #0]
 800b406:	27a3      	movs	r7, #163	; 0xa3
 800b408:	e785      	b.n	800b316 <__gethex+0x12a>
 800b40a:	1e73      	subs	r3, r6, #1
 800b40c:	9a05      	ldr	r2, [sp, #20]
 800b40e:	9303      	str	r3, [sp, #12]
 800b410:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b414:	4293      	cmp	r3, r2
 800b416:	d019      	beq.n	800b44c <__gethex+0x260>
 800b418:	f1bb 0f20 	cmp.w	fp, #32
 800b41c:	d107      	bne.n	800b42e <__gethex+0x242>
 800b41e:	9b02      	ldr	r3, [sp, #8]
 800b420:	9a00      	ldr	r2, [sp, #0]
 800b422:	f843 2b04 	str.w	r2, [r3], #4
 800b426:	9302      	str	r3, [sp, #8]
 800b428:	2300      	movs	r3, #0
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	469b      	mov	fp, r3
 800b42e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b432:	f7ff fec6 	bl	800b1c2 <__hexdig_fun>
 800b436:	9b00      	ldr	r3, [sp, #0]
 800b438:	f000 000f 	and.w	r0, r0, #15
 800b43c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b440:	4303      	orrs	r3, r0
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	f10b 0b04 	add.w	fp, fp, #4
 800b448:	9b03      	ldr	r3, [sp, #12]
 800b44a:	e00d      	b.n	800b468 <__gethex+0x27c>
 800b44c:	9b03      	ldr	r3, [sp, #12]
 800b44e:	9a06      	ldr	r2, [sp, #24]
 800b450:	4413      	add	r3, r2
 800b452:	42bb      	cmp	r3, r7
 800b454:	d3e0      	bcc.n	800b418 <__gethex+0x22c>
 800b456:	4618      	mov	r0, r3
 800b458:	9901      	ldr	r1, [sp, #4]
 800b45a:	9307      	str	r3, [sp, #28]
 800b45c:	4652      	mov	r2, sl
 800b45e:	f001 fbbb 	bl	800cbd8 <strncmp>
 800b462:	9b07      	ldr	r3, [sp, #28]
 800b464:	2800      	cmp	r0, #0
 800b466:	d1d7      	bne.n	800b418 <__gethex+0x22c>
 800b468:	461e      	mov	r6, r3
 800b46a:	e78b      	b.n	800b384 <__gethex+0x198>
 800b46c:	f04f 0a03 	mov.w	sl, #3
 800b470:	e7b8      	b.n	800b3e4 <__gethex+0x1f8>
 800b472:	da0a      	bge.n	800b48a <__gethex+0x29e>
 800b474:	1a37      	subs	r7, r6, r0
 800b476:	4621      	mov	r1, r4
 800b478:	ee18 0a10 	vmov	r0, s16
 800b47c:	463a      	mov	r2, r7
 800b47e:	f000 fc5f 	bl	800bd40 <__lshift>
 800b482:	1bed      	subs	r5, r5, r7
 800b484:	4604      	mov	r4, r0
 800b486:	f100 0914 	add.w	r9, r0, #20
 800b48a:	f04f 0a00 	mov.w	sl, #0
 800b48e:	e7ae      	b.n	800b3ee <__gethex+0x202>
 800b490:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b494:	42a8      	cmp	r0, r5
 800b496:	dd72      	ble.n	800b57e <__gethex+0x392>
 800b498:	1b45      	subs	r5, r0, r5
 800b49a:	42ae      	cmp	r6, r5
 800b49c:	dc36      	bgt.n	800b50c <__gethex+0x320>
 800b49e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d02a      	beq.n	800b4fc <__gethex+0x310>
 800b4a6:	2b03      	cmp	r3, #3
 800b4a8:	d02c      	beq.n	800b504 <__gethex+0x318>
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d11c      	bne.n	800b4e8 <__gethex+0x2fc>
 800b4ae:	42ae      	cmp	r6, r5
 800b4b0:	d11a      	bne.n	800b4e8 <__gethex+0x2fc>
 800b4b2:	2e01      	cmp	r6, #1
 800b4b4:	d112      	bne.n	800b4dc <__gethex+0x2f0>
 800b4b6:	9a04      	ldr	r2, [sp, #16]
 800b4b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b4bc:	6013      	str	r3, [r2, #0]
 800b4be:	2301      	movs	r3, #1
 800b4c0:	6123      	str	r3, [r4, #16]
 800b4c2:	f8c9 3000 	str.w	r3, [r9]
 800b4c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4c8:	2762      	movs	r7, #98	; 0x62
 800b4ca:	601c      	str	r4, [r3, #0]
 800b4cc:	e723      	b.n	800b316 <__gethex+0x12a>
 800b4ce:	bf00      	nop
 800b4d0:	0800de74 	.word	0x0800de74
 800b4d4:	0800dd98 	.word	0x0800dd98
 800b4d8:	0800de0c 	.word	0x0800de0c
 800b4dc:	1e71      	subs	r1, r6, #1
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f000 fe72 	bl	800c1c8 <__any_on>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d1e6      	bne.n	800b4b6 <__gethex+0x2ca>
 800b4e8:	ee18 0a10 	vmov	r0, s16
 800b4ec:	4621      	mov	r1, r4
 800b4ee:	f000 fa0b 	bl	800b908 <_Bfree>
 800b4f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	6013      	str	r3, [r2, #0]
 800b4f8:	2750      	movs	r7, #80	; 0x50
 800b4fa:	e70c      	b.n	800b316 <__gethex+0x12a>
 800b4fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d1f2      	bne.n	800b4e8 <__gethex+0x2fc>
 800b502:	e7d8      	b.n	800b4b6 <__gethex+0x2ca>
 800b504:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1d5      	bne.n	800b4b6 <__gethex+0x2ca>
 800b50a:	e7ed      	b.n	800b4e8 <__gethex+0x2fc>
 800b50c:	1e6f      	subs	r7, r5, #1
 800b50e:	f1ba 0f00 	cmp.w	sl, #0
 800b512:	d131      	bne.n	800b578 <__gethex+0x38c>
 800b514:	b127      	cbz	r7, 800b520 <__gethex+0x334>
 800b516:	4639      	mov	r1, r7
 800b518:	4620      	mov	r0, r4
 800b51a:	f000 fe55 	bl	800c1c8 <__any_on>
 800b51e:	4682      	mov	sl, r0
 800b520:	117b      	asrs	r3, r7, #5
 800b522:	2101      	movs	r1, #1
 800b524:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b528:	f007 071f 	and.w	r7, r7, #31
 800b52c:	fa01 f707 	lsl.w	r7, r1, r7
 800b530:	421f      	tst	r7, r3
 800b532:	4629      	mov	r1, r5
 800b534:	4620      	mov	r0, r4
 800b536:	bf18      	it	ne
 800b538:	f04a 0a02 	orrne.w	sl, sl, #2
 800b53c:	1b76      	subs	r6, r6, r5
 800b53e:	f7ff fdee 	bl	800b11e <rshift>
 800b542:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b546:	2702      	movs	r7, #2
 800b548:	f1ba 0f00 	cmp.w	sl, #0
 800b54c:	d048      	beq.n	800b5e0 <__gethex+0x3f4>
 800b54e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b552:	2b02      	cmp	r3, #2
 800b554:	d015      	beq.n	800b582 <__gethex+0x396>
 800b556:	2b03      	cmp	r3, #3
 800b558:	d017      	beq.n	800b58a <__gethex+0x39e>
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d109      	bne.n	800b572 <__gethex+0x386>
 800b55e:	f01a 0f02 	tst.w	sl, #2
 800b562:	d006      	beq.n	800b572 <__gethex+0x386>
 800b564:	f8d9 0000 	ldr.w	r0, [r9]
 800b568:	ea4a 0a00 	orr.w	sl, sl, r0
 800b56c:	f01a 0f01 	tst.w	sl, #1
 800b570:	d10e      	bne.n	800b590 <__gethex+0x3a4>
 800b572:	f047 0710 	orr.w	r7, r7, #16
 800b576:	e033      	b.n	800b5e0 <__gethex+0x3f4>
 800b578:	f04f 0a01 	mov.w	sl, #1
 800b57c:	e7d0      	b.n	800b520 <__gethex+0x334>
 800b57e:	2701      	movs	r7, #1
 800b580:	e7e2      	b.n	800b548 <__gethex+0x35c>
 800b582:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b584:	f1c3 0301 	rsb	r3, r3, #1
 800b588:	9315      	str	r3, [sp, #84]	; 0x54
 800b58a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d0f0      	beq.n	800b572 <__gethex+0x386>
 800b590:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b594:	f104 0314 	add.w	r3, r4, #20
 800b598:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b59c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b5a0:	f04f 0c00 	mov.w	ip, #0
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b5ae:	d01c      	beq.n	800b5ea <__gethex+0x3fe>
 800b5b0:	3201      	adds	r2, #1
 800b5b2:	6002      	str	r2, [r0, #0]
 800b5b4:	2f02      	cmp	r7, #2
 800b5b6:	f104 0314 	add.w	r3, r4, #20
 800b5ba:	d13f      	bne.n	800b63c <__gethex+0x450>
 800b5bc:	f8d8 2000 	ldr.w	r2, [r8]
 800b5c0:	3a01      	subs	r2, #1
 800b5c2:	42b2      	cmp	r2, r6
 800b5c4:	d10a      	bne.n	800b5dc <__gethex+0x3f0>
 800b5c6:	1171      	asrs	r1, r6, #5
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5ce:	f006 061f 	and.w	r6, r6, #31
 800b5d2:	fa02 f606 	lsl.w	r6, r2, r6
 800b5d6:	421e      	tst	r6, r3
 800b5d8:	bf18      	it	ne
 800b5da:	4617      	movne	r7, r2
 800b5dc:	f047 0720 	orr.w	r7, r7, #32
 800b5e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5e2:	601c      	str	r4, [r3, #0]
 800b5e4:	9b04      	ldr	r3, [sp, #16]
 800b5e6:	601d      	str	r5, [r3, #0]
 800b5e8:	e695      	b.n	800b316 <__gethex+0x12a>
 800b5ea:	4299      	cmp	r1, r3
 800b5ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800b5f0:	d8d8      	bhi.n	800b5a4 <__gethex+0x3b8>
 800b5f2:	68a3      	ldr	r3, [r4, #8]
 800b5f4:	459b      	cmp	fp, r3
 800b5f6:	db19      	blt.n	800b62c <__gethex+0x440>
 800b5f8:	6861      	ldr	r1, [r4, #4]
 800b5fa:	ee18 0a10 	vmov	r0, s16
 800b5fe:	3101      	adds	r1, #1
 800b600:	f000 f942 	bl	800b888 <_Balloc>
 800b604:	4681      	mov	r9, r0
 800b606:	b918      	cbnz	r0, 800b610 <__gethex+0x424>
 800b608:	4b1a      	ldr	r3, [pc, #104]	; (800b674 <__gethex+0x488>)
 800b60a:	4602      	mov	r2, r0
 800b60c:	2184      	movs	r1, #132	; 0x84
 800b60e:	e6a8      	b.n	800b362 <__gethex+0x176>
 800b610:	6922      	ldr	r2, [r4, #16]
 800b612:	3202      	adds	r2, #2
 800b614:	f104 010c 	add.w	r1, r4, #12
 800b618:	0092      	lsls	r2, r2, #2
 800b61a:	300c      	adds	r0, #12
 800b61c:	f000 f91a 	bl	800b854 <memcpy>
 800b620:	4621      	mov	r1, r4
 800b622:	ee18 0a10 	vmov	r0, s16
 800b626:	f000 f96f 	bl	800b908 <_Bfree>
 800b62a:	464c      	mov	r4, r9
 800b62c:	6923      	ldr	r3, [r4, #16]
 800b62e:	1c5a      	adds	r2, r3, #1
 800b630:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b634:	6122      	str	r2, [r4, #16]
 800b636:	2201      	movs	r2, #1
 800b638:	615a      	str	r2, [r3, #20]
 800b63a:	e7bb      	b.n	800b5b4 <__gethex+0x3c8>
 800b63c:	6922      	ldr	r2, [r4, #16]
 800b63e:	455a      	cmp	r2, fp
 800b640:	dd0b      	ble.n	800b65a <__gethex+0x46e>
 800b642:	2101      	movs	r1, #1
 800b644:	4620      	mov	r0, r4
 800b646:	f7ff fd6a 	bl	800b11e <rshift>
 800b64a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b64e:	3501      	adds	r5, #1
 800b650:	42ab      	cmp	r3, r5
 800b652:	f6ff aed0 	blt.w	800b3f6 <__gethex+0x20a>
 800b656:	2701      	movs	r7, #1
 800b658:	e7c0      	b.n	800b5dc <__gethex+0x3f0>
 800b65a:	f016 061f 	ands.w	r6, r6, #31
 800b65e:	d0fa      	beq.n	800b656 <__gethex+0x46a>
 800b660:	4453      	add	r3, sl
 800b662:	f1c6 0620 	rsb	r6, r6, #32
 800b666:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b66a:	f000 f9ff 	bl	800ba6c <__hi0bits>
 800b66e:	42b0      	cmp	r0, r6
 800b670:	dbe7      	blt.n	800b642 <__gethex+0x456>
 800b672:	e7f0      	b.n	800b656 <__gethex+0x46a>
 800b674:	0800dd98 	.word	0x0800dd98

0800b678 <L_shift>:
 800b678:	f1c2 0208 	rsb	r2, r2, #8
 800b67c:	0092      	lsls	r2, r2, #2
 800b67e:	b570      	push	{r4, r5, r6, lr}
 800b680:	f1c2 0620 	rsb	r6, r2, #32
 800b684:	6843      	ldr	r3, [r0, #4]
 800b686:	6804      	ldr	r4, [r0, #0]
 800b688:	fa03 f506 	lsl.w	r5, r3, r6
 800b68c:	432c      	orrs	r4, r5
 800b68e:	40d3      	lsrs	r3, r2
 800b690:	6004      	str	r4, [r0, #0]
 800b692:	f840 3f04 	str.w	r3, [r0, #4]!
 800b696:	4288      	cmp	r0, r1
 800b698:	d3f4      	bcc.n	800b684 <L_shift+0xc>
 800b69a:	bd70      	pop	{r4, r5, r6, pc}

0800b69c <__match>:
 800b69c:	b530      	push	{r4, r5, lr}
 800b69e:	6803      	ldr	r3, [r0, #0]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6a6:	b914      	cbnz	r4, 800b6ae <__match+0x12>
 800b6a8:	6003      	str	r3, [r0, #0]
 800b6aa:	2001      	movs	r0, #1
 800b6ac:	bd30      	pop	{r4, r5, pc}
 800b6ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b6b6:	2d19      	cmp	r5, #25
 800b6b8:	bf98      	it	ls
 800b6ba:	3220      	addls	r2, #32
 800b6bc:	42a2      	cmp	r2, r4
 800b6be:	d0f0      	beq.n	800b6a2 <__match+0x6>
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	e7f3      	b.n	800b6ac <__match+0x10>

0800b6c4 <__hexnan>:
 800b6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c8:	680b      	ldr	r3, [r1, #0]
 800b6ca:	115e      	asrs	r6, r3, #5
 800b6cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b6d0:	f013 031f 	ands.w	r3, r3, #31
 800b6d4:	b087      	sub	sp, #28
 800b6d6:	bf18      	it	ne
 800b6d8:	3604      	addne	r6, #4
 800b6da:	2500      	movs	r5, #0
 800b6dc:	1f37      	subs	r7, r6, #4
 800b6de:	4690      	mov	r8, r2
 800b6e0:	6802      	ldr	r2, [r0, #0]
 800b6e2:	9301      	str	r3, [sp, #4]
 800b6e4:	4682      	mov	sl, r0
 800b6e6:	f846 5c04 	str.w	r5, [r6, #-4]
 800b6ea:	46b9      	mov	r9, r7
 800b6ec:	463c      	mov	r4, r7
 800b6ee:	9502      	str	r5, [sp, #8]
 800b6f0:	46ab      	mov	fp, r5
 800b6f2:	7851      	ldrb	r1, [r2, #1]
 800b6f4:	1c53      	adds	r3, r2, #1
 800b6f6:	9303      	str	r3, [sp, #12]
 800b6f8:	b341      	cbz	r1, 800b74c <__hexnan+0x88>
 800b6fa:	4608      	mov	r0, r1
 800b6fc:	9205      	str	r2, [sp, #20]
 800b6fe:	9104      	str	r1, [sp, #16]
 800b700:	f7ff fd5f 	bl	800b1c2 <__hexdig_fun>
 800b704:	2800      	cmp	r0, #0
 800b706:	d14f      	bne.n	800b7a8 <__hexnan+0xe4>
 800b708:	9904      	ldr	r1, [sp, #16]
 800b70a:	9a05      	ldr	r2, [sp, #20]
 800b70c:	2920      	cmp	r1, #32
 800b70e:	d818      	bhi.n	800b742 <__hexnan+0x7e>
 800b710:	9b02      	ldr	r3, [sp, #8]
 800b712:	459b      	cmp	fp, r3
 800b714:	dd13      	ble.n	800b73e <__hexnan+0x7a>
 800b716:	454c      	cmp	r4, r9
 800b718:	d206      	bcs.n	800b728 <__hexnan+0x64>
 800b71a:	2d07      	cmp	r5, #7
 800b71c:	dc04      	bgt.n	800b728 <__hexnan+0x64>
 800b71e:	462a      	mov	r2, r5
 800b720:	4649      	mov	r1, r9
 800b722:	4620      	mov	r0, r4
 800b724:	f7ff ffa8 	bl	800b678 <L_shift>
 800b728:	4544      	cmp	r4, r8
 800b72a:	d950      	bls.n	800b7ce <__hexnan+0x10a>
 800b72c:	2300      	movs	r3, #0
 800b72e:	f1a4 0904 	sub.w	r9, r4, #4
 800b732:	f844 3c04 	str.w	r3, [r4, #-4]
 800b736:	f8cd b008 	str.w	fp, [sp, #8]
 800b73a:	464c      	mov	r4, r9
 800b73c:	461d      	mov	r5, r3
 800b73e:	9a03      	ldr	r2, [sp, #12]
 800b740:	e7d7      	b.n	800b6f2 <__hexnan+0x2e>
 800b742:	2929      	cmp	r1, #41	; 0x29
 800b744:	d156      	bne.n	800b7f4 <__hexnan+0x130>
 800b746:	3202      	adds	r2, #2
 800b748:	f8ca 2000 	str.w	r2, [sl]
 800b74c:	f1bb 0f00 	cmp.w	fp, #0
 800b750:	d050      	beq.n	800b7f4 <__hexnan+0x130>
 800b752:	454c      	cmp	r4, r9
 800b754:	d206      	bcs.n	800b764 <__hexnan+0xa0>
 800b756:	2d07      	cmp	r5, #7
 800b758:	dc04      	bgt.n	800b764 <__hexnan+0xa0>
 800b75a:	462a      	mov	r2, r5
 800b75c:	4649      	mov	r1, r9
 800b75e:	4620      	mov	r0, r4
 800b760:	f7ff ff8a 	bl	800b678 <L_shift>
 800b764:	4544      	cmp	r4, r8
 800b766:	d934      	bls.n	800b7d2 <__hexnan+0x10e>
 800b768:	f1a8 0204 	sub.w	r2, r8, #4
 800b76c:	4623      	mov	r3, r4
 800b76e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b772:	f842 1f04 	str.w	r1, [r2, #4]!
 800b776:	429f      	cmp	r7, r3
 800b778:	d2f9      	bcs.n	800b76e <__hexnan+0xaa>
 800b77a:	1b3b      	subs	r3, r7, r4
 800b77c:	f023 0303 	bic.w	r3, r3, #3
 800b780:	3304      	adds	r3, #4
 800b782:	3401      	adds	r4, #1
 800b784:	3e03      	subs	r6, #3
 800b786:	42b4      	cmp	r4, r6
 800b788:	bf88      	it	hi
 800b78a:	2304      	movhi	r3, #4
 800b78c:	4443      	add	r3, r8
 800b78e:	2200      	movs	r2, #0
 800b790:	f843 2b04 	str.w	r2, [r3], #4
 800b794:	429f      	cmp	r7, r3
 800b796:	d2fb      	bcs.n	800b790 <__hexnan+0xcc>
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	b91b      	cbnz	r3, 800b7a4 <__hexnan+0xe0>
 800b79c:	4547      	cmp	r7, r8
 800b79e:	d127      	bne.n	800b7f0 <__hexnan+0x12c>
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	603b      	str	r3, [r7, #0]
 800b7a4:	2005      	movs	r0, #5
 800b7a6:	e026      	b.n	800b7f6 <__hexnan+0x132>
 800b7a8:	3501      	adds	r5, #1
 800b7aa:	2d08      	cmp	r5, #8
 800b7ac:	f10b 0b01 	add.w	fp, fp, #1
 800b7b0:	dd06      	ble.n	800b7c0 <__hexnan+0xfc>
 800b7b2:	4544      	cmp	r4, r8
 800b7b4:	d9c3      	bls.n	800b73e <__hexnan+0x7a>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7bc:	2501      	movs	r5, #1
 800b7be:	3c04      	subs	r4, #4
 800b7c0:	6822      	ldr	r2, [r4, #0]
 800b7c2:	f000 000f 	and.w	r0, r0, #15
 800b7c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b7ca:	6022      	str	r2, [r4, #0]
 800b7cc:	e7b7      	b.n	800b73e <__hexnan+0x7a>
 800b7ce:	2508      	movs	r5, #8
 800b7d0:	e7b5      	b.n	800b73e <__hexnan+0x7a>
 800b7d2:	9b01      	ldr	r3, [sp, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d0df      	beq.n	800b798 <__hexnan+0xd4>
 800b7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7dc:	f1c3 0320 	rsb	r3, r3, #32
 800b7e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b7e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b7e8:	401a      	ands	r2, r3
 800b7ea:	f846 2c04 	str.w	r2, [r6, #-4]
 800b7ee:	e7d3      	b.n	800b798 <__hexnan+0xd4>
 800b7f0:	3f04      	subs	r7, #4
 800b7f2:	e7d1      	b.n	800b798 <__hexnan+0xd4>
 800b7f4:	2004      	movs	r0, #4
 800b7f6:	b007      	add	sp, #28
 800b7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7fc <_localeconv_r>:
 800b7fc:	4800      	ldr	r0, [pc, #0]	; (800b800 <_localeconv_r+0x4>)
 800b7fe:	4770      	bx	lr
 800b800:	20000194 	.word	0x20000194

0800b804 <__retarget_lock_init_recursive>:
 800b804:	4770      	bx	lr

0800b806 <__retarget_lock_acquire_recursive>:
 800b806:	4770      	bx	lr

0800b808 <__retarget_lock_release_recursive>:
 800b808:	4770      	bx	lr
	...

0800b80c <_lseek_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	4d07      	ldr	r5, [pc, #28]	; (800b82c <_lseek_r+0x20>)
 800b810:	4604      	mov	r4, r0
 800b812:	4608      	mov	r0, r1
 800b814:	4611      	mov	r1, r2
 800b816:	2200      	movs	r2, #0
 800b818:	602a      	str	r2, [r5, #0]
 800b81a:	461a      	mov	r2, r3
 800b81c:	f7f6 f9ea 	bl	8001bf4 <_lseek>
 800b820:	1c43      	adds	r3, r0, #1
 800b822:	d102      	bne.n	800b82a <_lseek_r+0x1e>
 800b824:	682b      	ldr	r3, [r5, #0]
 800b826:	b103      	cbz	r3, 800b82a <_lseek_r+0x1e>
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	bd38      	pop	{r3, r4, r5, pc}
 800b82c:	2000066c 	.word	0x2000066c

0800b830 <__ascii_mbtowc>:
 800b830:	b082      	sub	sp, #8
 800b832:	b901      	cbnz	r1, 800b836 <__ascii_mbtowc+0x6>
 800b834:	a901      	add	r1, sp, #4
 800b836:	b142      	cbz	r2, 800b84a <__ascii_mbtowc+0x1a>
 800b838:	b14b      	cbz	r3, 800b84e <__ascii_mbtowc+0x1e>
 800b83a:	7813      	ldrb	r3, [r2, #0]
 800b83c:	600b      	str	r3, [r1, #0]
 800b83e:	7812      	ldrb	r2, [r2, #0]
 800b840:	1e10      	subs	r0, r2, #0
 800b842:	bf18      	it	ne
 800b844:	2001      	movne	r0, #1
 800b846:	b002      	add	sp, #8
 800b848:	4770      	bx	lr
 800b84a:	4610      	mov	r0, r2
 800b84c:	e7fb      	b.n	800b846 <__ascii_mbtowc+0x16>
 800b84e:	f06f 0001 	mvn.w	r0, #1
 800b852:	e7f8      	b.n	800b846 <__ascii_mbtowc+0x16>

0800b854 <memcpy>:
 800b854:	440a      	add	r2, r1
 800b856:	4291      	cmp	r1, r2
 800b858:	f100 33ff 	add.w	r3, r0, #4294967295
 800b85c:	d100      	bne.n	800b860 <memcpy+0xc>
 800b85e:	4770      	bx	lr
 800b860:	b510      	push	{r4, lr}
 800b862:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b86a:	4291      	cmp	r1, r2
 800b86c:	d1f9      	bne.n	800b862 <memcpy+0xe>
 800b86e:	bd10      	pop	{r4, pc}

0800b870 <__malloc_lock>:
 800b870:	4801      	ldr	r0, [pc, #4]	; (800b878 <__malloc_lock+0x8>)
 800b872:	f7ff bfc8 	b.w	800b806 <__retarget_lock_acquire_recursive>
 800b876:	bf00      	nop
 800b878:	20000668 	.word	0x20000668

0800b87c <__malloc_unlock>:
 800b87c:	4801      	ldr	r0, [pc, #4]	; (800b884 <__malloc_unlock+0x8>)
 800b87e:	f7ff bfc3 	b.w	800b808 <__retarget_lock_release_recursive>
 800b882:	bf00      	nop
 800b884:	20000668 	.word	0x20000668

0800b888 <_Balloc>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b88c:	4604      	mov	r4, r0
 800b88e:	460d      	mov	r5, r1
 800b890:	b976      	cbnz	r6, 800b8b0 <_Balloc+0x28>
 800b892:	2010      	movs	r0, #16
 800b894:	f7fc fa06 	bl	8007ca4 <malloc>
 800b898:	4602      	mov	r2, r0
 800b89a:	6260      	str	r0, [r4, #36]	; 0x24
 800b89c:	b920      	cbnz	r0, 800b8a8 <_Balloc+0x20>
 800b89e:	4b18      	ldr	r3, [pc, #96]	; (800b900 <_Balloc+0x78>)
 800b8a0:	4818      	ldr	r0, [pc, #96]	; (800b904 <_Balloc+0x7c>)
 800b8a2:	2166      	movs	r1, #102	; 0x66
 800b8a4:	f001 fa68 	bl	800cd78 <__assert_func>
 800b8a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8ac:	6006      	str	r6, [r0, #0]
 800b8ae:	60c6      	str	r6, [r0, #12]
 800b8b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b8b2:	68f3      	ldr	r3, [r6, #12]
 800b8b4:	b183      	cbz	r3, 800b8d8 <_Balloc+0x50>
 800b8b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8be:	b9b8      	cbnz	r0, 800b8f0 <_Balloc+0x68>
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	fa01 f605 	lsl.w	r6, r1, r5
 800b8c6:	1d72      	adds	r2, r6, #5
 800b8c8:	0092      	lsls	r2, r2, #2
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 fc9d 	bl	800c20a <_calloc_r>
 800b8d0:	b160      	cbz	r0, 800b8ec <_Balloc+0x64>
 800b8d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8d6:	e00e      	b.n	800b8f6 <_Balloc+0x6e>
 800b8d8:	2221      	movs	r2, #33	; 0x21
 800b8da:	2104      	movs	r1, #4
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f000 fc94 	bl	800c20a <_calloc_r>
 800b8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8e4:	60f0      	str	r0, [r6, #12]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e4      	bne.n	800b8b6 <_Balloc+0x2e>
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	6802      	ldr	r2, [r0, #0]
 800b8f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8fc:	e7f7      	b.n	800b8ee <_Balloc+0x66>
 800b8fe:	bf00      	nop
 800b900:	0800dd26 	.word	0x0800dd26
 800b904:	0800de88 	.word	0x0800de88

0800b908 <_Bfree>:
 800b908:	b570      	push	{r4, r5, r6, lr}
 800b90a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b90c:	4605      	mov	r5, r0
 800b90e:	460c      	mov	r4, r1
 800b910:	b976      	cbnz	r6, 800b930 <_Bfree+0x28>
 800b912:	2010      	movs	r0, #16
 800b914:	f7fc f9c6 	bl	8007ca4 <malloc>
 800b918:	4602      	mov	r2, r0
 800b91a:	6268      	str	r0, [r5, #36]	; 0x24
 800b91c:	b920      	cbnz	r0, 800b928 <_Bfree+0x20>
 800b91e:	4b09      	ldr	r3, [pc, #36]	; (800b944 <_Bfree+0x3c>)
 800b920:	4809      	ldr	r0, [pc, #36]	; (800b948 <_Bfree+0x40>)
 800b922:	218a      	movs	r1, #138	; 0x8a
 800b924:	f001 fa28 	bl	800cd78 <__assert_func>
 800b928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b92c:	6006      	str	r6, [r0, #0]
 800b92e:	60c6      	str	r6, [r0, #12]
 800b930:	b13c      	cbz	r4, 800b942 <_Bfree+0x3a>
 800b932:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b934:	6862      	ldr	r2, [r4, #4]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b93c:	6021      	str	r1, [r4, #0]
 800b93e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b942:	bd70      	pop	{r4, r5, r6, pc}
 800b944:	0800dd26 	.word	0x0800dd26
 800b948:	0800de88 	.word	0x0800de88

0800b94c <__multadd>:
 800b94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b950:	690d      	ldr	r5, [r1, #16]
 800b952:	4607      	mov	r7, r0
 800b954:	460c      	mov	r4, r1
 800b956:	461e      	mov	r6, r3
 800b958:	f101 0c14 	add.w	ip, r1, #20
 800b95c:	2000      	movs	r0, #0
 800b95e:	f8dc 3000 	ldr.w	r3, [ip]
 800b962:	b299      	uxth	r1, r3
 800b964:	fb02 6101 	mla	r1, r2, r1, r6
 800b968:	0c1e      	lsrs	r6, r3, #16
 800b96a:	0c0b      	lsrs	r3, r1, #16
 800b96c:	fb02 3306 	mla	r3, r2, r6, r3
 800b970:	b289      	uxth	r1, r1
 800b972:	3001      	adds	r0, #1
 800b974:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b978:	4285      	cmp	r5, r0
 800b97a:	f84c 1b04 	str.w	r1, [ip], #4
 800b97e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b982:	dcec      	bgt.n	800b95e <__multadd+0x12>
 800b984:	b30e      	cbz	r6, 800b9ca <__multadd+0x7e>
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	42ab      	cmp	r3, r5
 800b98a:	dc19      	bgt.n	800b9c0 <__multadd+0x74>
 800b98c:	6861      	ldr	r1, [r4, #4]
 800b98e:	4638      	mov	r0, r7
 800b990:	3101      	adds	r1, #1
 800b992:	f7ff ff79 	bl	800b888 <_Balloc>
 800b996:	4680      	mov	r8, r0
 800b998:	b928      	cbnz	r0, 800b9a6 <__multadd+0x5a>
 800b99a:	4602      	mov	r2, r0
 800b99c:	4b0c      	ldr	r3, [pc, #48]	; (800b9d0 <__multadd+0x84>)
 800b99e:	480d      	ldr	r0, [pc, #52]	; (800b9d4 <__multadd+0x88>)
 800b9a0:	21b5      	movs	r1, #181	; 0xb5
 800b9a2:	f001 f9e9 	bl	800cd78 <__assert_func>
 800b9a6:	6922      	ldr	r2, [r4, #16]
 800b9a8:	3202      	adds	r2, #2
 800b9aa:	f104 010c 	add.w	r1, r4, #12
 800b9ae:	0092      	lsls	r2, r2, #2
 800b9b0:	300c      	adds	r0, #12
 800b9b2:	f7ff ff4f 	bl	800b854 <memcpy>
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	f7ff ffa5 	bl	800b908 <_Bfree>
 800b9be:	4644      	mov	r4, r8
 800b9c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9c4:	3501      	adds	r5, #1
 800b9c6:	615e      	str	r6, [r3, #20]
 800b9c8:	6125      	str	r5, [r4, #16]
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d0:	0800dd98 	.word	0x0800dd98
 800b9d4:	0800de88 	.word	0x0800de88

0800b9d8 <__s2b>:
 800b9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9dc:	460c      	mov	r4, r1
 800b9de:	4615      	mov	r5, r2
 800b9e0:	461f      	mov	r7, r3
 800b9e2:	2209      	movs	r2, #9
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	db09      	blt.n	800ba08 <__s2b+0x30>
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	f7ff ff47 	bl	800b888 <_Balloc>
 800b9fa:	b940      	cbnz	r0, 800ba0e <__s2b+0x36>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	4b19      	ldr	r3, [pc, #100]	; (800ba64 <__s2b+0x8c>)
 800ba00:	4819      	ldr	r0, [pc, #100]	; (800ba68 <__s2b+0x90>)
 800ba02:	21ce      	movs	r1, #206	; 0xce
 800ba04:	f001 f9b8 	bl	800cd78 <__assert_func>
 800ba08:	0052      	lsls	r2, r2, #1
 800ba0a:	3101      	adds	r1, #1
 800ba0c:	e7f0      	b.n	800b9f0 <__s2b+0x18>
 800ba0e:	9b08      	ldr	r3, [sp, #32]
 800ba10:	6143      	str	r3, [r0, #20]
 800ba12:	2d09      	cmp	r5, #9
 800ba14:	f04f 0301 	mov.w	r3, #1
 800ba18:	6103      	str	r3, [r0, #16]
 800ba1a:	dd16      	ble.n	800ba4a <__s2b+0x72>
 800ba1c:	f104 0909 	add.w	r9, r4, #9
 800ba20:	46c8      	mov	r8, r9
 800ba22:	442c      	add	r4, r5
 800ba24:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba28:	4601      	mov	r1, r0
 800ba2a:	3b30      	subs	r3, #48	; 0x30
 800ba2c:	220a      	movs	r2, #10
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f7ff ff8c 	bl	800b94c <__multadd>
 800ba34:	45a0      	cmp	r8, r4
 800ba36:	d1f5      	bne.n	800ba24 <__s2b+0x4c>
 800ba38:	f1a5 0408 	sub.w	r4, r5, #8
 800ba3c:	444c      	add	r4, r9
 800ba3e:	1b2d      	subs	r5, r5, r4
 800ba40:	1963      	adds	r3, r4, r5
 800ba42:	42bb      	cmp	r3, r7
 800ba44:	db04      	blt.n	800ba50 <__s2b+0x78>
 800ba46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba4a:	340a      	adds	r4, #10
 800ba4c:	2509      	movs	r5, #9
 800ba4e:	e7f6      	b.n	800ba3e <__s2b+0x66>
 800ba50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba54:	4601      	mov	r1, r0
 800ba56:	3b30      	subs	r3, #48	; 0x30
 800ba58:	220a      	movs	r2, #10
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f7ff ff76 	bl	800b94c <__multadd>
 800ba60:	e7ee      	b.n	800ba40 <__s2b+0x68>
 800ba62:	bf00      	nop
 800ba64:	0800dd98 	.word	0x0800dd98
 800ba68:	0800de88 	.word	0x0800de88

0800ba6c <__hi0bits>:
 800ba6c:	0c03      	lsrs	r3, r0, #16
 800ba6e:	041b      	lsls	r3, r3, #16
 800ba70:	b9d3      	cbnz	r3, 800baa8 <__hi0bits+0x3c>
 800ba72:	0400      	lsls	r0, r0, #16
 800ba74:	2310      	movs	r3, #16
 800ba76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ba7a:	bf04      	itt	eq
 800ba7c:	0200      	lsleq	r0, r0, #8
 800ba7e:	3308      	addeq	r3, #8
 800ba80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ba84:	bf04      	itt	eq
 800ba86:	0100      	lsleq	r0, r0, #4
 800ba88:	3304      	addeq	r3, #4
 800ba8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba8e:	bf04      	itt	eq
 800ba90:	0080      	lsleq	r0, r0, #2
 800ba92:	3302      	addeq	r3, #2
 800ba94:	2800      	cmp	r0, #0
 800ba96:	db05      	blt.n	800baa4 <__hi0bits+0x38>
 800ba98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba9c:	f103 0301 	add.w	r3, r3, #1
 800baa0:	bf08      	it	eq
 800baa2:	2320      	moveq	r3, #32
 800baa4:	4618      	mov	r0, r3
 800baa6:	4770      	bx	lr
 800baa8:	2300      	movs	r3, #0
 800baaa:	e7e4      	b.n	800ba76 <__hi0bits+0xa>

0800baac <__lo0bits>:
 800baac:	6803      	ldr	r3, [r0, #0]
 800baae:	f013 0207 	ands.w	r2, r3, #7
 800bab2:	4601      	mov	r1, r0
 800bab4:	d00b      	beq.n	800bace <__lo0bits+0x22>
 800bab6:	07da      	lsls	r2, r3, #31
 800bab8:	d423      	bmi.n	800bb02 <__lo0bits+0x56>
 800baba:	0798      	lsls	r0, r3, #30
 800babc:	bf49      	itett	mi
 800babe:	085b      	lsrmi	r3, r3, #1
 800bac0:	089b      	lsrpl	r3, r3, #2
 800bac2:	2001      	movmi	r0, #1
 800bac4:	600b      	strmi	r3, [r1, #0]
 800bac6:	bf5c      	itt	pl
 800bac8:	600b      	strpl	r3, [r1, #0]
 800baca:	2002      	movpl	r0, #2
 800bacc:	4770      	bx	lr
 800bace:	b298      	uxth	r0, r3
 800bad0:	b9a8      	cbnz	r0, 800bafe <__lo0bits+0x52>
 800bad2:	0c1b      	lsrs	r3, r3, #16
 800bad4:	2010      	movs	r0, #16
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	b90a      	cbnz	r2, 800bade <__lo0bits+0x32>
 800bada:	3008      	adds	r0, #8
 800badc:	0a1b      	lsrs	r3, r3, #8
 800bade:	071a      	lsls	r2, r3, #28
 800bae0:	bf04      	itt	eq
 800bae2:	091b      	lsreq	r3, r3, #4
 800bae4:	3004      	addeq	r0, #4
 800bae6:	079a      	lsls	r2, r3, #30
 800bae8:	bf04      	itt	eq
 800baea:	089b      	lsreq	r3, r3, #2
 800baec:	3002      	addeq	r0, #2
 800baee:	07da      	lsls	r2, r3, #31
 800baf0:	d403      	bmi.n	800bafa <__lo0bits+0x4e>
 800baf2:	085b      	lsrs	r3, r3, #1
 800baf4:	f100 0001 	add.w	r0, r0, #1
 800baf8:	d005      	beq.n	800bb06 <__lo0bits+0x5a>
 800bafa:	600b      	str	r3, [r1, #0]
 800bafc:	4770      	bx	lr
 800bafe:	4610      	mov	r0, r2
 800bb00:	e7e9      	b.n	800bad6 <__lo0bits+0x2a>
 800bb02:	2000      	movs	r0, #0
 800bb04:	4770      	bx	lr
 800bb06:	2020      	movs	r0, #32
 800bb08:	4770      	bx	lr
	...

0800bb0c <__i2b>:
 800bb0c:	b510      	push	{r4, lr}
 800bb0e:	460c      	mov	r4, r1
 800bb10:	2101      	movs	r1, #1
 800bb12:	f7ff feb9 	bl	800b888 <_Balloc>
 800bb16:	4602      	mov	r2, r0
 800bb18:	b928      	cbnz	r0, 800bb26 <__i2b+0x1a>
 800bb1a:	4b05      	ldr	r3, [pc, #20]	; (800bb30 <__i2b+0x24>)
 800bb1c:	4805      	ldr	r0, [pc, #20]	; (800bb34 <__i2b+0x28>)
 800bb1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb22:	f001 f929 	bl	800cd78 <__assert_func>
 800bb26:	2301      	movs	r3, #1
 800bb28:	6144      	str	r4, [r0, #20]
 800bb2a:	6103      	str	r3, [r0, #16]
 800bb2c:	bd10      	pop	{r4, pc}
 800bb2e:	bf00      	nop
 800bb30:	0800dd98 	.word	0x0800dd98
 800bb34:	0800de88 	.word	0x0800de88

0800bb38 <__multiply>:
 800bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3c:	4691      	mov	r9, r2
 800bb3e:	690a      	ldr	r2, [r1, #16]
 800bb40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	bfb8      	it	lt
 800bb48:	460b      	movlt	r3, r1
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	bfbc      	itt	lt
 800bb4e:	464c      	movlt	r4, r9
 800bb50:	4699      	movlt	r9, r3
 800bb52:	6927      	ldr	r7, [r4, #16]
 800bb54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb58:	68a3      	ldr	r3, [r4, #8]
 800bb5a:	6861      	ldr	r1, [r4, #4]
 800bb5c:	eb07 060a 	add.w	r6, r7, sl
 800bb60:	42b3      	cmp	r3, r6
 800bb62:	b085      	sub	sp, #20
 800bb64:	bfb8      	it	lt
 800bb66:	3101      	addlt	r1, #1
 800bb68:	f7ff fe8e 	bl	800b888 <_Balloc>
 800bb6c:	b930      	cbnz	r0, 800bb7c <__multiply+0x44>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	4b44      	ldr	r3, [pc, #272]	; (800bc84 <__multiply+0x14c>)
 800bb72:	4845      	ldr	r0, [pc, #276]	; (800bc88 <__multiply+0x150>)
 800bb74:	f240 115d 	movw	r1, #349	; 0x15d
 800bb78:	f001 f8fe 	bl	800cd78 <__assert_func>
 800bb7c:	f100 0514 	add.w	r5, r0, #20
 800bb80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb84:	462b      	mov	r3, r5
 800bb86:	2200      	movs	r2, #0
 800bb88:	4543      	cmp	r3, r8
 800bb8a:	d321      	bcc.n	800bbd0 <__multiply+0x98>
 800bb8c:	f104 0314 	add.w	r3, r4, #20
 800bb90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bb94:	f109 0314 	add.w	r3, r9, #20
 800bb98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bb9c:	9202      	str	r2, [sp, #8]
 800bb9e:	1b3a      	subs	r2, r7, r4
 800bba0:	3a15      	subs	r2, #21
 800bba2:	f022 0203 	bic.w	r2, r2, #3
 800bba6:	3204      	adds	r2, #4
 800bba8:	f104 0115 	add.w	r1, r4, #21
 800bbac:	428f      	cmp	r7, r1
 800bbae:	bf38      	it	cc
 800bbb0:	2204      	movcc	r2, #4
 800bbb2:	9201      	str	r2, [sp, #4]
 800bbb4:	9a02      	ldr	r2, [sp, #8]
 800bbb6:	9303      	str	r3, [sp, #12]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d80c      	bhi.n	800bbd6 <__multiply+0x9e>
 800bbbc:	2e00      	cmp	r6, #0
 800bbbe:	dd03      	ble.n	800bbc8 <__multiply+0x90>
 800bbc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d05a      	beq.n	800bc7e <__multiply+0x146>
 800bbc8:	6106      	str	r6, [r0, #16]
 800bbca:	b005      	add	sp, #20
 800bbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd0:	f843 2b04 	str.w	r2, [r3], #4
 800bbd4:	e7d8      	b.n	800bb88 <__multiply+0x50>
 800bbd6:	f8b3 a000 	ldrh.w	sl, [r3]
 800bbda:	f1ba 0f00 	cmp.w	sl, #0
 800bbde:	d024      	beq.n	800bc2a <__multiply+0xf2>
 800bbe0:	f104 0e14 	add.w	lr, r4, #20
 800bbe4:	46a9      	mov	r9, r5
 800bbe6:	f04f 0c00 	mov.w	ip, #0
 800bbea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bbee:	f8d9 1000 	ldr.w	r1, [r9]
 800bbf2:	fa1f fb82 	uxth.w	fp, r2
 800bbf6:	b289      	uxth	r1, r1
 800bbf8:	fb0a 110b 	mla	r1, sl, fp, r1
 800bbfc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc00:	f8d9 2000 	ldr.w	r2, [r9]
 800bc04:	4461      	add	r1, ip
 800bc06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc0a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc12:	b289      	uxth	r1, r1
 800bc14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc18:	4577      	cmp	r7, lr
 800bc1a:	f849 1b04 	str.w	r1, [r9], #4
 800bc1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc22:	d8e2      	bhi.n	800bbea <__multiply+0xb2>
 800bc24:	9a01      	ldr	r2, [sp, #4]
 800bc26:	f845 c002 	str.w	ip, [r5, r2]
 800bc2a:	9a03      	ldr	r2, [sp, #12]
 800bc2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc30:	3304      	adds	r3, #4
 800bc32:	f1b9 0f00 	cmp.w	r9, #0
 800bc36:	d020      	beq.n	800bc7a <__multiply+0x142>
 800bc38:	6829      	ldr	r1, [r5, #0]
 800bc3a:	f104 0c14 	add.w	ip, r4, #20
 800bc3e:	46ae      	mov	lr, r5
 800bc40:	f04f 0a00 	mov.w	sl, #0
 800bc44:	f8bc b000 	ldrh.w	fp, [ip]
 800bc48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc4c:	fb09 220b 	mla	r2, r9, fp, r2
 800bc50:	4492      	add	sl, r2
 800bc52:	b289      	uxth	r1, r1
 800bc54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bc58:	f84e 1b04 	str.w	r1, [lr], #4
 800bc5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bc60:	f8be 1000 	ldrh.w	r1, [lr]
 800bc64:	0c12      	lsrs	r2, r2, #16
 800bc66:	fb09 1102 	mla	r1, r9, r2, r1
 800bc6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bc6e:	4567      	cmp	r7, ip
 800bc70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc74:	d8e6      	bhi.n	800bc44 <__multiply+0x10c>
 800bc76:	9a01      	ldr	r2, [sp, #4]
 800bc78:	50a9      	str	r1, [r5, r2]
 800bc7a:	3504      	adds	r5, #4
 800bc7c:	e79a      	b.n	800bbb4 <__multiply+0x7c>
 800bc7e:	3e01      	subs	r6, #1
 800bc80:	e79c      	b.n	800bbbc <__multiply+0x84>
 800bc82:	bf00      	nop
 800bc84:	0800dd98 	.word	0x0800dd98
 800bc88:	0800de88 	.word	0x0800de88

0800bc8c <__pow5mult>:
 800bc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc90:	4615      	mov	r5, r2
 800bc92:	f012 0203 	ands.w	r2, r2, #3
 800bc96:	4606      	mov	r6, r0
 800bc98:	460f      	mov	r7, r1
 800bc9a:	d007      	beq.n	800bcac <__pow5mult+0x20>
 800bc9c:	4c25      	ldr	r4, [pc, #148]	; (800bd34 <__pow5mult+0xa8>)
 800bc9e:	3a01      	subs	r2, #1
 800bca0:	2300      	movs	r3, #0
 800bca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bca6:	f7ff fe51 	bl	800b94c <__multadd>
 800bcaa:	4607      	mov	r7, r0
 800bcac:	10ad      	asrs	r5, r5, #2
 800bcae:	d03d      	beq.n	800bd2c <__pow5mult+0xa0>
 800bcb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bcb2:	b97c      	cbnz	r4, 800bcd4 <__pow5mult+0x48>
 800bcb4:	2010      	movs	r0, #16
 800bcb6:	f7fb fff5 	bl	8007ca4 <malloc>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	6270      	str	r0, [r6, #36]	; 0x24
 800bcbe:	b928      	cbnz	r0, 800bccc <__pow5mult+0x40>
 800bcc0:	4b1d      	ldr	r3, [pc, #116]	; (800bd38 <__pow5mult+0xac>)
 800bcc2:	481e      	ldr	r0, [pc, #120]	; (800bd3c <__pow5mult+0xb0>)
 800bcc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bcc8:	f001 f856 	bl	800cd78 <__assert_func>
 800bccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcd0:	6004      	str	r4, [r0, #0]
 800bcd2:	60c4      	str	r4, [r0, #12]
 800bcd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bcd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcdc:	b94c      	cbnz	r4, 800bcf2 <__pow5mult+0x66>
 800bcde:	f240 2171 	movw	r1, #625	; 0x271
 800bce2:	4630      	mov	r0, r6
 800bce4:	f7ff ff12 	bl	800bb0c <__i2b>
 800bce8:	2300      	movs	r3, #0
 800bcea:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcee:	4604      	mov	r4, r0
 800bcf0:	6003      	str	r3, [r0, #0]
 800bcf2:	f04f 0900 	mov.w	r9, #0
 800bcf6:	07eb      	lsls	r3, r5, #31
 800bcf8:	d50a      	bpl.n	800bd10 <__pow5mult+0x84>
 800bcfa:	4639      	mov	r1, r7
 800bcfc:	4622      	mov	r2, r4
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f7ff ff1a 	bl	800bb38 <__multiply>
 800bd04:	4639      	mov	r1, r7
 800bd06:	4680      	mov	r8, r0
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f7ff fdfd 	bl	800b908 <_Bfree>
 800bd0e:	4647      	mov	r7, r8
 800bd10:	106d      	asrs	r5, r5, #1
 800bd12:	d00b      	beq.n	800bd2c <__pow5mult+0xa0>
 800bd14:	6820      	ldr	r0, [r4, #0]
 800bd16:	b938      	cbnz	r0, 800bd28 <__pow5mult+0x9c>
 800bd18:	4622      	mov	r2, r4
 800bd1a:	4621      	mov	r1, r4
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f7ff ff0b 	bl	800bb38 <__multiply>
 800bd22:	6020      	str	r0, [r4, #0]
 800bd24:	f8c0 9000 	str.w	r9, [r0]
 800bd28:	4604      	mov	r4, r0
 800bd2a:	e7e4      	b.n	800bcf6 <__pow5mult+0x6a>
 800bd2c:	4638      	mov	r0, r7
 800bd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd32:	bf00      	nop
 800bd34:	0800dfd8 	.word	0x0800dfd8
 800bd38:	0800dd26 	.word	0x0800dd26
 800bd3c:	0800de88 	.word	0x0800de88

0800bd40 <__lshift>:
 800bd40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd44:	460c      	mov	r4, r1
 800bd46:	6849      	ldr	r1, [r1, #4]
 800bd48:	6923      	ldr	r3, [r4, #16]
 800bd4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd4e:	68a3      	ldr	r3, [r4, #8]
 800bd50:	4607      	mov	r7, r0
 800bd52:	4691      	mov	r9, r2
 800bd54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd58:	f108 0601 	add.w	r6, r8, #1
 800bd5c:	42b3      	cmp	r3, r6
 800bd5e:	db0b      	blt.n	800bd78 <__lshift+0x38>
 800bd60:	4638      	mov	r0, r7
 800bd62:	f7ff fd91 	bl	800b888 <_Balloc>
 800bd66:	4605      	mov	r5, r0
 800bd68:	b948      	cbnz	r0, 800bd7e <__lshift+0x3e>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	4b2a      	ldr	r3, [pc, #168]	; (800be18 <__lshift+0xd8>)
 800bd6e:	482b      	ldr	r0, [pc, #172]	; (800be1c <__lshift+0xdc>)
 800bd70:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bd74:	f001 f800 	bl	800cd78 <__assert_func>
 800bd78:	3101      	adds	r1, #1
 800bd7a:	005b      	lsls	r3, r3, #1
 800bd7c:	e7ee      	b.n	800bd5c <__lshift+0x1c>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	f100 0114 	add.w	r1, r0, #20
 800bd84:	f100 0210 	add.w	r2, r0, #16
 800bd88:	4618      	mov	r0, r3
 800bd8a:	4553      	cmp	r3, sl
 800bd8c:	db37      	blt.n	800bdfe <__lshift+0xbe>
 800bd8e:	6920      	ldr	r0, [r4, #16]
 800bd90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd94:	f104 0314 	add.w	r3, r4, #20
 800bd98:	f019 091f 	ands.w	r9, r9, #31
 800bd9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bda0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bda4:	d02f      	beq.n	800be06 <__lshift+0xc6>
 800bda6:	f1c9 0e20 	rsb	lr, r9, #32
 800bdaa:	468a      	mov	sl, r1
 800bdac:	f04f 0c00 	mov.w	ip, #0
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	fa02 f209 	lsl.w	r2, r2, r9
 800bdb6:	ea42 020c 	orr.w	r2, r2, ip
 800bdba:	f84a 2b04 	str.w	r2, [sl], #4
 800bdbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc2:	4298      	cmp	r0, r3
 800bdc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bdc8:	d8f2      	bhi.n	800bdb0 <__lshift+0x70>
 800bdca:	1b03      	subs	r3, r0, r4
 800bdcc:	3b15      	subs	r3, #21
 800bdce:	f023 0303 	bic.w	r3, r3, #3
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	f104 0215 	add.w	r2, r4, #21
 800bdd8:	4290      	cmp	r0, r2
 800bdda:	bf38      	it	cc
 800bddc:	2304      	movcc	r3, #4
 800bdde:	f841 c003 	str.w	ip, [r1, r3]
 800bde2:	f1bc 0f00 	cmp.w	ip, #0
 800bde6:	d001      	beq.n	800bdec <__lshift+0xac>
 800bde8:	f108 0602 	add.w	r6, r8, #2
 800bdec:	3e01      	subs	r6, #1
 800bdee:	4638      	mov	r0, r7
 800bdf0:	612e      	str	r6, [r5, #16]
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	f7ff fd88 	bl	800b908 <_Bfree>
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdfe:	f842 0f04 	str.w	r0, [r2, #4]!
 800be02:	3301      	adds	r3, #1
 800be04:	e7c1      	b.n	800bd8a <__lshift+0x4a>
 800be06:	3904      	subs	r1, #4
 800be08:	f853 2b04 	ldr.w	r2, [r3], #4
 800be0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800be10:	4298      	cmp	r0, r3
 800be12:	d8f9      	bhi.n	800be08 <__lshift+0xc8>
 800be14:	e7ea      	b.n	800bdec <__lshift+0xac>
 800be16:	bf00      	nop
 800be18:	0800dd98 	.word	0x0800dd98
 800be1c:	0800de88 	.word	0x0800de88

0800be20 <__mcmp>:
 800be20:	b530      	push	{r4, r5, lr}
 800be22:	6902      	ldr	r2, [r0, #16]
 800be24:	690c      	ldr	r4, [r1, #16]
 800be26:	1b12      	subs	r2, r2, r4
 800be28:	d10e      	bne.n	800be48 <__mcmp+0x28>
 800be2a:	f100 0314 	add.w	r3, r0, #20
 800be2e:	3114      	adds	r1, #20
 800be30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be40:	42a5      	cmp	r5, r4
 800be42:	d003      	beq.n	800be4c <__mcmp+0x2c>
 800be44:	d305      	bcc.n	800be52 <__mcmp+0x32>
 800be46:	2201      	movs	r2, #1
 800be48:	4610      	mov	r0, r2
 800be4a:	bd30      	pop	{r4, r5, pc}
 800be4c:	4283      	cmp	r3, r0
 800be4e:	d3f3      	bcc.n	800be38 <__mcmp+0x18>
 800be50:	e7fa      	b.n	800be48 <__mcmp+0x28>
 800be52:	f04f 32ff 	mov.w	r2, #4294967295
 800be56:	e7f7      	b.n	800be48 <__mcmp+0x28>

0800be58 <__mdiff>:
 800be58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	460c      	mov	r4, r1
 800be5e:	4606      	mov	r6, r0
 800be60:	4611      	mov	r1, r2
 800be62:	4620      	mov	r0, r4
 800be64:	4690      	mov	r8, r2
 800be66:	f7ff ffdb 	bl	800be20 <__mcmp>
 800be6a:	1e05      	subs	r5, r0, #0
 800be6c:	d110      	bne.n	800be90 <__mdiff+0x38>
 800be6e:	4629      	mov	r1, r5
 800be70:	4630      	mov	r0, r6
 800be72:	f7ff fd09 	bl	800b888 <_Balloc>
 800be76:	b930      	cbnz	r0, 800be86 <__mdiff+0x2e>
 800be78:	4b3a      	ldr	r3, [pc, #232]	; (800bf64 <__mdiff+0x10c>)
 800be7a:	4602      	mov	r2, r0
 800be7c:	f240 2132 	movw	r1, #562	; 0x232
 800be80:	4839      	ldr	r0, [pc, #228]	; (800bf68 <__mdiff+0x110>)
 800be82:	f000 ff79 	bl	800cd78 <__assert_func>
 800be86:	2301      	movs	r3, #1
 800be88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be90:	bfa4      	itt	ge
 800be92:	4643      	movge	r3, r8
 800be94:	46a0      	movge	r8, r4
 800be96:	4630      	mov	r0, r6
 800be98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800be9c:	bfa6      	itte	ge
 800be9e:	461c      	movge	r4, r3
 800bea0:	2500      	movge	r5, #0
 800bea2:	2501      	movlt	r5, #1
 800bea4:	f7ff fcf0 	bl	800b888 <_Balloc>
 800bea8:	b920      	cbnz	r0, 800beb4 <__mdiff+0x5c>
 800beaa:	4b2e      	ldr	r3, [pc, #184]	; (800bf64 <__mdiff+0x10c>)
 800beac:	4602      	mov	r2, r0
 800beae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800beb2:	e7e5      	b.n	800be80 <__mdiff+0x28>
 800beb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800beb8:	6926      	ldr	r6, [r4, #16]
 800beba:	60c5      	str	r5, [r0, #12]
 800bebc:	f104 0914 	add.w	r9, r4, #20
 800bec0:	f108 0514 	add.w	r5, r8, #20
 800bec4:	f100 0e14 	add.w	lr, r0, #20
 800bec8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800becc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bed0:	f108 0210 	add.w	r2, r8, #16
 800bed4:	46f2      	mov	sl, lr
 800bed6:	2100      	movs	r1, #0
 800bed8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bedc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bee0:	fa1f f883 	uxth.w	r8, r3
 800bee4:	fa11 f18b 	uxtah	r1, r1, fp
 800bee8:	0c1b      	lsrs	r3, r3, #16
 800beea:	eba1 0808 	sub.w	r8, r1, r8
 800beee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bef2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bef6:	fa1f f888 	uxth.w	r8, r8
 800befa:	1419      	asrs	r1, r3, #16
 800befc:	454e      	cmp	r6, r9
 800befe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf02:	f84a 3b04 	str.w	r3, [sl], #4
 800bf06:	d8e7      	bhi.n	800bed8 <__mdiff+0x80>
 800bf08:	1b33      	subs	r3, r6, r4
 800bf0a:	3b15      	subs	r3, #21
 800bf0c:	f023 0303 	bic.w	r3, r3, #3
 800bf10:	3304      	adds	r3, #4
 800bf12:	3415      	adds	r4, #21
 800bf14:	42a6      	cmp	r6, r4
 800bf16:	bf38      	it	cc
 800bf18:	2304      	movcc	r3, #4
 800bf1a:	441d      	add	r5, r3
 800bf1c:	4473      	add	r3, lr
 800bf1e:	469e      	mov	lr, r3
 800bf20:	462e      	mov	r6, r5
 800bf22:	4566      	cmp	r6, ip
 800bf24:	d30e      	bcc.n	800bf44 <__mdiff+0xec>
 800bf26:	f10c 0203 	add.w	r2, ip, #3
 800bf2a:	1b52      	subs	r2, r2, r5
 800bf2c:	f022 0203 	bic.w	r2, r2, #3
 800bf30:	3d03      	subs	r5, #3
 800bf32:	45ac      	cmp	ip, r5
 800bf34:	bf38      	it	cc
 800bf36:	2200      	movcc	r2, #0
 800bf38:	441a      	add	r2, r3
 800bf3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bf3e:	b17b      	cbz	r3, 800bf60 <__mdiff+0x108>
 800bf40:	6107      	str	r7, [r0, #16]
 800bf42:	e7a3      	b.n	800be8c <__mdiff+0x34>
 800bf44:	f856 8b04 	ldr.w	r8, [r6], #4
 800bf48:	fa11 f288 	uxtah	r2, r1, r8
 800bf4c:	1414      	asrs	r4, r2, #16
 800bf4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bf52:	b292      	uxth	r2, r2
 800bf54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bf58:	f84e 2b04 	str.w	r2, [lr], #4
 800bf5c:	1421      	asrs	r1, r4, #16
 800bf5e:	e7e0      	b.n	800bf22 <__mdiff+0xca>
 800bf60:	3f01      	subs	r7, #1
 800bf62:	e7ea      	b.n	800bf3a <__mdiff+0xe2>
 800bf64:	0800dd98 	.word	0x0800dd98
 800bf68:	0800de88 	.word	0x0800de88

0800bf6c <__ulp>:
 800bf6c:	b082      	sub	sp, #8
 800bf6e:	ed8d 0b00 	vstr	d0, [sp]
 800bf72:	9b01      	ldr	r3, [sp, #4]
 800bf74:	4912      	ldr	r1, [pc, #72]	; (800bfc0 <__ulp+0x54>)
 800bf76:	4019      	ands	r1, r3
 800bf78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bf7c:	2900      	cmp	r1, #0
 800bf7e:	dd05      	ble.n	800bf8c <__ulp+0x20>
 800bf80:	2200      	movs	r2, #0
 800bf82:	460b      	mov	r3, r1
 800bf84:	ec43 2b10 	vmov	d0, r2, r3
 800bf88:	b002      	add	sp, #8
 800bf8a:	4770      	bx	lr
 800bf8c:	4249      	negs	r1, r1
 800bf8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bf92:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bf96:	f04f 0200 	mov.w	r2, #0
 800bf9a:	f04f 0300 	mov.w	r3, #0
 800bf9e:	da04      	bge.n	800bfaa <__ulp+0x3e>
 800bfa0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bfa4:	fa41 f300 	asr.w	r3, r1, r0
 800bfa8:	e7ec      	b.n	800bf84 <__ulp+0x18>
 800bfaa:	f1a0 0114 	sub.w	r1, r0, #20
 800bfae:	291e      	cmp	r1, #30
 800bfb0:	bfda      	itte	le
 800bfb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bfb6:	fa20 f101 	lsrle.w	r1, r0, r1
 800bfba:	2101      	movgt	r1, #1
 800bfbc:	460a      	mov	r2, r1
 800bfbe:	e7e1      	b.n	800bf84 <__ulp+0x18>
 800bfc0:	7ff00000 	.word	0x7ff00000

0800bfc4 <__b2d>:
 800bfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc6:	6905      	ldr	r5, [r0, #16]
 800bfc8:	f100 0714 	add.w	r7, r0, #20
 800bfcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bfd0:	1f2e      	subs	r6, r5, #4
 800bfd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f7ff fd48 	bl	800ba6c <__hi0bits>
 800bfdc:	f1c0 0320 	rsb	r3, r0, #32
 800bfe0:	280a      	cmp	r0, #10
 800bfe2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c060 <__b2d+0x9c>
 800bfe6:	600b      	str	r3, [r1, #0]
 800bfe8:	dc14      	bgt.n	800c014 <__b2d+0x50>
 800bfea:	f1c0 0e0b 	rsb	lr, r0, #11
 800bfee:	fa24 f10e 	lsr.w	r1, r4, lr
 800bff2:	42b7      	cmp	r7, r6
 800bff4:	ea41 030c 	orr.w	r3, r1, ip
 800bff8:	bf34      	ite	cc
 800bffa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bffe:	2100      	movcs	r1, #0
 800c000:	3015      	adds	r0, #21
 800c002:	fa04 f000 	lsl.w	r0, r4, r0
 800c006:	fa21 f10e 	lsr.w	r1, r1, lr
 800c00a:	ea40 0201 	orr.w	r2, r0, r1
 800c00e:	ec43 2b10 	vmov	d0, r2, r3
 800c012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c014:	42b7      	cmp	r7, r6
 800c016:	bf3a      	itte	cc
 800c018:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c01c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c020:	2100      	movcs	r1, #0
 800c022:	380b      	subs	r0, #11
 800c024:	d017      	beq.n	800c056 <__b2d+0x92>
 800c026:	f1c0 0c20 	rsb	ip, r0, #32
 800c02a:	fa04 f500 	lsl.w	r5, r4, r0
 800c02e:	42be      	cmp	r6, r7
 800c030:	fa21 f40c 	lsr.w	r4, r1, ip
 800c034:	ea45 0504 	orr.w	r5, r5, r4
 800c038:	bf8c      	ite	hi
 800c03a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c03e:	2400      	movls	r4, #0
 800c040:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c044:	fa01 f000 	lsl.w	r0, r1, r0
 800c048:	fa24 f40c 	lsr.w	r4, r4, ip
 800c04c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c050:	ea40 0204 	orr.w	r2, r0, r4
 800c054:	e7db      	b.n	800c00e <__b2d+0x4a>
 800c056:	ea44 030c 	orr.w	r3, r4, ip
 800c05a:	460a      	mov	r2, r1
 800c05c:	e7d7      	b.n	800c00e <__b2d+0x4a>
 800c05e:	bf00      	nop
 800c060:	3ff00000 	.word	0x3ff00000

0800c064 <__d2b>:
 800c064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c068:	4689      	mov	r9, r1
 800c06a:	2101      	movs	r1, #1
 800c06c:	ec57 6b10 	vmov	r6, r7, d0
 800c070:	4690      	mov	r8, r2
 800c072:	f7ff fc09 	bl	800b888 <_Balloc>
 800c076:	4604      	mov	r4, r0
 800c078:	b930      	cbnz	r0, 800c088 <__d2b+0x24>
 800c07a:	4602      	mov	r2, r0
 800c07c:	4b25      	ldr	r3, [pc, #148]	; (800c114 <__d2b+0xb0>)
 800c07e:	4826      	ldr	r0, [pc, #152]	; (800c118 <__d2b+0xb4>)
 800c080:	f240 310a 	movw	r1, #778	; 0x30a
 800c084:	f000 fe78 	bl	800cd78 <__assert_func>
 800c088:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c08c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c090:	bb35      	cbnz	r5, 800c0e0 <__d2b+0x7c>
 800c092:	2e00      	cmp	r6, #0
 800c094:	9301      	str	r3, [sp, #4]
 800c096:	d028      	beq.n	800c0ea <__d2b+0x86>
 800c098:	4668      	mov	r0, sp
 800c09a:	9600      	str	r6, [sp, #0]
 800c09c:	f7ff fd06 	bl	800baac <__lo0bits>
 800c0a0:	9900      	ldr	r1, [sp, #0]
 800c0a2:	b300      	cbz	r0, 800c0e6 <__d2b+0x82>
 800c0a4:	9a01      	ldr	r2, [sp, #4]
 800c0a6:	f1c0 0320 	rsb	r3, r0, #32
 800c0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ae:	430b      	orrs	r3, r1
 800c0b0:	40c2      	lsrs	r2, r0
 800c0b2:	6163      	str	r3, [r4, #20]
 800c0b4:	9201      	str	r2, [sp, #4]
 800c0b6:	9b01      	ldr	r3, [sp, #4]
 800c0b8:	61a3      	str	r3, [r4, #24]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	bf14      	ite	ne
 800c0be:	2202      	movne	r2, #2
 800c0c0:	2201      	moveq	r2, #1
 800c0c2:	6122      	str	r2, [r4, #16]
 800c0c4:	b1d5      	cbz	r5, 800c0fc <__d2b+0x98>
 800c0c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0ca:	4405      	add	r5, r0
 800c0cc:	f8c9 5000 	str.w	r5, [r9]
 800c0d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0d4:	f8c8 0000 	str.w	r0, [r8]
 800c0d8:	4620      	mov	r0, r4
 800c0da:	b003      	add	sp, #12
 800c0dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0e4:	e7d5      	b.n	800c092 <__d2b+0x2e>
 800c0e6:	6161      	str	r1, [r4, #20]
 800c0e8:	e7e5      	b.n	800c0b6 <__d2b+0x52>
 800c0ea:	a801      	add	r0, sp, #4
 800c0ec:	f7ff fcde 	bl	800baac <__lo0bits>
 800c0f0:	9b01      	ldr	r3, [sp, #4]
 800c0f2:	6163      	str	r3, [r4, #20]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	6122      	str	r2, [r4, #16]
 800c0f8:	3020      	adds	r0, #32
 800c0fa:	e7e3      	b.n	800c0c4 <__d2b+0x60>
 800c0fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c100:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c104:	f8c9 0000 	str.w	r0, [r9]
 800c108:	6918      	ldr	r0, [r3, #16]
 800c10a:	f7ff fcaf 	bl	800ba6c <__hi0bits>
 800c10e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c112:	e7df      	b.n	800c0d4 <__d2b+0x70>
 800c114:	0800dd98 	.word	0x0800dd98
 800c118:	0800de88 	.word	0x0800de88

0800c11c <__ratio>:
 800c11c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c120:	4688      	mov	r8, r1
 800c122:	4669      	mov	r1, sp
 800c124:	4681      	mov	r9, r0
 800c126:	f7ff ff4d 	bl	800bfc4 <__b2d>
 800c12a:	a901      	add	r1, sp, #4
 800c12c:	4640      	mov	r0, r8
 800c12e:	ec55 4b10 	vmov	r4, r5, d0
 800c132:	f7ff ff47 	bl	800bfc4 <__b2d>
 800c136:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c13a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c13e:	eba3 0c02 	sub.w	ip, r3, r2
 800c142:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c146:	1a9b      	subs	r3, r3, r2
 800c148:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c14c:	ec51 0b10 	vmov	r0, r1, d0
 800c150:	2b00      	cmp	r3, #0
 800c152:	bfd6      	itet	le
 800c154:	460a      	movle	r2, r1
 800c156:	462a      	movgt	r2, r5
 800c158:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c15c:	468b      	mov	fp, r1
 800c15e:	462f      	mov	r7, r5
 800c160:	bfd4      	ite	le
 800c162:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c166:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c16a:	4620      	mov	r0, r4
 800c16c:	ee10 2a10 	vmov	r2, s0
 800c170:	465b      	mov	r3, fp
 800c172:	4639      	mov	r1, r7
 800c174:	f7f4 fb6a 	bl	800084c <__aeabi_ddiv>
 800c178:	ec41 0b10 	vmov	d0, r0, r1
 800c17c:	b003      	add	sp, #12
 800c17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c182 <__copybits>:
 800c182:	3901      	subs	r1, #1
 800c184:	b570      	push	{r4, r5, r6, lr}
 800c186:	1149      	asrs	r1, r1, #5
 800c188:	6914      	ldr	r4, [r2, #16]
 800c18a:	3101      	adds	r1, #1
 800c18c:	f102 0314 	add.w	r3, r2, #20
 800c190:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c194:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c198:	1f05      	subs	r5, r0, #4
 800c19a:	42a3      	cmp	r3, r4
 800c19c:	d30c      	bcc.n	800c1b8 <__copybits+0x36>
 800c19e:	1aa3      	subs	r3, r4, r2
 800c1a0:	3b11      	subs	r3, #17
 800c1a2:	f023 0303 	bic.w	r3, r3, #3
 800c1a6:	3211      	adds	r2, #17
 800c1a8:	42a2      	cmp	r2, r4
 800c1aa:	bf88      	it	hi
 800c1ac:	2300      	movhi	r3, #0
 800c1ae:	4418      	add	r0, r3
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	4288      	cmp	r0, r1
 800c1b4:	d305      	bcc.n	800c1c2 <__copybits+0x40>
 800c1b6:	bd70      	pop	{r4, r5, r6, pc}
 800c1b8:	f853 6b04 	ldr.w	r6, [r3], #4
 800c1bc:	f845 6f04 	str.w	r6, [r5, #4]!
 800c1c0:	e7eb      	b.n	800c19a <__copybits+0x18>
 800c1c2:	f840 3b04 	str.w	r3, [r0], #4
 800c1c6:	e7f4      	b.n	800c1b2 <__copybits+0x30>

0800c1c8 <__any_on>:
 800c1c8:	f100 0214 	add.w	r2, r0, #20
 800c1cc:	6900      	ldr	r0, [r0, #16]
 800c1ce:	114b      	asrs	r3, r1, #5
 800c1d0:	4298      	cmp	r0, r3
 800c1d2:	b510      	push	{r4, lr}
 800c1d4:	db11      	blt.n	800c1fa <__any_on+0x32>
 800c1d6:	dd0a      	ble.n	800c1ee <__any_on+0x26>
 800c1d8:	f011 011f 	ands.w	r1, r1, #31
 800c1dc:	d007      	beq.n	800c1ee <__any_on+0x26>
 800c1de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1e2:	fa24 f001 	lsr.w	r0, r4, r1
 800c1e6:	fa00 f101 	lsl.w	r1, r0, r1
 800c1ea:	428c      	cmp	r4, r1
 800c1ec:	d10b      	bne.n	800c206 <__any_on+0x3e>
 800c1ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d803      	bhi.n	800c1fe <__any_on+0x36>
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	bd10      	pop	{r4, pc}
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	e7f7      	b.n	800c1ee <__any_on+0x26>
 800c1fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c202:	2900      	cmp	r1, #0
 800c204:	d0f5      	beq.n	800c1f2 <__any_on+0x2a>
 800c206:	2001      	movs	r0, #1
 800c208:	e7f6      	b.n	800c1f8 <__any_on+0x30>

0800c20a <_calloc_r>:
 800c20a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c20c:	fba1 2402 	umull	r2, r4, r1, r2
 800c210:	b94c      	cbnz	r4, 800c226 <_calloc_r+0x1c>
 800c212:	4611      	mov	r1, r2
 800c214:	9201      	str	r2, [sp, #4]
 800c216:	f7fb fdc1 	bl	8007d9c <_malloc_r>
 800c21a:	9a01      	ldr	r2, [sp, #4]
 800c21c:	4605      	mov	r5, r0
 800c21e:	b930      	cbnz	r0, 800c22e <_calloc_r+0x24>
 800c220:	4628      	mov	r0, r5
 800c222:	b003      	add	sp, #12
 800c224:	bd30      	pop	{r4, r5, pc}
 800c226:	220c      	movs	r2, #12
 800c228:	6002      	str	r2, [r0, #0]
 800c22a:	2500      	movs	r5, #0
 800c22c:	e7f8      	b.n	800c220 <_calloc_r+0x16>
 800c22e:	4621      	mov	r1, r4
 800c230:	f7fb fd40 	bl	8007cb4 <memset>
 800c234:	e7f4      	b.n	800c220 <_calloc_r+0x16>

0800c236 <__ssputs_r>:
 800c236:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c23a:	688e      	ldr	r6, [r1, #8]
 800c23c:	429e      	cmp	r6, r3
 800c23e:	4682      	mov	sl, r0
 800c240:	460c      	mov	r4, r1
 800c242:	4690      	mov	r8, r2
 800c244:	461f      	mov	r7, r3
 800c246:	d838      	bhi.n	800c2ba <__ssputs_r+0x84>
 800c248:	898a      	ldrh	r2, [r1, #12]
 800c24a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c24e:	d032      	beq.n	800c2b6 <__ssputs_r+0x80>
 800c250:	6825      	ldr	r5, [r4, #0]
 800c252:	6909      	ldr	r1, [r1, #16]
 800c254:	eba5 0901 	sub.w	r9, r5, r1
 800c258:	6965      	ldr	r5, [r4, #20]
 800c25a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c25e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c262:	3301      	adds	r3, #1
 800c264:	444b      	add	r3, r9
 800c266:	106d      	asrs	r5, r5, #1
 800c268:	429d      	cmp	r5, r3
 800c26a:	bf38      	it	cc
 800c26c:	461d      	movcc	r5, r3
 800c26e:	0553      	lsls	r3, r2, #21
 800c270:	d531      	bpl.n	800c2d6 <__ssputs_r+0xa0>
 800c272:	4629      	mov	r1, r5
 800c274:	f7fb fd92 	bl	8007d9c <_malloc_r>
 800c278:	4606      	mov	r6, r0
 800c27a:	b950      	cbnz	r0, 800c292 <__ssputs_r+0x5c>
 800c27c:	230c      	movs	r3, #12
 800c27e:	f8ca 3000 	str.w	r3, [sl]
 800c282:	89a3      	ldrh	r3, [r4, #12]
 800c284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c288:	81a3      	strh	r3, [r4, #12]
 800c28a:	f04f 30ff 	mov.w	r0, #4294967295
 800c28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c292:	6921      	ldr	r1, [r4, #16]
 800c294:	464a      	mov	r2, r9
 800c296:	f7ff fadd 	bl	800b854 <memcpy>
 800c29a:	89a3      	ldrh	r3, [r4, #12]
 800c29c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2a4:	81a3      	strh	r3, [r4, #12]
 800c2a6:	6126      	str	r6, [r4, #16]
 800c2a8:	6165      	str	r5, [r4, #20]
 800c2aa:	444e      	add	r6, r9
 800c2ac:	eba5 0509 	sub.w	r5, r5, r9
 800c2b0:	6026      	str	r6, [r4, #0]
 800c2b2:	60a5      	str	r5, [r4, #8]
 800c2b4:	463e      	mov	r6, r7
 800c2b6:	42be      	cmp	r6, r7
 800c2b8:	d900      	bls.n	800c2bc <__ssputs_r+0x86>
 800c2ba:	463e      	mov	r6, r7
 800c2bc:	6820      	ldr	r0, [r4, #0]
 800c2be:	4632      	mov	r2, r6
 800c2c0:	4641      	mov	r1, r8
 800c2c2:	f000 fd89 	bl	800cdd8 <memmove>
 800c2c6:	68a3      	ldr	r3, [r4, #8]
 800c2c8:	1b9b      	subs	r3, r3, r6
 800c2ca:	60a3      	str	r3, [r4, #8]
 800c2cc:	6823      	ldr	r3, [r4, #0]
 800c2ce:	4433      	add	r3, r6
 800c2d0:	6023      	str	r3, [r4, #0]
 800c2d2:	2000      	movs	r0, #0
 800c2d4:	e7db      	b.n	800c28e <__ssputs_r+0x58>
 800c2d6:	462a      	mov	r2, r5
 800c2d8:	f000 fd98 	bl	800ce0c <_realloc_r>
 800c2dc:	4606      	mov	r6, r0
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d1e1      	bne.n	800c2a6 <__ssputs_r+0x70>
 800c2e2:	6921      	ldr	r1, [r4, #16]
 800c2e4:	4650      	mov	r0, sl
 800c2e6:	f7fb fced 	bl	8007cc4 <_free_r>
 800c2ea:	e7c7      	b.n	800c27c <__ssputs_r+0x46>

0800c2ec <_svfiprintf_r>:
 800c2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f0:	4698      	mov	r8, r3
 800c2f2:	898b      	ldrh	r3, [r1, #12]
 800c2f4:	061b      	lsls	r3, r3, #24
 800c2f6:	b09d      	sub	sp, #116	; 0x74
 800c2f8:	4607      	mov	r7, r0
 800c2fa:	460d      	mov	r5, r1
 800c2fc:	4614      	mov	r4, r2
 800c2fe:	d50e      	bpl.n	800c31e <_svfiprintf_r+0x32>
 800c300:	690b      	ldr	r3, [r1, #16]
 800c302:	b963      	cbnz	r3, 800c31e <_svfiprintf_r+0x32>
 800c304:	2140      	movs	r1, #64	; 0x40
 800c306:	f7fb fd49 	bl	8007d9c <_malloc_r>
 800c30a:	6028      	str	r0, [r5, #0]
 800c30c:	6128      	str	r0, [r5, #16]
 800c30e:	b920      	cbnz	r0, 800c31a <_svfiprintf_r+0x2e>
 800c310:	230c      	movs	r3, #12
 800c312:	603b      	str	r3, [r7, #0]
 800c314:	f04f 30ff 	mov.w	r0, #4294967295
 800c318:	e0d1      	b.n	800c4be <_svfiprintf_r+0x1d2>
 800c31a:	2340      	movs	r3, #64	; 0x40
 800c31c:	616b      	str	r3, [r5, #20]
 800c31e:	2300      	movs	r3, #0
 800c320:	9309      	str	r3, [sp, #36]	; 0x24
 800c322:	2320      	movs	r3, #32
 800c324:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c328:	f8cd 800c 	str.w	r8, [sp, #12]
 800c32c:	2330      	movs	r3, #48	; 0x30
 800c32e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c4d8 <_svfiprintf_r+0x1ec>
 800c332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c336:	f04f 0901 	mov.w	r9, #1
 800c33a:	4623      	mov	r3, r4
 800c33c:	469a      	mov	sl, r3
 800c33e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c342:	b10a      	cbz	r2, 800c348 <_svfiprintf_r+0x5c>
 800c344:	2a25      	cmp	r2, #37	; 0x25
 800c346:	d1f9      	bne.n	800c33c <_svfiprintf_r+0x50>
 800c348:	ebba 0b04 	subs.w	fp, sl, r4
 800c34c:	d00b      	beq.n	800c366 <_svfiprintf_r+0x7a>
 800c34e:	465b      	mov	r3, fp
 800c350:	4622      	mov	r2, r4
 800c352:	4629      	mov	r1, r5
 800c354:	4638      	mov	r0, r7
 800c356:	f7ff ff6e 	bl	800c236 <__ssputs_r>
 800c35a:	3001      	adds	r0, #1
 800c35c:	f000 80aa 	beq.w	800c4b4 <_svfiprintf_r+0x1c8>
 800c360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c362:	445a      	add	r2, fp
 800c364:	9209      	str	r2, [sp, #36]	; 0x24
 800c366:	f89a 3000 	ldrb.w	r3, [sl]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 80a2 	beq.w	800c4b4 <_svfiprintf_r+0x1c8>
 800c370:	2300      	movs	r3, #0
 800c372:	f04f 32ff 	mov.w	r2, #4294967295
 800c376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c37a:	f10a 0a01 	add.w	sl, sl, #1
 800c37e:	9304      	str	r3, [sp, #16]
 800c380:	9307      	str	r3, [sp, #28]
 800c382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c386:	931a      	str	r3, [sp, #104]	; 0x68
 800c388:	4654      	mov	r4, sl
 800c38a:	2205      	movs	r2, #5
 800c38c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c390:	4851      	ldr	r0, [pc, #324]	; (800c4d8 <_svfiprintf_r+0x1ec>)
 800c392:	f7f3 ff25 	bl	80001e0 <memchr>
 800c396:	9a04      	ldr	r2, [sp, #16]
 800c398:	b9d8      	cbnz	r0, 800c3d2 <_svfiprintf_r+0xe6>
 800c39a:	06d0      	lsls	r0, r2, #27
 800c39c:	bf44      	itt	mi
 800c39e:	2320      	movmi	r3, #32
 800c3a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3a4:	0711      	lsls	r1, r2, #28
 800c3a6:	bf44      	itt	mi
 800c3a8:	232b      	movmi	r3, #43	; 0x2b
 800c3aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c3b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3b4:	d015      	beq.n	800c3e2 <_svfiprintf_r+0xf6>
 800c3b6:	9a07      	ldr	r2, [sp, #28]
 800c3b8:	4654      	mov	r4, sl
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	f04f 0c0a 	mov.w	ip, #10
 800c3c0:	4621      	mov	r1, r4
 800c3c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3c6:	3b30      	subs	r3, #48	; 0x30
 800c3c8:	2b09      	cmp	r3, #9
 800c3ca:	d94e      	bls.n	800c46a <_svfiprintf_r+0x17e>
 800c3cc:	b1b0      	cbz	r0, 800c3fc <_svfiprintf_r+0x110>
 800c3ce:	9207      	str	r2, [sp, #28]
 800c3d0:	e014      	b.n	800c3fc <_svfiprintf_r+0x110>
 800c3d2:	eba0 0308 	sub.w	r3, r0, r8
 800c3d6:	fa09 f303 	lsl.w	r3, r9, r3
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	9304      	str	r3, [sp, #16]
 800c3de:	46a2      	mov	sl, r4
 800c3e0:	e7d2      	b.n	800c388 <_svfiprintf_r+0x9c>
 800c3e2:	9b03      	ldr	r3, [sp, #12]
 800c3e4:	1d19      	adds	r1, r3, #4
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	9103      	str	r1, [sp, #12]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	bfbb      	ittet	lt
 800c3ee:	425b      	neglt	r3, r3
 800c3f0:	f042 0202 	orrlt.w	r2, r2, #2
 800c3f4:	9307      	strge	r3, [sp, #28]
 800c3f6:	9307      	strlt	r3, [sp, #28]
 800c3f8:	bfb8      	it	lt
 800c3fa:	9204      	strlt	r2, [sp, #16]
 800c3fc:	7823      	ldrb	r3, [r4, #0]
 800c3fe:	2b2e      	cmp	r3, #46	; 0x2e
 800c400:	d10c      	bne.n	800c41c <_svfiprintf_r+0x130>
 800c402:	7863      	ldrb	r3, [r4, #1]
 800c404:	2b2a      	cmp	r3, #42	; 0x2a
 800c406:	d135      	bne.n	800c474 <_svfiprintf_r+0x188>
 800c408:	9b03      	ldr	r3, [sp, #12]
 800c40a:	1d1a      	adds	r2, r3, #4
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	9203      	str	r2, [sp, #12]
 800c410:	2b00      	cmp	r3, #0
 800c412:	bfb8      	it	lt
 800c414:	f04f 33ff 	movlt.w	r3, #4294967295
 800c418:	3402      	adds	r4, #2
 800c41a:	9305      	str	r3, [sp, #20]
 800c41c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c4e8 <_svfiprintf_r+0x1fc>
 800c420:	7821      	ldrb	r1, [r4, #0]
 800c422:	2203      	movs	r2, #3
 800c424:	4650      	mov	r0, sl
 800c426:	f7f3 fedb 	bl	80001e0 <memchr>
 800c42a:	b140      	cbz	r0, 800c43e <_svfiprintf_r+0x152>
 800c42c:	2340      	movs	r3, #64	; 0x40
 800c42e:	eba0 000a 	sub.w	r0, r0, sl
 800c432:	fa03 f000 	lsl.w	r0, r3, r0
 800c436:	9b04      	ldr	r3, [sp, #16]
 800c438:	4303      	orrs	r3, r0
 800c43a:	3401      	adds	r4, #1
 800c43c:	9304      	str	r3, [sp, #16]
 800c43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c442:	4826      	ldr	r0, [pc, #152]	; (800c4dc <_svfiprintf_r+0x1f0>)
 800c444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c448:	2206      	movs	r2, #6
 800c44a:	f7f3 fec9 	bl	80001e0 <memchr>
 800c44e:	2800      	cmp	r0, #0
 800c450:	d038      	beq.n	800c4c4 <_svfiprintf_r+0x1d8>
 800c452:	4b23      	ldr	r3, [pc, #140]	; (800c4e0 <_svfiprintf_r+0x1f4>)
 800c454:	bb1b      	cbnz	r3, 800c49e <_svfiprintf_r+0x1b2>
 800c456:	9b03      	ldr	r3, [sp, #12]
 800c458:	3307      	adds	r3, #7
 800c45a:	f023 0307 	bic.w	r3, r3, #7
 800c45e:	3308      	adds	r3, #8
 800c460:	9303      	str	r3, [sp, #12]
 800c462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c464:	4433      	add	r3, r6
 800c466:	9309      	str	r3, [sp, #36]	; 0x24
 800c468:	e767      	b.n	800c33a <_svfiprintf_r+0x4e>
 800c46a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c46e:	460c      	mov	r4, r1
 800c470:	2001      	movs	r0, #1
 800c472:	e7a5      	b.n	800c3c0 <_svfiprintf_r+0xd4>
 800c474:	2300      	movs	r3, #0
 800c476:	3401      	adds	r4, #1
 800c478:	9305      	str	r3, [sp, #20]
 800c47a:	4619      	mov	r1, r3
 800c47c:	f04f 0c0a 	mov.w	ip, #10
 800c480:	4620      	mov	r0, r4
 800c482:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c486:	3a30      	subs	r2, #48	; 0x30
 800c488:	2a09      	cmp	r2, #9
 800c48a:	d903      	bls.n	800c494 <_svfiprintf_r+0x1a8>
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d0c5      	beq.n	800c41c <_svfiprintf_r+0x130>
 800c490:	9105      	str	r1, [sp, #20]
 800c492:	e7c3      	b.n	800c41c <_svfiprintf_r+0x130>
 800c494:	fb0c 2101 	mla	r1, ip, r1, r2
 800c498:	4604      	mov	r4, r0
 800c49a:	2301      	movs	r3, #1
 800c49c:	e7f0      	b.n	800c480 <_svfiprintf_r+0x194>
 800c49e:	ab03      	add	r3, sp, #12
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	462a      	mov	r2, r5
 800c4a4:	4b0f      	ldr	r3, [pc, #60]	; (800c4e4 <_svfiprintf_r+0x1f8>)
 800c4a6:	a904      	add	r1, sp, #16
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	f7fb fd8b 	bl	8007fc4 <_printf_float>
 800c4ae:	1c42      	adds	r2, r0, #1
 800c4b0:	4606      	mov	r6, r0
 800c4b2:	d1d6      	bne.n	800c462 <_svfiprintf_r+0x176>
 800c4b4:	89ab      	ldrh	r3, [r5, #12]
 800c4b6:	065b      	lsls	r3, r3, #25
 800c4b8:	f53f af2c 	bmi.w	800c314 <_svfiprintf_r+0x28>
 800c4bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4be:	b01d      	add	sp, #116	; 0x74
 800c4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c4:	ab03      	add	r3, sp, #12
 800c4c6:	9300      	str	r3, [sp, #0]
 800c4c8:	462a      	mov	r2, r5
 800c4ca:	4b06      	ldr	r3, [pc, #24]	; (800c4e4 <_svfiprintf_r+0x1f8>)
 800c4cc:	a904      	add	r1, sp, #16
 800c4ce:	4638      	mov	r0, r7
 800c4d0:	f7fc f81c 	bl	800850c <_printf_i>
 800c4d4:	e7eb      	b.n	800c4ae <_svfiprintf_r+0x1c2>
 800c4d6:	bf00      	nop
 800c4d8:	0800dfe4 	.word	0x0800dfe4
 800c4dc:	0800dfee 	.word	0x0800dfee
 800c4e0:	08007fc5 	.word	0x08007fc5
 800c4e4:	0800c237 	.word	0x0800c237
 800c4e8:	0800dfea 	.word	0x0800dfea

0800c4ec <_sungetc_r>:
 800c4ec:	b538      	push	{r3, r4, r5, lr}
 800c4ee:	1c4b      	adds	r3, r1, #1
 800c4f0:	4614      	mov	r4, r2
 800c4f2:	d103      	bne.n	800c4fc <_sungetc_r+0x10>
 800c4f4:	f04f 35ff 	mov.w	r5, #4294967295
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	bd38      	pop	{r3, r4, r5, pc}
 800c4fc:	8993      	ldrh	r3, [r2, #12]
 800c4fe:	f023 0320 	bic.w	r3, r3, #32
 800c502:	8193      	strh	r3, [r2, #12]
 800c504:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c506:	6852      	ldr	r2, [r2, #4]
 800c508:	b2cd      	uxtb	r5, r1
 800c50a:	b18b      	cbz	r3, 800c530 <_sungetc_r+0x44>
 800c50c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c50e:	4293      	cmp	r3, r2
 800c510:	dd08      	ble.n	800c524 <_sungetc_r+0x38>
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	1e5a      	subs	r2, r3, #1
 800c516:	6022      	str	r2, [r4, #0]
 800c518:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c51c:	6863      	ldr	r3, [r4, #4]
 800c51e:	3301      	adds	r3, #1
 800c520:	6063      	str	r3, [r4, #4]
 800c522:	e7e9      	b.n	800c4f8 <_sungetc_r+0xc>
 800c524:	4621      	mov	r1, r4
 800c526:	f000 fbdf 	bl	800cce8 <__submore>
 800c52a:	2800      	cmp	r0, #0
 800c52c:	d0f1      	beq.n	800c512 <_sungetc_r+0x26>
 800c52e:	e7e1      	b.n	800c4f4 <_sungetc_r+0x8>
 800c530:	6921      	ldr	r1, [r4, #16]
 800c532:	6823      	ldr	r3, [r4, #0]
 800c534:	b151      	cbz	r1, 800c54c <_sungetc_r+0x60>
 800c536:	4299      	cmp	r1, r3
 800c538:	d208      	bcs.n	800c54c <_sungetc_r+0x60>
 800c53a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c53e:	42a9      	cmp	r1, r5
 800c540:	d104      	bne.n	800c54c <_sungetc_r+0x60>
 800c542:	3b01      	subs	r3, #1
 800c544:	3201      	adds	r2, #1
 800c546:	6023      	str	r3, [r4, #0]
 800c548:	6062      	str	r2, [r4, #4]
 800c54a:	e7d5      	b.n	800c4f8 <_sungetc_r+0xc>
 800c54c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c554:	6363      	str	r3, [r4, #52]	; 0x34
 800c556:	2303      	movs	r3, #3
 800c558:	63a3      	str	r3, [r4, #56]	; 0x38
 800c55a:	4623      	mov	r3, r4
 800c55c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	2301      	movs	r3, #1
 800c564:	e7dc      	b.n	800c520 <_sungetc_r+0x34>

0800c566 <__ssrefill_r>:
 800c566:	b510      	push	{r4, lr}
 800c568:	460c      	mov	r4, r1
 800c56a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c56c:	b169      	cbz	r1, 800c58a <__ssrefill_r+0x24>
 800c56e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c572:	4299      	cmp	r1, r3
 800c574:	d001      	beq.n	800c57a <__ssrefill_r+0x14>
 800c576:	f7fb fba5 	bl	8007cc4 <_free_r>
 800c57a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c57c:	6063      	str	r3, [r4, #4]
 800c57e:	2000      	movs	r0, #0
 800c580:	6360      	str	r0, [r4, #52]	; 0x34
 800c582:	b113      	cbz	r3, 800c58a <__ssrefill_r+0x24>
 800c584:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c586:	6023      	str	r3, [r4, #0]
 800c588:	bd10      	pop	{r4, pc}
 800c58a:	6923      	ldr	r3, [r4, #16]
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	2300      	movs	r3, #0
 800c590:	6063      	str	r3, [r4, #4]
 800c592:	89a3      	ldrh	r3, [r4, #12]
 800c594:	f043 0320 	orr.w	r3, r3, #32
 800c598:	81a3      	strh	r3, [r4, #12]
 800c59a:	f04f 30ff 	mov.w	r0, #4294967295
 800c59e:	e7f3      	b.n	800c588 <__ssrefill_r+0x22>

0800c5a0 <__ssvfiscanf_r>:
 800c5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a4:	460c      	mov	r4, r1
 800c5a6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c5b0:	49a6      	ldr	r1, [pc, #664]	; (800c84c <__ssvfiscanf_r+0x2ac>)
 800c5b2:	91a0      	str	r1, [sp, #640]	; 0x280
 800c5b4:	f10d 0804 	add.w	r8, sp, #4
 800c5b8:	49a5      	ldr	r1, [pc, #660]	; (800c850 <__ssvfiscanf_r+0x2b0>)
 800c5ba:	4fa6      	ldr	r7, [pc, #664]	; (800c854 <__ssvfiscanf_r+0x2b4>)
 800c5bc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c858 <__ssvfiscanf_r+0x2b8>
 800c5c0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c5c4:	4606      	mov	r6, r0
 800c5c6:	91a1      	str	r1, [sp, #644]	; 0x284
 800c5c8:	9300      	str	r3, [sp, #0]
 800c5ca:	7813      	ldrb	r3, [r2, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f000 815a 	beq.w	800c886 <__ssvfiscanf_r+0x2e6>
 800c5d2:	5dd9      	ldrb	r1, [r3, r7]
 800c5d4:	f011 0108 	ands.w	r1, r1, #8
 800c5d8:	f102 0501 	add.w	r5, r2, #1
 800c5dc:	d019      	beq.n	800c612 <__ssvfiscanf_r+0x72>
 800c5de:	6863      	ldr	r3, [r4, #4]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	dd0f      	ble.n	800c604 <__ssvfiscanf_r+0x64>
 800c5e4:	6823      	ldr	r3, [r4, #0]
 800c5e6:	781a      	ldrb	r2, [r3, #0]
 800c5e8:	5cba      	ldrb	r2, [r7, r2]
 800c5ea:	0712      	lsls	r2, r2, #28
 800c5ec:	d401      	bmi.n	800c5f2 <__ssvfiscanf_r+0x52>
 800c5ee:	462a      	mov	r2, r5
 800c5f0:	e7eb      	b.n	800c5ca <__ssvfiscanf_r+0x2a>
 800c5f2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c5f4:	3201      	adds	r2, #1
 800c5f6:	9245      	str	r2, [sp, #276]	; 0x114
 800c5f8:	6862      	ldr	r2, [r4, #4]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	3a01      	subs	r2, #1
 800c5fe:	6062      	str	r2, [r4, #4]
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	e7ec      	b.n	800c5de <__ssvfiscanf_r+0x3e>
 800c604:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c606:	4621      	mov	r1, r4
 800c608:	4630      	mov	r0, r6
 800c60a:	4798      	blx	r3
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d0e9      	beq.n	800c5e4 <__ssvfiscanf_r+0x44>
 800c610:	e7ed      	b.n	800c5ee <__ssvfiscanf_r+0x4e>
 800c612:	2b25      	cmp	r3, #37	; 0x25
 800c614:	d012      	beq.n	800c63c <__ssvfiscanf_r+0x9c>
 800c616:	469a      	mov	sl, r3
 800c618:	6863      	ldr	r3, [r4, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f340 8091 	ble.w	800c742 <__ssvfiscanf_r+0x1a2>
 800c620:	6822      	ldr	r2, [r4, #0]
 800c622:	7813      	ldrb	r3, [r2, #0]
 800c624:	4553      	cmp	r3, sl
 800c626:	f040 812e 	bne.w	800c886 <__ssvfiscanf_r+0x2e6>
 800c62a:	6863      	ldr	r3, [r4, #4]
 800c62c:	3b01      	subs	r3, #1
 800c62e:	6063      	str	r3, [r4, #4]
 800c630:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c632:	3201      	adds	r2, #1
 800c634:	3301      	adds	r3, #1
 800c636:	6022      	str	r2, [r4, #0]
 800c638:	9345      	str	r3, [sp, #276]	; 0x114
 800c63a:	e7d8      	b.n	800c5ee <__ssvfiscanf_r+0x4e>
 800c63c:	9141      	str	r1, [sp, #260]	; 0x104
 800c63e:	9143      	str	r1, [sp, #268]	; 0x10c
 800c640:	7853      	ldrb	r3, [r2, #1]
 800c642:	2b2a      	cmp	r3, #42	; 0x2a
 800c644:	bf02      	ittt	eq
 800c646:	2310      	moveq	r3, #16
 800c648:	1c95      	addeq	r5, r2, #2
 800c64a:	9341      	streq	r3, [sp, #260]	; 0x104
 800c64c:	220a      	movs	r2, #10
 800c64e:	46aa      	mov	sl, r5
 800c650:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c654:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c658:	2b09      	cmp	r3, #9
 800c65a:	d91d      	bls.n	800c698 <__ssvfiscanf_r+0xf8>
 800c65c:	487e      	ldr	r0, [pc, #504]	; (800c858 <__ssvfiscanf_r+0x2b8>)
 800c65e:	2203      	movs	r2, #3
 800c660:	f7f3 fdbe 	bl	80001e0 <memchr>
 800c664:	b140      	cbz	r0, 800c678 <__ssvfiscanf_r+0xd8>
 800c666:	2301      	movs	r3, #1
 800c668:	eba0 0009 	sub.w	r0, r0, r9
 800c66c:	fa03 f000 	lsl.w	r0, r3, r0
 800c670:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c672:	4318      	orrs	r0, r3
 800c674:	9041      	str	r0, [sp, #260]	; 0x104
 800c676:	4655      	mov	r5, sl
 800c678:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c67c:	2b78      	cmp	r3, #120	; 0x78
 800c67e:	d806      	bhi.n	800c68e <__ssvfiscanf_r+0xee>
 800c680:	2b57      	cmp	r3, #87	; 0x57
 800c682:	d810      	bhi.n	800c6a6 <__ssvfiscanf_r+0x106>
 800c684:	2b25      	cmp	r3, #37	; 0x25
 800c686:	d0c6      	beq.n	800c616 <__ssvfiscanf_r+0x76>
 800c688:	d856      	bhi.n	800c738 <__ssvfiscanf_r+0x198>
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d064      	beq.n	800c758 <__ssvfiscanf_r+0x1b8>
 800c68e:	2303      	movs	r3, #3
 800c690:	9347      	str	r3, [sp, #284]	; 0x11c
 800c692:	230a      	movs	r3, #10
 800c694:	9342      	str	r3, [sp, #264]	; 0x108
 800c696:	e071      	b.n	800c77c <__ssvfiscanf_r+0x1dc>
 800c698:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c69a:	fb02 1103 	mla	r1, r2, r3, r1
 800c69e:	3930      	subs	r1, #48	; 0x30
 800c6a0:	9143      	str	r1, [sp, #268]	; 0x10c
 800c6a2:	4655      	mov	r5, sl
 800c6a4:	e7d3      	b.n	800c64e <__ssvfiscanf_r+0xae>
 800c6a6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c6aa:	2a20      	cmp	r2, #32
 800c6ac:	d8ef      	bhi.n	800c68e <__ssvfiscanf_r+0xee>
 800c6ae:	a101      	add	r1, pc, #4	; (adr r1, 800c6b4 <__ssvfiscanf_r+0x114>)
 800c6b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c6b4:	0800c767 	.word	0x0800c767
 800c6b8:	0800c68f 	.word	0x0800c68f
 800c6bc:	0800c68f 	.word	0x0800c68f
 800c6c0:	0800c7c5 	.word	0x0800c7c5
 800c6c4:	0800c68f 	.word	0x0800c68f
 800c6c8:	0800c68f 	.word	0x0800c68f
 800c6cc:	0800c68f 	.word	0x0800c68f
 800c6d0:	0800c68f 	.word	0x0800c68f
 800c6d4:	0800c68f 	.word	0x0800c68f
 800c6d8:	0800c68f 	.word	0x0800c68f
 800c6dc:	0800c68f 	.word	0x0800c68f
 800c6e0:	0800c7db 	.word	0x0800c7db
 800c6e4:	0800c7b1 	.word	0x0800c7b1
 800c6e8:	0800c73f 	.word	0x0800c73f
 800c6ec:	0800c73f 	.word	0x0800c73f
 800c6f0:	0800c73f 	.word	0x0800c73f
 800c6f4:	0800c68f 	.word	0x0800c68f
 800c6f8:	0800c7b5 	.word	0x0800c7b5
 800c6fc:	0800c68f 	.word	0x0800c68f
 800c700:	0800c68f 	.word	0x0800c68f
 800c704:	0800c68f 	.word	0x0800c68f
 800c708:	0800c68f 	.word	0x0800c68f
 800c70c:	0800c7eb 	.word	0x0800c7eb
 800c710:	0800c7bd 	.word	0x0800c7bd
 800c714:	0800c75f 	.word	0x0800c75f
 800c718:	0800c68f 	.word	0x0800c68f
 800c71c:	0800c68f 	.word	0x0800c68f
 800c720:	0800c7e7 	.word	0x0800c7e7
 800c724:	0800c68f 	.word	0x0800c68f
 800c728:	0800c7b1 	.word	0x0800c7b1
 800c72c:	0800c68f 	.word	0x0800c68f
 800c730:	0800c68f 	.word	0x0800c68f
 800c734:	0800c767 	.word	0x0800c767
 800c738:	3b45      	subs	r3, #69	; 0x45
 800c73a:	2b02      	cmp	r3, #2
 800c73c:	d8a7      	bhi.n	800c68e <__ssvfiscanf_r+0xee>
 800c73e:	2305      	movs	r3, #5
 800c740:	e01b      	b.n	800c77a <__ssvfiscanf_r+0x1da>
 800c742:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c744:	4621      	mov	r1, r4
 800c746:	4630      	mov	r0, r6
 800c748:	4798      	blx	r3
 800c74a:	2800      	cmp	r0, #0
 800c74c:	f43f af68 	beq.w	800c620 <__ssvfiscanf_r+0x80>
 800c750:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c752:	2800      	cmp	r0, #0
 800c754:	f040 808d 	bne.w	800c872 <__ssvfiscanf_r+0x2d2>
 800c758:	f04f 30ff 	mov.w	r0, #4294967295
 800c75c:	e08f      	b.n	800c87e <__ssvfiscanf_r+0x2de>
 800c75e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c760:	f042 0220 	orr.w	r2, r2, #32
 800c764:	9241      	str	r2, [sp, #260]	; 0x104
 800c766:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c76c:	9241      	str	r2, [sp, #260]	; 0x104
 800c76e:	2210      	movs	r2, #16
 800c770:	2b6f      	cmp	r3, #111	; 0x6f
 800c772:	9242      	str	r2, [sp, #264]	; 0x108
 800c774:	bf34      	ite	cc
 800c776:	2303      	movcc	r3, #3
 800c778:	2304      	movcs	r3, #4
 800c77a:	9347      	str	r3, [sp, #284]	; 0x11c
 800c77c:	6863      	ldr	r3, [r4, #4]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	dd42      	ble.n	800c808 <__ssvfiscanf_r+0x268>
 800c782:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c784:	0659      	lsls	r1, r3, #25
 800c786:	d404      	bmi.n	800c792 <__ssvfiscanf_r+0x1f2>
 800c788:	6823      	ldr	r3, [r4, #0]
 800c78a:	781a      	ldrb	r2, [r3, #0]
 800c78c:	5cba      	ldrb	r2, [r7, r2]
 800c78e:	0712      	lsls	r2, r2, #28
 800c790:	d441      	bmi.n	800c816 <__ssvfiscanf_r+0x276>
 800c792:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c794:	2b02      	cmp	r3, #2
 800c796:	dc50      	bgt.n	800c83a <__ssvfiscanf_r+0x29a>
 800c798:	466b      	mov	r3, sp
 800c79a:	4622      	mov	r2, r4
 800c79c:	a941      	add	r1, sp, #260	; 0x104
 800c79e:	4630      	mov	r0, r6
 800c7a0:	f000 f876 	bl	800c890 <_scanf_chars>
 800c7a4:	2801      	cmp	r0, #1
 800c7a6:	d06e      	beq.n	800c886 <__ssvfiscanf_r+0x2e6>
 800c7a8:	2802      	cmp	r0, #2
 800c7aa:	f47f af20 	bne.w	800c5ee <__ssvfiscanf_r+0x4e>
 800c7ae:	e7cf      	b.n	800c750 <__ssvfiscanf_r+0x1b0>
 800c7b0:	220a      	movs	r2, #10
 800c7b2:	e7dd      	b.n	800c770 <__ssvfiscanf_r+0x1d0>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	9342      	str	r3, [sp, #264]	; 0x108
 800c7b8:	2303      	movs	r3, #3
 800c7ba:	e7de      	b.n	800c77a <__ssvfiscanf_r+0x1da>
 800c7bc:	2308      	movs	r3, #8
 800c7be:	9342      	str	r3, [sp, #264]	; 0x108
 800c7c0:	2304      	movs	r3, #4
 800c7c2:	e7da      	b.n	800c77a <__ssvfiscanf_r+0x1da>
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	4640      	mov	r0, r8
 800c7c8:	f000 f9ce 	bl	800cb68 <__sccl>
 800c7cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c7ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7d2:	9341      	str	r3, [sp, #260]	; 0x104
 800c7d4:	4605      	mov	r5, r0
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e7cf      	b.n	800c77a <__ssvfiscanf_r+0x1da>
 800c7da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c7dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7e0:	9341      	str	r3, [sp, #260]	; 0x104
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	e7c9      	b.n	800c77a <__ssvfiscanf_r+0x1da>
 800c7e6:	2302      	movs	r3, #2
 800c7e8:	e7c7      	b.n	800c77a <__ssvfiscanf_r+0x1da>
 800c7ea:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c7ec:	06c3      	lsls	r3, r0, #27
 800c7ee:	f53f aefe 	bmi.w	800c5ee <__ssvfiscanf_r+0x4e>
 800c7f2:	9b00      	ldr	r3, [sp, #0]
 800c7f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c7f6:	1d19      	adds	r1, r3, #4
 800c7f8:	9100      	str	r1, [sp, #0]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f010 0f01 	tst.w	r0, #1
 800c800:	bf14      	ite	ne
 800c802:	801a      	strhne	r2, [r3, #0]
 800c804:	601a      	streq	r2, [r3, #0]
 800c806:	e6f2      	b.n	800c5ee <__ssvfiscanf_r+0x4e>
 800c808:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c80a:	4621      	mov	r1, r4
 800c80c:	4630      	mov	r0, r6
 800c80e:	4798      	blx	r3
 800c810:	2800      	cmp	r0, #0
 800c812:	d0b6      	beq.n	800c782 <__ssvfiscanf_r+0x1e2>
 800c814:	e79c      	b.n	800c750 <__ssvfiscanf_r+0x1b0>
 800c816:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c818:	3201      	adds	r2, #1
 800c81a:	9245      	str	r2, [sp, #276]	; 0x114
 800c81c:	6862      	ldr	r2, [r4, #4]
 800c81e:	3a01      	subs	r2, #1
 800c820:	2a00      	cmp	r2, #0
 800c822:	6062      	str	r2, [r4, #4]
 800c824:	dd02      	ble.n	800c82c <__ssvfiscanf_r+0x28c>
 800c826:	3301      	adds	r3, #1
 800c828:	6023      	str	r3, [r4, #0]
 800c82a:	e7ad      	b.n	800c788 <__ssvfiscanf_r+0x1e8>
 800c82c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c82e:	4621      	mov	r1, r4
 800c830:	4630      	mov	r0, r6
 800c832:	4798      	blx	r3
 800c834:	2800      	cmp	r0, #0
 800c836:	d0a7      	beq.n	800c788 <__ssvfiscanf_r+0x1e8>
 800c838:	e78a      	b.n	800c750 <__ssvfiscanf_r+0x1b0>
 800c83a:	2b04      	cmp	r3, #4
 800c83c:	dc0e      	bgt.n	800c85c <__ssvfiscanf_r+0x2bc>
 800c83e:	466b      	mov	r3, sp
 800c840:	4622      	mov	r2, r4
 800c842:	a941      	add	r1, sp, #260	; 0x104
 800c844:	4630      	mov	r0, r6
 800c846:	f000 f87d 	bl	800c944 <_scanf_i>
 800c84a:	e7ab      	b.n	800c7a4 <__ssvfiscanf_r+0x204>
 800c84c:	0800c4ed 	.word	0x0800c4ed
 800c850:	0800c567 	.word	0x0800c567
 800c854:	0800dc19 	.word	0x0800dc19
 800c858:	0800dfea 	.word	0x0800dfea
 800c85c:	4b0b      	ldr	r3, [pc, #44]	; (800c88c <__ssvfiscanf_r+0x2ec>)
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f43f aec5 	beq.w	800c5ee <__ssvfiscanf_r+0x4e>
 800c864:	466b      	mov	r3, sp
 800c866:	4622      	mov	r2, r4
 800c868:	a941      	add	r1, sp, #260	; 0x104
 800c86a:	4630      	mov	r0, r6
 800c86c:	f7fb ff74 	bl	8008758 <_scanf_float>
 800c870:	e798      	b.n	800c7a4 <__ssvfiscanf_r+0x204>
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c878:	bf18      	it	ne
 800c87a:	f04f 30ff 	movne.w	r0, #4294967295
 800c87e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c886:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c888:	e7f9      	b.n	800c87e <__ssvfiscanf_r+0x2de>
 800c88a:	bf00      	nop
 800c88c:	08008759 	.word	0x08008759

0800c890 <_scanf_chars>:
 800c890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c894:	4615      	mov	r5, r2
 800c896:	688a      	ldr	r2, [r1, #8]
 800c898:	4680      	mov	r8, r0
 800c89a:	460c      	mov	r4, r1
 800c89c:	b932      	cbnz	r2, 800c8ac <_scanf_chars+0x1c>
 800c89e:	698a      	ldr	r2, [r1, #24]
 800c8a0:	2a00      	cmp	r2, #0
 800c8a2:	bf0c      	ite	eq
 800c8a4:	2201      	moveq	r2, #1
 800c8a6:	f04f 32ff 	movne.w	r2, #4294967295
 800c8aa:	608a      	str	r2, [r1, #8]
 800c8ac:	6822      	ldr	r2, [r4, #0]
 800c8ae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c940 <_scanf_chars+0xb0>
 800c8b2:	06d1      	lsls	r1, r2, #27
 800c8b4:	bf5f      	itttt	pl
 800c8b6:	681a      	ldrpl	r2, [r3, #0]
 800c8b8:	1d11      	addpl	r1, r2, #4
 800c8ba:	6019      	strpl	r1, [r3, #0]
 800c8bc:	6816      	ldrpl	r6, [r2, #0]
 800c8be:	2700      	movs	r7, #0
 800c8c0:	69a0      	ldr	r0, [r4, #24]
 800c8c2:	b188      	cbz	r0, 800c8e8 <_scanf_chars+0x58>
 800c8c4:	2801      	cmp	r0, #1
 800c8c6:	d107      	bne.n	800c8d8 <_scanf_chars+0x48>
 800c8c8:	682a      	ldr	r2, [r5, #0]
 800c8ca:	7811      	ldrb	r1, [r2, #0]
 800c8cc:	6962      	ldr	r2, [r4, #20]
 800c8ce:	5c52      	ldrb	r2, [r2, r1]
 800c8d0:	b952      	cbnz	r2, 800c8e8 <_scanf_chars+0x58>
 800c8d2:	2f00      	cmp	r7, #0
 800c8d4:	d031      	beq.n	800c93a <_scanf_chars+0xaa>
 800c8d6:	e022      	b.n	800c91e <_scanf_chars+0x8e>
 800c8d8:	2802      	cmp	r0, #2
 800c8da:	d120      	bne.n	800c91e <_scanf_chars+0x8e>
 800c8dc:	682b      	ldr	r3, [r5, #0]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c8e4:	071b      	lsls	r3, r3, #28
 800c8e6:	d41a      	bmi.n	800c91e <_scanf_chars+0x8e>
 800c8e8:	6823      	ldr	r3, [r4, #0]
 800c8ea:	06da      	lsls	r2, r3, #27
 800c8ec:	bf5e      	ittt	pl
 800c8ee:	682b      	ldrpl	r3, [r5, #0]
 800c8f0:	781b      	ldrbpl	r3, [r3, #0]
 800c8f2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c8f6:	682a      	ldr	r2, [r5, #0]
 800c8f8:	686b      	ldr	r3, [r5, #4]
 800c8fa:	3201      	adds	r2, #1
 800c8fc:	602a      	str	r2, [r5, #0]
 800c8fe:	68a2      	ldr	r2, [r4, #8]
 800c900:	3b01      	subs	r3, #1
 800c902:	3a01      	subs	r2, #1
 800c904:	606b      	str	r3, [r5, #4]
 800c906:	3701      	adds	r7, #1
 800c908:	60a2      	str	r2, [r4, #8]
 800c90a:	b142      	cbz	r2, 800c91e <_scanf_chars+0x8e>
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	dcd7      	bgt.n	800c8c0 <_scanf_chars+0x30>
 800c910:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c914:	4629      	mov	r1, r5
 800c916:	4640      	mov	r0, r8
 800c918:	4798      	blx	r3
 800c91a:	2800      	cmp	r0, #0
 800c91c:	d0d0      	beq.n	800c8c0 <_scanf_chars+0x30>
 800c91e:	6823      	ldr	r3, [r4, #0]
 800c920:	f013 0310 	ands.w	r3, r3, #16
 800c924:	d105      	bne.n	800c932 <_scanf_chars+0xa2>
 800c926:	68e2      	ldr	r2, [r4, #12]
 800c928:	3201      	adds	r2, #1
 800c92a:	60e2      	str	r2, [r4, #12]
 800c92c:	69a2      	ldr	r2, [r4, #24]
 800c92e:	b102      	cbz	r2, 800c932 <_scanf_chars+0xa2>
 800c930:	7033      	strb	r3, [r6, #0]
 800c932:	6923      	ldr	r3, [r4, #16]
 800c934:	443b      	add	r3, r7
 800c936:	6123      	str	r3, [r4, #16]
 800c938:	2000      	movs	r0, #0
 800c93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c93e:	bf00      	nop
 800c940:	0800dc19 	.word	0x0800dc19

0800c944 <_scanf_i>:
 800c944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c948:	4698      	mov	r8, r3
 800c94a:	4b76      	ldr	r3, [pc, #472]	; (800cb24 <_scanf_i+0x1e0>)
 800c94c:	460c      	mov	r4, r1
 800c94e:	4682      	mov	sl, r0
 800c950:	4616      	mov	r6, r2
 800c952:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c956:	b087      	sub	sp, #28
 800c958:	ab03      	add	r3, sp, #12
 800c95a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c95e:	4b72      	ldr	r3, [pc, #456]	; (800cb28 <_scanf_i+0x1e4>)
 800c960:	69a1      	ldr	r1, [r4, #24]
 800c962:	4a72      	ldr	r2, [pc, #456]	; (800cb2c <_scanf_i+0x1e8>)
 800c964:	2903      	cmp	r1, #3
 800c966:	bf18      	it	ne
 800c968:	461a      	movne	r2, r3
 800c96a:	68a3      	ldr	r3, [r4, #8]
 800c96c:	9201      	str	r2, [sp, #4]
 800c96e:	1e5a      	subs	r2, r3, #1
 800c970:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c974:	bf88      	it	hi
 800c976:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c97a:	4627      	mov	r7, r4
 800c97c:	bf82      	ittt	hi
 800c97e:	eb03 0905 	addhi.w	r9, r3, r5
 800c982:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c986:	60a3      	strhi	r3, [r4, #8]
 800c988:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c98c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c990:	bf98      	it	ls
 800c992:	f04f 0900 	movls.w	r9, #0
 800c996:	6023      	str	r3, [r4, #0]
 800c998:	463d      	mov	r5, r7
 800c99a:	f04f 0b00 	mov.w	fp, #0
 800c99e:	6831      	ldr	r1, [r6, #0]
 800c9a0:	ab03      	add	r3, sp, #12
 800c9a2:	7809      	ldrb	r1, [r1, #0]
 800c9a4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c9a8:	2202      	movs	r2, #2
 800c9aa:	f7f3 fc19 	bl	80001e0 <memchr>
 800c9ae:	b328      	cbz	r0, 800c9fc <_scanf_i+0xb8>
 800c9b0:	f1bb 0f01 	cmp.w	fp, #1
 800c9b4:	d159      	bne.n	800ca6a <_scanf_i+0x126>
 800c9b6:	6862      	ldr	r2, [r4, #4]
 800c9b8:	b92a      	cbnz	r2, 800c9c6 <_scanf_i+0x82>
 800c9ba:	6822      	ldr	r2, [r4, #0]
 800c9bc:	2308      	movs	r3, #8
 800c9be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9c2:	6063      	str	r3, [r4, #4]
 800c9c4:	6022      	str	r2, [r4, #0]
 800c9c6:	6822      	ldr	r2, [r4, #0]
 800c9c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c9cc:	6022      	str	r2, [r4, #0]
 800c9ce:	68a2      	ldr	r2, [r4, #8]
 800c9d0:	1e51      	subs	r1, r2, #1
 800c9d2:	60a1      	str	r1, [r4, #8]
 800c9d4:	b192      	cbz	r2, 800c9fc <_scanf_i+0xb8>
 800c9d6:	6832      	ldr	r2, [r6, #0]
 800c9d8:	1c51      	adds	r1, r2, #1
 800c9da:	6031      	str	r1, [r6, #0]
 800c9dc:	7812      	ldrb	r2, [r2, #0]
 800c9de:	f805 2b01 	strb.w	r2, [r5], #1
 800c9e2:	6872      	ldr	r2, [r6, #4]
 800c9e4:	3a01      	subs	r2, #1
 800c9e6:	2a00      	cmp	r2, #0
 800c9e8:	6072      	str	r2, [r6, #4]
 800c9ea:	dc07      	bgt.n	800c9fc <_scanf_i+0xb8>
 800c9ec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c9f0:	4631      	mov	r1, r6
 800c9f2:	4650      	mov	r0, sl
 800c9f4:	4790      	blx	r2
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	f040 8085 	bne.w	800cb06 <_scanf_i+0x1c2>
 800c9fc:	f10b 0b01 	add.w	fp, fp, #1
 800ca00:	f1bb 0f03 	cmp.w	fp, #3
 800ca04:	d1cb      	bne.n	800c99e <_scanf_i+0x5a>
 800ca06:	6863      	ldr	r3, [r4, #4]
 800ca08:	b90b      	cbnz	r3, 800ca0e <_scanf_i+0xca>
 800ca0a:	230a      	movs	r3, #10
 800ca0c:	6063      	str	r3, [r4, #4]
 800ca0e:	6863      	ldr	r3, [r4, #4]
 800ca10:	4947      	ldr	r1, [pc, #284]	; (800cb30 <_scanf_i+0x1ec>)
 800ca12:	6960      	ldr	r0, [r4, #20]
 800ca14:	1ac9      	subs	r1, r1, r3
 800ca16:	f000 f8a7 	bl	800cb68 <__sccl>
 800ca1a:	f04f 0b00 	mov.w	fp, #0
 800ca1e:	68a3      	ldr	r3, [r4, #8]
 800ca20:	6822      	ldr	r2, [r4, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d03d      	beq.n	800caa2 <_scanf_i+0x15e>
 800ca26:	6831      	ldr	r1, [r6, #0]
 800ca28:	6960      	ldr	r0, [r4, #20]
 800ca2a:	f891 c000 	ldrb.w	ip, [r1]
 800ca2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ca32:	2800      	cmp	r0, #0
 800ca34:	d035      	beq.n	800caa2 <_scanf_i+0x15e>
 800ca36:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ca3a:	d124      	bne.n	800ca86 <_scanf_i+0x142>
 800ca3c:	0510      	lsls	r0, r2, #20
 800ca3e:	d522      	bpl.n	800ca86 <_scanf_i+0x142>
 800ca40:	f10b 0b01 	add.w	fp, fp, #1
 800ca44:	f1b9 0f00 	cmp.w	r9, #0
 800ca48:	d003      	beq.n	800ca52 <_scanf_i+0x10e>
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	f109 39ff 	add.w	r9, r9, #4294967295
 800ca50:	60a3      	str	r3, [r4, #8]
 800ca52:	6873      	ldr	r3, [r6, #4]
 800ca54:	3b01      	subs	r3, #1
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	6073      	str	r3, [r6, #4]
 800ca5a:	dd1b      	ble.n	800ca94 <_scanf_i+0x150>
 800ca5c:	6833      	ldr	r3, [r6, #0]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	6033      	str	r3, [r6, #0]
 800ca62:	68a3      	ldr	r3, [r4, #8]
 800ca64:	3b01      	subs	r3, #1
 800ca66:	60a3      	str	r3, [r4, #8]
 800ca68:	e7d9      	b.n	800ca1e <_scanf_i+0xda>
 800ca6a:	f1bb 0f02 	cmp.w	fp, #2
 800ca6e:	d1ae      	bne.n	800c9ce <_scanf_i+0x8a>
 800ca70:	6822      	ldr	r2, [r4, #0]
 800ca72:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ca76:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ca7a:	d1bf      	bne.n	800c9fc <_scanf_i+0xb8>
 800ca7c:	2310      	movs	r3, #16
 800ca7e:	6063      	str	r3, [r4, #4]
 800ca80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ca84:	e7a2      	b.n	800c9cc <_scanf_i+0x88>
 800ca86:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ca8a:	6022      	str	r2, [r4, #0]
 800ca8c:	780b      	ldrb	r3, [r1, #0]
 800ca8e:	f805 3b01 	strb.w	r3, [r5], #1
 800ca92:	e7de      	b.n	800ca52 <_scanf_i+0x10e>
 800ca94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ca98:	4631      	mov	r1, r6
 800ca9a:	4650      	mov	r0, sl
 800ca9c:	4798      	blx	r3
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	d0df      	beq.n	800ca62 <_scanf_i+0x11e>
 800caa2:	6823      	ldr	r3, [r4, #0]
 800caa4:	05db      	lsls	r3, r3, #23
 800caa6:	d50d      	bpl.n	800cac4 <_scanf_i+0x180>
 800caa8:	42bd      	cmp	r5, r7
 800caaa:	d909      	bls.n	800cac0 <_scanf_i+0x17c>
 800caac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cab4:	4632      	mov	r2, r6
 800cab6:	4650      	mov	r0, sl
 800cab8:	4798      	blx	r3
 800caba:	f105 39ff 	add.w	r9, r5, #4294967295
 800cabe:	464d      	mov	r5, r9
 800cac0:	42bd      	cmp	r5, r7
 800cac2:	d02d      	beq.n	800cb20 <_scanf_i+0x1dc>
 800cac4:	6822      	ldr	r2, [r4, #0]
 800cac6:	f012 0210 	ands.w	r2, r2, #16
 800caca:	d113      	bne.n	800caf4 <_scanf_i+0x1b0>
 800cacc:	702a      	strb	r2, [r5, #0]
 800cace:	6863      	ldr	r3, [r4, #4]
 800cad0:	9e01      	ldr	r6, [sp, #4]
 800cad2:	4639      	mov	r1, r7
 800cad4:	4650      	mov	r0, sl
 800cad6:	47b0      	blx	r6
 800cad8:	6821      	ldr	r1, [r4, #0]
 800cada:	f8d8 3000 	ldr.w	r3, [r8]
 800cade:	f011 0f20 	tst.w	r1, #32
 800cae2:	d013      	beq.n	800cb0c <_scanf_i+0x1c8>
 800cae4:	1d1a      	adds	r2, r3, #4
 800cae6:	f8c8 2000 	str.w	r2, [r8]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	6018      	str	r0, [r3, #0]
 800caee:	68e3      	ldr	r3, [r4, #12]
 800caf0:	3301      	adds	r3, #1
 800caf2:	60e3      	str	r3, [r4, #12]
 800caf4:	1bed      	subs	r5, r5, r7
 800caf6:	44ab      	add	fp, r5
 800caf8:	6925      	ldr	r5, [r4, #16]
 800cafa:	445d      	add	r5, fp
 800cafc:	6125      	str	r5, [r4, #16]
 800cafe:	2000      	movs	r0, #0
 800cb00:	b007      	add	sp, #28
 800cb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb06:	f04f 0b00 	mov.w	fp, #0
 800cb0a:	e7ca      	b.n	800caa2 <_scanf_i+0x15e>
 800cb0c:	1d1a      	adds	r2, r3, #4
 800cb0e:	f8c8 2000 	str.w	r2, [r8]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f011 0f01 	tst.w	r1, #1
 800cb18:	bf14      	ite	ne
 800cb1a:	8018      	strhne	r0, [r3, #0]
 800cb1c:	6018      	streq	r0, [r3, #0]
 800cb1e:	e7e6      	b.n	800caee <_scanf_i+0x1aa>
 800cb20:	2001      	movs	r0, #1
 800cb22:	e7ed      	b.n	800cb00 <_scanf_i+0x1bc>
 800cb24:	0800d49c 	.word	0x0800d49c
 800cb28:	0800cce5 	.word	0x0800cce5
 800cb2c:	08009fb5 	.word	0x08009fb5
 800cb30:	0800e00e 	.word	0x0800e00e

0800cb34 <_read_r>:
 800cb34:	b538      	push	{r3, r4, r5, lr}
 800cb36:	4d07      	ldr	r5, [pc, #28]	; (800cb54 <_read_r+0x20>)
 800cb38:	4604      	mov	r4, r0
 800cb3a:	4608      	mov	r0, r1
 800cb3c:	4611      	mov	r1, r2
 800cb3e:	2200      	movs	r2, #0
 800cb40:	602a      	str	r2, [r5, #0]
 800cb42:	461a      	mov	r2, r3
 800cb44:	f7f4 fff6 	bl	8001b34 <_read>
 800cb48:	1c43      	adds	r3, r0, #1
 800cb4a:	d102      	bne.n	800cb52 <_read_r+0x1e>
 800cb4c:	682b      	ldr	r3, [r5, #0]
 800cb4e:	b103      	cbz	r3, 800cb52 <_read_r+0x1e>
 800cb50:	6023      	str	r3, [r4, #0]
 800cb52:	bd38      	pop	{r3, r4, r5, pc}
 800cb54:	2000066c 	.word	0x2000066c

0800cb58 <nan>:
 800cb58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cb60 <nan+0x8>
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	00000000 	.word	0x00000000
 800cb64:	7ff80000 	.word	0x7ff80000

0800cb68 <__sccl>:
 800cb68:	b570      	push	{r4, r5, r6, lr}
 800cb6a:	780b      	ldrb	r3, [r1, #0]
 800cb6c:	4604      	mov	r4, r0
 800cb6e:	2b5e      	cmp	r3, #94	; 0x5e
 800cb70:	bf0b      	itete	eq
 800cb72:	784b      	ldrbeq	r3, [r1, #1]
 800cb74:	1c48      	addne	r0, r1, #1
 800cb76:	1c88      	addeq	r0, r1, #2
 800cb78:	2200      	movne	r2, #0
 800cb7a:	bf08      	it	eq
 800cb7c:	2201      	moveq	r2, #1
 800cb7e:	1e61      	subs	r1, r4, #1
 800cb80:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cb84:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cb88:	42a9      	cmp	r1, r5
 800cb8a:	d1fb      	bne.n	800cb84 <__sccl+0x1c>
 800cb8c:	b90b      	cbnz	r3, 800cb92 <__sccl+0x2a>
 800cb8e:	3801      	subs	r0, #1
 800cb90:	bd70      	pop	{r4, r5, r6, pc}
 800cb92:	f082 0201 	eor.w	r2, r2, #1
 800cb96:	54e2      	strb	r2, [r4, r3]
 800cb98:	4605      	mov	r5, r0
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cba0:	292d      	cmp	r1, #45	; 0x2d
 800cba2:	d006      	beq.n	800cbb2 <__sccl+0x4a>
 800cba4:	295d      	cmp	r1, #93	; 0x5d
 800cba6:	d0f3      	beq.n	800cb90 <__sccl+0x28>
 800cba8:	b909      	cbnz	r1, 800cbae <__sccl+0x46>
 800cbaa:	4628      	mov	r0, r5
 800cbac:	e7f0      	b.n	800cb90 <__sccl+0x28>
 800cbae:	460b      	mov	r3, r1
 800cbb0:	e7f1      	b.n	800cb96 <__sccl+0x2e>
 800cbb2:	786e      	ldrb	r6, [r5, #1]
 800cbb4:	2e5d      	cmp	r6, #93	; 0x5d
 800cbb6:	d0fa      	beq.n	800cbae <__sccl+0x46>
 800cbb8:	42b3      	cmp	r3, r6
 800cbba:	dcf8      	bgt.n	800cbae <__sccl+0x46>
 800cbbc:	3502      	adds	r5, #2
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	3101      	adds	r1, #1
 800cbc2:	428e      	cmp	r6, r1
 800cbc4:	5462      	strb	r2, [r4, r1]
 800cbc6:	dcfb      	bgt.n	800cbc0 <__sccl+0x58>
 800cbc8:	1af1      	subs	r1, r6, r3
 800cbca:	3901      	subs	r1, #1
 800cbcc:	1c58      	adds	r0, r3, #1
 800cbce:	42b3      	cmp	r3, r6
 800cbd0:	bfa8      	it	ge
 800cbd2:	2100      	movge	r1, #0
 800cbd4:	1843      	adds	r3, r0, r1
 800cbd6:	e7e0      	b.n	800cb9a <__sccl+0x32>

0800cbd8 <strncmp>:
 800cbd8:	b510      	push	{r4, lr}
 800cbda:	b17a      	cbz	r2, 800cbfc <strncmp+0x24>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	3901      	subs	r1, #1
 800cbe0:	1884      	adds	r4, r0, r2
 800cbe2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cbe6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cbea:	4290      	cmp	r0, r2
 800cbec:	d101      	bne.n	800cbf2 <strncmp+0x1a>
 800cbee:	42a3      	cmp	r3, r4
 800cbf0:	d101      	bne.n	800cbf6 <strncmp+0x1e>
 800cbf2:	1a80      	subs	r0, r0, r2
 800cbf4:	bd10      	pop	{r4, pc}
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d1f3      	bne.n	800cbe2 <strncmp+0xa>
 800cbfa:	e7fa      	b.n	800cbf2 <strncmp+0x1a>
 800cbfc:	4610      	mov	r0, r2
 800cbfe:	e7f9      	b.n	800cbf4 <strncmp+0x1c>

0800cc00 <_strtoul_l.constprop.0>:
 800cc00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc04:	4f36      	ldr	r7, [pc, #216]	; (800cce0 <_strtoul_l.constprop.0+0xe0>)
 800cc06:	4686      	mov	lr, r0
 800cc08:	460d      	mov	r5, r1
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc10:	5de6      	ldrb	r6, [r4, r7]
 800cc12:	f016 0608 	ands.w	r6, r6, #8
 800cc16:	d1f8      	bne.n	800cc0a <_strtoul_l.constprop.0+0xa>
 800cc18:	2c2d      	cmp	r4, #45	; 0x2d
 800cc1a:	d12f      	bne.n	800cc7c <_strtoul_l.constprop.0+0x7c>
 800cc1c:	782c      	ldrb	r4, [r5, #0]
 800cc1e:	2601      	movs	r6, #1
 800cc20:	1c85      	adds	r5, r0, #2
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d057      	beq.n	800ccd6 <_strtoul_l.constprop.0+0xd6>
 800cc26:	2b10      	cmp	r3, #16
 800cc28:	d109      	bne.n	800cc3e <_strtoul_l.constprop.0+0x3e>
 800cc2a:	2c30      	cmp	r4, #48	; 0x30
 800cc2c:	d107      	bne.n	800cc3e <_strtoul_l.constprop.0+0x3e>
 800cc2e:	7828      	ldrb	r0, [r5, #0]
 800cc30:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cc34:	2858      	cmp	r0, #88	; 0x58
 800cc36:	d149      	bne.n	800cccc <_strtoul_l.constprop.0+0xcc>
 800cc38:	786c      	ldrb	r4, [r5, #1]
 800cc3a:	2310      	movs	r3, #16
 800cc3c:	3502      	adds	r5, #2
 800cc3e:	f04f 38ff 	mov.w	r8, #4294967295
 800cc42:	2700      	movs	r7, #0
 800cc44:	fbb8 f8f3 	udiv	r8, r8, r3
 800cc48:	fb03 f908 	mul.w	r9, r3, r8
 800cc4c:	ea6f 0909 	mvn.w	r9, r9
 800cc50:	4638      	mov	r0, r7
 800cc52:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cc56:	f1bc 0f09 	cmp.w	ip, #9
 800cc5a:	d814      	bhi.n	800cc86 <_strtoul_l.constprop.0+0x86>
 800cc5c:	4664      	mov	r4, ip
 800cc5e:	42a3      	cmp	r3, r4
 800cc60:	dd22      	ble.n	800cca8 <_strtoul_l.constprop.0+0xa8>
 800cc62:	2f00      	cmp	r7, #0
 800cc64:	db1d      	blt.n	800cca2 <_strtoul_l.constprop.0+0xa2>
 800cc66:	4580      	cmp	r8, r0
 800cc68:	d31b      	bcc.n	800cca2 <_strtoul_l.constprop.0+0xa2>
 800cc6a:	d101      	bne.n	800cc70 <_strtoul_l.constprop.0+0x70>
 800cc6c:	45a1      	cmp	r9, r4
 800cc6e:	db18      	blt.n	800cca2 <_strtoul_l.constprop.0+0xa2>
 800cc70:	fb00 4003 	mla	r0, r0, r3, r4
 800cc74:	2701      	movs	r7, #1
 800cc76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc7a:	e7ea      	b.n	800cc52 <_strtoul_l.constprop.0+0x52>
 800cc7c:	2c2b      	cmp	r4, #43	; 0x2b
 800cc7e:	bf04      	itt	eq
 800cc80:	782c      	ldrbeq	r4, [r5, #0]
 800cc82:	1c85      	addeq	r5, r0, #2
 800cc84:	e7cd      	b.n	800cc22 <_strtoul_l.constprop.0+0x22>
 800cc86:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cc8a:	f1bc 0f19 	cmp.w	ip, #25
 800cc8e:	d801      	bhi.n	800cc94 <_strtoul_l.constprop.0+0x94>
 800cc90:	3c37      	subs	r4, #55	; 0x37
 800cc92:	e7e4      	b.n	800cc5e <_strtoul_l.constprop.0+0x5e>
 800cc94:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cc98:	f1bc 0f19 	cmp.w	ip, #25
 800cc9c:	d804      	bhi.n	800cca8 <_strtoul_l.constprop.0+0xa8>
 800cc9e:	3c57      	subs	r4, #87	; 0x57
 800cca0:	e7dd      	b.n	800cc5e <_strtoul_l.constprop.0+0x5e>
 800cca2:	f04f 37ff 	mov.w	r7, #4294967295
 800cca6:	e7e6      	b.n	800cc76 <_strtoul_l.constprop.0+0x76>
 800cca8:	2f00      	cmp	r7, #0
 800ccaa:	da07      	bge.n	800ccbc <_strtoul_l.constprop.0+0xbc>
 800ccac:	2322      	movs	r3, #34	; 0x22
 800ccae:	f8ce 3000 	str.w	r3, [lr]
 800ccb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb6:	b932      	cbnz	r2, 800ccc6 <_strtoul_l.constprop.0+0xc6>
 800ccb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccbc:	b106      	cbz	r6, 800ccc0 <_strtoul_l.constprop.0+0xc0>
 800ccbe:	4240      	negs	r0, r0
 800ccc0:	2a00      	cmp	r2, #0
 800ccc2:	d0f9      	beq.n	800ccb8 <_strtoul_l.constprop.0+0xb8>
 800ccc4:	b107      	cbz	r7, 800ccc8 <_strtoul_l.constprop.0+0xc8>
 800ccc6:	1e69      	subs	r1, r5, #1
 800ccc8:	6011      	str	r1, [r2, #0]
 800ccca:	e7f5      	b.n	800ccb8 <_strtoul_l.constprop.0+0xb8>
 800cccc:	2430      	movs	r4, #48	; 0x30
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d1b5      	bne.n	800cc3e <_strtoul_l.constprop.0+0x3e>
 800ccd2:	2308      	movs	r3, #8
 800ccd4:	e7b3      	b.n	800cc3e <_strtoul_l.constprop.0+0x3e>
 800ccd6:	2c30      	cmp	r4, #48	; 0x30
 800ccd8:	d0a9      	beq.n	800cc2e <_strtoul_l.constprop.0+0x2e>
 800ccda:	230a      	movs	r3, #10
 800ccdc:	e7af      	b.n	800cc3e <_strtoul_l.constprop.0+0x3e>
 800ccde:	bf00      	nop
 800cce0:	0800dc19 	.word	0x0800dc19

0800cce4 <_strtoul_r>:
 800cce4:	f7ff bf8c 	b.w	800cc00 <_strtoul_l.constprop.0>

0800cce8 <__submore>:
 800cce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccec:	460c      	mov	r4, r1
 800ccee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ccf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccf4:	4299      	cmp	r1, r3
 800ccf6:	d11d      	bne.n	800cd34 <__submore+0x4c>
 800ccf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ccfc:	f7fb f84e 	bl	8007d9c <_malloc_r>
 800cd00:	b918      	cbnz	r0, 800cd0a <__submore+0x22>
 800cd02:	f04f 30ff 	mov.w	r0, #4294967295
 800cd06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd0e:	63a3      	str	r3, [r4, #56]	; 0x38
 800cd10:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cd14:	6360      	str	r0, [r4, #52]	; 0x34
 800cd16:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cd1a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cd1e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cd22:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cd26:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cd2a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cd2e:	6020      	str	r0, [r4, #0]
 800cd30:	2000      	movs	r0, #0
 800cd32:	e7e8      	b.n	800cd06 <__submore+0x1e>
 800cd34:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cd36:	0077      	lsls	r7, r6, #1
 800cd38:	463a      	mov	r2, r7
 800cd3a:	f000 f867 	bl	800ce0c <_realloc_r>
 800cd3e:	4605      	mov	r5, r0
 800cd40:	2800      	cmp	r0, #0
 800cd42:	d0de      	beq.n	800cd02 <__submore+0x1a>
 800cd44:	eb00 0806 	add.w	r8, r0, r6
 800cd48:	4601      	mov	r1, r0
 800cd4a:	4632      	mov	r2, r6
 800cd4c:	4640      	mov	r0, r8
 800cd4e:	f7fe fd81 	bl	800b854 <memcpy>
 800cd52:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cd56:	f8c4 8000 	str.w	r8, [r4]
 800cd5a:	e7e9      	b.n	800cd30 <__submore+0x48>

0800cd5c <__ascii_wctomb>:
 800cd5c:	b149      	cbz	r1, 800cd72 <__ascii_wctomb+0x16>
 800cd5e:	2aff      	cmp	r2, #255	; 0xff
 800cd60:	bf85      	ittet	hi
 800cd62:	238a      	movhi	r3, #138	; 0x8a
 800cd64:	6003      	strhi	r3, [r0, #0]
 800cd66:	700a      	strbls	r2, [r1, #0]
 800cd68:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd6c:	bf98      	it	ls
 800cd6e:	2001      	movls	r0, #1
 800cd70:	4770      	bx	lr
 800cd72:	4608      	mov	r0, r1
 800cd74:	4770      	bx	lr
	...

0800cd78 <__assert_func>:
 800cd78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd7a:	4614      	mov	r4, r2
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	4b09      	ldr	r3, [pc, #36]	; (800cda4 <__assert_func+0x2c>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4605      	mov	r5, r0
 800cd84:	68d8      	ldr	r0, [r3, #12]
 800cd86:	b14c      	cbz	r4, 800cd9c <__assert_func+0x24>
 800cd88:	4b07      	ldr	r3, [pc, #28]	; (800cda8 <__assert_func+0x30>)
 800cd8a:	9100      	str	r1, [sp, #0]
 800cd8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd90:	4906      	ldr	r1, [pc, #24]	; (800cdac <__assert_func+0x34>)
 800cd92:	462b      	mov	r3, r5
 800cd94:	f000 f80e 	bl	800cdb4 <fiprintf>
 800cd98:	f7fa ff52 	bl	8007c40 <abort>
 800cd9c:	4b04      	ldr	r3, [pc, #16]	; (800cdb0 <__assert_func+0x38>)
 800cd9e:	461c      	mov	r4, r3
 800cda0:	e7f3      	b.n	800cd8a <__assert_func+0x12>
 800cda2:	bf00      	nop
 800cda4:	2000003c 	.word	0x2000003c
 800cda8:	0800e010 	.word	0x0800e010
 800cdac:	0800e01d 	.word	0x0800e01d
 800cdb0:	0800e04b 	.word	0x0800e04b

0800cdb4 <fiprintf>:
 800cdb4:	b40e      	push	{r1, r2, r3}
 800cdb6:	b503      	push	{r0, r1, lr}
 800cdb8:	4601      	mov	r1, r0
 800cdba:	ab03      	add	r3, sp, #12
 800cdbc:	4805      	ldr	r0, [pc, #20]	; (800cdd4 <fiprintf+0x20>)
 800cdbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdc2:	6800      	ldr	r0, [r0, #0]
 800cdc4:	9301      	str	r3, [sp, #4]
 800cdc6:	f000 f879 	bl	800cebc <_vfiprintf_r>
 800cdca:	b002      	add	sp, #8
 800cdcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdd0:	b003      	add	sp, #12
 800cdd2:	4770      	bx	lr
 800cdd4:	2000003c 	.word	0x2000003c

0800cdd8 <memmove>:
 800cdd8:	4288      	cmp	r0, r1
 800cdda:	b510      	push	{r4, lr}
 800cddc:	eb01 0402 	add.w	r4, r1, r2
 800cde0:	d902      	bls.n	800cde8 <memmove+0x10>
 800cde2:	4284      	cmp	r4, r0
 800cde4:	4623      	mov	r3, r4
 800cde6:	d807      	bhi.n	800cdf8 <memmove+0x20>
 800cde8:	1e43      	subs	r3, r0, #1
 800cdea:	42a1      	cmp	r1, r4
 800cdec:	d008      	beq.n	800ce00 <memmove+0x28>
 800cdee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdf6:	e7f8      	b.n	800cdea <memmove+0x12>
 800cdf8:	4402      	add	r2, r0
 800cdfa:	4601      	mov	r1, r0
 800cdfc:	428a      	cmp	r2, r1
 800cdfe:	d100      	bne.n	800ce02 <memmove+0x2a>
 800ce00:	bd10      	pop	{r4, pc}
 800ce02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce0a:	e7f7      	b.n	800cdfc <memmove+0x24>

0800ce0c <_realloc_r>:
 800ce0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce10:	4680      	mov	r8, r0
 800ce12:	4614      	mov	r4, r2
 800ce14:	460e      	mov	r6, r1
 800ce16:	b921      	cbnz	r1, 800ce22 <_realloc_r+0x16>
 800ce18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce1c:	4611      	mov	r1, r2
 800ce1e:	f7fa bfbd 	b.w	8007d9c <_malloc_r>
 800ce22:	b92a      	cbnz	r2, 800ce30 <_realloc_r+0x24>
 800ce24:	f7fa ff4e 	bl	8007cc4 <_free_r>
 800ce28:	4625      	mov	r5, r4
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce30:	f000 fa9a 	bl	800d368 <_malloc_usable_size_r>
 800ce34:	4284      	cmp	r4, r0
 800ce36:	4607      	mov	r7, r0
 800ce38:	d802      	bhi.n	800ce40 <_realloc_r+0x34>
 800ce3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce3e:	d812      	bhi.n	800ce66 <_realloc_r+0x5a>
 800ce40:	4621      	mov	r1, r4
 800ce42:	4640      	mov	r0, r8
 800ce44:	f7fa ffaa 	bl	8007d9c <_malloc_r>
 800ce48:	4605      	mov	r5, r0
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	d0ed      	beq.n	800ce2a <_realloc_r+0x1e>
 800ce4e:	42bc      	cmp	r4, r7
 800ce50:	4622      	mov	r2, r4
 800ce52:	4631      	mov	r1, r6
 800ce54:	bf28      	it	cs
 800ce56:	463a      	movcs	r2, r7
 800ce58:	f7fe fcfc 	bl	800b854 <memcpy>
 800ce5c:	4631      	mov	r1, r6
 800ce5e:	4640      	mov	r0, r8
 800ce60:	f7fa ff30 	bl	8007cc4 <_free_r>
 800ce64:	e7e1      	b.n	800ce2a <_realloc_r+0x1e>
 800ce66:	4635      	mov	r5, r6
 800ce68:	e7df      	b.n	800ce2a <_realloc_r+0x1e>

0800ce6a <__sfputc_r>:
 800ce6a:	6893      	ldr	r3, [r2, #8]
 800ce6c:	3b01      	subs	r3, #1
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	b410      	push	{r4}
 800ce72:	6093      	str	r3, [r2, #8]
 800ce74:	da08      	bge.n	800ce88 <__sfputc_r+0x1e>
 800ce76:	6994      	ldr	r4, [r2, #24]
 800ce78:	42a3      	cmp	r3, r4
 800ce7a:	db01      	blt.n	800ce80 <__sfputc_r+0x16>
 800ce7c:	290a      	cmp	r1, #10
 800ce7e:	d103      	bne.n	800ce88 <__sfputc_r+0x1e>
 800ce80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce84:	f000 b94a 	b.w	800d11c <__swbuf_r>
 800ce88:	6813      	ldr	r3, [r2, #0]
 800ce8a:	1c58      	adds	r0, r3, #1
 800ce8c:	6010      	str	r0, [r2, #0]
 800ce8e:	7019      	strb	r1, [r3, #0]
 800ce90:	4608      	mov	r0, r1
 800ce92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <__sfputs_r>:
 800ce98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9a:	4606      	mov	r6, r0
 800ce9c:	460f      	mov	r7, r1
 800ce9e:	4614      	mov	r4, r2
 800cea0:	18d5      	adds	r5, r2, r3
 800cea2:	42ac      	cmp	r4, r5
 800cea4:	d101      	bne.n	800ceaa <__sfputs_r+0x12>
 800cea6:	2000      	movs	r0, #0
 800cea8:	e007      	b.n	800ceba <__sfputs_r+0x22>
 800ceaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceae:	463a      	mov	r2, r7
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	f7ff ffda 	bl	800ce6a <__sfputc_r>
 800ceb6:	1c43      	adds	r3, r0, #1
 800ceb8:	d1f3      	bne.n	800cea2 <__sfputs_r+0xa>
 800ceba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cebc <_vfiprintf_r>:
 800cebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec0:	460d      	mov	r5, r1
 800cec2:	b09d      	sub	sp, #116	; 0x74
 800cec4:	4614      	mov	r4, r2
 800cec6:	4698      	mov	r8, r3
 800cec8:	4606      	mov	r6, r0
 800ceca:	b118      	cbz	r0, 800ced4 <_vfiprintf_r+0x18>
 800cecc:	6983      	ldr	r3, [r0, #24]
 800cece:	b90b      	cbnz	r3, 800ced4 <_vfiprintf_r+0x18>
 800ced0:	f7fe f888 	bl	800afe4 <__sinit>
 800ced4:	4b89      	ldr	r3, [pc, #548]	; (800d0fc <_vfiprintf_r+0x240>)
 800ced6:	429d      	cmp	r5, r3
 800ced8:	d11b      	bne.n	800cf12 <_vfiprintf_r+0x56>
 800ceda:	6875      	ldr	r5, [r6, #4]
 800cedc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cede:	07d9      	lsls	r1, r3, #31
 800cee0:	d405      	bmi.n	800ceee <_vfiprintf_r+0x32>
 800cee2:	89ab      	ldrh	r3, [r5, #12]
 800cee4:	059a      	lsls	r2, r3, #22
 800cee6:	d402      	bmi.n	800ceee <_vfiprintf_r+0x32>
 800cee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ceea:	f7fe fc8c 	bl	800b806 <__retarget_lock_acquire_recursive>
 800ceee:	89ab      	ldrh	r3, [r5, #12]
 800cef0:	071b      	lsls	r3, r3, #28
 800cef2:	d501      	bpl.n	800cef8 <_vfiprintf_r+0x3c>
 800cef4:	692b      	ldr	r3, [r5, #16]
 800cef6:	b9eb      	cbnz	r3, 800cf34 <_vfiprintf_r+0x78>
 800cef8:	4629      	mov	r1, r5
 800cefa:	4630      	mov	r0, r6
 800cefc:	f000 f960 	bl	800d1c0 <__swsetup_r>
 800cf00:	b1c0      	cbz	r0, 800cf34 <_vfiprintf_r+0x78>
 800cf02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf04:	07dc      	lsls	r4, r3, #31
 800cf06:	d50e      	bpl.n	800cf26 <_vfiprintf_r+0x6a>
 800cf08:	f04f 30ff 	mov.w	r0, #4294967295
 800cf0c:	b01d      	add	sp, #116	; 0x74
 800cf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf12:	4b7b      	ldr	r3, [pc, #492]	; (800d100 <_vfiprintf_r+0x244>)
 800cf14:	429d      	cmp	r5, r3
 800cf16:	d101      	bne.n	800cf1c <_vfiprintf_r+0x60>
 800cf18:	68b5      	ldr	r5, [r6, #8]
 800cf1a:	e7df      	b.n	800cedc <_vfiprintf_r+0x20>
 800cf1c:	4b79      	ldr	r3, [pc, #484]	; (800d104 <_vfiprintf_r+0x248>)
 800cf1e:	429d      	cmp	r5, r3
 800cf20:	bf08      	it	eq
 800cf22:	68f5      	ldreq	r5, [r6, #12]
 800cf24:	e7da      	b.n	800cedc <_vfiprintf_r+0x20>
 800cf26:	89ab      	ldrh	r3, [r5, #12]
 800cf28:	0598      	lsls	r0, r3, #22
 800cf2a:	d4ed      	bmi.n	800cf08 <_vfiprintf_r+0x4c>
 800cf2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf2e:	f7fe fc6b 	bl	800b808 <__retarget_lock_release_recursive>
 800cf32:	e7e9      	b.n	800cf08 <_vfiprintf_r+0x4c>
 800cf34:	2300      	movs	r3, #0
 800cf36:	9309      	str	r3, [sp, #36]	; 0x24
 800cf38:	2320      	movs	r3, #32
 800cf3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf42:	2330      	movs	r3, #48	; 0x30
 800cf44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d108 <_vfiprintf_r+0x24c>
 800cf48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf4c:	f04f 0901 	mov.w	r9, #1
 800cf50:	4623      	mov	r3, r4
 800cf52:	469a      	mov	sl, r3
 800cf54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf58:	b10a      	cbz	r2, 800cf5e <_vfiprintf_r+0xa2>
 800cf5a:	2a25      	cmp	r2, #37	; 0x25
 800cf5c:	d1f9      	bne.n	800cf52 <_vfiprintf_r+0x96>
 800cf5e:	ebba 0b04 	subs.w	fp, sl, r4
 800cf62:	d00b      	beq.n	800cf7c <_vfiprintf_r+0xc0>
 800cf64:	465b      	mov	r3, fp
 800cf66:	4622      	mov	r2, r4
 800cf68:	4629      	mov	r1, r5
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	f7ff ff94 	bl	800ce98 <__sfputs_r>
 800cf70:	3001      	adds	r0, #1
 800cf72:	f000 80aa 	beq.w	800d0ca <_vfiprintf_r+0x20e>
 800cf76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf78:	445a      	add	r2, fp
 800cf7a:	9209      	str	r2, [sp, #36]	; 0x24
 800cf7c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	f000 80a2 	beq.w	800d0ca <_vfiprintf_r+0x20e>
 800cf86:	2300      	movs	r3, #0
 800cf88:	f04f 32ff 	mov.w	r2, #4294967295
 800cf8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf90:	f10a 0a01 	add.w	sl, sl, #1
 800cf94:	9304      	str	r3, [sp, #16]
 800cf96:	9307      	str	r3, [sp, #28]
 800cf98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf9c:	931a      	str	r3, [sp, #104]	; 0x68
 800cf9e:	4654      	mov	r4, sl
 800cfa0:	2205      	movs	r2, #5
 800cfa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfa6:	4858      	ldr	r0, [pc, #352]	; (800d108 <_vfiprintf_r+0x24c>)
 800cfa8:	f7f3 f91a 	bl	80001e0 <memchr>
 800cfac:	9a04      	ldr	r2, [sp, #16]
 800cfae:	b9d8      	cbnz	r0, 800cfe8 <_vfiprintf_r+0x12c>
 800cfb0:	06d1      	lsls	r1, r2, #27
 800cfb2:	bf44      	itt	mi
 800cfb4:	2320      	movmi	r3, #32
 800cfb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfba:	0713      	lsls	r3, r2, #28
 800cfbc:	bf44      	itt	mi
 800cfbe:	232b      	movmi	r3, #43	; 0x2b
 800cfc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfc4:	f89a 3000 	ldrb.w	r3, [sl]
 800cfc8:	2b2a      	cmp	r3, #42	; 0x2a
 800cfca:	d015      	beq.n	800cff8 <_vfiprintf_r+0x13c>
 800cfcc:	9a07      	ldr	r2, [sp, #28]
 800cfce:	4654      	mov	r4, sl
 800cfd0:	2000      	movs	r0, #0
 800cfd2:	f04f 0c0a 	mov.w	ip, #10
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfdc:	3b30      	subs	r3, #48	; 0x30
 800cfde:	2b09      	cmp	r3, #9
 800cfe0:	d94e      	bls.n	800d080 <_vfiprintf_r+0x1c4>
 800cfe2:	b1b0      	cbz	r0, 800d012 <_vfiprintf_r+0x156>
 800cfe4:	9207      	str	r2, [sp, #28]
 800cfe6:	e014      	b.n	800d012 <_vfiprintf_r+0x156>
 800cfe8:	eba0 0308 	sub.w	r3, r0, r8
 800cfec:	fa09 f303 	lsl.w	r3, r9, r3
 800cff0:	4313      	orrs	r3, r2
 800cff2:	9304      	str	r3, [sp, #16]
 800cff4:	46a2      	mov	sl, r4
 800cff6:	e7d2      	b.n	800cf9e <_vfiprintf_r+0xe2>
 800cff8:	9b03      	ldr	r3, [sp, #12]
 800cffa:	1d19      	adds	r1, r3, #4
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	9103      	str	r1, [sp, #12]
 800d000:	2b00      	cmp	r3, #0
 800d002:	bfbb      	ittet	lt
 800d004:	425b      	neglt	r3, r3
 800d006:	f042 0202 	orrlt.w	r2, r2, #2
 800d00a:	9307      	strge	r3, [sp, #28]
 800d00c:	9307      	strlt	r3, [sp, #28]
 800d00e:	bfb8      	it	lt
 800d010:	9204      	strlt	r2, [sp, #16]
 800d012:	7823      	ldrb	r3, [r4, #0]
 800d014:	2b2e      	cmp	r3, #46	; 0x2e
 800d016:	d10c      	bne.n	800d032 <_vfiprintf_r+0x176>
 800d018:	7863      	ldrb	r3, [r4, #1]
 800d01a:	2b2a      	cmp	r3, #42	; 0x2a
 800d01c:	d135      	bne.n	800d08a <_vfiprintf_r+0x1ce>
 800d01e:	9b03      	ldr	r3, [sp, #12]
 800d020:	1d1a      	adds	r2, r3, #4
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	9203      	str	r2, [sp, #12]
 800d026:	2b00      	cmp	r3, #0
 800d028:	bfb8      	it	lt
 800d02a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d02e:	3402      	adds	r4, #2
 800d030:	9305      	str	r3, [sp, #20]
 800d032:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d118 <_vfiprintf_r+0x25c>
 800d036:	7821      	ldrb	r1, [r4, #0]
 800d038:	2203      	movs	r2, #3
 800d03a:	4650      	mov	r0, sl
 800d03c:	f7f3 f8d0 	bl	80001e0 <memchr>
 800d040:	b140      	cbz	r0, 800d054 <_vfiprintf_r+0x198>
 800d042:	2340      	movs	r3, #64	; 0x40
 800d044:	eba0 000a 	sub.w	r0, r0, sl
 800d048:	fa03 f000 	lsl.w	r0, r3, r0
 800d04c:	9b04      	ldr	r3, [sp, #16]
 800d04e:	4303      	orrs	r3, r0
 800d050:	3401      	adds	r4, #1
 800d052:	9304      	str	r3, [sp, #16]
 800d054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d058:	482c      	ldr	r0, [pc, #176]	; (800d10c <_vfiprintf_r+0x250>)
 800d05a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d05e:	2206      	movs	r2, #6
 800d060:	f7f3 f8be 	bl	80001e0 <memchr>
 800d064:	2800      	cmp	r0, #0
 800d066:	d03f      	beq.n	800d0e8 <_vfiprintf_r+0x22c>
 800d068:	4b29      	ldr	r3, [pc, #164]	; (800d110 <_vfiprintf_r+0x254>)
 800d06a:	bb1b      	cbnz	r3, 800d0b4 <_vfiprintf_r+0x1f8>
 800d06c:	9b03      	ldr	r3, [sp, #12]
 800d06e:	3307      	adds	r3, #7
 800d070:	f023 0307 	bic.w	r3, r3, #7
 800d074:	3308      	adds	r3, #8
 800d076:	9303      	str	r3, [sp, #12]
 800d078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d07a:	443b      	add	r3, r7
 800d07c:	9309      	str	r3, [sp, #36]	; 0x24
 800d07e:	e767      	b.n	800cf50 <_vfiprintf_r+0x94>
 800d080:	fb0c 3202 	mla	r2, ip, r2, r3
 800d084:	460c      	mov	r4, r1
 800d086:	2001      	movs	r0, #1
 800d088:	e7a5      	b.n	800cfd6 <_vfiprintf_r+0x11a>
 800d08a:	2300      	movs	r3, #0
 800d08c:	3401      	adds	r4, #1
 800d08e:	9305      	str	r3, [sp, #20]
 800d090:	4619      	mov	r1, r3
 800d092:	f04f 0c0a 	mov.w	ip, #10
 800d096:	4620      	mov	r0, r4
 800d098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d09c:	3a30      	subs	r2, #48	; 0x30
 800d09e:	2a09      	cmp	r2, #9
 800d0a0:	d903      	bls.n	800d0aa <_vfiprintf_r+0x1ee>
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d0c5      	beq.n	800d032 <_vfiprintf_r+0x176>
 800d0a6:	9105      	str	r1, [sp, #20]
 800d0a8:	e7c3      	b.n	800d032 <_vfiprintf_r+0x176>
 800d0aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e7f0      	b.n	800d096 <_vfiprintf_r+0x1da>
 800d0b4:	ab03      	add	r3, sp, #12
 800d0b6:	9300      	str	r3, [sp, #0]
 800d0b8:	462a      	mov	r2, r5
 800d0ba:	4b16      	ldr	r3, [pc, #88]	; (800d114 <_vfiprintf_r+0x258>)
 800d0bc:	a904      	add	r1, sp, #16
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f7fa ff80 	bl	8007fc4 <_printf_float>
 800d0c4:	4607      	mov	r7, r0
 800d0c6:	1c78      	adds	r0, r7, #1
 800d0c8:	d1d6      	bne.n	800d078 <_vfiprintf_r+0x1bc>
 800d0ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0cc:	07d9      	lsls	r1, r3, #31
 800d0ce:	d405      	bmi.n	800d0dc <_vfiprintf_r+0x220>
 800d0d0:	89ab      	ldrh	r3, [r5, #12]
 800d0d2:	059a      	lsls	r2, r3, #22
 800d0d4:	d402      	bmi.n	800d0dc <_vfiprintf_r+0x220>
 800d0d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0d8:	f7fe fb96 	bl	800b808 <__retarget_lock_release_recursive>
 800d0dc:	89ab      	ldrh	r3, [r5, #12]
 800d0de:	065b      	lsls	r3, r3, #25
 800d0e0:	f53f af12 	bmi.w	800cf08 <_vfiprintf_r+0x4c>
 800d0e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0e6:	e711      	b.n	800cf0c <_vfiprintf_r+0x50>
 800d0e8:	ab03      	add	r3, sp, #12
 800d0ea:	9300      	str	r3, [sp, #0]
 800d0ec:	462a      	mov	r2, r5
 800d0ee:	4b09      	ldr	r3, [pc, #36]	; (800d114 <_vfiprintf_r+0x258>)
 800d0f0:	a904      	add	r1, sp, #16
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f7fb fa0a 	bl	800850c <_printf_i>
 800d0f8:	e7e4      	b.n	800d0c4 <_vfiprintf_r+0x208>
 800d0fa:	bf00      	nop
 800d0fc:	0800ddcc 	.word	0x0800ddcc
 800d100:	0800ddec 	.word	0x0800ddec
 800d104:	0800ddac 	.word	0x0800ddac
 800d108:	0800dfe4 	.word	0x0800dfe4
 800d10c:	0800dfee 	.word	0x0800dfee
 800d110:	08007fc5 	.word	0x08007fc5
 800d114:	0800ce99 	.word	0x0800ce99
 800d118:	0800dfea 	.word	0x0800dfea

0800d11c <__swbuf_r>:
 800d11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11e:	460e      	mov	r6, r1
 800d120:	4614      	mov	r4, r2
 800d122:	4605      	mov	r5, r0
 800d124:	b118      	cbz	r0, 800d12e <__swbuf_r+0x12>
 800d126:	6983      	ldr	r3, [r0, #24]
 800d128:	b90b      	cbnz	r3, 800d12e <__swbuf_r+0x12>
 800d12a:	f7fd ff5b 	bl	800afe4 <__sinit>
 800d12e:	4b21      	ldr	r3, [pc, #132]	; (800d1b4 <__swbuf_r+0x98>)
 800d130:	429c      	cmp	r4, r3
 800d132:	d12b      	bne.n	800d18c <__swbuf_r+0x70>
 800d134:	686c      	ldr	r4, [r5, #4]
 800d136:	69a3      	ldr	r3, [r4, #24]
 800d138:	60a3      	str	r3, [r4, #8]
 800d13a:	89a3      	ldrh	r3, [r4, #12]
 800d13c:	071a      	lsls	r2, r3, #28
 800d13e:	d52f      	bpl.n	800d1a0 <__swbuf_r+0x84>
 800d140:	6923      	ldr	r3, [r4, #16]
 800d142:	b36b      	cbz	r3, 800d1a0 <__swbuf_r+0x84>
 800d144:	6923      	ldr	r3, [r4, #16]
 800d146:	6820      	ldr	r0, [r4, #0]
 800d148:	1ac0      	subs	r0, r0, r3
 800d14a:	6963      	ldr	r3, [r4, #20]
 800d14c:	b2f6      	uxtb	r6, r6
 800d14e:	4283      	cmp	r3, r0
 800d150:	4637      	mov	r7, r6
 800d152:	dc04      	bgt.n	800d15e <__swbuf_r+0x42>
 800d154:	4621      	mov	r1, r4
 800d156:	4628      	mov	r0, r5
 800d158:	f7fd fe72 	bl	800ae40 <_fflush_r>
 800d15c:	bb30      	cbnz	r0, 800d1ac <__swbuf_r+0x90>
 800d15e:	68a3      	ldr	r3, [r4, #8]
 800d160:	3b01      	subs	r3, #1
 800d162:	60a3      	str	r3, [r4, #8]
 800d164:	6823      	ldr	r3, [r4, #0]
 800d166:	1c5a      	adds	r2, r3, #1
 800d168:	6022      	str	r2, [r4, #0]
 800d16a:	701e      	strb	r6, [r3, #0]
 800d16c:	6963      	ldr	r3, [r4, #20]
 800d16e:	3001      	adds	r0, #1
 800d170:	4283      	cmp	r3, r0
 800d172:	d004      	beq.n	800d17e <__swbuf_r+0x62>
 800d174:	89a3      	ldrh	r3, [r4, #12]
 800d176:	07db      	lsls	r3, r3, #31
 800d178:	d506      	bpl.n	800d188 <__swbuf_r+0x6c>
 800d17a:	2e0a      	cmp	r6, #10
 800d17c:	d104      	bne.n	800d188 <__swbuf_r+0x6c>
 800d17e:	4621      	mov	r1, r4
 800d180:	4628      	mov	r0, r5
 800d182:	f7fd fe5d 	bl	800ae40 <_fflush_r>
 800d186:	b988      	cbnz	r0, 800d1ac <__swbuf_r+0x90>
 800d188:	4638      	mov	r0, r7
 800d18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d18c:	4b0a      	ldr	r3, [pc, #40]	; (800d1b8 <__swbuf_r+0x9c>)
 800d18e:	429c      	cmp	r4, r3
 800d190:	d101      	bne.n	800d196 <__swbuf_r+0x7a>
 800d192:	68ac      	ldr	r4, [r5, #8]
 800d194:	e7cf      	b.n	800d136 <__swbuf_r+0x1a>
 800d196:	4b09      	ldr	r3, [pc, #36]	; (800d1bc <__swbuf_r+0xa0>)
 800d198:	429c      	cmp	r4, r3
 800d19a:	bf08      	it	eq
 800d19c:	68ec      	ldreq	r4, [r5, #12]
 800d19e:	e7ca      	b.n	800d136 <__swbuf_r+0x1a>
 800d1a0:	4621      	mov	r1, r4
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	f000 f80c 	bl	800d1c0 <__swsetup_r>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d0cb      	beq.n	800d144 <__swbuf_r+0x28>
 800d1ac:	f04f 37ff 	mov.w	r7, #4294967295
 800d1b0:	e7ea      	b.n	800d188 <__swbuf_r+0x6c>
 800d1b2:	bf00      	nop
 800d1b4:	0800ddcc 	.word	0x0800ddcc
 800d1b8:	0800ddec 	.word	0x0800ddec
 800d1bc:	0800ddac 	.word	0x0800ddac

0800d1c0 <__swsetup_r>:
 800d1c0:	4b32      	ldr	r3, [pc, #200]	; (800d28c <__swsetup_r+0xcc>)
 800d1c2:	b570      	push	{r4, r5, r6, lr}
 800d1c4:	681d      	ldr	r5, [r3, #0]
 800d1c6:	4606      	mov	r6, r0
 800d1c8:	460c      	mov	r4, r1
 800d1ca:	b125      	cbz	r5, 800d1d6 <__swsetup_r+0x16>
 800d1cc:	69ab      	ldr	r3, [r5, #24]
 800d1ce:	b913      	cbnz	r3, 800d1d6 <__swsetup_r+0x16>
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	f7fd ff07 	bl	800afe4 <__sinit>
 800d1d6:	4b2e      	ldr	r3, [pc, #184]	; (800d290 <__swsetup_r+0xd0>)
 800d1d8:	429c      	cmp	r4, r3
 800d1da:	d10f      	bne.n	800d1fc <__swsetup_r+0x3c>
 800d1dc:	686c      	ldr	r4, [r5, #4]
 800d1de:	89a3      	ldrh	r3, [r4, #12]
 800d1e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1e4:	0719      	lsls	r1, r3, #28
 800d1e6:	d42c      	bmi.n	800d242 <__swsetup_r+0x82>
 800d1e8:	06dd      	lsls	r5, r3, #27
 800d1ea:	d411      	bmi.n	800d210 <__swsetup_r+0x50>
 800d1ec:	2309      	movs	r3, #9
 800d1ee:	6033      	str	r3, [r6, #0]
 800d1f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d1f4:	81a3      	strh	r3, [r4, #12]
 800d1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1fa:	e03e      	b.n	800d27a <__swsetup_r+0xba>
 800d1fc:	4b25      	ldr	r3, [pc, #148]	; (800d294 <__swsetup_r+0xd4>)
 800d1fe:	429c      	cmp	r4, r3
 800d200:	d101      	bne.n	800d206 <__swsetup_r+0x46>
 800d202:	68ac      	ldr	r4, [r5, #8]
 800d204:	e7eb      	b.n	800d1de <__swsetup_r+0x1e>
 800d206:	4b24      	ldr	r3, [pc, #144]	; (800d298 <__swsetup_r+0xd8>)
 800d208:	429c      	cmp	r4, r3
 800d20a:	bf08      	it	eq
 800d20c:	68ec      	ldreq	r4, [r5, #12]
 800d20e:	e7e6      	b.n	800d1de <__swsetup_r+0x1e>
 800d210:	0758      	lsls	r0, r3, #29
 800d212:	d512      	bpl.n	800d23a <__swsetup_r+0x7a>
 800d214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d216:	b141      	cbz	r1, 800d22a <__swsetup_r+0x6a>
 800d218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d21c:	4299      	cmp	r1, r3
 800d21e:	d002      	beq.n	800d226 <__swsetup_r+0x66>
 800d220:	4630      	mov	r0, r6
 800d222:	f7fa fd4f 	bl	8007cc4 <_free_r>
 800d226:	2300      	movs	r3, #0
 800d228:	6363      	str	r3, [r4, #52]	; 0x34
 800d22a:	89a3      	ldrh	r3, [r4, #12]
 800d22c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d230:	81a3      	strh	r3, [r4, #12]
 800d232:	2300      	movs	r3, #0
 800d234:	6063      	str	r3, [r4, #4]
 800d236:	6923      	ldr	r3, [r4, #16]
 800d238:	6023      	str	r3, [r4, #0]
 800d23a:	89a3      	ldrh	r3, [r4, #12]
 800d23c:	f043 0308 	orr.w	r3, r3, #8
 800d240:	81a3      	strh	r3, [r4, #12]
 800d242:	6923      	ldr	r3, [r4, #16]
 800d244:	b94b      	cbnz	r3, 800d25a <__swsetup_r+0x9a>
 800d246:	89a3      	ldrh	r3, [r4, #12]
 800d248:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d24c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d250:	d003      	beq.n	800d25a <__swsetup_r+0x9a>
 800d252:	4621      	mov	r1, r4
 800d254:	4630      	mov	r0, r6
 800d256:	f000 f847 	bl	800d2e8 <__smakebuf_r>
 800d25a:	89a0      	ldrh	r0, [r4, #12]
 800d25c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d260:	f010 0301 	ands.w	r3, r0, #1
 800d264:	d00a      	beq.n	800d27c <__swsetup_r+0xbc>
 800d266:	2300      	movs	r3, #0
 800d268:	60a3      	str	r3, [r4, #8]
 800d26a:	6963      	ldr	r3, [r4, #20]
 800d26c:	425b      	negs	r3, r3
 800d26e:	61a3      	str	r3, [r4, #24]
 800d270:	6923      	ldr	r3, [r4, #16]
 800d272:	b943      	cbnz	r3, 800d286 <__swsetup_r+0xc6>
 800d274:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d278:	d1ba      	bne.n	800d1f0 <__swsetup_r+0x30>
 800d27a:	bd70      	pop	{r4, r5, r6, pc}
 800d27c:	0781      	lsls	r1, r0, #30
 800d27e:	bf58      	it	pl
 800d280:	6963      	ldrpl	r3, [r4, #20]
 800d282:	60a3      	str	r3, [r4, #8]
 800d284:	e7f4      	b.n	800d270 <__swsetup_r+0xb0>
 800d286:	2000      	movs	r0, #0
 800d288:	e7f7      	b.n	800d27a <__swsetup_r+0xba>
 800d28a:	bf00      	nop
 800d28c:	2000003c 	.word	0x2000003c
 800d290:	0800ddcc 	.word	0x0800ddcc
 800d294:	0800ddec 	.word	0x0800ddec
 800d298:	0800ddac 	.word	0x0800ddac

0800d29c <__swhatbuf_r>:
 800d29c:	b570      	push	{r4, r5, r6, lr}
 800d29e:	460e      	mov	r6, r1
 800d2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2a4:	2900      	cmp	r1, #0
 800d2a6:	b096      	sub	sp, #88	; 0x58
 800d2a8:	4614      	mov	r4, r2
 800d2aa:	461d      	mov	r5, r3
 800d2ac:	da08      	bge.n	800d2c0 <__swhatbuf_r+0x24>
 800d2ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	602a      	str	r2, [r5, #0]
 800d2b6:	061a      	lsls	r2, r3, #24
 800d2b8:	d410      	bmi.n	800d2dc <__swhatbuf_r+0x40>
 800d2ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2be:	e00e      	b.n	800d2de <__swhatbuf_r+0x42>
 800d2c0:	466a      	mov	r2, sp
 800d2c2:	f000 f859 	bl	800d378 <_fstat_r>
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	dbf1      	blt.n	800d2ae <__swhatbuf_r+0x12>
 800d2ca:	9a01      	ldr	r2, [sp, #4]
 800d2cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d2d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d2d4:	425a      	negs	r2, r3
 800d2d6:	415a      	adcs	r2, r3
 800d2d8:	602a      	str	r2, [r5, #0]
 800d2da:	e7ee      	b.n	800d2ba <__swhatbuf_r+0x1e>
 800d2dc:	2340      	movs	r3, #64	; 0x40
 800d2de:	2000      	movs	r0, #0
 800d2e0:	6023      	str	r3, [r4, #0]
 800d2e2:	b016      	add	sp, #88	; 0x58
 800d2e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d2e8 <__smakebuf_r>:
 800d2e8:	898b      	ldrh	r3, [r1, #12]
 800d2ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2ec:	079d      	lsls	r5, r3, #30
 800d2ee:	4606      	mov	r6, r0
 800d2f0:	460c      	mov	r4, r1
 800d2f2:	d507      	bpl.n	800d304 <__smakebuf_r+0x1c>
 800d2f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d2f8:	6023      	str	r3, [r4, #0]
 800d2fa:	6123      	str	r3, [r4, #16]
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	6163      	str	r3, [r4, #20]
 800d300:	b002      	add	sp, #8
 800d302:	bd70      	pop	{r4, r5, r6, pc}
 800d304:	ab01      	add	r3, sp, #4
 800d306:	466a      	mov	r2, sp
 800d308:	f7ff ffc8 	bl	800d29c <__swhatbuf_r>
 800d30c:	9900      	ldr	r1, [sp, #0]
 800d30e:	4605      	mov	r5, r0
 800d310:	4630      	mov	r0, r6
 800d312:	f7fa fd43 	bl	8007d9c <_malloc_r>
 800d316:	b948      	cbnz	r0, 800d32c <__smakebuf_r+0x44>
 800d318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d31c:	059a      	lsls	r2, r3, #22
 800d31e:	d4ef      	bmi.n	800d300 <__smakebuf_r+0x18>
 800d320:	f023 0303 	bic.w	r3, r3, #3
 800d324:	f043 0302 	orr.w	r3, r3, #2
 800d328:	81a3      	strh	r3, [r4, #12]
 800d32a:	e7e3      	b.n	800d2f4 <__smakebuf_r+0xc>
 800d32c:	4b0d      	ldr	r3, [pc, #52]	; (800d364 <__smakebuf_r+0x7c>)
 800d32e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	6020      	str	r0, [r4, #0]
 800d334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d338:	81a3      	strh	r3, [r4, #12]
 800d33a:	9b00      	ldr	r3, [sp, #0]
 800d33c:	6163      	str	r3, [r4, #20]
 800d33e:	9b01      	ldr	r3, [sp, #4]
 800d340:	6120      	str	r0, [r4, #16]
 800d342:	b15b      	cbz	r3, 800d35c <__smakebuf_r+0x74>
 800d344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d348:	4630      	mov	r0, r6
 800d34a:	f000 f827 	bl	800d39c <_isatty_r>
 800d34e:	b128      	cbz	r0, 800d35c <__smakebuf_r+0x74>
 800d350:	89a3      	ldrh	r3, [r4, #12]
 800d352:	f023 0303 	bic.w	r3, r3, #3
 800d356:	f043 0301 	orr.w	r3, r3, #1
 800d35a:	81a3      	strh	r3, [r4, #12]
 800d35c:	89a0      	ldrh	r0, [r4, #12]
 800d35e:	4305      	orrs	r5, r0
 800d360:	81a5      	strh	r5, [r4, #12]
 800d362:	e7cd      	b.n	800d300 <__smakebuf_r+0x18>
 800d364:	0800af7d 	.word	0x0800af7d

0800d368 <_malloc_usable_size_r>:
 800d368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d36c:	1f18      	subs	r0, r3, #4
 800d36e:	2b00      	cmp	r3, #0
 800d370:	bfbc      	itt	lt
 800d372:	580b      	ldrlt	r3, [r1, r0]
 800d374:	18c0      	addlt	r0, r0, r3
 800d376:	4770      	bx	lr

0800d378 <_fstat_r>:
 800d378:	b538      	push	{r3, r4, r5, lr}
 800d37a:	4d07      	ldr	r5, [pc, #28]	; (800d398 <_fstat_r+0x20>)
 800d37c:	2300      	movs	r3, #0
 800d37e:	4604      	mov	r4, r0
 800d380:	4608      	mov	r0, r1
 800d382:	4611      	mov	r1, r2
 800d384:	602b      	str	r3, [r5, #0]
 800d386:	f7f4 fc1a 	bl	8001bbe <_fstat>
 800d38a:	1c43      	adds	r3, r0, #1
 800d38c:	d102      	bne.n	800d394 <_fstat_r+0x1c>
 800d38e:	682b      	ldr	r3, [r5, #0]
 800d390:	b103      	cbz	r3, 800d394 <_fstat_r+0x1c>
 800d392:	6023      	str	r3, [r4, #0]
 800d394:	bd38      	pop	{r3, r4, r5, pc}
 800d396:	bf00      	nop
 800d398:	2000066c 	.word	0x2000066c

0800d39c <_isatty_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	4d06      	ldr	r5, [pc, #24]	; (800d3b8 <_isatty_r+0x1c>)
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	4608      	mov	r0, r1
 800d3a6:	602b      	str	r3, [r5, #0]
 800d3a8:	f7f4 fc19 	bl	8001bde <_isatty>
 800d3ac:	1c43      	adds	r3, r0, #1
 800d3ae:	d102      	bne.n	800d3b6 <_isatty_r+0x1a>
 800d3b0:	682b      	ldr	r3, [r5, #0]
 800d3b2:	b103      	cbz	r3, 800d3b6 <_isatty_r+0x1a>
 800d3b4:	6023      	str	r3, [r4, #0]
 800d3b6:	bd38      	pop	{r3, r4, r5, pc}
 800d3b8:	2000066c 	.word	0x2000066c

0800d3bc <_init>:
 800d3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3be:	bf00      	nop
 800d3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3c2:	bc08      	pop	{r3}
 800d3c4:	469e      	mov	lr, r3
 800d3c6:	4770      	bx	lr

0800d3c8 <_fini>:
 800d3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ca:	bf00      	nop
 800d3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ce:	bc08      	pop	{r3}
 800d3d0:	469e      	mov	lr, r3
 800d3d2:	4770      	bx	lr
