
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb4  0800df88  0800df88  0001df88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec3c  0800ec3c  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec3c  0800ec3c  0001ec3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec44  0800ec44  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ec44  0800ec44  0001ec44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec4c  0800ec4c  0001ec4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800ec50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  20000210  0800ee60  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  0800ee60  00020808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fbc7  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000401b  00000000  00000000  0003fe07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00043e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001388  00000000  00000000  00045338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284fd  00000000  00000000  000466c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0db  00000000  00000000  0006ebbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3965  00000000  00000000  00088c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c5fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007130  00000000  00000000  0016c650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800df6c 	.word	0x0800df6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800df6c 	.word	0x0800df6c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_DMA_Init+0x38>)
 8001020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <MX_DMA_Init+0x38>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6493      	str	r3, [r2, #72]	; 0x48
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_DMA_Init+0x38>)
 800102c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2010      	movs	r0, #16
 800103c:	f002 fc9d 	bl	800397a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001040:	2010      	movs	r0, #16
 8001042:	f002 fcb6 	bl	80039b2 <HAL_NVIC_EnableIRQ>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB8   ------> S_TIM16_CH1
*/
void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	4b5c      	ldr	r3, [pc, #368]	; (80011dc <MX_GPIO_Init+0x188>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a5b      	ldr	r2, [pc, #364]	; (80011dc <MX_GPIO_Init+0x188>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b59      	ldr	r3, [pc, #356]	; (80011dc <MX_GPIO_Init+0x188>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001082:	4b56      	ldr	r3, [pc, #344]	; (80011dc <MX_GPIO_Init+0x188>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	4a55      	ldr	r2, [pc, #340]	; (80011dc <MX_GPIO_Init+0x188>)
 8001088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108e:	4b53      	ldr	r3, [pc, #332]	; (80011dc <MX_GPIO_Init+0x188>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b50      	ldr	r3, [pc, #320]	; (80011dc <MX_GPIO_Init+0x188>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	4a4f      	ldr	r2, [pc, #316]	; (80011dc <MX_GPIO_Init+0x188>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a6:	4b4d      	ldr	r3, [pc, #308]	; (80011dc <MX_GPIO_Init+0x188>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b4a      	ldr	r3, [pc, #296]	; (80011dc <MX_GPIO_Init+0x188>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a49      	ldr	r2, [pc, #292]	; (80011dc <MX_GPIO_Init+0x188>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b47      	ldr	r3, [pc, #284]	; (80011dc <MX_GPIO_Init+0x188>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 80010ca:	2200      	movs	r2, #0
 80010cc:	f248 11b0 	movw	r1, #33200	; 0x81b0
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f002 ffe8 	bl	80040a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f242 0160 	movw	r1, #8288	; 0x2060
 80010de:	4840      	ldr	r0, [pc, #256]	; (80011e0 <MX_GPIO_Init+0x18c>)
 80010e0:	f002 ffe2 	bl	80040a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2180      	movs	r1, #128	; 0x80
 80010e8:	483e      	ldr	r0, [pc, #248]	; (80011e4 <MX_GPIO_Init+0x190>)
 80010ea:	f002 ffdd 	bl	80040a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4837      	ldr	r0, [pc, #220]	; (80011e4 <MX_GPIO_Init+0x190>)
 8001106:	f002 fe55 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 800110a:	f248 13b0 	movw	r3, #33200	; 0x81b0
 800110e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f002 fe45 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800112a:	2340      	movs	r3, #64	; 0x40
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001132:	2301      	movs	r3, #1
 8001134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001140:	f002 fe38 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 8001144:	f242 0360 	movw	r3, #8288	; 0x2060
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4820      	ldr	r0, [pc, #128]	; (80011e0 <MX_GPIO_Init+0x18c>)
 800115e:	f002 fe29 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001162:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001174:	2305      	movs	r3, #5
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4818      	ldr	r0, [pc, #96]	; (80011e0 <MX_GPIO_Init+0x18c>)
 8001180:	f002 fe18 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4812      	ldr	r0, [pc, #72]	; (80011e4 <MX_GPIO_Init+0x190>)
 800119c:	f002 fe0a 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80011b2:	230e      	movs	r3, #14
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <MX_GPIO_Init+0x18c>)
 80011be:	f002 fdf9 	bl	8003db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2101      	movs	r1, #1
 80011c6:	2028      	movs	r0, #40	; 0x28
 80011c8:	f002 fbd7 	bl	800397a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011cc:	2028      	movs	r0, #40	; 0x28
 80011ce:	f002 fbf0 	bl	80039b2 <HAL_NVIC_EnableIRQ>

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	48000400 	.word	0x48000400
 80011e4:	48000800 	.word	0x48000800

080011e8 <_ZN3PinC1Ev>:
    uint16_t pin;
    bool valid;
    TIM_HandleTypeDef* p_tim;
    unsigned int tim_channel;

    Pin() : port(nullptr), pin(0), valid(false), p_tim(nullptr), tim_channel(0) {}
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	809a      	strh	r2, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	719a      	strb	r2, [r3, #6]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_ZN3PinC1EP12GPIO_TypeDeft>:
    Pin(GPIO_TypeDef* p, uint16_t pn) : port(p), pin(pn), valid(true), p_tim(nullptr), tim_channel(0) {} // no timer
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	4613      	mov	r3, r2
 8001228:	80fb      	strh	r3, [r7, #6]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	809a      	strh	r2, [r3, #4]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2201      	movs	r2, #1
 800123a:	719a      	strb	r2, [r3, #6]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>:
    Pin(GPIO_TypeDef* p, uint16_t pn, TIM_HandleTypeDef* t, unsigned int c) : port(p), pin(pn), valid(true), p_tim(t), tim_channel(c) {}
 8001256:	b480      	push	{r7}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4613      	mov	r3, r2
 8001264:	80fb      	strh	r3, [r7, #6]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	88fa      	ldrh	r2, [r7, #6]
 8001270:	809a      	strh	r2, [r3, #4]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2201      	movs	r2, #1
 8001276:	719a      	strb	r2, [r3, #6]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <_Z5printPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7fe ffa1 	bl	80001e4 <strlen>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <_Z5printPKc+0x2c>)
 80012ae:	f005 fdad 	bl	8006e0c <HAL_UART_Transmit>
 80012b2:	4603      	mov	r3, r0
 80012b4:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000724 	.word	0x20000724

080012c4 <printf>:
int printf(const char* s, ...){
 80012c4:	b40f      	push	{r0, r1, r2, r3}
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b0c2      	sub	sp, #264	; 0x108
 80012ca:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 80012cc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80012d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80012d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80012d8:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 80012da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80012de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80012e2:	f107 0008 	add.w	r0, r7, #8
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80012ec:	f009 fc54 	bl	800ab98 <vsiprintf>
	perror(buffer);
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	4618      	mov	r0, r3
 80012f6:	f008 faaf 	bl	8009858 <perror>
	print(buffer);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ffc8 	bl	8001294 <_Z5printPKc>
	va_end(args);
//	#endif
	return strlen(buffer);
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	4618      	mov	r0, r3
 800130a:	f7fe ff6b 	bl	80001e4 <strlen>
 800130e:	4603      	mov	r3, r0
}
 8001310:	4618      	mov	r0, r3
 8001312:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001316:	46bd      	mov	sp, r7
 8001318:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800131c:	b004      	add	sp, #16
 800131e:	4770      	bx	lr

08001320 <_Z11print_MOTORPcP13RoverArmMotor>:
Pin SERVO_PWM_1(SERVO_PWM_1_GPIO_Port, SERVO_PWM_1_Pin, &htim1, TIM_CHANNEL_2);
RoverArmMotor Waist(&hspi1, SERVO_PWM_1, dummy_pin, AMT22_1, BLUE_ROBOTICS, 0, 359.99f);


/*---------------------HELPER---------------------*/
void print_MOTOR(char* msg, RoverArmMotor* pMotor){
 8001320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001324:	b099      	sub	sp, #100	; 0x64
 8001326:	af0e      	add	r7, sp, #56	; 0x38
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
  double current_angle = pMotor->get_current_angle();
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f001 fd55 	bl	8002ddc <_ZN13RoverArmMotor17get_current_angleEv>
 8001332:	ed87 0b08 	vstr	d0, [r7, #32]
  double current_angle_multi = pMotor->get_current_angle_multi();
 8001336:	6838      	ldr	r0, [r7, #0]
 8001338:	f001 fd90 	bl	8002e5c <_ZN13RoverArmMotor23get_current_angle_multiEv>
 800133c:	ed87 0b06 	vstr	d0, [r7, #24]
  double current_angle_sw = pMotor->get_current_angle_sw();
 8001340:	6838      	ldr	r0, [r7, #0]
 8001342:	f001 fded 	bl	8002f20 <_ZN13RoverArmMotor20get_current_angle_swEv>
 8001346:	ed87 0b04 	vstr	d0, [r7, #16]
  int turn_count = pMotor->get_turn_count();
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f001 fe42 	bl	8002fd4 <_ZN13RoverArmMotor14get_turn_countEv>
 8001350:	60f8      	str	r0, [r7, #12]
  printf("%s turn_count %d, setpoint %.2f, angle_sw %.2f, zero_sw %.2f, angle_raw_multi %.2f, angle_raw %.2f, _outputSum %.2f, output %.2f\r\n", 
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 8001358:	6839      	ldr	r1, [r7, #0]
 800135a:	e9d1 0158 	ldrd	r0, r1, [r1, #352]	; 0x160
 800135e:	683c      	ldr	r4, [r7, #0]
 8001360:	e9d4 4514 	ldrd	r4, r5, [r4, #80]	; 0x50
        current_angle_sw, 
        pMotor->zero_angle_sw,
        current_angle_multi,
        current_angle, 
        pMotor->internalPIDInstance._outputSum, 
        *(pMotor->internalPIDInstance._myOutput));
 8001364:	683e      	ldr	r6, [r7, #0]
 8001366:	6c76      	ldr	r6, [r6, #68]	; 0x44
  printf("%s turn_count %d, setpoint %.2f, angle_sw %.2f, zero_sw %.2f, angle_raw_multi %.2f, angle_raw %.2f, _outputSum %.2f, output %.2f\r\n", 
 8001368:	e9d6 8900 	ldrd	r8, r9, [r6]
 800136c:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8001370:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8001374:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001378:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800137c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001380:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001388:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800138c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001390:	e9cd 2300 	strd	r2, r3, [sp]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <_Z11print_MOTORPcP13RoverArmMotor+0x88>)
 800139a:	f7ff ff93 	bl	80012c4 <printf>
}
 800139e:	bf00      	nop
 80013a0:	372c      	adds	r7, #44	; 0x2c
 80013a2:	46bd      	mov	sp, r7
 80013a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013a8:	0800df88 	.word	0x0800df88
 80013ac:	00000000 	.word	0x00000000

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b6:	f002 f965 	bl	8003684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ba:	f000 f8d7 	bl	800156c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013be:	f7ff fe49 	bl	8001054 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c2:	f7ff fe29 	bl	8001018 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013c6:	f000 ff0f 	bl	80021e8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80013ca:	f000 fb05 	bl	80019d8 <MX_SPI1_Init>
//  MX_SPI2_Init();
  MX_SPI3_Init();
 80013ce:	f000 fb41 	bl	8001a54 <MX_SPI3_Init>
  MX_TIM1_Init();
 80013d2:	f000 fd35 	bl	8001e40 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013d6:	f000 fddf 	bl	8001f98 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderData_1 = 99;
 80013da:	2363      	movs	r3, #99	; 0x63
 80013dc:	82fb      	strh	r3, [r7, #22]
  uint16_t encoderData_2 = 99;
 80013de:	2363      	movs	r3, #99	; 0x63
 80013e0:	82bb      	strh	r3, [r7, #20]
  uint16_t encoderData_3 = 99;
 80013e2:	2363      	movs	r3, #99	; 0x63
 80013e4:	827b      	strh	r3, [r7, #18]
  uint16_t encoder_max = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	823b      	strh	r3, [r7, #16]
  uint16_t encoder_min = 4100;
 80013ea:	f241 0304 	movw	r3, #4100	; 0x1004
 80013ee:	81fb      	strh	r3, [r7, #14]
  HAL_TIM_Base_Start(&htim1);
 80013f0:	484f      	ldr	r0, [pc, #316]	; (8001530 <main+0x180>)
 80013f2:	f004 fcd3 	bl	8005d9c <HAL_TIM_Base_Start>

  /*---AMT22 setup---*/
  // resetAMT22(&hspi1, GPIOC, GPIO_PIN_7, &htim1);

  /*---SERVO setup---*/
  int32_t  CH2_ESC = 1500-1;
 80013f6:	f240 53db 	movw	r3, #1499	; 0x5db
 80013fa:	60bb      	str	r3, [r7, #8]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013fc:	2104      	movs	r1, #4
 80013fe:	484c      	ldr	r0, [pc, #304]	; (8001530 <main+0x180>)
 8001400:	f004 fd7a 	bl	8005ef8 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 8001404:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001408:	f002 f9b8 	bl	800377c <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500-1);
 800140c:	4b48      	ldr	r3, [pc, #288]	; (8001530 <main+0x180>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f240 52db 	movw	r2, #1499	; 0x5db
 8001414:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(500);
 8001416:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800141a:	f002 f9af 	bl	800377c <HAL_Delay>




  /*---CYTRON setup---*/
  int32_t  CH2_DC = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
  // HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
  HAL_Delay(10);
 8001422:	200a      	movs	r0, #10
 8001424:	f002 f9aa 	bl	800377c <HAL_Delay>
  Wrist_Roll.wrist_waist = 1;
 8001428:	4b42      	ldr	r3, [pc, #264]	; (8001534 <main+0x184>)
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
  Wrist_Roll.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
 8001430:	4b41      	ldr	r3, [pc, #260]	; (8001538 <main+0x188>)
 8001432:	ed93 7b00 	vldr	d7, [r3]
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <main+0x18c>)
 8001438:	ed93 6b00 	vldr	d6, [r3]
 800143c:	4b40      	ldr	r3, [pc, #256]	; (8001540 <main+0x190>)
 800143e:	ed93 2b00 	vldr	d2, [r3]
 8001442:	4b40      	ldr	r3, [pc, #256]	; (8001544 <main+0x194>)
 8001444:	ed93 3b00 	vldr	d3, [r3]
 8001448:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <main+0x198>)
 800144a:	ed93 4b00 	vldr	d4, [r3]
 800144e:	4b3f      	ldr	r3, [pc, #252]	; (800154c <main+0x19c>)
 8001450:	ed93 5b00 	vldr	d5, [r3]
 8001454:	eeb0 1a46 	vmov.f32	s2, s12
 8001458:	eef0 1a66 	vmov.f32	s3, s13
 800145c:	eeb0 0a47 	vmov.f32	s0, s14
 8001460:	eef0 0a67 	vmov.f32	s1, s15
 8001464:	4833      	ldr	r0, [pc, #204]	; (8001534 <main+0x184>)
 8001466:	f001 f867 	bl	8002538 <_ZN13RoverArmMotor5beginEdddddd>
  Wrist_Roll.setGearRatio(1.0f);
 800146a:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8001518 <main+0x168>
 800146e:	4831      	ldr	r0, [pc, #196]	; (8001534 <main+0x184>)
 8001470:	f001 fc56 	bl	8002d20 <_ZN13RoverArmMotor12setGearRatioEd>
  Wrist_Roll.setAngleLimits(0, 359.99f); //TODO check good angle limits
 8001474:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001520 <main+0x170>
 8001478:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8001528 <main+0x178>
 800147c:	482d      	ldr	r0, [pc, #180]	; (8001534 <main+0x184>)
 800147e:	f001 fc60 	bl	8002d42 <_ZN13RoverArmMotor14setAngleLimitsEdd>
  
  HAL_Delay(10);
 8001482:	200a      	movs	r0, #10
 8001484:	f002 f97a 	bl	800377c <HAL_Delay>
  Waist.wrist_waist = 1;
 8001488:	4b31      	ldr	r3, [pc, #196]	; (8001550 <main+0x1a0>)
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
  Waist.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
 8001490:	4b29      	ldr	r3, [pc, #164]	; (8001538 <main+0x188>)
 8001492:	ed93 7b00 	vldr	d7, [r3]
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <main+0x18c>)
 8001498:	ed93 6b00 	vldr	d6, [r3]
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <main+0x190>)
 800149e:	ed93 2b00 	vldr	d2, [r3]
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <main+0x194>)
 80014a4:	ed93 3b00 	vldr	d3, [r3]
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <main+0x198>)
 80014aa:	ed93 4b00 	vldr	d4, [r3]
 80014ae:	4b27      	ldr	r3, [pc, #156]	; (800154c <main+0x19c>)
 80014b0:	ed93 5b00 	vldr	d5, [r3]
 80014b4:	eeb0 1a46 	vmov.f32	s2, s12
 80014b8:	eef0 1a66 	vmov.f32	s3, s13
 80014bc:	eeb0 0a47 	vmov.f32	s0, s14
 80014c0:	eef0 0a67 	vmov.f32	s1, s15
 80014c4:	4822      	ldr	r0, [pc, #136]	; (8001550 <main+0x1a0>)
 80014c6:	f001 f837 	bl	8002538 <_ZN13RoverArmMotor5beginEdddddd>
  Waist.setAngleLimits(0, 359.99f); //TODO check good angle limits
 80014ca:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001520 <main+0x170>
 80014ce:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001528 <main+0x178>
 80014d2:	481f      	ldr	r0, [pc, #124]	; (8001550 <main+0x1a0>)
 80014d4:	f001 fc35 	bl	8002d42 <_ZN13RoverArmMotor14setAngleLimitsEdd>


  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 30);
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <main+0x1a4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	221e      	movs	r2, #30
 80014de:	639a      	str	r2, [r3, #56]	; 0x38
  while(!brakeSet){
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <main+0x1a8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d104      	bne.n	80014f2 <main+0x142>
    print_MOTOR("BRAKE", &Wrist_Roll);
 80014e8:	4912      	ldr	r1, [pc, #72]	; (8001534 <main+0x184>)
 80014ea:	481c      	ldr	r0, [pc, #112]	; (800155c <main+0x1ac>)
 80014ec:	f7ff ff18 	bl	8001320 <_Z11print_MOTORPcP13RoverArmMotor>
  while(!brakeSet){
 80014f0:	e7f6      	b.n	80014e0 <main+0x130>
    // printf("waiting for brake set\r\n");
  }
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <main+0x1a4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2200      	movs	r2, #0
 80014f8:	639a      	str	r2, [r3, #56]	; 0x38

  /*---UART setup---*/
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 80014fa:	2201      	movs	r2, #1
 80014fc:	4918      	ldr	r1, [pc, #96]	; (8001560 <main+0x1b0>)
 80014fe:	4819      	ldr	r0, [pc, #100]	; (8001564 <main+0x1b4>)
 8001500:	f005 fd18 	bl	8006f34 <HAL_UART_Receive_IT>
    //     Wrist_Roll.tick();
    // }
    // Wrist_Roll.stop();

    /*--------------------------------------CYTRON setpoint test--------------------------------------*/
    print_MOTOR("SP Wrist_Roll", &Wrist_Roll);
 8001504:	490b      	ldr	r1, [pc, #44]	; (8001534 <main+0x184>)
 8001506:	4818      	ldr	r0, [pc, #96]	; (8001568 <main+0x1b8>)
 8001508:	f7ff ff0a 	bl	8001320 <_Z11print_MOTORPcP13RoverArmMotor>
    Wrist_Roll.tick();
 800150c:	4809      	ldr	r0, [pc, #36]	; (8001534 <main+0x184>)
 800150e:	f001 f90b 	bl	8002728 <_ZN13RoverArmMotor4tickEv>
    print_MOTOR("SP Wrist_Roll", &Wrist_Roll);
 8001512:	e7f7      	b.n	8001504 <main+0x154>
 8001514:	f3af 8000 	nop.w
 8001518:	00000000 	.word	0x00000000
 800151c:	3ff00000 	.word	0x3ff00000
 8001520:	00000000 	.word	0x00000000
 8001524:	40767fd7 	.word	0x40767fd7
	...
 8001530:	2000068c 	.word	0x2000068c
 8001534:	20000260 	.word	0x20000260
 8001538:	20000000 	.word	0x20000000
 800153c:	20000008 	.word	0x20000008
 8001540:	20000010 	.word	0x20000010
 8001544:	20000018 	.word	0x20000018
 8001548:	20000020 	.word	0x20000020
 800154c:	20000028 	.word	0x20000028
 8001550:	200003f8 	.word	0x200003f8
 8001554:	200006d8 	.word	0x200006d8
 8001558:	2000022c 	.word	0x2000022c
 800155c:	0800e00c 	.word	0x0800e00c
 8001560:	20000568 	.word	0x20000568
 8001564:	20000724 	.word	0x20000724
 8001568:	0800e014 	.word	0x0800e014

0800156c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b096      	sub	sp, #88	; 0x58
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	2244      	movs	r2, #68	; 0x44
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f007 f970 	bl	8008860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800158e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001592:	f002 fdc7 	bl	8004124 <HAL_PWREx_ControlVoltageScaling>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80015a6:	f000 f963 	bl	8001870 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015aa:	2302      	movs	r3, #2
 80015ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b4:	2310      	movs	r3, #16
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b8:	2302      	movs	r3, #2
 80015ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015bc:	2302      	movs	r3, #2
 80015be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015c4:	230a      	movs	r3, #10
 80015c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015c8:	2307      	movs	r3, #7
 80015ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015cc:	2302      	movs	r3, #2
 80015ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015d0:	2302      	movs	r3, #2
 80015d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 fdf9 	bl	80041d0 <HAL_RCC_OscConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf14      	ite	ne
 80015e4:	2301      	movne	r3, #1
 80015e6:	2300      	moveq	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 80015ee:	f000 f93f 	bl	8001870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f2:	230f      	movs	r3, #15
 80015f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f6:	2303      	movs	r3, #3
 80015f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001606:	463b      	mov	r3, r7
 8001608:	2104      	movs	r1, #4
 800160a:	4618      	mov	r0, r3
 800160c:	f003 f9f4 	bl	80049f8 <HAL_RCC_ClockConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	bf14      	ite	ne
 8001616:	2301      	movne	r3, #1
 8001618:	2300      	moveq	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8001620:	f000 f926 	bl	8001870 <Error_Handler>
  }
}
 8001624:	bf00      	nop
 8001626:	3758      	adds	r7, #88	; 0x58
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	0000      	movs	r0, r0
	...

08001630 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
  // if(!brakeSet) {
    if(GPIO_Pin == B1_Pin) // INT Source is pin A9
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001640:	d125      	bne.n	800168e <HAL_GPIO_EXTI_Callback+0x5e>
    {
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);  // set encoder stationary
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_GPIO_EXTI_Callback+0x70>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_Delay(100);  
 800164a:	2064      	movs	r0, #100	; 0x64
 800164c:	f002 f896 	bl	800377c <HAL_Delay>
      button_counter++;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001658:	6013      	str	r3, [r2, #0]
      Wrist_Roll.set_zero_angle_sw();
 800165a:	4813      	ldr	r0, [pc, #76]	; (80016a8 <HAL_GPIO_EXTI_Callback+0x78>)
 800165c:	f001 fb95 	bl	8002d8a <_ZN13RoverArmMotor17set_zero_angle_swEv>
      Waist.set_zero_angle_sw();
 8001660:	4812      	ldr	r0, [pc, #72]	; (80016ac <HAL_GPIO_EXTI_Callback+0x7c>)
 8001662:	f001 fb92 	bl	8002d8a <_ZN13RoverArmMotor17set_zero_angle_swEv>
      // Wrist_Roll.set_zero_angle();
      // Wrist_Roll.reset_encoder(); // reset rurns? TODO check this

      HAL_Delay(100);
 8001666:	2064      	movs	r0, #100	; 0x64
 8001668:	f002 f888 	bl	800377c <HAL_Delay>
      Wrist_Roll.newSetpoint(0.0);  //TODO check this?
 800166c:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8001698 <HAL_GPIO_EXTI_Callback+0x68>
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001672:	f001 fb24 	bl	8002cbe <_ZN13RoverArmMotor11newSetpointEd>
      Waist.newSetpoint(0.0);  //TODO check this?
 8001676:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8001698 <HAL_GPIO_EXTI_Callback+0x68>
 800167a:	480c      	ldr	r0, [pc, #48]	; (80016ac <HAL_GPIO_EXTI_Callback+0x7c>)
 800167c:	f001 fb1f 	bl	8002cbe <_ZN13RoverArmMotor11newSetpointEd>
      
      brakeSet = 1;
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_GPIO_EXTI_Callback+0x80>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]
      HAL_Delay(100);
 8001686:	2064      	movs	r0, #100	; 0x64
 8001688:	f002 f878 	bl	800377c <HAL_Delay>
      return;
 800168c:	bf00      	nop
    }
  // }
}
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	f3af 8000 	nop.w
	...
 80016a0:	200006d8 	.word	0x200006d8
 80016a4:	200003d0 	.word	0x200003d0
 80016a8:	20000260 	.word	0x20000260
 80016ac:	200003f8 	.word	0x200003f8
 80016b0:	2000022c 	.word	0x2000022c

080016b4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016b4:	b5b0      	push	{r4, r5, r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af04      	add	r7, sp, #16
 80016ba:	6078      	str	r0, [r7, #4]
  // if(huart->Instance == USART2)
  // {
    if(rx_index < RX_BUFFER_SIZE - 1) // check if buffer is not full
 80016bc:	4b5c      	ldr	r3, [pc, #368]	; (8001830 <HAL_UART_RxCpltCallback+0x17c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b1c      	cmp	r3, #28
 80016c2:	f200 8081 	bhi.w	80017c8 <HAL_UART_RxCpltCallback+0x114>
    {
      rx_buffer[rx_index++] = (uint8_t)rx_data[0]; // add received byte to buffer
 80016c6:	4b5a      	ldr	r3, [pc, #360]	; (8001830 <HAL_UART_RxCpltCallback+0x17c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	4958      	ldr	r1, [pc, #352]	; (8001830 <HAL_UART_RxCpltCallback+0x17c>)
 80016ce:	600a      	str	r2, [r1, #0]
 80016d0:	4a58      	ldr	r2, [pc, #352]	; (8001834 <HAL_UART_RxCpltCallback+0x180>)
 80016d2:	7811      	ldrb	r1, [r2, #0]
 80016d4:	4a58      	ldr	r2, [pc, #352]	; (8001838 <HAL_UART_RxCpltCallback+0x184>)
 80016d6:	54d1      	strb	r1, [r2, r3]
      if(rx_data[0] == '\n' || rx_data[0] == '\r') // check for Enter key
 80016d8:	4b56      	ldr	r3, [pc, #344]	; (8001834 <HAL_UART_RxCpltCallback+0x180>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b0a      	cmp	r3, #10
 80016de:	d003      	beq.n	80016e8 <HAL_UART_RxCpltCallback+0x34>
 80016e0:	4b54      	ldr	r3, [pc, #336]	; (8001834 <HAL_UART_RxCpltCallback+0x180>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b0d      	cmp	r3, #13
 80016e6:	d16a      	bne.n	80017be <HAL_UART_RxCpltCallback+0x10a>
      {
        rx_buffer[rx_index] = '\0'; // add null terminator to make it a string
 80016e8:	4b51      	ldr	r3, [pc, #324]	; (8001830 <HAL_UART_RxCpltCallback+0x17c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_UART_RxCpltCallback+0x184>)
 80016ee:	2100      	movs	r1, #0
 80016f0:	54d1      	strb	r1, [r2, r3]
        rx_index = 0; // reset buffer index
 80016f2:	4b4f      	ldr	r3, [pc, #316]	; (8001830 <HAL_UART_RxCpltCallback+0x17c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
        // do something with the received data
        sscanf(rx_buffer, "%s %lf %lf %lf", command_buffer, &param1, &param2, &param3);
 80016f8:	4b50      	ldr	r3, [pc, #320]	; (800183c <HAL_UART_RxCpltCallback+0x188>)
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	4b50      	ldr	r3, [pc, #320]	; (8001840 <HAL_UART_RxCpltCallback+0x18c>)
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	4b50      	ldr	r3, [pc, #320]	; (8001844 <HAL_UART_RxCpltCallback+0x190>)
 8001702:	4a51      	ldr	r2, [pc, #324]	; (8001848 <HAL_UART_RxCpltCallback+0x194>)
 8001704:	4951      	ldr	r1, [pc, #324]	; (800184c <HAL_UART_RxCpltCallback+0x198>)
 8001706:	484c      	ldr	r0, [pc, #304]	; (8001838 <HAL_UART_RxCpltCallback+0x184>)
 8001708:	f008 f928 	bl	800995c <siscanf>
        //check if commmand_buffer is "pid"
        if(strcmp(command_buffer, "pid") == 0)
 800170c:	4950      	ldr	r1, [pc, #320]	; (8001850 <HAL_UART_RxCpltCallback+0x19c>)
 800170e:	484e      	ldr	r0, [pc, #312]	; (8001848 <HAL_UART_RxCpltCallback+0x194>)
 8001710:	f7fe fd5e 	bl	80001d0 <strcmp>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d12f      	bne.n	800177a <HAL_UART_RxCpltCallback+0xc6>
        {
          Wrist_Roll.set_PID_params(param1, param2, param3, param1, param2, param3);
 800171a:	4b4a      	ldr	r3, [pc, #296]	; (8001844 <HAL_UART_RxCpltCallback+0x190>)
 800171c:	ed93 7b00 	vldr	d7, [r3]
 8001720:	4b47      	ldr	r3, [pc, #284]	; (8001840 <HAL_UART_RxCpltCallback+0x18c>)
 8001722:	ed93 6b00 	vldr	d6, [r3]
 8001726:	4b45      	ldr	r3, [pc, #276]	; (800183c <HAL_UART_RxCpltCallback+0x188>)
 8001728:	ed93 2b00 	vldr	d2, [r3]
 800172c:	4b45      	ldr	r3, [pc, #276]	; (8001844 <HAL_UART_RxCpltCallback+0x190>)
 800172e:	ed93 3b00 	vldr	d3, [r3]
 8001732:	4b43      	ldr	r3, [pc, #268]	; (8001840 <HAL_UART_RxCpltCallback+0x18c>)
 8001734:	ed93 4b00 	vldr	d4, [r3]
 8001738:	4b40      	ldr	r3, [pc, #256]	; (800183c <HAL_UART_RxCpltCallback+0x188>)
 800173a:	ed93 5b00 	vldr	d5, [r3]
 800173e:	eeb0 1a46 	vmov.f32	s2, s12
 8001742:	eef0 1a66 	vmov.f32	s3, s13
 8001746:	eeb0 0a47 	vmov.f32	s0, s14
 800174a:	eef0 0a67 	vmov.f32	s1, s15
 800174e:	4841      	ldr	r0, [pc, #260]	; (8001854 <HAL_UART_RxCpltCallback+0x1a0>)
 8001750:	f001 fa6a 	bl	8002c28 <_ZN13RoverArmMotor14set_PID_paramsEdddddd>
          printf("set to Kp: %lf, Ki: %lf, Kd: %lf\r\n", param1, param2, param3);
 8001754:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <HAL_UART_RxCpltCallback+0x190>)
 8001756:	e9d3 4500 	ldrd	r4, r5, [r3]
 800175a:	4b39      	ldr	r3, [pc, #228]	; (8001840 <HAL_UART_RxCpltCallback+0x18c>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	4936      	ldr	r1, [pc, #216]	; (800183c <HAL_UART_RxCpltCallback+0x188>)
 8001762:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800176a:	e9cd 2300 	strd	r2, r3, [sp]
 800176e:	4622      	mov	r2, r4
 8001770:	462b      	mov	r3, r5
 8001772:	4839      	ldr	r0, [pc, #228]	; (8001858 <HAL_UART_RxCpltCallback+0x1a4>)
 8001774:	f7ff fda6 	bl	80012c4 <printf>
        if(strcmp(command_buffer, "pid") == 0)
 8001778:	e04f      	b.n	800181a <HAL_UART_RxCpltCallback+0x166>
        }
        else if (strcmp(command_buffer, "sp") == 0) 
 800177a:	4938      	ldr	r1, [pc, #224]	; (800185c <HAL_UART_RxCpltCallback+0x1a8>)
 800177c:	4832      	ldr	r0, [pc, #200]	; (8001848 <HAL_UART_RxCpltCallback+0x194>)
 800177e:	f7fe fd27 	bl	80001d0 <strcmp>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d148      	bne.n	800181a <HAL_UART_RxCpltCallback+0x166>
        {
          Wrist_Roll.newSetpoint(param1);
 8001788:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <HAL_UART_RxCpltCallback+0x190>)
 800178a:	ed93 7b00 	vldr	d7, [r3]
 800178e:	eeb0 0a47 	vmov.f32	s0, s14
 8001792:	eef0 0a67 	vmov.f32	s1, s15
 8001796:	482f      	ldr	r0, [pc, #188]	; (8001854 <HAL_UART_RxCpltCallback+0x1a0>)
 8001798:	f001 fa91 	bl	8002cbe <_ZN13RoverArmMotor11newSetpointEd>
          Waist.newSetpoint(param1);  //TODO check this?
 800179c:	4b29      	ldr	r3, [pc, #164]	; (8001844 <HAL_UART_RxCpltCallback+0x190>)
 800179e:	ed93 7b00 	vldr	d7, [r3]
 80017a2:	eeb0 0a47 	vmov.f32	s0, s14
 80017a6:	eef0 0a67 	vmov.f32	s1, s15
 80017aa:	482d      	ldr	r0, [pc, #180]	; (8001860 <HAL_UART_RxCpltCallback+0x1ac>)
 80017ac:	f001 fa87 	bl	8002cbe <_ZN13RoverArmMotor11newSetpointEd>
          printf("new Setpoint at %lf\r\n", param1);
 80017b0:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_UART_RxCpltCallback+0x190>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	482b      	ldr	r0, [pc, #172]	; (8001864 <HAL_UART_RxCpltCallback+0x1b0>)
 80017b8:	f7ff fd84 	bl	80012c4 <printf>
        if(strcmp(command_buffer, "pid") == 0)
 80017bc:	e02d      	b.n	800181a <HAL_UART_RxCpltCallback+0x166>
        } 
      }
      else {
          printf("invalid command %s\r\n", command_buffer);
 80017be:	4922      	ldr	r1, [pc, #136]	; (8001848 <HAL_UART_RxCpltCallback+0x194>)
 80017c0:	4829      	ldr	r0, [pc, #164]	; (8001868 <HAL_UART_RxCpltCallback+0x1b4>)
 80017c2:	f7ff fd7f 	bl	80012c4 <printf>
 80017c6:	e029      	b.n	800181c <HAL_UART_RxCpltCallback+0x168>
        }
        
    }
    else if (rx_index == RX_BUFFER_SIZE - 1) // buffer is full
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_UART_RxCpltCallback+0x17c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b1d      	cmp	r3, #29
 80017ce:	d125      	bne.n	800181c <HAL_UART_RxCpltCallback+0x168>
    {
      rx_buffer[rx_index] = '\0'; // add null terminator to make it a string
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_UART_RxCpltCallback+0x17c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a18      	ldr	r2, [pc, #96]	; (8001838 <HAL_UART_RxCpltCallback+0x184>)
 80017d6:	2100      	movs	r1, #0
 80017d8:	54d1      	strb	r1, [r2, r3]
      rx_index = 0; // reset buffer index
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_UART_RxCpltCallback+0x17c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
      // do something with the received data
      sscanf(rx_buffer, "%s %lf %lf %lf", command_buffer, &param1, &param2, &param3);
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <HAL_UART_RxCpltCallback+0x188>)
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_UART_RxCpltCallback+0x18c>)
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	4b16      	ldr	r3, [pc, #88]	; (8001844 <HAL_UART_RxCpltCallback+0x190>)
 80017ea:	4a17      	ldr	r2, [pc, #92]	; (8001848 <HAL_UART_RxCpltCallback+0x194>)
 80017ec:	4917      	ldr	r1, [pc, #92]	; (800184c <HAL_UART_RxCpltCallback+0x198>)
 80017ee:	4812      	ldr	r0, [pc, #72]	; (8001838 <HAL_UART_RxCpltCallback+0x184>)
 80017f0:	f008 f8b4 	bl	800995c <siscanf>
      printf("set to Kp: %lf, Ki: %lf, Kd: %lf\r\n", param1, param2, param3);
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <HAL_UART_RxCpltCallback+0x190>)
 80017f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_UART_RxCpltCallback+0x18c>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	490e      	ldr	r1, [pc, #56]	; (800183c <HAL_UART_RxCpltCallback+0x188>)
 8001802:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800180a:	e9cd 2300 	strd	r2, r3, [sp]
 800180e:	4622      	mov	r2, r4
 8001810:	462b      	mov	r3, r5
 8001812:	4811      	ldr	r0, [pc, #68]	; (8001858 <HAL_UART_RxCpltCallback+0x1a4>)
 8001814:	f7ff fd56 	bl	80012c4 <printf>
 8001818:	e000      	b.n	800181c <HAL_UART_RxCpltCallback+0x168>
        if(strcmp(command_buffer, "pid") == 0)
 800181a:	bf00      	nop
    }
  // }
  HAL_UART_Receive_IT(&huart2, rx_data, 1); // start listening for next byte
 800181c:	2201      	movs	r2, #1
 800181e:	4905      	ldr	r1, [pc, #20]	; (8001834 <HAL_UART_RxCpltCallback+0x180>)
 8001820:	4812      	ldr	r0, [pc, #72]	; (800186c <HAL_UART_RxCpltCallback+0x1b8>)
 8001822:	f005 fb87 	bl	8006f34 <HAL_UART_Receive_IT>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bdb0      	pop	{r4, r5, r7, pc}
 800182e:	bf00      	nop
 8001830:	20000590 	.word	0x20000590
 8001834:	20000568 	.word	0x20000568
 8001838:	20000570 	.word	0x20000570
 800183c:	200005b8 	.word	0x200005b8
 8001840:	200005b0 	.word	0x200005b0
 8001844:	200005a8 	.word	0x200005a8
 8001848:	20000594 	.word	0x20000594
 800184c:	0800e024 	.word	0x0800e024
 8001850:	0800e034 	.word	0x0800e034
 8001854:	20000260 	.word	0x20000260
 8001858:	0800e038 	.word	0x0800e038
 800185c:	0800e05c 	.word	0x0800e05c
 8001860:	200003f8 	.word	0x200003f8
 8001864:	0800e060 	.word	0x0800e060
 8001868:	0800e078 	.word	0x0800e078
 800186c:	20000724 	.word	0x20000724

08001870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001874:	b672      	cpsid	i
}
 8001876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001878:	e7fe      	b.n	8001878 <Error_Handler+0x8>
 800187a:	0000      	movs	r0, r0
 800187c:	0000      	movs	r0, r0
	...

08001880 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001880:	b5b0      	push	{r4, r5, r7, lr}
 8001882:	b09a      	sub	sp, #104	; 0x68
 8001884:	af10      	add	r7, sp, #64	; 0x40
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d175      	bne.n	800197c <_Z41__static_initialization_and_destruction_0ii+0xfc>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001896:	4293      	cmp	r3, r2
 8001898:	d170      	bne.n	800197c <_Z41__static_initialization_and_destruction_0ii+0xfc>
Pin CYTRON_DIR_1(CYTRON_DIR_1_GPIO_Port, CYTRON_DIR_1_Pin);
 800189a:	2220      	movs	r2, #32
 800189c:	493e      	ldr	r1, [pc, #248]	; (8001998 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800189e:	483f      	ldr	r0, [pc, #252]	; (800199c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80018a0:	f7ff fcbc 	bl	800121c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin, &htim2, TIM_CHANNEL_2);
 80018a4:	2304      	movs	r3, #4
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80018aa:	2208      	movs	r2, #8
 80018ac:	493a      	ldr	r1, [pc, #232]	; (8001998 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80018ae:	483d      	ldr	r0, [pc, #244]	; (80019a4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80018b0:	f7ff fcd1 	bl	8001256 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>
Pin AMT22_1(GPIOC, GPIO_PIN_7);
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	493c      	ldr	r1, [pc, #240]	; (80019a8 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80018b8:	483c      	ldr	r0, [pc, #240]	; (80019ac <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80018ba:	f7ff fcaf 	bl	800121c <_ZN3PinC1EP12GPIO_TypeDeft>
RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.99f);
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fc90 	bl	80011e8 <_ZN3PinC1Ev>
 80018c8:	4c36      	ldr	r4, [pc, #216]	; (80019a4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80018ca:	ad0b      	add	r5, sp, #44	; 0x2c
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018d6:	2300      	movs	r3, #0
 80018d8:	930a      	str	r3, [sp, #40]	; 0x28
 80018da:	4b34      	ldr	r3, [pc, #208]	; (80019ac <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80018dc:	ad06      	add	r5, sp, #24
 80018de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80018e6:	ad02      	add	r5, sp, #8
 80018e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018ee:	466a      	mov	r2, sp
 80018f0:	f104 0308 	add.w	r3, r4, #8
 80018f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018f8:	e882 0003 	stmia.w	r2, {r0, r1}
 80018fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001900:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001988 <_Z41__static_initialization_and_destruction_0ii+0x108>
 8001904:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8001990 <_Z41__static_initialization_and_destruction_0ii+0x110>
 8001908:	4929      	ldr	r1, [pc, #164]	; (80019b0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800190a:	482a      	ldr	r0, [pc, #168]	; (80019b4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 800190c:	f000 fd6b 	bl	80023e6 <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>
Pin dummy_pin;
 8001910:	4829      	ldr	r0, [pc, #164]	; (80019b8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8001912:	f7ff fc69 	bl	80011e8 <_ZN3PinC1Ev>
Pin SERVO_PWM_1(SERVO_PWM_1_GPIO_Port, SERVO_PWM_1_Pin, &htim1, TIM_CHANNEL_2);
 8001916:	2304      	movs	r3, #4
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	4b28      	ldr	r3, [pc, #160]	; (80019bc <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800191c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001920:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001924:	4826      	ldr	r0, [pc, #152]	; (80019c0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8001926:	f7ff fc96 	bl	8001256 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>
RoverArmMotor Waist(&hspi1, SERVO_PWM_1, dummy_pin, AMT22_1, BLUE_ROBOTICS, 0, 359.99f);
 800192a:	f107 0318 	add.w	r3, r7, #24
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fc5a 	bl	80011e8 <_ZN3PinC1Ev>
 8001934:	4c22      	ldr	r4, [pc, #136]	; (80019c0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8001936:	ad0b      	add	r5, sp, #44	; 0x2c
 8001938:	f107 0318 	add.w	r3, r7, #24
 800193c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800193e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001942:	2301      	movs	r3, #1
 8001944:	930a      	str	r3, [sp, #40]	; 0x28
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8001948:	ad06      	add	r5, sp, #24
 800194a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800194c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8001952:	ad02      	add	r5, sp, #8
 8001954:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001956:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800195a:	466a      	mov	r2, sp
 800195c:	f104 0308 	add.w	r3, r4, #8
 8001960:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001964:	e882 0003 	stmia.w	r2, {r0, r1}
 8001968:	e894 000c 	ldmia.w	r4, {r2, r3}
 800196c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8001988 <_Z41__static_initialization_and_destruction_0ii+0x108>
 8001970:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001990 <_Z41__static_initialization_and_destruction_0ii+0x110>
 8001974:	490e      	ldr	r1, [pc, #56]	; (80019b0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8001976:	4813      	ldr	r0, [pc, #76]	; (80019c4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8001978:	f000 fd35 	bl	80023e6 <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>
}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	; 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bdb0      	pop	{r4, r5, r7, pc}
 8001984:	f3af 8000 	nop.w
 8001988:	00000000 	.word	0x00000000
 800198c:	40767fd7 	.word	0x40767fd7
	...
 8001998:	48000400 	.word	0x48000400
 800199c:	20000230 	.word	0x20000230
 80019a0:	200006d8 	.word	0x200006d8
 80019a4:	20000240 	.word	0x20000240
 80019a8:	48000800 	.word	0x48000800
 80019ac:	20000250 	.word	0x20000250
 80019b0:	200005c0 	.word	0x200005c0
 80019b4:	20000260 	.word	0x20000260
 80019b8:	200003d4 	.word	0x200003d4
 80019bc:	2000068c 	.word	0x2000068c
 80019c0:	200003e4 	.word	0x200003e4
 80019c4:	200003f8 	.word	0x200003f8

080019c8 <_GLOBAL__sub_I_aggKp>:
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff ff55 	bl	8001880 <_Z41__static_initialization_and_destruction_0ii>
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <MX_SPI1_Init+0x74>)
 80019de:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <MX_SPI1_Init+0x78>)
 80019e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_SPI1_Init+0x74>)
 80019e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <MX_SPI1_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f0:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <MX_SPI1_Init+0x74>)
 80019f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_SPI1_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_SPI1_Init+0x74>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_SPI1_Init+0x74>)
 8001a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <MX_SPI1_Init+0x74>)
 8001a0e:	2228      	movs	r2, #40	; 0x28
 8001a10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_SPI1_Init+0x74>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_SPI1_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_SPI1_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_SPI1_Init+0x74>)
 8001a26:	2207      	movs	r2, #7
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_SPI1_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_SPI1_Init+0x74>)
 8001a32:	2208      	movs	r2, #8
 8001a34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_SPI1_Init+0x74>)
 8001a38:	f003 fd3e 	bl	80054b8 <HAL_SPI_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a42:	f7ff ff15 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200005c0 	.word	0x200005c0
 8001a50:	40013000 	.word	0x40013000

08001a54 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001a5a:	4a1c      	ldr	r2, [pc, #112]	; (8001acc <MX_SPI3_Init+0x78>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001a6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a72:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a86:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001aae:	2208      	movs	r2, #8
 8001ab0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_SPI3_Init+0x74>)
 8001ab4:	f003 fd00 	bl	80054b8 <HAL_SPI_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001abe:	f7ff fed7 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000624 	.word	0x20000624
 8001acc:	40003c00 	.word	0x40003c00

08001ad0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08c      	sub	sp, #48	; 0x30
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a2f      	ldr	r2, [pc, #188]	; (8001bac <HAL_SPI_MspInit+0xdc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d12a      	bne.n	8001b48 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001af2:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <HAL_SPI_MspInit+0xe0>)
 8001af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af6:	4a2e      	ldr	r2, [pc, #184]	; (8001bb0 <HAL_SPI_MspInit+0xe0>)
 8001af8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001afc:	6613      	str	r3, [r2, #96]	; 0x60
 8001afe:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <HAL_SPI_MspInit+0xe0>)
 8001b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <HAL_SPI_MspInit+0xe0>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	4a28      	ldr	r2, [pc, #160]	; (8001bb0 <HAL_SPI_MspInit+0xe0>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <HAL_SPI_MspInit+0xe0>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001b22:	f641 0302 	movw	r3, #6146	; 0x1802
 8001b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b34:	2305      	movs	r3, #5
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b42:	f002 f937 	bl	8003db4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001b46:	e02d      	b.n	8001ba4 <HAL_SPI_MspInit+0xd4>
  else if(spiHandle->Instance==SPI3)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_SPI_MspInit+0xe4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d128      	bne.n	8001ba4 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <HAL_SPI_MspInit+0xe0>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <HAL_SPI_MspInit+0xe0>)
 8001b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_SPI_MspInit+0xe0>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_SPI_MspInit+0xe0>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_SPI_MspInit+0xe0>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_SPI_MspInit+0xe0>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b82:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b94:	2306      	movs	r3, #6
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <HAL_SPI_MspInit+0xe8>)
 8001ba0:	f002 f908 	bl	8003db4 <HAL_GPIO_Init>
}
 8001ba4:	bf00      	nop
 8001ba6:	3730      	adds	r7, #48	; 0x30
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40013000 	.word	0x40013000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40003c00 	.word	0x40003c00
 8001bb8:	48000800 	.word	0x48000800

08001bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_MspInit+0x44>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc6:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <HAL_MspInit+0x44>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <HAL_MspInit+0x44>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_MspInit+0x44>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bde:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <HAL_MspInit+0x44>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6593      	str	r3, [r2, #88]	; 0x58
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_MspInit+0x44>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000

08001c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <NMI_Handler+0x4>

08001c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <HardFault_Handler+0x4>

08001c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <MemManage_Handler+0x4>

08001c16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <BusFault_Handler+0x4>

08001c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <UsageFault_Handler+0x4>

08001c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c50:	f001 fd74 	bl	800373c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <DMA1_Channel6_IRQHandler+0x10>)
 8001c5e:	f001 fffa 	bl	8003c56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200007a8 	.word	0x200007a8

08001c6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <USART2_IRQHandler+0x10>)
 8001c72:	f005 f9b5 	bl	8006fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000724 	.word	0x20000724

08001c80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c88:	f002 fa26 	bl	80040d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return 1;
 8001c94:	2301      	movs	r3, #1
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_kill>:

int _kill(int pid, int sig)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001caa:	f006 fda7 	bl	80087fc <__errno>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2216      	movs	r2, #22
 8001cb2:	601a      	str	r2, [r3, #0]
  return -1;
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_exit>:

void _exit (int status)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ffe7 	bl	8001ca0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cd2:	e7fe      	b.n	8001cd2 <_exit+0x12>

08001cd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	e00a      	b.n	8001cfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ce6:	f3af 8000 	nop.w
 8001cea:	4601      	mov	r1, r0
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	60ba      	str	r2, [r7, #8]
 8001cf2:	b2ca      	uxtb	r2, r1
 8001cf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dbf0      	blt.n	8001ce6 <_read+0x12>
  }

  return len;
 8001d04:	687b      	ldr	r3, [r7, #4]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e009      	b.n	8001d34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	60ba      	str	r2, [r7, #8]
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3301      	adds	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	dbf1      	blt.n	8001d20 <_write+0x12>
  }
  return len;
 8001d3c:	687b      	ldr	r3, [r7, #4]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_close>:

int _close(int file)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_isatty>:

int _isatty(int file)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db8:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <_sbrk+0x5c>)
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <_sbrk+0x60>)
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <_sbrk+0x64>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <_sbrk+0x68>)
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d207      	bcs.n	8001df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de0:	f006 fd0c 	bl	80087fc <__errno>
 8001de4:	4603      	mov	r3, r0
 8001de6:	220c      	movs	r2, #12
 8001de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	e009      	b.n	8001e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <_sbrk+0x64>)
 8001e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e02:	68fb      	ldr	r3, [r7, #12]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20010000 	.word	0x20010000
 8001e10:	00000400 	.word	0x00000400
 8001e14:	20000688 	.word	0x20000688
 8001e18:	20000808 	.word	0x20000808

08001e1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <SystemInit+0x20>)
 8001e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e26:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <SystemInit+0x20>)
 8001e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b09a      	sub	sp, #104	; 0x68
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
 8001e70:	615a      	str	r2, [r3, #20]
 8001e72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	222c      	movs	r2, #44	; 0x2c
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f006 fcf0 	bl	8008860 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <MX_TIM1_Init+0x150>)
 8001e82:	4a44      	ldr	r2, [pc, #272]	; (8001f94 <MX_TIM1_Init+0x154>)
 8001e84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001e86:	4b42      	ldr	r3, [pc, #264]	; (8001f90 <MX_TIM1_Init+0x150>)
 8001e88:	224f      	movs	r2, #79	; 0x4f
 8001e8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8c:	4b40      	ldr	r3, [pc, #256]	; (8001f90 <MX_TIM1_Init+0x150>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500-1;
 8001e92:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <MX_TIM1_Init+0x150>)
 8001e94:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001e98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <MX_TIM1_Init+0x150>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ea0:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <MX_TIM1_Init+0x150>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <MX_TIM1_Init+0x150>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001eac:	4838      	ldr	r0, [pc, #224]	; (8001f90 <MX_TIM1_Init+0x150>)
 8001eae:	f003 ff1d 	bl	8005cec <HAL_TIM_Base_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001eb8:	f7ff fcda 	bl	8001870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ec2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4831      	ldr	r0, [pc, #196]	; (8001f90 <MX_TIM1_Init+0x150>)
 8001eca:	f004 fa07 	bl	80062dc <HAL_TIM_ConfigClockSource>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ed4:	f7ff fccc 	bl	8001870 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ed8:	482d      	ldr	r0, [pc, #180]	; (8001f90 <MX_TIM1_Init+0x150>)
 8001eda:	f003 ffab 	bl	8005e34 <HAL_TIM_PWM_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001ee4:	f7ff fcc4 	bl	8001870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4825      	ldr	r0, [pc, #148]	; (8001f90 <MX_TIM1_Init+0x150>)
 8001efc:	f004 fe5a 	bl	8006bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001f06:	f7ff fcb3 	bl	8001870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0a:	2360      	movs	r3, #96	; 0x60
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f12:	2300      	movs	r3, #0
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f16:	2300      	movs	r3, #0
 8001f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4818      	ldr	r0, [pc, #96]	; (8001f90 <MX_TIM1_Init+0x150>)
 8001f30:	f004 f8c0 	bl	80060b4 <HAL_TIM_PWM_ConfigChannel>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001f3a:	f7ff fc99 	bl	8001870 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	4807      	ldr	r0, [pc, #28]	; (8001f90 <MX_TIM1_Init+0x150>)
 8001f74:	f004 fe84 	bl	8006c80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001f7e:	f7ff fc77 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f82:	4803      	ldr	r0, [pc, #12]	; (8001f90 <MX_TIM1_Init+0x150>)
 8001f84:	f000 f8d4 	bl	8002130 <HAL_TIM_MspPostInit>

}
 8001f88:	bf00      	nop
 8001f8a:	3768      	adds	r7, #104	; 0x68
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000068c 	.word	0x2000068c
 8001f94:	40012c00 	.word	0x40012c00

08001f98 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb8:	463b      	mov	r3, r7
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
 8001fc4:	611a      	str	r2, [r3, #16]
 8001fc6:	615a      	str	r2, [r3, #20]
 8001fc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fca:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <MX_TIM2_Init+0xe8>)
 8001fcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <MX_TIM2_Init+0xe8>)
 8001fd4:	224f      	movs	r2, #79	; 0x4f
 8001fd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd8:	4b29      	ldr	r3, [pc, #164]	; (8002080 <MX_TIM2_Init+0xe8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001fde:	4b28      	ldr	r3, [pc, #160]	; (8002080 <MX_TIM2_Init+0xe8>)
 8001fe0:	2263      	movs	r2, #99	; 0x63
 8001fe2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe4:	4b26      	ldr	r3, [pc, #152]	; (8002080 <MX_TIM2_Init+0xe8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <MX_TIM2_Init+0xe8>)
 8001fec:	2280      	movs	r2, #128	; 0x80
 8001fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ff0:	4823      	ldr	r0, [pc, #140]	; (8002080 <MX_TIM2_Init+0xe8>)
 8001ff2:	f003 fe7b 	bl	8005cec <HAL_TIM_Base_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001ffc:	f7ff fc38 	bl	8001870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800200a:	4619      	mov	r1, r3
 800200c:	481c      	ldr	r0, [pc, #112]	; (8002080 <MX_TIM2_Init+0xe8>)
 800200e:	f004 f965 	bl	80062dc <HAL_TIM_ConfigClockSource>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002018:	f7ff fc2a 	bl	8001870 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800201c:	4818      	ldr	r0, [pc, #96]	; (8002080 <MX_TIM2_Init+0xe8>)
 800201e:	f003 ff09 	bl	8005e34 <HAL_TIM_PWM_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002028:	f7ff fc22 	bl	8001870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4811      	ldr	r0, [pc, #68]	; (8002080 <MX_TIM2_Init+0xe8>)
 800203c:	f004 fdba 	bl	8006bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002046:	f7ff fc13 	bl	8001870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800204a:	2360      	movs	r3, #96	; 0x60
 800204c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800205a:	463b      	mov	r3, r7
 800205c:	2204      	movs	r2, #4
 800205e:	4619      	mov	r1, r3
 8002060:	4807      	ldr	r0, [pc, #28]	; (8002080 <MX_TIM2_Init+0xe8>)
 8002062:	f004 f827 	bl	80060b4 <HAL_TIM_PWM_ConfigChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800206c:	f7ff fc00 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002070:	4803      	ldr	r0, [pc, #12]	; (8002080 <MX_TIM2_Init+0xe8>)
 8002072:	f000 f85d 	bl	8002130 <HAL_TIM_MspPostInit>

}
 8002076:	bf00      	nop
 8002078:	3738      	adds	r7, #56	; 0x38
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200006d8 	.word	0x200006d8

08002084 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a20      	ldr	r2, [pc, #128]	; (8002124 <HAL_TIM_Base_MspInit+0xa0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d10c      	bne.n	80020c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_TIM_Base_MspInit+0xa4>)
 80020a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020aa:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <HAL_TIM_Base_MspInit+0xa4>)
 80020ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020b0:	6613      	str	r3, [r2, #96]	; 0x60
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_TIM_Base_MspInit+0xa4>)
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020be:	e02d      	b.n	800211c <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c8:	d128      	bne.n	800211c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_TIM_Base_MspInit+0xa4>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	4a16      	ldr	r2, [pc, #88]	; (8002128 <HAL_TIM_Base_MspInit+0xa4>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6593      	str	r3, [r2, #88]	; 0x58
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <HAL_TIM_Base_MspInit+0xa4>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_TIM_Base_MspInit+0xa4>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	4a10      	ldr	r2, [pc, #64]	; (8002128 <HAL_TIM_Base_MspInit+0xa4>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_TIM_Base_MspInit+0xa4>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800210c:	2301      	movs	r3, #1
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4619      	mov	r1, r3
 8002116:	4805      	ldr	r0, [pc, #20]	; (800212c <HAL_TIM_Base_MspInit+0xa8>)
 8002118:	f001 fe4c 	bl	8003db4 <HAL_GPIO_Init>
}
 800211c:	bf00      	nop
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40012c00 	.word	0x40012c00
 8002128:	40021000 	.word	0x40021000
 800212c:	48000400 	.word	0x48000400

08002130 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a23      	ldr	r2, [pc, #140]	; (80021dc <HAL_TIM_MspPostInit+0xac>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d11e      	bne.n	8002190 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <HAL_TIM_MspPostInit+0xb0>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4a22      	ldr	r2, [pc, #136]	; (80021e0 <HAL_TIM_MspPostInit+0xb0>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_TIM_MspPostInit+0xb0>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 800216a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800216e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800217c:	2301      	movs	r3, #1
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218a:	f001 fe13 	bl	8003db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800218e:	e020      	b.n	80021d2 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002198:	d11b      	bne.n	80021d2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_TIM_MspPostInit+0xb0>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	4a10      	ldr	r2, [pc, #64]	; (80021e0 <HAL_TIM_MspPostInit+0xb0>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_TIM_MspPostInit+0xb0>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 80021b2:	2308      	movs	r3, #8
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021c2:	2301      	movs	r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4805      	ldr	r0, [pc, #20]	; (80021e4 <HAL_TIM_MspPostInit+0xb4>)
 80021ce:	f001 fdf1 	bl	8003db4 <HAL_GPIO_Init>
}
 80021d2:	bf00      	nop
 80021d4:	3728      	adds	r7, #40	; 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40012c00 	.word	0x40012c00
 80021e0:	40021000 	.word	0x40021000
 80021e4:	48000400 	.word	0x48000400

080021e8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <MX_USART2_UART_Init+0x58>)
 80021ee:	4a15      	ldr	r2, [pc, #84]	; (8002244 <MX_USART2_UART_Init+0x5c>)
 80021f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <MX_USART2_UART_Init+0x58>)
 80021f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_USART2_UART_Init+0x58>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <MX_USART2_UART_Init+0x58>)
 8002202:	2200      	movs	r2, #0
 8002204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <MX_USART2_UART_Init+0x58>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_USART2_UART_Init+0x58>)
 800220e:	220c      	movs	r2, #12
 8002210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <MX_USART2_UART_Init+0x58>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_USART2_UART_Init+0x58>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <MX_USART2_UART_Init+0x58>)
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_USART2_UART_Init+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800222a:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_USART2_UART_Init+0x58>)
 800222c:	f004 fda0 	bl	8006d70 <HAL_UART_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002236:	f7ff fb1b 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000724 	.word	0x20000724
 8002244:	40004400 	.word	0x40004400

08002248 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b0a2      	sub	sp, #136	; 0x88
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	2260      	movs	r2, #96	; 0x60
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f006 faf9 	bl	8008860 <memset>
  if(uartHandle->Instance==USART2)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a38      	ldr	r2, [pc, #224]	; (8002354 <HAL_UART_MspInit+0x10c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d169      	bne.n	800234c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002278:	2302      	movs	r3, #2
 800227a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800227c:	2300      	movs	r3, #0
 800227e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4618      	mov	r0, r3
 8002286:	f002 fddb 	bl	8004e40 <HAL_RCCEx_PeriphCLKConfig>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002290:	f7ff faee 	bl	8001870 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002294:	4b30      	ldr	r3, [pc, #192]	; (8002358 <HAL_UART_MspInit+0x110>)
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	4a2f      	ldr	r2, [pc, #188]	; (8002358 <HAL_UART_MspInit+0x110>)
 800229a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229e:	6593      	str	r3, [r2, #88]	; 0x58
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_UART_MspInit+0x110>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_UART_MspInit+0x110>)
 80022ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b0:	4a29      	ldr	r2, [pc, #164]	; (8002358 <HAL_UART_MspInit+0x110>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b8:	4b27      	ldr	r3, [pc, #156]	; (8002358 <HAL_UART_MspInit+0x110>)
 80022ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022c4:	230c      	movs	r3, #12
 80022c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d0:	2303      	movs	r3, #3
 80022d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022d6:	2307      	movs	r3, #7
 80022d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022e0:	4619      	mov	r1, r3
 80022e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e6:	f001 fd65 	bl	8003db4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80022ea:	4b1c      	ldr	r3, [pc, #112]	; (800235c <HAL_UART_MspInit+0x114>)
 80022ec:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <HAL_UART_MspInit+0x118>)
 80022ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <HAL_UART_MspInit+0x114>)
 80022f2:	2202      	movs	r2, #2
 80022f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_UART_MspInit+0x114>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_UART_MspInit+0x114>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <HAL_UART_MspInit+0x114>)
 8002304:	2280      	movs	r2, #128	; 0x80
 8002306:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <HAL_UART_MspInit+0x114>)
 800230a:	2200      	movs	r2, #0
 800230c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800230e:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_UART_MspInit+0x114>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_UART_MspInit+0x114>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <HAL_UART_MspInit+0x114>)
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002320:	480e      	ldr	r0, [pc, #56]	; (800235c <HAL_UART_MspInit+0x114>)
 8002322:	f001 fb61 	bl	80039e8 <HAL_DMA_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800232c:	f7ff faa0 	bl	8001870 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <HAL_UART_MspInit+0x114>)
 8002334:	671a      	str	r2, [r3, #112]	; 0x70
 8002336:	4a09      	ldr	r2, [pc, #36]	; (800235c <HAL_UART_MspInit+0x114>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800233c:	2200      	movs	r2, #0
 800233e:	2100      	movs	r1, #0
 8002340:	2026      	movs	r0, #38	; 0x26
 8002342:	f001 fb1a 	bl	800397a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002346:	2026      	movs	r0, #38	; 0x26
 8002348:	f001 fb33 	bl	80039b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800234c:	bf00      	nop
 800234e:	3788      	adds	r7, #136	; 0x88
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40004400 	.word	0x40004400
 8002358:	40021000 	.word	0x40021000
 800235c:	200007a8 	.word	0x200007a8
 8002360:	4002006c 	.word	0x4002006c

08002364 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800239c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002368:	f7ff fd58 	bl	8001e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800236e:	490d      	ldr	r1, [pc, #52]	; (80023a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002370:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <LoopForever+0xe>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002374:	e002      	b.n	800237c <LoopCopyDataInit>

08002376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237a:	3304      	adds	r3, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002380:	d3f9      	bcc.n	8002376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002384:	4c0a      	ldr	r4, [pc, #40]	; (80023b0 <LoopForever+0x16>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002388:	e001      	b.n	800238e <LoopFillZerobss>

0800238a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800238c:	3204      	adds	r2, #4

0800238e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002390:	d3fb      	bcc.n	800238a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002392:	f006 fa39 	bl	8008808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002396:	f7ff f80b 	bl	80013b0 <main>

0800239a <LoopForever>:

LoopForever:
    b LoopForever
 800239a:	e7fe      	b.n	800239a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800239c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a4:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80023a8:	0800ec50 	.word	0x0800ec50
  ldr r2, =_sbss
 80023ac:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80023b0:	20000808 	.word	0x20000808

080023b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023b4:	e7fe      	b.n	80023b4 <ADC1_IRQHandler>

080023b6 <_ZN9movingAvgC1Ei>:
#define MOVINGAVG_H_INCLUDED

class movingAvg
{
    public:
        movingAvg(int interval)
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
            : m_interval{interval}, m_nbrReadings{0}, m_sum{0}, m_next{0} {}
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>:
 * @param  minimum_angle: minimum angle of the motor
 * @param  maximum_angle: maximum angle of the motor
 * @param  brake_pin: pin for the brake or limit switch
 * @retval None
 */
RoverArmMotor::RoverArmMotor(SPI_HandleTypeDef* spi_handle, Pin pwm_pin, Pin dir_pin, Pin encoder_pin, int esc_type, double minimum_angle, double maximum_angle, Pin brake_pin)
 80023e6:	b082      	sub	sp, #8
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	6178      	str	r0, [r7, #20]
 80023f0:	6139      	str	r1, [r7, #16]
 80023f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80023f6:	e881 000c 	stmia.w	r1, {r2, r3}
 80023fa:	ed87 0b02 	vstr	d0, [r7, #8]
 80023fe:	ed87 1b00 	vstr	d1, [r7]
                :internalPIDInstance(&input, &output, &setpoint, regularKp, regularKi, regularKd, _PID_CD_DIRECT)
                ,internalAveragerInstance(15){
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8002428:	2300      	movs	r3, #0
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	eeb0 2a45 	vmov.f32	s4, s10
 8002430:	eef0 2a65 	vmov.f32	s5, s11
 8002434:	eeb0 1a46 	vmov.f32	s2, s12
 8002438:	eef0 1a66 	vmov.f32	s3, s13
 800243c:	eeb0 0a47 	vmov.f32	s0, s14
 8002440:	eef0 0a67 	vmov.f32	s1, s15
 8002444:	4623      	mov	r3, r4
 8002446:	f000 fe47 	bl	80030d8 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3370      	adds	r3, #112	; 0x70
 800244e:	210f      	movs	r1, #15
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ffb0 	bl	80023b6 <_ZN9movingAvgC1Ei>
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	33b8      	adds	r3, #184	; 0xb8
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fec4 	bl	80011e8 <_ZN3PinC1Ev>
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	33c8      	adds	r3, #200	; 0xc8
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe febf 	bl	80011e8 <_ZN3PinC1Ev>
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	33d8      	adds	r3, #216	; 0xd8
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe feba 	bl	80011e8 <_ZN3PinC1Ev>
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	33e8      	adds	r3, #232	; 0xe8
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe feb5 	bl	80011e8 <_ZN3PinC1Ev>

    //constructor
    spi = spi_handle;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    pwm = pwm_pin;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800248c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002490:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002492:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    dir = dir_pin;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 800249c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    encoder = encoder_pin;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80024ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    brake = brake_pin;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 80024bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    escType = esc_type;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024ca:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    lowestAngle = minimum_angle;
 80024ce:	6979      	ldr	r1, [r7, #20]
 80024d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024d4:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = maximum_angle;
 80024d8:	6979      	ldr	r1, [r7, #20]
 80024da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024de:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108

    //clean up variables
    input = 0;
 80024e2:	6979      	ldr	r1, [r7, #20]
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
    output = 0;
 80024f0:	6979      	ldr	r1, [r7, #20]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
    lastAngle = 0;
 80024fe:	6979      	ldr	r1, [r7, #20]
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    useSwAngle = 1;  //default use software angle
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	2201      	movs	r2, #1
 8002510:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    zero_angle_sw = 0;  // default no offset
 8002514:	6979      	ldr	r1, [r7, #20]
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
    
}
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	4618      	mov	r0, r3
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800252e:	b002      	add	sp, #8
 8002530:	4770      	bx	lr
 8002532:	0000      	movs	r0, r0
 8002534:	0000      	movs	r0, r0
	...

08002538 <_ZN13RoverArmMotor5beginEdddddd>:

void RoverArmMotor::begin(double aggP, double aggI, double aggD, double regP, double regI, double regD){
 8002538:	b580      	push	{r7, lr}
 800253a:	b08e      	sub	sp, #56	; 0x38
 800253c:	af00      	add	r7, sp, #0
 800253e:	6378      	str	r0, [r7, #52]	; 0x34
 8002540:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8002544:	ed87 1b08 	vstr	d1, [r7, #32]
 8002548:	ed87 2b06 	vstr	d2, [r7, #24]
 800254c:	ed87 3b04 	vstr	d3, [r7, #16]
 8002550:	ed87 4b02 	vstr	d4, [r7, #8]
 8002554:	ed87 5b00 	vstr	d5, [r7]


    /*------------------Initialize timers------------------*/ 
    HAL_TIM_PWM_Start(pwm.p_tim, pwm.tim_channel);
 8002558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800255e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002560:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f003 fcc6 	bl	8005ef8 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(pwm.p_tim, pwm.tim_channel, 0); // stop motor
 800256c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <_ZN13RoverArmMotor5beginEdddddd+0x4c>
 8002576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002578:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2200      	movs	r2, #0
 8002580:	635a      	str	r2, [r3, #52]	; 0x34
 8002582:	e035      	b.n	80025f0 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 8002584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002586:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800258a:	2b04      	cmp	r3, #4
 800258c:	d106      	bne.n	800259c <_ZN13RoverArmMotor5beginEdddddd+0x64>
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2200      	movs	r2, #0
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
 800259a:	e029      	b.n	80025f0 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 800259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d106      	bne.n	80025b4 <_ZN13RoverArmMotor5beginEdddddd+0x7c>
 80025a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2200      	movs	r2, #0
 80025b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80025b2:	e01d      	b.n	80025f0 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 80025b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	d106      	bne.n	80025cc <_ZN13RoverArmMotor5beginEdddddd+0x94>
 80025be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
 80025ca:	e011      	b.n	80025f0 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 80025cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d106      	bne.n	80025e4 <_ZN13RoverArmMotor5beginEdddddd+0xac>
 80025d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2200      	movs	r2, #0
 80025e0:	659a      	str	r2, [r3, #88]	; 0x58
 80025e2:	e005      	b.n	80025f0 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 80025e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	65da      	str	r2, [r3, #92]	; 0x5c


    /*------------------set PID parameters------------------*/
    if(escType == CYTRON){
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d108      	bne.n	800260c <_ZN13RoverArmMotor5beginEdddddd+0xd4>
        internalPIDInstance.SetOutputLimits(-99, 99); // PWM duty cycle mn297 TOOD: check this
 80025fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fc:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8002700 <_ZN13RoverArmMotor5beginEdddddd+0x1c8>
 8002600:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8002708 <_ZN13RoverArmMotor5beginEdddddd+0x1d0>
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fecc 	bl	80033a2 <_ZN3PID15SetOutputLimitsEdd>
 800260a:	e00c      	b.n	8002626 <_ZN13RoverArmMotor5beginEdddddd+0xee>
    }
    else if(escType == BLUE_ROBOTICS){
 800260c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002612:	2b01      	cmp	r3, #1
 8002614:	d107      	bne.n	8002626 <_ZN13RoverArmMotor5beginEdddddd+0xee>
        internalPIDInstance.SetOutputLimits(-100, 100); // 1500 +- 400 for BlueRobotics ESC
 8002616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002618:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8002710 <_ZN13RoverArmMotor5beginEdddddd+0x1d8>
 800261c:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8002718 <_ZN13RoverArmMotor5beginEdddddd+0x1e0>
 8002620:	4618      	mov	r0, r3
 8002622:	f000 febe 	bl	80033a2 <_ZN3PID15SetOutputLimitsEdd>
    }
    
    /*------------------Initialize moving average------------------*/
    internalAveragerInstance.begin();
 8002626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002628:	3370      	adds	r3, #112	; 0x70
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fced 	bl	800300a <_ZN9movingAvg5beginEv>

    /*------------------Initialize PID------------------*/
    internalPIDInstance.Init();
 8002630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fd73 	bl	800311e <_ZN3PID4InitEv>
    internalPIDInstance.SetMode(_PID_MODE_AUTOMATIC);
 8002638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263a:	2101      	movs	r1, #1
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fe92 	bl	8003366 <_ZN3PID7SetModeE15PIDMode_TypeDef>
    /*------------------Get setpoint------------------*/
    // Get current location and set it as setpoint. Essential to prevent jerkiness
    // as the microcontroller initializes.
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    //after setup, currentAngle is same as setpoint
    currentAngle = get_current_angle();    // fix setpoint not equal to current angle
 8002642:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002644:	f000 fbca 	bl	8002ddc <_ZN13RoverArmMotor17get_current_angleEv>
 8002648:	eeb0 7a40 	vmov.f32	s14, s0
 800264c:	eef0 7a60 	vmov.f32	s15, s1
 8002650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002652:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    setpoint = currentAngle;
 8002656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002658:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 800265c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800265e:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140



    /*------------------Set PID parameters------------------*/
    regularKp = regP;
 8002662:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002664:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002668:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    regularKi = regI;
 800266c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800266e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002672:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    regularKd = regD;
 8002676:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800267c:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    aggressiveKp = aggP;
 8002680:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002682:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002686:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    aggressiveKi = aggI;
 800268a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800268c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002690:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    aggressiveKd = aggD;
 8002694:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002696:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269a:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

    internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 800269e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a2:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80026a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a8:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 80026ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ae:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 80026b2:	eeb0 2a45 	vmov.f32	s4, s10
 80026b6:	eef0 2a65 	vmov.f32	s5, s11
 80026ba:	eeb0 1a46 	vmov.f32	s2, s12
 80026be:	eef0 1a66 	vmov.f32	s3, s13
 80026c2:	eeb0 0a47 	vmov.f32	s0, s14
 80026c6:	eef0 0a67 	vmov.f32	s1, s15
 80026ca:	4610      	mov	r0, r2
 80026cc:	f000 fed7 	bl	800347e <_ZN3PID10SetTuningsEddd>
    // if(brake)  engageBrake(); //use brake if there is one
    if (brake.valid != 0)  engageBrake(); //use brake if there is one
 80026d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d2:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <_ZN13RoverArmMotor5beginEdddddd+0x1a8>
 80026da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026dc:	f000 fb67 	bl	8002dae <_ZN13RoverArmMotor11engageBrakeEv>

    //initialize the multiplier bool to false and the multiplier to 1. 
    wrist_waist = false; 
 80026e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    //multiplier = 1;
    gearRatio = 1;  //TODO check if this is correct
 80026e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <_ZN13RoverArmMotor5beginEdddddd+0x1e8>)
 80026f0:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150

}
 80026f4:	bf00      	nop
 80026f6:	3738      	adds	r7, #56	; 0x38
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	f3af 8000 	nop.w
 8002700:	00000000 	.word	0x00000000
 8002704:	4058c000 	.word	0x4058c000
 8002708:	00000000 	.word	0x00000000
 800270c:	c058c000 	.word	0xc058c000
 8002710:	00000000 	.word	0x00000000
 8002714:	40590000 	.word	0x40590000
 8002718:	00000000 	.word	0x00000000
 800271c:	c0590000 	.word	0xc0590000
 8002720:	3ff00000 	.word	0x3ff00000
 8002724:	00000000 	.word	0x00000000

08002728 <_ZN13RoverArmMotor4tickEv>:

int positive_rezeros = 0;
double real_angle = 0;

// Needs to be called in each loop
void RoverArmMotor::tick(){ // worry about currentAngle and setpoint
 8002728:	b5b0      	push	{r4, r5, r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

    /*------------------Get current angle------------------*/
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    if (useSwAngle) {
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <_ZN13RoverArmMotor4tickEv+0x28>
        currentAngle = get_current_angle_sw(); 
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fbf0 	bl	8002f20 <_ZN13RoverArmMotor20get_current_angle_swEv>
 8002740:	eeb0 7a40 	vmov.f32	s14, s0
 8002744:	eef0 7a60 	vmov.f32	s15, s1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
 800274e:	e009      	b.n	8002764 <_ZN13RoverArmMotor4tickEv+0x3c>
    }   else {
        currentAngle = get_current_angle(); 
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fb43 	bl	8002ddc <_ZN13RoverArmMotor17get_current_angleEv>
 8002756:	eeb0 7a40 	vmov.f32	s14, s0
 800275a:	eef0 7a60 	vmov.f32	s15, s1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    }

      // Measurement deadband - ignore sub-degree noise
    if(abs(currentAngle - lastAngle) < 1.0){
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 8002770:	f7fd fd9a 	bl	80002a8 <__aeabi_dsub>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	f7fe f9fc 	bl	8000b78 <__aeabi_d2iz>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	bfb8      	it	lt
 8002786:	425b      	neglt	r3, r3
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fedb 	bl	8000544 <__aeabi_i2d>
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	4ba5      	ldr	r3, [pc, #660]	; (8002a28 <_ZN13RoverArmMotor4tickEv+0x300>)
 8002794:	f7fe f9b2 	bl	8000afc <__aeabi_dcmplt>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <_ZN13RoverArmMotor4tickEv+0x82>
        currentAngle = lastAngle;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
    }
    input = currentAngle; // range [0,359]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
   //------------------Compute PID------------------//
    // Compute distance, retune PID if necessary. Less aggressive tuning params for small errors
    // Find the shortest from the current position to the set point
    double gap; //mn297 could be negative

    if(wrist_waist){
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d052      	beq.n	8002866 <_ZN13RoverArmMotor4tickEv+0x13e>
        // if(abs(setpoint-input) < abs((setpoint + 360.0f)-input)) { 
        //     gap = setpoint - input; 
        // } else {
        //     gap = (setpoint + 360.0f) - input; 
        // }
        if(abs(setpoint-input) > abs((setpoint + 360.0f)-input)) { 
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80027cc:	f7fd fd6c 	bl	80002a8 <__aeabi_dsub>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f7fe f9ce 	bl	8000b78 <__aeabi_d2iz>
 80027dc:	4603      	mov	r3, r0
 80027de:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80027e2:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	4b8e      	ldr	r3, [pc, #568]	; (8002a2c <_ZN13RoverArmMotor4tickEv+0x304>)
 80027f2:	f7fd fd5b 	bl	80002ac <__adddf3>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8002804:	f7fd fd50 	bl	80002a8 <__aeabi_dsub>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	f7fe f9b2 	bl	8000b78 <__aeabi_d2iz>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	bfb8      	it	lt
 800281a:	425b      	neglt	r3, r3
 800281c:	429c      	cmp	r4, r3
 800281e:	dd15      	ble.n	800284c <_ZN13RoverArmMotor4tickEv+0x124>
            gap = input - (setpoint + 360.0f); 
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	e9d3 454c 	ldrd	r4, r5, [r3, #304]	; 0x130
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	4b7e      	ldr	r3, [pc, #504]	; (8002a2c <_ZN13RoverArmMotor4tickEv+0x304>)
 8002832:	f7fd fd3b 	bl	80002ac <__adddf3>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4620      	mov	r0, r4
 800283c:	4629      	mov	r1, r5
 800283e:	f7fd fd33 	bl	80002a8 <__aeabi_dsub>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800284a:	e018      	b.n	800287e <_ZN13RoverArmMotor4tickEv+0x156>
        } else {
            gap = setpoint - input; 
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8002858:	f7fd fd26 	bl	80002a8 <__aeabi_dsub>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002864:	e00b      	b.n	800287e <_ZN13RoverArmMotor4tickEv+0x156>
        }
        
    }
    else{
        gap = setpoint - input;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8002872:	f7fd fd19 	bl	80002a8 <__aeabi_dsub>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    // if(input <= lowestAngle || input >= highestAngle){
    //     setpoint = gearRatio * (lowestAngle + highestAngle) / 2 ;
    // }

    // Tone down P and I as the motor hones onto position
    if (abs(gap) < 10){
 800287e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002882:	f7fe f979 	bl	8000b78 <__aeabi_d2iz>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	bfb8      	it	lt
 800288c:	425b      	neglt	r3, r3
 800288e:	2b09      	cmp	r3, #9
 8002890:	dc19      	bgt.n	80028c6 <_ZN13RoverArmMotor4tickEv+0x19e>
        internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 80028a6:	eeb0 2a45 	vmov.f32	s4, s10
 80028aa:	eef0 2a65 	vmov.f32	s5, s11
 80028ae:	eeb0 1a46 	vmov.f32	s2, s12
 80028b2:	eef0 1a66 	vmov.f32	s3, s13
 80028b6:	eeb0 0a47 	vmov.f32	s0, s14
 80028ba:	eef0 0a67 	vmov.f32	s1, s15
 80028be:	4610      	mov	r0, r2
 80028c0:	f000 fddd 	bl	800347e <_ZN3PID10SetTuningsEddd>
 80028c4:	e018      	b.n	80028f8 <_ZN13RoverArmMotor4tickEv+0x1d0>
    }else{  // TODO agressive tuning params
        internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 80028da:	eeb0 2a45 	vmov.f32	s4, s10
 80028de:	eef0 2a65 	vmov.f32	s5, s11
 80028e2:	eeb0 1a46 	vmov.f32	s2, s12
 80028e6:	eef0 1a66 	vmov.f32	s3, s13
 80028ea:	eeb0 0a47 	vmov.f32	s0, s14
 80028ee:	eef0 0a67 	vmov.f32	s1, s15
 80028f2:	4610      	mov	r0, r2
 80028f4:	f000 fdc3 	bl	800347e <_ZN3PID10SetTuningsEddd>
        // internalPIDInstance.SetTunings(aggressiveKp, aggressiveKi, aggressiveKd);
    }
    internalPIDInstance.Compute(); // return value stored in output
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fc49 	bl	8003192 <_ZN3PID7ComputeEv>
    // Make sure we aren't snapping our tendons - move back a little bit if we are
    // if(currentAngle >= (highestAngle - 2) && currentAngle <= (lowestAngle + 2)) output = 0.0;


    //------------------Write to motor------------------//
    if(escType == CYTRON){
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 8092 	bne.w	8002a30 <_ZN13RoverArmMotor4tickEv+0x308>

        // Interpret sign of the error signal as the direction pin value
        // (gap > 0) ? digitalWrite(dir, HIGH) : digitalWrite(dir, LOW); // invert if needed mn297
        if (output > 0) {
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	f7fe f90d 	bl	8000b38 <__aeabi_dcmpgt>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <_ZN13RoverArmMotor4tickEv+0x212>
            HAL_GPIO_WritePin(dir.port, dir.pin, GPIO_PIN_SET); // B high
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002930:	2201      	movs	r2, #1
 8002932:	4619      	mov	r1, r3
 8002934:	f001 fbb8 	bl	80040a8 <HAL_GPIO_WritePin>
 8002938:	e009      	b.n	800294e <_ZN13RoverArmMotor4tickEv+0x226>
        }
        else {
            HAL_GPIO_WritePin(dir.port, dir.pin, GPIO_PIN_RESET); // A high
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002946:	2200      	movs	r2, #0
 8002948:	4619      	mov	r1, r3
 800294a:	f001 fbad 	bl	80040a8 <HAL_GPIO_WritePin>
        }
        // Write to PWM pin
        //TODO port to HAL
        // analogWrite(pwm, abs(output)); //mn297 function execute quickly and jumps to next tick()
        double test_output = abs(output);     //smoothing
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	f7fe f90e 	bl	8000b78 <__aeabi_d2iz>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	bfb8      	it	lt
 8002962:	425b      	neglt	r3, r3
 8002964:	4618      	mov	r0, r3
 8002966:	f7fd fded 	bl	8000544 <__aeabi_i2d>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        __HAL_TIM_SET_COMPARE(pwm.p_tim, pwm.tim_channel, (int) test_output);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <_ZN13RoverArmMotor4tickEv+0x26a>
 800297c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002980:	f7fe f8fa 	bl	8000b78 <__aeabi_d2iz>
 8002984:	4602      	mov	r2, r0
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	635a      	str	r2, [r3, #52]	; 0x34
 8002990:	e139      	b.n	8002c06 <_ZN13RoverArmMotor4tickEv+0x4de>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002998:	2b04      	cmp	r3, #4
 800299a:	d10a      	bne.n	80029b2 <_ZN13RoverArmMotor4tickEv+0x28a>
 800299c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029a0:	f7fe f8ea 	bl	8000b78 <__aeabi_d2iz>
 80029a4:	4602      	mov	r2, r0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	639a      	str	r2, [r3, #56]	; 0x38
 80029b0:	e129      	b.n	8002c06 <_ZN13RoverArmMotor4tickEv+0x4de>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d10a      	bne.n	80029d2 <_ZN13RoverArmMotor4tickEv+0x2aa>
 80029bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029c0:	f7fe f8da 	bl	8000b78 <__aeabi_d2iz>
 80029c4:	4602      	mov	r2, r0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80029d0:	e119      	b.n	8002c06 <_ZN13RoverArmMotor4tickEv+0x4de>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80029d8:	2b0c      	cmp	r3, #12
 80029da:	d10a      	bne.n	80029f2 <_ZN13RoverArmMotor4tickEv+0x2ca>
 80029dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029e0:	f7fe f8ca 	bl	8000b78 <__aeabi_d2iz>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40
 80029f0:	e109      	b.n	8002c06 <_ZN13RoverArmMotor4tickEv+0x4de>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d10a      	bne.n	8002a12 <_ZN13RoverArmMotor4tickEv+0x2ea>
 80029fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a00:	f7fe f8ba 	bl	8000b78 <__aeabi_d2iz>
 8002a04:	4602      	mov	r2, r0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	659a      	str	r2, [r3, #88]	; 0x58
 8002a10:	e0f9      	b.n	8002c06 <_ZN13RoverArmMotor4tickEv+0x4de>
 8002a12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a16:	f7fe f8af 	bl	8000b78 <__aeabi_d2iz>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a26:	e0ee      	b.n	8002c06 <_ZN13RoverArmMotor4tickEv+0x4de>
 8002a28:	3ff00000 	.word	0x3ff00000
 8002a2c:	40768000 	.word	0x40768000

    }

    //TODO: Add support for other ESC types    
    else if(escType == BLUE_ROBOTICS){
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	f040 80e5 	bne.w	8002c06 <_ZN13RoverArmMotor4tickEv+0x4de>
        // This one is more straightforward since we already defined the output range
        // from 1100us to 1900us
        // internalServoInstance.writeMicroseconds(output);
        servo_dir = 1;  //TODO refactor
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        __HAL_TIM_SET_COMPARE(pwm.p_tim, pwm.tim_channel, 1500-1 + servo_dir *output);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d120      	bne.n	8002a90 <_ZN13RoverArmMotor4tickEv+0x368>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fd75 	bl	8000544 <__aeabi_i2d>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8002a60:	f7fd fdda 	bl	8000618 <__aeabi_dmul>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	a36c      	add	r3, pc, #432	; (adr r3, 8002c20 <_ZN13RoverArmMotor4tickEv+0x4f8>)
 8002a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a72:	f7fd fc1b 	bl	80002ac <__adddf3>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a84:	681c      	ldr	r4, [r3, #0]
 8002a86:	f7fe f89f 	bl	8000bc8 <__aeabi_d2uiz>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6363      	str	r3, [r4, #52]	; 0x34
 8002a8e:	e0b7      	b.n	8002c00 <_ZN13RoverArmMotor4tickEv+0x4d8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d120      	bne.n	8002adc <_ZN13RoverArmMotor4tickEv+0x3b4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fd4f 	bl	8000544 <__aeabi_i2d>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8002aac:	f7fd fdb4 	bl	8000618 <__aeabi_dmul>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	a359      	add	r3, pc, #356	; (adr r3, 8002c20 <_ZN13RoverArmMotor4tickEv+0x4f8>)
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	f7fd fbf5 	bl	80002ac <__adddf3>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ad0:	681c      	ldr	r4, [r3, #0]
 8002ad2:	f7fe f879 	bl	8000bc8 <__aeabi_d2uiz>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ada:	e091      	b.n	8002c00 <_ZN13RoverArmMotor4tickEv+0x4d8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d120      	bne.n	8002b28 <_ZN13RoverArmMotor4tickEv+0x400>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd29 	bl	8000544 <__aeabi_i2d>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8002af8:	f7fd fd8e 	bl	8000618 <__aeabi_dmul>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	a346      	add	r3, pc, #280	; (adr r3, 8002c20 <_ZN13RoverArmMotor4tickEv+0x4f8>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	f7fd fbcf 	bl	80002ac <__adddf3>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b1c:	681c      	ldr	r4, [r3, #0]
 8002b1e:	f7fe f853 	bl	8000bc8 <__aeabi_d2uiz>
 8002b22:	4603      	mov	r3, r0
 8002b24:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002b26:	e06b      	b.n	8002c00 <_ZN13RoverArmMotor4tickEv+0x4d8>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	d120      	bne.n	8002b74 <_ZN13RoverArmMotor4tickEv+0x44c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fd03 	bl	8000544 <__aeabi_i2d>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8002b44:	f7fd fd68 	bl	8000618 <__aeabi_dmul>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	a333      	add	r3, pc, #204	; (adr r3, 8002c20 <_ZN13RoverArmMotor4tickEv+0x4f8>)
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f7fd fba9 	bl	80002ac <__adddf3>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b68:	681c      	ldr	r4, [r3, #0]
 8002b6a:	f7fe f82d 	bl	8000bc8 <__aeabi_d2uiz>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	6423      	str	r3, [r4, #64]	; 0x40
 8002b72:	e045      	b.n	8002c00 <_ZN13RoverArmMotor4tickEv+0x4d8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002b7a:	2b10      	cmp	r3, #16
 8002b7c:	d120      	bne.n	8002bc0 <_ZN13RoverArmMotor4tickEv+0x498>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fcdd 	bl	8000544 <__aeabi_i2d>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8002b90:	f7fd fd42 	bl	8000618 <__aeabi_dmul>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	a320      	add	r3, pc, #128	; (adr r3, 8002c20 <_ZN13RoverArmMotor4tickEv+0x4f8>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f7fd fb83 	bl	80002ac <__adddf3>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bb4:	681c      	ldr	r4, [r3, #0]
 8002bb6:	f7fe f807 	bl	8000bc8 <__aeabi_d2uiz>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	65a3      	str	r3, [r4, #88]	; 0x58
 8002bbe:	e01f      	b.n	8002c00 <_ZN13RoverArmMotor4tickEv+0x4d8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fd fcbc 	bl	8000544 <__aeabi_i2d>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8002bd2:	f7fd fd21 	bl	8000618 <__aeabi_dmul>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	a310      	add	r3, pc, #64	; (adr r3, 8002c20 <_ZN13RoverArmMotor4tickEv+0x4f8>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f7fd fb62 	bl	80002ac <__adddf3>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bf6:	681c      	ldr	r4, [r3, #0]
 8002bf8:	f7fd ffe6 	bl	8000bc8 <__aeabi_d2uiz>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	65e3      	str	r3, [r4, #92]	; 0x5c
        HAL_Delay(100);
 8002c00:	2064      	movs	r0, #100	; 0x64
 8002c02:	f000 fdbb 	bl	800377c <HAL_Delay>

    }


    //------------------Update angle------------------//
    lastAngle = currentAngle;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	f3af 8000 	nop.w
 8002c20:	00000000 	.word	0x00000000
 8002c24:	40976c00 	.word	0x40976c00

08002c28 <_ZN13RoverArmMotor14set_PID_paramsEdddddd>:
void RoverArmMotor::stop(){
    __HAL_TIM_SET_COMPARE(pwm.p_tim, pwm.tim_channel, (int) 0);
}
void RoverArmMotor::set_PID_params(double aggP, double aggI, double aggD, double regP, double regI, double regD) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08e      	sub	sp, #56	; 0x38
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6378      	str	r0, [r7, #52]	; 0x34
 8002c30:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8002c34:	ed87 1b08 	vstr	d1, [r7, #32]
 8002c38:	ed87 2b06 	vstr	d2, [r7, #24]
 8002c3c:	ed87 3b04 	vstr	d3, [r7, #16]
 8002c40:	ed87 4b02 	vstr	d4, [r7, #8]
 8002c44:	ed87 5b00 	vstr	d5, [r7]
    regularKp = regP;
 8002c48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c4e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    regularKi = regI;
 8002c52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c58:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    regularKd = regD;
 8002c5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c62:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    aggressiveKp = aggP;
 8002c66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c6c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    aggressiveKi = aggI;
 8002c70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c76:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    aggressiveKd = aggD;
 8002c7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c80:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 8002c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c88:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8002c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8e:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c94:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8002c98:	eeb0 2a45 	vmov.f32	s4, s10
 8002c9c:	eef0 2a65 	vmov.f32	s5, s11
 8002ca0:	eeb0 1a46 	vmov.f32	s2, s12
 8002ca4:	eef0 1a66 	vmov.f32	s3, s13
 8002ca8:	eeb0 0a47 	vmov.f32	s0, s14
 8002cac:	eef0 0a67 	vmov.f32	s1, s15
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f000 fbe4 	bl	800347e <_ZN3PID10SetTuningsEddd>
}
 8002cb6:	bf00      	nop
 8002cb8:	3738      	adds	r7, #56	; 0x38
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <_ZN13RoverArmMotor11newSetpointEd>:
// For display purposes
double RoverArmMotor::getSetpoint(){
    return setpoint / gearRatio;
}

bool RoverArmMotor::newSetpoint(double angl){
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	ed87 0b00 	vstr	d0, [r7]
    double setpoint_test = angl * gearRatio;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8002cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cd4:	f7fd fca0 	bl	8000618 <__aeabi_dmul>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if(setpoint_test >= lowestAngle && setpoint_test <= highestAngle){
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8002ce6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cea:	f7fd ff1b 	bl	8000b24 <__aeabi_dcmpge>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d010      	beq.n	8002d16 <_ZN13RoverArmMotor11newSetpointEd+0x58>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8002cfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cfe:	f7fd ff07 	bl	8000b10 <__aeabi_dcmple>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d006      	beq.n	8002d16 <_ZN13RoverArmMotor11newSetpointEd+0x58>
        setpoint = setpoint_test;
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d0e:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
        return true;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <_ZN13RoverArmMotor11newSetpointEd+0x5a>
    }else{
        return false;
 8002d16:	2300      	movs	r3, #0
    }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_ZN13RoverArmMotor12setGearRatioEd>:
int RoverArmMotor::getDirection(){
    // return (digitalRead(dir) == HIGH) ? FWD : REV;
    return (HAL_GPIO_ReadPin(dir.port, dir.pin) == GPIO_PIN_SET) ? FWD : REV; //mn297, TODO check if this is correct
}

void RoverArmMotor::setGearRatio(double ratio){
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	ed87 0b00 	vstr	d0, [r7]
    gearRatio = ratio;
 8002d2c:	68f9      	ldr	r1, [r7, #12]
 8002d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d32:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
}
 8002d36:	bf00      	nop
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <_ZN13RoverArmMotor14setAngleLimitsEdd>:

void RoverArmMotor::setAngleLimits(double lowest, double highest){
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b086      	sub	sp, #24
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6178      	str	r0, [r7, #20]
 8002d4a:	ed87 0b02 	vstr	d0, [r7, #8]
 8002d4e:	ed87 1b00 	vstr	d1, [r7]
    lowestAngle = lowest * gearRatio;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 8002d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d5c:	f7fd fc5c 	bl	8000618 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	6979      	ldr	r1, [r7, #20]
 8002d66:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = highest * gearRatio;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 8002d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d74:	f7fd fc50 	bl	8000618 <__aeabi_dmul>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	6979      	ldr	r1, [r7, #20]
 8002d7e:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
}
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <_ZN13RoverArmMotor17set_zero_angle_swEv>:
    setZeroSPI(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
}
void RoverArmMotor::reset_encoder(){
    resetAMT22(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
}
void RoverArmMotor::set_zero_angle_sw(){
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
    // zero_angle_sw = this->get_current_angle();
    zero_angle_sw = this->get_current_angle_multi();
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f862 	bl	8002e5c <_ZN13RoverArmMotor23get_current_angle_multiEv>
 8002d98:	eeb0 7a40 	vmov.f32	s14, s0
 8002d9c:	eef0 7a60 	vmov.f32	s15, s1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160

}  //mn297 software zero angle
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <_ZN13RoverArmMotor11engageBrakeEv>:
    //   digitalWrite(brake, LOW);  
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_RESET); //mn297
    }
}

void RoverArmMotor::engageBrake(){
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
    if(brake.valid != 0){
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <_ZN13RoverArmMotor11engageBrakeEv+0x26>
    //    digitalWrite(brake, HIGH); 
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_SET); //mn297
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f001 f96a 	bl	80040a8 <HAL_GPIO_WritePin>
    }
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <_ZN13RoverArmMotor17get_current_angleEv>:
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
    adcResult = internalAveragerInstance.reading(encoderData);  // implicit cast to int
    currentAngle = mapFloat((float) adcResult, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.99f); //mn297 potentiometer encoder
    return currentAngle / gearRatio;
}
double RoverArmMotor::get_current_angle(){    //mn297
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 8002df6:	2300      	movs	r3, #0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	230c      	movs	r3, #12
 8002dfc:	f005 fb11 	bl	8008422 <getPositionSPI>
 8002e00:	4603      	mov	r3, r0
 8002e02:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.99f); //mn297 potentiometer encoder
 8002e04:	89fb      	ldrh	r3, [r7, #14]
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0e:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8002e50 <_ZN13RoverArmMotor17get_current_angleEv+0x74>
 8002e12:	eddf 1a10 	vldr	s3, [pc, #64]	; 8002e54 <_ZN13RoverArmMotor17get_current_angleEv+0x78>
 8002e16:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8002e58 <_ZN13RoverArmMotor17get_current_angleEv+0x7c>
 8002e1a:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002e54 <_ZN13RoverArmMotor17get_current_angleEv+0x78>
 8002e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f89b 	bl	8002f5e <_ZN13RoverArmMotor8mapFloatEfffff>
 8002e28:	eeb0 7a40 	vmov.f32	s14, s0
 8002e2c:	eef0 7a60 	vmov.f32	s15, s1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    return currentAngle;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8002e3c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e40:	eeb0 0a47 	vmov.f32	s0, s14
 8002e44:	eef0 0a67 	vmov.f32	s1, s15
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	43b3feb8 	.word	0x43b3feb8
 8002e54:	00000000 	.word	0x00000000
 8002e58:	457ff000 	.word	0x457ff000

08002e5c <_ZN13RoverArmMotor23get_current_angle_multiEv>:

double RoverArmMotor::get_current_angle_multi(){    //mn297
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b089      	sub	sp, #36	; 0x24
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    int16_t result_arr[2];
    getTurnCounterSPI(result_arr, spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 8002e76:	f107 0008 	add.w	r0, r7, #8
 8002e7a:	2400      	movs	r4, #0
 8002e7c:	9401      	str	r4, [sp, #4]
 8002e7e:	240c      	movs	r4, #12
 8002e80:	9400      	str	r4, [sp, #0]
 8002e82:	f005 fb5e 	bl	8008542 <getTurnCounterSPI>
    double angle_raw = mapFloat((float) result_arr[0], MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.99f); //mn297 potentiometer encoder
 8002e86:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e92:	ed9f 2a20 	vldr	s4, [pc, #128]	; 8002f14 <_ZN13RoverArmMotor23get_current_angle_multiEv+0xb8>
 8002e96:	eddf 1a20 	vldr	s3, [pc, #128]	; 8002f18 <_ZN13RoverArmMotor23get_current_angle_multiEv+0xbc>
 8002e9a:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8002f1c <_ZN13RoverArmMotor23get_current_angle_multiEv+0xc0>
 8002e9e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8002f18 <_ZN13RoverArmMotor23get_current_angle_multiEv+0xbc>
 8002ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f859 	bl	8002f5e <_ZN13RoverArmMotor8mapFloatEfffff>
 8002eac:	ed87 0b04 	vstr	d0, [r7, #16]
    int turns = result_arr[1];
 8002eb0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002eb4:	60fb      	str	r3, [r7, #12]
    if (turns > 0) {
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	dd0e      	ble.n	8002eda <_ZN13RoverArmMotor23get_current_angle_multiEv+0x7e>
        return angle_raw + 360 * turns;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fb3c 	bl	8000544 <__aeabi_i2d>
 8002ecc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ed0:	f7fd f9ec 	bl	80002ac <__adddf3>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	e013      	b.n	8002f02 <_ZN13RoverArmMotor23get_current_angle_multiEv+0xa6>
    } else if (turns < 0) {
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	da0e      	bge.n	8002efe <_ZN13RoverArmMotor23get_current_angle_multiEv+0xa2>
        return angle_raw + 360 * turns;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd fb2a 	bl	8000544 <__aeabi_i2d>
 8002ef0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ef4:	f7fd f9da 	bl	80002ac <__adddf3>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	e001      	b.n	8002f02 <_ZN13RoverArmMotor23get_current_angle_multiEv+0xa6>
    } else {
        return angle_raw;
 8002efe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    }
}
 8002f02:	ec43 2b17 	vmov	d7, r2, r3
 8002f06:	eeb0 0a47 	vmov.f32	s0, s14
 8002f0a:	eef0 0a67 	vmov.f32	s1, s15
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd90      	pop	{r4, r7, pc}
 8002f14:	43b3feb8 	.word	0x43b3feb8
 8002f18:	00000000 	.word	0x00000000
 8002f1c:	457ff000 	.word	0x457ff000

08002f20 <_ZN13RoverArmMotor20get_current_angle_swEv>:

double RoverArmMotor::get_current_angle_sw(){    //TODO mn297
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
    
    // double diff = currentAngle - zero_angle_sw;
    // if(diff < 0) diff += 360;
    // return diff / gearRatio;

    double angle_raw = get_current_angle_multi();
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ff97 	bl	8002e5c <_ZN13RoverArmMotor23get_current_angle_multiEv>
 8002f2e:	ed87 0b04 	vstr	d0, [r7, #16]
    double diff = angle_raw - zero_angle_sw;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 8002f38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f3c:	f7fd f9b4 	bl	80002a8 <__aeabi_dsub>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return diff;
 8002f48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f4c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f50:	eeb0 0a47 	vmov.f32	s0, s14
 8002f54:	eef0 0a67 	vmov.f32	s1, s15
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <_ZN13RoverArmMotor8mapFloatEfffff>:
}
double RoverArmMotor::getCurrentOutput(){
    return output;
}

double RoverArmMotor::mapFloat(float x, float in_min, float in_max, float out_min, float out_max){
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b088      	sub	sp, #32
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6178      	str	r0, [r7, #20]
 8002f66:	ed87 0a04 	vstr	s0, [r7, #16]
 8002f6a:	edc7 0a03 	vstr	s1, [r7, #12]
 8002f6e:	ed87 1a02 	vstr	s2, [r7, #8]
 8002f72:	edc7 1a01 	vstr	s3, [r7, #4]
 8002f76:	ed87 2a00 	vstr	s4, [r7]
    double result = ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8002f7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f86:	edd7 6a00 	vldr	s13, [r7]
 8002f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f92:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002f96:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fae:	ee17 0a90 	vmov	r0, s15
 8002fb2:	f7fd fad9 	bl	8000568 <__aeabi_f2d>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result; 
 8002fbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc2:	ec43 2b17 	vmov	d7, r2, r3
    }
 8002fc6:	eeb0 0a47 	vmov.f32	s0, s14
 8002fca:	eef0 0a67 	vmov.f32	s1, s15
 8002fce:	3720      	adds	r7, #32
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <_ZN13RoverArmMotor14get_turn_countEv>:

double RoverArmMotor::getRatio(){
    return gearRatio;
}

int RoverArmMotor::get_turn_count(){
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	6078      	str	r0, [r7, #4]
    int16_t result_arr[2];
    getTurnCounterSPI(result_arr, spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 8002fee:	f107 000c 	add.w	r0, r7, #12
 8002ff2:	2400      	movs	r4, #0
 8002ff4:	9401      	str	r4, [sp, #4]
 8002ff6:	240c      	movs	r4, #12
 8002ff8:	9400      	str	r4, [sp, #0]
 8002ffa:	f005 faa2 	bl	8008542 <getTurnCounterSPI>
    return result_arr[1];
 8002ffe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    // return turn_count;
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}

0800300a <_ZN9movingAvg5beginEv>:

#include <movingAvg.h>

// initialize - allocate the interval array
void movingAvg::begin()
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
    m_readings = new int[m_interval];
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800301a:	4293      	cmp	r3, r2
 800301c:	d201      	bcs.n	8003022 <_ZN9movingAvg5beginEv+0x18>
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	e001      	b.n	8003026 <_ZN9movingAvg5beginEv+0x1c>
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	4618      	mov	r0, r3
 8003028:	f005 fbc4 	bl	80087b4 <_Znaj>
 800302c:	4603      	mov	r3, r0
 800302e:	461a      	mov	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	611a      	str	r2, [r3, #16]
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	0000      	movs	r0, r0
	...

08003040 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~ Constructor ~~~~~~~~~~~~~~~~ */
PID::PID() { }

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	; 0x28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6278      	str	r0, [r7, #36]	; 0x24
 8003048:	6239      	str	r1, [r7, #32]
 800304a:	61fa      	str	r2, [r7, #28]
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	ed87 0b04 	vstr	d0, [r7, #16]
 8003052:	ed87 1b02 	vstr	d1, [r7, #8]
 8003056:	ed87 2b00 	vstr	d2, [r7]
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_myOutput   = Output;
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	645a      	str	r2, [r3, #68]	; 0x44
	_myInput    = Input;
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	6a3a      	ldr	r2, [r7, #32]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
	_mySetpoint = Setpoint;
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	649a      	str	r2, [r3, #72]	; 0x48
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	2200      	movs	r2, #0
 8003070:	705a      	strb	r2, [r3, #1]
	
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8003072:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80030c8 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x88>
 8003076:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80030d0 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x90>
 800307a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800307c:	f000 f991 	bl	80033a2 <_ZN3PID15SetOutputLimitsEdd>
	
	_sampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	2264      	movs	r2, #100	; 0x64
 8003084:	609a      	str	r2, [r3, #8]
	
	PID::SetControllerDirection(ControllerDirection);
 8003086:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800308a:	4619      	mov	r1, r3
 800308c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800308e:	f000 fab9 	bl	8003604 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>
	PID::SetTunings(Kp, Ki, Kd, POn);
 8003092:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003096:	4619      	mov	r1, r3
 8003098:	ed97 2b00 	vldr	d2, [r7]
 800309c:	ed97 1b02 	vldr	d1, [r7, #8]
 80030a0:	ed97 0b04 	vldr	d0, [r7, #16]
 80030a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030a6:	f000 fa05 	bl	80034b4 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
	
	_lastTime = GetTime() - _sampleTime;
 80030aa:	f000 fb5b 	bl	8003764 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	1ad2      	subs	r2, r2, r3
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	605a      	str	r2, [r3, #4]
	
}
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	4618      	mov	r0, r3
 80030be:	3728      	adds	r7, #40	; 0x28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	f3af 8000 	nop.w
 80030c8:	00000000 	.word	0x00000000
 80030cc:	406fe000 	.word	0x406fe000
	...

080030d8 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>:

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection) : PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection)
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08c      	sub	sp, #48	; 0x30
 80030dc:	af02      	add	r7, sp, #8
 80030de:	6278      	str	r0, [r7, #36]	; 0x24
 80030e0:	6239      	str	r1, [r7, #32]
 80030e2:	61fa      	str	r2, [r7, #28]
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	ed87 0b04 	vstr	d0, [r7, #16]
 80030ea:	ed87 1b02 	vstr	d1, [r7, #8]
 80030ee:	ed87 2b00 	vstr	d2, [r7]
 80030f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	2301      	movs	r3, #1
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	ed97 2b00 	vldr	d2, [r7]
 8003100:	ed97 1b02 	vldr	d1, [r7, #8]
 8003104:	ed97 0b04 	vldr	d0, [r7, #16]
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	6a39      	ldr	r1, [r7, #32]
 800310e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003110:	f7ff ff96 	bl	8003040 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>
{ }
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	4618      	mov	r0, r3
 8003118:	3728      	adds	r7, #40	; 0x28
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <_ZN3PID4InitEv>:



/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	_lastInput = *_myInput;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (_outputSum > _outMax)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800314e:	f7fd fcf3 	bl	8000b38 <__aeabi_dcmpgt>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d006      	beq.n	8003166 <_ZN3PID4InitEv+0x48>
	{
		_outputSum = _outMax;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		_outputSum = _outMin;
	}
	else { }	
	
}
 8003164:	e011      	b.n	800318a <_ZN3PID4InitEv+0x6c>
	else if (_outputSum < _outMin)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003172:	f7fd fcc3 	bl	8000afc <__aeabi_dcmplt>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d100      	bne.n	800317e <_ZN3PID4InitEv+0x60>
}
 800317c:	e005      	b.n	800318a <_ZN3PID4InitEv+0x6c>
		_outputSum = _outMin;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <_ZN3PID7ComputeEv>:
	PID::Init(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID::Compute(void)
{
 8003192:	b5b0      	push	{r4, r5, r7, lr}
 8003194:	b08c      	sub	sp, #48	; 0x30
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
	double output;
	// _outputSum = _outMin;	//mn297 hotfix1 TODO check if this is correct
	// if (_outputSum > 50) _outputSum = 50;	//mn297 hotfix2 TODO check if this is correct

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!_inAuto)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	785b      	ldrb	r3, [r3, #1]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <_ZN3PID7ComputeEv+0x14>
	{
		return _FALSE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e0db      	b.n	800335e <_ZN3PID7ComputeEv+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80031a6:	f000 fadd 	bl	8003764 <HAL_GetTick>
 80031aa:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - _lastTime);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= _sampleTime)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	6a3a      	ldr	r2, [r7, #32]
 80031bc:	429a      	cmp	r2, r3
 80031be:	f0c0 80cd 	bcc.w	800335c <_ZN3PID7ComputeEv+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *_myInput;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	e9c7 2306 	strd	r2, r3, [r7, #24]

		// error   = abs(*_mySetpoint - input);	//mn297 fix
		// dInput  = abs(input - _lastInput);		//mn297 fix TODO: check if this is correct
		error   = *_mySetpoint - input;	//mn297 fix
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031da:	f7fd f865 	bl	80002a8 <__aeabi_dsub>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = input - _lastInput;		//mn297 fix TODO: check if this is correct
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80031ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031f0:	f7fd f85a 	bl	80002a8 <__aeabi_dsub>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		_outputSum += (_ki * error);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003208:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800320c:	f7fd fa04 	bl	8000618 <__aeabi_dmul>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4620      	mov	r0, r4
 8003216:	4629      	mov	r1, r5
 8003218:	f7fd f848 	bl	80002ac <__adddf3>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!_pOnE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d114      	bne.n	8003258 <_ZN3PID7ComputeEv+0xc6>
		{
			_outputSum -= _kp * dInput;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800323a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800323e:	f7fd f9eb 	bl	8000618 <__aeabi_dmul>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4620      	mov	r0, r4
 8003248:	4629      	mov	r1, r5
 800324a:	f7fd f82d 	bl	80002a8 <__aeabi_dsub>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (_outputSum > _outMax)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003264:	f7fd fc68 	bl	8000b38 <__aeabi_dcmpgt>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <_ZN3PID7ComputeEv+0xea>
		{
			_outputSum = _outMax;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800327a:	e010      	b.n	800329e <_ZN3PID7ComputeEv+0x10c>
		}
		else if (_outputSum < _outMin)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003288:	f7fd fc38 	bl	8000afc <__aeabi_dcmplt>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <_ZN3PID7ComputeEv+0x10c>
		{
			_outputSum = _outMin;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (_pOnE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <_ZN3PID7ComputeEv+0x12c>
		{
			output = _kp * error;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80032ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032b0:	f7fd f9b2 	bl	8000618 <__aeabi_dmul>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80032bc:	e005      	b.n	80032ca <_ZN3PID7ComputeEv+0x138>
		}
		else
		{
			output = 0;
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += _outputSum - _kd * dInput;		//TODO check if this is correct mn297
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80032d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032da:	f7fd f99d 	bl	8000618 <__aeabi_dmul>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4620      	mov	r0, r4
 80032e4:	4629      	mov	r1, r5
 80032e6:	f7fc ffdf 	bl	80002a8 <__aeabi_dsub>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032f2:	f7fc ffdb 	bl	80002ac <__adddf3>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > _outMax)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003304:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003308:	f7fd fc16 	bl	8000b38 <__aeabi_dcmpgt>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <_ZN3PID7ComputeEv+0x18c>
		{
			output = _outMax;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003318:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800331c:	e00e      	b.n	800333c <_ZN3PID7ComputeEv+0x1aa>
		}
		else if (output < _outMin)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003324:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003328:	f7fd fbe8 	bl	8000afc <__aeabi_dcmplt>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d004      	beq.n	800333c <_ZN3PID7ComputeEv+0x1aa>
		{
			output = _outMin;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003338:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*_myOutput = output;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003340:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003344:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		_lastInput = input;
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800334e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		_lastTime  = now;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003356:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <_ZN3PID7ComputeEv+0x1cc>
		
	}
	else
	{
		return _FALSE;
 800335c:	2300      	movs	r3, #0
	}
	
}
 800335e:	4618      	mov	r0, r3
 8003360:	3730      	adds	r7, #48	; 0x30
 8003362:	46bd      	mov	sp, r7
 8003364:	bdb0      	pop	{r4, r5, r7, pc}

08003366 <_ZN3PID7SetModeE15PIDMode_TypeDef>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID::SetMode(PIDMode_TypeDef Mode)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	2b01      	cmp	r3, #1
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !_inAuto)
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	785b      	ldrb	r3, [r3, #1]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
	{
		Init();
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fec5 	bl	800311e <_ZN3PID4InitEv>
	}
	
	_inAuto = (PIDMode_TypeDef)newAuto;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	705a      	strb	r2, [r3, #1]
	
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <_ZN3PID15SetOutputLimitsEdd>:
	return _inAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(double Min, double Max)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b086      	sub	sp, #24
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6178      	str	r0, [r7, #20]
 80033aa:	ed87 0b02 	vstr	d0, [r7, #8]
 80033ae:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80033b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033ba:	f7fd fbb3 	bl	8000b24 <__aeabi_dcmpge>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d158      	bne.n	8003476 <_ZN3PID15SetOutputLimitsEdd+0xd4>
	{
		return;
	}
	
	_outMin = Min;
 80033c4:	6979      	ldr	r1, [r7, #20]
 80033c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033ca:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	_outMax = Max;
 80033ce:	6979      	ldr	r1, [r7, #20]
 80033d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033d4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d04b      	beq.n	8003478 <_ZN3PID15SetOutputLimitsEdd+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80033ee:	f7fd fba3 	bl	8000b38 <__aeabi_dcmpgt>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <_ZN3PID15SetOutputLimitsEdd+0x66>
		{
			*_myOutput = _outMax;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003402:	e9c1 2300 	strd	r2, r3, [r1]
 8003406:	e012      	b.n	800342e <_ZN3PID15SetOutputLimitsEdd+0x8c>
		}
		else if (*_myOutput < _outMin)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003416:	f7fd fb71 	bl	8000afc <__aeabi_dcmplt>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <_ZN3PID15SetOutputLimitsEdd+0x8c>
		{
			*_myOutput = _outMin;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800342a:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800343a:	f7fd fb7d 	bl	8000b38 <__aeabi_dcmpgt>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d006      	beq.n	8003452 <_ZN3PID15SetOutputLimitsEdd+0xb0>
		{
			_outputSum = _outMax;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800344a:	6979      	ldr	r1, [r7, #20]
 800344c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003450:	e012      	b.n	8003478 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		}
		else if (_outputSum < _outMin)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800345e:	f7fd fb4d 	bl	8000afc <__aeabi_dcmplt>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		{
			_outputSum = _outMin;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800346e:	6979      	ldr	r1, [r7, #20]
 8003470:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003474:	e000      	b.n	8003478 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		return;
 8003476:	bf00      	nop
		}
		else { }
		
	}
	
}
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <_ZN3PID10SetTuningsEddd>:

/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID::SetTunings(double Kp, double Ki, double Kd)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b088      	sub	sp, #32
 8003482:	af00      	add	r7, sp, #0
 8003484:	61f8      	str	r0, [r7, #28]
 8003486:	ed87 0b04 	vstr	d0, [r7, #16]
 800348a:	ed87 1b02 	vstr	d1, [r7, #8]
 800348e:	ed87 2b00 	vstr	d2, [r7]
	PID::SetTunings(Kp, Ki, Kd, _pOn);
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	789b      	ldrb	r3, [r3, #2]
 8003496:	4619      	mov	r1, r3
 8003498:	ed97 2b00 	vldr	d2, [r7]
 800349c:	ed97 1b02 	vldr	d1, [r7, #8]
 80034a0:	ed97 0b04 	vldr	d0, [r7, #16]
 80034a4:	69f8      	ldr	r0, [r7, #28]
 80034a6:	f000 f805 	bl	80034b4 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
}
 80034aa:	bf00      	nop
 80034ac:	3720      	adds	r7, #32
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>:
void PID::SetTunings(double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	; 0x28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	61f8      	str	r0, [r7, #28]
 80034bc:	ed87 0b04 	vstr	d0, [r7, #16]
 80034c0:	ed87 1b02 	vstr	d1, [r7, #8]
 80034c4:	ed87 2b00 	vstr	d2, [r7]
 80034c8:	460b      	mov	r3, r1
 80034ca:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034d8:	f7fd fb10 	bl	8000afc <__aeabi_dcmplt>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f040 8089 	bne.w	80035f6 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034f0:	f7fd fb04 	bl	8000afc <__aeabi_dcmplt>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d17d      	bne.n	80035f6 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003506:	f7fd faf9 	bl	8000afc <__aeabi_dcmplt>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d172      	bne.n	80035f6 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	_pOn    = POn;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	7efa      	ldrb	r2, [r7, #27]
 8003514:	709a      	strb	r2, [r3, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003516:	7efb      	ldrb	r3, [r7, #27]
 8003518:	2b01      	cmp	r3, #1
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	701a      	strb	r2, [r3, #0]

	_dispKp = Kp;
 8003528:	69f9      	ldr	r1, [r7, #28]
 800352a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800352e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_dispKi = Ki;
 8003532:	69f9      	ldr	r1, [r7, #28]
 8003534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003538:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_dispKd = Kd;
 800353c:	69f9      	ldr	r1, [r7, #28]
 800353e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003542:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)_sampleTime) / 1000;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fc ffea 	bl	8000524 <__aeabi_ui2d>
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x14c>)
 8003556:	f7fd f989 	bl	800086c <__aeabi_ddiv>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	_kp = Kp;
 8003562:	69f9      	ldr	r1, [r7, #28]
 8003564:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003568:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	_ki = Ki * SampleTimeInSec;
 800356c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003570:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003574:	f7fd f850 	bl	8000618 <__aeabi_dmul>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	69f9      	ldr	r1, [r7, #28]
 800357e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	_kd = Kd / SampleTimeInSec;
 8003582:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800358a:	f7fd f96f 	bl	800086c <__aeabi_ddiv>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	69f9      	ldr	r1, [r7, #28]
 8003594:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (_controllerDirection == _PID_CD_REVERSE)
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	78db      	ldrb	r3, [r3, #3]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d12b      	bne.n	80035f8 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
	{
		
		_kp = (0 - _kp);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80035a6:	f04f 0000 	mov.w	r0, #0
 80035aa:	f04f 0100 	mov.w	r1, #0
 80035ae:	f7fc fe7b 	bl	80002a8 <__aeabi_dsub>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	69f9      	ldr	r1, [r7, #28]
 80035b8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f04f 0100 	mov.w	r1, #0
 80035ca:	f7fc fe6d 	bl	80002a8 <__aeabi_dsub>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	69f9      	ldr	r1, [r7, #28]
 80035d4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80035de:	f04f 0000 	mov.w	r0, #0
 80035e2:	f04f 0100 	mov.w	r1, #0
 80035e6:	f7fc fe5f 	bl	80002a8 <__aeabi_dsub>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	69f9      	ldr	r1, [r7, #28]
 80035f0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80035f4:	e000      	b.n	80035f8 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
		return;
 80035f6:	bf00      	nop
		
	}
	
}
 80035f8:	3728      	adds	r7, #40	; 0x28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	408f4000 	.word	0x408f4000

08003604 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	785b      	ldrb	r3, [r3, #1]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d02e      	beq.n	8003676 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	78db      	ldrb	r3, [r3, #3]
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	429a      	cmp	r2, r3
 8003620:	d029      	beq.n	8003676 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
	{
		
		_kp = (0 - _kp);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003628:	f04f 0000 	mov.w	r0, #0
 800362c:	f04f 0100 	mov.w	r1, #0
 8003630:	f7fc fe3a 	bl	80002a8 <__aeabi_dsub>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003644:	f04f 0000 	mov.w	r0, #0
 8003648:	f04f 0100 	mov.w	r1, #0
 800364c:	f7fc fe2c 	bl	80002a8 <__aeabi_dsub>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003660:	f04f 0000 	mov.w	r0, #0
 8003664:	f04f 0100 	mov.w	r1, #0
 8003668:	f7fc fe1e 	bl	80002a8 <__aeabi_dsub>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	_controllerDirection = Direction;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	70da      	strb	r2, [r3, #3]
	
}
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800368e:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <HAL_Init+0x3c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a0b      	ldr	r2, [pc, #44]	; (80036c0 <HAL_Init+0x3c>)
 8003694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003698:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800369a:	2003      	movs	r0, #3
 800369c:	f000 f962 	bl	8003964 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036a0:	2000      	movs	r0, #0
 80036a2:	f000 f80f 	bl	80036c4 <HAL_InitTick>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	71fb      	strb	r3, [r7, #7]
 80036b0:	e001      	b.n	80036b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036b2:	f7fe fa83 	bl	8001bbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036b6:	79fb      	ldrb	r3, [r7, #7]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40022000 	.word	0x40022000

080036c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80036d0:	4b17      	ldr	r3, [pc, #92]	; (8003730 <HAL_InitTick+0x6c>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d023      	beq.n	8003720 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80036d8:	4b16      	ldr	r3, [pc, #88]	; (8003734 <HAL_InitTick+0x70>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b14      	ldr	r3, [pc, #80]	; (8003730 <HAL_InitTick+0x6c>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	4619      	mov	r1, r3
 80036e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f96d 	bl	80039ce <HAL_SYSTICK_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10f      	bne.n	800371a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b0f      	cmp	r3, #15
 80036fe:	d809      	bhi.n	8003714 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003700:	2200      	movs	r2, #0
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	f04f 30ff 	mov.w	r0, #4294967295
 8003708:	f000 f937 	bl	800397a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800370c:	4a0a      	ldr	r2, [pc, #40]	; (8003738 <HAL_InitTick+0x74>)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e007      	b.n	8003724 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	e004      	b.n	8003724 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	e001      	b.n	8003724 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000038 	.word	0x20000038
 8003734:	20000030 	.word	0x20000030
 8003738:	20000034 	.word	0x20000034

0800373c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_IncTick+0x20>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_IncTick+0x24>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4413      	add	r3, r2
 800374c:	4a04      	ldr	r2, [pc, #16]	; (8003760 <HAL_IncTick+0x24>)
 800374e:	6013      	str	r3, [r2, #0]
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000038 	.word	0x20000038
 8003760:	200007f0 	.word	0x200007f0

08003764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return uwTick;
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <HAL_GetTick+0x14>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	200007f0 	.word	0x200007f0

0800377c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003784:	f7ff ffee 	bl	8003764 <HAL_GetTick>
 8003788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d005      	beq.n	80037a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <HAL_Delay+0x44>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037a2:	bf00      	nop
 80037a4:	f7ff ffde 	bl	8003764 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d8f7      	bhi.n	80037a4 <HAL_Delay+0x28>
  {
  }
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000038 	.word	0x20000038

080037c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037e0:	4013      	ands	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f6:	4a04      	ldr	r2, [pc, #16]	; (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	60d3      	str	r3, [r2, #12]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <__NVIC_GetPriorityGrouping+0x18>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	0a1b      	lsrs	r3, r3, #8
 8003816:	f003 0307 	and.w	r3, r3, #7
}
 800381a:	4618      	mov	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003836:	2b00      	cmp	r3, #0
 8003838:	db0b      	blt.n	8003852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	f003 021f 	and.w	r2, r3, #31
 8003840:	4907      	ldr	r1, [pc, #28]	; (8003860 <__NVIC_EnableIRQ+0x38>)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	2001      	movs	r0, #1
 800384a:	fa00 f202 	lsl.w	r2, r0, r2
 800384e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	e000e100 	.word	0xe000e100

08003864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	6039      	str	r1, [r7, #0]
 800386e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003874:	2b00      	cmp	r3, #0
 8003876:	db0a      	blt.n	800388e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	490c      	ldr	r1, [pc, #48]	; (80038b0 <__NVIC_SetPriority+0x4c>)
 800387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003882:	0112      	lsls	r2, r2, #4
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	440b      	add	r3, r1
 8003888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800388c:	e00a      	b.n	80038a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	4908      	ldr	r1, [pc, #32]	; (80038b4 <__NVIC_SetPriority+0x50>)
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	3b04      	subs	r3, #4
 800389c:	0112      	lsls	r2, r2, #4
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	440b      	add	r3, r1
 80038a2:	761a      	strb	r2, [r3, #24]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000e100 	.word	0xe000e100
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	; 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f1c3 0307 	rsb	r3, r3, #7
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	bf28      	it	cs
 80038d6:	2304      	movcs	r3, #4
 80038d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3304      	adds	r3, #4
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d902      	bls.n	80038e8 <NVIC_EncodePriority+0x30>
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3b03      	subs	r3, #3
 80038e6:	e000      	b.n	80038ea <NVIC_EncodePriority+0x32>
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ec:	f04f 32ff 	mov.w	r2, #4294967295
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	401a      	ands	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003900:	f04f 31ff 	mov.w	r1, #4294967295
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	43d9      	mvns	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003910:	4313      	orrs	r3, r2
         );
}
 8003912:	4618      	mov	r0, r3
 8003914:	3724      	adds	r7, #36	; 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3b01      	subs	r3, #1
 800392c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003930:	d301      	bcc.n	8003936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003932:	2301      	movs	r3, #1
 8003934:	e00f      	b.n	8003956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <SysTick_Config+0x40>)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3b01      	subs	r3, #1
 800393c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800393e:	210f      	movs	r1, #15
 8003940:	f04f 30ff 	mov.w	r0, #4294967295
 8003944:	f7ff ff8e 	bl	8003864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <SysTick_Config+0x40>)
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800394e:	4b04      	ldr	r3, [pc, #16]	; (8003960 <SysTick_Config+0x40>)
 8003950:	2207      	movs	r2, #7
 8003952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	e000e010 	.word	0xe000e010

08003964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff29 	bl	80037c4 <__NVIC_SetPriorityGrouping>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	4603      	mov	r3, r0
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800398c:	f7ff ff3e 	bl	800380c <__NVIC_GetPriorityGrouping>
 8003990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	6978      	ldr	r0, [r7, #20]
 8003998:	f7ff ff8e 	bl	80038b8 <NVIC_EncodePriority>
 800399c:	4602      	mov	r2, r0
 800399e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff5d 	bl	8003864 <__NVIC_SetPriority>
}
 80039aa:	bf00      	nop
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	4603      	mov	r3, r0
 80039ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff31 	bl	8003828 <__NVIC_EnableIRQ>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff ffa2 	bl	8003920 <SysTick_Config>
 80039dc:	4603      	mov	r3, r0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e098      	b.n	8003b2c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	4b4d      	ldr	r3, [pc, #308]	; (8003b38 <HAL_DMA_Init+0x150>)
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d80f      	bhi.n	8003a26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4b4b      	ldr	r3, [pc, #300]	; (8003b3c <HAL_DMA_Init+0x154>)
 8003a0e:	4413      	add	r3, r2
 8003a10:	4a4b      	ldr	r2, [pc, #300]	; (8003b40 <HAL_DMA_Init+0x158>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	009a      	lsls	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a48      	ldr	r2, [pc, #288]	; (8003b44 <HAL_DMA_Init+0x15c>)
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
 8003a24:	e00e      	b.n	8003a44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	4b46      	ldr	r3, [pc, #280]	; (8003b48 <HAL_DMA_Init+0x160>)
 8003a2e:	4413      	add	r3, r2
 8003a30:	4a43      	ldr	r2, [pc, #268]	; (8003b40 <HAL_DMA_Init+0x158>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	009a      	lsls	r2, r3, #2
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a42      	ldr	r2, [pc, #264]	; (8003b4c <HAL_DMA_Init+0x164>)
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a9e:	d039      	beq.n	8003b14 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <HAL_DMA_Init+0x15c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d11a      	bne.n	8003ae0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003aaa:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <HAL_DMA_Init+0x168>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f003 031c 	and.w	r3, r3, #28
 8003ab6:	210f      	movs	r1, #15
 8003ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	4924      	ldr	r1, [pc, #144]	; (8003b50 <HAL_DMA_Init+0x168>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ac4:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <HAL_DMA_Init+0x168>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	f003 031c 	and.w	r3, r3, #28
 8003ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad8:	491d      	ldr	r1, [pc, #116]	; (8003b50 <HAL_DMA_Init+0x168>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]
 8003ade:	e019      	b.n	8003b14 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ae0:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <HAL_DMA_Init+0x16c>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	f003 031c 	and.w	r3, r3, #28
 8003aec:	210f      	movs	r1, #15
 8003aee:	fa01 f303 	lsl.w	r3, r1, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	4917      	ldr	r1, [pc, #92]	; (8003b54 <HAL_DMA_Init+0x16c>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003afa:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_DMA_Init+0x16c>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	f003 031c 	and.w	r3, r3, #28
 8003b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0e:	4911      	ldr	r1, [pc, #68]	; (8003b54 <HAL_DMA_Init+0x16c>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40020407 	.word	0x40020407
 8003b3c:	bffdfff8 	.word	0xbffdfff8
 8003b40:	cccccccd 	.word	0xcccccccd
 8003b44:	40020000 	.word	0x40020000
 8003b48:	bffdfbf8 	.word	0xbffdfbf8
 8003b4c:	40020400 	.word	0x40020400
 8003b50:	400200a8 	.word	0x400200a8
 8003b54:	400204a8 	.word	0x400204a8

08003b58 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d008      	beq.n	8003b82 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2204      	movs	r2, #4
 8003b74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e022      	b.n	8003bc8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 020e 	bic.w	r2, r2, #14
 8003b90:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f003 021c 	and.w	r2, r3, #28
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2101      	movs	r1, #1
 8003bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d005      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2204      	movs	r2, #4
 8003bf0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
 8003bf6:	e029      	b.n	8003c4c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 020e 	bic.w	r2, r2, #14
 8003c06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0201 	bic.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	f003 021c 	and.w	r2, r3, #28
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	2101      	movs	r1, #1
 8003c26:	fa01 f202 	lsl.w	r2, r1, r2
 8003c2a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
    }
  }
  return status;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	f003 031c 	and.w	r3, r3, #28
 8003c76:	2204      	movs	r2, #4
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d026      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x7a>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d021      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d107      	bne.n	8003caa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0204 	bic.w	r2, r2, #4
 8003ca8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	f003 021c 	and.w	r2, r3, #28
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2104      	movs	r1, #4
 8003cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cbc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d071      	beq.n	8003daa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003cce:	e06c      	b.n	8003daa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	f003 031c 	and.w	r3, r3, #28
 8003cd8:	2202      	movs	r2, #2
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d02e      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xec>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d029      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 020a 	bic.w	r2, r2, #10
 8003d0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	f003 021c 	and.w	r2, r3, #28
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	2102      	movs	r1, #2
 8003d22:	fa01 f202 	lsl.w	r2, r1, r2
 8003d26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d038      	beq.n	8003daa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d40:	e033      	b.n	8003daa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	f003 031c 	and.w	r3, r3, #28
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d02a      	beq.n	8003dac <HAL_DMA_IRQHandler+0x156>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d025      	beq.n	8003dac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 020e 	bic.w	r2, r2, #14
 8003d6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	f003 021c 	and.w	r2, r3, #28
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d004      	beq.n	8003dac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003daa:	bf00      	nop
 8003dac:	bf00      	nop
}
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc2:	e154      	b.n	800406e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	2101      	movs	r1, #1
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8146 	beq.w	8004068 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d005      	beq.n	8003df4 <HAL_GPIO_Init+0x40>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d130      	bne.n	8003e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	2203      	movs	r2, #3
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4013      	ands	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	f003 0201 	and.w	r2, r3, #1
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d017      	beq.n	8003e92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d123      	bne.n	8003ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	08da      	lsrs	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3208      	adds	r2, #8
 8003ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	220f      	movs	r2, #15
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	08da      	lsrs	r2, r3, #3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3208      	adds	r2, #8
 8003ee0:	6939      	ldr	r1, [r7, #16]
 8003ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0203 	and.w	r2, r3, #3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 80a0 	beq.w	8004068 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f28:	4b58      	ldr	r3, [pc, #352]	; (800408c <HAL_GPIO_Init+0x2d8>)
 8003f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2c:	4a57      	ldr	r2, [pc, #348]	; (800408c <HAL_GPIO_Init+0x2d8>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	6613      	str	r3, [r2, #96]	; 0x60
 8003f34:	4b55      	ldr	r3, [pc, #340]	; (800408c <HAL_GPIO_Init+0x2d8>)
 8003f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f40:	4a53      	ldr	r2, [pc, #332]	; (8004090 <HAL_GPIO_Init+0x2dc>)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	089b      	lsrs	r3, r3, #2
 8003f46:	3302      	adds	r3, #2
 8003f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	220f      	movs	r2, #15
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f6a:	d019      	beq.n	8003fa0 <HAL_GPIO_Init+0x1ec>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a49      	ldr	r2, [pc, #292]	; (8004094 <HAL_GPIO_Init+0x2e0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d013      	beq.n	8003f9c <HAL_GPIO_Init+0x1e8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a48      	ldr	r2, [pc, #288]	; (8004098 <HAL_GPIO_Init+0x2e4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00d      	beq.n	8003f98 <HAL_GPIO_Init+0x1e4>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a47      	ldr	r2, [pc, #284]	; (800409c <HAL_GPIO_Init+0x2e8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d007      	beq.n	8003f94 <HAL_GPIO_Init+0x1e0>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a46      	ldr	r2, [pc, #280]	; (80040a0 <HAL_GPIO_Init+0x2ec>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d101      	bne.n	8003f90 <HAL_GPIO_Init+0x1dc>
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	e008      	b.n	8003fa2 <HAL_GPIO_Init+0x1ee>
 8003f90:	2307      	movs	r3, #7
 8003f92:	e006      	b.n	8003fa2 <HAL_GPIO_Init+0x1ee>
 8003f94:	2303      	movs	r3, #3
 8003f96:	e004      	b.n	8003fa2 <HAL_GPIO_Init+0x1ee>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e002      	b.n	8003fa2 <HAL_GPIO_Init+0x1ee>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <HAL_GPIO_Init+0x1ee>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	f002 0203 	and.w	r2, r2, #3
 8003fa8:	0092      	lsls	r2, r2, #2
 8003faa:	4093      	lsls	r3, r2
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fb2:	4937      	ldr	r1, [pc, #220]	; (8004090 <HAL_GPIO_Init+0x2dc>)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	3302      	adds	r3, #2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fc0:	4b38      	ldr	r3, [pc, #224]	; (80040a4 <HAL_GPIO_Init+0x2f0>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fe4:	4a2f      	ldr	r2, [pc, #188]	; (80040a4 <HAL_GPIO_Init+0x2f0>)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fea:	4b2e      	ldr	r3, [pc, #184]	; (80040a4 <HAL_GPIO_Init+0x2f0>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800400e:	4a25      	ldr	r2, [pc, #148]	; (80040a4 <HAL_GPIO_Init+0x2f0>)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004014:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <HAL_GPIO_Init+0x2f0>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	43db      	mvns	r3, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004038:	4a1a      	ldr	r2, [pc, #104]	; (80040a4 <HAL_GPIO_Init+0x2f0>)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800403e:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <HAL_GPIO_Init+0x2f0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	43db      	mvns	r3, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004062:	4a10      	ldr	r2, [pc, #64]	; (80040a4 <HAL_GPIO_Init+0x2f0>)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	3301      	adds	r3, #1
 800406c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	f47f aea3 	bne.w	8003dc4 <HAL_GPIO_Init+0x10>
  }
}
 800407e:	bf00      	nop
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	40021000 	.word	0x40021000
 8004090:	40010000 	.word	0x40010000
 8004094:	48000400 	.word	0x48000400
 8004098:	48000800 	.word	0x48000800
 800409c:	48000c00 	.word	0x48000c00
 80040a0:	48001000 	.word	0x48001000
 80040a4:	40010400 	.word	0x40010400

080040a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
 80040b4:	4613      	mov	r3, r2
 80040b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040b8:	787b      	ldrb	r3, [r7, #1]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040be:	887a      	ldrh	r2, [r7, #2]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040c4:	e002      	b.n	80040cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040c6:	887a      	ldrh	r2, [r7, #2]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040e2:	4b08      	ldr	r3, [pc, #32]	; (8004104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d006      	beq.n	80040fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040ee:	4a05      	ldr	r2, [pc, #20]	; (8004104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fd fa9a 	bl	8001630 <HAL_GPIO_EXTI_Callback>
  }
}
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40010400 	.word	0x40010400

08004108 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800410c:	4b04      	ldr	r3, [pc, #16]	; (8004120 <HAL_PWREx_GetVoltageRange+0x18>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40007000 	.word	0x40007000

08004124 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004132:	d130      	bne.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004134:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800413c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004140:	d038      	beq.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004142:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800414c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004150:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004152:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2232      	movs	r2, #50	; 0x32
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	0c9b      	lsrs	r3, r3, #18
 8004164:	3301      	adds	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004168:	e002      	b.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b01      	subs	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417c:	d102      	bne.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x60>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f2      	bne.n	800416a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004184:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004190:	d110      	bne.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e00f      	b.n	80041b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a2:	d007      	beq.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041a4:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ac:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40007000 	.word	0x40007000
 80041c8:	20000030 	.word	0x20000030
 80041cc:	431bde83 	.word	0x431bde83

080041d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d102      	bne.n	80041e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f000 bc02 	b.w	80049e8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e4:	4b96      	ldr	r3, [pc, #600]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 030c 	and.w	r3, r3, #12
 80041ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ee:	4b94      	ldr	r3, [pc, #592]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80e4 	beq.w	80043ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <HAL_RCC_OscConfig+0x4c>
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b0c      	cmp	r3, #12
 8004210:	f040 808b 	bne.w	800432a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2b01      	cmp	r3, #1
 8004218:	f040 8087 	bne.w	800432a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800421c:	4b88      	ldr	r3, [pc, #544]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <HAL_RCC_OscConfig+0x64>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e3d9      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1a      	ldr	r2, [r3, #32]
 8004238:	4b81      	ldr	r3, [pc, #516]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d004      	beq.n	800424e <HAL_RCC_OscConfig+0x7e>
 8004244:	4b7e      	ldr	r3, [pc, #504]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800424c:	e005      	b.n	800425a <HAL_RCC_OscConfig+0x8a>
 800424e:	4b7c      	ldr	r3, [pc, #496]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800425a:	4293      	cmp	r3, r2
 800425c:	d223      	bcs.n	80042a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fd8c 	bl	8004d80 <RCC_SetFlashLatencyFromMSIRange>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e3ba      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004272:	4b73      	ldr	r3, [pc, #460]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a72      	ldr	r2, [pc, #456]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004278:	f043 0308 	orr.w	r3, r3, #8
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4b70      	ldr	r3, [pc, #448]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	496d      	ldr	r1, [pc, #436]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 800428c:	4313      	orrs	r3, r2
 800428e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004290:	4b6b      	ldr	r3, [pc, #428]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	4968      	ldr	r1, [pc, #416]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
 80042a4:	e025      	b.n	80042f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042a6:	4b66      	ldr	r3, [pc, #408]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a65      	ldr	r2, [pc, #404]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 80042ac:	f043 0308 	orr.w	r3, r3, #8
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	4b63      	ldr	r3, [pc, #396]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	4960      	ldr	r1, [pc, #384]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042c4:	4b5e      	ldr	r3, [pc, #376]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	495b      	ldr	r1, [pc, #364]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fd4c 	bl	8004d80 <RCC_SetFlashLatencyFromMSIRange>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e37a      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042f2:	f000 fc81 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 80042f6:	4602      	mov	r2, r0
 80042f8:	4b51      	ldr	r3, [pc, #324]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	4950      	ldr	r1, [pc, #320]	; (8004444 <HAL_RCC_OscConfig+0x274>)
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	fa22 f303 	lsr.w	r3, r2, r3
 800430e:	4a4e      	ldr	r2, [pc, #312]	; (8004448 <HAL_RCC_OscConfig+0x278>)
 8004310:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004312:	4b4e      	ldr	r3, [pc, #312]	; (800444c <HAL_RCC_OscConfig+0x27c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff f9d4 	bl	80036c4 <HAL_InitTick>
 800431c:	4603      	mov	r3, r0
 800431e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d052      	beq.n	80043cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	e35e      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d032      	beq.n	8004398 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004332:	4b43      	ldr	r3, [pc, #268]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a42      	ldr	r2, [pc, #264]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800433e:	f7ff fa11 	bl	8003764 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004346:	f7ff fa0d 	bl	8003764 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e347      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004358:	4b39      	ldr	r3, [pc, #228]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004364:	4b36      	ldr	r3, [pc, #216]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a35      	ldr	r2, [pc, #212]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 800436a:	f043 0308 	orr.w	r3, r3, #8
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	4b33      	ldr	r3, [pc, #204]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	4930      	ldr	r1, [pc, #192]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004382:	4b2f      	ldr	r3, [pc, #188]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	492b      	ldr	r1, [pc, #172]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004392:	4313      	orrs	r3, r2
 8004394:	604b      	str	r3, [r1, #4]
 8004396:	e01a      	b.n	80043ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004398:	4b29      	ldr	r3, [pc, #164]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a28      	ldr	r2, [pc, #160]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043a4:	f7ff f9de 	bl	8003764 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043ac:	f7ff f9da 	bl	8003764 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e314      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043be:	4b20      	ldr	r3, [pc, #128]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x1dc>
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d073      	beq.n	80044c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d005      	beq.n	80043ec <HAL_RCC_OscConfig+0x21c>
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b0c      	cmp	r3, #12
 80043e4:	d10e      	bne.n	8004404 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d10b      	bne.n	8004404 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	4b14      	ldr	r3, [pc, #80]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d063      	beq.n	80044c0 <HAL_RCC_OscConfig+0x2f0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d15f      	bne.n	80044c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e2f1      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440c:	d106      	bne.n	800441c <HAL_RCC_OscConfig+0x24c>
 800440e:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a0b      	ldr	r2, [pc, #44]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e025      	b.n	8004468 <HAL_RCC_OscConfig+0x298>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004424:	d114      	bne.n	8004450 <HAL_RCC_OscConfig+0x280>
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a05      	ldr	r2, [pc, #20]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 800442c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b03      	ldr	r3, [pc, #12]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a02      	ldr	r2, [pc, #8]	; (8004440 <HAL_RCC_OscConfig+0x270>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e013      	b.n	8004468 <HAL_RCC_OscConfig+0x298>
 8004440:	40021000 	.word	0x40021000
 8004444:	0800e09c 	.word	0x0800e09c
 8004448:	20000030 	.word	0x20000030
 800444c:	20000034 	.word	0x20000034
 8004450:	4ba0      	ldr	r3, [pc, #640]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a9f      	ldr	r2, [pc, #636]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 8004456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	4b9d      	ldr	r3, [pc, #628]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a9c      	ldr	r2, [pc, #624]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 8004462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d013      	beq.n	8004498 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7ff f978 	bl	8003764 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004478:	f7ff f974 	bl	8003764 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b64      	cmp	r3, #100	; 0x64
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e2ae      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800448a:	4b92      	ldr	r3, [pc, #584]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f0      	beq.n	8004478 <HAL_RCC_OscConfig+0x2a8>
 8004496:	e014      	b.n	80044c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7ff f964 	bl	8003764 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a0:	f7ff f960 	bl	8003764 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	; 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e29a      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044b2:	4b88      	ldr	r3, [pc, #544]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x2d0>
 80044be:	e000      	b.n	80044c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d060      	beq.n	8004590 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_OscConfig+0x310>
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b0c      	cmp	r3, #12
 80044d8:	d119      	bne.n	800450e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d116      	bne.n	800450e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044e0:	4b7c      	ldr	r3, [pc, #496]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_RCC_OscConfig+0x328>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e277      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f8:	4b76      	ldr	r3, [pc, #472]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	061b      	lsls	r3, r3, #24
 8004506:	4973      	ldr	r1, [pc, #460]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 8004508:	4313      	orrs	r3, r2
 800450a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800450c:	e040      	b.n	8004590 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d023      	beq.n	800455e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004516:	4b6f      	ldr	r3, [pc, #444]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6e      	ldr	r2, [pc, #440]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004522:	f7ff f91f 	bl	8003764 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800452a:	f7ff f91b 	bl	8003764 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e255      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800453c:	4b65      	ldr	r3, [pc, #404]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004548:	4b62      	ldr	r3, [pc, #392]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	061b      	lsls	r3, r3, #24
 8004556:	495f      	ldr	r1, [pc, #380]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 8004558:	4313      	orrs	r3, r2
 800455a:	604b      	str	r3, [r1, #4]
 800455c:	e018      	b.n	8004590 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455e:	4b5d      	ldr	r3, [pc, #372]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a5c      	ldr	r2, [pc, #368]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 8004564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7ff f8fb 	bl	8003764 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004572:	f7ff f8f7 	bl	8003764 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e231      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004584:	4b53      	ldr	r3, [pc, #332]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f0      	bne.n	8004572 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d03c      	beq.n	8004616 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01c      	beq.n	80045de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045a4:	4b4b      	ldr	r3, [pc, #300]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 80045a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045aa:	4a4a      	ldr	r2, [pc, #296]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b4:	f7ff f8d6 	bl	8003764 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045bc:	f7ff f8d2 	bl	8003764 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e20c      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ce:	4b41      	ldr	r3, [pc, #260]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 80045d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ef      	beq.n	80045bc <HAL_RCC_OscConfig+0x3ec>
 80045dc:	e01b      	b.n	8004616 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045de:	4b3d      	ldr	r3, [pc, #244]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 80045e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045e4:	4a3b      	ldr	r2, [pc, #236]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 80045e6:	f023 0301 	bic.w	r3, r3, #1
 80045ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ee:	f7ff f8b9 	bl	8003764 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f6:	f7ff f8b5 	bl	8003764 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e1ef      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004608:	4b32      	ldr	r3, [pc, #200]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 800460a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1ef      	bne.n	80045f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80a6 	beq.w	8004770 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004624:	2300      	movs	r3, #0
 8004626:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004628:	4b2a      	ldr	r3, [pc, #168]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 800462a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10d      	bne.n	8004650 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004634:	4b27      	ldr	r3, [pc, #156]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	4a26      	ldr	r2, [pc, #152]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 800463a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463e:	6593      	str	r3, [r2, #88]	; 0x58
 8004640:	4b24      	ldr	r3, [pc, #144]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 8004642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800464c:	2301      	movs	r3, #1
 800464e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004650:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <HAL_RCC_OscConfig+0x508>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d118      	bne.n	800468e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800465c:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <HAL_RCC_OscConfig+0x508>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <HAL_RCC_OscConfig+0x508>)
 8004662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004666:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004668:	f7ff f87c 	bl	8003764 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004670:	f7ff f878 	bl	8003764 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e1b2      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004682:	4b15      	ldr	r3, [pc, #84]	; (80046d8 <HAL_RCC_OscConfig+0x508>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d108      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4d8>
 8004696:	4b0f      	ldr	r3, [pc, #60]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	4a0d      	ldr	r2, [pc, #52]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046a6:	e029      	b.n	80046fc <HAL_RCC_OscConfig+0x52c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b05      	cmp	r3, #5
 80046ae:	d115      	bne.n	80046dc <HAL_RCC_OscConfig+0x50c>
 80046b0:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	4a07      	ldr	r2, [pc, #28]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 80046b8:	f043 0304 	orr.w	r3, r3, #4
 80046bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046c0:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	4a03      	ldr	r2, [pc, #12]	; (80046d4 <HAL_RCC_OscConfig+0x504>)
 80046c8:	f043 0301 	orr.w	r3, r3, #1
 80046cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046d0:	e014      	b.n	80046fc <HAL_RCC_OscConfig+0x52c>
 80046d2:	bf00      	nop
 80046d4:	40021000 	.word	0x40021000
 80046d8:	40007000 	.word	0x40007000
 80046dc:	4b9a      	ldr	r3, [pc, #616]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e2:	4a99      	ldr	r2, [pc, #612]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046ec:	4b96      	ldr	r3, [pc, #600]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f2:	4a95      	ldr	r2, [pc, #596]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 80046f4:	f023 0304 	bic.w	r3, r3, #4
 80046f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d016      	beq.n	8004732 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7ff f82e 	bl	8003764 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800470a:	e00a      	b.n	8004722 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470c:	f7ff f82a 	bl	8003764 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	f241 3288 	movw	r2, #5000	; 0x1388
 800471a:	4293      	cmp	r3, r2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e162      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004722:	4b89      	ldr	r3, [pc, #548]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 8004724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0ed      	beq.n	800470c <HAL_RCC_OscConfig+0x53c>
 8004730:	e015      	b.n	800475e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7ff f817 	bl	8003764 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7ff f813 	bl	8003764 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f241 3288 	movw	r2, #5000	; 0x1388
 8004748:	4293      	cmp	r3, r2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e14b      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004750:	4b7d      	ldr	r3, [pc, #500]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1ed      	bne.n	800473a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800475e:	7ffb      	ldrb	r3, [r7, #31]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d105      	bne.n	8004770 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004764:	4b78      	ldr	r3, [pc, #480]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 8004766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004768:	4a77      	ldr	r2, [pc, #476]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 800476a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800476e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d03c      	beq.n	80047f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01c      	beq.n	80047be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004784:	4b70      	ldr	r3, [pc, #448]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 8004786:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800478a:	4a6f      	ldr	r2, [pc, #444]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004794:	f7fe ffe6 	bl	8003764 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800479c:	f7fe ffe2 	bl	8003764 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e11c      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047ae:	4b66      	ldr	r3, [pc, #408]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 80047b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0ef      	beq.n	800479c <HAL_RCC_OscConfig+0x5cc>
 80047bc:	e01b      	b.n	80047f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047be:	4b62      	ldr	r3, [pc, #392]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 80047c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047c4:	4a60      	ldr	r2, [pc, #384]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ce:	f7fe ffc9 	bl	8003764 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047d6:	f7fe ffc5 	bl	8003764 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e0ff      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047e8:	4b57      	ldr	r3, [pc, #348]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 80047ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ef      	bne.n	80047d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 80f3 	beq.w	80049e6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	2b02      	cmp	r3, #2
 8004806:	f040 80c9 	bne.w	800499c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800480a:	4b4f      	ldr	r3, [pc, #316]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f003 0203 	and.w	r2, r3, #3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	429a      	cmp	r2, r3
 800481c:	d12c      	bne.n	8004878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	3b01      	subs	r3, #1
 800482a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d123      	bne.n	8004878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d11b      	bne.n	8004878 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d113      	bne.n	8004878 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	3b01      	subs	r3, #1
 800485e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d109      	bne.n	8004878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	3b01      	subs	r3, #1
 8004872:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004874:	429a      	cmp	r2, r3
 8004876:	d06b      	beq.n	8004950 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b0c      	cmp	r3, #12
 800487c:	d062      	beq.n	8004944 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800487e:	4b32      	ldr	r3, [pc, #200]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e0ac      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800488e:	4b2e      	ldr	r3, [pc, #184]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2d      	ldr	r2, [pc, #180]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 8004894:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004898:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800489a:	f7fe ff63 	bl	8003764 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a2:	f7fe ff5f 	bl	8003764 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e099      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b4:	4b24      	ldr	r3, [pc, #144]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1f0      	bne.n	80048a2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048c0:	4b21      	ldr	r3, [pc, #132]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	4b21      	ldr	r3, [pc, #132]	; (800494c <HAL_RCC_OscConfig+0x77c>)
 80048c6:	4013      	ands	r3, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048d0:	3a01      	subs	r2, #1
 80048d2:	0112      	lsls	r2, r2, #4
 80048d4:	4311      	orrs	r1, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048da:	0212      	lsls	r2, r2, #8
 80048dc:	4311      	orrs	r1, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048e2:	0852      	lsrs	r2, r2, #1
 80048e4:	3a01      	subs	r2, #1
 80048e6:	0552      	lsls	r2, r2, #21
 80048e8:	4311      	orrs	r1, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048ee:	0852      	lsrs	r2, r2, #1
 80048f0:	3a01      	subs	r2, #1
 80048f2:	0652      	lsls	r2, r2, #25
 80048f4:	4311      	orrs	r1, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048fa:	06d2      	lsls	r2, r2, #27
 80048fc:	430a      	orrs	r2, r1
 80048fe:	4912      	ldr	r1, [pc, #72]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 8004900:	4313      	orrs	r3, r2
 8004902:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004904:	4b10      	ldr	r3, [pc, #64]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a0f      	ldr	r2, [pc, #60]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 800490a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800490e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004910:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4a0c      	ldr	r2, [pc, #48]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 8004916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800491a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800491c:	f7fe ff22 	bl	8003764 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004924:	f7fe ff1e 	bl	8003764 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e058      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004936:	4b04      	ldr	r3, [pc, #16]	; (8004948 <HAL_RCC_OscConfig+0x778>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004942:	e050      	b.n	80049e6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e04f      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
 8004948:	40021000 	.word	0x40021000
 800494c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004950:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <HAL_RCC_OscConfig+0x820>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d144      	bne.n	80049e6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800495c:	4b24      	ldr	r3, [pc, #144]	; (80049f0 <HAL_RCC_OscConfig+0x820>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a23      	ldr	r2, [pc, #140]	; (80049f0 <HAL_RCC_OscConfig+0x820>)
 8004962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004966:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004968:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <HAL_RCC_OscConfig+0x820>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4a20      	ldr	r2, [pc, #128]	; (80049f0 <HAL_RCC_OscConfig+0x820>)
 800496e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004972:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004974:	f7fe fef6 	bl	8003764 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497c:	f7fe fef2 	bl	8003764 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e02c      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498e:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <HAL_RCC_OscConfig+0x820>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0x7ac>
 800499a:	e024      	b.n	80049e6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b0c      	cmp	r3, #12
 80049a0:	d01f      	beq.n	80049e2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a2:	4b13      	ldr	r3, [pc, #76]	; (80049f0 <HAL_RCC_OscConfig+0x820>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a12      	ldr	r2, [pc, #72]	; (80049f0 <HAL_RCC_OscConfig+0x820>)
 80049a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ae:	f7fe fed9 	bl	8003764 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b6:	f7fe fed5 	bl	8003764 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e00f      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c8:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <HAL_RCC_OscConfig+0x820>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_RCC_OscConfig+0x820>)
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	4905      	ldr	r1, [pc, #20]	; (80049f0 <HAL_RCC_OscConfig+0x820>)
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <HAL_RCC_OscConfig+0x824>)
 80049dc:	4013      	ands	r3, r2
 80049de:	60cb      	str	r3, [r1, #12]
 80049e0:	e001      	b.n	80049e6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3720      	adds	r7, #32
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40021000 	.word	0x40021000
 80049f4:	feeefffc 	.word	0xfeeefffc

080049f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0e7      	b.n	8004bdc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a0c:	4b75      	ldr	r3, [pc, #468]	; (8004be4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d910      	bls.n	8004a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1a:	4b72      	ldr	r3, [pc, #456]	; (8004be4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 0207 	bic.w	r2, r3, #7
 8004a22:	4970      	ldr	r1, [pc, #448]	; (8004be4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2a:	4b6e      	ldr	r3, [pc, #440]	; (8004be4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d001      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0cf      	b.n	8004bdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d010      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	4b66      	ldr	r3, [pc, #408]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d908      	bls.n	8004a6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a58:	4b63      	ldr	r3, [pc, #396]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4960      	ldr	r1, [pc, #384]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d04c      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d107      	bne.n	8004a8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a7e:	4b5a      	ldr	r3, [pc, #360]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d121      	bne.n	8004ace <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e0a6      	b.n	8004bdc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d107      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a96:	4b54      	ldr	r3, [pc, #336]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d115      	bne.n	8004ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e09a      	b.n	8004bdc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d107      	bne.n	8004abe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aae:	4b4e      	ldr	r3, [pc, #312]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e08e      	b.n	8004bdc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004abe:	4b4a      	ldr	r3, [pc, #296]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e086      	b.n	8004bdc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ace:	4b46      	ldr	r3, [pc, #280]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f023 0203 	bic.w	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4943      	ldr	r1, [pc, #268]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae0:	f7fe fe40 	bl	8003764 <HAL_GetTick>
 8004ae4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae8:	f7fe fe3c 	bl	8003764 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e06e      	b.n	8004bdc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	4b3a      	ldr	r3, [pc, #232]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 020c 	and.w	r2, r3, #12
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d1eb      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d010      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	4b31      	ldr	r3, [pc, #196]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d208      	bcs.n	8004b3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b2c:	4b2e      	ldr	r3, [pc, #184]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	492b      	ldr	r1, [pc, #172]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b3e:	4b29      	ldr	r3, [pc, #164]	; (8004be4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d210      	bcs.n	8004b6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4c:	4b25      	ldr	r3, [pc, #148]	; (8004be4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f023 0207 	bic.w	r2, r3, #7
 8004b54:	4923      	ldr	r1, [pc, #140]	; (8004be4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5c:	4b21      	ldr	r3, [pc, #132]	; (8004be4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d001      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e036      	b.n	8004bdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b7a:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	4918      	ldr	r1, [pc, #96]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d009      	beq.n	8004bac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b98:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	4910      	ldr	r1, [pc, #64]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bac:	f000 f824 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	490b      	ldr	r1, [pc, #44]	; (8004bec <HAL_RCC_ClockConfig+0x1f4>)
 8004bbe:	5ccb      	ldrb	r3, [r1, r3]
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc8:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <HAL_RCC_ClockConfig+0x1f8>)
 8004bca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bcc:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <HAL_RCC_ClockConfig+0x1fc>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fe fd77 	bl	80036c4 <HAL_InitTick>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004bda:	7afb      	ldrb	r3, [r7, #11]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40022000 	.word	0x40022000
 8004be8:	40021000 	.word	0x40021000
 8004bec:	0800e09c 	.word	0x0800e09c
 8004bf0:	20000030 	.word	0x20000030
 8004bf4:	20000034 	.word	0x20000034

08004bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b089      	sub	sp, #36	; 0x24
 8004bfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	2300      	movs	r3, #0
 8004c04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c06:	4b3e      	ldr	r3, [pc, #248]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c10:	4b3b      	ldr	r3, [pc, #236]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x34>
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b0c      	cmp	r3, #12
 8004c24:	d121      	bne.n	8004c6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d11e      	bne.n	8004c6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c2c:	4b34      	ldr	r3, [pc, #208]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d107      	bne.n	8004c48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c38:	4b31      	ldr	r3, [pc, #196]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c3e:	0a1b      	lsrs	r3, r3, #8
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	e005      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c48:	4b2d      	ldr	r3, [pc, #180]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	091b      	lsrs	r3, r3, #4
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c54:	4a2b      	ldr	r2, [pc, #172]	; (8004d04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10d      	bne.n	8004c80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c68:	e00a      	b.n	8004c80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d102      	bne.n	8004c76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c70:	4b25      	ldr	r3, [pc, #148]	; (8004d08 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	e004      	b.n	8004c80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c7c:	4b23      	ldr	r3, [pc, #140]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x114>)
 8004c7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b0c      	cmp	r3, #12
 8004c84:	d134      	bne.n	8004cf0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c86:	4b1e      	ldr	r3, [pc, #120]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d003      	beq.n	8004c9e <HAL_RCC_GetSysClockFreq+0xa6>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d003      	beq.n	8004ca4 <HAL_RCC_GetSysClockFreq+0xac>
 8004c9c:	e005      	b.n	8004caa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c9e:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ca0:	617b      	str	r3, [r7, #20]
      break;
 8004ca2:	e005      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ca4:	4b19      	ldr	r3, [pc, #100]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ca6:	617b      	str	r3, [r7, #20]
      break;
 8004ca8:	e002      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	617b      	str	r3, [r7, #20]
      break;
 8004cae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cb0:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	3301      	adds	r3, #1
 8004cbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cbe:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	0a1b      	lsrs	r3, r3, #8
 8004cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	fb03 f202 	mul.w	r2, r3, r2
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	0e5b      	lsrs	r3, r3, #25
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cf0:	69bb      	ldr	r3, [r7, #24]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3724      	adds	r7, #36	; 0x24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40021000 	.word	0x40021000
 8004d04:	0800e0b4 	.word	0x0800e0b4
 8004d08:	00f42400 	.word	0x00f42400
 8004d0c:	007a1200 	.word	0x007a1200

08004d10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d14:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d16:	681b      	ldr	r3, [r3, #0]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	20000030 	.word	0x20000030

08004d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d2c:	f7ff fff0 	bl	8004d10 <HAL_RCC_GetHCLKFreq>
 8004d30:	4602      	mov	r2, r0
 8004d32:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	4904      	ldr	r1, [pc, #16]	; (8004d50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d3e:	5ccb      	ldrb	r3, [r1, r3]
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	0800e0ac 	.word	0x0800e0ac

08004d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d58:	f7ff ffda 	bl	8004d10 <HAL_RCC_GetHCLKFreq>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	0adb      	lsrs	r3, r3, #11
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	4904      	ldr	r1, [pc, #16]	; (8004d7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d6a:	5ccb      	ldrb	r3, [r1, r3]
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	0800e0ac 	.word	0x0800e0ac

08004d80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d8c:	4b2a      	ldr	r3, [pc, #168]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d98:	f7ff f9b6 	bl	8004108 <HAL_PWREx_GetVoltageRange>
 8004d9c:	6178      	str	r0, [r7, #20]
 8004d9e:	e014      	b.n	8004dca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004da0:	4b25      	ldr	r3, [pc, #148]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da4:	4a24      	ldr	r2, [pc, #144]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004daa:	6593      	str	r3, [r2, #88]	; 0x58
 8004dac:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004db8:	f7ff f9a6 	bl	8004108 <HAL_PWREx_GetVoltageRange>
 8004dbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dbe:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	4a1d      	ldr	r2, [pc, #116]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd0:	d10b      	bne.n	8004dea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b80      	cmp	r3, #128	; 0x80
 8004dd6:	d919      	bls.n	8004e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2ba0      	cmp	r3, #160	; 0xa0
 8004ddc:	d902      	bls.n	8004de4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dde:	2302      	movs	r3, #2
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	e013      	b.n	8004e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004de4:	2301      	movs	r3, #1
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e010      	b.n	8004e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b80      	cmp	r3, #128	; 0x80
 8004dee:	d902      	bls.n	8004df6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004df0:	2303      	movs	r3, #3
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	e00a      	b.n	8004e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d102      	bne.n	8004e02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	e004      	b.n	8004e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b70      	cmp	r3, #112	; 0x70
 8004e06:	d101      	bne.n	8004e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e08:	2301      	movs	r3, #1
 8004e0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f023 0207 	bic.w	r2, r3, #7
 8004e14:	4909      	ldr	r1, [pc, #36]	; (8004e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e1c:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d001      	beq.n	8004e2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	40022000 	.word	0x40022000

08004e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e48:	2300      	movs	r3, #0
 8004e4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d031      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e64:	d01a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004e66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e6a:	d814      	bhi.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e74:	d10f      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004e76:	4b5d      	ldr	r3, [pc, #372]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	4a5c      	ldr	r2, [pc, #368]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e80:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e82:	e00c      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	2100      	movs	r1, #0
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fa22 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 8004e90:	4603      	mov	r3, r0
 8004e92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e94:	e003      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	74fb      	strb	r3, [r7, #19]
      break;
 8004e9a:	e000      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10b      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea4:	4b51      	ldr	r3, [pc, #324]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb2:	494e      	ldr	r1, [pc, #312]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004eba:	e001      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ebc:	7cfb      	ldrb	r3, [r7, #19]
 8004ebe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 809e 	beq.w	800500a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ed2:	4b46      	ldr	r3, [pc, #280]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00d      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee8:	4b40      	ldr	r3, [pc, #256]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eec:	4a3f      	ldr	r2, [pc, #252]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef4:	4b3d      	ldr	r3, [pc, #244]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f00:	2301      	movs	r3, #1
 8004f02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f04:	4b3a      	ldr	r3, [pc, #232]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a39      	ldr	r2, [pc, #228]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f10:	f7fe fc28 	bl	8003764 <HAL_GetTick>
 8004f14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f16:	e009      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f18:	f7fe fc24 	bl	8003764 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d902      	bls.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	74fb      	strb	r3, [r7, #19]
        break;
 8004f2a:	e005      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f2c:	4b30      	ldr	r3, [pc, #192]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ef      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d15a      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f3e:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01e      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d019      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f5a:	4b24      	ldr	r3, [pc, #144]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f66:	4b21      	ldr	r3, [pc, #132]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f76:	4b1d      	ldr	r3, [pc, #116]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f86:	4a19      	ldr	r2, [pc, #100]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d016      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7fe fbe4 	bl	8003764 <HAL_GetTick>
 8004f9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f9e:	e00b      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa0:	f7fe fbe0 	bl	8003764 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d902      	bls.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	74fb      	strb	r3, [r7, #19]
            break;
 8004fb6:	e006      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0ec      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004fc6:	7cfb      	ldrb	r3, [r7, #19]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10b      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fcc:	4b07      	ldr	r3, [pc, #28]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fda:	4904      	ldr	r1, [pc, #16]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fe2:	e009      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	74bb      	strb	r3, [r7, #18]
 8004fe8:	e006      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004fea:	bf00      	nop
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff4:	7cfb      	ldrb	r3, [r7, #19]
 8004ff6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ff8:	7c7b      	ldrb	r3, [r7, #17]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d105      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ffe:	4b8d      	ldr	r3, [pc, #564]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005002:	4a8c      	ldr	r2, [pc, #560]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005008:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005016:	4b87      	ldr	r3, [pc, #540]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501c:	f023 0203 	bic.w	r2, r3, #3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	4983      	ldr	r1, [pc, #524]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005038:	4b7e      	ldr	r3, [pc, #504]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f023 020c 	bic.w	r2, r3, #12
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	497b      	ldr	r1, [pc, #492]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800505a:	4b76      	ldr	r3, [pc, #472]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	4972      	ldr	r1, [pc, #456]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800507c:	4b6d      	ldr	r3, [pc, #436]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	496a      	ldr	r1, [pc, #424]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800509e:	4b65      	ldr	r3, [pc, #404]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ac:	4961      	ldr	r1, [pc, #388]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050c0:	4b5c      	ldr	r3, [pc, #368]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	4959      	ldr	r1, [pc, #356]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050e2:	4b54      	ldr	r3, [pc, #336]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	4950      	ldr	r1, [pc, #320]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005104:	4b4b      	ldr	r3, [pc, #300]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005112:	4948      	ldr	r1, [pc, #288]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005126:	4b43      	ldr	r3, [pc, #268]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	493f      	ldr	r1, [pc, #252]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d028      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005148:	4b3a      	ldr	r3, [pc, #232]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005156:	4937      	ldr	r1, [pc, #220]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005162:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005166:	d106      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005168:	4b32      	ldr	r3, [pc, #200]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4a31      	ldr	r2, [pc, #196]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800516e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005172:	60d3      	str	r3, [r2, #12]
 8005174:	e011      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800517e:	d10c      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3304      	adds	r3, #4
 8005184:	2101      	movs	r1, #1
 8005186:	4618      	mov	r0, r3
 8005188:	f000 f8a4 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005190:	7cfb      	ldrb	r3, [r7, #19]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8005196:	7cfb      	ldrb	r3, [r7, #19]
 8005198:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d028      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051a6:	4b23      	ldr	r3, [pc, #140]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b4:	491f      	ldr	r1, [pc, #124]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051c4:	d106      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c6:	4b1b      	ldr	r3, [pc, #108]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	4a1a      	ldr	r2, [pc, #104]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80051cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d0:	60d3      	str	r3, [r2, #12]
 80051d2:	e011      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051dc:	d10c      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3304      	adds	r3, #4
 80051e2:	2101      	movs	r1, #1
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 f875 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 80051ea:	4603      	mov	r3, r0
 80051ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ee:	7cfb      	ldrb	r3, [r7, #19]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80051f4:	7cfb      	ldrb	r3, [r7, #19]
 80051f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d02b      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005204:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005212:	4908      	ldr	r1, [pc, #32]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005222:	d109      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005224:	4b03      	ldr	r3, [pc, #12]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4a02      	ldr	r2, [pc, #8]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800522a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800522e:	60d3      	str	r3, [r2, #12]
 8005230:	e014      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005232:	bf00      	nop
 8005234:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005240:	d10c      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3304      	adds	r3, #4
 8005246:	2101      	movs	r1, #1
 8005248:	4618      	mov	r0, r3
 800524a:	f000 f843 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 800524e:	4603      	mov	r3, r0
 8005250:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005252:	7cfb      	ldrb	r3, [r7, #19]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8005258:	7cfb      	ldrb	r3, [r7, #19]
 800525a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01c      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005268:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	4916      	ldr	r1, [pc, #88]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005286:	d10c      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3304      	adds	r3, #4
 800528c:	2102      	movs	r1, #2
 800528e:	4618      	mov	r0, r3
 8005290:	f000 f820 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005298:	7cfb      	ldrb	r3, [r7, #19]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800529e:	7cfb      	ldrb	r3, [r7, #19]
 80052a0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052ae:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052bc:	4904      	ldr	r1, [pc, #16]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40021000 	.word	0x40021000

080052d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052e2:	4b74      	ldr	r3, [pc, #464]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d018      	beq.n	8005320 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052ee:	4b71      	ldr	r3, [pc, #452]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0203 	and.w	r2, r3, #3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d10d      	bne.n	800531a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
       ||
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005306:	4b6b      	ldr	r3, [pc, #428]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	091b      	lsrs	r3, r3, #4
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
       ||
 8005316:	429a      	cmp	r2, r3
 8005318:	d047      	beq.n	80053aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	73fb      	strb	r3, [r7, #15]
 800531e:	e044      	b.n	80053aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d018      	beq.n	800535a <RCCEx_PLLSAI1_Config+0x86>
 8005328:	2b03      	cmp	r3, #3
 800532a:	d825      	bhi.n	8005378 <RCCEx_PLLSAI1_Config+0xa4>
 800532c:	2b01      	cmp	r3, #1
 800532e:	d002      	beq.n	8005336 <RCCEx_PLLSAI1_Config+0x62>
 8005330:	2b02      	cmp	r3, #2
 8005332:	d009      	beq.n	8005348 <RCCEx_PLLSAI1_Config+0x74>
 8005334:	e020      	b.n	8005378 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005336:	4b5f      	ldr	r3, [pc, #380]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d11d      	bne.n	800537e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005346:	e01a      	b.n	800537e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005348:	4b5a      	ldr	r3, [pc, #360]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005350:	2b00      	cmp	r3, #0
 8005352:	d116      	bne.n	8005382 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005358:	e013      	b.n	8005382 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800535a:	4b56      	ldr	r3, [pc, #344]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10f      	bne.n	8005386 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005366:	4b53      	ldr	r3, [pc, #332]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d109      	bne.n	8005386 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005376:	e006      	b.n	8005386 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
      break;
 800537c:	e004      	b.n	8005388 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800537e:	bf00      	nop
 8005380:	e002      	b.n	8005388 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005382:	bf00      	nop
 8005384:	e000      	b.n	8005388 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005386:	bf00      	nop
    }

    if(status == HAL_OK)
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10d      	bne.n	80053aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800538e:	4b49      	ldr	r3, [pc, #292]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6819      	ldr	r1, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	3b01      	subs	r3, #1
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	430b      	orrs	r3, r1
 80053a4:	4943      	ldr	r1, [pc, #268]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d17c      	bne.n	80054aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053b0:	4b40      	ldr	r3, [pc, #256]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a3f      	ldr	r2, [pc, #252]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053bc:	f7fe f9d2 	bl	8003764 <HAL_GetTick>
 80053c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053c2:	e009      	b.n	80053d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053c4:	f7fe f9ce 	bl	8003764 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d902      	bls.n	80053d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	73fb      	strb	r3, [r7, #15]
        break;
 80053d6:	e005      	b.n	80053e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053d8:	4b36      	ldr	r3, [pc, #216]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1ef      	bne.n	80053c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d15f      	bne.n	80054aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d110      	bne.n	8005412 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053f0:	4b30      	ldr	r3, [pc, #192]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80053f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6892      	ldr	r2, [r2, #8]
 8005400:	0211      	lsls	r1, r2, #8
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68d2      	ldr	r2, [r2, #12]
 8005406:	06d2      	lsls	r2, r2, #27
 8005408:	430a      	orrs	r2, r1
 800540a:	492a      	ldr	r1, [pc, #168]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800540c:	4313      	orrs	r3, r2
 800540e:	610b      	str	r3, [r1, #16]
 8005410:	e027      	b.n	8005462 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d112      	bne.n	800543e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005418:	4b26      	ldr	r3, [pc, #152]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005420:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6892      	ldr	r2, [r2, #8]
 8005428:	0211      	lsls	r1, r2, #8
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6912      	ldr	r2, [r2, #16]
 800542e:	0852      	lsrs	r2, r2, #1
 8005430:	3a01      	subs	r2, #1
 8005432:	0552      	lsls	r2, r2, #21
 8005434:	430a      	orrs	r2, r1
 8005436:	491f      	ldr	r1, [pc, #124]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005438:	4313      	orrs	r3, r2
 800543a:	610b      	str	r3, [r1, #16]
 800543c:	e011      	b.n	8005462 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800543e:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005446:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6892      	ldr	r2, [r2, #8]
 800544e:	0211      	lsls	r1, r2, #8
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6952      	ldr	r2, [r2, #20]
 8005454:	0852      	lsrs	r2, r2, #1
 8005456:	3a01      	subs	r2, #1
 8005458:	0652      	lsls	r2, r2, #25
 800545a:	430a      	orrs	r2, r1
 800545c:	4915      	ldr	r1, [pc, #84]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800545e:	4313      	orrs	r3, r2
 8005460:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005462:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a13      	ldr	r2, [pc, #76]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800546c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800546e:	f7fe f979 	bl	8003764 <HAL_GetTick>
 8005472:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005474:	e009      	b.n	800548a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005476:	f7fe f975 	bl	8003764 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d902      	bls.n	800548a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	73fb      	strb	r3, [r7, #15]
          break;
 8005488:	e005      	b.n	8005496 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800548a:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0ef      	beq.n	8005476 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d106      	bne.n	80054aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	4903      	ldr	r1, [pc, #12]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40021000 	.word	0x40021000

080054b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e095      	b.n	80055f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d108      	bne.n	80054e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054da:	d009      	beq.n	80054f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	61da      	str	r2, [r3, #28]
 80054e2:	e005      	b.n	80054f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fc fae0 	bl	8001ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005526:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005530:	d902      	bls.n	8005538 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e002      	b.n	800553e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800553c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005546:	d007      	beq.n	8005558 <HAL_SPI_Init+0xa0>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005550:	d002      	beq.n	8005558 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559a:	ea42 0103 	orr.w	r1, r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	0c1b      	lsrs	r3, r3, #16
 80055b4:	f003 0204 	and.w	r2, r3, #4
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055d4:	ea42 0103 	orr.w	r1, r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b08a      	sub	sp, #40	; 0x28
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800560c:	2301      	movs	r3, #1
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x26>
 8005620:	2302      	movs	r3, #2
 8005622:	e1fb      	b.n	8005a1c <HAL_SPI_TransmitReceive+0x41e>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800562c:	f7fe f89a 	bl	8003764 <HAL_GetTick>
 8005630:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005638:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005640:	887b      	ldrh	r3, [r7, #2]
 8005642:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005644:	887b      	ldrh	r3, [r7, #2]
 8005646:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005648:	7efb      	ldrb	r3, [r7, #27]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d00e      	beq.n	800566c <HAL_SPI_TransmitReceive+0x6e>
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005654:	d106      	bne.n	8005664 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d102      	bne.n	8005664 <HAL_SPI_TransmitReceive+0x66>
 800565e:	7efb      	ldrb	r3, [r7, #27]
 8005660:	2b04      	cmp	r3, #4
 8005662:	d003      	beq.n	800566c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005664:	2302      	movs	r3, #2
 8005666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800566a:	e1cd      	b.n	8005a08 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d005      	beq.n	800567e <HAL_SPI_TransmitReceive+0x80>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_SPI_TransmitReceive+0x80>
 8005678:	887b      	ldrh	r3, [r7, #2]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d103      	bne.n	8005686 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005684:	e1c0      	b.n	8005a08 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b04      	cmp	r3, #4
 8005690:	d003      	beq.n	800569a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2205      	movs	r2, #5
 8005696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	887a      	ldrh	r2, [r7, #2]
 80056aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	887a      	ldrh	r2, [r7, #2]
 80056b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	887a      	ldrh	r2, [r7, #2]
 80056c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	887a      	ldrh	r2, [r7, #2]
 80056c6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056dc:	d802      	bhi.n	80056e4 <HAL_SPI_TransmitReceive+0xe6>
 80056de:	8a3b      	ldrh	r3, [r7, #16]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d908      	bls.n	80056f6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056f2:	605a      	str	r2, [r3, #4]
 80056f4:	e007      	b.n	8005706 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005704:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d007      	beq.n	8005724 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005722:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800572c:	d97c      	bls.n	8005828 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_SPI_TransmitReceive+0x13e>
 8005736:	8a7b      	ldrh	r3, [r7, #18]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d169      	bne.n	8005810 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	881a      	ldrh	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	1c9a      	adds	r2, r3, #2
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005760:	e056      	b.n	8005810 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b02      	cmp	r3, #2
 800576e:	d11b      	bne.n	80057a8 <HAL_SPI_TransmitReceive+0x1aa>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d016      	beq.n	80057a8 <HAL_SPI_TransmitReceive+0x1aa>
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	2b01      	cmp	r3, #1
 800577e:	d113      	bne.n	80057a8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	881a      	ldrh	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	1c9a      	adds	r2, r3, #2
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d11c      	bne.n	80057f0 <HAL_SPI_TransmitReceive+0x1f2>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d016      	beq.n	80057f0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	b292      	uxth	r2, r2
 80057ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	1c9a      	adds	r2, r3, #2
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057ec:	2301      	movs	r3, #1
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057f0:	f7fd ffb8 	bl	8003764 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d807      	bhi.n	8005810 <HAL_SPI_TransmitReceive+0x212>
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005806:	d003      	beq.n	8005810 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800580e:	e0fb      	b.n	8005a08 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1a3      	bne.n	8005762 <HAL_SPI_TransmitReceive+0x164>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d19d      	bne.n	8005762 <HAL_SPI_TransmitReceive+0x164>
 8005826:	e0df      	b.n	80059e8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x23a>
 8005830:	8a7b      	ldrh	r3, [r7, #18]
 8005832:	2b01      	cmp	r3, #1
 8005834:	f040 80cb 	bne.w	80059ce <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b01      	cmp	r3, #1
 8005840:	d912      	bls.n	8005868 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	881a      	ldrh	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	1c9a      	adds	r2, r3, #2
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b02      	subs	r3, #2
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005866:	e0b2      	b.n	80059ce <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	330c      	adds	r3, #12
 8005872:	7812      	ldrb	r2, [r2, #0]
 8005874:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800588e:	e09e      	b.n	80059ce <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b02      	cmp	r3, #2
 800589c:	d134      	bne.n	8005908 <HAL_SPI_TransmitReceive+0x30a>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d02f      	beq.n	8005908 <HAL_SPI_TransmitReceive+0x30a>
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d12c      	bne.n	8005908 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d912      	bls.n	80058de <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	881a      	ldrh	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	1c9a      	adds	r2, r3, #2
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b02      	subs	r3, #2
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058dc:	e012      	b.n	8005904 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	330c      	adds	r3, #12
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b01      	cmp	r3, #1
 8005914:	d148      	bne.n	80059a8 <HAL_SPI_TransmitReceive+0x3aa>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d042      	beq.n	80059a8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b01      	cmp	r3, #1
 800592c:	d923      	bls.n	8005976 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	b292      	uxth	r2, r2
 800593a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	1c9a      	adds	r2, r3, #2
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b02      	subs	r3, #2
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b01      	cmp	r3, #1
 8005962:	d81f      	bhi.n	80059a4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005972:	605a      	str	r2, [r3, #4]
 8005974:	e016      	b.n	80059a4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f103 020c 	add.w	r2, r3, #12
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	7812      	ldrb	r2, [r2, #0]
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059a4:	2301      	movs	r3, #1
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059a8:	f7fd fedc 	bl	8003764 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d803      	bhi.n	80059c0 <HAL_SPI_TransmitReceive+0x3c2>
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059be:	d102      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x3c8>
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80059cc:	e01c      	b.n	8005a08 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f47f af5b 	bne.w	8005890 <HAL_SPI_TransmitReceive+0x292>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f47f af54 	bne.w	8005890 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f937 	bl	8005c60 <SPI_EndRxTxTransaction>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d006      	beq.n	8005a06 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2220      	movs	r2, #32
 8005a02:	661a      	str	r2, [r3, #96]	; 0x60
 8005a04:	e000      	b.n	8005a08 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005a06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3728      	adds	r7, #40	; 0x28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	4613      	mov	r3, r2
 8005a32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a34:	f7fd fe96 	bl	8003764 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	1a9b      	subs	r3, r3, r2
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	4413      	add	r3, r2
 8005a42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a44:	f7fd fe8e 	bl	8003764 <HAL_GetTick>
 8005a48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a4a:	4b39      	ldr	r3, [pc, #228]	; (8005b30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	015b      	lsls	r3, r3, #5
 8005a50:	0d1b      	lsrs	r3, r3, #20
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	fb02 f303 	mul.w	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a5a:	e054      	b.n	8005b06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	d050      	beq.n	8005b06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a64:	f7fd fe7e 	bl	8003764 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d902      	bls.n	8005a7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d13d      	bne.n	8005af6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a92:	d111      	bne.n	8005ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9c:	d004      	beq.n	8005aa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa6:	d107      	bne.n	8005ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac0:	d10f      	bne.n	8005ae2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ae0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e017      	b.n	8005b26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	bf0c      	ite	eq
 8005b16:	2301      	moveq	r3, #1
 8005b18:	2300      	movne	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d19b      	bne.n	8005a5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000030 	.word	0x20000030

08005b34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08a      	sub	sp, #40	; 0x28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b46:	f7fd fe0d 	bl	8003764 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	1a9b      	subs	r3, r3, r2
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	4413      	add	r3, r2
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005b56:	f7fd fe05 	bl	8003764 <HAL_GetTick>
 8005b5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	330c      	adds	r3, #12
 8005b62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b64:	4b3d      	ldr	r3, [pc, #244]	; (8005c5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	00da      	lsls	r2, r3, #3
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	0d1b      	lsrs	r3, r3, #20
 8005b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b76:	fb02 f303 	mul.w	r3, r2, r3
 8005b7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b7c:	e060      	b.n	8005c40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b84:	d107      	bne.n	8005b96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d104      	bne.n	8005b96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d050      	beq.n	8005c40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b9e:	f7fd fde1 	bl	8003764 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d902      	bls.n	8005bb4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d13d      	bne.n	8005c30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bcc:	d111      	bne.n	8005bf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd6:	d004      	beq.n	8005be2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be0:	d107      	bne.n	8005bf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfa:	d10f      	bne.n	8005c1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e010      	b.n	8005c52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d196      	bne.n	8005b7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3728      	adds	r7, #40	; 0x28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20000030 	.word	0x20000030

08005c60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af02      	add	r7, sp, #8
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f7ff ff5b 	bl	8005b34 <SPI_WaitFifoStateUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d007      	beq.n	8005c94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c88:	f043 0220 	orr.w	r2, r3, #32
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e027      	b.n	8005ce4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2180      	movs	r1, #128	; 0x80
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7ff fec0 	bl	8005a24 <SPI_WaitFlagStateUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cae:	f043 0220 	orr.w	r2, r3, #32
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e014      	b.n	8005ce4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f7ff ff34 	bl	8005b34 <SPI_WaitFifoStateUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d007      	beq.n	8005ce2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd6:	f043 0220 	orr.w	r2, r3, #32
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e000      	b.n	8005ce4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e049      	b.n	8005d92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fc f9b6 	bl	8002084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	f000 fba0 	bl	8006470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d001      	beq.n	8005db4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e033      	b.n	8005e1c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a19      	ldr	r2, [pc, #100]	; (8005e28 <HAL_TIM_Base_Start+0x8c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d009      	beq.n	8005dda <HAL_TIM_Base_Start+0x3e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dce:	d004      	beq.n	8005dda <HAL_TIM_Base_Start+0x3e>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a15      	ldr	r2, [pc, #84]	; (8005e2c <HAL_TIM_Base_Start+0x90>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d115      	bne.n	8005e06 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	4b13      	ldr	r3, [pc, #76]	; (8005e30 <HAL_TIM_Base_Start+0x94>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b06      	cmp	r3, #6
 8005dea:	d015      	beq.n	8005e18 <HAL_TIM_Base_Start+0x7c>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df2:	d011      	beq.n	8005e18 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0201 	orr.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e04:	e008      	b.n	8005e18 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0201 	orr.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	e000      	b.n	8005e1a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	40012c00 	.word	0x40012c00
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	00010007 	.word	0x00010007

08005e34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e049      	b.n	8005eda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f841 	bl	8005ee2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4619      	mov	r1, r3
 8005e72:	4610      	mov	r0, r2
 8005e74:	f000 fafc 	bl	8006470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
	...

08005ef8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d109      	bne.n	8005f1c <HAL_TIM_PWM_Start+0x24>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	bf14      	ite	ne
 8005f14:	2301      	movne	r3, #1
 8005f16:	2300      	moveq	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	e03c      	b.n	8005f96 <HAL_TIM_PWM_Start+0x9e>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d109      	bne.n	8005f36 <HAL_TIM_PWM_Start+0x3e>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	bf14      	ite	ne
 8005f2e:	2301      	movne	r3, #1
 8005f30:	2300      	moveq	r3, #0
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	e02f      	b.n	8005f96 <HAL_TIM_PWM_Start+0x9e>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d109      	bne.n	8005f50 <HAL_TIM_PWM_Start+0x58>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	bf14      	ite	ne
 8005f48:	2301      	movne	r3, #1
 8005f4a:	2300      	moveq	r3, #0
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	e022      	b.n	8005f96 <HAL_TIM_PWM_Start+0x9e>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b0c      	cmp	r3, #12
 8005f54:	d109      	bne.n	8005f6a <HAL_TIM_PWM_Start+0x72>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	bf14      	ite	ne
 8005f62:	2301      	movne	r3, #1
 8005f64:	2300      	moveq	r3, #0
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	e015      	b.n	8005f96 <HAL_TIM_PWM_Start+0x9e>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b10      	cmp	r3, #16
 8005f6e:	d109      	bne.n	8005f84 <HAL_TIM_PWM_Start+0x8c>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	bf14      	ite	ne
 8005f7c:	2301      	movne	r3, #1
 8005f7e:	2300      	moveq	r3, #0
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	e008      	b.n	8005f96 <HAL_TIM_PWM_Start+0x9e>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	bf14      	ite	ne
 8005f90:	2301      	movne	r3, #1
 8005f92:	2300      	moveq	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e07e      	b.n	800609c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <HAL_TIM_PWM_Start+0xb6>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fac:	e023      	b.n	8005ff6 <HAL_TIM_PWM_Start+0xfe>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d104      	bne.n	8005fbe <HAL_TIM_PWM_Start+0xc6>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fbc:	e01b      	b.n	8005ff6 <HAL_TIM_PWM_Start+0xfe>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d104      	bne.n	8005fce <HAL_TIM_PWM_Start+0xd6>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fcc:	e013      	b.n	8005ff6 <HAL_TIM_PWM_Start+0xfe>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b0c      	cmp	r3, #12
 8005fd2:	d104      	bne.n	8005fde <HAL_TIM_PWM_Start+0xe6>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fdc:	e00b      	b.n	8005ff6 <HAL_TIM_PWM_Start+0xfe>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b10      	cmp	r3, #16
 8005fe2:	d104      	bne.n	8005fee <HAL_TIM_PWM_Start+0xf6>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fec:	e003      	b.n	8005ff6 <HAL_TIM_PWM_Start+0xfe>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fdb2 	bl	8006b68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a26      	ldr	r2, [pc, #152]	; (80060a4 <HAL_TIM_PWM_Start+0x1ac>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d009      	beq.n	8006022 <HAL_TIM_PWM_Start+0x12a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a25      	ldr	r2, [pc, #148]	; (80060a8 <HAL_TIM_PWM_Start+0x1b0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d004      	beq.n	8006022 <HAL_TIM_PWM_Start+0x12a>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a23      	ldr	r2, [pc, #140]	; (80060ac <HAL_TIM_PWM_Start+0x1b4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d101      	bne.n	8006026 <HAL_TIM_PWM_Start+0x12e>
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <HAL_TIM_PWM_Start+0x130>
 8006026:	2300      	movs	r3, #0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800603a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a18      	ldr	r2, [pc, #96]	; (80060a4 <HAL_TIM_PWM_Start+0x1ac>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d009      	beq.n	800605a <HAL_TIM_PWM_Start+0x162>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604e:	d004      	beq.n	800605a <HAL_TIM_PWM_Start+0x162>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a14      	ldr	r2, [pc, #80]	; (80060a8 <HAL_TIM_PWM_Start+0x1b0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d115      	bne.n	8006086 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	4b13      	ldr	r3, [pc, #76]	; (80060b0 <HAL_TIM_PWM_Start+0x1b8>)
 8006062:	4013      	ands	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b06      	cmp	r3, #6
 800606a:	d015      	beq.n	8006098 <HAL_TIM_PWM_Start+0x1a0>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006072:	d011      	beq.n	8006098 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006084:	e008      	b.n	8006098 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0201 	orr.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	e000      	b.n	800609a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006098:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40012c00 	.word	0x40012c00
 80060a8:	40014000 	.word	0x40014000
 80060ac:	40014400 	.word	0x40014400
 80060b0:	00010007 	.word	0x00010007

080060b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e0ff      	b.n	80062d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b14      	cmp	r3, #20
 80060de:	f200 80f0 	bhi.w	80062c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060e2:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	0800613d 	.word	0x0800613d
 80060ec:	080062c3 	.word	0x080062c3
 80060f0:	080062c3 	.word	0x080062c3
 80060f4:	080062c3 	.word	0x080062c3
 80060f8:	0800617d 	.word	0x0800617d
 80060fc:	080062c3 	.word	0x080062c3
 8006100:	080062c3 	.word	0x080062c3
 8006104:	080062c3 	.word	0x080062c3
 8006108:	080061bf 	.word	0x080061bf
 800610c:	080062c3 	.word	0x080062c3
 8006110:	080062c3 	.word	0x080062c3
 8006114:	080062c3 	.word	0x080062c3
 8006118:	080061ff 	.word	0x080061ff
 800611c:	080062c3 	.word	0x080062c3
 8006120:	080062c3 	.word	0x080062c3
 8006124:	080062c3 	.word	0x080062c3
 8006128:	08006241 	.word	0x08006241
 800612c:	080062c3 	.word	0x080062c3
 8006130:	080062c3 	.word	0x080062c3
 8006134:	080062c3 	.word	0x080062c3
 8006138:	08006281 	.word	0x08006281
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	4618      	mov	r0, r3
 8006144:	f000 f9f8 	bl	8006538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699a      	ldr	r2, [r3, #24]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0208 	orr.w	r2, r2, #8
 8006156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0204 	bic.w	r2, r2, #4
 8006166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6999      	ldr	r1, [r3, #24]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	691a      	ldr	r2, [r3, #16]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	619a      	str	r2, [r3, #24]
      break;
 800617a:	e0a5      	b.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68b9      	ldr	r1, [r7, #8]
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fa54 	bl	8006630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6999      	ldr	r1, [r3, #24]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	021a      	lsls	r2, r3, #8
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	619a      	str	r2, [r3, #24]
      break;
 80061bc:	e084      	b.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 faad 	bl	8006724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69da      	ldr	r2, [r3, #28]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0208 	orr.w	r2, r2, #8
 80061d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0204 	bic.w	r2, r2, #4
 80061e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69d9      	ldr	r1, [r3, #28]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	61da      	str	r2, [r3, #28]
      break;
 80061fc:	e064      	b.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fb05 	bl	8006814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69da      	ldr	r2, [r3, #28]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69da      	ldr	r2, [r3, #28]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69d9      	ldr	r1, [r3, #28]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	021a      	lsls	r2, r3, #8
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	61da      	str	r2, [r3, #28]
      break;
 800623e:	e043      	b.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fb42 	bl	80068d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0208 	orr.w	r2, r2, #8
 800625a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0204 	bic.w	r2, r2, #4
 800626a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800627e:	e023      	b.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fb7a 	bl	8006980 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800629a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	021a      	lsls	r2, r3, #8
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062c0:	e002      	b.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	75fb      	strb	r3, [r7, #23]
      break;
 80062c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop

080062dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_TIM_ConfigClockSource+0x1c>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e0b6      	b.n	8006466 <HAL_TIM_ConfigClockSource+0x18a>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006316:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800631a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006334:	d03e      	beq.n	80063b4 <HAL_TIM_ConfigClockSource+0xd8>
 8006336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800633a:	f200 8087 	bhi.w	800644c <HAL_TIM_ConfigClockSource+0x170>
 800633e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006342:	f000 8086 	beq.w	8006452 <HAL_TIM_ConfigClockSource+0x176>
 8006346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634a:	d87f      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x170>
 800634c:	2b70      	cmp	r3, #112	; 0x70
 800634e:	d01a      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0xaa>
 8006350:	2b70      	cmp	r3, #112	; 0x70
 8006352:	d87b      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x170>
 8006354:	2b60      	cmp	r3, #96	; 0x60
 8006356:	d050      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x11e>
 8006358:	2b60      	cmp	r3, #96	; 0x60
 800635a:	d877      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x170>
 800635c:	2b50      	cmp	r3, #80	; 0x50
 800635e:	d03c      	beq.n	80063da <HAL_TIM_ConfigClockSource+0xfe>
 8006360:	2b50      	cmp	r3, #80	; 0x50
 8006362:	d873      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x170>
 8006364:	2b40      	cmp	r3, #64	; 0x40
 8006366:	d058      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x13e>
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	d86f      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x170>
 800636c:	2b30      	cmp	r3, #48	; 0x30
 800636e:	d064      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x15e>
 8006370:	2b30      	cmp	r3, #48	; 0x30
 8006372:	d86b      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x170>
 8006374:	2b20      	cmp	r3, #32
 8006376:	d060      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x15e>
 8006378:	2b20      	cmp	r3, #32
 800637a:	d867      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x170>
 800637c:	2b00      	cmp	r3, #0
 800637e:	d05c      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x15e>
 8006380:	2b10      	cmp	r3, #16
 8006382:	d05a      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x15e>
 8006384:	e062      	b.n	800644c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6899      	ldr	r1, [r3, #8]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f000 fbc7 	bl	8006b28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	609a      	str	r2, [r3, #8]
      break;
 80063b2:	e04f      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	6899      	ldr	r1, [r3, #8]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f000 fbb0 	bl	8006b28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063d6:	609a      	str	r2, [r3, #8]
      break;
 80063d8:	e03c      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6859      	ldr	r1, [r3, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	461a      	mov	r2, r3
 80063e8:	f000 fb24 	bl	8006a34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2150      	movs	r1, #80	; 0x50
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fb7d 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 80063f8:	e02c      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	6859      	ldr	r1, [r3, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	461a      	mov	r2, r3
 8006408:	f000 fb43 	bl	8006a92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2160      	movs	r1, #96	; 0x60
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fb6d 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 8006418:	e01c      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	6859      	ldr	r1, [r3, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	461a      	mov	r2, r3
 8006428:	f000 fb04 	bl	8006a34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2140      	movs	r1, #64	; 0x40
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fb5d 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 8006438:	e00c      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4619      	mov	r1, r3
 8006444:	4610      	mov	r0, r2
 8006446:	f000 fb54 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 800644a:	e003      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	73fb      	strb	r3, [r7, #15]
      break;
 8006450:	e000      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006452:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006464:	7bfb      	ldrb	r3, [r7, #15]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a2a      	ldr	r2, [pc, #168]	; (800652c <TIM_Base_SetConfig+0xbc>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d003      	beq.n	8006490 <TIM_Base_SetConfig+0x20>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648e:	d108      	bne.n	80064a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a21      	ldr	r2, [pc, #132]	; (800652c <TIM_Base_SetConfig+0xbc>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00b      	beq.n	80064c2 <TIM_Base_SetConfig+0x52>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b0:	d007      	beq.n	80064c2 <TIM_Base_SetConfig+0x52>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a1e      	ldr	r2, [pc, #120]	; (8006530 <TIM_Base_SetConfig+0xc0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d003      	beq.n	80064c2 <TIM_Base_SetConfig+0x52>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a1d      	ldr	r2, [pc, #116]	; (8006534 <TIM_Base_SetConfig+0xc4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d108      	bne.n	80064d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a0c      	ldr	r2, [pc, #48]	; (800652c <TIM_Base_SetConfig+0xbc>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <TIM_Base_SetConfig+0xa0>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a0b      	ldr	r2, [pc, #44]	; (8006530 <TIM_Base_SetConfig+0xc0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_Base_SetConfig+0xa0>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a0a      	ldr	r2, [pc, #40]	; (8006534 <TIM_Base_SetConfig+0xc4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d103      	bne.n	8006518 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	615a      	str	r2, [r3, #20]
}
 800651e:	bf00      	nop
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40012c00 	.word	0x40012c00
 8006530:	40014000 	.word	0x40014000
 8006534:	40014400 	.word	0x40014400

08006538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	f023 0201 	bic.w	r2, r3, #1
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f023 0302 	bic.w	r3, r3, #2
 8006584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a24      	ldr	r2, [pc, #144]	; (8006624 <TIM_OC1_SetConfig+0xec>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d007      	beq.n	80065a8 <TIM_OC1_SetConfig+0x70>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a23      	ldr	r2, [pc, #140]	; (8006628 <TIM_OC1_SetConfig+0xf0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d003      	beq.n	80065a8 <TIM_OC1_SetConfig+0x70>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a22      	ldr	r2, [pc, #136]	; (800662c <TIM_OC1_SetConfig+0xf4>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d10c      	bne.n	80065c2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f023 0308 	bic.w	r3, r3, #8
 80065ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f023 0304 	bic.w	r3, r3, #4
 80065c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a17      	ldr	r2, [pc, #92]	; (8006624 <TIM_OC1_SetConfig+0xec>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d007      	beq.n	80065da <TIM_OC1_SetConfig+0xa2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a16      	ldr	r2, [pc, #88]	; (8006628 <TIM_OC1_SetConfig+0xf0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_OC1_SetConfig+0xa2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a15      	ldr	r2, [pc, #84]	; (800662c <TIM_OC1_SetConfig+0xf4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d111      	bne.n	80065fe <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	621a      	str	r2, [r3, #32]
}
 8006618:	bf00      	nop
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	40012c00 	.word	0x40012c00
 8006628:	40014000 	.word	0x40014000
 800662c:	40014400 	.word	0x40014400

08006630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f023 0210 	bic.w	r2, r3, #16
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800665e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	021b      	lsls	r3, r3, #8
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	4313      	orrs	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f023 0320 	bic.w	r3, r3, #32
 800667e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a22      	ldr	r2, [pc, #136]	; (8006718 <TIM_OC2_SetConfig+0xe8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d10d      	bne.n	80066b0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800669a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a19      	ldr	r2, [pc, #100]	; (8006718 <TIM_OC2_SetConfig+0xe8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d007      	beq.n	80066c8 <TIM_OC2_SetConfig+0x98>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a18      	ldr	r2, [pc, #96]	; (800671c <TIM_OC2_SetConfig+0xec>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d003      	beq.n	80066c8 <TIM_OC2_SetConfig+0x98>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a17      	ldr	r2, [pc, #92]	; (8006720 <TIM_OC2_SetConfig+0xf0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d113      	bne.n	80066f0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	621a      	str	r2, [r3, #32]
}
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40014000 	.word	0x40014000
 8006720:	40014400 	.word	0x40014400

08006724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0303 	bic.w	r3, r3, #3
 800675e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	021b      	lsls	r3, r3, #8
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a21      	ldr	r2, [pc, #132]	; (8006808 <TIM_OC3_SetConfig+0xe4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d10d      	bne.n	80067a2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800678c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a18      	ldr	r2, [pc, #96]	; (8006808 <TIM_OC3_SetConfig+0xe4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d007      	beq.n	80067ba <TIM_OC3_SetConfig+0x96>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a17      	ldr	r2, [pc, #92]	; (800680c <TIM_OC3_SetConfig+0xe8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d003      	beq.n	80067ba <TIM_OC3_SetConfig+0x96>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a16      	ldr	r2, [pc, #88]	; (8006810 <TIM_OC3_SetConfig+0xec>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d113      	bne.n	80067e2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	011b      	lsls	r3, r3, #4
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	621a      	str	r2, [r3, #32]
}
 80067fc:	bf00      	nop
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	40012c00 	.word	0x40012c00
 800680c:	40014000 	.word	0x40014000
 8006810:	40014400 	.word	0x40014400

08006814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800684e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	021b      	lsls	r3, r3, #8
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	031b      	lsls	r3, r3, #12
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	4313      	orrs	r3, r2
 800686e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a14      	ldr	r2, [pc, #80]	; (80068c4 <TIM_OC4_SetConfig+0xb0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_OC4_SetConfig+0x74>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a13      	ldr	r2, [pc, #76]	; (80068c8 <TIM_OC4_SetConfig+0xb4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_OC4_SetConfig+0x74>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a12      	ldr	r2, [pc, #72]	; (80068cc <TIM_OC4_SetConfig+0xb8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d109      	bne.n	800689c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800688e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	019b      	lsls	r3, r3, #6
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	621a      	str	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40012c00 	.word	0x40012c00
 80068c8:	40014000 	.word	0x40014000
 80068cc:	40014400 	.word	0x40014400

080068d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006914:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	041b      	lsls	r3, r3, #16
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	4313      	orrs	r3, r2
 8006920:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a13      	ldr	r2, [pc, #76]	; (8006974 <TIM_OC5_SetConfig+0xa4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d007      	beq.n	800693a <TIM_OC5_SetConfig+0x6a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a12      	ldr	r2, [pc, #72]	; (8006978 <TIM_OC5_SetConfig+0xa8>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d003      	beq.n	800693a <TIM_OC5_SetConfig+0x6a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a11      	ldr	r2, [pc, #68]	; (800697c <TIM_OC5_SetConfig+0xac>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d109      	bne.n	800694e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006940:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	621a      	str	r2, [r3, #32]
}
 8006968:	bf00      	nop
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40012c00 	.word	0x40012c00
 8006978:	40014000 	.word	0x40014000
 800697c:	40014400 	.word	0x40014400

08006980 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	021b      	lsls	r3, r3, #8
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4313      	orrs	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	051b      	lsls	r3, r3, #20
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a14      	ldr	r2, [pc, #80]	; (8006a28 <TIM_OC6_SetConfig+0xa8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d007      	beq.n	80069ec <TIM_OC6_SetConfig+0x6c>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a13      	ldr	r2, [pc, #76]	; (8006a2c <TIM_OC6_SetConfig+0xac>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d003      	beq.n	80069ec <TIM_OC6_SetConfig+0x6c>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a12      	ldr	r2, [pc, #72]	; (8006a30 <TIM_OC6_SetConfig+0xb0>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d109      	bne.n	8006a00 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	029b      	lsls	r3, r3, #10
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	621a      	str	r2, [r3, #32]
}
 8006a1a:	bf00      	nop
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	40012c00 	.word	0x40012c00
 8006a2c:	40014000 	.word	0x40014000
 8006a30:	40014400 	.word	0x40014400

08006a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f023 0201 	bic.w	r2, r3, #1
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f023 030a 	bic.w	r3, r3, #10
 8006a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b087      	sub	sp, #28
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f023 0210 	bic.w	r2, r3, #16
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006abc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	031b      	lsls	r3, r3, #12
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ace:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	621a      	str	r2, [r3, #32]
}
 8006ae6:	bf00      	nop
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f043 0307 	orr.w	r3, r3, #7
 8006b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	609a      	str	r2, [r3, #8]
}
 8006b1c:	bf00      	nop
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	021a      	lsls	r2, r3, #8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	609a      	str	r2, [r3, #8]
}
 8006b5c:	bf00      	nop
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a1a      	ldr	r2, [r3, #32]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	401a      	ands	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a1a      	ldr	r2, [r3, #32]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f003 031f 	and.w	r3, r3, #31
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
	...

08006bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d101      	bne.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bc8:	2302      	movs	r3, #2
 8006bca:	e04f      	b.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a21      	ldr	r2, [pc, #132]	; (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d108      	bne.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bfc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d009      	beq.n	8006c40 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c34:	d004      	beq.n	8006c40 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a10      	ldr	r2, [pc, #64]	; (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d10c      	bne.n	8006c5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	40012c00 	.word	0x40012c00
 8006c7c:	40014000 	.word	0x40014000

08006c80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e060      	b.n	8006d5e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	041b      	lsls	r3, r3, #16
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a14      	ldr	r2, [pc, #80]	; (8006d6c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d115      	bne.n	8006d4c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	051b      	lsls	r3, r3, #20
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	40012c00 	.word	0x40012c00

08006d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e040      	b.n	8006e04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7fb fa58 	bl	8002248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2224      	movs	r2, #36	; 0x24
 8006d9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0201 	bic.w	r2, r2, #1
 8006dac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fc18 	bl	80075e4 <UART_SetConfig>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e022      	b.n	8006e04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fe66 	bl	8007a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 feed 	bl	8007bdc <UART_CheckIdleState>
 8006e02:	4603      	mov	r3, r0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08a      	sub	sp, #40	; 0x28
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	603b      	str	r3, [r7, #0]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	f040 8082 	bne.w	8006f2a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <HAL_UART_Transmit+0x26>
 8006e2c:	88fb      	ldrh	r3, [r7, #6]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e07a      	b.n	8006f2c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d101      	bne.n	8006e44 <HAL_UART_Transmit+0x38>
 8006e40:	2302      	movs	r3, #2
 8006e42:	e073      	b.n	8006f2c <HAL_UART_Transmit+0x120>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2221      	movs	r2, #33	; 0x21
 8006e58:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e5a:	f7fc fc83 	bl	8003764 <HAL_GetTick>
 8006e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	88fa      	ldrh	r2, [r7, #6]
 8006e64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	88fa      	ldrh	r2, [r7, #6]
 8006e6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e78:	d108      	bne.n	8006e8c <HAL_UART_Transmit+0x80>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d104      	bne.n	8006e8c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	e003      	b.n	8006e94 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006e9c:	e02d      	b.n	8006efa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2180      	movs	r1, #128	; 0x80
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fee0 	bl	8007c6e <UART_WaitOnFlagUntilTimeout>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e039      	b.n	8006f2c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10b      	bne.n	8006ed6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	881a      	ldrh	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eca:	b292      	uxth	r2, r2
 8006ecc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	3302      	adds	r3, #2
 8006ed2:	61bb      	str	r3, [r7, #24]
 8006ed4:	e008      	b.n	8006ee8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	b292      	uxth	r2, r2
 8006ee0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1cb      	bne.n	8006e9e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2140      	movs	r1, #64	; 0x40
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 feac 	bl	8007c6e <UART_WaitOnFlagUntilTimeout>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e005      	b.n	8006f2c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2220      	movs	r2, #32
 8006f24:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	e000      	b.n	8006f2c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006f2a:	2302      	movs	r3, #2
  }
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3720      	adds	r7, #32
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b08a      	sub	sp, #40	; 0x28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f46:	2b20      	cmp	r3, #32
 8006f48:	d142      	bne.n	8006fd0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <HAL_UART_Receive_IT+0x22>
 8006f50:	88fb      	ldrh	r3, [r7, #6]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e03b      	b.n	8006fd2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d101      	bne.n	8006f68 <HAL_UART_Receive_IT+0x34>
 8006f64:	2302      	movs	r3, #2
 8006f66:	e034      	b.n	8006fd2 <HAL_UART_Receive_IT+0x9e>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a18      	ldr	r2, [pc, #96]	; (8006fdc <HAL_UART_Receive_IT+0xa8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d01f      	beq.n	8006fc0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d018      	beq.n	8006fc0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	623b      	str	r3, [r7, #32]
 8006fae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	69f9      	ldr	r1, [r7, #28]
 8006fb2:	6a3a      	ldr	r2, [r7, #32]
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e6      	bne.n	8006f8e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006fc0:	88fb      	ldrh	r3, [r7, #6]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	68b9      	ldr	r1, [r7, #8]
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 ff16 	bl	8007df8 <UART_Start_Receive_IT>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	e000      	b.n	8006fd2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006fd0:	2302      	movs	r3, #2
  }
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3728      	adds	r7, #40	; 0x28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	40008000 	.word	0x40008000

08006fe0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b0ba      	sub	sp, #232	; 0xe8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007006:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800700a:	f640 030f 	movw	r3, #2063	; 0x80f
 800700e:	4013      	ands	r3, r2
 8007010:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007018:	2b00      	cmp	r3, #0
 800701a:	d115      	bne.n	8007048 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800701c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00f      	beq.n	8007048 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800702c:	f003 0320 	and.w	r3, r3, #32
 8007030:	2b00      	cmp	r3, #0
 8007032:	d009      	beq.n	8007048 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 82a6 	beq.w	800758a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	4798      	blx	r3
      }
      return;
 8007046:	e2a0      	b.n	800758a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 8117 	beq.w	8007280 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800705e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007062:	4b85      	ldr	r3, [pc, #532]	; (8007278 <HAL_UART_IRQHandler+0x298>)
 8007064:	4013      	ands	r3, r2
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 810a 	beq.w	8007280 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800706c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d011      	beq.n	800709c <HAL_UART_IRQHandler+0xbc>
 8007078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800707c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00b      	beq.n	800709c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2201      	movs	r2, #1
 800708a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007092:	f043 0201 	orr.w	r2, r3, #1
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800709c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d011      	beq.n	80070cc <HAL_UART_IRQHandler+0xec>
 80070a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00b      	beq.n	80070cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2202      	movs	r2, #2
 80070ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070c2:	f043 0204 	orr.w	r2, r3, #4
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d011      	beq.n	80070fc <HAL_UART_IRQHandler+0x11c>
 80070d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00b      	beq.n	80070fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2204      	movs	r2, #4
 80070ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070f2:	f043 0202 	orr.w	r2, r3, #2
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007100:	f003 0308 	and.w	r3, r3, #8
 8007104:	2b00      	cmp	r3, #0
 8007106:	d017      	beq.n	8007138 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d105      	bne.n	8007120 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007118:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2208      	movs	r2, #8
 8007126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800712e:	f043 0208 	orr.w	r2, r3, #8
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007140:	2b00      	cmp	r3, #0
 8007142:	d012      	beq.n	800716a <HAL_UART_IRQHandler+0x18a>
 8007144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007148:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00c      	beq.n	800716a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007160:	f043 0220 	orr.w	r2, r3, #32
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 820c 	beq.w	800758e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00d      	beq.n	800719e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d007      	beq.n	800719e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b2:	2b40      	cmp	r3, #64	; 0x40
 80071b4:	d005      	beq.n	80071c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d04f      	beq.n	8007262 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fee2 	bl	8007f8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d2:	2b40      	cmp	r3, #64	; 0x40
 80071d4:	d141      	bne.n	800725a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3308      	adds	r3, #8
 80071dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3308      	adds	r3, #8
 80071fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007202:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800720e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800721a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1d9      	bne.n	80071d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007226:	2b00      	cmp	r3, #0
 8007228:	d013      	beq.n	8007252 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722e:	4a13      	ldr	r2, [pc, #76]	; (800727c <HAL_UART_IRQHandler+0x29c>)
 8007230:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	4618      	mov	r0, r3
 8007238:	f7fc fccc 	bl	8003bd4 <HAL_DMA_Abort_IT>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d017      	beq.n	8007272 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800724c:	4610      	mov	r0, r2
 800724e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007250:	e00f      	b.n	8007272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f9b0 	bl	80075b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007258:	e00b      	b.n	8007272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f9ac 	bl	80075b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007260:	e007      	b.n	8007272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f9a8 	bl	80075b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007270:	e18d      	b.n	800758e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007272:	bf00      	nop
    return;
 8007274:	e18b      	b.n	800758e <HAL_UART_IRQHandler+0x5ae>
 8007276:	bf00      	nop
 8007278:	04000120 	.word	0x04000120
 800727c:	08008053 	.word	0x08008053

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007284:	2b01      	cmp	r3, #1
 8007286:	f040 8146 	bne.w	8007516 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800728a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800728e:	f003 0310 	and.w	r3, r3, #16
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 813f 	beq.w	8007516 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800729c:	f003 0310 	and.w	r3, r3, #16
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 8138 	beq.w	8007516 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2210      	movs	r2, #16
 80072ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b8:	2b40      	cmp	r3, #64	; 0x40
 80072ba:	f040 80b4 	bne.w	8007426 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 815f 	beq.w	8007592 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072de:	429a      	cmp	r2, r3
 80072e0:	f080 8157 	bcs.w	8007592 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f040 8085 	bne.w	800740a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800731c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800732a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800732e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007336:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1da      	bne.n	8007300 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3308      	adds	r3, #8
 8007350:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007354:	e853 3f00 	ldrex	r3, [r3]
 8007358:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800735a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800735c:	f023 0301 	bic.w	r3, r3, #1
 8007360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3308      	adds	r3, #8
 800736a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800736e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007372:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007376:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e1      	bne.n	800734a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3308      	adds	r3, #8
 800738c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800739c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3308      	adds	r3, #8
 80073a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e3      	bne.n	8007386 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073da:	f023 0310 	bic.w	r3, r3, #16
 80073de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80073ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e4      	bne.n	80073ca <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007404:	4618      	mov	r0, r3
 8007406:	f7fc fba7 	bl	8003b58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007416:	b29b      	uxth	r3, r3
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	b29b      	uxth	r3, r3
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f8d4 	bl	80075cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007424:	e0b5      	b.n	8007592 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007432:	b29b      	uxth	r3, r3
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 80a7 	beq.w	8007596 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 80a2 	beq.w	8007596 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007462:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007466:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007474:	647b      	str	r3, [r7, #68]	; 0x44
 8007476:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800747a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e4      	bne.n	8007452 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3308      	adds	r3, #8
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	623b      	str	r3, [r7, #32]
   return(result);
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3308      	adds	r3, #8
 80074a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074ac:	633a      	str	r2, [r7, #48]	; 0x30
 80074ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e3      	bne.n	8007488 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	60fb      	str	r3, [r7, #12]
   return(result);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0310 	bic.w	r3, r3, #16
 80074e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074f4:	61fb      	str	r3, [r7, #28]
 80074f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	69b9      	ldr	r1, [r7, #24]
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	617b      	str	r3, [r7, #20]
   return(result);
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e4      	bne.n	80074d2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007508:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f85c 	bl	80075cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007514:	e03f      	b.n	8007596 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800751a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00e      	beq.n	8007540 <HAL_UART_IRQHandler+0x560>
 8007522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d008      	beq.n	8007540 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007536:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 ff2a 	bl	8008392 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800753e:	e02d      	b.n	800759c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00e      	beq.n	800756a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800754c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007554:	2b00      	cmp	r3, #0
 8007556:	d008      	beq.n	800756a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01c      	beq.n	800759a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4798      	blx	r3
    }
    return;
 8007568:	e017      	b.n	800759a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800756a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	d012      	beq.n	800759c <HAL_UART_IRQHandler+0x5bc>
 8007576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800757a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00c      	beq.n	800759c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fd7b 	bl	800807e <UART_EndTransmit_IT>
    return;
 8007588:	e008      	b.n	800759c <HAL_UART_IRQHandler+0x5bc>
      return;
 800758a:	bf00      	nop
 800758c:	e006      	b.n	800759c <HAL_UART_IRQHandler+0x5bc>
    return;
 800758e:	bf00      	nop
 8007590:	e004      	b.n	800759c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007592:	bf00      	nop
 8007594:	e002      	b.n	800759c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007596:	bf00      	nop
 8007598:	e000      	b.n	800759c <HAL_UART_IRQHandler+0x5bc>
    return;
 800759a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800759c:	37e8      	adds	r7, #232	; 0xe8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop

080075a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075e8:	b08a      	sub	sp, #40	; 0x28
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	431a      	orrs	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	431a      	orrs	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	4313      	orrs	r3, r2
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4b9e      	ldr	r3, [pc, #632]	; (800788c <UART_SetConfig+0x2a8>)
 8007614:	4013      	ands	r3, r2
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	6812      	ldr	r2, [r2, #0]
 800761a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800761c:	430b      	orrs	r3, r1
 800761e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a93      	ldr	r2, [pc, #588]	; (8007890 <UART_SetConfig+0x2ac>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d004      	beq.n	8007650 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764c:	4313      	orrs	r3, r2
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007660:	430a      	orrs	r2, r1
 8007662:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a8a      	ldr	r2, [pc, #552]	; (8007894 <UART_SetConfig+0x2b0>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d126      	bne.n	80076bc <UART_SetConfig+0xd8>
 800766e:	4b8a      	ldr	r3, [pc, #552]	; (8007898 <UART_SetConfig+0x2b4>)
 8007670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007674:	f003 0303 	and.w	r3, r3, #3
 8007678:	2b03      	cmp	r3, #3
 800767a:	d81b      	bhi.n	80076b4 <UART_SetConfig+0xd0>
 800767c:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <UART_SetConfig+0xa0>)
 800767e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007682:	bf00      	nop
 8007684:	08007695 	.word	0x08007695
 8007688:	080076a5 	.word	0x080076a5
 800768c:	0800769d 	.word	0x0800769d
 8007690:	080076ad 	.word	0x080076ad
 8007694:	2301      	movs	r3, #1
 8007696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800769a:	e0ab      	b.n	80077f4 <UART_SetConfig+0x210>
 800769c:	2302      	movs	r3, #2
 800769e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076a2:	e0a7      	b.n	80077f4 <UART_SetConfig+0x210>
 80076a4:	2304      	movs	r3, #4
 80076a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076aa:	e0a3      	b.n	80077f4 <UART_SetConfig+0x210>
 80076ac:	2308      	movs	r3, #8
 80076ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076b2:	e09f      	b.n	80077f4 <UART_SetConfig+0x210>
 80076b4:	2310      	movs	r3, #16
 80076b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ba:	e09b      	b.n	80077f4 <UART_SetConfig+0x210>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a76      	ldr	r2, [pc, #472]	; (800789c <UART_SetConfig+0x2b8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d138      	bne.n	8007738 <UART_SetConfig+0x154>
 80076c6:	4b74      	ldr	r3, [pc, #464]	; (8007898 <UART_SetConfig+0x2b4>)
 80076c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076cc:	f003 030c 	and.w	r3, r3, #12
 80076d0:	2b0c      	cmp	r3, #12
 80076d2:	d82d      	bhi.n	8007730 <UART_SetConfig+0x14c>
 80076d4:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <UART_SetConfig+0xf8>)
 80076d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076da:	bf00      	nop
 80076dc:	08007711 	.word	0x08007711
 80076e0:	08007731 	.word	0x08007731
 80076e4:	08007731 	.word	0x08007731
 80076e8:	08007731 	.word	0x08007731
 80076ec:	08007721 	.word	0x08007721
 80076f0:	08007731 	.word	0x08007731
 80076f4:	08007731 	.word	0x08007731
 80076f8:	08007731 	.word	0x08007731
 80076fc:	08007719 	.word	0x08007719
 8007700:	08007731 	.word	0x08007731
 8007704:	08007731 	.word	0x08007731
 8007708:	08007731 	.word	0x08007731
 800770c:	08007729 	.word	0x08007729
 8007710:	2300      	movs	r3, #0
 8007712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007716:	e06d      	b.n	80077f4 <UART_SetConfig+0x210>
 8007718:	2302      	movs	r3, #2
 800771a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800771e:	e069      	b.n	80077f4 <UART_SetConfig+0x210>
 8007720:	2304      	movs	r3, #4
 8007722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007726:	e065      	b.n	80077f4 <UART_SetConfig+0x210>
 8007728:	2308      	movs	r3, #8
 800772a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800772e:	e061      	b.n	80077f4 <UART_SetConfig+0x210>
 8007730:	2310      	movs	r3, #16
 8007732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007736:	e05d      	b.n	80077f4 <UART_SetConfig+0x210>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a58      	ldr	r2, [pc, #352]	; (80078a0 <UART_SetConfig+0x2bc>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d125      	bne.n	800778e <UART_SetConfig+0x1aa>
 8007742:	4b55      	ldr	r3, [pc, #340]	; (8007898 <UART_SetConfig+0x2b4>)
 8007744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007748:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800774c:	2b30      	cmp	r3, #48	; 0x30
 800774e:	d016      	beq.n	800777e <UART_SetConfig+0x19a>
 8007750:	2b30      	cmp	r3, #48	; 0x30
 8007752:	d818      	bhi.n	8007786 <UART_SetConfig+0x1a2>
 8007754:	2b20      	cmp	r3, #32
 8007756:	d00a      	beq.n	800776e <UART_SetConfig+0x18a>
 8007758:	2b20      	cmp	r3, #32
 800775a:	d814      	bhi.n	8007786 <UART_SetConfig+0x1a2>
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <UART_SetConfig+0x182>
 8007760:	2b10      	cmp	r3, #16
 8007762:	d008      	beq.n	8007776 <UART_SetConfig+0x192>
 8007764:	e00f      	b.n	8007786 <UART_SetConfig+0x1a2>
 8007766:	2300      	movs	r3, #0
 8007768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800776c:	e042      	b.n	80077f4 <UART_SetConfig+0x210>
 800776e:	2302      	movs	r3, #2
 8007770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007774:	e03e      	b.n	80077f4 <UART_SetConfig+0x210>
 8007776:	2304      	movs	r3, #4
 8007778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800777c:	e03a      	b.n	80077f4 <UART_SetConfig+0x210>
 800777e:	2308      	movs	r3, #8
 8007780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007784:	e036      	b.n	80077f4 <UART_SetConfig+0x210>
 8007786:	2310      	movs	r3, #16
 8007788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800778c:	e032      	b.n	80077f4 <UART_SetConfig+0x210>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a3f      	ldr	r2, [pc, #252]	; (8007890 <UART_SetConfig+0x2ac>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d12a      	bne.n	80077ee <UART_SetConfig+0x20a>
 8007798:	4b3f      	ldr	r3, [pc, #252]	; (8007898 <UART_SetConfig+0x2b4>)
 800779a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800779e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077a6:	d01a      	beq.n	80077de <UART_SetConfig+0x1fa>
 80077a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077ac:	d81b      	bhi.n	80077e6 <UART_SetConfig+0x202>
 80077ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b2:	d00c      	beq.n	80077ce <UART_SetConfig+0x1ea>
 80077b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b8:	d815      	bhi.n	80077e6 <UART_SetConfig+0x202>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <UART_SetConfig+0x1e2>
 80077be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c2:	d008      	beq.n	80077d6 <UART_SetConfig+0x1f2>
 80077c4:	e00f      	b.n	80077e6 <UART_SetConfig+0x202>
 80077c6:	2300      	movs	r3, #0
 80077c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077cc:	e012      	b.n	80077f4 <UART_SetConfig+0x210>
 80077ce:	2302      	movs	r3, #2
 80077d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d4:	e00e      	b.n	80077f4 <UART_SetConfig+0x210>
 80077d6:	2304      	movs	r3, #4
 80077d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077dc:	e00a      	b.n	80077f4 <UART_SetConfig+0x210>
 80077de:	2308      	movs	r3, #8
 80077e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077e4:	e006      	b.n	80077f4 <UART_SetConfig+0x210>
 80077e6:	2310      	movs	r3, #16
 80077e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ec:	e002      	b.n	80077f4 <UART_SetConfig+0x210>
 80077ee:	2310      	movs	r3, #16
 80077f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a25      	ldr	r2, [pc, #148]	; (8007890 <UART_SetConfig+0x2ac>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	f040 808a 	bne.w	8007914 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007800:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007804:	2b08      	cmp	r3, #8
 8007806:	d824      	bhi.n	8007852 <UART_SetConfig+0x26e>
 8007808:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <UART_SetConfig+0x22c>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007835 	.word	0x08007835
 8007814:	08007853 	.word	0x08007853
 8007818:	0800783d 	.word	0x0800783d
 800781c:	08007853 	.word	0x08007853
 8007820:	08007843 	.word	0x08007843
 8007824:	08007853 	.word	0x08007853
 8007828:	08007853 	.word	0x08007853
 800782c:	08007853 	.word	0x08007853
 8007830:	0800784b 	.word	0x0800784b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007834:	f7fd fa78 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 8007838:	61f8      	str	r0, [r7, #28]
        break;
 800783a:	e010      	b.n	800785e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800783c:	4b19      	ldr	r3, [pc, #100]	; (80078a4 <UART_SetConfig+0x2c0>)
 800783e:	61fb      	str	r3, [r7, #28]
        break;
 8007840:	e00d      	b.n	800785e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007842:	f7fd f9d9 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8007846:	61f8      	str	r0, [r7, #28]
        break;
 8007848:	e009      	b.n	800785e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800784a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784e:	61fb      	str	r3, [r7, #28]
        break;
 8007850:	e005      	b.n	800785e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800785c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 8109 	beq.w	8007a78 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	4413      	add	r3, r2
 8007870:	69fa      	ldr	r2, [r7, #28]
 8007872:	429a      	cmp	r2, r3
 8007874:	d305      	bcc.n	8007882 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800787c:	69fa      	ldr	r2, [r7, #28]
 800787e:	429a      	cmp	r2, r3
 8007880:	d912      	bls.n	80078a8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007888:	e0f6      	b.n	8007a78 <UART_SetConfig+0x494>
 800788a:	bf00      	nop
 800788c:	efff69f3 	.word	0xefff69f3
 8007890:	40008000 	.word	0x40008000
 8007894:	40013800 	.word	0x40013800
 8007898:	40021000 	.word	0x40021000
 800789c:	40004400 	.word	0x40004400
 80078a0:	40004800 	.word	0x40004800
 80078a4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	2200      	movs	r2, #0
 80078ac:	461c      	mov	r4, r3
 80078ae:	4615      	mov	r5, r2
 80078b0:	f04f 0200 	mov.w	r2, #0
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	022b      	lsls	r3, r5, #8
 80078ba:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80078be:	0222      	lsls	r2, r4, #8
 80078c0:	68f9      	ldr	r1, [r7, #12]
 80078c2:	6849      	ldr	r1, [r1, #4]
 80078c4:	0849      	lsrs	r1, r1, #1
 80078c6:	2000      	movs	r0, #0
 80078c8:	4688      	mov	r8, r1
 80078ca:	4681      	mov	r9, r0
 80078cc:	eb12 0a08 	adds.w	sl, r2, r8
 80078d0:	eb43 0b09 	adc.w	fp, r3, r9
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	607a      	str	r2, [r7, #4]
 80078de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078e2:	4650      	mov	r0, sl
 80078e4:	4659      	mov	r1, fp
 80078e6:	f7f9 f9df 	bl	8000ca8 <__aeabi_uldivmod>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	4613      	mov	r3, r2
 80078f0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078f8:	d308      	bcc.n	800790c <UART_SetConfig+0x328>
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007900:	d204      	bcs.n	800790c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	60da      	str	r2, [r3, #12]
 800790a:	e0b5      	b.n	8007a78 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007912:	e0b1      	b.n	8007a78 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800791c:	d15d      	bne.n	80079da <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800791e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007922:	2b08      	cmp	r3, #8
 8007924:	d827      	bhi.n	8007976 <UART_SetConfig+0x392>
 8007926:	a201      	add	r2, pc, #4	; (adr r2, 800792c <UART_SetConfig+0x348>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	08007951 	.word	0x08007951
 8007930:	08007959 	.word	0x08007959
 8007934:	08007961 	.word	0x08007961
 8007938:	08007977 	.word	0x08007977
 800793c:	08007967 	.word	0x08007967
 8007940:	08007977 	.word	0x08007977
 8007944:	08007977 	.word	0x08007977
 8007948:	08007977 	.word	0x08007977
 800794c:	0800796f 	.word	0x0800796f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007950:	f7fd f9ea 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 8007954:	61f8      	str	r0, [r7, #28]
        break;
 8007956:	e014      	b.n	8007982 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007958:	f7fd f9fc 	bl	8004d54 <HAL_RCC_GetPCLK2Freq>
 800795c:	61f8      	str	r0, [r7, #28]
        break;
 800795e:	e010      	b.n	8007982 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007960:	4b4c      	ldr	r3, [pc, #304]	; (8007a94 <UART_SetConfig+0x4b0>)
 8007962:	61fb      	str	r3, [r7, #28]
        break;
 8007964:	e00d      	b.n	8007982 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007966:	f7fd f947 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 800796a:	61f8      	str	r0, [r7, #28]
        break;
 800796c:	e009      	b.n	8007982 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800796e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007972:	61fb      	str	r3, [r7, #28]
        break;
 8007974:	e005      	b.n	8007982 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d077      	beq.n	8007a78 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	005a      	lsls	r2, r3, #1
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	085b      	lsrs	r3, r3, #1
 8007992:	441a      	add	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	fbb2 f3f3 	udiv	r3, r2, r3
 800799c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2b0f      	cmp	r3, #15
 80079a2:	d916      	bls.n	80079d2 <UART_SetConfig+0x3ee>
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079aa:	d212      	bcs.n	80079d2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	f023 030f 	bic.w	r3, r3, #15
 80079b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	085b      	lsrs	r3, r3, #1
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	f003 0307 	and.w	r3, r3, #7
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	8afb      	ldrh	r3, [r7, #22]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	8afa      	ldrh	r2, [r7, #22]
 80079ce:	60da      	str	r2, [r3, #12]
 80079d0:	e052      	b.n	8007a78 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079d8:	e04e      	b.n	8007a78 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079de:	2b08      	cmp	r3, #8
 80079e0:	d827      	bhi.n	8007a32 <UART_SetConfig+0x44e>
 80079e2:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <UART_SetConfig+0x404>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	08007a0d 	.word	0x08007a0d
 80079ec:	08007a15 	.word	0x08007a15
 80079f0:	08007a1d 	.word	0x08007a1d
 80079f4:	08007a33 	.word	0x08007a33
 80079f8:	08007a23 	.word	0x08007a23
 80079fc:	08007a33 	.word	0x08007a33
 8007a00:	08007a33 	.word	0x08007a33
 8007a04:	08007a33 	.word	0x08007a33
 8007a08:	08007a2b 	.word	0x08007a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a0c:	f7fd f98c 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 8007a10:	61f8      	str	r0, [r7, #28]
        break;
 8007a12:	e014      	b.n	8007a3e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a14:	f7fd f99e 	bl	8004d54 <HAL_RCC_GetPCLK2Freq>
 8007a18:	61f8      	str	r0, [r7, #28]
        break;
 8007a1a:	e010      	b.n	8007a3e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a1c:	4b1d      	ldr	r3, [pc, #116]	; (8007a94 <UART_SetConfig+0x4b0>)
 8007a1e:	61fb      	str	r3, [r7, #28]
        break;
 8007a20:	e00d      	b.n	8007a3e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a22:	f7fd f8e9 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8007a26:	61f8      	str	r0, [r7, #28]
        break;
 8007a28:	e009      	b.n	8007a3e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a2e:	61fb      	str	r3, [r7, #28]
        break;
 8007a30:	e005      	b.n	8007a3e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a3c:	bf00      	nop
    }

    if (pclk != 0U)
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d019      	beq.n	8007a78 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	085a      	lsrs	r2, r3, #1
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	441a      	add	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2b0f      	cmp	r3, #15
 8007a5c:	d909      	bls.n	8007a72 <UART_SetConfig+0x48e>
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a64:	d205      	bcs.n	8007a72 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60da      	str	r2, [r3, #12]
 8007a70:	e002      	b.n	8007a78 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007a84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3728      	adds	r7, #40	; 0x28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a92:	bf00      	nop
 8007a94:	00f42400 	.word	0x00f42400

08007a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	f003 0304 	and.w	r3, r3, #4
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	f003 0308 	and.w	r3, r3, #8
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01a      	beq.n	8007bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b96:	d10a      	bne.n	8007bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	605a      	str	r2, [r3, #4]
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af02      	add	r7, sp, #8
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bec:	f7fb fdba 	bl	8003764 <HAL_GetTick>
 8007bf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d10e      	bne.n	8007c1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f82d 	bl	8007c6e <UART_WaitOnFlagUntilTimeout>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e023      	b.n	8007c66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d10e      	bne.n	8007c4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f817 	bl	8007c6e <UART_WaitOnFlagUntilTimeout>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e00d      	b.n	8007c66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2220      	movs	r2, #32
 8007c54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b09c      	sub	sp, #112	; 0x70
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	603b      	str	r3, [r7, #0]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c7e:	e0a5      	b.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c86:	f000 80a1 	beq.w	8007dcc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c8a:	f7fb fd6b 	bl	8003764 <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d302      	bcc.n	8007ca0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007c9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d13e      	bne.n	8007d1e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca8:	e853 3f00 	ldrex	r3, [r3]
 8007cac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cb4:	667b      	str	r3, [r7, #100]	; 0x64
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cc0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e6      	bne.n	8007ca0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cdc:	e853 3f00 	ldrex	r3, [r3]
 8007ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	f023 0301 	bic.w	r3, r3, #1
 8007ce8:	663b      	str	r3, [r7, #96]	; 0x60
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cf2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cfa:	e841 2300 	strex	r3, r2, [r1]
 8007cfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e5      	bne.n	8007cd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e067      	b.n	8007dee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d04f      	beq.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d3a:	d147      	bne.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d44:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d64:	637b      	str	r3, [r7, #52]	; 0x34
 8007d66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e6      	bne.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	613b      	str	r3, [r7, #16]
   return(result);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f023 0301 	bic.w	r3, r3, #1
 8007d8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3308      	adds	r3, #8
 8007d96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d98:	623a      	str	r2, [r7, #32]
 8007d9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	69f9      	ldr	r1, [r7, #28]
 8007d9e:	6a3a      	ldr	r2, [r7, #32]
 8007da0:	e841 2300 	strex	r3, r2, [r1]
 8007da4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e5      	bne.n	8007d78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2220      	movs	r2, #32
 8007db0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2220      	movs	r2, #32
 8007db6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e010      	b.n	8007dee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	69da      	ldr	r2, [r3, #28]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	bf0c      	ite	eq
 8007ddc:	2301      	moveq	r3, #1
 8007dde:	2300      	movne	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	79fb      	ldrb	r3, [r7, #7]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	f43f af4a 	beq.w	8007c80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3770      	adds	r7, #112	; 0x70
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b097      	sub	sp, #92	; 0x5c
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	4613      	mov	r3, r2
 8007e04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	88fa      	ldrh	r2, [r7, #6]
 8007e10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	88fa      	ldrh	r2, [r7, #6]
 8007e18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e2a:	d10e      	bne.n	8007e4a <UART_Start_Receive_IT+0x52>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d105      	bne.n	8007e40 <UART_Start_Receive_IT+0x48>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e3e:	e02d      	b.n	8007e9c <UART_Start_Receive_IT+0xa4>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	22ff      	movs	r2, #255	; 0xff
 8007e44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e48:	e028      	b.n	8007e9c <UART_Start_Receive_IT+0xa4>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10d      	bne.n	8007e6e <UART_Start_Receive_IT+0x76>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d104      	bne.n	8007e64 <UART_Start_Receive_IT+0x6c>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	22ff      	movs	r2, #255	; 0xff
 8007e5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e62:	e01b      	b.n	8007e9c <UART_Start_Receive_IT+0xa4>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	227f      	movs	r2, #127	; 0x7f
 8007e68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e6c:	e016      	b.n	8007e9c <UART_Start_Receive_IT+0xa4>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e76:	d10d      	bne.n	8007e94 <UART_Start_Receive_IT+0x9c>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d104      	bne.n	8007e8a <UART_Start_Receive_IT+0x92>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	227f      	movs	r2, #127	; 0x7f
 8007e84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e88:	e008      	b.n	8007e9c <UART_Start_Receive_IT+0xa4>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	223f      	movs	r2, #63	; 0x3f
 8007e8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e92:	e003      	b.n	8007e9c <UART_Start_Receive_IT+0xa4>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2222      	movs	r2, #34	; 0x22
 8007ea8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3308      	adds	r3, #8
 8007eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb4:	e853 3f00 	ldrex	r3, [r3]
 8007eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebc:	f043 0301 	orr.w	r3, r3, #1
 8007ec0:	657b      	str	r3, [r7, #84]	; 0x54
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007eca:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ecc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ece:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ed2:	e841 2300 	strex	r3, r2, [r1]
 8007ed6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e5      	bne.n	8007eaa <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee6:	d107      	bne.n	8007ef8 <UART_Start_Receive_IT+0x100>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d103      	bne.n	8007ef8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4a24      	ldr	r2, [pc, #144]	; (8007f84 <UART_Start_Receive_IT+0x18c>)
 8007ef4:	665a      	str	r2, [r3, #100]	; 0x64
 8007ef6:	e002      	b.n	8007efe <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	4a23      	ldr	r2, [pc, #140]	; (8007f88 <UART_Start_Receive_IT+0x190>)
 8007efc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d019      	beq.n	8007f42 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f16:	e853 3f00 	ldrex	r3, [r3]
 8007f1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f34:	e841 2300 	strex	r3, r2, [r1]
 8007f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1e6      	bne.n	8007f0e <UART_Start_Receive_IT+0x116>
 8007f40:	e018      	b.n	8007f74 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	e853 3f00 	ldrex	r3, [r3]
 8007f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f043 0320 	orr.w	r3, r3, #32
 8007f56:	653b      	str	r3, [r7, #80]	; 0x50
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f60:	623b      	str	r3, [r7, #32]
 8007f62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f64:	69f9      	ldr	r1, [r7, #28]
 8007f66:	6a3a      	ldr	r2, [r7, #32]
 8007f68:	e841 2300 	strex	r3, r2, [r1]
 8007f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1e6      	bne.n	8007f42 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	375c      	adds	r7, #92	; 0x5c
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	08008233 	.word	0x08008233
 8007f88:	080080d3 	.word	0x080080d3

08007f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b095      	sub	sp, #84	; 0x54
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9c:	e853 3f00 	ldrex	r3, [r3]
 8007fa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8007fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fba:	e841 2300 	strex	r3, r2, [r1]
 8007fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1e6      	bne.n	8007f94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3308      	adds	r3, #8
 8007fcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	e853 3f00 	ldrex	r3, [r3]
 8007fd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	f023 0301 	bic.w	r3, r3, #1
 8007fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fee:	e841 2300 	strex	r3, r2, [r1]
 8007ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1e5      	bne.n	8007fc6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d118      	bne.n	8008034 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	e853 3f00 	ldrex	r3, [r3]
 800800e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f023 0310 	bic.w	r3, r3, #16
 8008016:	647b      	str	r3, [r7, #68]	; 0x44
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	461a      	mov	r2, r3
 800801e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008020:	61bb      	str	r3, [r7, #24]
 8008022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	6979      	ldr	r1, [r7, #20]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	e841 2300 	strex	r3, r2, [r1]
 800802c:	613b      	str	r3, [r7, #16]
   return(result);
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e6      	bne.n	8008002 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2220      	movs	r2, #32
 8008038:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008046:	bf00      	nop
 8008048:	3754      	adds	r7, #84	; 0x54
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff faa1 	bl	80075b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008076:	bf00      	nop
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b088      	sub	sp, #32
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	60bb      	str	r3, [r7, #8]
   return(result);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800809a:	61fb      	str	r3, [r7, #28]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	6979      	ldr	r1, [r7, #20]
 80080aa:	69ba      	ldr	r2, [r7, #24]
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	613b      	str	r3, [r7, #16]
   return(result);
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e6      	bne.n	8008086 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2220      	movs	r2, #32
 80080bc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff fa6d 	bl	80075a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080ca:	bf00      	nop
 80080cc:	3720      	adds	r7, #32
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b096      	sub	sp, #88	; 0x58
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080e8:	2b22      	cmp	r3, #34	; 0x22
 80080ea:	f040 8094 	bne.w	8008216 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80080f4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080f8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80080fc:	b2d9      	uxtb	r1, r3
 80080fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008102:	b2da      	uxtb	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008108:	400a      	ands	r2, r1
 800810a:	b2d2      	uxtb	r2, r2
 800810c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800811e:	b29b      	uxth	r3, r3
 8008120:	3b01      	subs	r3, #1
 8008122:	b29a      	uxth	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008130:	b29b      	uxth	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d179      	bne.n	800822a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008146:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800814a:	653b      	str	r3, [r7, #80]	; 0x50
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008154:	647b      	str	r3, [r7, #68]	; 0x44
 8008156:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800815a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e6      	bne.n	8008136 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3308      	adds	r3, #8
 800816e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	e853 3f00 	ldrex	r3, [r3]
 8008176:	623b      	str	r3, [r7, #32]
   return(result);
 8008178:	6a3b      	ldr	r3, [r7, #32]
 800817a:	f023 0301 	bic.w	r3, r3, #1
 800817e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3308      	adds	r3, #8
 8008186:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008188:	633a      	str	r2, [r7, #48]	; 0x30
 800818a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800818e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e5      	bne.n	8008168 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d12e      	bne.n	800820e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f023 0310 	bic.w	r3, r3, #16
 80081ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081d4:	61fb      	str	r3, [r7, #28]
 80081d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d8:	69b9      	ldr	r1, [r7, #24]
 80081da:	69fa      	ldr	r2, [r7, #28]
 80081dc:	e841 2300 	strex	r3, r2, [r1]
 80081e0:	617b      	str	r3, [r7, #20]
   return(result);
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e6      	bne.n	80081b6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	f003 0310 	and.w	r3, r3, #16
 80081f2:	2b10      	cmp	r3, #16
 80081f4:	d103      	bne.n	80081fe <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2210      	movs	r2, #16
 80081fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff f9e0 	bl	80075cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800820c:	e00d      	b.n	800822a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7f9 fa50 	bl	80016b4 <HAL_UART_RxCpltCallback>
}
 8008214:	e009      	b.n	800822a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	8b1b      	ldrh	r3, [r3, #24]
 800821c:	b29a      	uxth	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0208 	orr.w	r2, r2, #8
 8008226:	b292      	uxth	r2, r2
 8008228:	831a      	strh	r2, [r3, #24]
}
 800822a:	bf00      	nop
 800822c:	3758      	adds	r7, #88	; 0x58
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b096      	sub	sp, #88	; 0x58
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008240:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008248:	2b22      	cmp	r3, #34	; 0x22
 800824a:	f040 8094 	bne.w	8008376 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008254:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800825e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008262:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008266:	4013      	ands	r3, r2
 8008268:	b29a      	uxth	r2, r3
 800826a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800826c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008272:	1c9a      	adds	r2, r3, #2
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800827e:	b29b      	uxth	r3, r3
 8008280:	3b01      	subs	r3, #1
 8008282:	b29a      	uxth	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008290:	b29b      	uxth	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d179      	bne.n	800838a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829e:	e853 3f00 	ldrex	r3, [r3]
 80082a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b4:	643b      	str	r3, [r7, #64]	; 0x40
 80082b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e6      	bne.n	8008296 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3308      	adds	r3, #8
 80082ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	f023 0301 	bic.w	r3, r3, #1
 80082de:	64bb      	str	r3, [r7, #72]	; 0x48
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3308      	adds	r3, #8
 80082e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e5      	bne.n	80082c8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2220      	movs	r2, #32
 8008300:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800830c:	2b01      	cmp	r3, #1
 800830e:	d12e      	bne.n	800836e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	e853 3f00 	ldrex	r3, [r3]
 8008322:	60bb      	str	r3, [r7, #8]
   return(result);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f023 0310 	bic.w	r3, r3, #16
 800832a:	647b      	str	r3, [r7, #68]	; 0x44
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	461a      	mov	r2, r3
 8008332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008338:	6979      	ldr	r1, [r7, #20]
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	e841 2300 	strex	r3, r2, [r1]
 8008340:	613b      	str	r3, [r7, #16]
   return(result);
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1e6      	bne.n	8008316 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	f003 0310 	and.w	r3, r3, #16
 8008352:	2b10      	cmp	r3, #16
 8008354:	d103      	bne.n	800835e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2210      	movs	r2, #16
 800835c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff f930 	bl	80075cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800836c:	e00d      	b.n	800838a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7f9 f9a0 	bl	80016b4 <HAL_UART_RxCpltCallback>
}
 8008374:	e009      	b.n	800838a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	8b1b      	ldrh	r3, [r3, #24]
 800837c:	b29a      	uxth	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f042 0208 	orr.w	r2, r2, #8
 8008386:	b292      	uxth	r2, r2
 8008388:	831a      	strh	r2, [r3, #24]
}
 800838a:	bf00      	nop
 800838c:	3758      	adds	r7, #88	; 0x58
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800839a:	bf00      	nop
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <setCSLine>:
#define RES14           14

#define AMT22_DELAY     10

void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	460b      	mov	r3, r1
 80083b0:	807b      	strh	r3, [r7, #2]
 80083b2:	4613      	mov	r3, r2
 80083b4:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 80083b6:	787a      	ldrb	r2, [r7, #1]
 80083b8:	887b      	ldrh	r3, [r7, #2]
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7fb fe73 	bl	80040a8 <HAL_GPIO_WritePin>
}
 80083c2:	bf00      	nop
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b088      	sub	sp, #32
 80083ce:	af02      	add	r7, sp, #8
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	461a      	mov	r2, r3
 80083d6:	460b      	mov	r3, r1
 80083d8:	72fb      	strb	r3, [r7, #11]
 80083da:	4613      	mov	r3, r2
 80083dc:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 80083de:	893b      	ldrh	r3, [r7, #8]
 80083e0:	2200      	movs	r2, #0
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f7ff ffde 	bl	80083a6 <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 80083ea:	200a      	movs	r0, #10
 80083ec:	f000 f9c8 	bl	8008780 <delay_us_AMT22>

  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 80083f0:	f107 0217 	add.w	r2, r7, #23
 80083f4:	f107 010b 	add.w	r1, r7, #11
 80083f8:	230a      	movs	r3, #10
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	2301      	movs	r3, #1
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f7fd f8fd 	bl	80055fe <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  //  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8008404:	200a      	movs	r0, #10
 8008406:	f000 f9bb 	bl	8008780 <delay_us_AMT22>

  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 800840a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800840e:	893b      	ldrh	r3, [r7, #8]
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7ff ffc7 	bl	80083a6 <setCSLine>

  return data;
 8008418:	7dfb      	ldrb	r3, [r7, #23]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3718      	adds	r7, #24
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b08c      	sub	sp, #48	; 0x30
 8008426:	af02      	add	r7, sp, #8
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	4611      	mov	r1, r2
 800842e:	461a      	mov	r2, r3
 8008430:	460b      	mov	r3, r1
 8008432:	80fb      	strh	r3, [r7, #6]
 8008434:	4613      	mov	r3, r2
 8008436:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8;
 8008438:	88fa      	ldrh	r2, [r7, #6]
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	2300      	movs	r3, #0
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	4613      	mov	r3, r2
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	2100      	movs	r1, #0
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f7ff ffbe 	bl	80083ca <spiWriteRead>
 800844e:	4603      	mov	r3, r0
 8008450:	b29b      	uxth	r3, r3
 8008452:	021b      	lsls	r3, r3, #8
 8008454:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8008456:	200a      	movs	r0, #10
 8008458:	f000 f992 	bl	8008780 <delay_us_AMT22>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer);
 800845c:	88fa      	ldrh	r2, [r7, #6]
 800845e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008460:	9301      	str	r3, [sp, #4]
 8008462:	2301      	movs	r3, #1
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	4613      	mov	r3, r2
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	2100      	movs	r1, #0
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f7ff ffac 	bl	80083ca <spiWriteRead>
 8008472:	4603      	mov	r3, r0
 8008474:	b29a      	uxth	r2, r3
 8008476:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008478:	4313      	orrs	r3, r2
 800847a:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 800847c:	2300      	movs	r3, #0
 800847e:	623b      	str	r3, [r7, #32]
 8008480:	e010      	b.n	80084a4 <getPositionSPI+0x82>
 8008482:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008484:	6a3b      	ldr	r3, [r7, #32]
 8008486:	fa42 f303 	asr.w	r3, r2, r3
 800848a:	b2db      	uxtb	r3, r3
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	b2d9      	uxtb	r1, r3
 8008492:	f107 0210 	add.w	r2, r7, #16
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	4413      	add	r3, r2
 800849a:	460a      	mov	r2, r1
 800849c:	701a      	strb	r2, [r3, #0]
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	3301      	adds	r3, #1
 80084a2:	623b      	str	r3, [r7, #32]
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	2b0f      	cmp	r3, #15
 80084a8:	ddeb      	ble.n	8008482 <getPositionSPI+0x60>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
 if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 80084aa:	7ffb      	ldrb	r3, [r7, #31]
 80084ac:	4619      	mov	r1, r3
 80084ae:	7f7a      	ldrb	r2, [r7, #29]
 80084b0:	7efb      	ldrb	r3, [r7, #27]
 80084b2:	4053      	eors	r3, r2
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	7e7b      	ldrb	r3, [r7, #25]
 80084b8:	4053      	eors	r3, r2
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	7dfb      	ldrb	r3, [r7, #23]
 80084be:	4053      	eors	r3, r2
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	7d7b      	ldrb	r3, [r7, #21]
 80084c4:	4053      	eors	r3, r2
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	7cfb      	ldrb	r3, [r7, #19]
 80084ca:	4053      	eors	r3, r2
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	7c7b      	ldrb	r3, [r7, #17]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	bf0c      	ite	eq
 80084d4:	2301      	moveq	r3, #1
 80084d6:	2300      	movne	r3, #0
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	4299      	cmp	r1, r3
 80084dc:	d11e      	bne.n	800851c <getPositionSPI+0xfa>
         && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 80084de:	7fbb      	ldrb	r3, [r7, #30]
 80084e0:	4619      	mov	r1, r3
 80084e2:	7f3a      	ldrb	r2, [r7, #28]
 80084e4:	7ebb      	ldrb	r3, [r7, #26]
 80084e6:	4053      	eors	r3, r2
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	7e3b      	ldrb	r3, [r7, #24]
 80084ec:	4053      	eors	r3, r2
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	7dbb      	ldrb	r3, [r7, #22]
 80084f2:	4053      	eors	r3, r2
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	7d3b      	ldrb	r3, [r7, #20]
 80084f8:	4053      	eors	r3, r2
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	7cbb      	ldrb	r3, [r7, #18]
 80084fe:	4053      	eors	r3, r2
 8008500:	b2da      	uxtb	r2, r3
 8008502:	7c3b      	ldrb	r3, [r7, #16]
 8008504:	429a      	cmp	r2, r3
 8008506:	bf0c      	ite	eq
 8008508:	2301      	moveq	r3, #1
 800850a:	2300      	movne	r3, #0
 800850c:	b2db      	uxtb	r3, r3
 800850e:	4299      	cmp	r1, r3
 8008510:	d104      	bne.n	800851c <getPositionSPI+0xfa>
   {
     //we got back a good position, so just mask away the checkbits
     currentPosition &= 0x3FFF;
 8008512:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008514:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008518:	84fb      	strh	r3, [r7, #38]	; 0x26
 800851a:	e002      	b.n	8008522 <getPositionSPI+0x100>
   }
 else
 {
   currentPosition = 0xFFFF; //bad position
 800851c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008520:	84fb      	strh	r3, [r7, #38]	; 0x26
 }
  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 8008522:	797b      	ldrb	r3, [r7, #5]
 8008524:	2b0c      	cmp	r3, #12
 8008526:	d107      	bne.n	8008538 <getPositionSPI+0x116>
 8008528:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800852a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800852e:	4293      	cmp	r3, r2
 8008530:	d002      	beq.n	8008538 <getPositionSPI+0x116>
 8008532:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008534:	089b      	lsrs	r3, r3, #2
 8008536:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 8008538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800853a:	4618      	mov	r0, r3
 800853c:	3728      	adds	r7, #40	; 0x28
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <getTurnCounterSPI>:
void getTurnCounterSPI(int16_t* returnArr, SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b090      	sub	sp, #64	; 0x40
 8008546:	af02      	add	r7, sp, #8
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	607a      	str	r2, [r7, #4]
 800854e:	807b      	strh	r3, [r7, #2]
	uint8_t binaryArray[16];        //after receiving the position and turn we will populate this array and use it for calculating the checksum
	int16_t position, turns;

	//get first byte of position which is the high byte, shift it 8 bits. don't release line for the first byte. then, get the lower byte and
	// or it with the variable to complete the read
	position_raw = (spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8);
 8008550:	887a      	ldrh	r2, [r7, #2]
 8008552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	2300      	movs	r3, #0
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	4613      	mov	r3, r2
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	2100      	movs	r1, #0
 8008560:	68b8      	ldr	r0, [r7, #8]
 8008562:	f7ff ff32 	bl	80083ca <spiWriteRead>
 8008566:	4603      	mov	r3, r0
 8008568:	021b      	lsls	r3, r3, #8
 800856a:	62bb      	str	r3, [r7, #40]	; 0x28
	delay_us_AMT22(AMT22_DELAY);
 800856c:	200a      	movs	r0, #10
 800856e:	f000 f907 	bl	8008780 <delay_us_AMT22>
	position_raw |= (spiWriteRead(hspi, AMT22_TURNS, encoderPort, encoderPin, 0, timer));
 8008572:	887a      	ldrh	r2, [r7, #2]
 8008574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008576:	9301      	str	r3, [sp, #4]
 8008578:	2300      	movs	r3, #0
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	4613      	mov	r3, r2
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	21a0      	movs	r1, #160	; 0xa0
 8008582:	68b8      	ldr	r0, [r7, #8]
 8008584:	f7ff ff21 	bl	80083ca <spiWriteRead>
 8008588:	4603      	mov	r3, r0
 800858a:	461a      	mov	r2, r3
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	4313      	orrs	r3, r2
 8008590:	62bb      	str	r3, [r7, #40]	; 0x28

	delay_us_AMT22(AMT22_DELAY);
 8008592:	200a      	movs	r0, #10
 8008594:	f000 f8f4 	bl	8008780 <delay_us_AMT22>

	//same thing with the turn counter
	turns_raw = (spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8);
 8008598:	887a      	ldrh	r2, [r7, #2]
 800859a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800859c:	9301      	str	r3, [sp, #4]
 800859e:	2300      	movs	r3, #0
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	4613      	mov	r3, r2
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	2100      	movs	r1, #0
 80085a8:	68b8      	ldr	r0, [r7, #8]
 80085aa:	f7ff ff0e 	bl	80083ca <spiWriteRead>
 80085ae:	4603      	mov	r3, r0
 80085b0:	021b      	lsls	r3, r3, #8
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24
	delay_us_AMT22(AMT22_DELAY);
 80085b4:	200a      	movs	r0, #10
 80085b6:	f000 f8e3 	bl	8008780 <delay_us_AMT22>
	turns_raw |= (spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer));
 80085ba:	887a      	ldrh	r2, [r7, #2]
 80085bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	2301      	movs	r3, #1
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	4613      	mov	r3, r2
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	2100      	movs	r1, #0
 80085ca:	68b8      	ldr	r0, [r7, #8]
 80085cc:	f7ff fefd 	bl	80083ca <spiWriteRead>
 80085d0:	4603      	mov	r3, r0
 80085d2:	461a      	mov	r2, r3
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	4313      	orrs	r3, r2
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24

	//run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
	for(int i = 0; i < 16; i++){binaryArray[i] = (0x01) & (position_raw >> (i));}
 80085da:	2300      	movs	r3, #0
 80085dc:	633b      	str	r3, [r7, #48]	; 0x30
 80085de:	e010      	b.n	8008602 <getTurnCounterSPI+0xc0>
 80085e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	fa22 f303 	lsr.w	r3, r2, r3
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	b2d9      	uxtb	r1, r3
 80085f0:	f107 0214 	add.w	r2, r7, #20
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	4413      	add	r3, r2
 80085f8:	460a      	mov	r2, r1
 80085fa:	701a      	strb	r2, [r3, #0]
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	3301      	adds	r3, #1
 8008600:	633b      	str	r3, [r7, #48]	; 0x30
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	2b0f      	cmp	r3, #15
 8008606:	ddeb      	ble.n	80085e0 <getTurnCounterSPI+0x9e>

	//using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
	if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8008608:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800860c:	4619      	mov	r1, r3
 800860e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008612:	7ffb      	ldrb	r3, [r7, #31]
 8008614:	4053      	eors	r3, r2
 8008616:	b2da      	uxtb	r2, r3
 8008618:	7f7b      	ldrb	r3, [r7, #29]
 800861a:	4053      	eors	r3, r2
 800861c:	b2da      	uxtb	r2, r3
 800861e:	7efb      	ldrb	r3, [r7, #27]
 8008620:	4053      	eors	r3, r2
 8008622:	b2da      	uxtb	r2, r3
 8008624:	7e7b      	ldrb	r3, [r7, #25]
 8008626:	4053      	eors	r3, r2
 8008628:	b2da      	uxtb	r2, r3
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	4053      	eors	r3, r2
 800862e:	b2da      	uxtb	r2, r3
 8008630:	7d7b      	ldrb	r3, [r7, #21]
 8008632:	429a      	cmp	r2, r3
 8008634:	bf0c      	ite	eq
 8008636:	2301      	moveq	r3, #1
 8008638:	2300      	movne	r3, #0
 800863a:	b2db      	uxtb	r3, r3
 800863c:	4299      	cmp	r1, r3
 800863e:	d121      	bne.n	8008684 <getTurnCounterSPI+0x142>
		 && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8008640:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008644:	4619      	mov	r1, r3
 8008646:	f897 2020 	ldrb.w	r2, [r7, #32]
 800864a:	7fbb      	ldrb	r3, [r7, #30]
 800864c:	4053      	eors	r3, r2
 800864e:	b2da      	uxtb	r2, r3
 8008650:	7f3b      	ldrb	r3, [r7, #28]
 8008652:	4053      	eors	r3, r2
 8008654:	b2da      	uxtb	r2, r3
 8008656:	7ebb      	ldrb	r3, [r7, #26]
 8008658:	4053      	eors	r3, r2
 800865a:	b2da      	uxtb	r2, r3
 800865c:	7e3b      	ldrb	r3, [r7, #24]
 800865e:	4053      	eors	r3, r2
 8008660:	b2da      	uxtb	r2, r3
 8008662:	7dbb      	ldrb	r3, [r7, #22]
 8008664:	4053      	eors	r3, r2
 8008666:	b2da      	uxtb	r2, r3
 8008668:	7d3b      	ldrb	r3, [r7, #20]
 800866a:	429a      	cmp	r2, r3
 800866c:	bf0c      	ite	eq
 800866e:	2301      	moveq	r3, #1
 8008670:	2300      	movne	r3, #0
 8008672:	b2db      	uxtb	r3, r3
 8008674:	4299      	cmp	r1, r3
 8008676:	d105      	bne.n	8008684 <getTurnCounterSPI+0x142>
	{
	 //we got back a good position, so just mask away the checkbits
	 // bitstream &= 0x3FFF;
	 // position = bitstream;
		position = (position_raw & 0x3FFF);
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	b21b      	sxth	r3, r3
 800867c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008680:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008682:	e002      	b.n	800868a <getTurnCounterSPI+0x148>
	}
	else{position = 0xFFFF;} // bad position
 8008684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008688:	86fb      	strh	r3, [r7, #54]	; 0x36

  //if the resolution is 12-bits, and position wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (position != 0xFFFF)) position = position >> 2;
 800868a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800868e:	2b0c      	cmp	r3, #12
 8008690:	d103      	bne.n	800869a <getTurnCounterSPI+0x158>
 8008692:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008696:	109b      	asrs	r3, r3, #2
 8008698:	86fb      	strh	r3, [r7, #54]	; 0x36


  //repeat checksum calculation for the turn counter
  for(int i = 0; i < 16; i++){binaryArray[i] = (0x01) & (turns_raw >> (i));} // TODO check if this is necessary
 800869a:	2300      	movs	r3, #0
 800869c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800869e:	e010      	b.n	80086c2 <getTurnCounterSPI+0x180>
 80086a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a4:	fa22 f303 	lsr.w	r3, r2, r3
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	b2d9      	uxtb	r1, r3
 80086b0:	f107 0214 	add.w	r2, r7, #20
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b6:	4413      	add	r3, r2
 80086b8:	460a      	mov	r2, r1
 80086ba:	701a      	strb	r2, [r3, #0]
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086be:	3301      	adds	r3, #1
 80086c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c4:	2b0f      	cmp	r3, #15
 80086c6:	ddeb      	ble.n	80086a0 <getTurnCounterSPI+0x15e>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
	if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 80086c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086cc:	4619      	mov	r1, r3
 80086ce:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80086d2:	7ffb      	ldrb	r3, [r7, #31]
 80086d4:	4053      	eors	r3, r2
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	7f7b      	ldrb	r3, [r7, #29]
 80086da:	4053      	eors	r3, r2
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	7efb      	ldrb	r3, [r7, #27]
 80086e0:	4053      	eors	r3, r2
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	7e7b      	ldrb	r3, [r7, #25]
 80086e6:	4053      	eors	r3, r2
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	4053      	eors	r3, r2
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	7d7b      	ldrb	r3, [r7, #21]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	bf0c      	ite	eq
 80086f6:	2301      	moveq	r3, #1
 80086f8:	2300      	movne	r3, #0
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	4299      	cmp	r1, r3
 80086fe:	d130      	bne.n	8008762 <getTurnCounterSPI+0x220>
		 && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8008700:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008704:	4619      	mov	r1, r3
 8008706:	f897 2020 	ldrb.w	r2, [r7, #32]
 800870a:	7fbb      	ldrb	r3, [r7, #30]
 800870c:	4053      	eors	r3, r2
 800870e:	b2da      	uxtb	r2, r3
 8008710:	7f3b      	ldrb	r3, [r7, #28]
 8008712:	4053      	eors	r3, r2
 8008714:	b2da      	uxtb	r2, r3
 8008716:	7ebb      	ldrb	r3, [r7, #26]
 8008718:	4053      	eors	r3, r2
 800871a:	b2da      	uxtb	r2, r3
 800871c:	7e3b      	ldrb	r3, [r7, #24]
 800871e:	4053      	eors	r3, r2
 8008720:	b2da      	uxtb	r2, r3
 8008722:	7dbb      	ldrb	r3, [r7, #22]
 8008724:	4053      	eors	r3, r2
 8008726:	b2da      	uxtb	r2, r3
 8008728:	7d3b      	ldrb	r3, [r7, #20]
 800872a:	429a      	cmp	r2, r3
 800872c:	bf0c      	ite	eq
 800872e:	2301      	moveq	r3, #1
 8008730:	2300      	movne	r3, #0
 8008732:	b2db      	uxtb	r3, r3
 8008734:	4299      	cmp	r1, r3
 8008736:	d114      	bne.n	8008762 <getTurnCounterSPI+0x220>
	{
    //we got back a good position, so just mask away the checkbits
    turns_raw &= 0x3FFF;
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800873e:	627b      	str	r3, [r7, #36]	; 0x24

    // the received 16 bit integer is supposed to be a 14-bit signed integer with two check bits as its
    // msb. once that is masked away, we still have to figure out its sign and extend it.

    // check bit 14
    if(turns_raw & 0x2000){
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d008      	beq.n	800875c <getTurnCounterSPI+0x21a>
      // if number is negative, extend the sign by or'ing it with 1100 0000 0000 0000 and complete it to
      // an int16_t
      turns = (0xC000 | turns_raw);
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	b29b      	uxth	r3, r3
 800874e:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8008752:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8008756:	b29b      	uxth	r3, r3
 8008758:	86bb      	strh	r3, [r7, #52]	; 0x34
    if(turns_raw & 0x2000){
 800875a:	e005      	b.n	8008768 <getTurnCounterSPI+0x226>
    }else{
      // if number is positive, its 14-bit version will be equal to its int16_t version
      turns = turns_raw;
 800875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875e:	86bb      	strh	r3, [r7, #52]	; 0x34
    if(turns_raw & 0x2000){
 8008760:	e002      	b.n	8008768 <getTurnCounterSPI+0x226>
    }
	}
	else
	{
	  turns = 0xFFFF; //bad position
 8008762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008766:	86bb      	strh	r3, [r7, #52]	; 0x34
	}


	// populate return array
	returnArr[0] = position;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800876c:	801a      	strh	r2, [r3, #0]
	returnArr[1] = turns;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3302      	adds	r3, #2
 8008772:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008774:	801a      	strh	r2, [r3, #0]

}
 8008776:	bf00      	nop
 8008778:	3738      	adds	r7, #56	; 0x38
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
	...

08008780 <delay_us_AMT22>:
			passedTime +=timer->Init.Period;
		}
	}
}
void delay_us_AMT22 (uint16_t us)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	4603      	mov	r3, r0
 8008788:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 800878a:	4b09      	ldr	r3, [pc, #36]	; (80087b0 <delay_us_AMT22+0x30>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2200      	movs	r2, #0
 8008790:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8008792:	bf00      	nop
 8008794:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <delay_us_AMT22+0x30>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800879a:	88fb      	ldrh	r3, [r7, #6]
 800879c:	429a      	cmp	r2, r3
 800879e:	d3f9      	bcc.n	8008794 <delay_us_AMT22+0x14>
}
 80087a0:	bf00      	nop
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	2000068c 	.word	0x2000068c

080087b4 <_Znaj>:
 80087b4:	f000 b800 	b.w	80087b8 <_Znwj>

080087b8 <_Znwj>:
 80087b8:	2801      	cmp	r0, #1
 80087ba:	bf38      	it	cc
 80087bc:	2001      	movcc	r0, #1
 80087be:	b510      	push	{r4, lr}
 80087c0:	4604      	mov	r4, r0
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 f844 	bl	8008850 <malloc>
 80087c8:	b930      	cbnz	r0, 80087d8 <_Znwj+0x20>
 80087ca:	f000 f807 	bl	80087dc <_ZSt15get_new_handlerv>
 80087ce:	b908      	cbnz	r0, 80087d4 <_Znwj+0x1c>
 80087d0:	f000 f80c 	bl	80087ec <abort>
 80087d4:	4780      	blx	r0
 80087d6:	e7f4      	b.n	80087c2 <_Znwj+0xa>
 80087d8:	bd10      	pop	{r4, pc}
	...

080087dc <_ZSt15get_new_handlerv>:
 80087dc:	4b02      	ldr	r3, [pc, #8]	; (80087e8 <_ZSt15get_new_handlerv+0xc>)
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	f3bf 8f5b 	dmb	ish
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	200007f4 	.word	0x200007f4

080087ec <abort>:
 80087ec:	b508      	push	{r3, lr}
 80087ee:	2006      	movs	r0, #6
 80087f0:	f001 f878 	bl	80098e4 <raise>
 80087f4:	2001      	movs	r0, #1
 80087f6:	f7f9 fa63 	bl	8001cc0 <_exit>
	...

080087fc <__errno>:
 80087fc:	4b01      	ldr	r3, [pc, #4]	; (8008804 <__errno+0x8>)
 80087fe:	6818      	ldr	r0, [r3, #0]
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	2000003c 	.word	0x2000003c

08008808 <__libc_init_array>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	4d0d      	ldr	r5, [pc, #52]	; (8008840 <__libc_init_array+0x38>)
 800880c:	4c0d      	ldr	r4, [pc, #52]	; (8008844 <__libc_init_array+0x3c>)
 800880e:	1b64      	subs	r4, r4, r5
 8008810:	10a4      	asrs	r4, r4, #2
 8008812:	2600      	movs	r6, #0
 8008814:	42a6      	cmp	r6, r4
 8008816:	d109      	bne.n	800882c <__libc_init_array+0x24>
 8008818:	4d0b      	ldr	r5, [pc, #44]	; (8008848 <__libc_init_array+0x40>)
 800881a:	4c0c      	ldr	r4, [pc, #48]	; (800884c <__libc_init_array+0x44>)
 800881c:	f005 fba6 	bl	800df6c <_init>
 8008820:	1b64      	subs	r4, r4, r5
 8008822:	10a4      	asrs	r4, r4, #2
 8008824:	2600      	movs	r6, #0
 8008826:	42a6      	cmp	r6, r4
 8008828:	d105      	bne.n	8008836 <__libc_init_array+0x2e>
 800882a:	bd70      	pop	{r4, r5, r6, pc}
 800882c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008830:	4798      	blx	r3
 8008832:	3601      	adds	r6, #1
 8008834:	e7ee      	b.n	8008814 <__libc_init_array+0xc>
 8008836:	f855 3b04 	ldr.w	r3, [r5], #4
 800883a:	4798      	blx	r3
 800883c:	3601      	adds	r6, #1
 800883e:	e7f2      	b.n	8008826 <__libc_init_array+0x1e>
 8008840:	0800ec44 	.word	0x0800ec44
 8008844:	0800ec44 	.word	0x0800ec44
 8008848:	0800ec44 	.word	0x0800ec44
 800884c:	0800ec4c 	.word	0x0800ec4c

08008850 <malloc>:
 8008850:	4b02      	ldr	r3, [pc, #8]	; (800885c <malloc+0xc>)
 8008852:	4601      	mov	r1, r0
 8008854:	6818      	ldr	r0, [r3, #0]
 8008856:	f000 b877 	b.w	8008948 <_malloc_r>
 800885a:	bf00      	nop
 800885c:	2000003c 	.word	0x2000003c

08008860 <memset>:
 8008860:	4402      	add	r2, r0
 8008862:	4603      	mov	r3, r0
 8008864:	4293      	cmp	r3, r2
 8008866:	d100      	bne.n	800886a <memset+0xa>
 8008868:	4770      	bx	lr
 800886a:	f803 1b01 	strb.w	r1, [r3], #1
 800886e:	e7f9      	b.n	8008864 <memset+0x4>

08008870 <_free_r>:
 8008870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008872:	2900      	cmp	r1, #0
 8008874:	d044      	beq.n	8008900 <_free_r+0x90>
 8008876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800887a:	9001      	str	r0, [sp, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	f1a1 0404 	sub.w	r4, r1, #4
 8008882:	bfb8      	it	lt
 8008884:	18e4      	addlt	r4, r4, r3
 8008886:	f003 fdcb 	bl	800c420 <__malloc_lock>
 800888a:	4a1e      	ldr	r2, [pc, #120]	; (8008904 <_free_r+0x94>)
 800888c:	9801      	ldr	r0, [sp, #4]
 800888e:	6813      	ldr	r3, [r2, #0]
 8008890:	b933      	cbnz	r3, 80088a0 <_free_r+0x30>
 8008892:	6063      	str	r3, [r4, #4]
 8008894:	6014      	str	r4, [r2, #0]
 8008896:	b003      	add	sp, #12
 8008898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800889c:	f003 bdc6 	b.w	800c42c <__malloc_unlock>
 80088a0:	42a3      	cmp	r3, r4
 80088a2:	d908      	bls.n	80088b6 <_free_r+0x46>
 80088a4:	6825      	ldr	r5, [r4, #0]
 80088a6:	1961      	adds	r1, r4, r5
 80088a8:	428b      	cmp	r3, r1
 80088aa:	bf01      	itttt	eq
 80088ac:	6819      	ldreq	r1, [r3, #0]
 80088ae:	685b      	ldreq	r3, [r3, #4]
 80088b0:	1949      	addeq	r1, r1, r5
 80088b2:	6021      	streq	r1, [r4, #0]
 80088b4:	e7ed      	b.n	8008892 <_free_r+0x22>
 80088b6:	461a      	mov	r2, r3
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	b10b      	cbz	r3, 80088c0 <_free_r+0x50>
 80088bc:	42a3      	cmp	r3, r4
 80088be:	d9fa      	bls.n	80088b6 <_free_r+0x46>
 80088c0:	6811      	ldr	r1, [r2, #0]
 80088c2:	1855      	adds	r5, r2, r1
 80088c4:	42a5      	cmp	r5, r4
 80088c6:	d10b      	bne.n	80088e0 <_free_r+0x70>
 80088c8:	6824      	ldr	r4, [r4, #0]
 80088ca:	4421      	add	r1, r4
 80088cc:	1854      	adds	r4, r2, r1
 80088ce:	42a3      	cmp	r3, r4
 80088d0:	6011      	str	r1, [r2, #0]
 80088d2:	d1e0      	bne.n	8008896 <_free_r+0x26>
 80088d4:	681c      	ldr	r4, [r3, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	6053      	str	r3, [r2, #4]
 80088da:	4421      	add	r1, r4
 80088dc:	6011      	str	r1, [r2, #0]
 80088de:	e7da      	b.n	8008896 <_free_r+0x26>
 80088e0:	d902      	bls.n	80088e8 <_free_r+0x78>
 80088e2:	230c      	movs	r3, #12
 80088e4:	6003      	str	r3, [r0, #0]
 80088e6:	e7d6      	b.n	8008896 <_free_r+0x26>
 80088e8:	6825      	ldr	r5, [r4, #0]
 80088ea:	1961      	adds	r1, r4, r5
 80088ec:	428b      	cmp	r3, r1
 80088ee:	bf04      	itt	eq
 80088f0:	6819      	ldreq	r1, [r3, #0]
 80088f2:	685b      	ldreq	r3, [r3, #4]
 80088f4:	6063      	str	r3, [r4, #4]
 80088f6:	bf04      	itt	eq
 80088f8:	1949      	addeq	r1, r1, r5
 80088fa:	6021      	streq	r1, [r4, #0]
 80088fc:	6054      	str	r4, [r2, #4]
 80088fe:	e7ca      	b.n	8008896 <_free_r+0x26>
 8008900:	b003      	add	sp, #12
 8008902:	bd30      	pop	{r4, r5, pc}
 8008904:	200007f8 	.word	0x200007f8

08008908 <sbrk_aligned>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	4e0e      	ldr	r6, [pc, #56]	; (8008944 <sbrk_aligned+0x3c>)
 800890c:	460c      	mov	r4, r1
 800890e:	6831      	ldr	r1, [r6, #0]
 8008910:	4605      	mov	r5, r0
 8008912:	b911      	cbnz	r1, 800891a <sbrk_aligned+0x12>
 8008914:	f000 ffa8 	bl	8009868 <_sbrk_r>
 8008918:	6030      	str	r0, [r6, #0]
 800891a:	4621      	mov	r1, r4
 800891c:	4628      	mov	r0, r5
 800891e:	f000 ffa3 	bl	8009868 <_sbrk_r>
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	d00a      	beq.n	800893c <sbrk_aligned+0x34>
 8008926:	1cc4      	adds	r4, r0, #3
 8008928:	f024 0403 	bic.w	r4, r4, #3
 800892c:	42a0      	cmp	r0, r4
 800892e:	d007      	beq.n	8008940 <sbrk_aligned+0x38>
 8008930:	1a21      	subs	r1, r4, r0
 8008932:	4628      	mov	r0, r5
 8008934:	f000 ff98 	bl	8009868 <_sbrk_r>
 8008938:	3001      	adds	r0, #1
 800893a:	d101      	bne.n	8008940 <sbrk_aligned+0x38>
 800893c:	f04f 34ff 	mov.w	r4, #4294967295
 8008940:	4620      	mov	r0, r4
 8008942:	bd70      	pop	{r4, r5, r6, pc}
 8008944:	200007fc 	.word	0x200007fc

08008948 <_malloc_r>:
 8008948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800894c:	1ccd      	adds	r5, r1, #3
 800894e:	f025 0503 	bic.w	r5, r5, #3
 8008952:	3508      	adds	r5, #8
 8008954:	2d0c      	cmp	r5, #12
 8008956:	bf38      	it	cc
 8008958:	250c      	movcc	r5, #12
 800895a:	2d00      	cmp	r5, #0
 800895c:	4607      	mov	r7, r0
 800895e:	db01      	blt.n	8008964 <_malloc_r+0x1c>
 8008960:	42a9      	cmp	r1, r5
 8008962:	d905      	bls.n	8008970 <_malloc_r+0x28>
 8008964:	230c      	movs	r3, #12
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	2600      	movs	r6, #0
 800896a:	4630      	mov	r0, r6
 800896c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008970:	4e2e      	ldr	r6, [pc, #184]	; (8008a2c <_malloc_r+0xe4>)
 8008972:	f003 fd55 	bl	800c420 <__malloc_lock>
 8008976:	6833      	ldr	r3, [r6, #0]
 8008978:	461c      	mov	r4, r3
 800897a:	bb34      	cbnz	r4, 80089ca <_malloc_r+0x82>
 800897c:	4629      	mov	r1, r5
 800897e:	4638      	mov	r0, r7
 8008980:	f7ff ffc2 	bl	8008908 <sbrk_aligned>
 8008984:	1c43      	adds	r3, r0, #1
 8008986:	4604      	mov	r4, r0
 8008988:	d14d      	bne.n	8008a26 <_malloc_r+0xde>
 800898a:	6834      	ldr	r4, [r6, #0]
 800898c:	4626      	mov	r6, r4
 800898e:	2e00      	cmp	r6, #0
 8008990:	d140      	bne.n	8008a14 <_malloc_r+0xcc>
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	4631      	mov	r1, r6
 8008996:	4638      	mov	r0, r7
 8008998:	eb04 0803 	add.w	r8, r4, r3
 800899c:	f000 ff64 	bl	8009868 <_sbrk_r>
 80089a0:	4580      	cmp	r8, r0
 80089a2:	d13a      	bne.n	8008a1a <_malloc_r+0xd2>
 80089a4:	6821      	ldr	r1, [r4, #0]
 80089a6:	3503      	adds	r5, #3
 80089a8:	1a6d      	subs	r5, r5, r1
 80089aa:	f025 0503 	bic.w	r5, r5, #3
 80089ae:	3508      	adds	r5, #8
 80089b0:	2d0c      	cmp	r5, #12
 80089b2:	bf38      	it	cc
 80089b4:	250c      	movcc	r5, #12
 80089b6:	4629      	mov	r1, r5
 80089b8:	4638      	mov	r0, r7
 80089ba:	f7ff ffa5 	bl	8008908 <sbrk_aligned>
 80089be:	3001      	adds	r0, #1
 80089c0:	d02b      	beq.n	8008a1a <_malloc_r+0xd2>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	442b      	add	r3, r5
 80089c6:	6023      	str	r3, [r4, #0]
 80089c8:	e00e      	b.n	80089e8 <_malloc_r+0xa0>
 80089ca:	6822      	ldr	r2, [r4, #0]
 80089cc:	1b52      	subs	r2, r2, r5
 80089ce:	d41e      	bmi.n	8008a0e <_malloc_r+0xc6>
 80089d0:	2a0b      	cmp	r2, #11
 80089d2:	d916      	bls.n	8008a02 <_malloc_r+0xba>
 80089d4:	1961      	adds	r1, r4, r5
 80089d6:	42a3      	cmp	r3, r4
 80089d8:	6025      	str	r5, [r4, #0]
 80089da:	bf18      	it	ne
 80089dc:	6059      	strne	r1, [r3, #4]
 80089de:	6863      	ldr	r3, [r4, #4]
 80089e0:	bf08      	it	eq
 80089e2:	6031      	streq	r1, [r6, #0]
 80089e4:	5162      	str	r2, [r4, r5]
 80089e6:	604b      	str	r3, [r1, #4]
 80089e8:	4638      	mov	r0, r7
 80089ea:	f104 060b 	add.w	r6, r4, #11
 80089ee:	f003 fd1d 	bl	800c42c <__malloc_unlock>
 80089f2:	f026 0607 	bic.w	r6, r6, #7
 80089f6:	1d23      	adds	r3, r4, #4
 80089f8:	1af2      	subs	r2, r6, r3
 80089fa:	d0b6      	beq.n	800896a <_malloc_r+0x22>
 80089fc:	1b9b      	subs	r3, r3, r6
 80089fe:	50a3      	str	r3, [r4, r2]
 8008a00:	e7b3      	b.n	800896a <_malloc_r+0x22>
 8008a02:	6862      	ldr	r2, [r4, #4]
 8008a04:	42a3      	cmp	r3, r4
 8008a06:	bf0c      	ite	eq
 8008a08:	6032      	streq	r2, [r6, #0]
 8008a0a:	605a      	strne	r2, [r3, #4]
 8008a0c:	e7ec      	b.n	80089e8 <_malloc_r+0xa0>
 8008a0e:	4623      	mov	r3, r4
 8008a10:	6864      	ldr	r4, [r4, #4]
 8008a12:	e7b2      	b.n	800897a <_malloc_r+0x32>
 8008a14:	4634      	mov	r4, r6
 8008a16:	6876      	ldr	r6, [r6, #4]
 8008a18:	e7b9      	b.n	800898e <_malloc_r+0x46>
 8008a1a:	230c      	movs	r3, #12
 8008a1c:	603b      	str	r3, [r7, #0]
 8008a1e:	4638      	mov	r0, r7
 8008a20:	f003 fd04 	bl	800c42c <__malloc_unlock>
 8008a24:	e7a1      	b.n	800896a <_malloc_r+0x22>
 8008a26:	6025      	str	r5, [r4, #0]
 8008a28:	e7de      	b.n	80089e8 <_malloc_r+0xa0>
 8008a2a:	bf00      	nop
 8008a2c:	200007f8 	.word	0x200007f8

08008a30 <__cvt>:
 8008a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a34:	ec55 4b10 	vmov	r4, r5, d0
 8008a38:	2d00      	cmp	r5, #0
 8008a3a:	460e      	mov	r6, r1
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	462b      	mov	r3, r5
 8008a40:	bfbb      	ittet	lt
 8008a42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a46:	461d      	movlt	r5, r3
 8008a48:	2300      	movge	r3, #0
 8008a4a:	232d      	movlt	r3, #45	; 0x2d
 8008a4c:	700b      	strb	r3, [r1, #0]
 8008a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a54:	4691      	mov	r9, r2
 8008a56:	f023 0820 	bic.w	r8, r3, #32
 8008a5a:	bfbc      	itt	lt
 8008a5c:	4622      	movlt	r2, r4
 8008a5e:	4614      	movlt	r4, r2
 8008a60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a64:	d005      	beq.n	8008a72 <__cvt+0x42>
 8008a66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a6a:	d100      	bne.n	8008a6e <__cvt+0x3e>
 8008a6c:	3601      	adds	r6, #1
 8008a6e:	2102      	movs	r1, #2
 8008a70:	e000      	b.n	8008a74 <__cvt+0x44>
 8008a72:	2103      	movs	r1, #3
 8008a74:	ab03      	add	r3, sp, #12
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	ab02      	add	r3, sp, #8
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	ec45 4b10 	vmov	d0, r4, r5
 8008a80:	4653      	mov	r3, sl
 8008a82:	4632      	mov	r2, r6
 8008a84:	f002 f940 	bl	800ad08 <_dtoa_r>
 8008a88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a8c:	4607      	mov	r7, r0
 8008a8e:	d102      	bne.n	8008a96 <__cvt+0x66>
 8008a90:	f019 0f01 	tst.w	r9, #1
 8008a94:	d022      	beq.n	8008adc <__cvt+0xac>
 8008a96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a9a:	eb07 0906 	add.w	r9, r7, r6
 8008a9e:	d110      	bne.n	8008ac2 <__cvt+0x92>
 8008aa0:	783b      	ldrb	r3, [r7, #0]
 8008aa2:	2b30      	cmp	r3, #48	; 0x30
 8008aa4:	d10a      	bne.n	8008abc <__cvt+0x8c>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4620      	mov	r0, r4
 8008aac:	4629      	mov	r1, r5
 8008aae:	f7f8 f81b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ab2:	b918      	cbnz	r0, 8008abc <__cvt+0x8c>
 8008ab4:	f1c6 0601 	rsb	r6, r6, #1
 8008ab8:	f8ca 6000 	str.w	r6, [sl]
 8008abc:	f8da 3000 	ldr.w	r3, [sl]
 8008ac0:	4499      	add	r9, r3
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	4629      	mov	r1, r5
 8008aca:	f7f8 f80d 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ace:	b108      	cbz	r0, 8008ad4 <__cvt+0xa4>
 8008ad0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ad4:	2230      	movs	r2, #48	; 0x30
 8008ad6:	9b03      	ldr	r3, [sp, #12]
 8008ad8:	454b      	cmp	r3, r9
 8008ada:	d307      	bcc.n	8008aec <__cvt+0xbc>
 8008adc:	9b03      	ldr	r3, [sp, #12]
 8008ade:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ae0:	1bdb      	subs	r3, r3, r7
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	6013      	str	r3, [r2, #0]
 8008ae6:	b004      	add	sp, #16
 8008ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aec:	1c59      	adds	r1, r3, #1
 8008aee:	9103      	str	r1, [sp, #12]
 8008af0:	701a      	strb	r2, [r3, #0]
 8008af2:	e7f0      	b.n	8008ad6 <__cvt+0xa6>

08008af4 <__exponent>:
 8008af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008af6:	4603      	mov	r3, r0
 8008af8:	2900      	cmp	r1, #0
 8008afa:	bfb8      	it	lt
 8008afc:	4249      	neglt	r1, r1
 8008afe:	f803 2b02 	strb.w	r2, [r3], #2
 8008b02:	bfb4      	ite	lt
 8008b04:	222d      	movlt	r2, #45	; 0x2d
 8008b06:	222b      	movge	r2, #43	; 0x2b
 8008b08:	2909      	cmp	r1, #9
 8008b0a:	7042      	strb	r2, [r0, #1]
 8008b0c:	dd2a      	ble.n	8008b64 <__exponent+0x70>
 8008b0e:	f10d 0407 	add.w	r4, sp, #7
 8008b12:	46a4      	mov	ip, r4
 8008b14:	270a      	movs	r7, #10
 8008b16:	46a6      	mov	lr, r4
 8008b18:	460a      	mov	r2, r1
 8008b1a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b1e:	fb07 1516 	mls	r5, r7, r6, r1
 8008b22:	3530      	adds	r5, #48	; 0x30
 8008b24:	2a63      	cmp	r2, #99	; 0x63
 8008b26:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b2e:	4631      	mov	r1, r6
 8008b30:	dcf1      	bgt.n	8008b16 <__exponent+0x22>
 8008b32:	3130      	adds	r1, #48	; 0x30
 8008b34:	f1ae 0502 	sub.w	r5, lr, #2
 8008b38:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b3c:	1c44      	adds	r4, r0, #1
 8008b3e:	4629      	mov	r1, r5
 8008b40:	4561      	cmp	r1, ip
 8008b42:	d30a      	bcc.n	8008b5a <__exponent+0x66>
 8008b44:	f10d 0209 	add.w	r2, sp, #9
 8008b48:	eba2 020e 	sub.w	r2, r2, lr
 8008b4c:	4565      	cmp	r5, ip
 8008b4e:	bf88      	it	hi
 8008b50:	2200      	movhi	r2, #0
 8008b52:	4413      	add	r3, r2
 8008b54:	1a18      	subs	r0, r3, r0
 8008b56:	b003      	add	sp, #12
 8008b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b62:	e7ed      	b.n	8008b40 <__exponent+0x4c>
 8008b64:	2330      	movs	r3, #48	; 0x30
 8008b66:	3130      	adds	r1, #48	; 0x30
 8008b68:	7083      	strb	r3, [r0, #2]
 8008b6a:	70c1      	strb	r1, [r0, #3]
 8008b6c:	1d03      	adds	r3, r0, #4
 8008b6e:	e7f1      	b.n	8008b54 <__exponent+0x60>

08008b70 <_printf_float>:
 8008b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	ed2d 8b02 	vpush	{d8}
 8008b78:	b08d      	sub	sp, #52	; 0x34
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b80:	4616      	mov	r6, r2
 8008b82:	461f      	mov	r7, r3
 8008b84:	4605      	mov	r5, r0
 8008b86:	f003 fc11 	bl	800c3ac <_localeconv_r>
 8008b8a:	f8d0 a000 	ldr.w	sl, [r0]
 8008b8e:	4650      	mov	r0, sl
 8008b90:	f7f7 fb28 	bl	80001e4 <strlen>
 8008b94:	2300      	movs	r3, #0
 8008b96:	930a      	str	r3, [sp, #40]	; 0x28
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	9305      	str	r3, [sp, #20]
 8008b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8008ba0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008ba4:	3307      	adds	r3, #7
 8008ba6:	f023 0307 	bic.w	r3, r3, #7
 8008baa:	f103 0208 	add.w	r2, r3, #8
 8008bae:	f8c8 2000 	str.w	r2, [r8]
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008bba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008bbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bc2:	9307      	str	r3, [sp, #28]
 8008bc4:	f8cd 8018 	str.w	r8, [sp, #24]
 8008bc8:	ee08 0a10 	vmov	s16, r0
 8008bcc:	4b9f      	ldr	r3, [pc, #636]	; (8008e4c <_printf_float+0x2dc>)
 8008bce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd6:	f7f7 ffb9 	bl	8000b4c <__aeabi_dcmpun>
 8008bda:	bb88      	cbnz	r0, 8008c40 <_printf_float+0xd0>
 8008bdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008be0:	4b9a      	ldr	r3, [pc, #616]	; (8008e4c <_printf_float+0x2dc>)
 8008be2:	f04f 32ff 	mov.w	r2, #4294967295
 8008be6:	f7f7 ff93 	bl	8000b10 <__aeabi_dcmple>
 8008bea:	bb48      	cbnz	r0, 8008c40 <_printf_float+0xd0>
 8008bec:	2200      	movs	r2, #0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	f7f7 ff82 	bl	8000afc <__aeabi_dcmplt>
 8008bf8:	b110      	cbz	r0, 8008c00 <_printf_float+0x90>
 8008bfa:	232d      	movs	r3, #45	; 0x2d
 8008bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c00:	4b93      	ldr	r3, [pc, #588]	; (8008e50 <_printf_float+0x2e0>)
 8008c02:	4894      	ldr	r0, [pc, #592]	; (8008e54 <_printf_float+0x2e4>)
 8008c04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c08:	bf94      	ite	ls
 8008c0a:	4698      	movls	r8, r3
 8008c0c:	4680      	movhi	r8, r0
 8008c0e:	2303      	movs	r3, #3
 8008c10:	6123      	str	r3, [r4, #16]
 8008c12:	9b05      	ldr	r3, [sp, #20]
 8008c14:	f023 0204 	bic.w	r2, r3, #4
 8008c18:	6022      	str	r2, [r4, #0]
 8008c1a:	f04f 0900 	mov.w	r9, #0
 8008c1e:	9700      	str	r7, [sp, #0]
 8008c20:	4633      	mov	r3, r6
 8008c22:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c24:	4621      	mov	r1, r4
 8008c26:	4628      	mov	r0, r5
 8008c28:	f000 f9d8 	bl	8008fdc <_printf_common>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	f040 8090 	bne.w	8008d52 <_printf_float+0x1e2>
 8008c32:	f04f 30ff 	mov.w	r0, #4294967295
 8008c36:	b00d      	add	sp, #52	; 0x34
 8008c38:	ecbd 8b02 	vpop	{d8}
 8008c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c40:	4642      	mov	r2, r8
 8008c42:	464b      	mov	r3, r9
 8008c44:	4640      	mov	r0, r8
 8008c46:	4649      	mov	r1, r9
 8008c48:	f7f7 ff80 	bl	8000b4c <__aeabi_dcmpun>
 8008c4c:	b140      	cbz	r0, 8008c60 <_printf_float+0xf0>
 8008c4e:	464b      	mov	r3, r9
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	bfbc      	itt	lt
 8008c54:	232d      	movlt	r3, #45	; 0x2d
 8008c56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c5a:	487f      	ldr	r0, [pc, #508]	; (8008e58 <_printf_float+0x2e8>)
 8008c5c:	4b7f      	ldr	r3, [pc, #508]	; (8008e5c <_printf_float+0x2ec>)
 8008c5e:	e7d1      	b.n	8008c04 <_printf_float+0x94>
 8008c60:	6863      	ldr	r3, [r4, #4]
 8008c62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c66:	9206      	str	r2, [sp, #24]
 8008c68:	1c5a      	adds	r2, r3, #1
 8008c6a:	d13f      	bne.n	8008cec <_printf_float+0x17c>
 8008c6c:	2306      	movs	r3, #6
 8008c6e:	6063      	str	r3, [r4, #4]
 8008c70:	9b05      	ldr	r3, [sp, #20]
 8008c72:	6861      	ldr	r1, [r4, #4]
 8008c74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9303      	str	r3, [sp, #12]
 8008c7c:	ab0a      	add	r3, sp, #40	; 0x28
 8008c7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c82:	ab09      	add	r3, sp, #36	; 0x24
 8008c84:	ec49 8b10 	vmov	d0, r8, r9
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	6022      	str	r2, [r4, #0]
 8008c8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c90:	4628      	mov	r0, r5
 8008c92:	f7ff fecd 	bl	8008a30 <__cvt>
 8008c96:	9b06      	ldr	r3, [sp, #24]
 8008c98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c9a:	2b47      	cmp	r3, #71	; 0x47
 8008c9c:	4680      	mov	r8, r0
 8008c9e:	d108      	bne.n	8008cb2 <_printf_float+0x142>
 8008ca0:	1cc8      	adds	r0, r1, #3
 8008ca2:	db02      	blt.n	8008caa <_printf_float+0x13a>
 8008ca4:	6863      	ldr	r3, [r4, #4]
 8008ca6:	4299      	cmp	r1, r3
 8008ca8:	dd41      	ble.n	8008d2e <_printf_float+0x1be>
 8008caa:	f1ab 0b02 	sub.w	fp, fp, #2
 8008cae:	fa5f fb8b 	uxtb.w	fp, fp
 8008cb2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008cb6:	d820      	bhi.n	8008cfa <_printf_float+0x18a>
 8008cb8:	3901      	subs	r1, #1
 8008cba:	465a      	mov	r2, fp
 8008cbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008cc0:	9109      	str	r1, [sp, #36]	; 0x24
 8008cc2:	f7ff ff17 	bl	8008af4 <__exponent>
 8008cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cc8:	1813      	adds	r3, r2, r0
 8008cca:	2a01      	cmp	r2, #1
 8008ccc:	4681      	mov	r9, r0
 8008cce:	6123      	str	r3, [r4, #16]
 8008cd0:	dc02      	bgt.n	8008cd8 <_printf_float+0x168>
 8008cd2:	6822      	ldr	r2, [r4, #0]
 8008cd4:	07d2      	lsls	r2, r2, #31
 8008cd6:	d501      	bpl.n	8008cdc <_printf_float+0x16c>
 8008cd8:	3301      	adds	r3, #1
 8008cda:	6123      	str	r3, [r4, #16]
 8008cdc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d09c      	beq.n	8008c1e <_printf_float+0xae>
 8008ce4:	232d      	movs	r3, #45	; 0x2d
 8008ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cea:	e798      	b.n	8008c1e <_printf_float+0xae>
 8008cec:	9a06      	ldr	r2, [sp, #24]
 8008cee:	2a47      	cmp	r2, #71	; 0x47
 8008cf0:	d1be      	bne.n	8008c70 <_printf_float+0x100>
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1bc      	bne.n	8008c70 <_printf_float+0x100>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e7b9      	b.n	8008c6e <_printf_float+0xfe>
 8008cfa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008cfe:	d118      	bne.n	8008d32 <_printf_float+0x1c2>
 8008d00:	2900      	cmp	r1, #0
 8008d02:	6863      	ldr	r3, [r4, #4]
 8008d04:	dd0b      	ble.n	8008d1e <_printf_float+0x1ae>
 8008d06:	6121      	str	r1, [r4, #16]
 8008d08:	b913      	cbnz	r3, 8008d10 <_printf_float+0x1a0>
 8008d0a:	6822      	ldr	r2, [r4, #0]
 8008d0c:	07d0      	lsls	r0, r2, #31
 8008d0e:	d502      	bpl.n	8008d16 <_printf_float+0x1a6>
 8008d10:	3301      	adds	r3, #1
 8008d12:	440b      	add	r3, r1
 8008d14:	6123      	str	r3, [r4, #16]
 8008d16:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d18:	f04f 0900 	mov.w	r9, #0
 8008d1c:	e7de      	b.n	8008cdc <_printf_float+0x16c>
 8008d1e:	b913      	cbnz	r3, 8008d26 <_printf_float+0x1b6>
 8008d20:	6822      	ldr	r2, [r4, #0]
 8008d22:	07d2      	lsls	r2, r2, #31
 8008d24:	d501      	bpl.n	8008d2a <_printf_float+0x1ba>
 8008d26:	3302      	adds	r3, #2
 8008d28:	e7f4      	b.n	8008d14 <_printf_float+0x1a4>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e7f2      	b.n	8008d14 <_printf_float+0x1a4>
 8008d2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d34:	4299      	cmp	r1, r3
 8008d36:	db05      	blt.n	8008d44 <_printf_float+0x1d4>
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	6121      	str	r1, [r4, #16]
 8008d3c:	07d8      	lsls	r0, r3, #31
 8008d3e:	d5ea      	bpl.n	8008d16 <_printf_float+0x1a6>
 8008d40:	1c4b      	adds	r3, r1, #1
 8008d42:	e7e7      	b.n	8008d14 <_printf_float+0x1a4>
 8008d44:	2900      	cmp	r1, #0
 8008d46:	bfd4      	ite	le
 8008d48:	f1c1 0202 	rsble	r2, r1, #2
 8008d4c:	2201      	movgt	r2, #1
 8008d4e:	4413      	add	r3, r2
 8008d50:	e7e0      	b.n	8008d14 <_printf_float+0x1a4>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	055a      	lsls	r2, r3, #21
 8008d56:	d407      	bmi.n	8008d68 <_printf_float+0x1f8>
 8008d58:	6923      	ldr	r3, [r4, #16]
 8008d5a:	4642      	mov	r2, r8
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b8      	blx	r7
 8008d62:	3001      	adds	r0, #1
 8008d64:	d12c      	bne.n	8008dc0 <_printf_float+0x250>
 8008d66:	e764      	b.n	8008c32 <_printf_float+0xc2>
 8008d68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d6c:	f240 80e0 	bls.w	8008f30 <_printf_float+0x3c0>
 8008d70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d74:	2200      	movs	r2, #0
 8008d76:	2300      	movs	r3, #0
 8008d78:	f7f7 feb6 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d034      	beq.n	8008dea <_printf_float+0x27a>
 8008d80:	4a37      	ldr	r2, [pc, #220]	; (8008e60 <_printf_float+0x2f0>)
 8008d82:	2301      	movs	r3, #1
 8008d84:	4631      	mov	r1, r6
 8008d86:	4628      	mov	r0, r5
 8008d88:	47b8      	blx	r7
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	f43f af51 	beq.w	8008c32 <_printf_float+0xc2>
 8008d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d94:	429a      	cmp	r2, r3
 8008d96:	db02      	blt.n	8008d9e <_printf_float+0x22e>
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	07d8      	lsls	r0, r3, #31
 8008d9c:	d510      	bpl.n	8008dc0 <_printf_float+0x250>
 8008d9e:	ee18 3a10 	vmov	r3, s16
 8008da2:	4652      	mov	r2, sl
 8008da4:	4631      	mov	r1, r6
 8008da6:	4628      	mov	r0, r5
 8008da8:	47b8      	blx	r7
 8008daa:	3001      	adds	r0, #1
 8008dac:	f43f af41 	beq.w	8008c32 <_printf_float+0xc2>
 8008db0:	f04f 0800 	mov.w	r8, #0
 8008db4:	f104 091a 	add.w	r9, r4, #26
 8008db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	4543      	cmp	r3, r8
 8008dbe:	dc09      	bgt.n	8008dd4 <_printf_float+0x264>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	079b      	lsls	r3, r3, #30
 8008dc4:	f100 8105 	bmi.w	8008fd2 <_printf_float+0x462>
 8008dc8:	68e0      	ldr	r0, [r4, #12]
 8008dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dcc:	4298      	cmp	r0, r3
 8008dce:	bfb8      	it	lt
 8008dd0:	4618      	movlt	r0, r3
 8008dd2:	e730      	b.n	8008c36 <_printf_float+0xc6>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	464a      	mov	r2, r9
 8008dd8:	4631      	mov	r1, r6
 8008dda:	4628      	mov	r0, r5
 8008ddc:	47b8      	blx	r7
 8008dde:	3001      	adds	r0, #1
 8008de0:	f43f af27 	beq.w	8008c32 <_printf_float+0xc2>
 8008de4:	f108 0801 	add.w	r8, r8, #1
 8008de8:	e7e6      	b.n	8008db8 <_printf_float+0x248>
 8008dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	dc39      	bgt.n	8008e64 <_printf_float+0x2f4>
 8008df0:	4a1b      	ldr	r2, [pc, #108]	; (8008e60 <_printf_float+0x2f0>)
 8008df2:	2301      	movs	r3, #1
 8008df4:	4631      	mov	r1, r6
 8008df6:	4628      	mov	r0, r5
 8008df8:	47b8      	blx	r7
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	f43f af19 	beq.w	8008c32 <_printf_float+0xc2>
 8008e00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e04:	4313      	orrs	r3, r2
 8008e06:	d102      	bne.n	8008e0e <_printf_float+0x29e>
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	07d9      	lsls	r1, r3, #31
 8008e0c:	d5d8      	bpl.n	8008dc0 <_printf_float+0x250>
 8008e0e:	ee18 3a10 	vmov	r3, s16
 8008e12:	4652      	mov	r2, sl
 8008e14:	4631      	mov	r1, r6
 8008e16:	4628      	mov	r0, r5
 8008e18:	47b8      	blx	r7
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	f43f af09 	beq.w	8008c32 <_printf_float+0xc2>
 8008e20:	f04f 0900 	mov.w	r9, #0
 8008e24:	f104 0a1a 	add.w	sl, r4, #26
 8008e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e2a:	425b      	negs	r3, r3
 8008e2c:	454b      	cmp	r3, r9
 8008e2e:	dc01      	bgt.n	8008e34 <_printf_float+0x2c4>
 8008e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e32:	e792      	b.n	8008d5a <_printf_float+0x1ea>
 8008e34:	2301      	movs	r3, #1
 8008e36:	4652      	mov	r2, sl
 8008e38:	4631      	mov	r1, r6
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	47b8      	blx	r7
 8008e3e:	3001      	adds	r0, #1
 8008e40:	f43f aef7 	beq.w	8008c32 <_printf_float+0xc2>
 8008e44:	f109 0901 	add.w	r9, r9, #1
 8008e48:	e7ee      	b.n	8008e28 <_printf_float+0x2b8>
 8008e4a:	bf00      	nop
 8008e4c:	7fefffff 	.word	0x7fefffff
 8008e50:	0800e0e8 	.word	0x0800e0e8
 8008e54:	0800e0ec 	.word	0x0800e0ec
 8008e58:	0800e0f4 	.word	0x0800e0f4
 8008e5c:	0800e0f0 	.word	0x0800e0f0
 8008e60:	0800ebe9 	.word	0x0800ebe9
 8008e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	bfa8      	it	ge
 8008e6c:	461a      	movge	r2, r3
 8008e6e:	2a00      	cmp	r2, #0
 8008e70:	4691      	mov	r9, r2
 8008e72:	dc37      	bgt.n	8008ee4 <_printf_float+0x374>
 8008e74:	f04f 0b00 	mov.w	fp, #0
 8008e78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e7c:	f104 021a 	add.w	r2, r4, #26
 8008e80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e82:	9305      	str	r3, [sp, #20]
 8008e84:	eba3 0309 	sub.w	r3, r3, r9
 8008e88:	455b      	cmp	r3, fp
 8008e8a:	dc33      	bgt.n	8008ef4 <_printf_float+0x384>
 8008e8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e90:	429a      	cmp	r2, r3
 8008e92:	db3b      	blt.n	8008f0c <_printf_float+0x39c>
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	07da      	lsls	r2, r3, #31
 8008e98:	d438      	bmi.n	8008f0c <_printf_float+0x39c>
 8008e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e9c:	9a05      	ldr	r2, [sp, #20]
 8008e9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ea0:	1a9a      	subs	r2, r3, r2
 8008ea2:	eba3 0901 	sub.w	r9, r3, r1
 8008ea6:	4591      	cmp	r9, r2
 8008ea8:	bfa8      	it	ge
 8008eaa:	4691      	movge	r9, r2
 8008eac:	f1b9 0f00 	cmp.w	r9, #0
 8008eb0:	dc35      	bgt.n	8008f1e <_printf_float+0x3ae>
 8008eb2:	f04f 0800 	mov.w	r8, #0
 8008eb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008eba:	f104 0a1a 	add.w	sl, r4, #26
 8008ebe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ec2:	1a9b      	subs	r3, r3, r2
 8008ec4:	eba3 0309 	sub.w	r3, r3, r9
 8008ec8:	4543      	cmp	r3, r8
 8008eca:	f77f af79 	ble.w	8008dc0 <_printf_float+0x250>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	4652      	mov	r2, sl
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	47b8      	blx	r7
 8008ed8:	3001      	adds	r0, #1
 8008eda:	f43f aeaa 	beq.w	8008c32 <_printf_float+0xc2>
 8008ede:	f108 0801 	add.w	r8, r8, #1
 8008ee2:	e7ec      	b.n	8008ebe <_printf_float+0x34e>
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	4631      	mov	r1, r6
 8008ee8:	4642      	mov	r2, r8
 8008eea:	4628      	mov	r0, r5
 8008eec:	47b8      	blx	r7
 8008eee:	3001      	adds	r0, #1
 8008ef0:	d1c0      	bne.n	8008e74 <_printf_float+0x304>
 8008ef2:	e69e      	b.n	8008c32 <_printf_float+0xc2>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4628      	mov	r0, r5
 8008efa:	9205      	str	r2, [sp, #20]
 8008efc:	47b8      	blx	r7
 8008efe:	3001      	adds	r0, #1
 8008f00:	f43f ae97 	beq.w	8008c32 <_printf_float+0xc2>
 8008f04:	9a05      	ldr	r2, [sp, #20]
 8008f06:	f10b 0b01 	add.w	fp, fp, #1
 8008f0a:	e7b9      	b.n	8008e80 <_printf_float+0x310>
 8008f0c:	ee18 3a10 	vmov	r3, s16
 8008f10:	4652      	mov	r2, sl
 8008f12:	4631      	mov	r1, r6
 8008f14:	4628      	mov	r0, r5
 8008f16:	47b8      	blx	r7
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d1be      	bne.n	8008e9a <_printf_float+0x32a>
 8008f1c:	e689      	b.n	8008c32 <_printf_float+0xc2>
 8008f1e:	9a05      	ldr	r2, [sp, #20]
 8008f20:	464b      	mov	r3, r9
 8008f22:	4442      	add	r2, r8
 8008f24:	4631      	mov	r1, r6
 8008f26:	4628      	mov	r0, r5
 8008f28:	47b8      	blx	r7
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	d1c1      	bne.n	8008eb2 <_printf_float+0x342>
 8008f2e:	e680      	b.n	8008c32 <_printf_float+0xc2>
 8008f30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f32:	2a01      	cmp	r2, #1
 8008f34:	dc01      	bgt.n	8008f3a <_printf_float+0x3ca>
 8008f36:	07db      	lsls	r3, r3, #31
 8008f38:	d538      	bpl.n	8008fac <_printf_float+0x43c>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	4642      	mov	r2, r8
 8008f3e:	4631      	mov	r1, r6
 8008f40:	4628      	mov	r0, r5
 8008f42:	47b8      	blx	r7
 8008f44:	3001      	adds	r0, #1
 8008f46:	f43f ae74 	beq.w	8008c32 <_printf_float+0xc2>
 8008f4a:	ee18 3a10 	vmov	r3, s16
 8008f4e:	4652      	mov	r2, sl
 8008f50:	4631      	mov	r1, r6
 8008f52:	4628      	mov	r0, r5
 8008f54:	47b8      	blx	r7
 8008f56:	3001      	adds	r0, #1
 8008f58:	f43f ae6b 	beq.w	8008c32 <_printf_float+0xc2>
 8008f5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f60:	2200      	movs	r2, #0
 8008f62:	2300      	movs	r3, #0
 8008f64:	f7f7 fdc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f68:	b9d8      	cbnz	r0, 8008fa2 <_printf_float+0x432>
 8008f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f6c:	f108 0201 	add.w	r2, r8, #1
 8008f70:	3b01      	subs	r3, #1
 8008f72:	4631      	mov	r1, r6
 8008f74:	4628      	mov	r0, r5
 8008f76:	47b8      	blx	r7
 8008f78:	3001      	adds	r0, #1
 8008f7a:	d10e      	bne.n	8008f9a <_printf_float+0x42a>
 8008f7c:	e659      	b.n	8008c32 <_printf_float+0xc2>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	4652      	mov	r2, sl
 8008f82:	4631      	mov	r1, r6
 8008f84:	4628      	mov	r0, r5
 8008f86:	47b8      	blx	r7
 8008f88:	3001      	adds	r0, #1
 8008f8a:	f43f ae52 	beq.w	8008c32 <_printf_float+0xc2>
 8008f8e:	f108 0801 	add.w	r8, r8, #1
 8008f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f94:	3b01      	subs	r3, #1
 8008f96:	4543      	cmp	r3, r8
 8008f98:	dcf1      	bgt.n	8008f7e <_printf_float+0x40e>
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008fa0:	e6dc      	b.n	8008d5c <_printf_float+0x1ec>
 8008fa2:	f04f 0800 	mov.w	r8, #0
 8008fa6:	f104 0a1a 	add.w	sl, r4, #26
 8008faa:	e7f2      	b.n	8008f92 <_printf_float+0x422>
 8008fac:	2301      	movs	r3, #1
 8008fae:	4642      	mov	r2, r8
 8008fb0:	e7df      	b.n	8008f72 <_printf_float+0x402>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	464a      	mov	r2, r9
 8008fb6:	4631      	mov	r1, r6
 8008fb8:	4628      	mov	r0, r5
 8008fba:	47b8      	blx	r7
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	f43f ae38 	beq.w	8008c32 <_printf_float+0xc2>
 8008fc2:	f108 0801 	add.w	r8, r8, #1
 8008fc6:	68e3      	ldr	r3, [r4, #12]
 8008fc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fca:	1a5b      	subs	r3, r3, r1
 8008fcc:	4543      	cmp	r3, r8
 8008fce:	dcf0      	bgt.n	8008fb2 <_printf_float+0x442>
 8008fd0:	e6fa      	b.n	8008dc8 <_printf_float+0x258>
 8008fd2:	f04f 0800 	mov.w	r8, #0
 8008fd6:	f104 0919 	add.w	r9, r4, #25
 8008fda:	e7f4      	b.n	8008fc6 <_printf_float+0x456>

08008fdc <_printf_common>:
 8008fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe0:	4616      	mov	r6, r2
 8008fe2:	4699      	mov	r9, r3
 8008fe4:	688a      	ldr	r2, [r1, #8]
 8008fe6:	690b      	ldr	r3, [r1, #16]
 8008fe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fec:	4293      	cmp	r3, r2
 8008fee:	bfb8      	it	lt
 8008ff0:	4613      	movlt	r3, r2
 8008ff2:	6033      	str	r3, [r6, #0]
 8008ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	b10a      	cbz	r2, 8009002 <_printf_common+0x26>
 8008ffe:	3301      	adds	r3, #1
 8009000:	6033      	str	r3, [r6, #0]
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	0699      	lsls	r1, r3, #26
 8009006:	bf42      	ittt	mi
 8009008:	6833      	ldrmi	r3, [r6, #0]
 800900a:	3302      	addmi	r3, #2
 800900c:	6033      	strmi	r3, [r6, #0]
 800900e:	6825      	ldr	r5, [r4, #0]
 8009010:	f015 0506 	ands.w	r5, r5, #6
 8009014:	d106      	bne.n	8009024 <_printf_common+0x48>
 8009016:	f104 0a19 	add.w	sl, r4, #25
 800901a:	68e3      	ldr	r3, [r4, #12]
 800901c:	6832      	ldr	r2, [r6, #0]
 800901e:	1a9b      	subs	r3, r3, r2
 8009020:	42ab      	cmp	r3, r5
 8009022:	dc26      	bgt.n	8009072 <_printf_common+0x96>
 8009024:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009028:	1e13      	subs	r3, r2, #0
 800902a:	6822      	ldr	r2, [r4, #0]
 800902c:	bf18      	it	ne
 800902e:	2301      	movne	r3, #1
 8009030:	0692      	lsls	r2, r2, #26
 8009032:	d42b      	bmi.n	800908c <_printf_common+0xb0>
 8009034:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009038:	4649      	mov	r1, r9
 800903a:	4638      	mov	r0, r7
 800903c:	47c0      	blx	r8
 800903e:	3001      	adds	r0, #1
 8009040:	d01e      	beq.n	8009080 <_printf_common+0xa4>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	68e5      	ldr	r5, [r4, #12]
 8009046:	6832      	ldr	r2, [r6, #0]
 8009048:	f003 0306 	and.w	r3, r3, #6
 800904c:	2b04      	cmp	r3, #4
 800904e:	bf08      	it	eq
 8009050:	1aad      	subeq	r5, r5, r2
 8009052:	68a3      	ldr	r3, [r4, #8]
 8009054:	6922      	ldr	r2, [r4, #16]
 8009056:	bf0c      	ite	eq
 8009058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800905c:	2500      	movne	r5, #0
 800905e:	4293      	cmp	r3, r2
 8009060:	bfc4      	itt	gt
 8009062:	1a9b      	subgt	r3, r3, r2
 8009064:	18ed      	addgt	r5, r5, r3
 8009066:	2600      	movs	r6, #0
 8009068:	341a      	adds	r4, #26
 800906a:	42b5      	cmp	r5, r6
 800906c:	d11a      	bne.n	80090a4 <_printf_common+0xc8>
 800906e:	2000      	movs	r0, #0
 8009070:	e008      	b.n	8009084 <_printf_common+0xa8>
 8009072:	2301      	movs	r3, #1
 8009074:	4652      	mov	r2, sl
 8009076:	4649      	mov	r1, r9
 8009078:	4638      	mov	r0, r7
 800907a:	47c0      	blx	r8
 800907c:	3001      	adds	r0, #1
 800907e:	d103      	bne.n	8009088 <_printf_common+0xac>
 8009080:	f04f 30ff 	mov.w	r0, #4294967295
 8009084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009088:	3501      	adds	r5, #1
 800908a:	e7c6      	b.n	800901a <_printf_common+0x3e>
 800908c:	18e1      	adds	r1, r4, r3
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	2030      	movs	r0, #48	; 0x30
 8009092:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009096:	4422      	add	r2, r4
 8009098:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800909c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090a0:	3302      	adds	r3, #2
 80090a2:	e7c7      	b.n	8009034 <_printf_common+0x58>
 80090a4:	2301      	movs	r3, #1
 80090a6:	4622      	mov	r2, r4
 80090a8:	4649      	mov	r1, r9
 80090aa:	4638      	mov	r0, r7
 80090ac:	47c0      	blx	r8
 80090ae:	3001      	adds	r0, #1
 80090b0:	d0e6      	beq.n	8009080 <_printf_common+0xa4>
 80090b2:	3601      	adds	r6, #1
 80090b4:	e7d9      	b.n	800906a <_printf_common+0x8e>
	...

080090b8 <_printf_i>:
 80090b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090bc:	7e0f      	ldrb	r7, [r1, #24]
 80090be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090c0:	2f78      	cmp	r7, #120	; 0x78
 80090c2:	4691      	mov	r9, r2
 80090c4:	4680      	mov	r8, r0
 80090c6:	460c      	mov	r4, r1
 80090c8:	469a      	mov	sl, r3
 80090ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090ce:	d807      	bhi.n	80090e0 <_printf_i+0x28>
 80090d0:	2f62      	cmp	r7, #98	; 0x62
 80090d2:	d80a      	bhi.n	80090ea <_printf_i+0x32>
 80090d4:	2f00      	cmp	r7, #0
 80090d6:	f000 80d8 	beq.w	800928a <_printf_i+0x1d2>
 80090da:	2f58      	cmp	r7, #88	; 0x58
 80090dc:	f000 80a3 	beq.w	8009226 <_printf_i+0x16e>
 80090e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090e8:	e03a      	b.n	8009160 <_printf_i+0xa8>
 80090ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090ee:	2b15      	cmp	r3, #21
 80090f0:	d8f6      	bhi.n	80090e0 <_printf_i+0x28>
 80090f2:	a101      	add	r1, pc, #4	; (adr r1, 80090f8 <_printf_i+0x40>)
 80090f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090f8:	08009151 	.word	0x08009151
 80090fc:	08009165 	.word	0x08009165
 8009100:	080090e1 	.word	0x080090e1
 8009104:	080090e1 	.word	0x080090e1
 8009108:	080090e1 	.word	0x080090e1
 800910c:	080090e1 	.word	0x080090e1
 8009110:	08009165 	.word	0x08009165
 8009114:	080090e1 	.word	0x080090e1
 8009118:	080090e1 	.word	0x080090e1
 800911c:	080090e1 	.word	0x080090e1
 8009120:	080090e1 	.word	0x080090e1
 8009124:	08009271 	.word	0x08009271
 8009128:	08009195 	.word	0x08009195
 800912c:	08009253 	.word	0x08009253
 8009130:	080090e1 	.word	0x080090e1
 8009134:	080090e1 	.word	0x080090e1
 8009138:	08009293 	.word	0x08009293
 800913c:	080090e1 	.word	0x080090e1
 8009140:	08009195 	.word	0x08009195
 8009144:	080090e1 	.word	0x080090e1
 8009148:	080090e1 	.word	0x080090e1
 800914c:	0800925b 	.word	0x0800925b
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	1d1a      	adds	r2, r3, #4
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	602a      	str	r2, [r5, #0]
 8009158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800915c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009160:	2301      	movs	r3, #1
 8009162:	e0a3      	b.n	80092ac <_printf_i+0x1f4>
 8009164:	6820      	ldr	r0, [r4, #0]
 8009166:	6829      	ldr	r1, [r5, #0]
 8009168:	0606      	lsls	r6, r0, #24
 800916a:	f101 0304 	add.w	r3, r1, #4
 800916e:	d50a      	bpl.n	8009186 <_printf_i+0xce>
 8009170:	680e      	ldr	r6, [r1, #0]
 8009172:	602b      	str	r3, [r5, #0]
 8009174:	2e00      	cmp	r6, #0
 8009176:	da03      	bge.n	8009180 <_printf_i+0xc8>
 8009178:	232d      	movs	r3, #45	; 0x2d
 800917a:	4276      	negs	r6, r6
 800917c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009180:	485e      	ldr	r0, [pc, #376]	; (80092fc <_printf_i+0x244>)
 8009182:	230a      	movs	r3, #10
 8009184:	e019      	b.n	80091ba <_printf_i+0x102>
 8009186:	680e      	ldr	r6, [r1, #0]
 8009188:	602b      	str	r3, [r5, #0]
 800918a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800918e:	bf18      	it	ne
 8009190:	b236      	sxthne	r6, r6
 8009192:	e7ef      	b.n	8009174 <_printf_i+0xbc>
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	6820      	ldr	r0, [r4, #0]
 8009198:	1d19      	adds	r1, r3, #4
 800919a:	6029      	str	r1, [r5, #0]
 800919c:	0601      	lsls	r1, r0, #24
 800919e:	d501      	bpl.n	80091a4 <_printf_i+0xec>
 80091a0:	681e      	ldr	r6, [r3, #0]
 80091a2:	e002      	b.n	80091aa <_printf_i+0xf2>
 80091a4:	0646      	lsls	r6, r0, #25
 80091a6:	d5fb      	bpl.n	80091a0 <_printf_i+0xe8>
 80091a8:	881e      	ldrh	r6, [r3, #0]
 80091aa:	4854      	ldr	r0, [pc, #336]	; (80092fc <_printf_i+0x244>)
 80091ac:	2f6f      	cmp	r7, #111	; 0x6f
 80091ae:	bf0c      	ite	eq
 80091b0:	2308      	moveq	r3, #8
 80091b2:	230a      	movne	r3, #10
 80091b4:	2100      	movs	r1, #0
 80091b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091ba:	6865      	ldr	r5, [r4, #4]
 80091bc:	60a5      	str	r5, [r4, #8]
 80091be:	2d00      	cmp	r5, #0
 80091c0:	bfa2      	ittt	ge
 80091c2:	6821      	ldrge	r1, [r4, #0]
 80091c4:	f021 0104 	bicge.w	r1, r1, #4
 80091c8:	6021      	strge	r1, [r4, #0]
 80091ca:	b90e      	cbnz	r6, 80091d0 <_printf_i+0x118>
 80091cc:	2d00      	cmp	r5, #0
 80091ce:	d04d      	beq.n	800926c <_printf_i+0x1b4>
 80091d0:	4615      	mov	r5, r2
 80091d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80091d6:	fb03 6711 	mls	r7, r3, r1, r6
 80091da:	5dc7      	ldrb	r7, [r0, r7]
 80091dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091e0:	4637      	mov	r7, r6
 80091e2:	42bb      	cmp	r3, r7
 80091e4:	460e      	mov	r6, r1
 80091e6:	d9f4      	bls.n	80091d2 <_printf_i+0x11a>
 80091e8:	2b08      	cmp	r3, #8
 80091ea:	d10b      	bne.n	8009204 <_printf_i+0x14c>
 80091ec:	6823      	ldr	r3, [r4, #0]
 80091ee:	07de      	lsls	r6, r3, #31
 80091f0:	d508      	bpl.n	8009204 <_printf_i+0x14c>
 80091f2:	6923      	ldr	r3, [r4, #16]
 80091f4:	6861      	ldr	r1, [r4, #4]
 80091f6:	4299      	cmp	r1, r3
 80091f8:	bfde      	ittt	le
 80091fa:	2330      	movle	r3, #48	; 0x30
 80091fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009200:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009204:	1b52      	subs	r2, r2, r5
 8009206:	6122      	str	r2, [r4, #16]
 8009208:	f8cd a000 	str.w	sl, [sp]
 800920c:	464b      	mov	r3, r9
 800920e:	aa03      	add	r2, sp, #12
 8009210:	4621      	mov	r1, r4
 8009212:	4640      	mov	r0, r8
 8009214:	f7ff fee2 	bl	8008fdc <_printf_common>
 8009218:	3001      	adds	r0, #1
 800921a:	d14c      	bne.n	80092b6 <_printf_i+0x1fe>
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	b004      	add	sp, #16
 8009222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009226:	4835      	ldr	r0, [pc, #212]	; (80092fc <_printf_i+0x244>)
 8009228:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800922c:	6829      	ldr	r1, [r5, #0]
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	f851 6b04 	ldr.w	r6, [r1], #4
 8009234:	6029      	str	r1, [r5, #0]
 8009236:	061d      	lsls	r5, r3, #24
 8009238:	d514      	bpl.n	8009264 <_printf_i+0x1ac>
 800923a:	07df      	lsls	r7, r3, #31
 800923c:	bf44      	itt	mi
 800923e:	f043 0320 	orrmi.w	r3, r3, #32
 8009242:	6023      	strmi	r3, [r4, #0]
 8009244:	b91e      	cbnz	r6, 800924e <_printf_i+0x196>
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	f023 0320 	bic.w	r3, r3, #32
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	2310      	movs	r3, #16
 8009250:	e7b0      	b.n	80091b4 <_printf_i+0xfc>
 8009252:	6823      	ldr	r3, [r4, #0]
 8009254:	f043 0320 	orr.w	r3, r3, #32
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	2378      	movs	r3, #120	; 0x78
 800925c:	4828      	ldr	r0, [pc, #160]	; (8009300 <_printf_i+0x248>)
 800925e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009262:	e7e3      	b.n	800922c <_printf_i+0x174>
 8009264:	0659      	lsls	r1, r3, #25
 8009266:	bf48      	it	mi
 8009268:	b2b6      	uxthmi	r6, r6
 800926a:	e7e6      	b.n	800923a <_printf_i+0x182>
 800926c:	4615      	mov	r5, r2
 800926e:	e7bb      	b.n	80091e8 <_printf_i+0x130>
 8009270:	682b      	ldr	r3, [r5, #0]
 8009272:	6826      	ldr	r6, [r4, #0]
 8009274:	6961      	ldr	r1, [r4, #20]
 8009276:	1d18      	adds	r0, r3, #4
 8009278:	6028      	str	r0, [r5, #0]
 800927a:	0635      	lsls	r5, r6, #24
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	d501      	bpl.n	8009284 <_printf_i+0x1cc>
 8009280:	6019      	str	r1, [r3, #0]
 8009282:	e002      	b.n	800928a <_printf_i+0x1d2>
 8009284:	0670      	lsls	r0, r6, #25
 8009286:	d5fb      	bpl.n	8009280 <_printf_i+0x1c8>
 8009288:	8019      	strh	r1, [r3, #0]
 800928a:	2300      	movs	r3, #0
 800928c:	6123      	str	r3, [r4, #16]
 800928e:	4615      	mov	r5, r2
 8009290:	e7ba      	b.n	8009208 <_printf_i+0x150>
 8009292:	682b      	ldr	r3, [r5, #0]
 8009294:	1d1a      	adds	r2, r3, #4
 8009296:	602a      	str	r2, [r5, #0]
 8009298:	681d      	ldr	r5, [r3, #0]
 800929a:	6862      	ldr	r2, [r4, #4]
 800929c:	2100      	movs	r1, #0
 800929e:	4628      	mov	r0, r5
 80092a0:	f7f6 ffae 	bl	8000200 <memchr>
 80092a4:	b108      	cbz	r0, 80092aa <_printf_i+0x1f2>
 80092a6:	1b40      	subs	r0, r0, r5
 80092a8:	6060      	str	r0, [r4, #4]
 80092aa:	6863      	ldr	r3, [r4, #4]
 80092ac:	6123      	str	r3, [r4, #16]
 80092ae:	2300      	movs	r3, #0
 80092b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b4:	e7a8      	b.n	8009208 <_printf_i+0x150>
 80092b6:	6923      	ldr	r3, [r4, #16]
 80092b8:	462a      	mov	r2, r5
 80092ba:	4649      	mov	r1, r9
 80092bc:	4640      	mov	r0, r8
 80092be:	47d0      	blx	sl
 80092c0:	3001      	adds	r0, #1
 80092c2:	d0ab      	beq.n	800921c <_printf_i+0x164>
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	079b      	lsls	r3, r3, #30
 80092c8:	d413      	bmi.n	80092f2 <_printf_i+0x23a>
 80092ca:	68e0      	ldr	r0, [r4, #12]
 80092cc:	9b03      	ldr	r3, [sp, #12]
 80092ce:	4298      	cmp	r0, r3
 80092d0:	bfb8      	it	lt
 80092d2:	4618      	movlt	r0, r3
 80092d4:	e7a4      	b.n	8009220 <_printf_i+0x168>
 80092d6:	2301      	movs	r3, #1
 80092d8:	4632      	mov	r2, r6
 80092da:	4649      	mov	r1, r9
 80092dc:	4640      	mov	r0, r8
 80092de:	47d0      	blx	sl
 80092e0:	3001      	adds	r0, #1
 80092e2:	d09b      	beq.n	800921c <_printf_i+0x164>
 80092e4:	3501      	adds	r5, #1
 80092e6:	68e3      	ldr	r3, [r4, #12]
 80092e8:	9903      	ldr	r1, [sp, #12]
 80092ea:	1a5b      	subs	r3, r3, r1
 80092ec:	42ab      	cmp	r3, r5
 80092ee:	dcf2      	bgt.n	80092d6 <_printf_i+0x21e>
 80092f0:	e7eb      	b.n	80092ca <_printf_i+0x212>
 80092f2:	2500      	movs	r5, #0
 80092f4:	f104 0619 	add.w	r6, r4, #25
 80092f8:	e7f5      	b.n	80092e6 <_printf_i+0x22e>
 80092fa:	bf00      	nop
 80092fc:	0800e0f8 	.word	0x0800e0f8
 8009300:	0800e109 	.word	0x0800e109

08009304 <_scanf_float>:
 8009304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009308:	b087      	sub	sp, #28
 800930a:	4617      	mov	r7, r2
 800930c:	9303      	str	r3, [sp, #12]
 800930e:	688b      	ldr	r3, [r1, #8]
 8009310:	1e5a      	subs	r2, r3, #1
 8009312:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009316:	bf83      	ittte	hi
 8009318:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800931c:	195b      	addhi	r3, r3, r5
 800931e:	9302      	strhi	r3, [sp, #8]
 8009320:	2300      	movls	r3, #0
 8009322:	bf86      	itte	hi
 8009324:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009328:	608b      	strhi	r3, [r1, #8]
 800932a:	9302      	strls	r3, [sp, #8]
 800932c:	680b      	ldr	r3, [r1, #0]
 800932e:	468b      	mov	fp, r1
 8009330:	2500      	movs	r5, #0
 8009332:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009336:	f84b 3b1c 	str.w	r3, [fp], #28
 800933a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800933e:	4680      	mov	r8, r0
 8009340:	460c      	mov	r4, r1
 8009342:	465e      	mov	r6, fp
 8009344:	46aa      	mov	sl, r5
 8009346:	46a9      	mov	r9, r5
 8009348:	9501      	str	r5, [sp, #4]
 800934a:	68a2      	ldr	r2, [r4, #8]
 800934c:	b152      	cbz	r2, 8009364 <_scanf_float+0x60>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	2b4e      	cmp	r3, #78	; 0x4e
 8009354:	d864      	bhi.n	8009420 <_scanf_float+0x11c>
 8009356:	2b40      	cmp	r3, #64	; 0x40
 8009358:	d83c      	bhi.n	80093d4 <_scanf_float+0xd0>
 800935a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800935e:	b2c8      	uxtb	r0, r1
 8009360:	280e      	cmp	r0, #14
 8009362:	d93a      	bls.n	80093da <_scanf_float+0xd6>
 8009364:	f1b9 0f00 	cmp.w	r9, #0
 8009368:	d003      	beq.n	8009372 <_scanf_float+0x6e>
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009370:	6023      	str	r3, [r4, #0]
 8009372:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009376:	f1ba 0f01 	cmp.w	sl, #1
 800937a:	f200 8113 	bhi.w	80095a4 <_scanf_float+0x2a0>
 800937e:	455e      	cmp	r6, fp
 8009380:	f200 8105 	bhi.w	800958e <_scanf_float+0x28a>
 8009384:	2501      	movs	r5, #1
 8009386:	4628      	mov	r0, r5
 8009388:	b007      	add	sp, #28
 800938a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009392:	2a0d      	cmp	r2, #13
 8009394:	d8e6      	bhi.n	8009364 <_scanf_float+0x60>
 8009396:	a101      	add	r1, pc, #4	; (adr r1, 800939c <_scanf_float+0x98>)
 8009398:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800939c:	080094db 	.word	0x080094db
 80093a0:	08009365 	.word	0x08009365
 80093a4:	08009365 	.word	0x08009365
 80093a8:	08009365 	.word	0x08009365
 80093ac:	0800953b 	.word	0x0800953b
 80093b0:	08009513 	.word	0x08009513
 80093b4:	08009365 	.word	0x08009365
 80093b8:	08009365 	.word	0x08009365
 80093bc:	080094e9 	.word	0x080094e9
 80093c0:	08009365 	.word	0x08009365
 80093c4:	08009365 	.word	0x08009365
 80093c8:	08009365 	.word	0x08009365
 80093cc:	08009365 	.word	0x08009365
 80093d0:	080094a1 	.word	0x080094a1
 80093d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80093d8:	e7db      	b.n	8009392 <_scanf_float+0x8e>
 80093da:	290e      	cmp	r1, #14
 80093dc:	d8c2      	bhi.n	8009364 <_scanf_float+0x60>
 80093de:	a001      	add	r0, pc, #4	; (adr r0, 80093e4 <_scanf_float+0xe0>)
 80093e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80093e4:	08009493 	.word	0x08009493
 80093e8:	08009365 	.word	0x08009365
 80093ec:	08009493 	.word	0x08009493
 80093f0:	08009527 	.word	0x08009527
 80093f4:	08009365 	.word	0x08009365
 80093f8:	08009441 	.word	0x08009441
 80093fc:	0800947d 	.word	0x0800947d
 8009400:	0800947d 	.word	0x0800947d
 8009404:	0800947d 	.word	0x0800947d
 8009408:	0800947d 	.word	0x0800947d
 800940c:	0800947d 	.word	0x0800947d
 8009410:	0800947d 	.word	0x0800947d
 8009414:	0800947d 	.word	0x0800947d
 8009418:	0800947d 	.word	0x0800947d
 800941c:	0800947d 	.word	0x0800947d
 8009420:	2b6e      	cmp	r3, #110	; 0x6e
 8009422:	d809      	bhi.n	8009438 <_scanf_float+0x134>
 8009424:	2b60      	cmp	r3, #96	; 0x60
 8009426:	d8b2      	bhi.n	800938e <_scanf_float+0x8a>
 8009428:	2b54      	cmp	r3, #84	; 0x54
 800942a:	d077      	beq.n	800951c <_scanf_float+0x218>
 800942c:	2b59      	cmp	r3, #89	; 0x59
 800942e:	d199      	bne.n	8009364 <_scanf_float+0x60>
 8009430:	2d07      	cmp	r5, #7
 8009432:	d197      	bne.n	8009364 <_scanf_float+0x60>
 8009434:	2508      	movs	r5, #8
 8009436:	e029      	b.n	800948c <_scanf_float+0x188>
 8009438:	2b74      	cmp	r3, #116	; 0x74
 800943a:	d06f      	beq.n	800951c <_scanf_float+0x218>
 800943c:	2b79      	cmp	r3, #121	; 0x79
 800943e:	e7f6      	b.n	800942e <_scanf_float+0x12a>
 8009440:	6821      	ldr	r1, [r4, #0]
 8009442:	05c8      	lsls	r0, r1, #23
 8009444:	d51a      	bpl.n	800947c <_scanf_float+0x178>
 8009446:	9b02      	ldr	r3, [sp, #8]
 8009448:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800944c:	6021      	str	r1, [r4, #0]
 800944e:	f109 0901 	add.w	r9, r9, #1
 8009452:	b11b      	cbz	r3, 800945c <_scanf_float+0x158>
 8009454:	3b01      	subs	r3, #1
 8009456:	3201      	adds	r2, #1
 8009458:	9302      	str	r3, [sp, #8]
 800945a:	60a2      	str	r2, [r4, #8]
 800945c:	68a3      	ldr	r3, [r4, #8]
 800945e:	3b01      	subs	r3, #1
 8009460:	60a3      	str	r3, [r4, #8]
 8009462:	6923      	ldr	r3, [r4, #16]
 8009464:	3301      	adds	r3, #1
 8009466:	6123      	str	r3, [r4, #16]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	3b01      	subs	r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	607b      	str	r3, [r7, #4]
 8009470:	f340 8084 	ble.w	800957c <_scanf_float+0x278>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	3301      	adds	r3, #1
 8009478:	603b      	str	r3, [r7, #0]
 800947a:	e766      	b.n	800934a <_scanf_float+0x46>
 800947c:	eb1a 0f05 	cmn.w	sl, r5
 8009480:	f47f af70 	bne.w	8009364 <_scanf_float+0x60>
 8009484:	6822      	ldr	r2, [r4, #0]
 8009486:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800948a:	6022      	str	r2, [r4, #0]
 800948c:	f806 3b01 	strb.w	r3, [r6], #1
 8009490:	e7e4      	b.n	800945c <_scanf_float+0x158>
 8009492:	6822      	ldr	r2, [r4, #0]
 8009494:	0610      	lsls	r0, r2, #24
 8009496:	f57f af65 	bpl.w	8009364 <_scanf_float+0x60>
 800949a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800949e:	e7f4      	b.n	800948a <_scanf_float+0x186>
 80094a0:	f1ba 0f00 	cmp.w	sl, #0
 80094a4:	d10e      	bne.n	80094c4 <_scanf_float+0x1c0>
 80094a6:	f1b9 0f00 	cmp.w	r9, #0
 80094aa:	d10e      	bne.n	80094ca <_scanf_float+0x1c6>
 80094ac:	6822      	ldr	r2, [r4, #0]
 80094ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80094b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80094b6:	d108      	bne.n	80094ca <_scanf_float+0x1c6>
 80094b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80094bc:	6022      	str	r2, [r4, #0]
 80094be:	f04f 0a01 	mov.w	sl, #1
 80094c2:	e7e3      	b.n	800948c <_scanf_float+0x188>
 80094c4:	f1ba 0f02 	cmp.w	sl, #2
 80094c8:	d055      	beq.n	8009576 <_scanf_float+0x272>
 80094ca:	2d01      	cmp	r5, #1
 80094cc:	d002      	beq.n	80094d4 <_scanf_float+0x1d0>
 80094ce:	2d04      	cmp	r5, #4
 80094d0:	f47f af48 	bne.w	8009364 <_scanf_float+0x60>
 80094d4:	3501      	adds	r5, #1
 80094d6:	b2ed      	uxtb	r5, r5
 80094d8:	e7d8      	b.n	800948c <_scanf_float+0x188>
 80094da:	f1ba 0f01 	cmp.w	sl, #1
 80094de:	f47f af41 	bne.w	8009364 <_scanf_float+0x60>
 80094e2:	f04f 0a02 	mov.w	sl, #2
 80094e6:	e7d1      	b.n	800948c <_scanf_float+0x188>
 80094e8:	b97d      	cbnz	r5, 800950a <_scanf_float+0x206>
 80094ea:	f1b9 0f00 	cmp.w	r9, #0
 80094ee:	f47f af3c 	bne.w	800936a <_scanf_float+0x66>
 80094f2:	6822      	ldr	r2, [r4, #0]
 80094f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80094f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80094fc:	f47f af39 	bne.w	8009372 <_scanf_float+0x6e>
 8009500:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009504:	6022      	str	r2, [r4, #0]
 8009506:	2501      	movs	r5, #1
 8009508:	e7c0      	b.n	800948c <_scanf_float+0x188>
 800950a:	2d03      	cmp	r5, #3
 800950c:	d0e2      	beq.n	80094d4 <_scanf_float+0x1d0>
 800950e:	2d05      	cmp	r5, #5
 8009510:	e7de      	b.n	80094d0 <_scanf_float+0x1cc>
 8009512:	2d02      	cmp	r5, #2
 8009514:	f47f af26 	bne.w	8009364 <_scanf_float+0x60>
 8009518:	2503      	movs	r5, #3
 800951a:	e7b7      	b.n	800948c <_scanf_float+0x188>
 800951c:	2d06      	cmp	r5, #6
 800951e:	f47f af21 	bne.w	8009364 <_scanf_float+0x60>
 8009522:	2507      	movs	r5, #7
 8009524:	e7b2      	b.n	800948c <_scanf_float+0x188>
 8009526:	6822      	ldr	r2, [r4, #0]
 8009528:	0591      	lsls	r1, r2, #22
 800952a:	f57f af1b 	bpl.w	8009364 <_scanf_float+0x60>
 800952e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009532:	6022      	str	r2, [r4, #0]
 8009534:	f8cd 9004 	str.w	r9, [sp, #4]
 8009538:	e7a8      	b.n	800948c <_scanf_float+0x188>
 800953a:	6822      	ldr	r2, [r4, #0]
 800953c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009540:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009544:	d006      	beq.n	8009554 <_scanf_float+0x250>
 8009546:	0550      	lsls	r0, r2, #21
 8009548:	f57f af0c 	bpl.w	8009364 <_scanf_float+0x60>
 800954c:	f1b9 0f00 	cmp.w	r9, #0
 8009550:	f43f af0f 	beq.w	8009372 <_scanf_float+0x6e>
 8009554:	0591      	lsls	r1, r2, #22
 8009556:	bf58      	it	pl
 8009558:	9901      	ldrpl	r1, [sp, #4]
 800955a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800955e:	bf58      	it	pl
 8009560:	eba9 0101 	subpl.w	r1, r9, r1
 8009564:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009568:	bf58      	it	pl
 800956a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800956e:	6022      	str	r2, [r4, #0]
 8009570:	f04f 0900 	mov.w	r9, #0
 8009574:	e78a      	b.n	800948c <_scanf_float+0x188>
 8009576:	f04f 0a03 	mov.w	sl, #3
 800957a:	e787      	b.n	800948c <_scanf_float+0x188>
 800957c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009580:	4639      	mov	r1, r7
 8009582:	4640      	mov	r0, r8
 8009584:	4798      	blx	r3
 8009586:	2800      	cmp	r0, #0
 8009588:	f43f aedf 	beq.w	800934a <_scanf_float+0x46>
 800958c:	e6ea      	b.n	8009364 <_scanf_float+0x60>
 800958e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009592:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009596:	463a      	mov	r2, r7
 8009598:	4640      	mov	r0, r8
 800959a:	4798      	blx	r3
 800959c:	6923      	ldr	r3, [r4, #16]
 800959e:	3b01      	subs	r3, #1
 80095a0:	6123      	str	r3, [r4, #16]
 80095a2:	e6ec      	b.n	800937e <_scanf_float+0x7a>
 80095a4:	1e6b      	subs	r3, r5, #1
 80095a6:	2b06      	cmp	r3, #6
 80095a8:	d825      	bhi.n	80095f6 <_scanf_float+0x2f2>
 80095aa:	2d02      	cmp	r5, #2
 80095ac:	d836      	bhi.n	800961c <_scanf_float+0x318>
 80095ae:	455e      	cmp	r6, fp
 80095b0:	f67f aee8 	bls.w	8009384 <_scanf_float+0x80>
 80095b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095bc:	463a      	mov	r2, r7
 80095be:	4640      	mov	r0, r8
 80095c0:	4798      	blx	r3
 80095c2:	6923      	ldr	r3, [r4, #16]
 80095c4:	3b01      	subs	r3, #1
 80095c6:	6123      	str	r3, [r4, #16]
 80095c8:	e7f1      	b.n	80095ae <_scanf_float+0x2aa>
 80095ca:	9802      	ldr	r0, [sp, #8]
 80095cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80095d4:	9002      	str	r0, [sp, #8]
 80095d6:	463a      	mov	r2, r7
 80095d8:	4640      	mov	r0, r8
 80095da:	4798      	blx	r3
 80095dc:	6923      	ldr	r3, [r4, #16]
 80095de:	3b01      	subs	r3, #1
 80095e0:	6123      	str	r3, [r4, #16]
 80095e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095e6:	fa5f fa8a 	uxtb.w	sl, sl
 80095ea:	f1ba 0f02 	cmp.w	sl, #2
 80095ee:	d1ec      	bne.n	80095ca <_scanf_float+0x2c6>
 80095f0:	3d03      	subs	r5, #3
 80095f2:	b2ed      	uxtb	r5, r5
 80095f4:	1b76      	subs	r6, r6, r5
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	05da      	lsls	r2, r3, #23
 80095fa:	d52f      	bpl.n	800965c <_scanf_float+0x358>
 80095fc:	055b      	lsls	r3, r3, #21
 80095fe:	d510      	bpl.n	8009622 <_scanf_float+0x31e>
 8009600:	455e      	cmp	r6, fp
 8009602:	f67f aebf 	bls.w	8009384 <_scanf_float+0x80>
 8009606:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800960a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800960e:	463a      	mov	r2, r7
 8009610:	4640      	mov	r0, r8
 8009612:	4798      	blx	r3
 8009614:	6923      	ldr	r3, [r4, #16]
 8009616:	3b01      	subs	r3, #1
 8009618:	6123      	str	r3, [r4, #16]
 800961a:	e7f1      	b.n	8009600 <_scanf_float+0x2fc>
 800961c:	46aa      	mov	sl, r5
 800961e:	9602      	str	r6, [sp, #8]
 8009620:	e7df      	b.n	80095e2 <_scanf_float+0x2de>
 8009622:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009626:	6923      	ldr	r3, [r4, #16]
 8009628:	2965      	cmp	r1, #101	; 0x65
 800962a:	f103 33ff 	add.w	r3, r3, #4294967295
 800962e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	d00c      	beq.n	8009650 <_scanf_float+0x34c>
 8009636:	2945      	cmp	r1, #69	; 0x45
 8009638:	d00a      	beq.n	8009650 <_scanf_float+0x34c>
 800963a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800963e:	463a      	mov	r2, r7
 8009640:	4640      	mov	r0, r8
 8009642:	4798      	blx	r3
 8009644:	6923      	ldr	r3, [r4, #16]
 8009646:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800964a:	3b01      	subs	r3, #1
 800964c:	1eb5      	subs	r5, r6, #2
 800964e:	6123      	str	r3, [r4, #16]
 8009650:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009654:	463a      	mov	r2, r7
 8009656:	4640      	mov	r0, r8
 8009658:	4798      	blx	r3
 800965a:	462e      	mov	r6, r5
 800965c:	6825      	ldr	r5, [r4, #0]
 800965e:	f015 0510 	ands.w	r5, r5, #16
 8009662:	d159      	bne.n	8009718 <_scanf_float+0x414>
 8009664:	7035      	strb	r5, [r6, #0]
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800966c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009670:	d11b      	bne.n	80096aa <_scanf_float+0x3a6>
 8009672:	9b01      	ldr	r3, [sp, #4]
 8009674:	454b      	cmp	r3, r9
 8009676:	eba3 0209 	sub.w	r2, r3, r9
 800967a:	d123      	bne.n	80096c4 <_scanf_float+0x3c0>
 800967c:	2200      	movs	r2, #0
 800967e:	4659      	mov	r1, fp
 8009680:	4640      	mov	r0, r8
 8009682:	f001 f9e7 	bl	800aa54 <_strtod_r>
 8009686:	6822      	ldr	r2, [r4, #0]
 8009688:	9b03      	ldr	r3, [sp, #12]
 800968a:	f012 0f02 	tst.w	r2, #2
 800968e:	ec57 6b10 	vmov	r6, r7, d0
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	d021      	beq.n	80096da <_scanf_float+0x3d6>
 8009696:	9903      	ldr	r1, [sp, #12]
 8009698:	1d1a      	adds	r2, r3, #4
 800969a:	600a      	str	r2, [r1, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	e9c3 6700 	strd	r6, r7, [r3]
 80096a2:	68e3      	ldr	r3, [r4, #12]
 80096a4:	3301      	adds	r3, #1
 80096a6:	60e3      	str	r3, [r4, #12]
 80096a8:	e66d      	b.n	8009386 <_scanf_float+0x82>
 80096aa:	9b04      	ldr	r3, [sp, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d0e5      	beq.n	800967c <_scanf_float+0x378>
 80096b0:	9905      	ldr	r1, [sp, #20]
 80096b2:	230a      	movs	r3, #10
 80096b4:	462a      	mov	r2, r5
 80096b6:	3101      	adds	r1, #1
 80096b8:	4640      	mov	r0, r8
 80096ba:	f001 fa53 	bl	800ab64 <_strtol_r>
 80096be:	9b04      	ldr	r3, [sp, #16]
 80096c0:	9e05      	ldr	r6, [sp, #20]
 80096c2:	1ac2      	subs	r2, r0, r3
 80096c4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80096c8:	429e      	cmp	r6, r3
 80096ca:	bf28      	it	cs
 80096cc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80096d0:	4912      	ldr	r1, [pc, #72]	; (800971c <_scanf_float+0x418>)
 80096d2:	4630      	mov	r0, r6
 80096d4:	f000 f922 	bl	800991c <siprintf>
 80096d8:	e7d0      	b.n	800967c <_scanf_float+0x378>
 80096da:	9903      	ldr	r1, [sp, #12]
 80096dc:	f012 0f04 	tst.w	r2, #4
 80096e0:	f103 0204 	add.w	r2, r3, #4
 80096e4:	600a      	str	r2, [r1, #0]
 80096e6:	d1d9      	bne.n	800969c <_scanf_float+0x398>
 80096e8:	f8d3 8000 	ldr.w	r8, [r3]
 80096ec:	ee10 2a10 	vmov	r2, s0
 80096f0:	ee10 0a10 	vmov	r0, s0
 80096f4:	463b      	mov	r3, r7
 80096f6:	4639      	mov	r1, r7
 80096f8:	f7f7 fa28 	bl	8000b4c <__aeabi_dcmpun>
 80096fc:	b128      	cbz	r0, 800970a <_scanf_float+0x406>
 80096fe:	4808      	ldr	r0, [pc, #32]	; (8009720 <_scanf_float+0x41c>)
 8009700:	f000 f8c2 	bl	8009888 <nanf>
 8009704:	ed88 0a00 	vstr	s0, [r8]
 8009708:	e7cb      	b.n	80096a2 <_scanf_float+0x39e>
 800970a:	4630      	mov	r0, r6
 800970c:	4639      	mov	r1, r7
 800970e:	f7f7 fa7b 	bl	8000c08 <__aeabi_d2f>
 8009712:	f8c8 0000 	str.w	r0, [r8]
 8009716:	e7c4      	b.n	80096a2 <_scanf_float+0x39e>
 8009718:	2500      	movs	r5, #0
 800971a:	e634      	b.n	8009386 <_scanf_float+0x82>
 800971c:	0800e11a 	.word	0x0800e11a
 8009720:	0800ec3b 	.word	0x0800ec3b

08009724 <_perror_r>:
 8009724:	6983      	ldr	r3, [r0, #24]
 8009726:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009728:	68c4      	ldr	r4, [r0, #12]
 800972a:	4605      	mov	r5, r0
 800972c:	460e      	mov	r6, r1
 800972e:	b90b      	cbnz	r3, 8009734 <_perror_r+0x10>
 8009730:	f002 fa30 	bl	800bb94 <__sinit>
 8009734:	4b43      	ldr	r3, [pc, #268]	; (8009844 <_perror_r+0x120>)
 8009736:	429c      	cmp	r4, r3
 8009738:	d132      	bne.n	80097a0 <_perror_r+0x7c>
 800973a:	686c      	ldr	r4, [r5, #4]
 800973c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800973e:	07d8      	lsls	r0, r3, #31
 8009740:	d405      	bmi.n	800974e <_perror_r+0x2a>
 8009742:	89a3      	ldrh	r3, [r4, #12]
 8009744:	0599      	lsls	r1, r3, #22
 8009746:	d402      	bmi.n	800974e <_perror_r+0x2a>
 8009748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800974a:	f002 fe34 	bl	800c3b6 <__retarget_lock_acquire_recursive>
 800974e:	4621      	mov	r1, r4
 8009750:	4628      	mov	r0, r5
 8009752:	f002 f94d 	bl	800b9f0 <_fflush_r>
 8009756:	bb6e      	cbnz	r6, 80097b4 <_perror_r+0x90>
 8009758:	6829      	ldr	r1, [r5, #0]
 800975a:	ab01      	add	r3, sp, #4
 800975c:	2201      	movs	r2, #1
 800975e:	4628      	mov	r0, r5
 8009760:	f000 f96e 	bl	8009a40 <_strerror_r>
 8009764:	4607      	mov	r7, r0
 8009766:	2800      	cmp	r0, #0
 8009768:	d14f      	bne.n	800980a <_perror_r+0xe6>
 800976a:	4837      	ldr	r0, [pc, #220]	; (8009848 <_perror_r+0x124>)
 800976c:	4f36      	ldr	r7, [pc, #216]	; (8009848 <_perror_r+0x124>)
 800976e:	f7f6 fd39 	bl	80001e4 <strlen>
 8009772:	4606      	mov	r6, r0
 8009774:	b156      	cbz	r6, 800978c <_perror_r+0x68>
 8009776:	4620      	mov	r0, r4
 8009778:	f002 f976 	bl	800ba68 <fileno>
 800977c:	4633      	mov	r3, r6
 800977e:	4601      	mov	r1, r0
 8009780:	463a      	mov	r2, r7
 8009782:	4628      	mov	r0, r5
 8009784:	f001 fa12 	bl	800abac <_write_r>
 8009788:	2800      	cmp	r0, #0
 800978a:	da51      	bge.n	8009830 <_perror_r+0x10c>
 800978c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009790:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009796:	07d2      	lsls	r2, r2, #31
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	d54c      	bpl.n	8009836 <_perror_r+0x112>
 800979c:	b003      	add	sp, #12
 800979e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097a0:	4b2a      	ldr	r3, [pc, #168]	; (800984c <_perror_r+0x128>)
 80097a2:	429c      	cmp	r4, r3
 80097a4:	d101      	bne.n	80097aa <_perror_r+0x86>
 80097a6:	68ac      	ldr	r4, [r5, #8]
 80097a8:	e7c8      	b.n	800973c <_perror_r+0x18>
 80097aa:	4b29      	ldr	r3, [pc, #164]	; (8009850 <_perror_r+0x12c>)
 80097ac:	429c      	cmp	r4, r3
 80097ae:	bf08      	it	eq
 80097b0:	68ec      	ldreq	r4, [r5, #12]
 80097b2:	e7c3      	b.n	800973c <_perror_r+0x18>
 80097b4:	7833      	ldrb	r3, [r6, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d0ce      	beq.n	8009758 <_perror_r+0x34>
 80097ba:	4630      	mov	r0, r6
 80097bc:	f7f6 fd12 	bl	80001e4 <strlen>
 80097c0:	4607      	mov	r7, r0
 80097c2:	b157      	cbz	r7, 80097da <_perror_r+0xb6>
 80097c4:	4620      	mov	r0, r4
 80097c6:	f002 f94f 	bl	800ba68 <fileno>
 80097ca:	463b      	mov	r3, r7
 80097cc:	4601      	mov	r1, r0
 80097ce:	4632      	mov	r2, r6
 80097d0:	4628      	mov	r0, r5
 80097d2:	f001 f9eb 	bl	800abac <_write_r>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	da14      	bge.n	8009804 <_perror_r+0xe0>
 80097da:	481e      	ldr	r0, [pc, #120]	; (8009854 <_perror_r+0x130>)
 80097dc:	4f1d      	ldr	r7, [pc, #116]	; (8009854 <_perror_r+0x130>)
 80097de:	f7f6 fd01 	bl	80001e4 <strlen>
 80097e2:	4606      	mov	r6, r0
 80097e4:	2e00      	cmp	r6, #0
 80097e6:	d0b7      	beq.n	8009758 <_perror_r+0x34>
 80097e8:	4620      	mov	r0, r4
 80097ea:	f002 f93d 	bl	800ba68 <fileno>
 80097ee:	4633      	mov	r3, r6
 80097f0:	4601      	mov	r1, r0
 80097f2:	463a      	mov	r2, r7
 80097f4:	4628      	mov	r0, r5
 80097f6:	f001 f9d9 	bl	800abac <_write_r>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	dbac      	blt.n	8009758 <_perror_r+0x34>
 80097fe:	1a36      	subs	r6, r6, r0
 8009800:	4407      	add	r7, r0
 8009802:	e7ef      	b.n	80097e4 <_perror_r+0xc0>
 8009804:	1a3f      	subs	r7, r7, r0
 8009806:	4406      	add	r6, r0
 8009808:	e7db      	b.n	80097c2 <_perror_r+0x9e>
 800980a:	f7f6 fceb 	bl	80001e4 <strlen>
 800980e:	4606      	mov	r6, r0
 8009810:	2e00      	cmp	r6, #0
 8009812:	d0aa      	beq.n	800976a <_perror_r+0x46>
 8009814:	4620      	mov	r0, r4
 8009816:	f002 f927 	bl	800ba68 <fileno>
 800981a:	4633      	mov	r3, r6
 800981c:	4601      	mov	r1, r0
 800981e:	463a      	mov	r2, r7
 8009820:	4628      	mov	r0, r5
 8009822:	f001 f9c3 	bl	800abac <_write_r>
 8009826:	2800      	cmp	r0, #0
 8009828:	db9f      	blt.n	800976a <_perror_r+0x46>
 800982a:	1a36      	subs	r6, r6, r0
 800982c:	4407      	add	r7, r0
 800982e:	e7ef      	b.n	8009810 <_perror_r+0xec>
 8009830:	1a36      	subs	r6, r6, r0
 8009832:	4407      	add	r7, r0
 8009834:	e79e      	b.n	8009774 <_perror_r+0x50>
 8009836:	059b      	lsls	r3, r3, #22
 8009838:	d4b0      	bmi.n	800979c <_perror_r+0x78>
 800983a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800983c:	f002 fdbc 	bl	800c3b8 <__retarget_lock_release_recursive>
 8009840:	e7ac      	b.n	800979c <_perror_r+0x78>
 8009842:	bf00      	nop
 8009844:	0800e9bc 	.word	0x0800e9bc
 8009848:	0800ec3a 	.word	0x0800ec3a
 800984c:	0800e9dc 	.word	0x0800e9dc
 8009850:	0800e99c 	.word	0x0800e99c
 8009854:	0800ec0a 	.word	0x0800ec0a

08009858 <perror>:
 8009858:	4b02      	ldr	r3, [pc, #8]	; (8009864 <perror+0xc>)
 800985a:	4601      	mov	r1, r0
 800985c:	6818      	ldr	r0, [r3, #0]
 800985e:	f7ff bf61 	b.w	8009724 <_perror_r>
 8009862:	bf00      	nop
 8009864:	2000003c 	.word	0x2000003c

08009868 <_sbrk_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4d06      	ldr	r5, [pc, #24]	; (8009884 <_sbrk_r+0x1c>)
 800986c:	2300      	movs	r3, #0
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	f7f8 fa9c 	bl	8001db0 <_sbrk>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_sbrk_r+0x1a>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_sbrk_r+0x1a>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	20000804 	.word	0x20000804

08009888 <nanf>:
 8009888:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009890 <nanf+0x8>
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	7fc00000 	.word	0x7fc00000

08009894 <_raise_r>:
 8009894:	291f      	cmp	r1, #31
 8009896:	b538      	push	{r3, r4, r5, lr}
 8009898:	4604      	mov	r4, r0
 800989a:	460d      	mov	r5, r1
 800989c:	d904      	bls.n	80098a8 <_raise_r+0x14>
 800989e:	2316      	movs	r3, #22
 80098a0:	6003      	str	r3, [r0, #0]
 80098a2:	f04f 30ff 	mov.w	r0, #4294967295
 80098a6:	bd38      	pop	{r3, r4, r5, pc}
 80098a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098aa:	b112      	cbz	r2, 80098b2 <_raise_r+0x1e>
 80098ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098b0:	b94b      	cbnz	r3, 80098c6 <_raise_r+0x32>
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 f830 	bl	8009918 <_getpid_r>
 80098b8:	462a      	mov	r2, r5
 80098ba:	4601      	mov	r1, r0
 80098bc:	4620      	mov	r0, r4
 80098be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098c2:	f000 b817 	b.w	80098f4 <_kill_r>
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d00a      	beq.n	80098e0 <_raise_r+0x4c>
 80098ca:	1c59      	adds	r1, r3, #1
 80098cc:	d103      	bne.n	80098d6 <_raise_r+0x42>
 80098ce:	2316      	movs	r3, #22
 80098d0:	6003      	str	r3, [r0, #0]
 80098d2:	2001      	movs	r0, #1
 80098d4:	e7e7      	b.n	80098a6 <_raise_r+0x12>
 80098d6:	2400      	movs	r4, #0
 80098d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098dc:	4628      	mov	r0, r5
 80098de:	4798      	blx	r3
 80098e0:	2000      	movs	r0, #0
 80098e2:	e7e0      	b.n	80098a6 <_raise_r+0x12>

080098e4 <raise>:
 80098e4:	4b02      	ldr	r3, [pc, #8]	; (80098f0 <raise+0xc>)
 80098e6:	4601      	mov	r1, r0
 80098e8:	6818      	ldr	r0, [r3, #0]
 80098ea:	f7ff bfd3 	b.w	8009894 <_raise_r>
 80098ee:	bf00      	nop
 80098f0:	2000003c 	.word	0x2000003c

080098f4 <_kill_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	4d07      	ldr	r5, [pc, #28]	; (8009914 <_kill_r+0x20>)
 80098f8:	2300      	movs	r3, #0
 80098fa:	4604      	mov	r4, r0
 80098fc:	4608      	mov	r0, r1
 80098fe:	4611      	mov	r1, r2
 8009900:	602b      	str	r3, [r5, #0]
 8009902:	f7f8 f9cd 	bl	8001ca0 <_kill>
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	d102      	bne.n	8009910 <_kill_r+0x1c>
 800990a:	682b      	ldr	r3, [r5, #0]
 800990c:	b103      	cbz	r3, 8009910 <_kill_r+0x1c>
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	bf00      	nop
 8009914:	20000804 	.word	0x20000804

08009918 <_getpid_r>:
 8009918:	f7f8 b9ba 	b.w	8001c90 <_getpid>

0800991c <siprintf>:
 800991c:	b40e      	push	{r1, r2, r3}
 800991e:	b500      	push	{lr}
 8009920:	b09c      	sub	sp, #112	; 0x70
 8009922:	ab1d      	add	r3, sp, #116	; 0x74
 8009924:	9002      	str	r0, [sp, #8]
 8009926:	9006      	str	r0, [sp, #24]
 8009928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800992c:	4809      	ldr	r0, [pc, #36]	; (8009954 <siprintf+0x38>)
 800992e:	9107      	str	r1, [sp, #28]
 8009930:	9104      	str	r1, [sp, #16]
 8009932:	4909      	ldr	r1, [pc, #36]	; (8009958 <siprintf+0x3c>)
 8009934:	f853 2b04 	ldr.w	r2, [r3], #4
 8009938:	9105      	str	r1, [sp, #20]
 800993a:	6800      	ldr	r0, [r0, #0]
 800993c:	9301      	str	r3, [sp, #4]
 800993e:	a902      	add	r1, sp, #8
 8009940:	f003 faac 	bl	800ce9c <_svfiprintf_r>
 8009944:	9b02      	ldr	r3, [sp, #8]
 8009946:	2200      	movs	r2, #0
 8009948:	701a      	strb	r2, [r3, #0]
 800994a:	b01c      	add	sp, #112	; 0x70
 800994c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009950:	b003      	add	sp, #12
 8009952:	4770      	bx	lr
 8009954:	2000003c 	.word	0x2000003c
 8009958:	ffff0208 	.word	0xffff0208

0800995c <siscanf>:
 800995c:	b40e      	push	{r1, r2, r3}
 800995e:	b510      	push	{r4, lr}
 8009960:	b09f      	sub	sp, #124	; 0x7c
 8009962:	ac21      	add	r4, sp, #132	; 0x84
 8009964:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009968:	f854 2b04 	ldr.w	r2, [r4], #4
 800996c:	9201      	str	r2, [sp, #4]
 800996e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009972:	9004      	str	r0, [sp, #16]
 8009974:	9008      	str	r0, [sp, #32]
 8009976:	f7f6 fc35 	bl	80001e4 <strlen>
 800997a:	4b0c      	ldr	r3, [pc, #48]	; (80099ac <siscanf+0x50>)
 800997c:	9005      	str	r0, [sp, #20]
 800997e:	9009      	str	r0, [sp, #36]	; 0x24
 8009980:	930d      	str	r3, [sp, #52]	; 0x34
 8009982:	480b      	ldr	r0, [pc, #44]	; (80099b0 <siscanf+0x54>)
 8009984:	9a01      	ldr	r2, [sp, #4]
 8009986:	6800      	ldr	r0, [r0, #0]
 8009988:	9403      	str	r4, [sp, #12]
 800998a:	2300      	movs	r3, #0
 800998c:	9311      	str	r3, [sp, #68]	; 0x44
 800998e:	9316      	str	r3, [sp, #88]	; 0x58
 8009990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009994:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009998:	a904      	add	r1, sp, #16
 800999a:	4623      	mov	r3, r4
 800999c:	f003 fbd8 	bl	800d150 <__ssvfiscanf_r>
 80099a0:	b01f      	add	sp, #124	; 0x7c
 80099a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a6:	b003      	add	sp, #12
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	080099d7 	.word	0x080099d7
 80099b0:	2000003c 	.word	0x2000003c

080099b4 <__sread>:
 80099b4:	b510      	push	{r4, lr}
 80099b6:	460c      	mov	r4, r1
 80099b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099bc:	f003 fe92 	bl	800d6e4 <_read_r>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	bfab      	itete	ge
 80099c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099c6:	89a3      	ldrhlt	r3, [r4, #12]
 80099c8:	181b      	addge	r3, r3, r0
 80099ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099ce:	bfac      	ite	ge
 80099d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80099d2:	81a3      	strhlt	r3, [r4, #12]
 80099d4:	bd10      	pop	{r4, pc}

080099d6 <__seofread>:
 80099d6:	2000      	movs	r0, #0
 80099d8:	4770      	bx	lr

080099da <__swrite>:
 80099da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099de:	461f      	mov	r7, r3
 80099e0:	898b      	ldrh	r3, [r1, #12]
 80099e2:	05db      	lsls	r3, r3, #23
 80099e4:	4605      	mov	r5, r0
 80099e6:	460c      	mov	r4, r1
 80099e8:	4616      	mov	r6, r2
 80099ea:	d505      	bpl.n	80099f8 <__swrite+0x1e>
 80099ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f0:	2302      	movs	r3, #2
 80099f2:	2200      	movs	r2, #0
 80099f4:	f002 fce2 	bl	800c3bc <_lseek_r>
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a02:	81a3      	strh	r3, [r4, #12]
 8009a04:	4632      	mov	r2, r6
 8009a06:	463b      	mov	r3, r7
 8009a08:	4628      	mov	r0, r5
 8009a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a0e:	f001 b8cd 	b.w	800abac <_write_r>

08009a12 <__sseek>:
 8009a12:	b510      	push	{r4, lr}
 8009a14:	460c      	mov	r4, r1
 8009a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a1a:	f002 fccf 	bl	800c3bc <_lseek_r>
 8009a1e:	1c43      	adds	r3, r0, #1
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	bf15      	itete	ne
 8009a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a2e:	81a3      	strheq	r3, [r4, #12]
 8009a30:	bf18      	it	ne
 8009a32:	81a3      	strhne	r3, [r4, #12]
 8009a34:	bd10      	pop	{r4, pc}

08009a36 <__sclose>:
 8009a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a3a:	f001 b8c9 	b.w	800abd0 <_close_r>
	...

08009a40 <_strerror_r>:
 8009a40:	b510      	push	{r4, lr}
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	4611      	mov	r1, r2
 8009a48:	288e      	cmp	r0, #142	; 0x8e
 8009a4a:	f200 8130 	bhi.w	8009cae <_strerror_r+0x26e>
 8009a4e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8009a52:	0139      	.short	0x0139
 8009a54:	0092008f 	.word	0x0092008f
 8009a58:	00960094 	.word	0x00960094
 8009a5c:	009a0098 	.word	0x009a0098
 8009a60:	009e009c 	.word	0x009e009c
 8009a64:	00a400a2 	.word	0x00a400a2
 8009a68:	00aa00a8 	.word	0x00aa00a8
 8009a6c:	00ae00ac 	.word	0x00ae00ac
 8009a70:	00b0012e 	.word	0x00b0012e
 8009a74:	00b400b2 	.word	0x00b400b2
 8009a78:	00b800b6 	.word	0x00b800b6
 8009a7c:	00c000be 	.word	0x00c000be
 8009a80:	00c800c6 	.word	0x00c800c6
 8009a84:	00cc00ca 	.word	0x00cc00ca
 8009a88:	00d200ce 	.word	0x00d200ce
 8009a8c:	00d800d6 	.word	0x00d800d6
 8009a90:	00dc00da 	.word	0x00dc00da
 8009a94:	00e000de 	.word	0x00e000de
 8009a98:	00e400e2 	.word	0x00e400e2
 8009a9c:	012e012e 	.word	0x012e012e
 8009aa0:	012e012e 	.word	0x012e012e
 8009aa4:	012e012e 	.word	0x012e012e
 8009aa8:	012e012e 	.word	0x012e012e
 8009aac:	00ec00e8 	.word	0x00ec00e8
 8009ab0:	012e012e 	.word	0x012e012e
 8009ab4:	012e012e 	.word	0x012e012e
 8009ab8:	012e012e 	.word	0x012e012e
 8009abc:	012e012e 	.word	0x012e012e
 8009ac0:	012e012e 	.word	0x012e012e
 8009ac4:	012e012e 	.word	0x012e012e
 8009ac8:	00ee012e 	.word	0x00ee012e
 8009acc:	00f00108 	.word	0x00f00108
 8009ad0:	012e00f2 	.word	0x012e00f2
 8009ad4:	012e012e 	.word	0x012e012e
 8009ad8:	012e00f4 	.word	0x012e00f4
 8009adc:	012e012e 	.word	0x012e012e
 8009ae0:	012e00f6 	.word	0x012e00f6
 8009ae4:	00fa012e 	.word	0x00fa012e
 8009ae8:	012e012e 	.word	0x012e012e
 8009aec:	012e00fc 	.word	0x012e00fc
 8009af0:	012e012e 	.word	0x012e012e
 8009af4:	012e012e 	.word	0x012e012e
 8009af8:	012e012e 	.word	0x012e012e
 8009afc:	012e012e 	.word	0x012e012e
 8009b00:	00fe012e 	.word	0x00fe012e
 8009b04:	0100012e 	.word	0x0100012e
 8009b08:	01040102 	.word	0x01040102
 8009b0c:	012e012e 	.word	0x012e012e
 8009b10:	012e0126 	.word	0x012e0126
 8009b14:	012e012e 	.word	0x012e012e
 8009b18:	012e012e 	.word	0x012e012e
 8009b1c:	012e012e 	.word	0x012e012e
 8009b20:	0114012e 	.word	0x0114012e
 8009b24:	010a0106 	.word	0x010a0106
 8009b28:	010e010c 	.word	0x010e010c
 8009b2c:	012e0110 	.word	0x012e0110
 8009b30:	01160112 	.word	0x01160112
 8009b34:	00ea011a 	.word	0x00ea011a
 8009b38:	012c00c2 	.word	0x012c00c2
 8009b3c:	00d000ba 	.word	0x00d000ba
 8009b40:	00a000bc 	.word	0x00a000bc
 8009b44:	012a00a6 	.word	0x012a00a6
 8009b48:	012e00f8 	.word	0x012e00f8
 8009b4c:	00c40118 	.word	0x00c40118
 8009b50:	011c011e 	.word	0x011c011e
 8009b54:	012e012e 	.word	0x012e012e
 8009b58:	012e012e 	.word	0x012e012e
 8009b5c:	00d4012e 	.word	0x00d4012e
 8009b60:	012e012e 	.word	0x012e012e
 8009b64:	00e6012e 	.word	0x00e6012e
 8009b68:	01200128 	.word	0x01200128
 8009b6c:	01240122 	.word	0x01240122
 8009b70:	4b55      	ldr	r3, [pc, #340]	; (8009cc8 <_strerror_r+0x288>)
 8009b72:	4618      	mov	r0, r3
 8009b74:	bd10      	pop	{r4, pc}
 8009b76:	4b55      	ldr	r3, [pc, #340]	; (8009ccc <_strerror_r+0x28c>)
 8009b78:	e7fb      	b.n	8009b72 <_strerror_r+0x132>
 8009b7a:	4b55      	ldr	r3, [pc, #340]	; (8009cd0 <_strerror_r+0x290>)
 8009b7c:	e7f9      	b.n	8009b72 <_strerror_r+0x132>
 8009b7e:	4b55      	ldr	r3, [pc, #340]	; (8009cd4 <_strerror_r+0x294>)
 8009b80:	e7f7      	b.n	8009b72 <_strerror_r+0x132>
 8009b82:	4b55      	ldr	r3, [pc, #340]	; (8009cd8 <_strerror_r+0x298>)
 8009b84:	e7f5      	b.n	8009b72 <_strerror_r+0x132>
 8009b86:	4b55      	ldr	r3, [pc, #340]	; (8009cdc <_strerror_r+0x29c>)
 8009b88:	e7f3      	b.n	8009b72 <_strerror_r+0x132>
 8009b8a:	4b55      	ldr	r3, [pc, #340]	; (8009ce0 <_strerror_r+0x2a0>)
 8009b8c:	e7f1      	b.n	8009b72 <_strerror_r+0x132>
 8009b8e:	4b55      	ldr	r3, [pc, #340]	; (8009ce4 <_strerror_r+0x2a4>)
 8009b90:	e7ef      	b.n	8009b72 <_strerror_r+0x132>
 8009b92:	4b55      	ldr	r3, [pc, #340]	; (8009ce8 <_strerror_r+0x2a8>)
 8009b94:	e7ed      	b.n	8009b72 <_strerror_r+0x132>
 8009b96:	4b55      	ldr	r3, [pc, #340]	; (8009cec <_strerror_r+0x2ac>)
 8009b98:	e7eb      	b.n	8009b72 <_strerror_r+0x132>
 8009b9a:	4b55      	ldr	r3, [pc, #340]	; (8009cf0 <_strerror_r+0x2b0>)
 8009b9c:	e7e9      	b.n	8009b72 <_strerror_r+0x132>
 8009b9e:	4b55      	ldr	r3, [pc, #340]	; (8009cf4 <_strerror_r+0x2b4>)
 8009ba0:	e7e7      	b.n	8009b72 <_strerror_r+0x132>
 8009ba2:	4b55      	ldr	r3, [pc, #340]	; (8009cf8 <_strerror_r+0x2b8>)
 8009ba4:	e7e5      	b.n	8009b72 <_strerror_r+0x132>
 8009ba6:	4b55      	ldr	r3, [pc, #340]	; (8009cfc <_strerror_r+0x2bc>)
 8009ba8:	e7e3      	b.n	8009b72 <_strerror_r+0x132>
 8009baa:	4b55      	ldr	r3, [pc, #340]	; (8009d00 <_strerror_r+0x2c0>)
 8009bac:	e7e1      	b.n	8009b72 <_strerror_r+0x132>
 8009bae:	4b55      	ldr	r3, [pc, #340]	; (8009d04 <_strerror_r+0x2c4>)
 8009bb0:	e7df      	b.n	8009b72 <_strerror_r+0x132>
 8009bb2:	4b55      	ldr	r3, [pc, #340]	; (8009d08 <_strerror_r+0x2c8>)
 8009bb4:	e7dd      	b.n	8009b72 <_strerror_r+0x132>
 8009bb6:	4b55      	ldr	r3, [pc, #340]	; (8009d0c <_strerror_r+0x2cc>)
 8009bb8:	e7db      	b.n	8009b72 <_strerror_r+0x132>
 8009bba:	4b55      	ldr	r3, [pc, #340]	; (8009d10 <_strerror_r+0x2d0>)
 8009bbc:	e7d9      	b.n	8009b72 <_strerror_r+0x132>
 8009bbe:	4b55      	ldr	r3, [pc, #340]	; (8009d14 <_strerror_r+0x2d4>)
 8009bc0:	e7d7      	b.n	8009b72 <_strerror_r+0x132>
 8009bc2:	4b55      	ldr	r3, [pc, #340]	; (8009d18 <_strerror_r+0x2d8>)
 8009bc4:	e7d5      	b.n	8009b72 <_strerror_r+0x132>
 8009bc6:	4b55      	ldr	r3, [pc, #340]	; (8009d1c <_strerror_r+0x2dc>)
 8009bc8:	e7d3      	b.n	8009b72 <_strerror_r+0x132>
 8009bca:	4b55      	ldr	r3, [pc, #340]	; (8009d20 <_strerror_r+0x2e0>)
 8009bcc:	e7d1      	b.n	8009b72 <_strerror_r+0x132>
 8009bce:	4b55      	ldr	r3, [pc, #340]	; (8009d24 <_strerror_r+0x2e4>)
 8009bd0:	e7cf      	b.n	8009b72 <_strerror_r+0x132>
 8009bd2:	4b55      	ldr	r3, [pc, #340]	; (8009d28 <_strerror_r+0x2e8>)
 8009bd4:	e7cd      	b.n	8009b72 <_strerror_r+0x132>
 8009bd6:	4b55      	ldr	r3, [pc, #340]	; (8009d2c <_strerror_r+0x2ec>)
 8009bd8:	e7cb      	b.n	8009b72 <_strerror_r+0x132>
 8009bda:	4b55      	ldr	r3, [pc, #340]	; (8009d30 <_strerror_r+0x2f0>)
 8009bdc:	e7c9      	b.n	8009b72 <_strerror_r+0x132>
 8009bde:	4b55      	ldr	r3, [pc, #340]	; (8009d34 <_strerror_r+0x2f4>)
 8009be0:	e7c7      	b.n	8009b72 <_strerror_r+0x132>
 8009be2:	4b55      	ldr	r3, [pc, #340]	; (8009d38 <_strerror_r+0x2f8>)
 8009be4:	e7c5      	b.n	8009b72 <_strerror_r+0x132>
 8009be6:	4b55      	ldr	r3, [pc, #340]	; (8009d3c <_strerror_r+0x2fc>)
 8009be8:	e7c3      	b.n	8009b72 <_strerror_r+0x132>
 8009bea:	4b55      	ldr	r3, [pc, #340]	; (8009d40 <_strerror_r+0x300>)
 8009bec:	e7c1      	b.n	8009b72 <_strerror_r+0x132>
 8009bee:	4b55      	ldr	r3, [pc, #340]	; (8009d44 <_strerror_r+0x304>)
 8009bf0:	e7bf      	b.n	8009b72 <_strerror_r+0x132>
 8009bf2:	4b55      	ldr	r3, [pc, #340]	; (8009d48 <_strerror_r+0x308>)
 8009bf4:	e7bd      	b.n	8009b72 <_strerror_r+0x132>
 8009bf6:	4b55      	ldr	r3, [pc, #340]	; (8009d4c <_strerror_r+0x30c>)
 8009bf8:	e7bb      	b.n	8009b72 <_strerror_r+0x132>
 8009bfa:	4b55      	ldr	r3, [pc, #340]	; (8009d50 <_strerror_r+0x310>)
 8009bfc:	e7b9      	b.n	8009b72 <_strerror_r+0x132>
 8009bfe:	4b55      	ldr	r3, [pc, #340]	; (8009d54 <_strerror_r+0x314>)
 8009c00:	e7b7      	b.n	8009b72 <_strerror_r+0x132>
 8009c02:	4b55      	ldr	r3, [pc, #340]	; (8009d58 <_strerror_r+0x318>)
 8009c04:	e7b5      	b.n	8009b72 <_strerror_r+0x132>
 8009c06:	4b55      	ldr	r3, [pc, #340]	; (8009d5c <_strerror_r+0x31c>)
 8009c08:	e7b3      	b.n	8009b72 <_strerror_r+0x132>
 8009c0a:	4b55      	ldr	r3, [pc, #340]	; (8009d60 <_strerror_r+0x320>)
 8009c0c:	e7b1      	b.n	8009b72 <_strerror_r+0x132>
 8009c0e:	4b55      	ldr	r3, [pc, #340]	; (8009d64 <_strerror_r+0x324>)
 8009c10:	e7af      	b.n	8009b72 <_strerror_r+0x132>
 8009c12:	4b55      	ldr	r3, [pc, #340]	; (8009d68 <_strerror_r+0x328>)
 8009c14:	e7ad      	b.n	8009b72 <_strerror_r+0x132>
 8009c16:	4b55      	ldr	r3, [pc, #340]	; (8009d6c <_strerror_r+0x32c>)
 8009c18:	e7ab      	b.n	8009b72 <_strerror_r+0x132>
 8009c1a:	4b55      	ldr	r3, [pc, #340]	; (8009d70 <_strerror_r+0x330>)
 8009c1c:	e7a9      	b.n	8009b72 <_strerror_r+0x132>
 8009c1e:	4b55      	ldr	r3, [pc, #340]	; (8009d74 <_strerror_r+0x334>)
 8009c20:	e7a7      	b.n	8009b72 <_strerror_r+0x132>
 8009c22:	4b55      	ldr	r3, [pc, #340]	; (8009d78 <_strerror_r+0x338>)
 8009c24:	e7a5      	b.n	8009b72 <_strerror_r+0x132>
 8009c26:	4b55      	ldr	r3, [pc, #340]	; (8009d7c <_strerror_r+0x33c>)
 8009c28:	e7a3      	b.n	8009b72 <_strerror_r+0x132>
 8009c2a:	4b55      	ldr	r3, [pc, #340]	; (8009d80 <_strerror_r+0x340>)
 8009c2c:	e7a1      	b.n	8009b72 <_strerror_r+0x132>
 8009c2e:	4b55      	ldr	r3, [pc, #340]	; (8009d84 <_strerror_r+0x344>)
 8009c30:	e79f      	b.n	8009b72 <_strerror_r+0x132>
 8009c32:	4b55      	ldr	r3, [pc, #340]	; (8009d88 <_strerror_r+0x348>)
 8009c34:	e79d      	b.n	8009b72 <_strerror_r+0x132>
 8009c36:	4b55      	ldr	r3, [pc, #340]	; (8009d8c <_strerror_r+0x34c>)
 8009c38:	e79b      	b.n	8009b72 <_strerror_r+0x132>
 8009c3a:	4b55      	ldr	r3, [pc, #340]	; (8009d90 <_strerror_r+0x350>)
 8009c3c:	e799      	b.n	8009b72 <_strerror_r+0x132>
 8009c3e:	4b55      	ldr	r3, [pc, #340]	; (8009d94 <_strerror_r+0x354>)
 8009c40:	e797      	b.n	8009b72 <_strerror_r+0x132>
 8009c42:	4b55      	ldr	r3, [pc, #340]	; (8009d98 <_strerror_r+0x358>)
 8009c44:	e795      	b.n	8009b72 <_strerror_r+0x132>
 8009c46:	4b55      	ldr	r3, [pc, #340]	; (8009d9c <_strerror_r+0x35c>)
 8009c48:	e793      	b.n	8009b72 <_strerror_r+0x132>
 8009c4a:	4b55      	ldr	r3, [pc, #340]	; (8009da0 <_strerror_r+0x360>)
 8009c4c:	e791      	b.n	8009b72 <_strerror_r+0x132>
 8009c4e:	4b55      	ldr	r3, [pc, #340]	; (8009da4 <_strerror_r+0x364>)
 8009c50:	e78f      	b.n	8009b72 <_strerror_r+0x132>
 8009c52:	4b55      	ldr	r3, [pc, #340]	; (8009da8 <_strerror_r+0x368>)
 8009c54:	e78d      	b.n	8009b72 <_strerror_r+0x132>
 8009c56:	4b55      	ldr	r3, [pc, #340]	; (8009dac <_strerror_r+0x36c>)
 8009c58:	e78b      	b.n	8009b72 <_strerror_r+0x132>
 8009c5a:	4b55      	ldr	r3, [pc, #340]	; (8009db0 <_strerror_r+0x370>)
 8009c5c:	e789      	b.n	8009b72 <_strerror_r+0x132>
 8009c5e:	4b55      	ldr	r3, [pc, #340]	; (8009db4 <_strerror_r+0x374>)
 8009c60:	e787      	b.n	8009b72 <_strerror_r+0x132>
 8009c62:	4b55      	ldr	r3, [pc, #340]	; (8009db8 <_strerror_r+0x378>)
 8009c64:	e785      	b.n	8009b72 <_strerror_r+0x132>
 8009c66:	4b55      	ldr	r3, [pc, #340]	; (8009dbc <_strerror_r+0x37c>)
 8009c68:	e783      	b.n	8009b72 <_strerror_r+0x132>
 8009c6a:	4b55      	ldr	r3, [pc, #340]	; (8009dc0 <_strerror_r+0x380>)
 8009c6c:	e781      	b.n	8009b72 <_strerror_r+0x132>
 8009c6e:	4b55      	ldr	r3, [pc, #340]	; (8009dc4 <_strerror_r+0x384>)
 8009c70:	e77f      	b.n	8009b72 <_strerror_r+0x132>
 8009c72:	4b55      	ldr	r3, [pc, #340]	; (8009dc8 <_strerror_r+0x388>)
 8009c74:	e77d      	b.n	8009b72 <_strerror_r+0x132>
 8009c76:	4b55      	ldr	r3, [pc, #340]	; (8009dcc <_strerror_r+0x38c>)
 8009c78:	e77b      	b.n	8009b72 <_strerror_r+0x132>
 8009c7a:	4b55      	ldr	r3, [pc, #340]	; (8009dd0 <_strerror_r+0x390>)
 8009c7c:	e779      	b.n	8009b72 <_strerror_r+0x132>
 8009c7e:	4b55      	ldr	r3, [pc, #340]	; (8009dd4 <_strerror_r+0x394>)
 8009c80:	e777      	b.n	8009b72 <_strerror_r+0x132>
 8009c82:	4b55      	ldr	r3, [pc, #340]	; (8009dd8 <_strerror_r+0x398>)
 8009c84:	e775      	b.n	8009b72 <_strerror_r+0x132>
 8009c86:	4b55      	ldr	r3, [pc, #340]	; (8009ddc <_strerror_r+0x39c>)
 8009c88:	e773      	b.n	8009b72 <_strerror_r+0x132>
 8009c8a:	4b55      	ldr	r3, [pc, #340]	; (8009de0 <_strerror_r+0x3a0>)
 8009c8c:	e771      	b.n	8009b72 <_strerror_r+0x132>
 8009c8e:	4b55      	ldr	r3, [pc, #340]	; (8009de4 <_strerror_r+0x3a4>)
 8009c90:	e76f      	b.n	8009b72 <_strerror_r+0x132>
 8009c92:	4b55      	ldr	r3, [pc, #340]	; (8009de8 <_strerror_r+0x3a8>)
 8009c94:	e76d      	b.n	8009b72 <_strerror_r+0x132>
 8009c96:	4b55      	ldr	r3, [pc, #340]	; (8009dec <_strerror_r+0x3ac>)
 8009c98:	e76b      	b.n	8009b72 <_strerror_r+0x132>
 8009c9a:	4b55      	ldr	r3, [pc, #340]	; (8009df0 <_strerror_r+0x3b0>)
 8009c9c:	e769      	b.n	8009b72 <_strerror_r+0x132>
 8009c9e:	4b55      	ldr	r3, [pc, #340]	; (8009df4 <_strerror_r+0x3b4>)
 8009ca0:	e767      	b.n	8009b72 <_strerror_r+0x132>
 8009ca2:	4b55      	ldr	r3, [pc, #340]	; (8009df8 <_strerror_r+0x3b8>)
 8009ca4:	e765      	b.n	8009b72 <_strerror_r+0x132>
 8009ca6:	4b55      	ldr	r3, [pc, #340]	; (8009dfc <_strerror_r+0x3bc>)
 8009ca8:	e763      	b.n	8009b72 <_strerror_r+0x132>
 8009caa:	4b55      	ldr	r3, [pc, #340]	; (8009e00 <_strerror_r+0x3c0>)
 8009cac:	e761      	b.n	8009b72 <_strerror_r+0x132>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	bf14      	ite	ne
 8009cb2:	461a      	movne	r2, r3
 8009cb4:	4622      	moveq	r2, r4
 8009cb6:	f000 ff57 	bl	800ab68 <_user_strerror>
 8009cba:	4b52      	ldr	r3, [pc, #328]	; (8009e04 <_strerror_r+0x3c4>)
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	bf18      	it	ne
 8009cc0:	4603      	movne	r3, r0
 8009cc2:	e756      	b.n	8009b72 <_strerror_r+0x132>
 8009cc4:	4b50      	ldr	r3, [pc, #320]	; (8009e08 <_strerror_r+0x3c8>)
 8009cc6:	e754      	b.n	8009b72 <_strerror_r+0x132>
 8009cc8:	0800e11f 	.word	0x0800e11f
 8009ccc:	0800e129 	.word	0x0800e129
 8009cd0:	0800e143 	.word	0x0800e143
 8009cd4:	0800e153 	.word	0x0800e153
 8009cd8:	0800e16b 	.word	0x0800e16b
 8009cdc:	0800e175 	.word	0x0800e175
 8009ce0:	0800e18f 	.word	0x0800e18f
 8009ce4:	0800e1a1 	.word	0x0800e1a1
 8009ce8:	0800e1b3 	.word	0x0800e1b3
 8009cec:	0800e1cc 	.word	0x0800e1cc
 8009cf0:	0800e1dc 	.word	0x0800e1dc
 8009cf4:	0800e1e8 	.word	0x0800e1e8
 8009cf8:	0800e205 	.word	0x0800e205
 8009cfc:	0800e217 	.word	0x0800e217
 8009d00:	0800e228 	.word	0x0800e228
 8009d04:	0800e23a 	.word	0x0800e23a
 8009d08:	0800e246 	.word	0x0800e246
 8009d0c:	0800e25e 	.word	0x0800e25e
 8009d10:	0800e26a 	.word	0x0800e26a
 8009d14:	0800e27c 	.word	0x0800e27c
 8009d18:	0800e28b 	.word	0x0800e28b
 8009d1c:	0800e29b 	.word	0x0800e29b
 8009d20:	0800e2a8 	.word	0x0800e2a8
 8009d24:	0800e2c7 	.word	0x0800e2c7
 8009d28:	0800e2d6 	.word	0x0800e2d6
 8009d2c:	0800e2e7 	.word	0x0800e2e7
 8009d30:	0800e30b 	.word	0x0800e30b
 8009d34:	0800e329 	.word	0x0800e329
 8009d38:	0800e347 	.word	0x0800e347
 8009d3c:	0800e367 	.word	0x0800e367
 8009d40:	0800e37e 	.word	0x0800e37e
 8009d44:	0800e38d 	.word	0x0800e38d
 8009d48:	0800e39c 	.word	0x0800e39c
 8009d4c:	0800e3b0 	.word	0x0800e3b0
 8009d50:	0800e3c8 	.word	0x0800e3c8
 8009d54:	0800e3d6 	.word	0x0800e3d6
 8009d58:	0800e3e3 	.word	0x0800e3e3
 8009d5c:	0800e3f9 	.word	0x0800e3f9
 8009d60:	0800e408 	.word	0x0800e408
 8009d64:	0800e414 	.word	0x0800e414
 8009d68:	0800e443 	.word	0x0800e443
 8009d6c:	0800e454 	.word	0x0800e454
 8009d70:	0800e46f 	.word	0x0800e46f
 8009d74:	0800e482 	.word	0x0800e482
 8009d78:	0800e498 	.word	0x0800e498
 8009d7c:	0800e4a1 	.word	0x0800e4a1
 8009d80:	0800e4b8 	.word	0x0800e4b8
 8009d84:	0800e4c0 	.word	0x0800e4c0
 8009d88:	0800e4cd 	.word	0x0800e4cd
 8009d8c:	0800e4e2 	.word	0x0800e4e2
 8009d90:	0800e4f6 	.word	0x0800e4f6
 8009d94:	0800e50e 	.word	0x0800e50e
 8009d98:	0800e51d 	.word	0x0800e51d
 8009d9c:	0800e52e 	.word	0x0800e52e
 8009da0:	0800e541 	.word	0x0800e541
 8009da4:	0800e54d 	.word	0x0800e54d
 8009da8:	0800e566 	.word	0x0800e566
 8009dac:	0800e57a 	.word	0x0800e57a
 8009db0:	0800e595 	.word	0x0800e595
 8009db4:	0800e5ad 	.word	0x0800e5ad
 8009db8:	0800e5c7 	.word	0x0800e5c7
 8009dbc:	0800e5cf 	.word	0x0800e5cf
 8009dc0:	0800e5ff 	.word	0x0800e5ff
 8009dc4:	0800e61e 	.word	0x0800e61e
 8009dc8:	0800e63d 	.word	0x0800e63d
 8009dcc:	0800e654 	.word	0x0800e654
 8009dd0:	0800e667 	.word	0x0800e667
 8009dd4:	0800e680 	.word	0x0800e680
 8009dd8:	0800e697 	.word	0x0800e697
 8009ddc:	0800e6ad 	.word	0x0800e6ad
 8009de0:	0800e6ce 	.word	0x0800e6ce
 8009de4:	0800e6e6 	.word	0x0800e6e6
 8009de8:	0800e702 	.word	0x0800e702
 8009dec:	0800e715 	.word	0x0800e715
 8009df0:	0800e72b 	.word	0x0800e72b
 8009df4:	0800e73f 	.word	0x0800e73f
 8009df8:	0800e761 	.word	0x0800e761
 8009dfc:	0800e787 	.word	0x0800e787
 8009e00:	0800e798 	.word	0x0800e798
 8009e04:	0800ec3b 	.word	0x0800ec3b
 8009e08:	0800e7ad 	.word	0x0800e7ad

08009e0c <sulp>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	4604      	mov	r4, r0
 8009e10:	460d      	mov	r5, r1
 8009e12:	ec45 4b10 	vmov	d0, r4, r5
 8009e16:	4616      	mov	r6, r2
 8009e18:	f002 fe80 	bl	800cb1c <__ulp>
 8009e1c:	ec51 0b10 	vmov	r0, r1, d0
 8009e20:	b17e      	cbz	r6, 8009e42 <sulp+0x36>
 8009e22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009e26:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	dd09      	ble.n	8009e42 <sulp+0x36>
 8009e2e:	051b      	lsls	r3, r3, #20
 8009e30:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009e34:	2400      	movs	r4, #0
 8009e36:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009e3a:	4622      	mov	r2, r4
 8009e3c:	462b      	mov	r3, r5
 8009e3e:	f7f6 fbeb 	bl	8000618 <__aeabi_dmul>
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	0000      	movs	r0, r0
	...

08009e48 <_strtod_l>:
 8009e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	ed2d 8b02 	vpush	{d8}
 8009e50:	b09d      	sub	sp, #116	; 0x74
 8009e52:	461f      	mov	r7, r3
 8009e54:	2300      	movs	r3, #0
 8009e56:	9318      	str	r3, [sp, #96]	; 0x60
 8009e58:	4ba2      	ldr	r3, [pc, #648]	; (800a0e4 <_strtod_l+0x29c>)
 8009e5a:	9213      	str	r2, [sp, #76]	; 0x4c
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	9305      	str	r3, [sp, #20]
 8009e60:	4604      	mov	r4, r0
 8009e62:	4618      	mov	r0, r3
 8009e64:	4688      	mov	r8, r1
 8009e66:	f7f6 f9bd 	bl	80001e4 <strlen>
 8009e6a:	f04f 0a00 	mov.w	sl, #0
 8009e6e:	4605      	mov	r5, r0
 8009e70:	f04f 0b00 	mov.w	fp, #0
 8009e74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009e78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e7a:	781a      	ldrb	r2, [r3, #0]
 8009e7c:	2a2b      	cmp	r2, #43	; 0x2b
 8009e7e:	d04e      	beq.n	8009f1e <_strtod_l+0xd6>
 8009e80:	d83b      	bhi.n	8009efa <_strtod_l+0xb2>
 8009e82:	2a0d      	cmp	r2, #13
 8009e84:	d834      	bhi.n	8009ef0 <_strtod_l+0xa8>
 8009e86:	2a08      	cmp	r2, #8
 8009e88:	d834      	bhi.n	8009ef4 <_strtod_l+0xac>
 8009e8a:	2a00      	cmp	r2, #0
 8009e8c:	d03e      	beq.n	8009f0c <_strtod_l+0xc4>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	930a      	str	r3, [sp, #40]	; 0x28
 8009e92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009e94:	7833      	ldrb	r3, [r6, #0]
 8009e96:	2b30      	cmp	r3, #48	; 0x30
 8009e98:	f040 80b0 	bne.w	8009ffc <_strtod_l+0x1b4>
 8009e9c:	7873      	ldrb	r3, [r6, #1]
 8009e9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ea2:	2b58      	cmp	r3, #88	; 0x58
 8009ea4:	d168      	bne.n	8009f78 <_strtod_l+0x130>
 8009ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea8:	9301      	str	r3, [sp, #4]
 8009eaa:	ab18      	add	r3, sp, #96	; 0x60
 8009eac:	9702      	str	r7, [sp, #8]
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	4a8d      	ldr	r2, [pc, #564]	; (800a0e8 <_strtod_l+0x2a0>)
 8009eb2:	ab19      	add	r3, sp, #100	; 0x64
 8009eb4:	a917      	add	r1, sp, #92	; 0x5c
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f001 ff70 	bl	800bd9c <__gethex>
 8009ebc:	f010 0707 	ands.w	r7, r0, #7
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	d005      	beq.n	8009ed0 <_strtod_l+0x88>
 8009ec4:	2f06      	cmp	r7, #6
 8009ec6:	d12c      	bne.n	8009f22 <_strtod_l+0xda>
 8009ec8:	3601      	adds	r6, #1
 8009eca:	2300      	movs	r3, #0
 8009ecc:	9617      	str	r6, [sp, #92]	; 0x5c
 8009ece:	930a      	str	r3, [sp, #40]	; 0x28
 8009ed0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f040 8590 	bne.w	800a9f8 <_strtod_l+0xbb0>
 8009ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eda:	b1eb      	cbz	r3, 8009f18 <_strtod_l+0xd0>
 8009edc:	4652      	mov	r2, sl
 8009ede:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009ee2:	ec43 2b10 	vmov	d0, r2, r3
 8009ee6:	b01d      	add	sp, #116	; 0x74
 8009ee8:	ecbd 8b02 	vpop	{d8}
 8009eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef0:	2a20      	cmp	r2, #32
 8009ef2:	d1cc      	bne.n	8009e8e <_strtod_l+0x46>
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	9317      	str	r3, [sp, #92]	; 0x5c
 8009ef8:	e7be      	b.n	8009e78 <_strtod_l+0x30>
 8009efa:	2a2d      	cmp	r2, #45	; 0x2d
 8009efc:	d1c7      	bne.n	8009e8e <_strtod_l+0x46>
 8009efe:	2201      	movs	r2, #1
 8009f00:	920a      	str	r2, [sp, #40]	; 0x28
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f06:	785b      	ldrb	r3, [r3, #1]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d1c2      	bne.n	8009e92 <_strtod_l+0x4a>
 8009f0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f0e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f040 856e 	bne.w	800a9f4 <_strtod_l+0xbac>
 8009f18:	4652      	mov	r2, sl
 8009f1a:	465b      	mov	r3, fp
 8009f1c:	e7e1      	b.n	8009ee2 <_strtod_l+0x9a>
 8009f1e:	2200      	movs	r2, #0
 8009f20:	e7ee      	b.n	8009f00 <_strtod_l+0xb8>
 8009f22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009f24:	b13a      	cbz	r2, 8009f36 <_strtod_l+0xee>
 8009f26:	2135      	movs	r1, #53	; 0x35
 8009f28:	a81a      	add	r0, sp, #104	; 0x68
 8009f2a:	f002 ff02 	bl	800cd32 <__copybits>
 8009f2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f30:	4620      	mov	r0, r4
 8009f32:	f002 fac1 	bl	800c4b8 <_Bfree>
 8009f36:	3f01      	subs	r7, #1
 8009f38:	2f04      	cmp	r7, #4
 8009f3a:	d806      	bhi.n	8009f4a <_strtod_l+0x102>
 8009f3c:	e8df f007 	tbb	[pc, r7]
 8009f40:	1714030a 	.word	0x1714030a
 8009f44:	0a          	.byte	0x0a
 8009f45:	00          	.byte	0x00
 8009f46:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009f4a:	0728      	lsls	r0, r5, #28
 8009f4c:	d5c0      	bpl.n	8009ed0 <_strtod_l+0x88>
 8009f4e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009f52:	e7bd      	b.n	8009ed0 <_strtod_l+0x88>
 8009f54:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009f58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009f5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009f5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009f62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009f66:	e7f0      	b.n	8009f4a <_strtod_l+0x102>
 8009f68:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a0ec <_strtod_l+0x2a4>
 8009f6c:	e7ed      	b.n	8009f4a <_strtod_l+0x102>
 8009f6e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009f72:	f04f 3aff 	mov.w	sl, #4294967295
 8009f76:	e7e8      	b.n	8009f4a <_strtod_l+0x102>
 8009f78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f7e:	785b      	ldrb	r3, [r3, #1]
 8009f80:	2b30      	cmp	r3, #48	; 0x30
 8009f82:	d0f9      	beq.n	8009f78 <_strtod_l+0x130>
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d0a3      	beq.n	8009ed0 <_strtod_l+0x88>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	f04f 0900 	mov.w	r9, #0
 8009f8e:	9304      	str	r3, [sp, #16]
 8009f90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f92:	9308      	str	r3, [sp, #32]
 8009f94:	f8cd 901c 	str.w	r9, [sp, #28]
 8009f98:	464f      	mov	r7, r9
 8009f9a:	220a      	movs	r2, #10
 8009f9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009f9e:	7806      	ldrb	r6, [r0, #0]
 8009fa0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009fa4:	b2d9      	uxtb	r1, r3
 8009fa6:	2909      	cmp	r1, #9
 8009fa8:	d92a      	bls.n	800a000 <_strtod_l+0x1b8>
 8009faa:	9905      	ldr	r1, [sp, #20]
 8009fac:	462a      	mov	r2, r5
 8009fae:	f003 fbeb 	bl	800d788 <strncmp>
 8009fb2:	b398      	cbz	r0, 800a01c <_strtod_l+0x1d4>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	4632      	mov	r2, r6
 8009fb8:	463d      	mov	r5, r7
 8009fba:	9005      	str	r0, [sp, #20]
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2a65      	cmp	r2, #101	; 0x65
 8009fc0:	d001      	beq.n	8009fc6 <_strtod_l+0x17e>
 8009fc2:	2a45      	cmp	r2, #69	; 0x45
 8009fc4:	d118      	bne.n	8009ff8 <_strtod_l+0x1b0>
 8009fc6:	b91d      	cbnz	r5, 8009fd0 <_strtod_l+0x188>
 8009fc8:	9a04      	ldr	r2, [sp, #16]
 8009fca:	4302      	orrs	r2, r0
 8009fcc:	d09e      	beq.n	8009f0c <_strtod_l+0xc4>
 8009fce:	2500      	movs	r5, #0
 8009fd0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009fd4:	f108 0201 	add.w	r2, r8, #1
 8009fd8:	9217      	str	r2, [sp, #92]	; 0x5c
 8009fda:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009fde:	2a2b      	cmp	r2, #43	; 0x2b
 8009fe0:	d075      	beq.n	800a0ce <_strtod_l+0x286>
 8009fe2:	2a2d      	cmp	r2, #45	; 0x2d
 8009fe4:	d07b      	beq.n	800a0de <_strtod_l+0x296>
 8009fe6:	f04f 0c00 	mov.w	ip, #0
 8009fea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009fee:	2909      	cmp	r1, #9
 8009ff0:	f240 8082 	bls.w	800a0f8 <_strtod_l+0x2b0>
 8009ff4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009ff8:	2600      	movs	r6, #0
 8009ffa:	e09d      	b.n	800a138 <_strtod_l+0x2f0>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e7c4      	b.n	8009f8a <_strtod_l+0x142>
 800a000:	2f08      	cmp	r7, #8
 800a002:	bfd8      	it	le
 800a004:	9907      	ldrle	r1, [sp, #28]
 800a006:	f100 0001 	add.w	r0, r0, #1
 800a00a:	bfda      	itte	le
 800a00c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a010:	9307      	strle	r3, [sp, #28]
 800a012:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a016:	3701      	adds	r7, #1
 800a018:	9017      	str	r0, [sp, #92]	; 0x5c
 800a01a:	e7bf      	b.n	8009f9c <_strtod_l+0x154>
 800a01c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a01e:	195a      	adds	r2, r3, r5
 800a020:	9217      	str	r2, [sp, #92]	; 0x5c
 800a022:	5d5a      	ldrb	r2, [r3, r5]
 800a024:	2f00      	cmp	r7, #0
 800a026:	d037      	beq.n	800a098 <_strtod_l+0x250>
 800a028:	9005      	str	r0, [sp, #20]
 800a02a:	463d      	mov	r5, r7
 800a02c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a030:	2b09      	cmp	r3, #9
 800a032:	d912      	bls.n	800a05a <_strtod_l+0x212>
 800a034:	2301      	movs	r3, #1
 800a036:	e7c2      	b.n	8009fbe <_strtod_l+0x176>
 800a038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a03e:	785a      	ldrb	r2, [r3, #1]
 800a040:	3001      	adds	r0, #1
 800a042:	2a30      	cmp	r2, #48	; 0x30
 800a044:	d0f8      	beq.n	800a038 <_strtod_l+0x1f0>
 800a046:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a04a:	2b08      	cmp	r3, #8
 800a04c:	f200 84d9 	bhi.w	800aa02 <_strtod_l+0xbba>
 800a050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a052:	9005      	str	r0, [sp, #20]
 800a054:	2000      	movs	r0, #0
 800a056:	9308      	str	r3, [sp, #32]
 800a058:	4605      	mov	r5, r0
 800a05a:	3a30      	subs	r2, #48	; 0x30
 800a05c:	f100 0301 	add.w	r3, r0, #1
 800a060:	d014      	beq.n	800a08c <_strtod_l+0x244>
 800a062:	9905      	ldr	r1, [sp, #20]
 800a064:	4419      	add	r1, r3
 800a066:	9105      	str	r1, [sp, #20]
 800a068:	462b      	mov	r3, r5
 800a06a:	eb00 0e05 	add.w	lr, r0, r5
 800a06e:	210a      	movs	r1, #10
 800a070:	4573      	cmp	r3, lr
 800a072:	d113      	bne.n	800a09c <_strtod_l+0x254>
 800a074:	182b      	adds	r3, r5, r0
 800a076:	2b08      	cmp	r3, #8
 800a078:	f105 0501 	add.w	r5, r5, #1
 800a07c:	4405      	add	r5, r0
 800a07e:	dc1c      	bgt.n	800a0ba <_strtod_l+0x272>
 800a080:	9907      	ldr	r1, [sp, #28]
 800a082:	230a      	movs	r3, #10
 800a084:	fb03 2301 	mla	r3, r3, r1, r2
 800a088:	9307      	str	r3, [sp, #28]
 800a08a:	2300      	movs	r3, #0
 800a08c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a08e:	1c51      	adds	r1, r2, #1
 800a090:	9117      	str	r1, [sp, #92]	; 0x5c
 800a092:	7852      	ldrb	r2, [r2, #1]
 800a094:	4618      	mov	r0, r3
 800a096:	e7c9      	b.n	800a02c <_strtod_l+0x1e4>
 800a098:	4638      	mov	r0, r7
 800a09a:	e7d2      	b.n	800a042 <_strtod_l+0x1fa>
 800a09c:	2b08      	cmp	r3, #8
 800a09e:	dc04      	bgt.n	800a0aa <_strtod_l+0x262>
 800a0a0:	9e07      	ldr	r6, [sp, #28]
 800a0a2:	434e      	muls	r6, r1
 800a0a4:	9607      	str	r6, [sp, #28]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	e7e2      	b.n	800a070 <_strtod_l+0x228>
 800a0aa:	f103 0c01 	add.w	ip, r3, #1
 800a0ae:	f1bc 0f10 	cmp.w	ip, #16
 800a0b2:	bfd8      	it	le
 800a0b4:	fb01 f909 	mulle.w	r9, r1, r9
 800a0b8:	e7f5      	b.n	800a0a6 <_strtod_l+0x25e>
 800a0ba:	2d10      	cmp	r5, #16
 800a0bc:	bfdc      	itt	le
 800a0be:	230a      	movle	r3, #10
 800a0c0:	fb03 2909 	mlale	r9, r3, r9, r2
 800a0c4:	e7e1      	b.n	800a08a <_strtod_l+0x242>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	9305      	str	r3, [sp, #20]
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e77c      	b.n	8009fc8 <_strtod_l+0x180>
 800a0ce:	f04f 0c00 	mov.w	ip, #0
 800a0d2:	f108 0202 	add.w	r2, r8, #2
 800a0d6:	9217      	str	r2, [sp, #92]	; 0x5c
 800a0d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a0dc:	e785      	b.n	8009fea <_strtod_l+0x1a2>
 800a0de:	f04f 0c01 	mov.w	ip, #1
 800a0e2:	e7f6      	b.n	800a0d2 <_strtod_l+0x28a>
 800a0e4:	0800ea64 	.word	0x0800ea64
 800a0e8:	0800e7b8 	.word	0x0800e7b8
 800a0ec:	7ff00000 	.word	0x7ff00000
 800a0f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a0f2:	1c51      	adds	r1, r2, #1
 800a0f4:	9117      	str	r1, [sp, #92]	; 0x5c
 800a0f6:	7852      	ldrb	r2, [r2, #1]
 800a0f8:	2a30      	cmp	r2, #48	; 0x30
 800a0fa:	d0f9      	beq.n	800a0f0 <_strtod_l+0x2a8>
 800a0fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a100:	2908      	cmp	r1, #8
 800a102:	f63f af79 	bhi.w	8009ff8 <_strtod_l+0x1b0>
 800a106:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a10a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a10c:	9206      	str	r2, [sp, #24]
 800a10e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a110:	1c51      	adds	r1, r2, #1
 800a112:	9117      	str	r1, [sp, #92]	; 0x5c
 800a114:	7852      	ldrb	r2, [r2, #1]
 800a116:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a11a:	2e09      	cmp	r6, #9
 800a11c:	d937      	bls.n	800a18e <_strtod_l+0x346>
 800a11e:	9e06      	ldr	r6, [sp, #24]
 800a120:	1b89      	subs	r1, r1, r6
 800a122:	2908      	cmp	r1, #8
 800a124:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a128:	dc02      	bgt.n	800a130 <_strtod_l+0x2e8>
 800a12a:	4576      	cmp	r6, lr
 800a12c:	bfa8      	it	ge
 800a12e:	4676      	movge	r6, lr
 800a130:	f1bc 0f00 	cmp.w	ip, #0
 800a134:	d000      	beq.n	800a138 <_strtod_l+0x2f0>
 800a136:	4276      	negs	r6, r6
 800a138:	2d00      	cmp	r5, #0
 800a13a:	d14d      	bne.n	800a1d8 <_strtod_l+0x390>
 800a13c:	9904      	ldr	r1, [sp, #16]
 800a13e:	4301      	orrs	r1, r0
 800a140:	f47f aec6 	bne.w	8009ed0 <_strtod_l+0x88>
 800a144:	2b00      	cmp	r3, #0
 800a146:	f47f aee1 	bne.w	8009f0c <_strtod_l+0xc4>
 800a14a:	2a69      	cmp	r2, #105	; 0x69
 800a14c:	d027      	beq.n	800a19e <_strtod_l+0x356>
 800a14e:	dc24      	bgt.n	800a19a <_strtod_l+0x352>
 800a150:	2a49      	cmp	r2, #73	; 0x49
 800a152:	d024      	beq.n	800a19e <_strtod_l+0x356>
 800a154:	2a4e      	cmp	r2, #78	; 0x4e
 800a156:	f47f aed9 	bne.w	8009f0c <_strtod_l+0xc4>
 800a15a:	499f      	ldr	r1, [pc, #636]	; (800a3d8 <_strtod_l+0x590>)
 800a15c:	a817      	add	r0, sp, #92	; 0x5c
 800a15e:	f002 f875 	bl	800c24c <__match>
 800a162:	2800      	cmp	r0, #0
 800a164:	f43f aed2 	beq.w	8009f0c <_strtod_l+0xc4>
 800a168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	2b28      	cmp	r3, #40	; 0x28
 800a16e:	d12d      	bne.n	800a1cc <_strtod_l+0x384>
 800a170:	499a      	ldr	r1, [pc, #616]	; (800a3dc <_strtod_l+0x594>)
 800a172:	aa1a      	add	r2, sp, #104	; 0x68
 800a174:	a817      	add	r0, sp, #92	; 0x5c
 800a176:	f002 f87d 	bl	800c274 <__hexnan>
 800a17a:	2805      	cmp	r0, #5
 800a17c:	d126      	bne.n	800a1cc <_strtod_l+0x384>
 800a17e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a180:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a184:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a188:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a18c:	e6a0      	b.n	8009ed0 <_strtod_l+0x88>
 800a18e:	210a      	movs	r1, #10
 800a190:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a194:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a198:	e7b9      	b.n	800a10e <_strtod_l+0x2c6>
 800a19a:	2a6e      	cmp	r2, #110	; 0x6e
 800a19c:	e7db      	b.n	800a156 <_strtod_l+0x30e>
 800a19e:	4990      	ldr	r1, [pc, #576]	; (800a3e0 <_strtod_l+0x598>)
 800a1a0:	a817      	add	r0, sp, #92	; 0x5c
 800a1a2:	f002 f853 	bl	800c24c <__match>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	f43f aeb0 	beq.w	8009f0c <_strtod_l+0xc4>
 800a1ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1ae:	498d      	ldr	r1, [pc, #564]	; (800a3e4 <_strtod_l+0x59c>)
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	a817      	add	r0, sp, #92	; 0x5c
 800a1b4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a1b6:	f002 f849 	bl	800c24c <__match>
 800a1ba:	b910      	cbnz	r0, 800a1c2 <_strtod_l+0x37a>
 800a1bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1be:	3301      	adds	r3, #1
 800a1c0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a1c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a3f4 <_strtod_l+0x5ac>
 800a1c6:	f04f 0a00 	mov.w	sl, #0
 800a1ca:	e681      	b.n	8009ed0 <_strtod_l+0x88>
 800a1cc:	4886      	ldr	r0, [pc, #536]	; (800a3e8 <_strtod_l+0x5a0>)
 800a1ce:	f003 fa9b 	bl	800d708 <nan>
 800a1d2:	ec5b ab10 	vmov	sl, fp, d0
 800a1d6:	e67b      	b.n	8009ed0 <_strtod_l+0x88>
 800a1d8:	9b05      	ldr	r3, [sp, #20]
 800a1da:	9807      	ldr	r0, [sp, #28]
 800a1dc:	1af3      	subs	r3, r6, r3
 800a1de:	2f00      	cmp	r7, #0
 800a1e0:	bf08      	it	eq
 800a1e2:	462f      	moveq	r7, r5
 800a1e4:	2d10      	cmp	r5, #16
 800a1e6:	9306      	str	r3, [sp, #24]
 800a1e8:	46a8      	mov	r8, r5
 800a1ea:	bfa8      	it	ge
 800a1ec:	f04f 0810 	movge.w	r8, #16
 800a1f0:	f7f6 f998 	bl	8000524 <__aeabi_ui2d>
 800a1f4:	2d09      	cmp	r5, #9
 800a1f6:	4682      	mov	sl, r0
 800a1f8:	468b      	mov	fp, r1
 800a1fa:	dd13      	ble.n	800a224 <_strtod_l+0x3dc>
 800a1fc:	4b7b      	ldr	r3, [pc, #492]	; (800a3ec <_strtod_l+0x5a4>)
 800a1fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a202:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a206:	f7f6 fa07 	bl	8000618 <__aeabi_dmul>
 800a20a:	4682      	mov	sl, r0
 800a20c:	4648      	mov	r0, r9
 800a20e:	468b      	mov	fp, r1
 800a210:	f7f6 f988 	bl	8000524 <__aeabi_ui2d>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	4650      	mov	r0, sl
 800a21a:	4659      	mov	r1, fp
 800a21c:	f7f6 f846 	bl	80002ac <__adddf3>
 800a220:	4682      	mov	sl, r0
 800a222:	468b      	mov	fp, r1
 800a224:	2d0f      	cmp	r5, #15
 800a226:	dc38      	bgt.n	800a29a <_strtod_l+0x452>
 800a228:	9b06      	ldr	r3, [sp, #24]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f43f ae50 	beq.w	8009ed0 <_strtod_l+0x88>
 800a230:	dd24      	ble.n	800a27c <_strtod_l+0x434>
 800a232:	2b16      	cmp	r3, #22
 800a234:	dc0b      	bgt.n	800a24e <_strtod_l+0x406>
 800a236:	496d      	ldr	r1, [pc, #436]	; (800a3ec <_strtod_l+0x5a4>)
 800a238:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a23c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a240:	4652      	mov	r2, sl
 800a242:	465b      	mov	r3, fp
 800a244:	f7f6 f9e8 	bl	8000618 <__aeabi_dmul>
 800a248:	4682      	mov	sl, r0
 800a24a:	468b      	mov	fp, r1
 800a24c:	e640      	b.n	8009ed0 <_strtod_l+0x88>
 800a24e:	9a06      	ldr	r2, [sp, #24]
 800a250:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a254:	4293      	cmp	r3, r2
 800a256:	db20      	blt.n	800a29a <_strtod_l+0x452>
 800a258:	4c64      	ldr	r4, [pc, #400]	; (800a3ec <_strtod_l+0x5a4>)
 800a25a:	f1c5 050f 	rsb	r5, r5, #15
 800a25e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a262:	4652      	mov	r2, sl
 800a264:	465b      	mov	r3, fp
 800a266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a26a:	f7f6 f9d5 	bl	8000618 <__aeabi_dmul>
 800a26e:	9b06      	ldr	r3, [sp, #24]
 800a270:	1b5d      	subs	r5, r3, r5
 800a272:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a276:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a27a:	e7e3      	b.n	800a244 <_strtod_l+0x3fc>
 800a27c:	9b06      	ldr	r3, [sp, #24]
 800a27e:	3316      	adds	r3, #22
 800a280:	db0b      	blt.n	800a29a <_strtod_l+0x452>
 800a282:	9b05      	ldr	r3, [sp, #20]
 800a284:	1b9e      	subs	r6, r3, r6
 800a286:	4b59      	ldr	r3, [pc, #356]	; (800a3ec <_strtod_l+0x5a4>)
 800a288:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a28c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a290:	4650      	mov	r0, sl
 800a292:	4659      	mov	r1, fp
 800a294:	f7f6 faea 	bl	800086c <__aeabi_ddiv>
 800a298:	e7d6      	b.n	800a248 <_strtod_l+0x400>
 800a29a:	9b06      	ldr	r3, [sp, #24]
 800a29c:	eba5 0808 	sub.w	r8, r5, r8
 800a2a0:	4498      	add	r8, r3
 800a2a2:	f1b8 0f00 	cmp.w	r8, #0
 800a2a6:	dd74      	ble.n	800a392 <_strtod_l+0x54a>
 800a2a8:	f018 030f 	ands.w	r3, r8, #15
 800a2ac:	d00a      	beq.n	800a2c4 <_strtod_l+0x47c>
 800a2ae:	494f      	ldr	r1, [pc, #316]	; (800a3ec <_strtod_l+0x5a4>)
 800a2b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2b4:	4652      	mov	r2, sl
 800a2b6:	465b      	mov	r3, fp
 800a2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2bc:	f7f6 f9ac 	bl	8000618 <__aeabi_dmul>
 800a2c0:	4682      	mov	sl, r0
 800a2c2:	468b      	mov	fp, r1
 800a2c4:	f038 080f 	bics.w	r8, r8, #15
 800a2c8:	d04f      	beq.n	800a36a <_strtod_l+0x522>
 800a2ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a2ce:	dd22      	ble.n	800a316 <_strtod_l+0x4ce>
 800a2d0:	2500      	movs	r5, #0
 800a2d2:	462e      	mov	r6, r5
 800a2d4:	9507      	str	r5, [sp, #28]
 800a2d6:	9505      	str	r5, [sp, #20]
 800a2d8:	2322      	movs	r3, #34	; 0x22
 800a2da:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a3f4 <_strtod_l+0x5ac>
 800a2de:	6023      	str	r3, [r4, #0]
 800a2e0:	f04f 0a00 	mov.w	sl, #0
 800a2e4:	9b07      	ldr	r3, [sp, #28]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f43f adf2 	beq.w	8009ed0 <_strtod_l+0x88>
 800a2ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f002 f8e2 	bl	800c4b8 <_Bfree>
 800a2f4:	9905      	ldr	r1, [sp, #20]
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f002 f8de 	bl	800c4b8 <_Bfree>
 800a2fc:	4631      	mov	r1, r6
 800a2fe:	4620      	mov	r0, r4
 800a300:	f002 f8da 	bl	800c4b8 <_Bfree>
 800a304:	9907      	ldr	r1, [sp, #28]
 800a306:	4620      	mov	r0, r4
 800a308:	f002 f8d6 	bl	800c4b8 <_Bfree>
 800a30c:	4629      	mov	r1, r5
 800a30e:	4620      	mov	r0, r4
 800a310:	f002 f8d2 	bl	800c4b8 <_Bfree>
 800a314:	e5dc      	b.n	8009ed0 <_strtod_l+0x88>
 800a316:	4b36      	ldr	r3, [pc, #216]	; (800a3f0 <_strtod_l+0x5a8>)
 800a318:	9304      	str	r3, [sp, #16]
 800a31a:	2300      	movs	r3, #0
 800a31c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a320:	4650      	mov	r0, sl
 800a322:	4659      	mov	r1, fp
 800a324:	4699      	mov	r9, r3
 800a326:	f1b8 0f01 	cmp.w	r8, #1
 800a32a:	dc21      	bgt.n	800a370 <_strtod_l+0x528>
 800a32c:	b10b      	cbz	r3, 800a332 <_strtod_l+0x4ea>
 800a32e:	4682      	mov	sl, r0
 800a330:	468b      	mov	fp, r1
 800a332:	4b2f      	ldr	r3, [pc, #188]	; (800a3f0 <_strtod_l+0x5a8>)
 800a334:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a338:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a33c:	4652      	mov	r2, sl
 800a33e:	465b      	mov	r3, fp
 800a340:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a344:	f7f6 f968 	bl	8000618 <__aeabi_dmul>
 800a348:	4b2a      	ldr	r3, [pc, #168]	; (800a3f4 <_strtod_l+0x5ac>)
 800a34a:	460a      	mov	r2, r1
 800a34c:	400b      	ands	r3, r1
 800a34e:	492a      	ldr	r1, [pc, #168]	; (800a3f8 <_strtod_l+0x5b0>)
 800a350:	428b      	cmp	r3, r1
 800a352:	4682      	mov	sl, r0
 800a354:	d8bc      	bhi.n	800a2d0 <_strtod_l+0x488>
 800a356:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a35a:	428b      	cmp	r3, r1
 800a35c:	bf86      	itte	hi
 800a35e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a3fc <_strtod_l+0x5b4>
 800a362:	f04f 3aff 	movhi.w	sl, #4294967295
 800a366:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a36a:	2300      	movs	r3, #0
 800a36c:	9304      	str	r3, [sp, #16]
 800a36e:	e084      	b.n	800a47a <_strtod_l+0x632>
 800a370:	f018 0f01 	tst.w	r8, #1
 800a374:	d005      	beq.n	800a382 <_strtod_l+0x53a>
 800a376:	9b04      	ldr	r3, [sp, #16]
 800a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37c:	f7f6 f94c 	bl	8000618 <__aeabi_dmul>
 800a380:	2301      	movs	r3, #1
 800a382:	9a04      	ldr	r2, [sp, #16]
 800a384:	3208      	adds	r2, #8
 800a386:	f109 0901 	add.w	r9, r9, #1
 800a38a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a38e:	9204      	str	r2, [sp, #16]
 800a390:	e7c9      	b.n	800a326 <_strtod_l+0x4de>
 800a392:	d0ea      	beq.n	800a36a <_strtod_l+0x522>
 800a394:	f1c8 0800 	rsb	r8, r8, #0
 800a398:	f018 020f 	ands.w	r2, r8, #15
 800a39c:	d00a      	beq.n	800a3b4 <_strtod_l+0x56c>
 800a39e:	4b13      	ldr	r3, [pc, #76]	; (800a3ec <_strtod_l+0x5a4>)
 800a3a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3a4:	4650      	mov	r0, sl
 800a3a6:	4659      	mov	r1, fp
 800a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ac:	f7f6 fa5e 	bl	800086c <__aeabi_ddiv>
 800a3b0:	4682      	mov	sl, r0
 800a3b2:	468b      	mov	fp, r1
 800a3b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a3b8:	d0d7      	beq.n	800a36a <_strtod_l+0x522>
 800a3ba:	f1b8 0f1f 	cmp.w	r8, #31
 800a3be:	dd1f      	ble.n	800a400 <_strtod_l+0x5b8>
 800a3c0:	2500      	movs	r5, #0
 800a3c2:	462e      	mov	r6, r5
 800a3c4:	9507      	str	r5, [sp, #28]
 800a3c6:	9505      	str	r5, [sp, #20]
 800a3c8:	2322      	movs	r3, #34	; 0x22
 800a3ca:	f04f 0a00 	mov.w	sl, #0
 800a3ce:	f04f 0b00 	mov.w	fp, #0
 800a3d2:	6023      	str	r3, [r4, #0]
 800a3d4:	e786      	b.n	800a2e4 <_strtod_l+0x49c>
 800a3d6:	bf00      	nop
 800a3d8:	0800e0f5 	.word	0x0800e0f5
 800a3dc:	0800e7cc 	.word	0x0800e7cc
 800a3e0:	0800e0ed 	.word	0x0800e0ed
 800a3e4:	0800e90c 	.word	0x0800e90c
 800a3e8:	0800ec3b 	.word	0x0800ec3b
 800a3ec:	0800eb00 	.word	0x0800eb00
 800a3f0:	0800ead8 	.word	0x0800ead8
 800a3f4:	7ff00000 	.word	0x7ff00000
 800a3f8:	7ca00000 	.word	0x7ca00000
 800a3fc:	7fefffff 	.word	0x7fefffff
 800a400:	f018 0310 	ands.w	r3, r8, #16
 800a404:	bf18      	it	ne
 800a406:	236a      	movne	r3, #106	; 0x6a
 800a408:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a7b8 <_strtod_l+0x970>
 800a40c:	9304      	str	r3, [sp, #16]
 800a40e:	4650      	mov	r0, sl
 800a410:	4659      	mov	r1, fp
 800a412:	2300      	movs	r3, #0
 800a414:	f018 0f01 	tst.w	r8, #1
 800a418:	d004      	beq.n	800a424 <_strtod_l+0x5dc>
 800a41a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a41e:	f7f6 f8fb 	bl	8000618 <__aeabi_dmul>
 800a422:	2301      	movs	r3, #1
 800a424:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a428:	f109 0908 	add.w	r9, r9, #8
 800a42c:	d1f2      	bne.n	800a414 <_strtod_l+0x5cc>
 800a42e:	b10b      	cbz	r3, 800a434 <_strtod_l+0x5ec>
 800a430:	4682      	mov	sl, r0
 800a432:	468b      	mov	fp, r1
 800a434:	9b04      	ldr	r3, [sp, #16]
 800a436:	b1c3      	cbz	r3, 800a46a <_strtod_l+0x622>
 800a438:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a43c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a440:	2b00      	cmp	r3, #0
 800a442:	4659      	mov	r1, fp
 800a444:	dd11      	ble.n	800a46a <_strtod_l+0x622>
 800a446:	2b1f      	cmp	r3, #31
 800a448:	f340 8124 	ble.w	800a694 <_strtod_l+0x84c>
 800a44c:	2b34      	cmp	r3, #52	; 0x34
 800a44e:	bfde      	ittt	le
 800a450:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a454:	f04f 33ff 	movle.w	r3, #4294967295
 800a458:	fa03 f202 	lslle.w	r2, r3, r2
 800a45c:	f04f 0a00 	mov.w	sl, #0
 800a460:	bfcc      	ite	gt
 800a462:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a466:	ea02 0b01 	andle.w	fp, r2, r1
 800a46a:	2200      	movs	r2, #0
 800a46c:	2300      	movs	r3, #0
 800a46e:	4650      	mov	r0, sl
 800a470:	4659      	mov	r1, fp
 800a472:	f7f6 fb39 	bl	8000ae8 <__aeabi_dcmpeq>
 800a476:	2800      	cmp	r0, #0
 800a478:	d1a2      	bne.n	800a3c0 <_strtod_l+0x578>
 800a47a:	9b07      	ldr	r3, [sp, #28]
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	9908      	ldr	r1, [sp, #32]
 800a480:	462b      	mov	r3, r5
 800a482:	463a      	mov	r2, r7
 800a484:	4620      	mov	r0, r4
 800a486:	f002 f87f 	bl	800c588 <__s2b>
 800a48a:	9007      	str	r0, [sp, #28]
 800a48c:	2800      	cmp	r0, #0
 800a48e:	f43f af1f 	beq.w	800a2d0 <_strtod_l+0x488>
 800a492:	9b05      	ldr	r3, [sp, #20]
 800a494:	1b9e      	subs	r6, r3, r6
 800a496:	9b06      	ldr	r3, [sp, #24]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	bfb4      	ite	lt
 800a49c:	4633      	movlt	r3, r6
 800a49e:	2300      	movge	r3, #0
 800a4a0:	930c      	str	r3, [sp, #48]	; 0x30
 800a4a2:	9b06      	ldr	r3, [sp, #24]
 800a4a4:	2500      	movs	r5, #0
 800a4a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a4aa:	9312      	str	r3, [sp, #72]	; 0x48
 800a4ac:	462e      	mov	r6, r5
 800a4ae:	9b07      	ldr	r3, [sp, #28]
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	6859      	ldr	r1, [r3, #4]
 800a4b4:	f001 ffc0 	bl	800c438 <_Balloc>
 800a4b8:	9005      	str	r0, [sp, #20]
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	f43f af0c 	beq.w	800a2d8 <_strtod_l+0x490>
 800a4c0:	9b07      	ldr	r3, [sp, #28]
 800a4c2:	691a      	ldr	r2, [r3, #16]
 800a4c4:	3202      	adds	r2, #2
 800a4c6:	f103 010c 	add.w	r1, r3, #12
 800a4ca:	0092      	lsls	r2, r2, #2
 800a4cc:	300c      	adds	r0, #12
 800a4ce:	f001 ff99 	bl	800c404 <memcpy>
 800a4d2:	ec4b ab10 	vmov	d0, sl, fp
 800a4d6:	aa1a      	add	r2, sp, #104	; 0x68
 800a4d8:	a919      	add	r1, sp, #100	; 0x64
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f002 fb9a 	bl	800cc14 <__d2b>
 800a4e0:	ec4b ab18 	vmov	d8, sl, fp
 800a4e4:	9018      	str	r0, [sp, #96]	; 0x60
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	f43f aef6 	beq.w	800a2d8 <_strtod_l+0x490>
 800a4ec:	2101      	movs	r1, #1
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f002 f8e4 	bl	800c6bc <__i2b>
 800a4f4:	4606      	mov	r6, r0
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	f43f aeee 	beq.w	800a2d8 <_strtod_l+0x490>
 800a4fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a4fe:	9904      	ldr	r1, [sp, #16]
 800a500:	2b00      	cmp	r3, #0
 800a502:	bfab      	itete	ge
 800a504:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a506:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a508:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a50a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a50e:	bfac      	ite	ge
 800a510:	eb03 0902 	addge.w	r9, r3, r2
 800a514:	1ad7      	sublt	r7, r2, r3
 800a516:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a518:	eba3 0801 	sub.w	r8, r3, r1
 800a51c:	4490      	add	r8, r2
 800a51e:	4ba1      	ldr	r3, [pc, #644]	; (800a7a4 <_strtod_l+0x95c>)
 800a520:	f108 38ff 	add.w	r8, r8, #4294967295
 800a524:	4598      	cmp	r8, r3
 800a526:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a52a:	f280 80c7 	bge.w	800a6bc <_strtod_l+0x874>
 800a52e:	eba3 0308 	sub.w	r3, r3, r8
 800a532:	2b1f      	cmp	r3, #31
 800a534:	eba2 0203 	sub.w	r2, r2, r3
 800a538:	f04f 0101 	mov.w	r1, #1
 800a53c:	f300 80b1 	bgt.w	800a6a2 <_strtod_l+0x85a>
 800a540:	fa01 f303 	lsl.w	r3, r1, r3
 800a544:	930d      	str	r3, [sp, #52]	; 0x34
 800a546:	2300      	movs	r3, #0
 800a548:	9308      	str	r3, [sp, #32]
 800a54a:	eb09 0802 	add.w	r8, r9, r2
 800a54e:	9b04      	ldr	r3, [sp, #16]
 800a550:	45c1      	cmp	r9, r8
 800a552:	4417      	add	r7, r2
 800a554:	441f      	add	r7, r3
 800a556:	464b      	mov	r3, r9
 800a558:	bfa8      	it	ge
 800a55a:	4643      	movge	r3, r8
 800a55c:	42bb      	cmp	r3, r7
 800a55e:	bfa8      	it	ge
 800a560:	463b      	movge	r3, r7
 800a562:	2b00      	cmp	r3, #0
 800a564:	bfc2      	ittt	gt
 800a566:	eba8 0803 	subgt.w	r8, r8, r3
 800a56a:	1aff      	subgt	r7, r7, r3
 800a56c:	eba9 0903 	subgt.w	r9, r9, r3
 800a570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a572:	2b00      	cmp	r3, #0
 800a574:	dd17      	ble.n	800a5a6 <_strtod_l+0x75e>
 800a576:	4631      	mov	r1, r6
 800a578:	461a      	mov	r2, r3
 800a57a:	4620      	mov	r0, r4
 800a57c:	f002 f95e 	bl	800c83c <__pow5mult>
 800a580:	4606      	mov	r6, r0
 800a582:	2800      	cmp	r0, #0
 800a584:	f43f aea8 	beq.w	800a2d8 <_strtod_l+0x490>
 800a588:	4601      	mov	r1, r0
 800a58a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a58c:	4620      	mov	r0, r4
 800a58e:	f002 f8ab 	bl	800c6e8 <__multiply>
 800a592:	900b      	str	r0, [sp, #44]	; 0x2c
 800a594:	2800      	cmp	r0, #0
 800a596:	f43f ae9f 	beq.w	800a2d8 <_strtod_l+0x490>
 800a59a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a59c:	4620      	mov	r0, r4
 800a59e:	f001 ff8b 	bl	800c4b8 <_Bfree>
 800a5a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5a4:	9318      	str	r3, [sp, #96]	; 0x60
 800a5a6:	f1b8 0f00 	cmp.w	r8, #0
 800a5aa:	f300 808c 	bgt.w	800a6c6 <_strtod_l+0x87e>
 800a5ae:	9b06      	ldr	r3, [sp, #24]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	dd08      	ble.n	800a5c6 <_strtod_l+0x77e>
 800a5b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5b6:	9905      	ldr	r1, [sp, #20]
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f002 f93f 	bl	800c83c <__pow5mult>
 800a5be:	9005      	str	r0, [sp, #20]
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	f43f ae89 	beq.w	800a2d8 <_strtod_l+0x490>
 800a5c6:	2f00      	cmp	r7, #0
 800a5c8:	dd08      	ble.n	800a5dc <_strtod_l+0x794>
 800a5ca:	9905      	ldr	r1, [sp, #20]
 800a5cc:	463a      	mov	r2, r7
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f002 f98e 	bl	800c8f0 <__lshift>
 800a5d4:	9005      	str	r0, [sp, #20]
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	f43f ae7e 	beq.w	800a2d8 <_strtod_l+0x490>
 800a5dc:	f1b9 0f00 	cmp.w	r9, #0
 800a5e0:	dd08      	ble.n	800a5f4 <_strtod_l+0x7ac>
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	464a      	mov	r2, r9
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f002 f982 	bl	800c8f0 <__lshift>
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	f43f ae72 	beq.w	800a2d8 <_strtod_l+0x490>
 800a5f4:	9a05      	ldr	r2, [sp, #20]
 800a5f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f002 fa05 	bl	800ca08 <__mdiff>
 800a5fe:	4605      	mov	r5, r0
 800a600:	2800      	cmp	r0, #0
 800a602:	f43f ae69 	beq.w	800a2d8 <_strtod_l+0x490>
 800a606:	68c3      	ldr	r3, [r0, #12]
 800a608:	930b      	str	r3, [sp, #44]	; 0x2c
 800a60a:	2300      	movs	r3, #0
 800a60c:	60c3      	str	r3, [r0, #12]
 800a60e:	4631      	mov	r1, r6
 800a610:	f002 f9de 	bl	800c9d0 <__mcmp>
 800a614:	2800      	cmp	r0, #0
 800a616:	da60      	bge.n	800a6da <_strtod_l+0x892>
 800a618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a61a:	ea53 030a 	orrs.w	r3, r3, sl
 800a61e:	f040 8082 	bne.w	800a726 <_strtod_l+0x8de>
 800a622:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a626:	2b00      	cmp	r3, #0
 800a628:	d17d      	bne.n	800a726 <_strtod_l+0x8de>
 800a62a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a62e:	0d1b      	lsrs	r3, r3, #20
 800a630:	051b      	lsls	r3, r3, #20
 800a632:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a636:	d976      	bls.n	800a726 <_strtod_l+0x8de>
 800a638:	696b      	ldr	r3, [r5, #20]
 800a63a:	b913      	cbnz	r3, 800a642 <_strtod_l+0x7fa>
 800a63c:	692b      	ldr	r3, [r5, #16]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	dd71      	ble.n	800a726 <_strtod_l+0x8de>
 800a642:	4629      	mov	r1, r5
 800a644:	2201      	movs	r2, #1
 800a646:	4620      	mov	r0, r4
 800a648:	f002 f952 	bl	800c8f0 <__lshift>
 800a64c:	4631      	mov	r1, r6
 800a64e:	4605      	mov	r5, r0
 800a650:	f002 f9be 	bl	800c9d0 <__mcmp>
 800a654:	2800      	cmp	r0, #0
 800a656:	dd66      	ble.n	800a726 <_strtod_l+0x8de>
 800a658:	9904      	ldr	r1, [sp, #16]
 800a65a:	4a53      	ldr	r2, [pc, #332]	; (800a7a8 <_strtod_l+0x960>)
 800a65c:	465b      	mov	r3, fp
 800a65e:	2900      	cmp	r1, #0
 800a660:	f000 8081 	beq.w	800a766 <_strtod_l+0x91e>
 800a664:	ea02 010b 	and.w	r1, r2, fp
 800a668:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a66c:	dc7b      	bgt.n	800a766 <_strtod_l+0x91e>
 800a66e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a672:	f77f aea9 	ble.w	800a3c8 <_strtod_l+0x580>
 800a676:	4b4d      	ldr	r3, [pc, #308]	; (800a7ac <_strtod_l+0x964>)
 800a678:	4650      	mov	r0, sl
 800a67a:	4659      	mov	r1, fp
 800a67c:	2200      	movs	r2, #0
 800a67e:	f7f5 ffcb 	bl	8000618 <__aeabi_dmul>
 800a682:	460b      	mov	r3, r1
 800a684:	4303      	orrs	r3, r0
 800a686:	bf08      	it	eq
 800a688:	2322      	moveq	r3, #34	; 0x22
 800a68a:	4682      	mov	sl, r0
 800a68c:	468b      	mov	fp, r1
 800a68e:	bf08      	it	eq
 800a690:	6023      	streq	r3, [r4, #0]
 800a692:	e62b      	b.n	800a2ec <_strtod_l+0x4a4>
 800a694:	f04f 32ff 	mov.w	r2, #4294967295
 800a698:	fa02 f303 	lsl.w	r3, r2, r3
 800a69c:	ea03 0a0a 	and.w	sl, r3, sl
 800a6a0:	e6e3      	b.n	800a46a <_strtod_l+0x622>
 800a6a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a6a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a6aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a6ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a6b2:	fa01 f308 	lsl.w	r3, r1, r8
 800a6b6:	9308      	str	r3, [sp, #32]
 800a6b8:	910d      	str	r1, [sp, #52]	; 0x34
 800a6ba:	e746      	b.n	800a54a <_strtod_l+0x702>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9308      	str	r3, [sp, #32]
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	930d      	str	r3, [sp, #52]	; 0x34
 800a6c4:	e741      	b.n	800a54a <_strtod_l+0x702>
 800a6c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a6c8:	4642      	mov	r2, r8
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f002 f910 	bl	800c8f0 <__lshift>
 800a6d0:	9018      	str	r0, [sp, #96]	; 0x60
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	f47f af6b 	bne.w	800a5ae <_strtod_l+0x766>
 800a6d8:	e5fe      	b.n	800a2d8 <_strtod_l+0x490>
 800a6da:	465f      	mov	r7, fp
 800a6dc:	d16e      	bne.n	800a7bc <_strtod_l+0x974>
 800a6de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6e4:	b342      	cbz	r2, 800a738 <_strtod_l+0x8f0>
 800a6e6:	4a32      	ldr	r2, [pc, #200]	; (800a7b0 <_strtod_l+0x968>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d128      	bne.n	800a73e <_strtod_l+0x8f6>
 800a6ec:	9b04      	ldr	r3, [sp, #16]
 800a6ee:	4651      	mov	r1, sl
 800a6f0:	b1eb      	cbz	r3, 800a72e <_strtod_l+0x8e6>
 800a6f2:	4b2d      	ldr	r3, [pc, #180]	; (800a7a8 <_strtod_l+0x960>)
 800a6f4:	403b      	ands	r3, r7
 800a6f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a6fe:	d819      	bhi.n	800a734 <_strtod_l+0x8ec>
 800a700:	0d1b      	lsrs	r3, r3, #20
 800a702:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a706:	fa02 f303 	lsl.w	r3, r2, r3
 800a70a:	4299      	cmp	r1, r3
 800a70c:	d117      	bne.n	800a73e <_strtod_l+0x8f6>
 800a70e:	4b29      	ldr	r3, [pc, #164]	; (800a7b4 <_strtod_l+0x96c>)
 800a710:	429f      	cmp	r7, r3
 800a712:	d102      	bne.n	800a71a <_strtod_l+0x8d2>
 800a714:	3101      	adds	r1, #1
 800a716:	f43f addf 	beq.w	800a2d8 <_strtod_l+0x490>
 800a71a:	4b23      	ldr	r3, [pc, #140]	; (800a7a8 <_strtod_l+0x960>)
 800a71c:	403b      	ands	r3, r7
 800a71e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a722:	f04f 0a00 	mov.w	sl, #0
 800a726:	9b04      	ldr	r3, [sp, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1a4      	bne.n	800a676 <_strtod_l+0x82e>
 800a72c:	e5de      	b.n	800a2ec <_strtod_l+0x4a4>
 800a72e:	f04f 33ff 	mov.w	r3, #4294967295
 800a732:	e7ea      	b.n	800a70a <_strtod_l+0x8c2>
 800a734:	4613      	mov	r3, r2
 800a736:	e7e8      	b.n	800a70a <_strtod_l+0x8c2>
 800a738:	ea53 030a 	orrs.w	r3, r3, sl
 800a73c:	d08c      	beq.n	800a658 <_strtod_l+0x810>
 800a73e:	9b08      	ldr	r3, [sp, #32]
 800a740:	b1db      	cbz	r3, 800a77a <_strtod_l+0x932>
 800a742:	423b      	tst	r3, r7
 800a744:	d0ef      	beq.n	800a726 <_strtod_l+0x8de>
 800a746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a748:	9a04      	ldr	r2, [sp, #16]
 800a74a:	4650      	mov	r0, sl
 800a74c:	4659      	mov	r1, fp
 800a74e:	b1c3      	cbz	r3, 800a782 <_strtod_l+0x93a>
 800a750:	f7ff fb5c 	bl	8009e0c <sulp>
 800a754:	4602      	mov	r2, r0
 800a756:	460b      	mov	r3, r1
 800a758:	ec51 0b18 	vmov	r0, r1, d8
 800a75c:	f7f5 fda6 	bl	80002ac <__adddf3>
 800a760:	4682      	mov	sl, r0
 800a762:	468b      	mov	fp, r1
 800a764:	e7df      	b.n	800a726 <_strtod_l+0x8de>
 800a766:	4013      	ands	r3, r2
 800a768:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a76c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a770:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a774:	f04f 3aff 	mov.w	sl, #4294967295
 800a778:	e7d5      	b.n	800a726 <_strtod_l+0x8de>
 800a77a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a77c:	ea13 0f0a 	tst.w	r3, sl
 800a780:	e7e0      	b.n	800a744 <_strtod_l+0x8fc>
 800a782:	f7ff fb43 	bl	8009e0c <sulp>
 800a786:	4602      	mov	r2, r0
 800a788:	460b      	mov	r3, r1
 800a78a:	ec51 0b18 	vmov	r0, r1, d8
 800a78e:	f7f5 fd8b 	bl	80002a8 <__aeabi_dsub>
 800a792:	2200      	movs	r2, #0
 800a794:	2300      	movs	r3, #0
 800a796:	4682      	mov	sl, r0
 800a798:	468b      	mov	fp, r1
 800a79a:	f7f6 f9a5 	bl	8000ae8 <__aeabi_dcmpeq>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d0c1      	beq.n	800a726 <_strtod_l+0x8de>
 800a7a2:	e611      	b.n	800a3c8 <_strtod_l+0x580>
 800a7a4:	fffffc02 	.word	0xfffffc02
 800a7a8:	7ff00000 	.word	0x7ff00000
 800a7ac:	39500000 	.word	0x39500000
 800a7b0:	000fffff 	.word	0x000fffff
 800a7b4:	7fefffff 	.word	0x7fefffff
 800a7b8:	0800e7e0 	.word	0x0800e7e0
 800a7bc:	4631      	mov	r1, r6
 800a7be:	4628      	mov	r0, r5
 800a7c0:	f002 fa84 	bl	800cccc <__ratio>
 800a7c4:	ec59 8b10 	vmov	r8, r9, d0
 800a7c8:	ee10 0a10 	vmov	r0, s0
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	f7f6 f99c 	bl	8000b10 <__aeabi_dcmple>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d07a      	beq.n	800a8d2 <_strtod_l+0xa8a>
 800a7dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d04a      	beq.n	800a878 <_strtod_l+0xa30>
 800a7e2:	4b95      	ldr	r3, [pc, #596]	; (800aa38 <_strtod_l+0xbf0>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a7ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800aa38 <_strtod_l+0xbf0>
 800a7ee:	f04f 0800 	mov.w	r8, #0
 800a7f2:	4b92      	ldr	r3, [pc, #584]	; (800aa3c <_strtod_l+0xbf4>)
 800a7f4:	403b      	ands	r3, r7
 800a7f6:	930d      	str	r3, [sp, #52]	; 0x34
 800a7f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7fa:	4b91      	ldr	r3, [pc, #580]	; (800aa40 <_strtod_l+0xbf8>)
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	f040 80b0 	bne.w	800a962 <_strtod_l+0xb1a>
 800a802:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a806:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a80a:	ec4b ab10 	vmov	d0, sl, fp
 800a80e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a812:	f002 f983 	bl	800cb1c <__ulp>
 800a816:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a81a:	ec53 2b10 	vmov	r2, r3, d0
 800a81e:	f7f5 fefb 	bl	8000618 <__aeabi_dmul>
 800a822:	4652      	mov	r2, sl
 800a824:	465b      	mov	r3, fp
 800a826:	f7f5 fd41 	bl	80002ac <__adddf3>
 800a82a:	460b      	mov	r3, r1
 800a82c:	4983      	ldr	r1, [pc, #524]	; (800aa3c <_strtod_l+0xbf4>)
 800a82e:	4a85      	ldr	r2, [pc, #532]	; (800aa44 <_strtod_l+0xbfc>)
 800a830:	4019      	ands	r1, r3
 800a832:	4291      	cmp	r1, r2
 800a834:	4682      	mov	sl, r0
 800a836:	d960      	bls.n	800a8fa <_strtod_l+0xab2>
 800a838:	ee18 3a90 	vmov	r3, s17
 800a83c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a840:	4293      	cmp	r3, r2
 800a842:	d104      	bne.n	800a84e <_strtod_l+0xa06>
 800a844:	ee18 3a10 	vmov	r3, s16
 800a848:	3301      	adds	r3, #1
 800a84a:	f43f ad45 	beq.w	800a2d8 <_strtod_l+0x490>
 800a84e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800aa50 <_strtod_l+0xc08>
 800a852:	f04f 3aff 	mov.w	sl, #4294967295
 800a856:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a858:	4620      	mov	r0, r4
 800a85a:	f001 fe2d 	bl	800c4b8 <_Bfree>
 800a85e:	9905      	ldr	r1, [sp, #20]
 800a860:	4620      	mov	r0, r4
 800a862:	f001 fe29 	bl	800c4b8 <_Bfree>
 800a866:	4631      	mov	r1, r6
 800a868:	4620      	mov	r0, r4
 800a86a:	f001 fe25 	bl	800c4b8 <_Bfree>
 800a86e:	4629      	mov	r1, r5
 800a870:	4620      	mov	r0, r4
 800a872:	f001 fe21 	bl	800c4b8 <_Bfree>
 800a876:	e61a      	b.n	800a4ae <_strtod_l+0x666>
 800a878:	f1ba 0f00 	cmp.w	sl, #0
 800a87c:	d11b      	bne.n	800a8b6 <_strtod_l+0xa6e>
 800a87e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a882:	b9f3      	cbnz	r3, 800a8c2 <_strtod_l+0xa7a>
 800a884:	4b6c      	ldr	r3, [pc, #432]	; (800aa38 <_strtod_l+0xbf0>)
 800a886:	2200      	movs	r2, #0
 800a888:	4640      	mov	r0, r8
 800a88a:	4649      	mov	r1, r9
 800a88c:	f7f6 f936 	bl	8000afc <__aeabi_dcmplt>
 800a890:	b9d0      	cbnz	r0, 800a8c8 <_strtod_l+0xa80>
 800a892:	4640      	mov	r0, r8
 800a894:	4649      	mov	r1, r9
 800a896:	4b6c      	ldr	r3, [pc, #432]	; (800aa48 <_strtod_l+0xc00>)
 800a898:	2200      	movs	r2, #0
 800a89a:	f7f5 febd 	bl	8000618 <__aeabi_dmul>
 800a89e:	4680      	mov	r8, r0
 800a8a0:	4689      	mov	r9, r1
 800a8a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a8a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a8aa:	9315      	str	r3, [sp, #84]	; 0x54
 800a8ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a8b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a8b4:	e79d      	b.n	800a7f2 <_strtod_l+0x9aa>
 800a8b6:	f1ba 0f01 	cmp.w	sl, #1
 800a8ba:	d102      	bne.n	800a8c2 <_strtod_l+0xa7a>
 800a8bc:	2f00      	cmp	r7, #0
 800a8be:	f43f ad83 	beq.w	800a3c8 <_strtod_l+0x580>
 800a8c2:	4b62      	ldr	r3, [pc, #392]	; (800aa4c <_strtod_l+0xc04>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	e78e      	b.n	800a7e6 <_strtod_l+0x99e>
 800a8c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800aa48 <_strtod_l+0xc00>
 800a8cc:	f04f 0800 	mov.w	r8, #0
 800a8d0:	e7e7      	b.n	800a8a2 <_strtod_l+0xa5a>
 800a8d2:	4b5d      	ldr	r3, [pc, #372]	; (800aa48 <_strtod_l+0xc00>)
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f7f5 fe9d 	bl	8000618 <__aeabi_dmul>
 800a8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8e0:	4680      	mov	r8, r0
 800a8e2:	4689      	mov	r9, r1
 800a8e4:	b933      	cbnz	r3, 800a8f4 <_strtod_l+0xaac>
 800a8e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8ea:	900e      	str	r0, [sp, #56]	; 0x38
 800a8ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a8f2:	e7dd      	b.n	800a8b0 <_strtod_l+0xa68>
 800a8f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a8f8:	e7f9      	b.n	800a8ee <_strtod_l+0xaa6>
 800a8fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a8fe:	9b04      	ldr	r3, [sp, #16]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d1a8      	bne.n	800a856 <_strtod_l+0xa0e>
 800a904:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a908:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a90a:	0d1b      	lsrs	r3, r3, #20
 800a90c:	051b      	lsls	r3, r3, #20
 800a90e:	429a      	cmp	r2, r3
 800a910:	d1a1      	bne.n	800a856 <_strtod_l+0xa0e>
 800a912:	4640      	mov	r0, r8
 800a914:	4649      	mov	r1, r9
 800a916:	f7f6 f9df 	bl	8000cd8 <__aeabi_d2lz>
 800a91a:	f7f5 fe4f 	bl	80005bc <__aeabi_l2d>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	4640      	mov	r0, r8
 800a924:	4649      	mov	r1, r9
 800a926:	f7f5 fcbf 	bl	80002a8 <__aeabi_dsub>
 800a92a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a92c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a930:	ea43 030a 	orr.w	r3, r3, sl
 800a934:	4313      	orrs	r3, r2
 800a936:	4680      	mov	r8, r0
 800a938:	4689      	mov	r9, r1
 800a93a:	d055      	beq.n	800a9e8 <_strtod_l+0xba0>
 800a93c:	a336      	add	r3, pc, #216	; (adr r3, 800aa18 <_strtod_l+0xbd0>)
 800a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a942:	f7f6 f8db 	bl	8000afc <__aeabi_dcmplt>
 800a946:	2800      	cmp	r0, #0
 800a948:	f47f acd0 	bne.w	800a2ec <_strtod_l+0x4a4>
 800a94c:	a334      	add	r3, pc, #208	; (adr r3, 800aa20 <_strtod_l+0xbd8>)
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	4640      	mov	r0, r8
 800a954:	4649      	mov	r1, r9
 800a956:	f7f6 f8ef 	bl	8000b38 <__aeabi_dcmpgt>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	f43f af7b 	beq.w	800a856 <_strtod_l+0xa0e>
 800a960:	e4c4      	b.n	800a2ec <_strtod_l+0x4a4>
 800a962:	9b04      	ldr	r3, [sp, #16]
 800a964:	b333      	cbz	r3, 800a9b4 <_strtod_l+0xb6c>
 800a966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a968:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a96c:	d822      	bhi.n	800a9b4 <_strtod_l+0xb6c>
 800a96e:	a32e      	add	r3, pc, #184	; (adr r3, 800aa28 <_strtod_l+0xbe0>)
 800a970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a974:	4640      	mov	r0, r8
 800a976:	4649      	mov	r1, r9
 800a978:	f7f6 f8ca 	bl	8000b10 <__aeabi_dcmple>
 800a97c:	b1a0      	cbz	r0, 800a9a8 <_strtod_l+0xb60>
 800a97e:	4649      	mov	r1, r9
 800a980:	4640      	mov	r0, r8
 800a982:	f7f6 f921 	bl	8000bc8 <__aeabi_d2uiz>
 800a986:	2801      	cmp	r0, #1
 800a988:	bf38      	it	cc
 800a98a:	2001      	movcc	r0, #1
 800a98c:	f7f5 fdca 	bl	8000524 <__aeabi_ui2d>
 800a990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a992:	4680      	mov	r8, r0
 800a994:	4689      	mov	r9, r1
 800a996:	bb23      	cbnz	r3, 800a9e2 <_strtod_l+0xb9a>
 800a998:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a99c:	9010      	str	r0, [sp, #64]	; 0x40
 800a99e:	9311      	str	r3, [sp, #68]	; 0x44
 800a9a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a9a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a9b0:	1a9b      	subs	r3, r3, r2
 800a9b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a9b8:	eeb0 0a48 	vmov.f32	s0, s16
 800a9bc:	eef0 0a68 	vmov.f32	s1, s17
 800a9c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a9c4:	f002 f8aa 	bl	800cb1c <__ulp>
 800a9c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a9cc:	ec53 2b10 	vmov	r2, r3, d0
 800a9d0:	f7f5 fe22 	bl	8000618 <__aeabi_dmul>
 800a9d4:	ec53 2b18 	vmov	r2, r3, d8
 800a9d8:	f7f5 fc68 	bl	80002ac <__adddf3>
 800a9dc:	4682      	mov	sl, r0
 800a9de:	468b      	mov	fp, r1
 800a9e0:	e78d      	b.n	800a8fe <_strtod_l+0xab6>
 800a9e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a9e6:	e7db      	b.n	800a9a0 <_strtod_l+0xb58>
 800a9e8:	a311      	add	r3, pc, #68	; (adr r3, 800aa30 <_strtod_l+0xbe8>)
 800a9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ee:	f7f6 f885 	bl	8000afc <__aeabi_dcmplt>
 800a9f2:	e7b2      	b.n	800a95a <_strtod_l+0xb12>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a9f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a9fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9fc:	6013      	str	r3, [r2, #0]
 800a9fe:	f7ff ba6b 	b.w	8009ed8 <_strtod_l+0x90>
 800aa02:	2a65      	cmp	r2, #101	; 0x65
 800aa04:	f43f ab5f 	beq.w	800a0c6 <_strtod_l+0x27e>
 800aa08:	2a45      	cmp	r2, #69	; 0x45
 800aa0a:	f43f ab5c 	beq.w	800a0c6 <_strtod_l+0x27e>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	f7ff bb94 	b.w	800a13c <_strtod_l+0x2f4>
 800aa14:	f3af 8000 	nop.w
 800aa18:	94a03595 	.word	0x94a03595
 800aa1c:	3fdfffff 	.word	0x3fdfffff
 800aa20:	35afe535 	.word	0x35afe535
 800aa24:	3fe00000 	.word	0x3fe00000
 800aa28:	ffc00000 	.word	0xffc00000
 800aa2c:	41dfffff 	.word	0x41dfffff
 800aa30:	94a03595 	.word	0x94a03595
 800aa34:	3fcfffff 	.word	0x3fcfffff
 800aa38:	3ff00000 	.word	0x3ff00000
 800aa3c:	7ff00000 	.word	0x7ff00000
 800aa40:	7fe00000 	.word	0x7fe00000
 800aa44:	7c9fffff 	.word	0x7c9fffff
 800aa48:	3fe00000 	.word	0x3fe00000
 800aa4c:	bff00000 	.word	0xbff00000
 800aa50:	7fefffff 	.word	0x7fefffff

0800aa54 <_strtod_r>:
 800aa54:	4b01      	ldr	r3, [pc, #4]	; (800aa5c <_strtod_r+0x8>)
 800aa56:	f7ff b9f7 	b.w	8009e48 <_strtod_l>
 800aa5a:	bf00      	nop
 800aa5c:	200000a4 	.word	0x200000a4

0800aa60 <_strtol_l.constprop.0>:
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa66:	d001      	beq.n	800aa6c <_strtol_l.constprop.0+0xc>
 800aa68:	2b24      	cmp	r3, #36	; 0x24
 800aa6a:	d906      	bls.n	800aa7a <_strtol_l.constprop.0+0x1a>
 800aa6c:	f7fd fec6 	bl	80087fc <__errno>
 800aa70:	2316      	movs	r3, #22
 800aa72:	6003      	str	r3, [r0, #0]
 800aa74:	2000      	movs	r0, #0
 800aa76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ab60 <_strtol_l.constprop.0+0x100>
 800aa7e:	460d      	mov	r5, r1
 800aa80:	462e      	mov	r6, r5
 800aa82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa86:	f814 700c 	ldrb.w	r7, [r4, ip]
 800aa8a:	f017 0708 	ands.w	r7, r7, #8
 800aa8e:	d1f7      	bne.n	800aa80 <_strtol_l.constprop.0+0x20>
 800aa90:	2c2d      	cmp	r4, #45	; 0x2d
 800aa92:	d132      	bne.n	800aafa <_strtol_l.constprop.0+0x9a>
 800aa94:	782c      	ldrb	r4, [r5, #0]
 800aa96:	2701      	movs	r7, #1
 800aa98:	1cb5      	adds	r5, r6, #2
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d05b      	beq.n	800ab56 <_strtol_l.constprop.0+0xf6>
 800aa9e:	2b10      	cmp	r3, #16
 800aaa0:	d109      	bne.n	800aab6 <_strtol_l.constprop.0+0x56>
 800aaa2:	2c30      	cmp	r4, #48	; 0x30
 800aaa4:	d107      	bne.n	800aab6 <_strtol_l.constprop.0+0x56>
 800aaa6:	782c      	ldrb	r4, [r5, #0]
 800aaa8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800aaac:	2c58      	cmp	r4, #88	; 0x58
 800aaae:	d14d      	bne.n	800ab4c <_strtol_l.constprop.0+0xec>
 800aab0:	786c      	ldrb	r4, [r5, #1]
 800aab2:	2310      	movs	r3, #16
 800aab4:	3502      	adds	r5, #2
 800aab6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800aaba:	f108 38ff 	add.w	r8, r8, #4294967295
 800aabe:	f04f 0c00 	mov.w	ip, #0
 800aac2:	fbb8 f9f3 	udiv	r9, r8, r3
 800aac6:	4666      	mov	r6, ip
 800aac8:	fb03 8a19 	mls	sl, r3, r9, r8
 800aacc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800aad0:	f1be 0f09 	cmp.w	lr, #9
 800aad4:	d816      	bhi.n	800ab04 <_strtol_l.constprop.0+0xa4>
 800aad6:	4674      	mov	r4, lr
 800aad8:	42a3      	cmp	r3, r4
 800aada:	dd24      	ble.n	800ab26 <_strtol_l.constprop.0+0xc6>
 800aadc:	f1bc 0f00 	cmp.w	ip, #0
 800aae0:	db1e      	blt.n	800ab20 <_strtol_l.constprop.0+0xc0>
 800aae2:	45b1      	cmp	r9, r6
 800aae4:	d31c      	bcc.n	800ab20 <_strtol_l.constprop.0+0xc0>
 800aae6:	d101      	bne.n	800aaec <_strtol_l.constprop.0+0x8c>
 800aae8:	45a2      	cmp	sl, r4
 800aaea:	db19      	blt.n	800ab20 <_strtol_l.constprop.0+0xc0>
 800aaec:	fb06 4603 	mla	r6, r6, r3, r4
 800aaf0:	f04f 0c01 	mov.w	ip, #1
 800aaf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaf8:	e7e8      	b.n	800aacc <_strtol_l.constprop.0+0x6c>
 800aafa:	2c2b      	cmp	r4, #43	; 0x2b
 800aafc:	bf04      	itt	eq
 800aafe:	782c      	ldrbeq	r4, [r5, #0]
 800ab00:	1cb5      	addeq	r5, r6, #2
 800ab02:	e7ca      	b.n	800aa9a <_strtol_l.constprop.0+0x3a>
 800ab04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ab08:	f1be 0f19 	cmp.w	lr, #25
 800ab0c:	d801      	bhi.n	800ab12 <_strtol_l.constprop.0+0xb2>
 800ab0e:	3c37      	subs	r4, #55	; 0x37
 800ab10:	e7e2      	b.n	800aad8 <_strtol_l.constprop.0+0x78>
 800ab12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ab16:	f1be 0f19 	cmp.w	lr, #25
 800ab1a:	d804      	bhi.n	800ab26 <_strtol_l.constprop.0+0xc6>
 800ab1c:	3c57      	subs	r4, #87	; 0x57
 800ab1e:	e7db      	b.n	800aad8 <_strtol_l.constprop.0+0x78>
 800ab20:	f04f 3cff 	mov.w	ip, #4294967295
 800ab24:	e7e6      	b.n	800aaf4 <_strtol_l.constprop.0+0x94>
 800ab26:	f1bc 0f00 	cmp.w	ip, #0
 800ab2a:	da05      	bge.n	800ab38 <_strtol_l.constprop.0+0xd8>
 800ab2c:	2322      	movs	r3, #34	; 0x22
 800ab2e:	6003      	str	r3, [r0, #0]
 800ab30:	4646      	mov	r6, r8
 800ab32:	b942      	cbnz	r2, 800ab46 <_strtol_l.constprop.0+0xe6>
 800ab34:	4630      	mov	r0, r6
 800ab36:	e79e      	b.n	800aa76 <_strtol_l.constprop.0+0x16>
 800ab38:	b107      	cbz	r7, 800ab3c <_strtol_l.constprop.0+0xdc>
 800ab3a:	4276      	negs	r6, r6
 800ab3c:	2a00      	cmp	r2, #0
 800ab3e:	d0f9      	beq.n	800ab34 <_strtol_l.constprop.0+0xd4>
 800ab40:	f1bc 0f00 	cmp.w	ip, #0
 800ab44:	d000      	beq.n	800ab48 <_strtol_l.constprop.0+0xe8>
 800ab46:	1e69      	subs	r1, r5, #1
 800ab48:	6011      	str	r1, [r2, #0]
 800ab4a:	e7f3      	b.n	800ab34 <_strtol_l.constprop.0+0xd4>
 800ab4c:	2430      	movs	r4, #48	; 0x30
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1b1      	bne.n	800aab6 <_strtol_l.constprop.0+0x56>
 800ab52:	2308      	movs	r3, #8
 800ab54:	e7af      	b.n	800aab6 <_strtol_l.constprop.0+0x56>
 800ab56:	2c30      	cmp	r4, #48	; 0x30
 800ab58:	d0a5      	beq.n	800aaa6 <_strtol_l.constprop.0+0x46>
 800ab5a:	230a      	movs	r3, #10
 800ab5c:	e7ab      	b.n	800aab6 <_strtol_l.constprop.0+0x56>
 800ab5e:	bf00      	nop
 800ab60:	0800e809 	.word	0x0800e809

0800ab64 <_strtol_r>:
 800ab64:	f7ff bf7c 	b.w	800aa60 <_strtol_l.constprop.0>

0800ab68 <_user_strerror>:
 800ab68:	2000      	movs	r0, #0
 800ab6a:	4770      	bx	lr

0800ab6c <_vsiprintf_r>:
 800ab6c:	b500      	push	{lr}
 800ab6e:	b09b      	sub	sp, #108	; 0x6c
 800ab70:	9100      	str	r1, [sp, #0]
 800ab72:	9104      	str	r1, [sp, #16]
 800ab74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab78:	9105      	str	r1, [sp, #20]
 800ab7a:	9102      	str	r1, [sp, #8]
 800ab7c:	4905      	ldr	r1, [pc, #20]	; (800ab94 <_vsiprintf_r+0x28>)
 800ab7e:	9103      	str	r1, [sp, #12]
 800ab80:	4669      	mov	r1, sp
 800ab82:	f002 f98b 	bl	800ce9c <_svfiprintf_r>
 800ab86:	9b00      	ldr	r3, [sp, #0]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	701a      	strb	r2, [r3, #0]
 800ab8c:	b01b      	add	sp, #108	; 0x6c
 800ab8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab92:	bf00      	nop
 800ab94:	ffff0208 	.word	0xffff0208

0800ab98 <vsiprintf>:
 800ab98:	4613      	mov	r3, r2
 800ab9a:	460a      	mov	r2, r1
 800ab9c:	4601      	mov	r1, r0
 800ab9e:	4802      	ldr	r0, [pc, #8]	; (800aba8 <vsiprintf+0x10>)
 800aba0:	6800      	ldr	r0, [r0, #0]
 800aba2:	f7ff bfe3 	b.w	800ab6c <_vsiprintf_r>
 800aba6:	bf00      	nop
 800aba8:	2000003c 	.word	0x2000003c

0800abac <_write_r>:
 800abac:	b538      	push	{r3, r4, r5, lr}
 800abae:	4d07      	ldr	r5, [pc, #28]	; (800abcc <_write_r+0x20>)
 800abb0:	4604      	mov	r4, r0
 800abb2:	4608      	mov	r0, r1
 800abb4:	4611      	mov	r1, r2
 800abb6:	2200      	movs	r2, #0
 800abb8:	602a      	str	r2, [r5, #0]
 800abba:	461a      	mov	r2, r3
 800abbc:	f7f7 f8a7 	bl	8001d0e <_write>
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	d102      	bne.n	800abca <_write_r+0x1e>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	b103      	cbz	r3, 800abca <_write_r+0x1e>
 800abc8:	6023      	str	r3, [r4, #0]
 800abca:	bd38      	pop	{r3, r4, r5, pc}
 800abcc:	20000804 	.word	0x20000804

0800abd0 <_close_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4d06      	ldr	r5, [pc, #24]	; (800abec <_close_r+0x1c>)
 800abd4:	2300      	movs	r3, #0
 800abd6:	4604      	mov	r4, r0
 800abd8:	4608      	mov	r0, r1
 800abda:	602b      	str	r3, [r5, #0]
 800abdc:	f7f7 f8b3 	bl	8001d46 <_close>
 800abe0:	1c43      	adds	r3, r0, #1
 800abe2:	d102      	bne.n	800abea <_close_r+0x1a>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	b103      	cbz	r3, 800abea <_close_r+0x1a>
 800abe8:	6023      	str	r3, [r4, #0]
 800abea:	bd38      	pop	{r3, r4, r5, pc}
 800abec:	20000804 	.word	0x20000804

0800abf0 <quorem>:
 800abf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	6903      	ldr	r3, [r0, #16]
 800abf6:	690c      	ldr	r4, [r1, #16]
 800abf8:	42a3      	cmp	r3, r4
 800abfa:	4607      	mov	r7, r0
 800abfc:	f2c0 8081 	blt.w	800ad02 <quorem+0x112>
 800ac00:	3c01      	subs	r4, #1
 800ac02:	f101 0814 	add.w	r8, r1, #20
 800ac06:	f100 0514 	add.w	r5, r0, #20
 800ac0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac0e:	9301      	str	r3, [sp, #4]
 800ac10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac24:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac28:	d331      	bcc.n	800ac8e <quorem+0x9e>
 800ac2a:	f04f 0e00 	mov.w	lr, #0
 800ac2e:	4640      	mov	r0, r8
 800ac30:	46ac      	mov	ip, r5
 800ac32:	46f2      	mov	sl, lr
 800ac34:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac38:	b293      	uxth	r3, r2
 800ac3a:	fb06 e303 	mla	r3, r6, r3, lr
 800ac3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	ebaa 0303 	sub.w	r3, sl, r3
 800ac48:	f8dc a000 	ldr.w	sl, [ip]
 800ac4c:	0c12      	lsrs	r2, r2, #16
 800ac4e:	fa13 f38a 	uxtah	r3, r3, sl
 800ac52:	fb06 e202 	mla	r2, r6, r2, lr
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	9b00      	ldr	r3, [sp, #0]
 800ac5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac5e:	b292      	uxth	r2, r2
 800ac60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ac64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac68:	f8bd 3000 	ldrh.w	r3, [sp]
 800ac6c:	4581      	cmp	r9, r0
 800ac6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac72:	f84c 3b04 	str.w	r3, [ip], #4
 800ac76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac7a:	d2db      	bcs.n	800ac34 <quorem+0x44>
 800ac7c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac80:	b92b      	cbnz	r3, 800ac8e <quorem+0x9e>
 800ac82:	9b01      	ldr	r3, [sp, #4]
 800ac84:	3b04      	subs	r3, #4
 800ac86:	429d      	cmp	r5, r3
 800ac88:	461a      	mov	r2, r3
 800ac8a:	d32e      	bcc.n	800acea <quorem+0xfa>
 800ac8c:	613c      	str	r4, [r7, #16]
 800ac8e:	4638      	mov	r0, r7
 800ac90:	f001 fe9e 	bl	800c9d0 <__mcmp>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	db24      	blt.n	800ace2 <quorem+0xf2>
 800ac98:	3601      	adds	r6, #1
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	f04f 0c00 	mov.w	ip, #0
 800aca0:	f858 2b04 	ldr.w	r2, [r8], #4
 800aca4:	f8d0 e000 	ldr.w	lr, [r0]
 800aca8:	b293      	uxth	r3, r2
 800acaa:	ebac 0303 	sub.w	r3, ip, r3
 800acae:	0c12      	lsrs	r2, r2, #16
 800acb0:	fa13 f38e 	uxtah	r3, r3, lr
 800acb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800acb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acc2:	45c1      	cmp	r9, r8
 800acc4:	f840 3b04 	str.w	r3, [r0], #4
 800acc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800accc:	d2e8      	bcs.n	800aca0 <quorem+0xb0>
 800acce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acd6:	b922      	cbnz	r2, 800ace2 <quorem+0xf2>
 800acd8:	3b04      	subs	r3, #4
 800acda:	429d      	cmp	r5, r3
 800acdc:	461a      	mov	r2, r3
 800acde:	d30a      	bcc.n	800acf6 <quorem+0x106>
 800ace0:	613c      	str	r4, [r7, #16]
 800ace2:	4630      	mov	r0, r6
 800ace4:	b003      	add	sp, #12
 800ace6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acea:	6812      	ldr	r2, [r2, #0]
 800acec:	3b04      	subs	r3, #4
 800acee:	2a00      	cmp	r2, #0
 800acf0:	d1cc      	bne.n	800ac8c <quorem+0x9c>
 800acf2:	3c01      	subs	r4, #1
 800acf4:	e7c7      	b.n	800ac86 <quorem+0x96>
 800acf6:	6812      	ldr	r2, [r2, #0]
 800acf8:	3b04      	subs	r3, #4
 800acfa:	2a00      	cmp	r2, #0
 800acfc:	d1f0      	bne.n	800ace0 <quorem+0xf0>
 800acfe:	3c01      	subs	r4, #1
 800ad00:	e7eb      	b.n	800acda <quorem+0xea>
 800ad02:	2000      	movs	r0, #0
 800ad04:	e7ee      	b.n	800ace4 <quorem+0xf4>
	...

0800ad08 <_dtoa_r>:
 800ad08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0c:	ed2d 8b04 	vpush	{d8-d9}
 800ad10:	ec57 6b10 	vmov	r6, r7, d0
 800ad14:	b093      	sub	sp, #76	; 0x4c
 800ad16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ad18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ad1c:	9106      	str	r1, [sp, #24]
 800ad1e:	ee10 aa10 	vmov	sl, s0
 800ad22:	4604      	mov	r4, r0
 800ad24:	9209      	str	r2, [sp, #36]	; 0x24
 800ad26:	930c      	str	r3, [sp, #48]	; 0x30
 800ad28:	46bb      	mov	fp, r7
 800ad2a:	b975      	cbnz	r5, 800ad4a <_dtoa_r+0x42>
 800ad2c:	2010      	movs	r0, #16
 800ad2e:	f7fd fd8f 	bl	8008850 <malloc>
 800ad32:	4602      	mov	r2, r0
 800ad34:	6260      	str	r0, [r4, #36]	; 0x24
 800ad36:	b920      	cbnz	r0, 800ad42 <_dtoa_r+0x3a>
 800ad38:	4ba7      	ldr	r3, [pc, #668]	; (800afd8 <_dtoa_r+0x2d0>)
 800ad3a:	21ea      	movs	r1, #234	; 0xea
 800ad3c:	48a7      	ldr	r0, [pc, #668]	; (800afdc <_dtoa_r+0x2d4>)
 800ad3e:	f002 fdf3 	bl	800d928 <__assert_func>
 800ad42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad46:	6005      	str	r5, [r0, #0]
 800ad48:	60c5      	str	r5, [r0, #12]
 800ad4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad4c:	6819      	ldr	r1, [r3, #0]
 800ad4e:	b151      	cbz	r1, 800ad66 <_dtoa_r+0x5e>
 800ad50:	685a      	ldr	r2, [r3, #4]
 800ad52:	604a      	str	r2, [r1, #4]
 800ad54:	2301      	movs	r3, #1
 800ad56:	4093      	lsls	r3, r2
 800ad58:	608b      	str	r3, [r1, #8]
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f001 fbac 	bl	800c4b8 <_Bfree>
 800ad60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad62:	2200      	movs	r2, #0
 800ad64:	601a      	str	r2, [r3, #0]
 800ad66:	1e3b      	subs	r3, r7, #0
 800ad68:	bfaa      	itet	ge
 800ad6a:	2300      	movge	r3, #0
 800ad6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ad70:	f8c8 3000 	strge.w	r3, [r8]
 800ad74:	4b9a      	ldr	r3, [pc, #616]	; (800afe0 <_dtoa_r+0x2d8>)
 800ad76:	bfbc      	itt	lt
 800ad78:	2201      	movlt	r2, #1
 800ad7a:	f8c8 2000 	strlt.w	r2, [r8]
 800ad7e:	ea33 030b 	bics.w	r3, r3, fp
 800ad82:	d11b      	bne.n	800adbc <_dtoa_r+0xb4>
 800ad84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad86:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad90:	4333      	orrs	r3, r6
 800ad92:	f000 8592 	beq.w	800b8ba <_dtoa_r+0xbb2>
 800ad96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad98:	b963      	cbnz	r3, 800adb4 <_dtoa_r+0xac>
 800ad9a:	4b92      	ldr	r3, [pc, #584]	; (800afe4 <_dtoa_r+0x2dc>)
 800ad9c:	e022      	b.n	800ade4 <_dtoa_r+0xdc>
 800ad9e:	4b92      	ldr	r3, [pc, #584]	; (800afe8 <_dtoa_r+0x2e0>)
 800ada0:	9301      	str	r3, [sp, #4]
 800ada2:	3308      	adds	r3, #8
 800ada4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	9801      	ldr	r0, [sp, #4]
 800adaa:	b013      	add	sp, #76	; 0x4c
 800adac:	ecbd 8b04 	vpop	{d8-d9}
 800adb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb4:	4b8b      	ldr	r3, [pc, #556]	; (800afe4 <_dtoa_r+0x2dc>)
 800adb6:	9301      	str	r3, [sp, #4]
 800adb8:	3303      	adds	r3, #3
 800adba:	e7f3      	b.n	800ada4 <_dtoa_r+0x9c>
 800adbc:	2200      	movs	r2, #0
 800adbe:	2300      	movs	r3, #0
 800adc0:	4650      	mov	r0, sl
 800adc2:	4659      	mov	r1, fp
 800adc4:	f7f5 fe90 	bl	8000ae8 <__aeabi_dcmpeq>
 800adc8:	ec4b ab19 	vmov	d9, sl, fp
 800adcc:	4680      	mov	r8, r0
 800adce:	b158      	cbz	r0, 800ade8 <_dtoa_r+0xe0>
 800add0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800add2:	2301      	movs	r3, #1
 800add4:	6013      	str	r3, [r2, #0]
 800add6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 856b 	beq.w	800b8b4 <_dtoa_r+0xbac>
 800adde:	4883      	ldr	r0, [pc, #524]	; (800afec <_dtoa_r+0x2e4>)
 800ade0:	6018      	str	r0, [r3, #0]
 800ade2:	1e43      	subs	r3, r0, #1
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	e7df      	b.n	800ada8 <_dtoa_r+0xa0>
 800ade8:	ec4b ab10 	vmov	d0, sl, fp
 800adec:	aa10      	add	r2, sp, #64	; 0x40
 800adee:	a911      	add	r1, sp, #68	; 0x44
 800adf0:	4620      	mov	r0, r4
 800adf2:	f001 ff0f 	bl	800cc14 <__d2b>
 800adf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800adfa:	ee08 0a10 	vmov	s16, r0
 800adfe:	2d00      	cmp	r5, #0
 800ae00:	f000 8084 	beq.w	800af0c <_dtoa_r+0x204>
 800ae04:	ee19 3a90 	vmov	r3, s19
 800ae08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ae10:	4656      	mov	r6, sl
 800ae12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ae16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ae1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ae1e:	4b74      	ldr	r3, [pc, #464]	; (800aff0 <_dtoa_r+0x2e8>)
 800ae20:	2200      	movs	r2, #0
 800ae22:	4630      	mov	r0, r6
 800ae24:	4639      	mov	r1, r7
 800ae26:	f7f5 fa3f 	bl	80002a8 <__aeabi_dsub>
 800ae2a:	a365      	add	r3, pc, #404	; (adr r3, 800afc0 <_dtoa_r+0x2b8>)
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	f7f5 fbf2 	bl	8000618 <__aeabi_dmul>
 800ae34:	a364      	add	r3, pc, #400	; (adr r3, 800afc8 <_dtoa_r+0x2c0>)
 800ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3a:	f7f5 fa37 	bl	80002ac <__adddf3>
 800ae3e:	4606      	mov	r6, r0
 800ae40:	4628      	mov	r0, r5
 800ae42:	460f      	mov	r7, r1
 800ae44:	f7f5 fb7e 	bl	8000544 <__aeabi_i2d>
 800ae48:	a361      	add	r3, pc, #388	; (adr r3, 800afd0 <_dtoa_r+0x2c8>)
 800ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4e:	f7f5 fbe3 	bl	8000618 <__aeabi_dmul>
 800ae52:	4602      	mov	r2, r0
 800ae54:	460b      	mov	r3, r1
 800ae56:	4630      	mov	r0, r6
 800ae58:	4639      	mov	r1, r7
 800ae5a:	f7f5 fa27 	bl	80002ac <__adddf3>
 800ae5e:	4606      	mov	r6, r0
 800ae60:	460f      	mov	r7, r1
 800ae62:	f7f5 fe89 	bl	8000b78 <__aeabi_d2iz>
 800ae66:	2200      	movs	r2, #0
 800ae68:	9000      	str	r0, [sp, #0]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	4639      	mov	r1, r7
 800ae70:	f7f5 fe44 	bl	8000afc <__aeabi_dcmplt>
 800ae74:	b150      	cbz	r0, 800ae8c <_dtoa_r+0x184>
 800ae76:	9800      	ldr	r0, [sp, #0]
 800ae78:	f7f5 fb64 	bl	8000544 <__aeabi_i2d>
 800ae7c:	4632      	mov	r2, r6
 800ae7e:	463b      	mov	r3, r7
 800ae80:	f7f5 fe32 	bl	8000ae8 <__aeabi_dcmpeq>
 800ae84:	b910      	cbnz	r0, 800ae8c <_dtoa_r+0x184>
 800ae86:	9b00      	ldr	r3, [sp, #0]
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	9b00      	ldr	r3, [sp, #0]
 800ae8e:	2b16      	cmp	r3, #22
 800ae90:	d85a      	bhi.n	800af48 <_dtoa_r+0x240>
 800ae92:	9a00      	ldr	r2, [sp, #0]
 800ae94:	4b57      	ldr	r3, [pc, #348]	; (800aff4 <_dtoa_r+0x2ec>)
 800ae96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9e:	ec51 0b19 	vmov	r0, r1, d9
 800aea2:	f7f5 fe2b 	bl	8000afc <__aeabi_dcmplt>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d050      	beq.n	800af4c <_dtoa_r+0x244>
 800aeaa:	9b00      	ldr	r3, [sp, #0]
 800aeac:	3b01      	subs	r3, #1
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aeb6:	1b5d      	subs	r5, r3, r5
 800aeb8:	1e6b      	subs	r3, r5, #1
 800aeba:	9305      	str	r3, [sp, #20]
 800aebc:	bf45      	ittet	mi
 800aebe:	f1c5 0301 	rsbmi	r3, r5, #1
 800aec2:	9304      	strmi	r3, [sp, #16]
 800aec4:	2300      	movpl	r3, #0
 800aec6:	2300      	movmi	r3, #0
 800aec8:	bf4c      	ite	mi
 800aeca:	9305      	strmi	r3, [sp, #20]
 800aecc:	9304      	strpl	r3, [sp, #16]
 800aece:	9b00      	ldr	r3, [sp, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	db3d      	blt.n	800af50 <_dtoa_r+0x248>
 800aed4:	9b05      	ldr	r3, [sp, #20]
 800aed6:	9a00      	ldr	r2, [sp, #0]
 800aed8:	920a      	str	r2, [sp, #40]	; 0x28
 800aeda:	4413      	add	r3, r2
 800aedc:	9305      	str	r3, [sp, #20]
 800aede:	2300      	movs	r3, #0
 800aee0:	9307      	str	r3, [sp, #28]
 800aee2:	9b06      	ldr	r3, [sp, #24]
 800aee4:	2b09      	cmp	r3, #9
 800aee6:	f200 8089 	bhi.w	800affc <_dtoa_r+0x2f4>
 800aeea:	2b05      	cmp	r3, #5
 800aeec:	bfc4      	itt	gt
 800aeee:	3b04      	subgt	r3, #4
 800aef0:	9306      	strgt	r3, [sp, #24]
 800aef2:	9b06      	ldr	r3, [sp, #24]
 800aef4:	f1a3 0302 	sub.w	r3, r3, #2
 800aef8:	bfcc      	ite	gt
 800aefa:	2500      	movgt	r5, #0
 800aefc:	2501      	movle	r5, #1
 800aefe:	2b03      	cmp	r3, #3
 800af00:	f200 8087 	bhi.w	800b012 <_dtoa_r+0x30a>
 800af04:	e8df f003 	tbb	[pc, r3]
 800af08:	59383a2d 	.word	0x59383a2d
 800af0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800af10:	441d      	add	r5, r3
 800af12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800af16:	2b20      	cmp	r3, #32
 800af18:	bfc1      	itttt	gt
 800af1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800af1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800af22:	fa0b f303 	lslgt.w	r3, fp, r3
 800af26:	fa26 f000 	lsrgt.w	r0, r6, r0
 800af2a:	bfda      	itte	le
 800af2c:	f1c3 0320 	rsble	r3, r3, #32
 800af30:	fa06 f003 	lslle.w	r0, r6, r3
 800af34:	4318      	orrgt	r0, r3
 800af36:	f7f5 faf5 	bl	8000524 <__aeabi_ui2d>
 800af3a:	2301      	movs	r3, #1
 800af3c:	4606      	mov	r6, r0
 800af3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800af42:	3d01      	subs	r5, #1
 800af44:	930e      	str	r3, [sp, #56]	; 0x38
 800af46:	e76a      	b.n	800ae1e <_dtoa_r+0x116>
 800af48:	2301      	movs	r3, #1
 800af4a:	e7b2      	b.n	800aeb2 <_dtoa_r+0x1aa>
 800af4c:	900b      	str	r0, [sp, #44]	; 0x2c
 800af4e:	e7b1      	b.n	800aeb4 <_dtoa_r+0x1ac>
 800af50:	9b04      	ldr	r3, [sp, #16]
 800af52:	9a00      	ldr	r2, [sp, #0]
 800af54:	1a9b      	subs	r3, r3, r2
 800af56:	9304      	str	r3, [sp, #16]
 800af58:	4253      	negs	r3, r2
 800af5a:	9307      	str	r3, [sp, #28]
 800af5c:	2300      	movs	r3, #0
 800af5e:	930a      	str	r3, [sp, #40]	; 0x28
 800af60:	e7bf      	b.n	800aee2 <_dtoa_r+0x1da>
 800af62:	2300      	movs	r3, #0
 800af64:	9308      	str	r3, [sp, #32]
 800af66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dc55      	bgt.n	800b018 <_dtoa_r+0x310>
 800af6c:	2301      	movs	r3, #1
 800af6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af72:	461a      	mov	r2, r3
 800af74:	9209      	str	r2, [sp, #36]	; 0x24
 800af76:	e00c      	b.n	800af92 <_dtoa_r+0x28a>
 800af78:	2301      	movs	r3, #1
 800af7a:	e7f3      	b.n	800af64 <_dtoa_r+0x25c>
 800af7c:	2300      	movs	r3, #0
 800af7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af80:	9308      	str	r3, [sp, #32]
 800af82:	9b00      	ldr	r3, [sp, #0]
 800af84:	4413      	add	r3, r2
 800af86:	9302      	str	r3, [sp, #8]
 800af88:	3301      	adds	r3, #1
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	9303      	str	r3, [sp, #12]
 800af8e:	bfb8      	it	lt
 800af90:	2301      	movlt	r3, #1
 800af92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800af94:	2200      	movs	r2, #0
 800af96:	6042      	str	r2, [r0, #4]
 800af98:	2204      	movs	r2, #4
 800af9a:	f102 0614 	add.w	r6, r2, #20
 800af9e:	429e      	cmp	r6, r3
 800afa0:	6841      	ldr	r1, [r0, #4]
 800afa2:	d93d      	bls.n	800b020 <_dtoa_r+0x318>
 800afa4:	4620      	mov	r0, r4
 800afa6:	f001 fa47 	bl	800c438 <_Balloc>
 800afaa:	9001      	str	r0, [sp, #4]
 800afac:	2800      	cmp	r0, #0
 800afae:	d13b      	bne.n	800b028 <_dtoa_r+0x320>
 800afb0:	4b11      	ldr	r3, [pc, #68]	; (800aff8 <_dtoa_r+0x2f0>)
 800afb2:	4602      	mov	r2, r0
 800afb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800afb8:	e6c0      	b.n	800ad3c <_dtoa_r+0x34>
 800afba:	2301      	movs	r3, #1
 800afbc:	e7df      	b.n	800af7e <_dtoa_r+0x276>
 800afbe:	bf00      	nop
 800afc0:	636f4361 	.word	0x636f4361
 800afc4:	3fd287a7 	.word	0x3fd287a7
 800afc8:	8b60c8b3 	.word	0x8b60c8b3
 800afcc:	3fc68a28 	.word	0x3fc68a28
 800afd0:	509f79fb 	.word	0x509f79fb
 800afd4:	3fd34413 	.word	0x3fd34413
 800afd8:	0800e916 	.word	0x0800e916
 800afdc:	0800e92d 	.word	0x0800e92d
 800afe0:	7ff00000 	.word	0x7ff00000
 800afe4:	0800e912 	.word	0x0800e912
 800afe8:	0800e909 	.word	0x0800e909
 800afec:	0800ebea 	.word	0x0800ebea
 800aff0:	3ff80000 	.word	0x3ff80000
 800aff4:	0800eb00 	.word	0x0800eb00
 800aff8:	0800e988 	.word	0x0800e988
 800affc:	2501      	movs	r5, #1
 800affe:	2300      	movs	r3, #0
 800b000:	9306      	str	r3, [sp, #24]
 800b002:	9508      	str	r5, [sp, #32]
 800b004:	f04f 33ff 	mov.w	r3, #4294967295
 800b008:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b00c:	2200      	movs	r2, #0
 800b00e:	2312      	movs	r3, #18
 800b010:	e7b0      	b.n	800af74 <_dtoa_r+0x26c>
 800b012:	2301      	movs	r3, #1
 800b014:	9308      	str	r3, [sp, #32]
 800b016:	e7f5      	b.n	800b004 <_dtoa_r+0x2fc>
 800b018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b01a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b01e:	e7b8      	b.n	800af92 <_dtoa_r+0x28a>
 800b020:	3101      	adds	r1, #1
 800b022:	6041      	str	r1, [r0, #4]
 800b024:	0052      	lsls	r2, r2, #1
 800b026:	e7b8      	b.n	800af9a <_dtoa_r+0x292>
 800b028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b02a:	9a01      	ldr	r2, [sp, #4]
 800b02c:	601a      	str	r2, [r3, #0]
 800b02e:	9b03      	ldr	r3, [sp, #12]
 800b030:	2b0e      	cmp	r3, #14
 800b032:	f200 809d 	bhi.w	800b170 <_dtoa_r+0x468>
 800b036:	2d00      	cmp	r5, #0
 800b038:	f000 809a 	beq.w	800b170 <_dtoa_r+0x468>
 800b03c:	9b00      	ldr	r3, [sp, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	dd32      	ble.n	800b0a8 <_dtoa_r+0x3a0>
 800b042:	4ab7      	ldr	r2, [pc, #732]	; (800b320 <_dtoa_r+0x618>)
 800b044:	f003 030f 	and.w	r3, r3, #15
 800b048:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b04c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b050:	9b00      	ldr	r3, [sp, #0]
 800b052:	05d8      	lsls	r0, r3, #23
 800b054:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b058:	d516      	bpl.n	800b088 <_dtoa_r+0x380>
 800b05a:	4bb2      	ldr	r3, [pc, #712]	; (800b324 <_dtoa_r+0x61c>)
 800b05c:	ec51 0b19 	vmov	r0, r1, d9
 800b060:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b064:	f7f5 fc02 	bl	800086c <__aeabi_ddiv>
 800b068:	f007 070f 	and.w	r7, r7, #15
 800b06c:	4682      	mov	sl, r0
 800b06e:	468b      	mov	fp, r1
 800b070:	2503      	movs	r5, #3
 800b072:	4eac      	ldr	r6, [pc, #688]	; (800b324 <_dtoa_r+0x61c>)
 800b074:	b957      	cbnz	r7, 800b08c <_dtoa_r+0x384>
 800b076:	4642      	mov	r2, r8
 800b078:	464b      	mov	r3, r9
 800b07a:	4650      	mov	r0, sl
 800b07c:	4659      	mov	r1, fp
 800b07e:	f7f5 fbf5 	bl	800086c <__aeabi_ddiv>
 800b082:	4682      	mov	sl, r0
 800b084:	468b      	mov	fp, r1
 800b086:	e028      	b.n	800b0da <_dtoa_r+0x3d2>
 800b088:	2502      	movs	r5, #2
 800b08a:	e7f2      	b.n	800b072 <_dtoa_r+0x36a>
 800b08c:	07f9      	lsls	r1, r7, #31
 800b08e:	d508      	bpl.n	800b0a2 <_dtoa_r+0x39a>
 800b090:	4640      	mov	r0, r8
 800b092:	4649      	mov	r1, r9
 800b094:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b098:	f7f5 fabe 	bl	8000618 <__aeabi_dmul>
 800b09c:	3501      	adds	r5, #1
 800b09e:	4680      	mov	r8, r0
 800b0a0:	4689      	mov	r9, r1
 800b0a2:	107f      	asrs	r7, r7, #1
 800b0a4:	3608      	adds	r6, #8
 800b0a6:	e7e5      	b.n	800b074 <_dtoa_r+0x36c>
 800b0a8:	f000 809b 	beq.w	800b1e2 <_dtoa_r+0x4da>
 800b0ac:	9b00      	ldr	r3, [sp, #0]
 800b0ae:	4f9d      	ldr	r7, [pc, #628]	; (800b324 <_dtoa_r+0x61c>)
 800b0b0:	425e      	negs	r6, r3
 800b0b2:	4b9b      	ldr	r3, [pc, #620]	; (800b320 <_dtoa_r+0x618>)
 800b0b4:	f006 020f 	and.w	r2, r6, #15
 800b0b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c0:	ec51 0b19 	vmov	r0, r1, d9
 800b0c4:	f7f5 faa8 	bl	8000618 <__aeabi_dmul>
 800b0c8:	1136      	asrs	r6, r6, #4
 800b0ca:	4682      	mov	sl, r0
 800b0cc:	468b      	mov	fp, r1
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	2502      	movs	r5, #2
 800b0d2:	2e00      	cmp	r6, #0
 800b0d4:	d17a      	bne.n	800b1cc <_dtoa_r+0x4c4>
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1d3      	bne.n	800b082 <_dtoa_r+0x37a>
 800b0da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f000 8082 	beq.w	800b1e6 <_dtoa_r+0x4de>
 800b0e2:	4b91      	ldr	r3, [pc, #580]	; (800b328 <_dtoa_r+0x620>)
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	4650      	mov	r0, sl
 800b0e8:	4659      	mov	r1, fp
 800b0ea:	f7f5 fd07 	bl	8000afc <__aeabi_dcmplt>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	d079      	beq.n	800b1e6 <_dtoa_r+0x4de>
 800b0f2:	9b03      	ldr	r3, [sp, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d076      	beq.n	800b1e6 <_dtoa_r+0x4de>
 800b0f8:	9b02      	ldr	r3, [sp, #8]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	dd36      	ble.n	800b16c <_dtoa_r+0x464>
 800b0fe:	9b00      	ldr	r3, [sp, #0]
 800b100:	4650      	mov	r0, sl
 800b102:	4659      	mov	r1, fp
 800b104:	1e5f      	subs	r7, r3, #1
 800b106:	2200      	movs	r2, #0
 800b108:	4b88      	ldr	r3, [pc, #544]	; (800b32c <_dtoa_r+0x624>)
 800b10a:	f7f5 fa85 	bl	8000618 <__aeabi_dmul>
 800b10e:	9e02      	ldr	r6, [sp, #8]
 800b110:	4682      	mov	sl, r0
 800b112:	468b      	mov	fp, r1
 800b114:	3501      	adds	r5, #1
 800b116:	4628      	mov	r0, r5
 800b118:	f7f5 fa14 	bl	8000544 <__aeabi_i2d>
 800b11c:	4652      	mov	r2, sl
 800b11e:	465b      	mov	r3, fp
 800b120:	f7f5 fa7a 	bl	8000618 <__aeabi_dmul>
 800b124:	4b82      	ldr	r3, [pc, #520]	; (800b330 <_dtoa_r+0x628>)
 800b126:	2200      	movs	r2, #0
 800b128:	f7f5 f8c0 	bl	80002ac <__adddf3>
 800b12c:	46d0      	mov	r8, sl
 800b12e:	46d9      	mov	r9, fp
 800b130:	4682      	mov	sl, r0
 800b132:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b136:	2e00      	cmp	r6, #0
 800b138:	d158      	bne.n	800b1ec <_dtoa_r+0x4e4>
 800b13a:	4b7e      	ldr	r3, [pc, #504]	; (800b334 <_dtoa_r+0x62c>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	4640      	mov	r0, r8
 800b140:	4649      	mov	r1, r9
 800b142:	f7f5 f8b1 	bl	80002a8 <__aeabi_dsub>
 800b146:	4652      	mov	r2, sl
 800b148:	465b      	mov	r3, fp
 800b14a:	4680      	mov	r8, r0
 800b14c:	4689      	mov	r9, r1
 800b14e:	f7f5 fcf3 	bl	8000b38 <__aeabi_dcmpgt>
 800b152:	2800      	cmp	r0, #0
 800b154:	f040 8295 	bne.w	800b682 <_dtoa_r+0x97a>
 800b158:	4652      	mov	r2, sl
 800b15a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b15e:	4640      	mov	r0, r8
 800b160:	4649      	mov	r1, r9
 800b162:	f7f5 fccb 	bl	8000afc <__aeabi_dcmplt>
 800b166:	2800      	cmp	r0, #0
 800b168:	f040 8289 	bne.w	800b67e <_dtoa_r+0x976>
 800b16c:	ec5b ab19 	vmov	sl, fp, d9
 800b170:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b172:	2b00      	cmp	r3, #0
 800b174:	f2c0 8148 	blt.w	800b408 <_dtoa_r+0x700>
 800b178:	9a00      	ldr	r2, [sp, #0]
 800b17a:	2a0e      	cmp	r2, #14
 800b17c:	f300 8144 	bgt.w	800b408 <_dtoa_r+0x700>
 800b180:	4b67      	ldr	r3, [pc, #412]	; (800b320 <_dtoa_r+0x618>)
 800b182:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b186:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f280 80d5 	bge.w	800b33c <_dtoa_r+0x634>
 800b192:	9b03      	ldr	r3, [sp, #12]
 800b194:	2b00      	cmp	r3, #0
 800b196:	f300 80d1 	bgt.w	800b33c <_dtoa_r+0x634>
 800b19a:	f040 826f 	bne.w	800b67c <_dtoa_r+0x974>
 800b19e:	4b65      	ldr	r3, [pc, #404]	; (800b334 <_dtoa_r+0x62c>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	f7f5 fa37 	bl	8000618 <__aeabi_dmul>
 800b1aa:	4652      	mov	r2, sl
 800b1ac:	465b      	mov	r3, fp
 800b1ae:	f7f5 fcb9 	bl	8000b24 <__aeabi_dcmpge>
 800b1b2:	9e03      	ldr	r6, [sp, #12]
 800b1b4:	4637      	mov	r7, r6
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	f040 8245 	bne.w	800b646 <_dtoa_r+0x93e>
 800b1bc:	9d01      	ldr	r5, [sp, #4]
 800b1be:	2331      	movs	r3, #49	; 0x31
 800b1c0:	f805 3b01 	strb.w	r3, [r5], #1
 800b1c4:	9b00      	ldr	r3, [sp, #0]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	e240      	b.n	800b64e <_dtoa_r+0x946>
 800b1cc:	07f2      	lsls	r2, r6, #31
 800b1ce:	d505      	bpl.n	800b1dc <_dtoa_r+0x4d4>
 800b1d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1d4:	f7f5 fa20 	bl	8000618 <__aeabi_dmul>
 800b1d8:	3501      	adds	r5, #1
 800b1da:	2301      	movs	r3, #1
 800b1dc:	1076      	asrs	r6, r6, #1
 800b1de:	3708      	adds	r7, #8
 800b1e0:	e777      	b.n	800b0d2 <_dtoa_r+0x3ca>
 800b1e2:	2502      	movs	r5, #2
 800b1e4:	e779      	b.n	800b0da <_dtoa_r+0x3d2>
 800b1e6:	9f00      	ldr	r7, [sp, #0]
 800b1e8:	9e03      	ldr	r6, [sp, #12]
 800b1ea:	e794      	b.n	800b116 <_dtoa_r+0x40e>
 800b1ec:	9901      	ldr	r1, [sp, #4]
 800b1ee:	4b4c      	ldr	r3, [pc, #304]	; (800b320 <_dtoa_r+0x618>)
 800b1f0:	4431      	add	r1, r6
 800b1f2:	910d      	str	r1, [sp, #52]	; 0x34
 800b1f4:	9908      	ldr	r1, [sp, #32]
 800b1f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b1fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1fe:	2900      	cmp	r1, #0
 800b200:	d043      	beq.n	800b28a <_dtoa_r+0x582>
 800b202:	494d      	ldr	r1, [pc, #308]	; (800b338 <_dtoa_r+0x630>)
 800b204:	2000      	movs	r0, #0
 800b206:	f7f5 fb31 	bl	800086c <__aeabi_ddiv>
 800b20a:	4652      	mov	r2, sl
 800b20c:	465b      	mov	r3, fp
 800b20e:	f7f5 f84b 	bl	80002a8 <__aeabi_dsub>
 800b212:	9d01      	ldr	r5, [sp, #4]
 800b214:	4682      	mov	sl, r0
 800b216:	468b      	mov	fp, r1
 800b218:	4649      	mov	r1, r9
 800b21a:	4640      	mov	r0, r8
 800b21c:	f7f5 fcac 	bl	8000b78 <__aeabi_d2iz>
 800b220:	4606      	mov	r6, r0
 800b222:	f7f5 f98f 	bl	8000544 <__aeabi_i2d>
 800b226:	4602      	mov	r2, r0
 800b228:	460b      	mov	r3, r1
 800b22a:	4640      	mov	r0, r8
 800b22c:	4649      	mov	r1, r9
 800b22e:	f7f5 f83b 	bl	80002a8 <__aeabi_dsub>
 800b232:	3630      	adds	r6, #48	; 0x30
 800b234:	f805 6b01 	strb.w	r6, [r5], #1
 800b238:	4652      	mov	r2, sl
 800b23a:	465b      	mov	r3, fp
 800b23c:	4680      	mov	r8, r0
 800b23e:	4689      	mov	r9, r1
 800b240:	f7f5 fc5c 	bl	8000afc <__aeabi_dcmplt>
 800b244:	2800      	cmp	r0, #0
 800b246:	d163      	bne.n	800b310 <_dtoa_r+0x608>
 800b248:	4642      	mov	r2, r8
 800b24a:	464b      	mov	r3, r9
 800b24c:	4936      	ldr	r1, [pc, #216]	; (800b328 <_dtoa_r+0x620>)
 800b24e:	2000      	movs	r0, #0
 800b250:	f7f5 f82a 	bl	80002a8 <__aeabi_dsub>
 800b254:	4652      	mov	r2, sl
 800b256:	465b      	mov	r3, fp
 800b258:	f7f5 fc50 	bl	8000afc <__aeabi_dcmplt>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	f040 80b5 	bne.w	800b3cc <_dtoa_r+0x6c4>
 800b262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b264:	429d      	cmp	r5, r3
 800b266:	d081      	beq.n	800b16c <_dtoa_r+0x464>
 800b268:	4b30      	ldr	r3, [pc, #192]	; (800b32c <_dtoa_r+0x624>)
 800b26a:	2200      	movs	r2, #0
 800b26c:	4650      	mov	r0, sl
 800b26e:	4659      	mov	r1, fp
 800b270:	f7f5 f9d2 	bl	8000618 <__aeabi_dmul>
 800b274:	4b2d      	ldr	r3, [pc, #180]	; (800b32c <_dtoa_r+0x624>)
 800b276:	4682      	mov	sl, r0
 800b278:	468b      	mov	fp, r1
 800b27a:	4640      	mov	r0, r8
 800b27c:	4649      	mov	r1, r9
 800b27e:	2200      	movs	r2, #0
 800b280:	f7f5 f9ca 	bl	8000618 <__aeabi_dmul>
 800b284:	4680      	mov	r8, r0
 800b286:	4689      	mov	r9, r1
 800b288:	e7c6      	b.n	800b218 <_dtoa_r+0x510>
 800b28a:	4650      	mov	r0, sl
 800b28c:	4659      	mov	r1, fp
 800b28e:	f7f5 f9c3 	bl	8000618 <__aeabi_dmul>
 800b292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b294:	9d01      	ldr	r5, [sp, #4]
 800b296:	930f      	str	r3, [sp, #60]	; 0x3c
 800b298:	4682      	mov	sl, r0
 800b29a:	468b      	mov	fp, r1
 800b29c:	4649      	mov	r1, r9
 800b29e:	4640      	mov	r0, r8
 800b2a0:	f7f5 fc6a 	bl	8000b78 <__aeabi_d2iz>
 800b2a4:	4606      	mov	r6, r0
 800b2a6:	f7f5 f94d 	bl	8000544 <__aeabi_i2d>
 800b2aa:	3630      	adds	r6, #48	; 0x30
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	4640      	mov	r0, r8
 800b2b2:	4649      	mov	r1, r9
 800b2b4:	f7f4 fff8 	bl	80002a8 <__aeabi_dsub>
 800b2b8:	f805 6b01 	strb.w	r6, [r5], #1
 800b2bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2be:	429d      	cmp	r5, r3
 800b2c0:	4680      	mov	r8, r0
 800b2c2:	4689      	mov	r9, r1
 800b2c4:	f04f 0200 	mov.w	r2, #0
 800b2c8:	d124      	bne.n	800b314 <_dtoa_r+0x60c>
 800b2ca:	4b1b      	ldr	r3, [pc, #108]	; (800b338 <_dtoa_r+0x630>)
 800b2cc:	4650      	mov	r0, sl
 800b2ce:	4659      	mov	r1, fp
 800b2d0:	f7f4 ffec 	bl	80002ac <__adddf3>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	4640      	mov	r0, r8
 800b2da:	4649      	mov	r1, r9
 800b2dc:	f7f5 fc2c 	bl	8000b38 <__aeabi_dcmpgt>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d173      	bne.n	800b3cc <_dtoa_r+0x6c4>
 800b2e4:	4652      	mov	r2, sl
 800b2e6:	465b      	mov	r3, fp
 800b2e8:	4913      	ldr	r1, [pc, #76]	; (800b338 <_dtoa_r+0x630>)
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	f7f4 ffdc 	bl	80002a8 <__aeabi_dsub>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	4649      	mov	r1, r9
 800b2f8:	f7f5 fc00 	bl	8000afc <__aeabi_dcmplt>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	f43f af35 	beq.w	800b16c <_dtoa_r+0x464>
 800b302:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b304:	1e6b      	subs	r3, r5, #1
 800b306:	930f      	str	r3, [sp, #60]	; 0x3c
 800b308:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b30c:	2b30      	cmp	r3, #48	; 0x30
 800b30e:	d0f8      	beq.n	800b302 <_dtoa_r+0x5fa>
 800b310:	9700      	str	r7, [sp, #0]
 800b312:	e049      	b.n	800b3a8 <_dtoa_r+0x6a0>
 800b314:	4b05      	ldr	r3, [pc, #20]	; (800b32c <_dtoa_r+0x624>)
 800b316:	f7f5 f97f 	bl	8000618 <__aeabi_dmul>
 800b31a:	4680      	mov	r8, r0
 800b31c:	4689      	mov	r9, r1
 800b31e:	e7bd      	b.n	800b29c <_dtoa_r+0x594>
 800b320:	0800eb00 	.word	0x0800eb00
 800b324:	0800ead8 	.word	0x0800ead8
 800b328:	3ff00000 	.word	0x3ff00000
 800b32c:	40240000 	.word	0x40240000
 800b330:	401c0000 	.word	0x401c0000
 800b334:	40140000 	.word	0x40140000
 800b338:	3fe00000 	.word	0x3fe00000
 800b33c:	9d01      	ldr	r5, [sp, #4]
 800b33e:	4656      	mov	r6, sl
 800b340:	465f      	mov	r7, fp
 800b342:	4642      	mov	r2, r8
 800b344:	464b      	mov	r3, r9
 800b346:	4630      	mov	r0, r6
 800b348:	4639      	mov	r1, r7
 800b34a:	f7f5 fa8f 	bl	800086c <__aeabi_ddiv>
 800b34e:	f7f5 fc13 	bl	8000b78 <__aeabi_d2iz>
 800b352:	4682      	mov	sl, r0
 800b354:	f7f5 f8f6 	bl	8000544 <__aeabi_i2d>
 800b358:	4642      	mov	r2, r8
 800b35a:	464b      	mov	r3, r9
 800b35c:	f7f5 f95c 	bl	8000618 <__aeabi_dmul>
 800b360:	4602      	mov	r2, r0
 800b362:	460b      	mov	r3, r1
 800b364:	4630      	mov	r0, r6
 800b366:	4639      	mov	r1, r7
 800b368:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b36c:	f7f4 ff9c 	bl	80002a8 <__aeabi_dsub>
 800b370:	f805 6b01 	strb.w	r6, [r5], #1
 800b374:	9e01      	ldr	r6, [sp, #4]
 800b376:	9f03      	ldr	r7, [sp, #12]
 800b378:	1bae      	subs	r6, r5, r6
 800b37a:	42b7      	cmp	r7, r6
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	d135      	bne.n	800b3ee <_dtoa_r+0x6e6>
 800b382:	f7f4 ff93 	bl	80002ac <__adddf3>
 800b386:	4642      	mov	r2, r8
 800b388:	464b      	mov	r3, r9
 800b38a:	4606      	mov	r6, r0
 800b38c:	460f      	mov	r7, r1
 800b38e:	f7f5 fbd3 	bl	8000b38 <__aeabi_dcmpgt>
 800b392:	b9d0      	cbnz	r0, 800b3ca <_dtoa_r+0x6c2>
 800b394:	4642      	mov	r2, r8
 800b396:	464b      	mov	r3, r9
 800b398:	4630      	mov	r0, r6
 800b39a:	4639      	mov	r1, r7
 800b39c:	f7f5 fba4 	bl	8000ae8 <__aeabi_dcmpeq>
 800b3a0:	b110      	cbz	r0, 800b3a8 <_dtoa_r+0x6a0>
 800b3a2:	f01a 0f01 	tst.w	sl, #1
 800b3a6:	d110      	bne.n	800b3ca <_dtoa_r+0x6c2>
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	ee18 1a10 	vmov	r1, s16
 800b3ae:	f001 f883 	bl	800c4b8 <_Bfree>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	9800      	ldr	r0, [sp, #0]
 800b3b6:	702b      	strb	r3, [r5, #0]
 800b3b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	6018      	str	r0, [r3, #0]
 800b3be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f43f acf1 	beq.w	800ada8 <_dtoa_r+0xa0>
 800b3c6:	601d      	str	r5, [r3, #0]
 800b3c8:	e4ee      	b.n	800ada8 <_dtoa_r+0xa0>
 800b3ca:	9f00      	ldr	r7, [sp, #0]
 800b3cc:	462b      	mov	r3, r5
 800b3ce:	461d      	mov	r5, r3
 800b3d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3d4:	2a39      	cmp	r2, #57	; 0x39
 800b3d6:	d106      	bne.n	800b3e6 <_dtoa_r+0x6de>
 800b3d8:	9a01      	ldr	r2, [sp, #4]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d1f7      	bne.n	800b3ce <_dtoa_r+0x6c6>
 800b3de:	9901      	ldr	r1, [sp, #4]
 800b3e0:	2230      	movs	r2, #48	; 0x30
 800b3e2:	3701      	adds	r7, #1
 800b3e4:	700a      	strb	r2, [r1, #0]
 800b3e6:	781a      	ldrb	r2, [r3, #0]
 800b3e8:	3201      	adds	r2, #1
 800b3ea:	701a      	strb	r2, [r3, #0]
 800b3ec:	e790      	b.n	800b310 <_dtoa_r+0x608>
 800b3ee:	4ba6      	ldr	r3, [pc, #664]	; (800b688 <_dtoa_r+0x980>)
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f7f5 f911 	bl	8000618 <__aeabi_dmul>
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	460f      	mov	r7, r1
 800b3fe:	f7f5 fb73 	bl	8000ae8 <__aeabi_dcmpeq>
 800b402:	2800      	cmp	r0, #0
 800b404:	d09d      	beq.n	800b342 <_dtoa_r+0x63a>
 800b406:	e7cf      	b.n	800b3a8 <_dtoa_r+0x6a0>
 800b408:	9a08      	ldr	r2, [sp, #32]
 800b40a:	2a00      	cmp	r2, #0
 800b40c:	f000 80d7 	beq.w	800b5be <_dtoa_r+0x8b6>
 800b410:	9a06      	ldr	r2, [sp, #24]
 800b412:	2a01      	cmp	r2, #1
 800b414:	f300 80ba 	bgt.w	800b58c <_dtoa_r+0x884>
 800b418:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b41a:	2a00      	cmp	r2, #0
 800b41c:	f000 80b2 	beq.w	800b584 <_dtoa_r+0x87c>
 800b420:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b424:	9e07      	ldr	r6, [sp, #28]
 800b426:	9d04      	ldr	r5, [sp, #16]
 800b428:	9a04      	ldr	r2, [sp, #16]
 800b42a:	441a      	add	r2, r3
 800b42c:	9204      	str	r2, [sp, #16]
 800b42e:	9a05      	ldr	r2, [sp, #20]
 800b430:	2101      	movs	r1, #1
 800b432:	441a      	add	r2, r3
 800b434:	4620      	mov	r0, r4
 800b436:	9205      	str	r2, [sp, #20]
 800b438:	f001 f940 	bl	800c6bc <__i2b>
 800b43c:	4607      	mov	r7, r0
 800b43e:	2d00      	cmp	r5, #0
 800b440:	dd0c      	ble.n	800b45c <_dtoa_r+0x754>
 800b442:	9b05      	ldr	r3, [sp, #20]
 800b444:	2b00      	cmp	r3, #0
 800b446:	dd09      	ble.n	800b45c <_dtoa_r+0x754>
 800b448:	42ab      	cmp	r3, r5
 800b44a:	9a04      	ldr	r2, [sp, #16]
 800b44c:	bfa8      	it	ge
 800b44e:	462b      	movge	r3, r5
 800b450:	1ad2      	subs	r2, r2, r3
 800b452:	9204      	str	r2, [sp, #16]
 800b454:	9a05      	ldr	r2, [sp, #20]
 800b456:	1aed      	subs	r5, r5, r3
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	9305      	str	r3, [sp, #20]
 800b45c:	9b07      	ldr	r3, [sp, #28]
 800b45e:	b31b      	cbz	r3, 800b4a8 <_dtoa_r+0x7a0>
 800b460:	9b08      	ldr	r3, [sp, #32]
 800b462:	2b00      	cmp	r3, #0
 800b464:	f000 80af 	beq.w	800b5c6 <_dtoa_r+0x8be>
 800b468:	2e00      	cmp	r6, #0
 800b46a:	dd13      	ble.n	800b494 <_dtoa_r+0x78c>
 800b46c:	4639      	mov	r1, r7
 800b46e:	4632      	mov	r2, r6
 800b470:	4620      	mov	r0, r4
 800b472:	f001 f9e3 	bl	800c83c <__pow5mult>
 800b476:	ee18 2a10 	vmov	r2, s16
 800b47a:	4601      	mov	r1, r0
 800b47c:	4607      	mov	r7, r0
 800b47e:	4620      	mov	r0, r4
 800b480:	f001 f932 	bl	800c6e8 <__multiply>
 800b484:	ee18 1a10 	vmov	r1, s16
 800b488:	4680      	mov	r8, r0
 800b48a:	4620      	mov	r0, r4
 800b48c:	f001 f814 	bl	800c4b8 <_Bfree>
 800b490:	ee08 8a10 	vmov	s16, r8
 800b494:	9b07      	ldr	r3, [sp, #28]
 800b496:	1b9a      	subs	r2, r3, r6
 800b498:	d006      	beq.n	800b4a8 <_dtoa_r+0x7a0>
 800b49a:	ee18 1a10 	vmov	r1, s16
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f001 f9cc 	bl	800c83c <__pow5mult>
 800b4a4:	ee08 0a10 	vmov	s16, r0
 800b4a8:	2101      	movs	r1, #1
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f001 f906 	bl	800c6bc <__i2b>
 800b4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	4606      	mov	r6, r0
 800b4b6:	f340 8088 	ble.w	800b5ca <_dtoa_r+0x8c2>
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	4601      	mov	r1, r0
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f001 f9bc 	bl	800c83c <__pow5mult>
 800b4c4:	9b06      	ldr	r3, [sp, #24]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	4606      	mov	r6, r0
 800b4ca:	f340 8081 	ble.w	800b5d0 <_dtoa_r+0x8c8>
 800b4ce:	f04f 0800 	mov.w	r8, #0
 800b4d2:	6933      	ldr	r3, [r6, #16]
 800b4d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b4d8:	6918      	ldr	r0, [r3, #16]
 800b4da:	f001 f89f 	bl	800c61c <__hi0bits>
 800b4de:	f1c0 0020 	rsb	r0, r0, #32
 800b4e2:	9b05      	ldr	r3, [sp, #20]
 800b4e4:	4418      	add	r0, r3
 800b4e6:	f010 001f 	ands.w	r0, r0, #31
 800b4ea:	f000 8092 	beq.w	800b612 <_dtoa_r+0x90a>
 800b4ee:	f1c0 0320 	rsb	r3, r0, #32
 800b4f2:	2b04      	cmp	r3, #4
 800b4f4:	f340 808a 	ble.w	800b60c <_dtoa_r+0x904>
 800b4f8:	f1c0 001c 	rsb	r0, r0, #28
 800b4fc:	9b04      	ldr	r3, [sp, #16]
 800b4fe:	4403      	add	r3, r0
 800b500:	9304      	str	r3, [sp, #16]
 800b502:	9b05      	ldr	r3, [sp, #20]
 800b504:	4403      	add	r3, r0
 800b506:	4405      	add	r5, r0
 800b508:	9305      	str	r3, [sp, #20]
 800b50a:	9b04      	ldr	r3, [sp, #16]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	dd07      	ble.n	800b520 <_dtoa_r+0x818>
 800b510:	ee18 1a10 	vmov	r1, s16
 800b514:	461a      	mov	r2, r3
 800b516:	4620      	mov	r0, r4
 800b518:	f001 f9ea 	bl	800c8f0 <__lshift>
 800b51c:	ee08 0a10 	vmov	s16, r0
 800b520:	9b05      	ldr	r3, [sp, #20]
 800b522:	2b00      	cmp	r3, #0
 800b524:	dd05      	ble.n	800b532 <_dtoa_r+0x82a>
 800b526:	4631      	mov	r1, r6
 800b528:	461a      	mov	r2, r3
 800b52a:	4620      	mov	r0, r4
 800b52c:	f001 f9e0 	bl	800c8f0 <__lshift>
 800b530:	4606      	mov	r6, r0
 800b532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b534:	2b00      	cmp	r3, #0
 800b536:	d06e      	beq.n	800b616 <_dtoa_r+0x90e>
 800b538:	ee18 0a10 	vmov	r0, s16
 800b53c:	4631      	mov	r1, r6
 800b53e:	f001 fa47 	bl	800c9d0 <__mcmp>
 800b542:	2800      	cmp	r0, #0
 800b544:	da67      	bge.n	800b616 <_dtoa_r+0x90e>
 800b546:	9b00      	ldr	r3, [sp, #0]
 800b548:	3b01      	subs	r3, #1
 800b54a:	ee18 1a10 	vmov	r1, s16
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	220a      	movs	r2, #10
 800b552:	2300      	movs	r3, #0
 800b554:	4620      	mov	r0, r4
 800b556:	f000 ffd1 	bl	800c4fc <__multadd>
 800b55a:	9b08      	ldr	r3, [sp, #32]
 800b55c:	ee08 0a10 	vmov	s16, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	f000 81b1 	beq.w	800b8c8 <_dtoa_r+0xbc0>
 800b566:	2300      	movs	r3, #0
 800b568:	4639      	mov	r1, r7
 800b56a:	220a      	movs	r2, #10
 800b56c:	4620      	mov	r0, r4
 800b56e:	f000 ffc5 	bl	800c4fc <__multadd>
 800b572:	9b02      	ldr	r3, [sp, #8]
 800b574:	2b00      	cmp	r3, #0
 800b576:	4607      	mov	r7, r0
 800b578:	f300 808e 	bgt.w	800b698 <_dtoa_r+0x990>
 800b57c:	9b06      	ldr	r3, [sp, #24]
 800b57e:	2b02      	cmp	r3, #2
 800b580:	dc51      	bgt.n	800b626 <_dtoa_r+0x91e>
 800b582:	e089      	b.n	800b698 <_dtoa_r+0x990>
 800b584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b586:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b58a:	e74b      	b.n	800b424 <_dtoa_r+0x71c>
 800b58c:	9b03      	ldr	r3, [sp, #12]
 800b58e:	1e5e      	subs	r6, r3, #1
 800b590:	9b07      	ldr	r3, [sp, #28]
 800b592:	42b3      	cmp	r3, r6
 800b594:	bfbf      	itttt	lt
 800b596:	9b07      	ldrlt	r3, [sp, #28]
 800b598:	9607      	strlt	r6, [sp, #28]
 800b59a:	1af2      	sublt	r2, r6, r3
 800b59c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b59e:	bfb6      	itet	lt
 800b5a0:	189b      	addlt	r3, r3, r2
 800b5a2:	1b9e      	subge	r6, r3, r6
 800b5a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b5a6:	9b03      	ldr	r3, [sp, #12]
 800b5a8:	bfb8      	it	lt
 800b5aa:	2600      	movlt	r6, #0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	bfb7      	itett	lt
 800b5b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b5b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b5b8:	1a9d      	sublt	r5, r3, r2
 800b5ba:	2300      	movlt	r3, #0
 800b5bc:	e734      	b.n	800b428 <_dtoa_r+0x720>
 800b5be:	9e07      	ldr	r6, [sp, #28]
 800b5c0:	9d04      	ldr	r5, [sp, #16]
 800b5c2:	9f08      	ldr	r7, [sp, #32]
 800b5c4:	e73b      	b.n	800b43e <_dtoa_r+0x736>
 800b5c6:	9a07      	ldr	r2, [sp, #28]
 800b5c8:	e767      	b.n	800b49a <_dtoa_r+0x792>
 800b5ca:	9b06      	ldr	r3, [sp, #24]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	dc18      	bgt.n	800b602 <_dtoa_r+0x8fa>
 800b5d0:	f1ba 0f00 	cmp.w	sl, #0
 800b5d4:	d115      	bne.n	800b602 <_dtoa_r+0x8fa>
 800b5d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5da:	b993      	cbnz	r3, 800b602 <_dtoa_r+0x8fa>
 800b5dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b5e0:	0d1b      	lsrs	r3, r3, #20
 800b5e2:	051b      	lsls	r3, r3, #20
 800b5e4:	b183      	cbz	r3, 800b608 <_dtoa_r+0x900>
 800b5e6:	9b04      	ldr	r3, [sp, #16]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	9304      	str	r3, [sp, #16]
 800b5ec:	9b05      	ldr	r3, [sp, #20]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	9305      	str	r3, [sp, #20]
 800b5f2:	f04f 0801 	mov.w	r8, #1
 800b5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f47f af6a 	bne.w	800b4d2 <_dtoa_r+0x7ca>
 800b5fe:	2001      	movs	r0, #1
 800b600:	e76f      	b.n	800b4e2 <_dtoa_r+0x7da>
 800b602:	f04f 0800 	mov.w	r8, #0
 800b606:	e7f6      	b.n	800b5f6 <_dtoa_r+0x8ee>
 800b608:	4698      	mov	r8, r3
 800b60a:	e7f4      	b.n	800b5f6 <_dtoa_r+0x8ee>
 800b60c:	f43f af7d 	beq.w	800b50a <_dtoa_r+0x802>
 800b610:	4618      	mov	r0, r3
 800b612:	301c      	adds	r0, #28
 800b614:	e772      	b.n	800b4fc <_dtoa_r+0x7f4>
 800b616:	9b03      	ldr	r3, [sp, #12]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	dc37      	bgt.n	800b68c <_dtoa_r+0x984>
 800b61c:	9b06      	ldr	r3, [sp, #24]
 800b61e:	2b02      	cmp	r3, #2
 800b620:	dd34      	ble.n	800b68c <_dtoa_r+0x984>
 800b622:	9b03      	ldr	r3, [sp, #12]
 800b624:	9302      	str	r3, [sp, #8]
 800b626:	9b02      	ldr	r3, [sp, #8]
 800b628:	b96b      	cbnz	r3, 800b646 <_dtoa_r+0x93e>
 800b62a:	4631      	mov	r1, r6
 800b62c:	2205      	movs	r2, #5
 800b62e:	4620      	mov	r0, r4
 800b630:	f000 ff64 	bl	800c4fc <__multadd>
 800b634:	4601      	mov	r1, r0
 800b636:	4606      	mov	r6, r0
 800b638:	ee18 0a10 	vmov	r0, s16
 800b63c:	f001 f9c8 	bl	800c9d0 <__mcmp>
 800b640:	2800      	cmp	r0, #0
 800b642:	f73f adbb 	bgt.w	800b1bc <_dtoa_r+0x4b4>
 800b646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b648:	9d01      	ldr	r5, [sp, #4]
 800b64a:	43db      	mvns	r3, r3
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	f04f 0800 	mov.w	r8, #0
 800b652:	4631      	mov	r1, r6
 800b654:	4620      	mov	r0, r4
 800b656:	f000 ff2f 	bl	800c4b8 <_Bfree>
 800b65a:	2f00      	cmp	r7, #0
 800b65c:	f43f aea4 	beq.w	800b3a8 <_dtoa_r+0x6a0>
 800b660:	f1b8 0f00 	cmp.w	r8, #0
 800b664:	d005      	beq.n	800b672 <_dtoa_r+0x96a>
 800b666:	45b8      	cmp	r8, r7
 800b668:	d003      	beq.n	800b672 <_dtoa_r+0x96a>
 800b66a:	4641      	mov	r1, r8
 800b66c:	4620      	mov	r0, r4
 800b66e:	f000 ff23 	bl	800c4b8 <_Bfree>
 800b672:	4639      	mov	r1, r7
 800b674:	4620      	mov	r0, r4
 800b676:	f000 ff1f 	bl	800c4b8 <_Bfree>
 800b67a:	e695      	b.n	800b3a8 <_dtoa_r+0x6a0>
 800b67c:	2600      	movs	r6, #0
 800b67e:	4637      	mov	r7, r6
 800b680:	e7e1      	b.n	800b646 <_dtoa_r+0x93e>
 800b682:	9700      	str	r7, [sp, #0]
 800b684:	4637      	mov	r7, r6
 800b686:	e599      	b.n	800b1bc <_dtoa_r+0x4b4>
 800b688:	40240000 	.word	0x40240000
 800b68c:	9b08      	ldr	r3, [sp, #32]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	f000 80ca 	beq.w	800b828 <_dtoa_r+0xb20>
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	9302      	str	r3, [sp, #8]
 800b698:	2d00      	cmp	r5, #0
 800b69a:	dd05      	ble.n	800b6a8 <_dtoa_r+0x9a0>
 800b69c:	4639      	mov	r1, r7
 800b69e:	462a      	mov	r2, r5
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f001 f925 	bl	800c8f0 <__lshift>
 800b6a6:	4607      	mov	r7, r0
 800b6a8:	f1b8 0f00 	cmp.w	r8, #0
 800b6ac:	d05b      	beq.n	800b766 <_dtoa_r+0xa5e>
 800b6ae:	6879      	ldr	r1, [r7, #4]
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f000 fec1 	bl	800c438 <_Balloc>
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	b928      	cbnz	r0, 800b6c6 <_dtoa_r+0x9be>
 800b6ba:	4b87      	ldr	r3, [pc, #540]	; (800b8d8 <_dtoa_r+0xbd0>)
 800b6bc:	4602      	mov	r2, r0
 800b6be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b6c2:	f7ff bb3b 	b.w	800ad3c <_dtoa_r+0x34>
 800b6c6:	693a      	ldr	r2, [r7, #16]
 800b6c8:	3202      	adds	r2, #2
 800b6ca:	0092      	lsls	r2, r2, #2
 800b6cc:	f107 010c 	add.w	r1, r7, #12
 800b6d0:	300c      	adds	r0, #12
 800b6d2:	f000 fe97 	bl	800c404 <memcpy>
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	4629      	mov	r1, r5
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f001 f908 	bl	800c8f0 <__lshift>
 800b6e0:	9b01      	ldr	r3, [sp, #4]
 800b6e2:	f103 0901 	add.w	r9, r3, #1
 800b6e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	9305      	str	r3, [sp, #20]
 800b6ee:	f00a 0301 	and.w	r3, sl, #1
 800b6f2:	46b8      	mov	r8, r7
 800b6f4:	9304      	str	r3, [sp, #16]
 800b6f6:	4607      	mov	r7, r0
 800b6f8:	4631      	mov	r1, r6
 800b6fa:	ee18 0a10 	vmov	r0, s16
 800b6fe:	f7ff fa77 	bl	800abf0 <quorem>
 800b702:	4641      	mov	r1, r8
 800b704:	9002      	str	r0, [sp, #8]
 800b706:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b70a:	ee18 0a10 	vmov	r0, s16
 800b70e:	f001 f95f 	bl	800c9d0 <__mcmp>
 800b712:	463a      	mov	r2, r7
 800b714:	9003      	str	r0, [sp, #12]
 800b716:	4631      	mov	r1, r6
 800b718:	4620      	mov	r0, r4
 800b71a:	f001 f975 	bl	800ca08 <__mdiff>
 800b71e:	68c2      	ldr	r2, [r0, #12]
 800b720:	f109 3bff 	add.w	fp, r9, #4294967295
 800b724:	4605      	mov	r5, r0
 800b726:	bb02      	cbnz	r2, 800b76a <_dtoa_r+0xa62>
 800b728:	4601      	mov	r1, r0
 800b72a:	ee18 0a10 	vmov	r0, s16
 800b72e:	f001 f94f 	bl	800c9d0 <__mcmp>
 800b732:	4602      	mov	r2, r0
 800b734:	4629      	mov	r1, r5
 800b736:	4620      	mov	r0, r4
 800b738:	9207      	str	r2, [sp, #28]
 800b73a:	f000 febd 	bl	800c4b8 <_Bfree>
 800b73e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b742:	ea43 0102 	orr.w	r1, r3, r2
 800b746:	9b04      	ldr	r3, [sp, #16]
 800b748:	430b      	orrs	r3, r1
 800b74a:	464d      	mov	r5, r9
 800b74c:	d10f      	bne.n	800b76e <_dtoa_r+0xa66>
 800b74e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b752:	d02a      	beq.n	800b7aa <_dtoa_r+0xaa2>
 800b754:	9b03      	ldr	r3, [sp, #12]
 800b756:	2b00      	cmp	r3, #0
 800b758:	dd02      	ble.n	800b760 <_dtoa_r+0xa58>
 800b75a:	9b02      	ldr	r3, [sp, #8]
 800b75c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b760:	f88b a000 	strb.w	sl, [fp]
 800b764:	e775      	b.n	800b652 <_dtoa_r+0x94a>
 800b766:	4638      	mov	r0, r7
 800b768:	e7ba      	b.n	800b6e0 <_dtoa_r+0x9d8>
 800b76a:	2201      	movs	r2, #1
 800b76c:	e7e2      	b.n	800b734 <_dtoa_r+0xa2c>
 800b76e:	9b03      	ldr	r3, [sp, #12]
 800b770:	2b00      	cmp	r3, #0
 800b772:	db04      	blt.n	800b77e <_dtoa_r+0xa76>
 800b774:	9906      	ldr	r1, [sp, #24]
 800b776:	430b      	orrs	r3, r1
 800b778:	9904      	ldr	r1, [sp, #16]
 800b77a:	430b      	orrs	r3, r1
 800b77c:	d122      	bne.n	800b7c4 <_dtoa_r+0xabc>
 800b77e:	2a00      	cmp	r2, #0
 800b780:	ddee      	ble.n	800b760 <_dtoa_r+0xa58>
 800b782:	ee18 1a10 	vmov	r1, s16
 800b786:	2201      	movs	r2, #1
 800b788:	4620      	mov	r0, r4
 800b78a:	f001 f8b1 	bl	800c8f0 <__lshift>
 800b78e:	4631      	mov	r1, r6
 800b790:	ee08 0a10 	vmov	s16, r0
 800b794:	f001 f91c 	bl	800c9d0 <__mcmp>
 800b798:	2800      	cmp	r0, #0
 800b79a:	dc03      	bgt.n	800b7a4 <_dtoa_r+0xa9c>
 800b79c:	d1e0      	bne.n	800b760 <_dtoa_r+0xa58>
 800b79e:	f01a 0f01 	tst.w	sl, #1
 800b7a2:	d0dd      	beq.n	800b760 <_dtoa_r+0xa58>
 800b7a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b7a8:	d1d7      	bne.n	800b75a <_dtoa_r+0xa52>
 800b7aa:	2339      	movs	r3, #57	; 0x39
 800b7ac:	f88b 3000 	strb.w	r3, [fp]
 800b7b0:	462b      	mov	r3, r5
 800b7b2:	461d      	mov	r5, r3
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b7ba:	2a39      	cmp	r2, #57	; 0x39
 800b7bc:	d071      	beq.n	800b8a2 <_dtoa_r+0xb9a>
 800b7be:	3201      	adds	r2, #1
 800b7c0:	701a      	strb	r2, [r3, #0]
 800b7c2:	e746      	b.n	800b652 <_dtoa_r+0x94a>
 800b7c4:	2a00      	cmp	r2, #0
 800b7c6:	dd07      	ble.n	800b7d8 <_dtoa_r+0xad0>
 800b7c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b7cc:	d0ed      	beq.n	800b7aa <_dtoa_r+0xaa2>
 800b7ce:	f10a 0301 	add.w	r3, sl, #1
 800b7d2:	f88b 3000 	strb.w	r3, [fp]
 800b7d6:	e73c      	b.n	800b652 <_dtoa_r+0x94a>
 800b7d8:	9b05      	ldr	r3, [sp, #20]
 800b7da:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b7de:	4599      	cmp	r9, r3
 800b7e0:	d047      	beq.n	800b872 <_dtoa_r+0xb6a>
 800b7e2:	ee18 1a10 	vmov	r1, s16
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	220a      	movs	r2, #10
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f000 fe86 	bl	800c4fc <__multadd>
 800b7f0:	45b8      	cmp	r8, r7
 800b7f2:	ee08 0a10 	vmov	s16, r0
 800b7f6:	f04f 0300 	mov.w	r3, #0
 800b7fa:	f04f 020a 	mov.w	r2, #10
 800b7fe:	4641      	mov	r1, r8
 800b800:	4620      	mov	r0, r4
 800b802:	d106      	bne.n	800b812 <_dtoa_r+0xb0a>
 800b804:	f000 fe7a 	bl	800c4fc <__multadd>
 800b808:	4680      	mov	r8, r0
 800b80a:	4607      	mov	r7, r0
 800b80c:	f109 0901 	add.w	r9, r9, #1
 800b810:	e772      	b.n	800b6f8 <_dtoa_r+0x9f0>
 800b812:	f000 fe73 	bl	800c4fc <__multadd>
 800b816:	4639      	mov	r1, r7
 800b818:	4680      	mov	r8, r0
 800b81a:	2300      	movs	r3, #0
 800b81c:	220a      	movs	r2, #10
 800b81e:	4620      	mov	r0, r4
 800b820:	f000 fe6c 	bl	800c4fc <__multadd>
 800b824:	4607      	mov	r7, r0
 800b826:	e7f1      	b.n	800b80c <_dtoa_r+0xb04>
 800b828:	9b03      	ldr	r3, [sp, #12]
 800b82a:	9302      	str	r3, [sp, #8]
 800b82c:	9d01      	ldr	r5, [sp, #4]
 800b82e:	ee18 0a10 	vmov	r0, s16
 800b832:	4631      	mov	r1, r6
 800b834:	f7ff f9dc 	bl	800abf0 <quorem>
 800b838:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b83c:	9b01      	ldr	r3, [sp, #4]
 800b83e:	f805 ab01 	strb.w	sl, [r5], #1
 800b842:	1aea      	subs	r2, r5, r3
 800b844:	9b02      	ldr	r3, [sp, #8]
 800b846:	4293      	cmp	r3, r2
 800b848:	dd09      	ble.n	800b85e <_dtoa_r+0xb56>
 800b84a:	ee18 1a10 	vmov	r1, s16
 800b84e:	2300      	movs	r3, #0
 800b850:	220a      	movs	r2, #10
 800b852:	4620      	mov	r0, r4
 800b854:	f000 fe52 	bl	800c4fc <__multadd>
 800b858:	ee08 0a10 	vmov	s16, r0
 800b85c:	e7e7      	b.n	800b82e <_dtoa_r+0xb26>
 800b85e:	9b02      	ldr	r3, [sp, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	bfc8      	it	gt
 800b864:	461d      	movgt	r5, r3
 800b866:	9b01      	ldr	r3, [sp, #4]
 800b868:	bfd8      	it	le
 800b86a:	2501      	movle	r5, #1
 800b86c:	441d      	add	r5, r3
 800b86e:	f04f 0800 	mov.w	r8, #0
 800b872:	ee18 1a10 	vmov	r1, s16
 800b876:	2201      	movs	r2, #1
 800b878:	4620      	mov	r0, r4
 800b87a:	f001 f839 	bl	800c8f0 <__lshift>
 800b87e:	4631      	mov	r1, r6
 800b880:	ee08 0a10 	vmov	s16, r0
 800b884:	f001 f8a4 	bl	800c9d0 <__mcmp>
 800b888:	2800      	cmp	r0, #0
 800b88a:	dc91      	bgt.n	800b7b0 <_dtoa_r+0xaa8>
 800b88c:	d102      	bne.n	800b894 <_dtoa_r+0xb8c>
 800b88e:	f01a 0f01 	tst.w	sl, #1
 800b892:	d18d      	bne.n	800b7b0 <_dtoa_r+0xaa8>
 800b894:	462b      	mov	r3, r5
 800b896:	461d      	mov	r5, r3
 800b898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b89c:	2a30      	cmp	r2, #48	; 0x30
 800b89e:	d0fa      	beq.n	800b896 <_dtoa_r+0xb8e>
 800b8a0:	e6d7      	b.n	800b652 <_dtoa_r+0x94a>
 800b8a2:	9a01      	ldr	r2, [sp, #4]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d184      	bne.n	800b7b2 <_dtoa_r+0xaaa>
 800b8a8:	9b00      	ldr	r3, [sp, #0]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	2331      	movs	r3, #49	; 0x31
 800b8b0:	7013      	strb	r3, [r2, #0]
 800b8b2:	e6ce      	b.n	800b652 <_dtoa_r+0x94a>
 800b8b4:	4b09      	ldr	r3, [pc, #36]	; (800b8dc <_dtoa_r+0xbd4>)
 800b8b6:	f7ff ba95 	b.w	800ade4 <_dtoa_r+0xdc>
 800b8ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f47f aa6e 	bne.w	800ad9e <_dtoa_r+0x96>
 800b8c2:	4b07      	ldr	r3, [pc, #28]	; (800b8e0 <_dtoa_r+0xbd8>)
 800b8c4:	f7ff ba8e 	b.w	800ade4 <_dtoa_r+0xdc>
 800b8c8:	9b02      	ldr	r3, [sp, #8]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	dcae      	bgt.n	800b82c <_dtoa_r+0xb24>
 800b8ce:	9b06      	ldr	r3, [sp, #24]
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	f73f aea8 	bgt.w	800b626 <_dtoa_r+0x91e>
 800b8d6:	e7a9      	b.n	800b82c <_dtoa_r+0xb24>
 800b8d8:	0800e988 	.word	0x0800e988
 800b8dc:	0800ebe9 	.word	0x0800ebe9
 800b8e0:	0800e909 	.word	0x0800e909

0800b8e4 <__sflush_r>:
 800b8e4:	898a      	ldrh	r2, [r1, #12]
 800b8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ea:	4605      	mov	r5, r0
 800b8ec:	0710      	lsls	r0, r2, #28
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	d458      	bmi.n	800b9a4 <__sflush_r+0xc0>
 800b8f2:	684b      	ldr	r3, [r1, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	dc05      	bgt.n	800b904 <__sflush_r+0x20>
 800b8f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	dc02      	bgt.n	800b904 <__sflush_r+0x20>
 800b8fe:	2000      	movs	r0, #0
 800b900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b906:	2e00      	cmp	r6, #0
 800b908:	d0f9      	beq.n	800b8fe <__sflush_r+0x1a>
 800b90a:	2300      	movs	r3, #0
 800b90c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b910:	682f      	ldr	r7, [r5, #0]
 800b912:	602b      	str	r3, [r5, #0]
 800b914:	d032      	beq.n	800b97c <__sflush_r+0x98>
 800b916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b918:	89a3      	ldrh	r3, [r4, #12]
 800b91a:	075a      	lsls	r2, r3, #29
 800b91c:	d505      	bpl.n	800b92a <__sflush_r+0x46>
 800b91e:	6863      	ldr	r3, [r4, #4]
 800b920:	1ac0      	subs	r0, r0, r3
 800b922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b924:	b10b      	cbz	r3, 800b92a <__sflush_r+0x46>
 800b926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b928:	1ac0      	subs	r0, r0, r3
 800b92a:	2300      	movs	r3, #0
 800b92c:	4602      	mov	r2, r0
 800b92e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b930:	6a21      	ldr	r1, [r4, #32]
 800b932:	4628      	mov	r0, r5
 800b934:	47b0      	blx	r6
 800b936:	1c43      	adds	r3, r0, #1
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	d106      	bne.n	800b94a <__sflush_r+0x66>
 800b93c:	6829      	ldr	r1, [r5, #0]
 800b93e:	291d      	cmp	r1, #29
 800b940:	d82c      	bhi.n	800b99c <__sflush_r+0xb8>
 800b942:	4a2a      	ldr	r2, [pc, #168]	; (800b9ec <__sflush_r+0x108>)
 800b944:	40ca      	lsrs	r2, r1
 800b946:	07d6      	lsls	r6, r2, #31
 800b948:	d528      	bpl.n	800b99c <__sflush_r+0xb8>
 800b94a:	2200      	movs	r2, #0
 800b94c:	6062      	str	r2, [r4, #4]
 800b94e:	04d9      	lsls	r1, r3, #19
 800b950:	6922      	ldr	r2, [r4, #16]
 800b952:	6022      	str	r2, [r4, #0]
 800b954:	d504      	bpl.n	800b960 <__sflush_r+0x7c>
 800b956:	1c42      	adds	r2, r0, #1
 800b958:	d101      	bne.n	800b95e <__sflush_r+0x7a>
 800b95a:	682b      	ldr	r3, [r5, #0]
 800b95c:	b903      	cbnz	r3, 800b960 <__sflush_r+0x7c>
 800b95e:	6560      	str	r0, [r4, #84]	; 0x54
 800b960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b962:	602f      	str	r7, [r5, #0]
 800b964:	2900      	cmp	r1, #0
 800b966:	d0ca      	beq.n	800b8fe <__sflush_r+0x1a>
 800b968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b96c:	4299      	cmp	r1, r3
 800b96e:	d002      	beq.n	800b976 <__sflush_r+0x92>
 800b970:	4628      	mov	r0, r5
 800b972:	f7fc ff7d 	bl	8008870 <_free_r>
 800b976:	2000      	movs	r0, #0
 800b978:	6360      	str	r0, [r4, #52]	; 0x34
 800b97a:	e7c1      	b.n	800b900 <__sflush_r+0x1c>
 800b97c:	6a21      	ldr	r1, [r4, #32]
 800b97e:	2301      	movs	r3, #1
 800b980:	4628      	mov	r0, r5
 800b982:	47b0      	blx	r6
 800b984:	1c41      	adds	r1, r0, #1
 800b986:	d1c7      	bne.n	800b918 <__sflush_r+0x34>
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d0c4      	beq.n	800b918 <__sflush_r+0x34>
 800b98e:	2b1d      	cmp	r3, #29
 800b990:	d001      	beq.n	800b996 <__sflush_r+0xb2>
 800b992:	2b16      	cmp	r3, #22
 800b994:	d101      	bne.n	800b99a <__sflush_r+0xb6>
 800b996:	602f      	str	r7, [r5, #0]
 800b998:	e7b1      	b.n	800b8fe <__sflush_r+0x1a>
 800b99a:	89a3      	ldrh	r3, [r4, #12]
 800b99c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9a0:	81a3      	strh	r3, [r4, #12]
 800b9a2:	e7ad      	b.n	800b900 <__sflush_r+0x1c>
 800b9a4:	690f      	ldr	r7, [r1, #16]
 800b9a6:	2f00      	cmp	r7, #0
 800b9a8:	d0a9      	beq.n	800b8fe <__sflush_r+0x1a>
 800b9aa:	0793      	lsls	r3, r2, #30
 800b9ac:	680e      	ldr	r6, [r1, #0]
 800b9ae:	bf08      	it	eq
 800b9b0:	694b      	ldreq	r3, [r1, #20]
 800b9b2:	600f      	str	r7, [r1, #0]
 800b9b4:	bf18      	it	ne
 800b9b6:	2300      	movne	r3, #0
 800b9b8:	eba6 0807 	sub.w	r8, r6, r7
 800b9bc:	608b      	str	r3, [r1, #8]
 800b9be:	f1b8 0f00 	cmp.w	r8, #0
 800b9c2:	dd9c      	ble.n	800b8fe <__sflush_r+0x1a>
 800b9c4:	6a21      	ldr	r1, [r4, #32]
 800b9c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9c8:	4643      	mov	r3, r8
 800b9ca:	463a      	mov	r2, r7
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	47b0      	blx	r6
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	dc06      	bgt.n	800b9e2 <__sflush_r+0xfe>
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9da:	81a3      	strh	r3, [r4, #12]
 800b9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e0:	e78e      	b.n	800b900 <__sflush_r+0x1c>
 800b9e2:	4407      	add	r7, r0
 800b9e4:	eba8 0800 	sub.w	r8, r8, r0
 800b9e8:	e7e9      	b.n	800b9be <__sflush_r+0xda>
 800b9ea:	bf00      	nop
 800b9ec:	20400001 	.word	0x20400001

0800b9f0 <_fflush_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	690b      	ldr	r3, [r1, #16]
 800b9f4:	4605      	mov	r5, r0
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	b913      	cbnz	r3, 800ba00 <_fflush_r+0x10>
 800b9fa:	2500      	movs	r5, #0
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ba00:	b118      	cbz	r0, 800ba0a <_fflush_r+0x1a>
 800ba02:	6983      	ldr	r3, [r0, #24]
 800ba04:	b90b      	cbnz	r3, 800ba0a <_fflush_r+0x1a>
 800ba06:	f000 f8c5 	bl	800bb94 <__sinit>
 800ba0a:	4b14      	ldr	r3, [pc, #80]	; (800ba5c <_fflush_r+0x6c>)
 800ba0c:	429c      	cmp	r4, r3
 800ba0e:	d11b      	bne.n	800ba48 <_fflush_r+0x58>
 800ba10:	686c      	ldr	r4, [r5, #4]
 800ba12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d0ef      	beq.n	800b9fa <_fflush_r+0xa>
 800ba1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba1c:	07d0      	lsls	r0, r2, #31
 800ba1e:	d404      	bmi.n	800ba2a <_fflush_r+0x3a>
 800ba20:	0599      	lsls	r1, r3, #22
 800ba22:	d402      	bmi.n	800ba2a <_fflush_r+0x3a>
 800ba24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba26:	f000 fcc6 	bl	800c3b6 <__retarget_lock_acquire_recursive>
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	4621      	mov	r1, r4
 800ba2e:	f7ff ff59 	bl	800b8e4 <__sflush_r>
 800ba32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba34:	07da      	lsls	r2, r3, #31
 800ba36:	4605      	mov	r5, r0
 800ba38:	d4e0      	bmi.n	800b9fc <_fflush_r+0xc>
 800ba3a:	89a3      	ldrh	r3, [r4, #12]
 800ba3c:	059b      	lsls	r3, r3, #22
 800ba3e:	d4dd      	bmi.n	800b9fc <_fflush_r+0xc>
 800ba40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba42:	f000 fcb9 	bl	800c3b8 <__retarget_lock_release_recursive>
 800ba46:	e7d9      	b.n	800b9fc <_fflush_r+0xc>
 800ba48:	4b05      	ldr	r3, [pc, #20]	; (800ba60 <_fflush_r+0x70>)
 800ba4a:	429c      	cmp	r4, r3
 800ba4c:	d101      	bne.n	800ba52 <_fflush_r+0x62>
 800ba4e:	68ac      	ldr	r4, [r5, #8]
 800ba50:	e7df      	b.n	800ba12 <_fflush_r+0x22>
 800ba52:	4b04      	ldr	r3, [pc, #16]	; (800ba64 <_fflush_r+0x74>)
 800ba54:	429c      	cmp	r4, r3
 800ba56:	bf08      	it	eq
 800ba58:	68ec      	ldreq	r4, [r5, #12]
 800ba5a:	e7da      	b.n	800ba12 <_fflush_r+0x22>
 800ba5c:	0800e9bc 	.word	0x0800e9bc
 800ba60:	0800e9dc 	.word	0x0800e9dc
 800ba64:	0800e99c 	.word	0x0800e99c

0800ba68 <fileno>:
 800ba68:	b570      	push	{r4, r5, r6, lr}
 800ba6a:	4e1a      	ldr	r6, [pc, #104]	; (800bad4 <fileno+0x6c>)
 800ba6c:	6835      	ldr	r5, [r6, #0]
 800ba6e:	4604      	mov	r4, r0
 800ba70:	b125      	cbz	r5, 800ba7c <fileno+0x14>
 800ba72:	69ab      	ldr	r3, [r5, #24]
 800ba74:	b913      	cbnz	r3, 800ba7c <fileno+0x14>
 800ba76:	4628      	mov	r0, r5
 800ba78:	f000 f88c 	bl	800bb94 <__sinit>
 800ba7c:	4b16      	ldr	r3, [pc, #88]	; (800bad8 <fileno+0x70>)
 800ba7e:	429c      	cmp	r4, r3
 800ba80:	d118      	bne.n	800bab4 <fileno+0x4c>
 800ba82:	686c      	ldr	r4, [r5, #4]
 800ba84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba86:	07d8      	lsls	r0, r3, #31
 800ba88:	d405      	bmi.n	800ba96 <fileno+0x2e>
 800ba8a:	89a3      	ldrh	r3, [r4, #12]
 800ba8c:	0599      	lsls	r1, r3, #22
 800ba8e:	d402      	bmi.n	800ba96 <fileno+0x2e>
 800ba90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba92:	f000 fc90 	bl	800c3b6 <__retarget_lock_acquire_recursive>
 800ba96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba9a:	b1ab      	cbz	r3, 800bac8 <fileno+0x60>
 800ba9c:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800baa0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800baa2:	07d2      	lsls	r2, r2, #31
 800baa4:	d404      	bmi.n	800bab0 <fileno+0x48>
 800baa6:	059b      	lsls	r3, r3, #22
 800baa8:	d402      	bmi.n	800bab0 <fileno+0x48>
 800baaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baac:	f000 fc84 	bl	800c3b8 <__retarget_lock_release_recursive>
 800bab0:	4628      	mov	r0, r5
 800bab2:	bd70      	pop	{r4, r5, r6, pc}
 800bab4:	4b09      	ldr	r3, [pc, #36]	; (800badc <fileno+0x74>)
 800bab6:	429c      	cmp	r4, r3
 800bab8:	d101      	bne.n	800babe <fileno+0x56>
 800baba:	68ac      	ldr	r4, [r5, #8]
 800babc:	e7e2      	b.n	800ba84 <fileno+0x1c>
 800babe:	4b08      	ldr	r3, [pc, #32]	; (800bae0 <fileno+0x78>)
 800bac0:	429c      	cmp	r4, r3
 800bac2:	bf08      	it	eq
 800bac4:	68ec      	ldreq	r4, [r5, #12]
 800bac6:	e7dd      	b.n	800ba84 <fileno+0x1c>
 800bac8:	6832      	ldr	r2, [r6, #0]
 800baca:	2109      	movs	r1, #9
 800bacc:	6011      	str	r1, [r2, #0]
 800bace:	f04f 35ff 	mov.w	r5, #4294967295
 800bad2:	e7e5      	b.n	800baa0 <fileno+0x38>
 800bad4:	2000003c 	.word	0x2000003c
 800bad8:	0800e9bc 	.word	0x0800e9bc
 800badc:	0800e9dc 	.word	0x0800e9dc
 800bae0:	0800e99c 	.word	0x0800e99c

0800bae4 <std>:
 800bae4:	2300      	movs	r3, #0
 800bae6:	b510      	push	{r4, lr}
 800bae8:	4604      	mov	r4, r0
 800baea:	e9c0 3300 	strd	r3, r3, [r0]
 800baee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800baf2:	6083      	str	r3, [r0, #8]
 800baf4:	8181      	strh	r1, [r0, #12]
 800baf6:	6643      	str	r3, [r0, #100]	; 0x64
 800baf8:	81c2      	strh	r2, [r0, #14]
 800bafa:	6183      	str	r3, [r0, #24]
 800bafc:	4619      	mov	r1, r3
 800bafe:	2208      	movs	r2, #8
 800bb00:	305c      	adds	r0, #92	; 0x5c
 800bb02:	f7fc fead 	bl	8008860 <memset>
 800bb06:	4b05      	ldr	r3, [pc, #20]	; (800bb1c <std+0x38>)
 800bb08:	6263      	str	r3, [r4, #36]	; 0x24
 800bb0a:	4b05      	ldr	r3, [pc, #20]	; (800bb20 <std+0x3c>)
 800bb0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb0e:	4b05      	ldr	r3, [pc, #20]	; (800bb24 <std+0x40>)
 800bb10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb12:	4b05      	ldr	r3, [pc, #20]	; (800bb28 <std+0x44>)
 800bb14:	6224      	str	r4, [r4, #32]
 800bb16:	6323      	str	r3, [r4, #48]	; 0x30
 800bb18:	bd10      	pop	{r4, pc}
 800bb1a:	bf00      	nop
 800bb1c:	080099b5 	.word	0x080099b5
 800bb20:	080099db 	.word	0x080099db
 800bb24:	08009a13 	.word	0x08009a13
 800bb28:	08009a37 	.word	0x08009a37

0800bb2c <_cleanup_r>:
 800bb2c:	4901      	ldr	r1, [pc, #4]	; (800bb34 <_cleanup_r+0x8>)
 800bb2e:	f000 b8af 	b.w	800bc90 <_fwalk_reent>
 800bb32:	bf00      	nop
 800bb34:	0800b9f1 	.word	0x0800b9f1

0800bb38 <__sfmoreglue>:
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	2268      	movs	r2, #104	; 0x68
 800bb3c:	1e4d      	subs	r5, r1, #1
 800bb3e:	4355      	muls	r5, r2
 800bb40:	460e      	mov	r6, r1
 800bb42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb46:	f7fc feff 	bl	8008948 <_malloc_r>
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	b140      	cbz	r0, 800bb60 <__sfmoreglue+0x28>
 800bb4e:	2100      	movs	r1, #0
 800bb50:	e9c0 1600 	strd	r1, r6, [r0]
 800bb54:	300c      	adds	r0, #12
 800bb56:	60a0      	str	r0, [r4, #8]
 800bb58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb5c:	f7fc fe80 	bl	8008860 <memset>
 800bb60:	4620      	mov	r0, r4
 800bb62:	bd70      	pop	{r4, r5, r6, pc}

0800bb64 <__sfp_lock_acquire>:
 800bb64:	4801      	ldr	r0, [pc, #4]	; (800bb6c <__sfp_lock_acquire+0x8>)
 800bb66:	f000 bc26 	b.w	800c3b6 <__retarget_lock_acquire_recursive>
 800bb6a:	bf00      	nop
 800bb6c:	20000801 	.word	0x20000801

0800bb70 <__sfp_lock_release>:
 800bb70:	4801      	ldr	r0, [pc, #4]	; (800bb78 <__sfp_lock_release+0x8>)
 800bb72:	f000 bc21 	b.w	800c3b8 <__retarget_lock_release_recursive>
 800bb76:	bf00      	nop
 800bb78:	20000801 	.word	0x20000801

0800bb7c <__sinit_lock_acquire>:
 800bb7c:	4801      	ldr	r0, [pc, #4]	; (800bb84 <__sinit_lock_acquire+0x8>)
 800bb7e:	f000 bc1a 	b.w	800c3b6 <__retarget_lock_acquire_recursive>
 800bb82:	bf00      	nop
 800bb84:	20000802 	.word	0x20000802

0800bb88 <__sinit_lock_release>:
 800bb88:	4801      	ldr	r0, [pc, #4]	; (800bb90 <__sinit_lock_release+0x8>)
 800bb8a:	f000 bc15 	b.w	800c3b8 <__retarget_lock_release_recursive>
 800bb8e:	bf00      	nop
 800bb90:	20000802 	.word	0x20000802

0800bb94 <__sinit>:
 800bb94:	b510      	push	{r4, lr}
 800bb96:	4604      	mov	r4, r0
 800bb98:	f7ff fff0 	bl	800bb7c <__sinit_lock_acquire>
 800bb9c:	69a3      	ldr	r3, [r4, #24]
 800bb9e:	b11b      	cbz	r3, 800bba8 <__sinit+0x14>
 800bba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bba4:	f7ff bff0 	b.w	800bb88 <__sinit_lock_release>
 800bba8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bbac:	6523      	str	r3, [r4, #80]	; 0x50
 800bbae:	4b13      	ldr	r3, [pc, #76]	; (800bbfc <__sinit+0x68>)
 800bbb0:	4a13      	ldr	r2, [pc, #76]	; (800bc00 <__sinit+0x6c>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bbb6:	42a3      	cmp	r3, r4
 800bbb8:	bf04      	itt	eq
 800bbba:	2301      	moveq	r3, #1
 800bbbc:	61a3      	streq	r3, [r4, #24]
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f000 f820 	bl	800bc04 <__sfp>
 800bbc4:	6060      	str	r0, [r4, #4]
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f000 f81c 	bl	800bc04 <__sfp>
 800bbcc:	60a0      	str	r0, [r4, #8]
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f000 f818 	bl	800bc04 <__sfp>
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	60e0      	str	r0, [r4, #12]
 800bbd8:	2104      	movs	r1, #4
 800bbda:	6860      	ldr	r0, [r4, #4]
 800bbdc:	f7ff ff82 	bl	800bae4 <std>
 800bbe0:	68a0      	ldr	r0, [r4, #8]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	2109      	movs	r1, #9
 800bbe6:	f7ff ff7d 	bl	800bae4 <std>
 800bbea:	68e0      	ldr	r0, [r4, #12]
 800bbec:	2202      	movs	r2, #2
 800bbee:	2112      	movs	r1, #18
 800bbf0:	f7ff ff78 	bl	800bae4 <std>
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	61a3      	str	r3, [r4, #24]
 800bbf8:	e7d2      	b.n	800bba0 <__sinit+0xc>
 800bbfa:	bf00      	nop
 800bbfc:	0800e0e4 	.word	0x0800e0e4
 800bc00:	0800bb2d 	.word	0x0800bb2d

0800bc04 <__sfp>:
 800bc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc06:	4607      	mov	r7, r0
 800bc08:	f7ff ffac 	bl	800bb64 <__sfp_lock_acquire>
 800bc0c:	4b1e      	ldr	r3, [pc, #120]	; (800bc88 <__sfp+0x84>)
 800bc0e:	681e      	ldr	r6, [r3, #0]
 800bc10:	69b3      	ldr	r3, [r6, #24]
 800bc12:	b913      	cbnz	r3, 800bc1a <__sfp+0x16>
 800bc14:	4630      	mov	r0, r6
 800bc16:	f7ff ffbd 	bl	800bb94 <__sinit>
 800bc1a:	3648      	adds	r6, #72	; 0x48
 800bc1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc20:	3b01      	subs	r3, #1
 800bc22:	d503      	bpl.n	800bc2c <__sfp+0x28>
 800bc24:	6833      	ldr	r3, [r6, #0]
 800bc26:	b30b      	cbz	r3, 800bc6c <__sfp+0x68>
 800bc28:	6836      	ldr	r6, [r6, #0]
 800bc2a:	e7f7      	b.n	800bc1c <__sfp+0x18>
 800bc2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc30:	b9d5      	cbnz	r5, 800bc68 <__sfp+0x64>
 800bc32:	4b16      	ldr	r3, [pc, #88]	; (800bc8c <__sfp+0x88>)
 800bc34:	60e3      	str	r3, [r4, #12]
 800bc36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc3a:	6665      	str	r5, [r4, #100]	; 0x64
 800bc3c:	f000 fbba 	bl	800c3b4 <__retarget_lock_init_recursive>
 800bc40:	f7ff ff96 	bl	800bb70 <__sfp_lock_release>
 800bc44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc4c:	6025      	str	r5, [r4, #0]
 800bc4e:	61a5      	str	r5, [r4, #24]
 800bc50:	2208      	movs	r2, #8
 800bc52:	4629      	mov	r1, r5
 800bc54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc58:	f7fc fe02 	bl	8008860 <memset>
 800bc5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc64:	4620      	mov	r0, r4
 800bc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc68:	3468      	adds	r4, #104	; 0x68
 800bc6a:	e7d9      	b.n	800bc20 <__sfp+0x1c>
 800bc6c:	2104      	movs	r1, #4
 800bc6e:	4638      	mov	r0, r7
 800bc70:	f7ff ff62 	bl	800bb38 <__sfmoreglue>
 800bc74:	4604      	mov	r4, r0
 800bc76:	6030      	str	r0, [r6, #0]
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d1d5      	bne.n	800bc28 <__sfp+0x24>
 800bc7c:	f7ff ff78 	bl	800bb70 <__sfp_lock_release>
 800bc80:	230c      	movs	r3, #12
 800bc82:	603b      	str	r3, [r7, #0]
 800bc84:	e7ee      	b.n	800bc64 <__sfp+0x60>
 800bc86:	bf00      	nop
 800bc88:	0800e0e4 	.word	0x0800e0e4
 800bc8c:	ffff0001 	.word	0xffff0001

0800bc90 <_fwalk_reent>:
 800bc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc94:	4606      	mov	r6, r0
 800bc96:	4688      	mov	r8, r1
 800bc98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc9c:	2700      	movs	r7, #0
 800bc9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bca2:	f1b9 0901 	subs.w	r9, r9, #1
 800bca6:	d505      	bpl.n	800bcb4 <_fwalk_reent+0x24>
 800bca8:	6824      	ldr	r4, [r4, #0]
 800bcaa:	2c00      	cmp	r4, #0
 800bcac:	d1f7      	bne.n	800bc9e <_fwalk_reent+0xe>
 800bcae:	4638      	mov	r0, r7
 800bcb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcb4:	89ab      	ldrh	r3, [r5, #12]
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d907      	bls.n	800bcca <_fwalk_reent+0x3a>
 800bcba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	d003      	beq.n	800bcca <_fwalk_reent+0x3a>
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	47c0      	blx	r8
 800bcc8:	4307      	orrs	r7, r0
 800bcca:	3568      	adds	r5, #104	; 0x68
 800bccc:	e7e9      	b.n	800bca2 <_fwalk_reent+0x12>

0800bcce <rshift>:
 800bcce:	6903      	ldr	r3, [r0, #16]
 800bcd0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bcd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bcd8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bcdc:	f100 0414 	add.w	r4, r0, #20
 800bce0:	dd45      	ble.n	800bd6e <rshift+0xa0>
 800bce2:	f011 011f 	ands.w	r1, r1, #31
 800bce6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bcea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bcee:	d10c      	bne.n	800bd0a <rshift+0x3c>
 800bcf0:	f100 0710 	add.w	r7, r0, #16
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	42b1      	cmp	r1, r6
 800bcf8:	d334      	bcc.n	800bd64 <rshift+0x96>
 800bcfa:	1a9b      	subs	r3, r3, r2
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	1eea      	subs	r2, r5, #3
 800bd00:	4296      	cmp	r6, r2
 800bd02:	bf38      	it	cc
 800bd04:	2300      	movcc	r3, #0
 800bd06:	4423      	add	r3, r4
 800bd08:	e015      	b.n	800bd36 <rshift+0x68>
 800bd0a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bd0e:	f1c1 0820 	rsb	r8, r1, #32
 800bd12:	40cf      	lsrs	r7, r1
 800bd14:	f105 0e04 	add.w	lr, r5, #4
 800bd18:	46a1      	mov	r9, r4
 800bd1a:	4576      	cmp	r6, lr
 800bd1c:	46f4      	mov	ip, lr
 800bd1e:	d815      	bhi.n	800bd4c <rshift+0x7e>
 800bd20:	1a9a      	subs	r2, r3, r2
 800bd22:	0092      	lsls	r2, r2, #2
 800bd24:	3a04      	subs	r2, #4
 800bd26:	3501      	adds	r5, #1
 800bd28:	42ae      	cmp	r6, r5
 800bd2a:	bf38      	it	cc
 800bd2c:	2200      	movcc	r2, #0
 800bd2e:	18a3      	adds	r3, r4, r2
 800bd30:	50a7      	str	r7, [r4, r2]
 800bd32:	b107      	cbz	r7, 800bd36 <rshift+0x68>
 800bd34:	3304      	adds	r3, #4
 800bd36:	1b1a      	subs	r2, r3, r4
 800bd38:	42a3      	cmp	r3, r4
 800bd3a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd3e:	bf08      	it	eq
 800bd40:	2300      	moveq	r3, #0
 800bd42:	6102      	str	r2, [r0, #16]
 800bd44:	bf08      	it	eq
 800bd46:	6143      	streq	r3, [r0, #20]
 800bd48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd4c:	f8dc c000 	ldr.w	ip, [ip]
 800bd50:	fa0c fc08 	lsl.w	ip, ip, r8
 800bd54:	ea4c 0707 	orr.w	r7, ip, r7
 800bd58:	f849 7b04 	str.w	r7, [r9], #4
 800bd5c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd60:	40cf      	lsrs	r7, r1
 800bd62:	e7da      	b.n	800bd1a <rshift+0x4c>
 800bd64:	f851 cb04 	ldr.w	ip, [r1], #4
 800bd68:	f847 cf04 	str.w	ip, [r7, #4]!
 800bd6c:	e7c3      	b.n	800bcf6 <rshift+0x28>
 800bd6e:	4623      	mov	r3, r4
 800bd70:	e7e1      	b.n	800bd36 <rshift+0x68>

0800bd72 <__hexdig_fun>:
 800bd72:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bd76:	2b09      	cmp	r3, #9
 800bd78:	d802      	bhi.n	800bd80 <__hexdig_fun+0xe>
 800bd7a:	3820      	subs	r0, #32
 800bd7c:	b2c0      	uxtb	r0, r0
 800bd7e:	4770      	bx	lr
 800bd80:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bd84:	2b05      	cmp	r3, #5
 800bd86:	d801      	bhi.n	800bd8c <__hexdig_fun+0x1a>
 800bd88:	3847      	subs	r0, #71	; 0x47
 800bd8a:	e7f7      	b.n	800bd7c <__hexdig_fun+0xa>
 800bd8c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bd90:	2b05      	cmp	r3, #5
 800bd92:	d801      	bhi.n	800bd98 <__hexdig_fun+0x26>
 800bd94:	3827      	subs	r0, #39	; 0x27
 800bd96:	e7f1      	b.n	800bd7c <__hexdig_fun+0xa>
 800bd98:	2000      	movs	r0, #0
 800bd9a:	4770      	bx	lr

0800bd9c <__gethex>:
 800bd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda0:	ed2d 8b02 	vpush	{d8}
 800bda4:	b089      	sub	sp, #36	; 0x24
 800bda6:	ee08 0a10 	vmov	s16, r0
 800bdaa:	9304      	str	r3, [sp, #16]
 800bdac:	4bb4      	ldr	r3, [pc, #720]	; (800c080 <__gethex+0x2e4>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	9301      	str	r3, [sp, #4]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	468b      	mov	fp, r1
 800bdb6:	4690      	mov	r8, r2
 800bdb8:	f7f4 fa14 	bl	80001e4 <strlen>
 800bdbc:	9b01      	ldr	r3, [sp, #4]
 800bdbe:	f8db 2000 	ldr.w	r2, [fp]
 800bdc2:	4403      	add	r3, r0
 800bdc4:	4682      	mov	sl, r0
 800bdc6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bdca:	9305      	str	r3, [sp, #20]
 800bdcc:	1c93      	adds	r3, r2, #2
 800bdce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bdd2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bdd6:	32fe      	adds	r2, #254	; 0xfe
 800bdd8:	18d1      	adds	r1, r2, r3
 800bdda:	461f      	mov	r7, r3
 800bddc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bde0:	9100      	str	r1, [sp, #0]
 800bde2:	2830      	cmp	r0, #48	; 0x30
 800bde4:	d0f8      	beq.n	800bdd8 <__gethex+0x3c>
 800bde6:	f7ff ffc4 	bl	800bd72 <__hexdig_fun>
 800bdea:	4604      	mov	r4, r0
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d13a      	bne.n	800be66 <__gethex+0xca>
 800bdf0:	9901      	ldr	r1, [sp, #4]
 800bdf2:	4652      	mov	r2, sl
 800bdf4:	4638      	mov	r0, r7
 800bdf6:	f001 fcc7 	bl	800d788 <strncmp>
 800bdfa:	4605      	mov	r5, r0
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d168      	bne.n	800bed2 <__gethex+0x136>
 800be00:	f817 000a 	ldrb.w	r0, [r7, sl]
 800be04:	eb07 060a 	add.w	r6, r7, sl
 800be08:	f7ff ffb3 	bl	800bd72 <__hexdig_fun>
 800be0c:	2800      	cmp	r0, #0
 800be0e:	d062      	beq.n	800bed6 <__gethex+0x13a>
 800be10:	4633      	mov	r3, r6
 800be12:	7818      	ldrb	r0, [r3, #0]
 800be14:	2830      	cmp	r0, #48	; 0x30
 800be16:	461f      	mov	r7, r3
 800be18:	f103 0301 	add.w	r3, r3, #1
 800be1c:	d0f9      	beq.n	800be12 <__gethex+0x76>
 800be1e:	f7ff ffa8 	bl	800bd72 <__hexdig_fun>
 800be22:	2301      	movs	r3, #1
 800be24:	fab0 f480 	clz	r4, r0
 800be28:	0964      	lsrs	r4, r4, #5
 800be2a:	4635      	mov	r5, r6
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	463a      	mov	r2, r7
 800be30:	4616      	mov	r6, r2
 800be32:	3201      	adds	r2, #1
 800be34:	7830      	ldrb	r0, [r6, #0]
 800be36:	f7ff ff9c 	bl	800bd72 <__hexdig_fun>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d1f8      	bne.n	800be30 <__gethex+0x94>
 800be3e:	9901      	ldr	r1, [sp, #4]
 800be40:	4652      	mov	r2, sl
 800be42:	4630      	mov	r0, r6
 800be44:	f001 fca0 	bl	800d788 <strncmp>
 800be48:	b980      	cbnz	r0, 800be6c <__gethex+0xd0>
 800be4a:	b94d      	cbnz	r5, 800be60 <__gethex+0xc4>
 800be4c:	eb06 050a 	add.w	r5, r6, sl
 800be50:	462a      	mov	r2, r5
 800be52:	4616      	mov	r6, r2
 800be54:	3201      	adds	r2, #1
 800be56:	7830      	ldrb	r0, [r6, #0]
 800be58:	f7ff ff8b 	bl	800bd72 <__hexdig_fun>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d1f8      	bne.n	800be52 <__gethex+0xb6>
 800be60:	1bad      	subs	r5, r5, r6
 800be62:	00ad      	lsls	r5, r5, #2
 800be64:	e004      	b.n	800be70 <__gethex+0xd4>
 800be66:	2400      	movs	r4, #0
 800be68:	4625      	mov	r5, r4
 800be6a:	e7e0      	b.n	800be2e <__gethex+0x92>
 800be6c:	2d00      	cmp	r5, #0
 800be6e:	d1f7      	bne.n	800be60 <__gethex+0xc4>
 800be70:	7833      	ldrb	r3, [r6, #0]
 800be72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800be76:	2b50      	cmp	r3, #80	; 0x50
 800be78:	d13b      	bne.n	800bef2 <__gethex+0x156>
 800be7a:	7873      	ldrb	r3, [r6, #1]
 800be7c:	2b2b      	cmp	r3, #43	; 0x2b
 800be7e:	d02c      	beq.n	800beda <__gethex+0x13e>
 800be80:	2b2d      	cmp	r3, #45	; 0x2d
 800be82:	d02e      	beq.n	800bee2 <__gethex+0x146>
 800be84:	1c71      	adds	r1, r6, #1
 800be86:	f04f 0900 	mov.w	r9, #0
 800be8a:	7808      	ldrb	r0, [r1, #0]
 800be8c:	f7ff ff71 	bl	800bd72 <__hexdig_fun>
 800be90:	1e43      	subs	r3, r0, #1
 800be92:	b2db      	uxtb	r3, r3
 800be94:	2b18      	cmp	r3, #24
 800be96:	d82c      	bhi.n	800bef2 <__gethex+0x156>
 800be98:	f1a0 0210 	sub.w	r2, r0, #16
 800be9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bea0:	f7ff ff67 	bl	800bd72 <__hexdig_fun>
 800bea4:	1e43      	subs	r3, r0, #1
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b18      	cmp	r3, #24
 800beaa:	d91d      	bls.n	800bee8 <__gethex+0x14c>
 800beac:	f1b9 0f00 	cmp.w	r9, #0
 800beb0:	d000      	beq.n	800beb4 <__gethex+0x118>
 800beb2:	4252      	negs	r2, r2
 800beb4:	4415      	add	r5, r2
 800beb6:	f8cb 1000 	str.w	r1, [fp]
 800beba:	b1e4      	cbz	r4, 800bef6 <__gethex+0x15a>
 800bebc:	9b00      	ldr	r3, [sp, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	bf14      	ite	ne
 800bec2:	2700      	movne	r7, #0
 800bec4:	2706      	moveq	r7, #6
 800bec6:	4638      	mov	r0, r7
 800bec8:	b009      	add	sp, #36	; 0x24
 800beca:	ecbd 8b02 	vpop	{d8}
 800bece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed2:	463e      	mov	r6, r7
 800bed4:	4625      	mov	r5, r4
 800bed6:	2401      	movs	r4, #1
 800bed8:	e7ca      	b.n	800be70 <__gethex+0xd4>
 800beda:	f04f 0900 	mov.w	r9, #0
 800bede:	1cb1      	adds	r1, r6, #2
 800bee0:	e7d3      	b.n	800be8a <__gethex+0xee>
 800bee2:	f04f 0901 	mov.w	r9, #1
 800bee6:	e7fa      	b.n	800bede <__gethex+0x142>
 800bee8:	230a      	movs	r3, #10
 800beea:	fb03 0202 	mla	r2, r3, r2, r0
 800beee:	3a10      	subs	r2, #16
 800bef0:	e7d4      	b.n	800be9c <__gethex+0x100>
 800bef2:	4631      	mov	r1, r6
 800bef4:	e7df      	b.n	800beb6 <__gethex+0x11a>
 800bef6:	1bf3      	subs	r3, r6, r7
 800bef8:	3b01      	subs	r3, #1
 800befa:	4621      	mov	r1, r4
 800befc:	2b07      	cmp	r3, #7
 800befe:	dc0b      	bgt.n	800bf18 <__gethex+0x17c>
 800bf00:	ee18 0a10 	vmov	r0, s16
 800bf04:	f000 fa98 	bl	800c438 <_Balloc>
 800bf08:	4604      	mov	r4, r0
 800bf0a:	b940      	cbnz	r0, 800bf1e <__gethex+0x182>
 800bf0c:	4b5d      	ldr	r3, [pc, #372]	; (800c084 <__gethex+0x2e8>)
 800bf0e:	4602      	mov	r2, r0
 800bf10:	21de      	movs	r1, #222	; 0xde
 800bf12:	485d      	ldr	r0, [pc, #372]	; (800c088 <__gethex+0x2ec>)
 800bf14:	f001 fd08 	bl	800d928 <__assert_func>
 800bf18:	3101      	adds	r1, #1
 800bf1a:	105b      	asrs	r3, r3, #1
 800bf1c:	e7ee      	b.n	800befc <__gethex+0x160>
 800bf1e:	f100 0914 	add.w	r9, r0, #20
 800bf22:	f04f 0b00 	mov.w	fp, #0
 800bf26:	f1ca 0301 	rsb	r3, sl, #1
 800bf2a:	f8cd 9008 	str.w	r9, [sp, #8]
 800bf2e:	f8cd b000 	str.w	fp, [sp]
 800bf32:	9306      	str	r3, [sp, #24]
 800bf34:	42b7      	cmp	r7, r6
 800bf36:	d340      	bcc.n	800bfba <__gethex+0x21e>
 800bf38:	9802      	ldr	r0, [sp, #8]
 800bf3a:	9b00      	ldr	r3, [sp, #0]
 800bf3c:	f840 3b04 	str.w	r3, [r0], #4
 800bf40:	eba0 0009 	sub.w	r0, r0, r9
 800bf44:	1080      	asrs	r0, r0, #2
 800bf46:	0146      	lsls	r6, r0, #5
 800bf48:	6120      	str	r0, [r4, #16]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f000 fb66 	bl	800c61c <__hi0bits>
 800bf50:	1a30      	subs	r0, r6, r0
 800bf52:	f8d8 6000 	ldr.w	r6, [r8]
 800bf56:	42b0      	cmp	r0, r6
 800bf58:	dd63      	ble.n	800c022 <__gethex+0x286>
 800bf5a:	1b87      	subs	r7, r0, r6
 800bf5c:	4639      	mov	r1, r7
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 ff0a 	bl	800cd78 <__any_on>
 800bf64:	4682      	mov	sl, r0
 800bf66:	b1a8      	cbz	r0, 800bf94 <__gethex+0x1f8>
 800bf68:	1e7b      	subs	r3, r7, #1
 800bf6a:	1159      	asrs	r1, r3, #5
 800bf6c:	f003 021f 	and.w	r2, r3, #31
 800bf70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bf74:	f04f 0a01 	mov.w	sl, #1
 800bf78:	fa0a f202 	lsl.w	r2, sl, r2
 800bf7c:	420a      	tst	r2, r1
 800bf7e:	d009      	beq.n	800bf94 <__gethex+0x1f8>
 800bf80:	4553      	cmp	r3, sl
 800bf82:	dd05      	ble.n	800bf90 <__gethex+0x1f4>
 800bf84:	1eb9      	subs	r1, r7, #2
 800bf86:	4620      	mov	r0, r4
 800bf88:	f000 fef6 	bl	800cd78 <__any_on>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d145      	bne.n	800c01c <__gethex+0x280>
 800bf90:	f04f 0a02 	mov.w	sl, #2
 800bf94:	4639      	mov	r1, r7
 800bf96:	4620      	mov	r0, r4
 800bf98:	f7ff fe99 	bl	800bcce <rshift>
 800bf9c:	443d      	add	r5, r7
 800bf9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bfa2:	42ab      	cmp	r3, r5
 800bfa4:	da4c      	bge.n	800c040 <__gethex+0x2a4>
 800bfa6:	ee18 0a10 	vmov	r0, s16
 800bfaa:	4621      	mov	r1, r4
 800bfac:	f000 fa84 	bl	800c4b8 <_Bfree>
 800bfb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	6013      	str	r3, [r2, #0]
 800bfb6:	27a3      	movs	r7, #163	; 0xa3
 800bfb8:	e785      	b.n	800bec6 <__gethex+0x12a>
 800bfba:	1e73      	subs	r3, r6, #1
 800bfbc:	9a05      	ldr	r2, [sp, #20]
 800bfbe:	9303      	str	r3, [sp, #12]
 800bfc0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d019      	beq.n	800bffc <__gethex+0x260>
 800bfc8:	f1bb 0f20 	cmp.w	fp, #32
 800bfcc:	d107      	bne.n	800bfde <__gethex+0x242>
 800bfce:	9b02      	ldr	r3, [sp, #8]
 800bfd0:	9a00      	ldr	r2, [sp, #0]
 800bfd2:	f843 2b04 	str.w	r2, [r3], #4
 800bfd6:	9302      	str	r3, [sp, #8]
 800bfd8:	2300      	movs	r3, #0
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	469b      	mov	fp, r3
 800bfde:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bfe2:	f7ff fec6 	bl	800bd72 <__hexdig_fun>
 800bfe6:	9b00      	ldr	r3, [sp, #0]
 800bfe8:	f000 000f 	and.w	r0, r0, #15
 800bfec:	fa00 f00b 	lsl.w	r0, r0, fp
 800bff0:	4303      	orrs	r3, r0
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	f10b 0b04 	add.w	fp, fp, #4
 800bff8:	9b03      	ldr	r3, [sp, #12]
 800bffa:	e00d      	b.n	800c018 <__gethex+0x27c>
 800bffc:	9b03      	ldr	r3, [sp, #12]
 800bffe:	9a06      	ldr	r2, [sp, #24]
 800c000:	4413      	add	r3, r2
 800c002:	42bb      	cmp	r3, r7
 800c004:	d3e0      	bcc.n	800bfc8 <__gethex+0x22c>
 800c006:	4618      	mov	r0, r3
 800c008:	9901      	ldr	r1, [sp, #4]
 800c00a:	9307      	str	r3, [sp, #28]
 800c00c:	4652      	mov	r2, sl
 800c00e:	f001 fbbb 	bl	800d788 <strncmp>
 800c012:	9b07      	ldr	r3, [sp, #28]
 800c014:	2800      	cmp	r0, #0
 800c016:	d1d7      	bne.n	800bfc8 <__gethex+0x22c>
 800c018:	461e      	mov	r6, r3
 800c01a:	e78b      	b.n	800bf34 <__gethex+0x198>
 800c01c:	f04f 0a03 	mov.w	sl, #3
 800c020:	e7b8      	b.n	800bf94 <__gethex+0x1f8>
 800c022:	da0a      	bge.n	800c03a <__gethex+0x29e>
 800c024:	1a37      	subs	r7, r6, r0
 800c026:	4621      	mov	r1, r4
 800c028:	ee18 0a10 	vmov	r0, s16
 800c02c:	463a      	mov	r2, r7
 800c02e:	f000 fc5f 	bl	800c8f0 <__lshift>
 800c032:	1bed      	subs	r5, r5, r7
 800c034:	4604      	mov	r4, r0
 800c036:	f100 0914 	add.w	r9, r0, #20
 800c03a:	f04f 0a00 	mov.w	sl, #0
 800c03e:	e7ae      	b.n	800bf9e <__gethex+0x202>
 800c040:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c044:	42a8      	cmp	r0, r5
 800c046:	dd72      	ble.n	800c12e <__gethex+0x392>
 800c048:	1b45      	subs	r5, r0, r5
 800c04a:	42ae      	cmp	r6, r5
 800c04c:	dc36      	bgt.n	800c0bc <__gethex+0x320>
 800c04e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c052:	2b02      	cmp	r3, #2
 800c054:	d02a      	beq.n	800c0ac <__gethex+0x310>
 800c056:	2b03      	cmp	r3, #3
 800c058:	d02c      	beq.n	800c0b4 <__gethex+0x318>
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d11c      	bne.n	800c098 <__gethex+0x2fc>
 800c05e:	42ae      	cmp	r6, r5
 800c060:	d11a      	bne.n	800c098 <__gethex+0x2fc>
 800c062:	2e01      	cmp	r6, #1
 800c064:	d112      	bne.n	800c08c <__gethex+0x2f0>
 800c066:	9a04      	ldr	r2, [sp, #16]
 800c068:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c06c:	6013      	str	r3, [r2, #0]
 800c06e:	2301      	movs	r3, #1
 800c070:	6123      	str	r3, [r4, #16]
 800c072:	f8c9 3000 	str.w	r3, [r9]
 800c076:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c078:	2762      	movs	r7, #98	; 0x62
 800c07a:	601c      	str	r4, [r3, #0]
 800c07c:	e723      	b.n	800bec6 <__gethex+0x12a>
 800c07e:	bf00      	nop
 800c080:	0800ea64 	.word	0x0800ea64
 800c084:	0800e988 	.word	0x0800e988
 800c088:	0800e9fc 	.word	0x0800e9fc
 800c08c:	1e71      	subs	r1, r6, #1
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 fe72 	bl	800cd78 <__any_on>
 800c094:	2800      	cmp	r0, #0
 800c096:	d1e6      	bne.n	800c066 <__gethex+0x2ca>
 800c098:	ee18 0a10 	vmov	r0, s16
 800c09c:	4621      	mov	r1, r4
 800c09e:	f000 fa0b 	bl	800c4b8 <_Bfree>
 800c0a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	6013      	str	r3, [r2, #0]
 800c0a8:	2750      	movs	r7, #80	; 0x50
 800c0aa:	e70c      	b.n	800bec6 <__gethex+0x12a>
 800c0ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1f2      	bne.n	800c098 <__gethex+0x2fc>
 800c0b2:	e7d8      	b.n	800c066 <__gethex+0x2ca>
 800c0b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1d5      	bne.n	800c066 <__gethex+0x2ca>
 800c0ba:	e7ed      	b.n	800c098 <__gethex+0x2fc>
 800c0bc:	1e6f      	subs	r7, r5, #1
 800c0be:	f1ba 0f00 	cmp.w	sl, #0
 800c0c2:	d131      	bne.n	800c128 <__gethex+0x38c>
 800c0c4:	b127      	cbz	r7, 800c0d0 <__gethex+0x334>
 800c0c6:	4639      	mov	r1, r7
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	f000 fe55 	bl	800cd78 <__any_on>
 800c0ce:	4682      	mov	sl, r0
 800c0d0:	117b      	asrs	r3, r7, #5
 800c0d2:	2101      	movs	r1, #1
 800c0d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c0d8:	f007 071f 	and.w	r7, r7, #31
 800c0dc:	fa01 f707 	lsl.w	r7, r1, r7
 800c0e0:	421f      	tst	r7, r3
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	bf18      	it	ne
 800c0e8:	f04a 0a02 	orrne.w	sl, sl, #2
 800c0ec:	1b76      	subs	r6, r6, r5
 800c0ee:	f7ff fdee 	bl	800bcce <rshift>
 800c0f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c0f6:	2702      	movs	r7, #2
 800c0f8:	f1ba 0f00 	cmp.w	sl, #0
 800c0fc:	d048      	beq.n	800c190 <__gethex+0x3f4>
 800c0fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c102:	2b02      	cmp	r3, #2
 800c104:	d015      	beq.n	800c132 <__gethex+0x396>
 800c106:	2b03      	cmp	r3, #3
 800c108:	d017      	beq.n	800c13a <__gethex+0x39e>
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d109      	bne.n	800c122 <__gethex+0x386>
 800c10e:	f01a 0f02 	tst.w	sl, #2
 800c112:	d006      	beq.n	800c122 <__gethex+0x386>
 800c114:	f8d9 0000 	ldr.w	r0, [r9]
 800c118:	ea4a 0a00 	orr.w	sl, sl, r0
 800c11c:	f01a 0f01 	tst.w	sl, #1
 800c120:	d10e      	bne.n	800c140 <__gethex+0x3a4>
 800c122:	f047 0710 	orr.w	r7, r7, #16
 800c126:	e033      	b.n	800c190 <__gethex+0x3f4>
 800c128:	f04f 0a01 	mov.w	sl, #1
 800c12c:	e7d0      	b.n	800c0d0 <__gethex+0x334>
 800c12e:	2701      	movs	r7, #1
 800c130:	e7e2      	b.n	800c0f8 <__gethex+0x35c>
 800c132:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c134:	f1c3 0301 	rsb	r3, r3, #1
 800c138:	9315      	str	r3, [sp, #84]	; 0x54
 800c13a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d0f0      	beq.n	800c122 <__gethex+0x386>
 800c140:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c144:	f104 0314 	add.w	r3, r4, #20
 800c148:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c14c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c150:	f04f 0c00 	mov.w	ip, #0
 800c154:	4618      	mov	r0, r3
 800c156:	f853 2b04 	ldr.w	r2, [r3], #4
 800c15a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c15e:	d01c      	beq.n	800c19a <__gethex+0x3fe>
 800c160:	3201      	adds	r2, #1
 800c162:	6002      	str	r2, [r0, #0]
 800c164:	2f02      	cmp	r7, #2
 800c166:	f104 0314 	add.w	r3, r4, #20
 800c16a:	d13f      	bne.n	800c1ec <__gethex+0x450>
 800c16c:	f8d8 2000 	ldr.w	r2, [r8]
 800c170:	3a01      	subs	r2, #1
 800c172:	42b2      	cmp	r2, r6
 800c174:	d10a      	bne.n	800c18c <__gethex+0x3f0>
 800c176:	1171      	asrs	r1, r6, #5
 800c178:	2201      	movs	r2, #1
 800c17a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c17e:	f006 061f 	and.w	r6, r6, #31
 800c182:	fa02 f606 	lsl.w	r6, r2, r6
 800c186:	421e      	tst	r6, r3
 800c188:	bf18      	it	ne
 800c18a:	4617      	movne	r7, r2
 800c18c:	f047 0720 	orr.w	r7, r7, #32
 800c190:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c192:	601c      	str	r4, [r3, #0]
 800c194:	9b04      	ldr	r3, [sp, #16]
 800c196:	601d      	str	r5, [r3, #0]
 800c198:	e695      	b.n	800bec6 <__gethex+0x12a>
 800c19a:	4299      	cmp	r1, r3
 800c19c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c1a0:	d8d8      	bhi.n	800c154 <__gethex+0x3b8>
 800c1a2:	68a3      	ldr	r3, [r4, #8]
 800c1a4:	459b      	cmp	fp, r3
 800c1a6:	db19      	blt.n	800c1dc <__gethex+0x440>
 800c1a8:	6861      	ldr	r1, [r4, #4]
 800c1aa:	ee18 0a10 	vmov	r0, s16
 800c1ae:	3101      	adds	r1, #1
 800c1b0:	f000 f942 	bl	800c438 <_Balloc>
 800c1b4:	4681      	mov	r9, r0
 800c1b6:	b918      	cbnz	r0, 800c1c0 <__gethex+0x424>
 800c1b8:	4b1a      	ldr	r3, [pc, #104]	; (800c224 <__gethex+0x488>)
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	2184      	movs	r1, #132	; 0x84
 800c1be:	e6a8      	b.n	800bf12 <__gethex+0x176>
 800c1c0:	6922      	ldr	r2, [r4, #16]
 800c1c2:	3202      	adds	r2, #2
 800c1c4:	f104 010c 	add.w	r1, r4, #12
 800c1c8:	0092      	lsls	r2, r2, #2
 800c1ca:	300c      	adds	r0, #12
 800c1cc:	f000 f91a 	bl	800c404 <memcpy>
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	ee18 0a10 	vmov	r0, s16
 800c1d6:	f000 f96f 	bl	800c4b8 <_Bfree>
 800c1da:	464c      	mov	r4, r9
 800c1dc:	6923      	ldr	r3, [r4, #16]
 800c1de:	1c5a      	adds	r2, r3, #1
 800c1e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c1e4:	6122      	str	r2, [r4, #16]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	615a      	str	r2, [r3, #20]
 800c1ea:	e7bb      	b.n	800c164 <__gethex+0x3c8>
 800c1ec:	6922      	ldr	r2, [r4, #16]
 800c1ee:	455a      	cmp	r2, fp
 800c1f0:	dd0b      	ble.n	800c20a <__gethex+0x46e>
 800c1f2:	2101      	movs	r1, #1
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f7ff fd6a 	bl	800bcce <rshift>
 800c1fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1fe:	3501      	adds	r5, #1
 800c200:	42ab      	cmp	r3, r5
 800c202:	f6ff aed0 	blt.w	800bfa6 <__gethex+0x20a>
 800c206:	2701      	movs	r7, #1
 800c208:	e7c0      	b.n	800c18c <__gethex+0x3f0>
 800c20a:	f016 061f 	ands.w	r6, r6, #31
 800c20e:	d0fa      	beq.n	800c206 <__gethex+0x46a>
 800c210:	4453      	add	r3, sl
 800c212:	f1c6 0620 	rsb	r6, r6, #32
 800c216:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c21a:	f000 f9ff 	bl	800c61c <__hi0bits>
 800c21e:	42b0      	cmp	r0, r6
 800c220:	dbe7      	blt.n	800c1f2 <__gethex+0x456>
 800c222:	e7f0      	b.n	800c206 <__gethex+0x46a>
 800c224:	0800e988 	.word	0x0800e988

0800c228 <L_shift>:
 800c228:	f1c2 0208 	rsb	r2, r2, #8
 800c22c:	0092      	lsls	r2, r2, #2
 800c22e:	b570      	push	{r4, r5, r6, lr}
 800c230:	f1c2 0620 	rsb	r6, r2, #32
 800c234:	6843      	ldr	r3, [r0, #4]
 800c236:	6804      	ldr	r4, [r0, #0]
 800c238:	fa03 f506 	lsl.w	r5, r3, r6
 800c23c:	432c      	orrs	r4, r5
 800c23e:	40d3      	lsrs	r3, r2
 800c240:	6004      	str	r4, [r0, #0]
 800c242:	f840 3f04 	str.w	r3, [r0, #4]!
 800c246:	4288      	cmp	r0, r1
 800c248:	d3f4      	bcc.n	800c234 <L_shift+0xc>
 800c24a:	bd70      	pop	{r4, r5, r6, pc}

0800c24c <__match>:
 800c24c:	b530      	push	{r4, r5, lr}
 800c24e:	6803      	ldr	r3, [r0, #0]
 800c250:	3301      	adds	r3, #1
 800c252:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c256:	b914      	cbnz	r4, 800c25e <__match+0x12>
 800c258:	6003      	str	r3, [r0, #0]
 800c25a:	2001      	movs	r0, #1
 800c25c:	bd30      	pop	{r4, r5, pc}
 800c25e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c262:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c266:	2d19      	cmp	r5, #25
 800c268:	bf98      	it	ls
 800c26a:	3220      	addls	r2, #32
 800c26c:	42a2      	cmp	r2, r4
 800c26e:	d0f0      	beq.n	800c252 <__match+0x6>
 800c270:	2000      	movs	r0, #0
 800c272:	e7f3      	b.n	800c25c <__match+0x10>

0800c274 <__hexnan>:
 800c274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c278:	680b      	ldr	r3, [r1, #0]
 800c27a:	115e      	asrs	r6, r3, #5
 800c27c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c280:	f013 031f 	ands.w	r3, r3, #31
 800c284:	b087      	sub	sp, #28
 800c286:	bf18      	it	ne
 800c288:	3604      	addne	r6, #4
 800c28a:	2500      	movs	r5, #0
 800c28c:	1f37      	subs	r7, r6, #4
 800c28e:	4690      	mov	r8, r2
 800c290:	6802      	ldr	r2, [r0, #0]
 800c292:	9301      	str	r3, [sp, #4]
 800c294:	4682      	mov	sl, r0
 800c296:	f846 5c04 	str.w	r5, [r6, #-4]
 800c29a:	46b9      	mov	r9, r7
 800c29c:	463c      	mov	r4, r7
 800c29e:	9502      	str	r5, [sp, #8]
 800c2a0:	46ab      	mov	fp, r5
 800c2a2:	7851      	ldrb	r1, [r2, #1]
 800c2a4:	1c53      	adds	r3, r2, #1
 800c2a6:	9303      	str	r3, [sp, #12]
 800c2a8:	b341      	cbz	r1, 800c2fc <__hexnan+0x88>
 800c2aa:	4608      	mov	r0, r1
 800c2ac:	9205      	str	r2, [sp, #20]
 800c2ae:	9104      	str	r1, [sp, #16]
 800c2b0:	f7ff fd5f 	bl	800bd72 <__hexdig_fun>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d14f      	bne.n	800c358 <__hexnan+0xe4>
 800c2b8:	9904      	ldr	r1, [sp, #16]
 800c2ba:	9a05      	ldr	r2, [sp, #20]
 800c2bc:	2920      	cmp	r1, #32
 800c2be:	d818      	bhi.n	800c2f2 <__hexnan+0x7e>
 800c2c0:	9b02      	ldr	r3, [sp, #8]
 800c2c2:	459b      	cmp	fp, r3
 800c2c4:	dd13      	ble.n	800c2ee <__hexnan+0x7a>
 800c2c6:	454c      	cmp	r4, r9
 800c2c8:	d206      	bcs.n	800c2d8 <__hexnan+0x64>
 800c2ca:	2d07      	cmp	r5, #7
 800c2cc:	dc04      	bgt.n	800c2d8 <__hexnan+0x64>
 800c2ce:	462a      	mov	r2, r5
 800c2d0:	4649      	mov	r1, r9
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f7ff ffa8 	bl	800c228 <L_shift>
 800c2d8:	4544      	cmp	r4, r8
 800c2da:	d950      	bls.n	800c37e <__hexnan+0x10a>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	f1a4 0904 	sub.w	r9, r4, #4
 800c2e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2e6:	f8cd b008 	str.w	fp, [sp, #8]
 800c2ea:	464c      	mov	r4, r9
 800c2ec:	461d      	mov	r5, r3
 800c2ee:	9a03      	ldr	r2, [sp, #12]
 800c2f0:	e7d7      	b.n	800c2a2 <__hexnan+0x2e>
 800c2f2:	2929      	cmp	r1, #41	; 0x29
 800c2f4:	d156      	bne.n	800c3a4 <__hexnan+0x130>
 800c2f6:	3202      	adds	r2, #2
 800c2f8:	f8ca 2000 	str.w	r2, [sl]
 800c2fc:	f1bb 0f00 	cmp.w	fp, #0
 800c300:	d050      	beq.n	800c3a4 <__hexnan+0x130>
 800c302:	454c      	cmp	r4, r9
 800c304:	d206      	bcs.n	800c314 <__hexnan+0xa0>
 800c306:	2d07      	cmp	r5, #7
 800c308:	dc04      	bgt.n	800c314 <__hexnan+0xa0>
 800c30a:	462a      	mov	r2, r5
 800c30c:	4649      	mov	r1, r9
 800c30e:	4620      	mov	r0, r4
 800c310:	f7ff ff8a 	bl	800c228 <L_shift>
 800c314:	4544      	cmp	r4, r8
 800c316:	d934      	bls.n	800c382 <__hexnan+0x10e>
 800c318:	f1a8 0204 	sub.w	r2, r8, #4
 800c31c:	4623      	mov	r3, r4
 800c31e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c322:	f842 1f04 	str.w	r1, [r2, #4]!
 800c326:	429f      	cmp	r7, r3
 800c328:	d2f9      	bcs.n	800c31e <__hexnan+0xaa>
 800c32a:	1b3b      	subs	r3, r7, r4
 800c32c:	f023 0303 	bic.w	r3, r3, #3
 800c330:	3304      	adds	r3, #4
 800c332:	3401      	adds	r4, #1
 800c334:	3e03      	subs	r6, #3
 800c336:	42b4      	cmp	r4, r6
 800c338:	bf88      	it	hi
 800c33a:	2304      	movhi	r3, #4
 800c33c:	4443      	add	r3, r8
 800c33e:	2200      	movs	r2, #0
 800c340:	f843 2b04 	str.w	r2, [r3], #4
 800c344:	429f      	cmp	r7, r3
 800c346:	d2fb      	bcs.n	800c340 <__hexnan+0xcc>
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	b91b      	cbnz	r3, 800c354 <__hexnan+0xe0>
 800c34c:	4547      	cmp	r7, r8
 800c34e:	d127      	bne.n	800c3a0 <__hexnan+0x12c>
 800c350:	2301      	movs	r3, #1
 800c352:	603b      	str	r3, [r7, #0]
 800c354:	2005      	movs	r0, #5
 800c356:	e026      	b.n	800c3a6 <__hexnan+0x132>
 800c358:	3501      	adds	r5, #1
 800c35a:	2d08      	cmp	r5, #8
 800c35c:	f10b 0b01 	add.w	fp, fp, #1
 800c360:	dd06      	ble.n	800c370 <__hexnan+0xfc>
 800c362:	4544      	cmp	r4, r8
 800c364:	d9c3      	bls.n	800c2ee <__hexnan+0x7a>
 800c366:	2300      	movs	r3, #0
 800c368:	f844 3c04 	str.w	r3, [r4, #-4]
 800c36c:	2501      	movs	r5, #1
 800c36e:	3c04      	subs	r4, #4
 800c370:	6822      	ldr	r2, [r4, #0]
 800c372:	f000 000f 	and.w	r0, r0, #15
 800c376:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c37a:	6022      	str	r2, [r4, #0]
 800c37c:	e7b7      	b.n	800c2ee <__hexnan+0x7a>
 800c37e:	2508      	movs	r5, #8
 800c380:	e7b5      	b.n	800c2ee <__hexnan+0x7a>
 800c382:	9b01      	ldr	r3, [sp, #4]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d0df      	beq.n	800c348 <__hexnan+0xd4>
 800c388:	f04f 32ff 	mov.w	r2, #4294967295
 800c38c:	f1c3 0320 	rsb	r3, r3, #32
 800c390:	fa22 f303 	lsr.w	r3, r2, r3
 800c394:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c398:	401a      	ands	r2, r3
 800c39a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c39e:	e7d3      	b.n	800c348 <__hexnan+0xd4>
 800c3a0:	3f04      	subs	r7, #4
 800c3a2:	e7d1      	b.n	800c348 <__hexnan+0xd4>
 800c3a4:	2004      	movs	r0, #4
 800c3a6:	b007      	add	sp, #28
 800c3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c3ac <_localeconv_r>:
 800c3ac:	4800      	ldr	r0, [pc, #0]	; (800c3b0 <_localeconv_r+0x4>)
 800c3ae:	4770      	bx	lr
 800c3b0:	20000194 	.word	0x20000194

0800c3b4 <__retarget_lock_init_recursive>:
 800c3b4:	4770      	bx	lr

0800c3b6 <__retarget_lock_acquire_recursive>:
 800c3b6:	4770      	bx	lr

0800c3b8 <__retarget_lock_release_recursive>:
 800c3b8:	4770      	bx	lr
	...

0800c3bc <_lseek_r>:
 800c3bc:	b538      	push	{r3, r4, r5, lr}
 800c3be:	4d07      	ldr	r5, [pc, #28]	; (800c3dc <_lseek_r+0x20>)
 800c3c0:	4604      	mov	r4, r0
 800c3c2:	4608      	mov	r0, r1
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	602a      	str	r2, [r5, #0]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	f7f5 fce2 	bl	8001d94 <_lseek>
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	d102      	bne.n	800c3da <_lseek_r+0x1e>
 800c3d4:	682b      	ldr	r3, [r5, #0]
 800c3d6:	b103      	cbz	r3, 800c3da <_lseek_r+0x1e>
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	20000804 	.word	0x20000804

0800c3e0 <__ascii_mbtowc>:
 800c3e0:	b082      	sub	sp, #8
 800c3e2:	b901      	cbnz	r1, 800c3e6 <__ascii_mbtowc+0x6>
 800c3e4:	a901      	add	r1, sp, #4
 800c3e6:	b142      	cbz	r2, 800c3fa <__ascii_mbtowc+0x1a>
 800c3e8:	b14b      	cbz	r3, 800c3fe <__ascii_mbtowc+0x1e>
 800c3ea:	7813      	ldrb	r3, [r2, #0]
 800c3ec:	600b      	str	r3, [r1, #0]
 800c3ee:	7812      	ldrb	r2, [r2, #0]
 800c3f0:	1e10      	subs	r0, r2, #0
 800c3f2:	bf18      	it	ne
 800c3f4:	2001      	movne	r0, #1
 800c3f6:	b002      	add	sp, #8
 800c3f8:	4770      	bx	lr
 800c3fa:	4610      	mov	r0, r2
 800c3fc:	e7fb      	b.n	800c3f6 <__ascii_mbtowc+0x16>
 800c3fe:	f06f 0001 	mvn.w	r0, #1
 800c402:	e7f8      	b.n	800c3f6 <__ascii_mbtowc+0x16>

0800c404 <memcpy>:
 800c404:	440a      	add	r2, r1
 800c406:	4291      	cmp	r1, r2
 800c408:	f100 33ff 	add.w	r3, r0, #4294967295
 800c40c:	d100      	bne.n	800c410 <memcpy+0xc>
 800c40e:	4770      	bx	lr
 800c410:	b510      	push	{r4, lr}
 800c412:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c41a:	4291      	cmp	r1, r2
 800c41c:	d1f9      	bne.n	800c412 <memcpy+0xe>
 800c41e:	bd10      	pop	{r4, pc}

0800c420 <__malloc_lock>:
 800c420:	4801      	ldr	r0, [pc, #4]	; (800c428 <__malloc_lock+0x8>)
 800c422:	f7ff bfc8 	b.w	800c3b6 <__retarget_lock_acquire_recursive>
 800c426:	bf00      	nop
 800c428:	20000800 	.word	0x20000800

0800c42c <__malloc_unlock>:
 800c42c:	4801      	ldr	r0, [pc, #4]	; (800c434 <__malloc_unlock+0x8>)
 800c42e:	f7ff bfc3 	b.w	800c3b8 <__retarget_lock_release_recursive>
 800c432:	bf00      	nop
 800c434:	20000800 	.word	0x20000800

0800c438 <_Balloc>:
 800c438:	b570      	push	{r4, r5, r6, lr}
 800c43a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c43c:	4604      	mov	r4, r0
 800c43e:	460d      	mov	r5, r1
 800c440:	b976      	cbnz	r6, 800c460 <_Balloc+0x28>
 800c442:	2010      	movs	r0, #16
 800c444:	f7fc fa04 	bl	8008850 <malloc>
 800c448:	4602      	mov	r2, r0
 800c44a:	6260      	str	r0, [r4, #36]	; 0x24
 800c44c:	b920      	cbnz	r0, 800c458 <_Balloc+0x20>
 800c44e:	4b18      	ldr	r3, [pc, #96]	; (800c4b0 <_Balloc+0x78>)
 800c450:	4818      	ldr	r0, [pc, #96]	; (800c4b4 <_Balloc+0x7c>)
 800c452:	2166      	movs	r1, #102	; 0x66
 800c454:	f001 fa68 	bl	800d928 <__assert_func>
 800c458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c45c:	6006      	str	r6, [r0, #0]
 800c45e:	60c6      	str	r6, [r0, #12]
 800c460:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c462:	68f3      	ldr	r3, [r6, #12]
 800c464:	b183      	cbz	r3, 800c488 <_Balloc+0x50>
 800c466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c46e:	b9b8      	cbnz	r0, 800c4a0 <_Balloc+0x68>
 800c470:	2101      	movs	r1, #1
 800c472:	fa01 f605 	lsl.w	r6, r1, r5
 800c476:	1d72      	adds	r2, r6, #5
 800c478:	0092      	lsls	r2, r2, #2
 800c47a:	4620      	mov	r0, r4
 800c47c:	f000 fc9d 	bl	800cdba <_calloc_r>
 800c480:	b160      	cbz	r0, 800c49c <_Balloc+0x64>
 800c482:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c486:	e00e      	b.n	800c4a6 <_Balloc+0x6e>
 800c488:	2221      	movs	r2, #33	; 0x21
 800c48a:	2104      	movs	r1, #4
 800c48c:	4620      	mov	r0, r4
 800c48e:	f000 fc94 	bl	800cdba <_calloc_r>
 800c492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c494:	60f0      	str	r0, [r6, #12]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1e4      	bne.n	800c466 <_Balloc+0x2e>
 800c49c:	2000      	movs	r0, #0
 800c49e:	bd70      	pop	{r4, r5, r6, pc}
 800c4a0:	6802      	ldr	r2, [r0, #0]
 800c4a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4ac:	e7f7      	b.n	800c49e <_Balloc+0x66>
 800c4ae:	bf00      	nop
 800c4b0:	0800e916 	.word	0x0800e916
 800c4b4:	0800ea78 	.word	0x0800ea78

0800c4b8 <_Bfree>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4bc:	4605      	mov	r5, r0
 800c4be:	460c      	mov	r4, r1
 800c4c0:	b976      	cbnz	r6, 800c4e0 <_Bfree+0x28>
 800c4c2:	2010      	movs	r0, #16
 800c4c4:	f7fc f9c4 	bl	8008850 <malloc>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	6268      	str	r0, [r5, #36]	; 0x24
 800c4cc:	b920      	cbnz	r0, 800c4d8 <_Bfree+0x20>
 800c4ce:	4b09      	ldr	r3, [pc, #36]	; (800c4f4 <_Bfree+0x3c>)
 800c4d0:	4809      	ldr	r0, [pc, #36]	; (800c4f8 <_Bfree+0x40>)
 800c4d2:	218a      	movs	r1, #138	; 0x8a
 800c4d4:	f001 fa28 	bl	800d928 <__assert_func>
 800c4d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4dc:	6006      	str	r6, [r0, #0]
 800c4de:	60c6      	str	r6, [r0, #12]
 800c4e0:	b13c      	cbz	r4, 800c4f2 <_Bfree+0x3a>
 800c4e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4e4:	6862      	ldr	r2, [r4, #4]
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4ec:	6021      	str	r1, [r4, #0]
 800c4ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4f2:	bd70      	pop	{r4, r5, r6, pc}
 800c4f4:	0800e916 	.word	0x0800e916
 800c4f8:	0800ea78 	.word	0x0800ea78

0800c4fc <__multadd>:
 800c4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c500:	690d      	ldr	r5, [r1, #16]
 800c502:	4607      	mov	r7, r0
 800c504:	460c      	mov	r4, r1
 800c506:	461e      	mov	r6, r3
 800c508:	f101 0c14 	add.w	ip, r1, #20
 800c50c:	2000      	movs	r0, #0
 800c50e:	f8dc 3000 	ldr.w	r3, [ip]
 800c512:	b299      	uxth	r1, r3
 800c514:	fb02 6101 	mla	r1, r2, r1, r6
 800c518:	0c1e      	lsrs	r6, r3, #16
 800c51a:	0c0b      	lsrs	r3, r1, #16
 800c51c:	fb02 3306 	mla	r3, r2, r6, r3
 800c520:	b289      	uxth	r1, r1
 800c522:	3001      	adds	r0, #1
 800c524:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c528:	4285      	cmp	r5, r0
 800c52a:	f84c 1b04 	str.w	r1, [ip], #4
 800c52e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c532:	dcec      	bgt.n	800c50e <__multadd+0x12>
 800c534:	b30e      	cbz	r6, 800c57a <__multadd+0x7e>
 800c536:	68a3      	ldr	r3, [r4, #8]
 800c538:	42ab      	cmp	r3, r5
 800c53a:	dc19      	bgt.n	800c570 <__multadd+0x74>
 800c53c:	6861      	ldr	r1, [r4, #4]
 800c53e:	4638      	mov	r0, r7
 800c540:	3101      	adds	r1, #1
 800c542:	f7ff ff79 	bl	800c438 <_Balloc>
 800c546:	4680      	mov	r8, r0
 800c548:	b928      	cbnz	r0, 800c556 <__multadd+0x5a>
 800c54a:	4602      	mov	r2, r0
 800c54c:	4b0c      	ldr	r3, [pc, #48]	; (800c580 <__multadd+0x84>)
 800c54e:	480d      	ldr	r0, [pc, #52]	; (800c584 <__multadd+0x88>)
 800c550:	21b5      	movs	r1, #181	; 0xb5
 800c552:	f001 f9e9 	bl	800d928 <__assert_func>
 800c556:	6922      	ldr	r2, [r4, #16]
 800c558:	3202      	adds	r2, #2
 800c55a:	f104 010c 	add.w	r1, r4, #12
 800c55e:	0092      	lsls	r2, r2, #2
 800c560:	300c      	adds	r0, #12
 800c562:	f7ff ff4f 	bl	800c404 <memcpy>
 800c566:	4621      	mov	r1, r4
 800c568:	4638      	mov	r0, r7
 800c56a:	f7ff ffa5 	bl	800c4b8 <_Bfree>
 800c56e:	4644      	mov	r4, r8
 800c570:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c574:	3501      	adds	r5, #1
 800c576:	615e      	str	r6, [r3, #20]
 800c578:	6125      	str	r5, [r4, #16]
 800c57a:	4620      	mov	r0, r4
 800c57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c580:	0800e988 	.word	0x0800e988
 800c584:	0800ea78 	.word	0x0800ea78

0800c588 <__s2b>:
 800c588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c58c:	460c      	mov	r4, r1
 800c58e:	4615      	mov	r5, r2
 800c590:	461f      	mov	r7, r3
 800c592:	2209      	movs	r2, #9
 800c594:	3308      	adds	r3, #8
 800c596:	4606      	mov	r6, r0
 800c598:	fb93 f3f2 	sdiv	r3, r3, r2
 800c59c:	2100      	movs	r1, #0
 800c59e:	2201      	movs	r2, #1
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	db09      	blt.n	800c5b8 <__s2b+0x30>
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f7ff ff47 	bl	800c438 <_Balloc>
 800c5aa:	b940      	cbnz	r0, 800c5be <__s2b+0x36>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	4b19      	ldr	r3, [pc, #100]	; (800c614 <__s2b+0x8c>)
 800c5b0:	4819      	ldr	r0, [pc, #100]	; (800c618 <__s2b+0x90>)
 800c5b2:	21ce      	movs	r1, #206	; 0xce
 800c5b4:	f001 f9b8 	bl	800d928 <__assert_func>
 800c5b8:	0052      	lsls	r2, r2, #1
 800c5ba:	3101      	adds	r1, #1
 800c5bc:	e7f0      	b.n	800c5a0 <__s2b+0x18>
 800c5be:	9b08      	ldr	r3, [sp, #32]
 800c5c0:	6143      	str	r3, [r0, #20]
 800c5c2:	2d09      	cmp	r5, #9
 800c5c4:	f04f 0301 	mov.w	r3, #1
 800c5c8:	6103      	str	r3, [r0, #16]
 800c5ca:	dd16      	ble.n	800c5fa <__s2b+0x72>
 800c5cc:	f104 0909 	add.w	r9, r4, #9
 800c5d0:	46c8      	mov	r8, r9
 800c5d2:	442c      	add	r4, r5
 800c5d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c5d8:	4601      	mov	r1, r0
 800c5da:	3b30      	subs	r3, #48	; 0x30
 800c5dc:	220a      	movs	r2, #10
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f7ff ff8c 	bl	800c4fc <__multadd>
 800c5e4:	45a0      	cmp	r8, r4
 800c5e6:	d1f5      	bne.n	800c5d4 <__s2b+0x4c>
 800c5e8:	f1a5 0408 	sub.w	r4, r5, #8
 800c5ec:	444c      	add	r4, r9
 800c5ee:	1b2d      	subs	r5, r5, r4
 800c5f0:	1963      	adds	r3, r4, r5
 800c5f2:	42bb      	cmp	r3, r7
 800c5f4:	db04      	blt.n	800c600 <__s2b+0x78>
 800c5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5fa:	340a      	adds	r4, #10
 800c5fc:	2509      	movs	r5, #9
 800c5fe:	e7f6      	b.n	800c5ee <__s2b+0x66>
 800c600:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c604:	4601      	mov	r1, r0
 800c606:	3b30      	subs	r3, #48	; 0x30
 800c608:	220a      	movs	r2, #10
 800c60a:	4630      	mov	r0, r6
 800c60c:	f7ff ff76 	bl	800c4fc <__multadd>
 800c610:	e7ee      	b.n	800c5f0 <__s2b+0x68>
 800c612:	bf00      	nop
 800c614:	0800e988 	.word	0x0800e988
 800c618:	0800ea78 	.word	0x0800ea78

0800c61c <__hi0bits>:
 800c61c:	0c03      	lsrs	r3, r0, #16
 800c61e:	041b      	lsls	r3, r3, #16
 800c620:	b9d3      	cbnz	r3, 800c658 <__hi0bits+0x3c>
 800c622:	0400      	lsls	r0, r0, #16
 800c624:	2310      	movs	r3, #16
 800c626:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c62a:	bf04      	itt	eq
 800c62c:	0200      	lsleq	r0, r0, #8
 800c62e:	3308      	addeq	r3, #8
 800c630:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c634:	bf04      	itt	eq
 800c636:	0100      	lsleq	r0, r0, #4
 800c638:	3304      	addeq	r3, #4
 800c63a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c63e:	bf04      	itt	eq
 800c640:	0080      	lsleq	r0, r0, #2
 800c642:	3302      	addeq	r3, #2
 800c644:	2800      	cmp	r0, #0
 800c646:	db05      	blt.n	800c654 <__hi0bits+0x38>
 800c648:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c64c:	f103 0301 	add.w	r3, r3, #1
 800c650:	bf08      	it	eq
 800c652:	2320      	moveq	r3, #32
 800c654:	4618      	mov	r0, r3
 800c656:	4770      	bx	lr
 800c658:	2300      	movs	r3, #0
 800c65a:	e7e4      	b.n	800c626 <__hi0bits+0xa>

0800c65c <__lo0bits>:
 800c65c:	6803      	ldr	r3, [r0, #0]
 800c65e:	f013 0207 	ands.w	r2, r3, #7
 800c662:	4601      	mov	r1, r0
 800c664:	d00b      	beq.n	800c67e <__lo0bits+0x22>
 800c666:	07da      	lsls	r2, r3, #31
 800c668:	d423      	bmi.n	800c6b2 <__lo0bits+0x56>
 800c66a:	0798      	lsls	r0, r3, #30
 800c66c:	bf49      	itett	mi
 800c66e:	085b      	lsrmi	r3, r3, #1
 800c670:	089b      	lsrpl	r3, r3, #2
 800c672:	2001      	movmi	r0, #1
 800c674:	600b      	strmi	r3, [r1, #0]
 800c676:	bf5c      	itt	pl
 800c678:	600b      	strpl	r3, [r1, #0]
 800c67a:	2002      	movpl	r0, #2
 800c67c:	4770      	bx	lr
 800c67e:	b298      	uxth	r0, r3
 800c680:	b9a8      	cbnz	r0, 800c6ae <__lo0bits+0x52>
 800c682:	0c1b      	lsrs	r3, r3, #16
 800c684:	2010      	movs	r0, #16
 800c686:	b2da      	uxtb	r2, r3
 800c688:	b90a      	cbnz	r2, 800c68e <__lo0bits+0x32>
 800c68a:	3008      	adds	r0, #8
 800c68c:	0a1b      	lsrs	r3, r3, #8
 800c68e:	071a      	lsls	r2, r3, #28
 800c690:	bf04      	itt	eq
 800c692:	091b      	lsreq	r3, r3, #4
 800c694:	3004      	addeq	r0, #4
 800c696:	079a      	lsls	r2, r3, #30
 800c698:	bf04      	itt	eq
 800c69a:	089b      	lsreq	r3, r3, #2
 800c69c:	3002      	addeq	r0, #2
 800c69e:	07da      	lsls	r2, r3, #31
 800c6a0:	d403      	bmi.n	800c6aa <__lo0bits+0x4e>
 800c6a2:	085b      	lsrs	r3, r3, #1
 800c6a4:	f100 0001 	add.w	r0, r0, #1
 800c6a8:	d005      	beq.n	800c6b6 <__lo0bits+0x5a>
 800c6aa:	600b      	str	r3, [r1, #0]
 800c6ac:	4770      	bx	lr
 800c6ae:	4610      	mov	r0, r2
 800c6b0:	e7e9      	b.n	800c686 <__lo0bits+0x2a>
 800c6b2:	2000      	movs	r0, #0
 800c6b4:	4770      	bx	lr
 800c6b6:	2020      	movs	r0, #32
 800c6b8:	4770      	bx	lr
	...

0800c6bc <__i2b>:
 800c6bc:	b510      	push	{r4, lr}
 800c6be:	460c      	mov	r4, r1
 800c6c0:	2101      	movs	r1, #1
 800c6c2:	f7ff feb9 	bl	800c438 <_Balloc>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	b928      	cbnz	r0, 800c6d6 <__i2b+0x1a>
 800c6ca:	4b05      	ldr	r3, [pc, #20]	; (800c6e0 <__i2b+0x24>)
 800c6cc:	4805      	ldr	r0, [pc, #20]	; (800c6e4 <__i2b+0x28>)
 800c6ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c6d2:	f001 f929 	bl	800d928 <__assert_func>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	6144      	str	r4, [r0, #20]
 800c6da:	6103      	str	r3, [r0, #16]
 800c6dc:	bd10      	pop	{r4, pc}
 800c6de:	bf00      	nop
 800c6e0:	0800e988 	.word	0x0800e988
 800c6e4:	0800ea78 	.word	0x0800ea78

0800c6e8 <__multiply>:
 800c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	4691      	mov	r9, r2
 800c6ee:	690a      	ldr	r2, [r1, #16]
 800c6f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	bfb8      	it	lt
 800c6f8:	460b      	movlt	r3, r1
 800c6fa:	460c      	mov	r4, r1
 800c6fc:	bfbc      	itt	lt
 800c6fe:	464c      	movlt	r4, r9
 800c700:	4699      	movlt	r9, r3
 800c702:	6927      	ldr	r7, [r4, #16]
 800c704:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c708:	68a3      	ldr	r3, [r4, #8]
 800c70a:	6861      	ldr	r1, [r4, #4]
 800c70c:	eb07 060a 	add.w	r6, r7, sl
 800c710:	42b3      	cmp	r3, r6
 800c712:	b085      	sub	sp, #20
 800c714:	bfb8      	it	lt
 800c716:	3101      	addlt	r1, #1
 800c718:	f7ff fe8e 	bl	800c438 <_Balloc>
 800c71c:	b930      	cbnz	r0, 800c72c <__multiply+0x44>
 800c71e:	4602      	mov	r2, r0
 800c720:	4b44      	ldr	r3, [pc, #272]	; (800c834 <__multiply+0x14c>)
 800c722:	4845      	ldr	r0, [pc, #276]	; (800c838 <__multiply+0x150>)
 800c724:	f240 115d 	movw	r1, #349	; 0x15d
 800c728:	f001 f8fe 	bl	800d928 <__assert_func>
 800c72c:	f100 0514 	add.w	r5, r0, #20
 800c730:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c734:	462b      	mov	r3, r5
 800c736:	2200      	movs	r2, #0
 800c738:	4543      	cmp	r3, r8
 800c73a:	d321      	bcc.n	800c780 <__multiply+0x98>
 800c73c:	f104 0314 	add.w	r3, r4, #20
 800c740:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c744:	f109 0314 	add.w	r3, r9, #20
 800c748:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c74c:	9202      	str	r2, [sp, #8]
 800c74e:	1b3a      	subs	r2, r7, r4
 800c750:	3a15      	subs	r2, #21
 800c752:	f022 0203 	bic.w	r2, r2, #3
 800c756:	3204      	adds	r2, #4
 800c758:	f104 0115 	add.w	r1, r4, #21
 800c75c:	428f      	cmp	r7, r1
 800c75e:	bf38      	it	cc
 800c760:	2204      	movcc	r2, #4
 800c762:	9201      	str	r2, [sp, #4]
 800c764:	9a02      	ldr	r2, [sp, #8]
 800c766:	9303      	str	r3, [sp, #12]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d80c      	bhi.n	800c786 <__multiply+0x9e>
 800c76c:	2e00      	cmp	r6, #0
 800c76e:	dd03      	ble.n	800c778 <__multiply+0x90>
 800c770:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c774:	2b00      	cmp	r3, #0
 800c776:	d05a      	beq.n	800c82e <__multiply+0x146>
 800c778:	6106      	str	r6, [r0, #16]
 800c77a:	b005      	add	sp, #20
 800c77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c780:	f843 2b04 	str.w	r2, [r3], #4
 800c784:	e7d8      	b.n	800c738 <__multiply+0x50>
 800c786:	f8b3 a000 	ldrh.w	sl, [r3]
 800c78a:	f1ba 0f00 	cmp.w	sl, #0
 800c78e:	d024      	beq.n	800c7da <__multiply+0xf2>
 800c790:	f104 0e14 	add.w	lr, r4, #20
 800c794:	46a9      	mov	r9, r5
 800c796:	f04f 0c00 	mov.w	ip, #0
 800c79a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c79e:	f8d9 1000 	ldr.w	r1, [r9]
 800c7a2:	fa1f fb82 	uxth.w	fp, r2
 800c7a6:	b289      	uxth	r1, r1
 800c7a8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c7ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c7b0:	f8d9 2000 	ldr.w	r2, [r9]
 800c7b4:	4461      	add	r1, ip
 800c7b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7ba:	fb0a c20b 	mla	r2, sl, fp, ip
 800c7be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7c2:	b289      	uxth	r1, r1
 800c7c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7c8:	4577      	cmp	r7, lr
 800c7ca:	f849 1b04 	str.w	r1, [r9], #4
 800c7ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7d2:	d8e2      	bhi.n	800c79a <__multiply+0xb2>
 800c7d4:	9a01      	ldr	r2, [sp, #4]
 800c7d6:	f845 c002 	str.w	ip, [r5, r2]
 800c7da:	9a03      	ldr	r2, [sp, #12]
 800c7dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	f1b9 0f00 	cmp.w	r9, #0
 800c7e6:	d020      	beq.n	800c82a <__multiply+0x142>
 800c7e8:	6829      	ldr	r1, [r5, #0]
 800c7ea:	f104 0c14 	add.w	ip, r4, #20
 800c7ee:	46ae      	mov	lr, r5
 800c7f0:	f04f 0a00 	mov.w	sl, #0
 800c7f4:	f8bc b000 	ldrh.w	fp, [ip]
 800c7f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c7fc:	fb09 220b 	mla	r2, r9, fp, r2
 800c800:	4492      	add	sl, r2
 800c802:	b289      	uxth	r1, r1
 800c804:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c808:	f84e 1b04 	str.w	r1, [lr], #4
 800c80c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c810:	f8be 1000 	ldrh.w	r1, [lr]
 800c814:	0c12      	lsrs	r2, r2, #16
 800c816:	fb09 1102 	mla	r1, r9, r2, r1
 800c81a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c81e:	4567      	cmp	r7, ip
 800c820:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c824:	d8e6      	bhi.n	800c7f4 <__multiply+0x10c>
 800c826:	9a01      	ldr	r2, [sp, #4]
 800c828:	50a9      	str	r1, [r5, r2]
 800c82a:	3504      	adds	r5, #4
 800c82c:	e79a      	b.n	800c764 <__multiply+0x7c>
 800c82e:	3e01      	subs	r6, #1
 800c830:	e79c      	b.n	800c76c <__multiply+0x84>
 800c832:	bf00      	nop
 800c834:	0800e988 	.word	0x0800e988
 800c838:	0800ea78 	.word	0x0800ea78

0800c83c <__pow5mult>:
 800c83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c840:	4615      	mov	r5, r2
 800c842:	f012 0203 	ands.w	r2, r2, #3
 800c846:	4606      	mov	r6, r0
 800c848:	460f      	mov	r7, r1
 800c84a:	d007      	beq.n	800c85c <__pow5mult+0x20>
 800c84c:	4c25      	ldr	r4, [pc, #148]	; (800c8e4 <__pow5mult+0xa8>)
 800c84e:	3a01      	subs	r2, #1
 800c850:	2300      	movs	r3, #0
 800c852:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c856:	f7ff fe51 	bl	800c4fc <__multadd>
 800c85a:	4607      	mov	r7, r0
 800c85c:	10ad      	asrs	r5, r5, #2
 800c85e:	d03d      	beq.n	800c8dc <__pow5mult+0xa0>
 800c860:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c862:	b97c      	cbnz	r4, 800c884 <__pow5mult+0x48>
 800c864:	2010      	movs	r0, #16
 800c866:	f7fb fff3 	bl	8008850 <malloc>
 800c86a:	4602      	mov	r2, r0
 800c86c:	6270      	str	r0, [r6, #36]	; 0x24
 800c86e:	b928      	cbnz	r0, 800c87c <__pow5mult+0x40>
 800c870:	4b1d      	ldr	r3, [pc, #116]	; (800c8e8 <__pow5mult+0xac>)
 800c872:	481e      	ldr	r0, [pc, #120]	; (800c8ec <__pow5mult+0xb0>)
 800c874:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c878:	f001 f856 	bl	800d928 <__assert_func>
 800c87c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c880:	6004      	str	r4, [r0, #0]
 800c882:	60c4      	str	r4, [r0, #12]
 800c884:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c888:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c88c:	b94c      	cbnz	r4, 800c8a2 <__pow5mult+0x66>
 800c88e:	f240 2171 	movw	r1, #625	; 0x271
 800c892:	4630      	mov	r0, r6
 800c894:	f7ff ff12 	bl	800c6bc <__i2b>
 800c898:	2300      	movs	r3, #0
 800c89a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c89e:	4604      	mov	r4, r0
 800c8a0:	6003      	str	r3, [r0, #0]
 800c8a2:	f04f 0900 	mov.w	r9, #0
 800c8a6:	07eb      	lsls	r3, r5, #31
 800c8a8:	d50a      	bpl.n	800c8c0 <__pow5mult+0x84>
 800c8aa:	4639      	mov	r1, r7
 800c8ac:	4622      	mov	r2, r4
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	f7ff ff1a 	bl	800c6e8 <__multiply>
 800c8b4:	4639      	mov	r1, r7
 800c8b6:	4680      	mov	r8, r0
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	f7ff fdfd 	bl	800c4b8 <_Bfree>
 800c8be:	4647      	mov	r7, r8
 800c8c0:	106d      	asrs	r5, r5, #1
 800c8c2:	d00b      	beq.n	800c8dc <__pow5mult+0xa0>
 800c8c4:	6820      	ldr	r0, [r4, #0]
 800c8c6:	b938      	cbnz	r0, 800c8d8 <__pow5mult+0x9c>
 800c8c8:	4622      	mov	r2, r4
 800c8ca:	4621      	mov	r1, r4
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	f7ff ff0b 	bl	800c6e8 <__multiply>
 800c8d2:	6020      	str	r0, [r4, #0]
 800c8d4:	f8c0 9000 	str.w	r9, [r0]
 800c8d8:	4604      	mov	r4, r0
 800c8da:	e7e4      	b.n	800c8a6 <__pow5mult+0x6a>
 800c8dc:	4638      	mov	r0, r7
 800c8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8e2:	bf00      	nop
 800c8e4:	0800ebc8 	.word	0x0800ebc8
 800c8e8:	0800e916 	.word	0x0800e916
 800c8ec:	0800ea78 	.word	0x0800ea78

0800c8f0 <__lshift>:
 800c8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f4:	460c      	mov	r4, r1
 800c8f6:	6849      	ldr	r1, [r1, #4]
 800c8f8:	6923      	ldr	r3, [r4, #16]
 800c8fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8fe:	68a3      	ldr	r3, [r4, #8]
 800c900:	4607      	mov	r7, r0
 800c902:	4691      	mov	r9, r2
 800c904:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c908:	f108 0601 	add.w	r6, r8, #1
 800c90c:	42b3      	cmp	r3, r6
 800c90e:	db0b      	blt.n	800c928 <__lshift+0x38>
 800c910:	4638      	mov	r0, r7
 800c912:	f7ff fd91 	bl	800c438 <_Balloc>
 800c916:	4605      	mov	r5, r0
 800c918:	b948      	cbnz	r0, 800c92e <__lshift+0x3e>
 800c91a:	4602      	mov	r2, r0
 800c91c:	4b2a      	ldr	r3, [pc, #168]	; (800c9c8 <__lshift+0xd8>)
 800c91e:	482b      	ldr	r0, [pc, #172]	; (800c9cc <__lshift+0xdc>)
 800c920:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c924:	f001 f800 	bl	800d928 <__assert_func>
 800c928:	3101      	adds	r1, #1
 800c92a:	005b      	lsls	r3, r3, #1
 800c92c:	e7ee      	b.n	800c90c <__lshift+0x1c>
 800c92e:	2300      	movs	r3, #0
 800c930:	f100 0114 	add.w	r1, r0, #20
 800c934:	f100 0210 	add.w	r2, r0, #16
 800c938:	4618      	mov	r0, r3
 800c93a:	4553      	cmp	r3, sl
 800c93c:	db37      	blt.n	800c9ae <__lshift+0xbe>
 800c93e:	6920      	ldr	r0, [r4, #16]
 800c940:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c944:	f104 0314 	add.w	r3, r4, #20
 800c948:	f019 091f 	ands.w	r9, r9, #31
 800c94c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c950:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c954:	d02f      	beq.n	800c9b6 <__lshift+0xc6>
 800c956:	f1c9 0e20 	rsb	lr, r9, #32
 800c95a:	468a      	mov	sl, r1
 800c95c:	f04f 0c00 	mov.w	ip, #0
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	fa02 f209 	lsl.w	r2, r2, r9
 800c966:	ea42 020c 	orr.w	r2, r2, ip
 800c96a:	f84a 2b04 	str.w	r2, [sl], #4
 800c96e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c972:	4298      	cmp	r0, r3
 800c974:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c978:	d8f2      	bhi.n	800c960 <__lshift+0x70>
 800c97a:	1b03      	subs	r3, r0, r4
 800c97c:	3b15      	subs	r3, #21
 800c97e:	f023 0303 	bic.w	r3, r3, #3
 800c982:	3304      	adds	r3, #4
 800c984:	f104 0215 	add.w	r2, r4, #21
 800c988:	4290      	cmp	r0, r2
 800c98a:	bf38      	it	cc
 800c98c:	2304      	movcc	r3, #4
 800c98e:	f841 c003 	str.w	ip, [r1, r3]
 800c992:	f1bc 0f00 	cmp.w	ip, #0
 800c996:	d001      	beq.n	800c99c <__lshift+0xac>
 800c998:	f108 0602 	add.w	r6, r8, #2
 800c99c:	3e01      	subs	r6, #1
 800c99e:	4638      	mov	r0, r7
 800c9a0:	612e      	str	r6, [r5, #16]
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	f7ff fd88 	bl	800c4b8 <_Bfree>
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	e7c1      	b.n	800c93a <__lshift+0x4a>
 800c9b6:	3904      	subs	r1, #4
 800c9b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9c0:	4298      	cmp	r0, r3
 800c9c2:	d8f9      	bhi.n	800c9b8 <__lshift+0xc8>
 800c9c4:	e7ea      	b.n	800c99c <__lshift+0xac>
 800c9c6:	bf00      	nop
 800c9c8:	0800e988 	.word	0x0800e988
 800c9cc:	0800ea78 	.word	0x0800ea78

0800c9d0 <__mcmp>:
 800c9d0:	b530      	push	{r4, r5, lr}
 800c9d2:	6902      	ldr	r2, [r0, #16]
 800c9d4:	690c      	ldr	r4, [r1, #16]
 800c9d6:	1b12      	subs	r2, r2, r4
 800c9d8:	d10e      	bne.n	800c9f8 <__mcmp+0x28>
 800c9da:	f100 0314 	add.w	r3, r0, #20
 800c9de:	3114      	adds	r1, #20
 800c9e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c9e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c9e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c9ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c9f0:	42a5      	cmp	r5, r4
 800c9f2:	d003      	beq.n	800c9fc <__mcmp+0x2c>
 800c9f4:	d305      	bcc.n	800ca02 <__mcmp+0x32>
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	bd30      	pop	{r4, r5, pc}
 800c9fc:	4283      	cmp	r3, r0
 800c9fe:	d3f3      	bcc.n	800c9e8 <__mcmp+0x18>
 800ca00:	e7fa      	b.n	800c9f8 <__mcmp+0x28>
 800ca02:	f04f 32ff 	mov.w	r2, #4294967295
 800ca06:	e7f7      	b.n	800c9f8 <__mcmp+0x28>

0800ca08 <__mdiff>:
 800ca08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca0c:	460c      	mov	r4, r1
 800ca0e:	4606      	mov	r6, r0
 800ca10:	4611      	mov	r1, r2
 800ca12:	4620      	mov	r0, r4
 800ca14:	4690      	mov	r8, r2
 800ca16:	f7ff ffdb 	bl	800c9d0 <__mcmp>
 800ca1a:	1e05      	subs	r5, r0, #0
 800ca1c:	d110      	bne.n	800ca40 <__mdiff+0x38>
 800ca1e:	4629      	mov	r1, r5
 800ca20:	4630      	mov	r0, r6
 800ca22:	f7ff fd09 	bl	800c438 <_Balloc>
 800ca26:	b930      	cbnz	r0, 800ca36 <__mdiff+0x2e>
 800ca28:	4b3a      	ldr	r3, [pc, #232]	; (800cb14 <__mdiff+0x10c>)
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	f240 2132 	movw	r1, #562	; 0x232
 800ca30:	4839      	ldr	r0, [pc, #228]	; (800cb18 <__mdiff+0x110>)
 800ca32:	f000 ff79 	bl	800d928 <__assert_func>
 800ca36:	2301      	movs	r3, #1
 800ca38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca40:	bfa4      	itt	ge
 800ca42:	4643      	movge	r3, r8
 800ca44:	46a0      	movge	r8, r4
 800ca46:	4630      	mov	r0, r6
 800ca48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca4c:	bfa6      	itte	ge
 800ca4e:	461c      	movge	r4, r3
 800ca50:	2500      	movge	r5, #0
 800ca52:	2501      	movlt	r5, #1
 800ca54:	f7ff fcf0 	bl	800c438 <_Balloc>
 800ca58:	b920      	cbnz	r0, 800ca64 <__mdiff+0x5c>
 800ca5a:	4b2e      	ldr	r3, [pc, #184]	; (800cb14 <__mdiff+0x10c>)
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca62:	e7e5      	b.n	800ca30 <__mdiff+0x28>
 800ca64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca68:	6926      	ldr	r6, [r4, #16]
 800ca6a:	60c5      	str	r5, [r0, #12]
 800ca6c:	f104 0914 	add.w	r9, r4, #20
 800ca70:	f108 0514 	add.w	r5, r8, #20
 800ca74:	f100 0e14 	add.w	lr, r0, #20
 800ca78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca80:	f108 0210 	add.w	r2, r8, #16
 800ca84:	46f2      	mov	sl, lr
 800ca86:	2100      	movs	r1, #0
 800ca88:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca90:	fa1f f883 	uxth.w	r8, r3
 800ca94:	fa11 f18b 	uxtah	r1, r1, fp
 800ca98:	0c1b      	lsrs	r3, r3, #16
 800ca9a:	eba1 0808 	sub.w	r8, r1, r8
 800ca9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800caa2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800caa6:	fa1f f888 	uxth.w	r8, r8
 800caaa:	1419      	asrs	r1, r3, #16
 800caac:	454e      	cmp	r6, r9
 800caae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cab2:	f84a 3b04 	str.w	r3, [sl], #4
 800cab6:	d8e7      	bhi.n	800ca88 <__mdiff+0x80>
 800cab8:	1b33      	subs	r3, r6, r4
 800caba:	3b15      	subs	r3, #21
 800cabc:	f023 0303 	bic.w	r3, r3, #3
 800cac0:	3304      	adds	r3, #4
 800cac2:	3415      	adds	r4, #21
 800cac4:	42a6      	cmp	r6, r4
 800cac6:	bf38      	it	cc
 800cac8:	2304      	movcc	r3, #4
 800caca:	441d      	add	r5, r3
 800cacc:	4473      	add	r3, lr
 800cace:	469e      	mov	lr, r3
 800cad0:	462e      	mov	r6, r5
 800cad2:	4566      	cmp	r6, ip
 800cad4:	d30e      	bcc.n	800caf4 <__mdiff+0xec>
 800cad6:	f10c 0203 	add.w	r2, ip, #3
 800cada:	1b52      	subs	r2, r2, r5
 800cadc:	f022 0203 	bic.w	r2, r2, #3
 800cae0:	3d03      	subs	r5, #3
 800cae2:	45ac      	cmp	ip, r5
 800cae4:	bf38      	it	cc
 800cae6:	2200      	movcc	r2, #0
 800cae8:	441a      	add	r2, r3
 800caea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800caee:	b17b      	cbz	r3, 800cb10 <__mdiff+0x108>
 800caf0:	6107      	str	r7, [r0, #16]
 800caf2:	e7a3      	b.n	800ca3c <__mdiff+0x34>
 800caf4:	f856 8b04 	ldr.w	r8, [r6], #4
 800caf8:	fa11 f288 	uxtah	r2, r1, r8
 800cafc:	1414      	asrs	r4, r2, #16
 800cafe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb02:	b292      	uxth	r2, r2
 800cb04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb08:	f84e 2b04 	str.w	r2, [lr], #4
 800cb0c:	1421      	asrs	r1, r4, #16
 800cb0e:	e7e0      	b.n	800cad2 <__mdiff+0xca>
 800cb10:	3f01      	subs	r7, #1
 800cb12:	e7ea      	b.n	800caea <__mdiff+0xe2>
 800cb14:	0800e988 	.word	0x0800e988
 800cb18:	0800ea78 	.word	0x0800ea78

0800cb1c <__ulp>:
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	ed8d 0b00 	vstr	d0, [sp]
 800cb22:	9b01      	ldr	r3, [sp, #4]
 800cb24:	4912      	ldr	r1, [pc, #72]	; (800cb70 <__ulp+0x54>)
 800cb26:	4019      	ands	r1, r3
 800cb28:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cb2c:	2900      	cmp	r1, #0
 800cb2e:	dd05      	ble.n	800cb3c <__ulp+0x20>
 800cb30:	2200      	movs	r2, #0
 800cb32:	460b      	mov	r3, r1
 800cb34:	ec43 2b10 	vmov	d0, r2, r3
 800cb38:	b002      	add	sp, #8
 800cb3a:	4770      	bx	lr
 800cb3c:	4249      	negs	r1, r1
 800cb3e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cb42:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cb46:	f04f 0200 	mov.w	r2, #0
 800cb4a:	f04f 0300 	mov.w	r3, #0
 800cb4e:	da04      	bge.n	800cb5a <__ulp+0x3e>
 800cb50:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cb54:	fa41 f300 	asr.w	r3, r1, r0
 800cb58:	e7ec      	b.n	800cb34 <__ulp+0x18>
 800cb5a:	f1a0 0114 	sub.w	r1, r0, #20
 800cb5e:	291e      	cmp	r1, #30
 800cb60:	bfda      	itte	le
 800cb62:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cb66:	fa20 f101 	lsrle.w	r1, r0, r1
 800cb6a:	2101      	movgt	r1, #1
 800cb6c:	460a      	mov	r2, r1
 800cb6e:	e7e1      	b.n	800cb34 <__ulp+0x18>
 800cb70:	7ff00000 	.word	0x7ff00000

0800cb74 <__b2d>:
 800cb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb76:	6905      	ldr	r5, [r0, #16]
 800cb78:	f100 0714 	add.w	r7, r0, #20
 800cb7c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cb80:	1f2e      	subs	r6, r5, #4
 800cb82:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cb86:	4620      	mov	r0, r4
 800cb88:	f7ff fd48 	bl	800c61c <__hi0bits>
 800cb8c:	f1c0 0320 	rsb	r3, r0, #32
 800cb90:	280a      	cmp	r0, #10
 800cb92:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cc10 <__b2d+0x9c>
 800cb96:	600b      	str	r3, [r1, #0]
 800cb98:	dc14      	bgt.n	800cbc4 <__b2d+0x50>
 800cb9a:	f1c0 0e0b 	rsb	lr, r0, #11
 800cb9e:	fa24 f10e 	lsr.w	r1, r4, lr
 800cba2:	42b7      	cmp	r7, r6
 800cba4:	ea41 030c 	orr.w	r3, r1, ip
 800cba8:	bf34      	ite	cc
 800cbaa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cbae:	2100      	movcs	r1, #0
 800cbb0:	3015      	adds	r0, #21
 800cbb2:	fa04 f000 	lsl.w	r0, r4, r0
 800cbb6:	fa21 f10e 	lsr.w	r1, r1, lr
 800cbba:	ea40 0201 	orr.w	r2, r0, r1
 800cbbe:	ec43 2b10 	vmov	d0, r2, r3
 800cbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbc4:	42b7      	cmp	r7, r6
 800cbc6:	bf3a      	itte	cc
 800cbc8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cbcc:	f1a5 0608 	subcc.w	r6, r5, #8
 800cbd0:	2100      	movcs	r1, #0
 800cbd2:	380b      	subs	r0, #11
 800cbd4:	d017      	beq.n	800cc06 <__b2d+0x92>
 800cbd6:	f1c0 0c20 	rsb	ip, r0, #32
 800cbda:	fa04 f500 	lsl.w	r5, r4, r0
 800cbde:	42be      	cmp	r6, r7
 800cbe0:	fa21 f40c 	lsr.w	r4, r1, ip
 800cbe4:	ea45 0504 	orr.w	r5, r5, r4
 800cbe8:	bf8c      	ite	hi
 800cbea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cbee:	2400      	movls	r4, #0
 800cbf0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cbf4:	fa01 f000 	lsl.w	r0, r1, r0
 800cbf8:	fa24 f40c 	lsr.w	r4, r4, ip
 800cbfc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cc00:	ea40 0204 	orr.w	r2, r0, r4
 800cc04:	e7db      	b.n	800cbbe <__b2d+0x4a>
 800cc06:	ea44 030c 	orr.w	r3, r4, ip
 800cc0a:	460a      	mov	r2, r1
 800cc0c:	e7d7      	b.n	800cbbe <__b2d+0x4a>
 800cc0e:	bf00      	nop
 800cc10:	3ff00000 	.word	0x3ff00000

0800cc14 <__d2b>:
 800cc14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc18:	4689      	mov	r9, r1
 800cc1a:	2101      	movs	r1, #1
 800cc1c:	ec57 6b10 	vmov	r6, r7, d0
 800cc20:	4690      	mov	r8, r2
 800cc22:	f7ff fc09 	bl	800c438 <_Balloc>
 800cc26:	4604      	mov	r4, r0
 800cc28:	b930      	cbnz	r0, 800cc38 <__d2b+0x24>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	4b25      	ldr	r3, [pc, #148]	; (800ccc4 <__d2b+0xb0>)
 800cc2e:	4826      	ldr	r0, [pc, #152]	; (800ccc8 <__d2b+0xb4>)
 800cc30:	f240 310a 	movw	r1, #778	; 0x30a
 800cc34:	f000 fe78 	bl	800d928 <__assert_func>
 800cc38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cc3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc40:	bb35      	cbnz	r5, 800cc90 <__d2b+0x7c>
 800cc42:	2e00      	cmp	r6, #0
 800cc44:	9301      	str	r3, [sp, #4]
 800cc46:	d028      	beq.n	800cc9a <__d2b+0x86>
 800cc48:	4668      	mov	r0, sp
 800cc4a:	9600      	str	r6, [sp, #0]
 800cc4c:	f7ff fd06 	bl	800c65c <__lo0bits>
 800cc50:	9900      	ldr	r1, [sp, #0]
 800cc52:	b300      	cbz	r0, 800cc96 <__d2b+0x82>
 800cc54:	9a01      	ldr	r2, [sp, #4]
 800cc56:	f1c0 0320 	rsb	r3, r0, #32
 800cc5a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc5e:	430b      	orrs	r3, r1
 800cc60:	40c2      	lsrs	r2, r0
 800cc62:	6163      	str	r3, [r4, #20]
 800cc64:	9201      	str	r2, [sp, #4]
 800cc66:	9b01      	ldr	r3, [sp, #4]
 800cc68:	61a3      	str	r3, [r4, #24]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	bf14      	ite	ne
 800cc6e:	2202      	movne	r2, #2
 800cc70:	2201      	moveq	r2, #1
 800cc72:	6122      	str	r2, [r4, #16]
 800cc74:	b1d5      	cbz	r5, 800ccac <__d2b+0x98>
 800cc76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc7a:	4405      	add	r5, r0
 800cc7c:	f8c9 5000 	str.w	r5, [r9]
 800cc80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc84:	f8c8 0000 	str.w	r0, [r8]
 800cc88:	4620      	mov	r0, r4
 800cc8a:	b003      	add	sp, #12
 800cc8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc94:	e7d5      	b.n	800cc42 <__d2b+0x2e>
 800cc96:	6161      	str	r1, [r4, #20]
 800cc98:	e7e5      	b.n	800cc66 <__d2b+0x52>
 800cc9a:	a801      	add	r0, sp, #4
 800cc9c:	f7ff fcde 	bl	800c65c <__lo0bits>
 800cca0:	9b01      	ldr	r3, [sp, #4]
 800cca2:	6163      	str	r3, [r4, #20]
 800cca4:	2201      	movs	r2, #1
 800cca6:	6122      	str	r2, [r4, #16]
 800cca8:	3020      	adds	r0, #32
 800ccaa:	e7e3      	b.n	800cc74 <__d2b+0x60>
 800ccac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ccb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ccb4:	f8c9 0000 	str.w	r0, [r9]
 800ccb8:	6918      	ldr	r0, [r3, #16]
 800ccba:	f7ff fcaf 	bl	800c61c <__hi0bits>
 800ccbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccc2:	e7df      	b.n	800cc84 <__d2b+0x70>
 800ccc4:	0800e988 	.word	0x0800e988
 800ccc8:	0800ea78 	.word	0x0800ea78

0800cccc <__ratio>:
 800cccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd0:	4688      	mov	r8, r1
 800ccd2:	4669      	mov	r1, sp
 800ccd4:	4681      	mov	r9, r0
 800ccd6:	f7ff ff4d 	bl	800cb74 <__b2d>
 800ccda:	a901      	add	r1, sp, #4
 800ccdc:	4640      	mov	r0, r8
 800ccde:	ec55 4b10 	vmov	r4, r5, d0
 800cce2:	f7ff ff47 	bl	800cb74 <__b2d>
 800cce6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ccee:	eba3 0c02 	sub.w	ip, r3, r2
 800ccf2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ccf6:	1a9b      	subs	r3, r3, r2
 800ccf8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ccfc:	ec51 0b10 	vmov	r0, r1, d0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	bfd6      	itet	le
 800cd04:	460a      	movle	r2, r1
 800cd06:	462a      	movgt	r2, r5
 800cd08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd0c:	468b      	mov	fp, r1
 800cd0e:	462f      	mov	r7, r5
 800cd10:	bfd4      	ite	le
 800cd12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cd16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	ee10 2a10 	vmov	r2, s0
 800cd20:	465b      	mov	r3, fp
 800cd22:	4639      	mov	r1, r7
 800cd24:	f7f3 fda2 	bl	800086c <__aeabi_ddiv>
 800cd28:	ec41 0b10 	vmov	d0, r0, r1
 800cd2c:	b003      	add	sp, #12
 800cd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd32 <__copybits>:
 800cd32:	3901      	subs	r1, #1
 800cd34:	b570      	push	{r4, r5, r6, lr}
 800cd36:	1149      	asrs	r1, r1, #5
 800cd38:	6914      	ldr	r4, [r2, #16]
 800cd3a:	3101      	adds	r1, #1
 800cd3c:	f102 0314 	add.w	r3, r2, #20
 800cd40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd48:	1f05      	subs	r5, r0, #4
 800cd4a:	42a3      	cmp	r3, r4
 800cd4c:	d30c      	bcc.n	800cd68 <__copybits+0x36>
 800cd4e:	1aa3      	subs	r3, r4, r2
 800cd50:	3b11      	subs	r3, #17
 800cd52:	f023 0303 	bic.w	r3, r3, #3
 800cd56:	3211      	adds	r2, #17
 800cd58:	42a2      	cmp	r2, r4
 800cd5a:	bf88      	it	hi
 800cd5c:	2300      	movhi	r3, #0
 800cd5e:	4418      	add	r0, r3
 800cd60:	2300      	movs	r3, #0
 800cd62:	4288      	cmp	r0, r1
 800cd64:	d305      	bcc.n	800cd72 <__copybits+0x40>
 800cd66:	bd70      	pop	{r4, r5, r6, pc}
 800cd68:	f853 6b04 	ldr.w	r6, [r3], #4
 800cd6c:	f845 6f04 	str.w	r6, [r5, #4]!
 800cd70:	e7eb      	b.n	800cd4a <__copybits+0x18>
 800cd72:	f840 3b04 	str.w	r3, [r0], #4
 800cd76:	e7f4      	b.n	800cd62 <__copybits+0x30>

0800cd78 <__any_on>:
 800cd78:	f100 0214 	add.w	r2, r0, #20
 800cd7c:	6900      	ldr	r0, [r0, #16]
 800cd7e:	114b      	asrs	r3, r1, #5
 800cd80:	4298      	cmp	r0, r3
 800cd82:	b510      	push	{r4, lr}
 800cd84:	db11      	blt.n	800cdaa <__any_on+0x32>
 800cd86:	dd0a      	ble.n	800cd9e <__any_on+0x26>
 800cd88:	f011 011f 	ands.w	r1, r1, #31
 800cd8c:	d007      	beq.n	800cd9e <__any_on+0x26>
 800cd8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cd92:	fa24 f001 	lsr.w	r0, r4, r1
 800cd96:	fa00 f101 	lsl.w	r1, r0, r1
 800cd9a:	428c      	cmp	r4, r1
 800cd9c:	d10b      	bne.n	800cdb6 <__any_on+0x3e>
 800cd9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d803      	bhi.n	800cdae <__any_on+0x36>
 800cda6:	2000      	movs	r0, #0
 800cda8:	bd10      	pop	{r4, pc}
 800cdaa:	4603      	mov	r3, r0
 800cdac:	e7f7      	b.n	800cd9e <__any_on+0x26>
 800cdae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cdb2:	2900      	cmp	r1, #0
 800cdb4:	d0f5      	beq.n	800cda2 <__any_on+0x2a>
 800cdb6:	2001      	movs	r0, #1
 800cdb8:	e7f6      	b.n	800cda8 <__any_on+0x30>

0800cdba <_calloc_r>:
 800cdba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdbc:	fba1 2402 	umull	r2, r4, r1, r2
 800cdc0:	b94c      	cbnz	r4, 800cdd6 <_calloc_r+0x1c>
 800cdc2:	4611      	mov	r1, r2
 800cdc4:	9201      	str	r2, [sp, #4]
 800cdc6:	f7fb fdbf 	bl	8008948 <_malloc_r>
 800cdca:	9a01      	ldr	r2, [sp, #4]
 800cdcc:	4605      	mov	r5, r0
 800cdce:	b930      	cbnz	r0, 800cdde <_calloc_r+0x24>
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	b003      	add	sp, #12
 800cdd4:	bd30      	pop	{r4, r5, pc}
 800cdd6:	220c      	movs	r2, #12
 800cdd8:	6002      	str	r2, [r0, #0]
 800cdda:	2500      	movs	r5, #0
 800cddc:	e7f8      	b.n	800cdd0 <_calloc_r+0x16>
 800cdde:	4621      	mov	r1, r4
 800cde0:	f7fb fd3e 	bl	8008860 <memset>
 800cde4:	e7f4      	b.n	800cdd0 <_calloc_r+0x16>

0800cde6 <__ssputs_r>:
 800cde6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdea:	688e      	ldr	r6, [r1, #8]
 800cdec:	429e      	cmp	r6, r3
 800cdee:	4682      	mov	sl, r0
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	4690      	mov	r8, r2
 800cdf4:	461f      	mov	r7, r3
 800cdf6:	d838      	bhi.n	800ce6a <__ssputs_r+0x84>
 800cdf8:	898a      	ldrh	r2, [r1, #12]
 800cdfa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cdfe:	d032      	beq.n	800ce66 <__ssputs_r+0x80>
 800ce00:	6825      	ldr	r5, [r4, #0]
 800ce02:	6909      	ldr	r1, [r1, #16]
 800ce04:	eba5 0901 	sub.w	r9, r5, r1
 800ce08:	6965      	ldr	r5, [r4, #20]
 800ce0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce12:	3301      	adds	r3, #1
 800ce14:	444b      	add	r3, r9
 800ce16:	106d      	asrs	r5, r5, #1
 800ce18:	429d      	cmp	r5, r3
 800ce1a:	bf38      	it	cc
 800ce1c:	461d      	movcc	r5, r3
 800ce1e:	0553      	lsls	r3, r2, #21
 800ce20:	d531      	bpl.n	800ce86 <__ssputs_r+0xa0>
 800ce22:	4629      	mov	r1, r5
 800ce24:	f7fb fd90 	bl	8008948 <_malloc_r>
 800ce28:	4606      	mov	r6, r0
 800ce2a:	b950      	cbnz	r0, 800ce42 <__ssputs_r+0x5c>
 800ce2c:	230c      	movs	r3, #12
 800ce2e:	f8ca 3000 	str.w	r3, [sl]
 800ce32:	89a3      	ldrh	r3, [r4, #12]
 800ce34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce38:	81a3      	strh	r3, [r4, #12]
 800ce3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce42:	6921      	ldr	r1, [r4, #16]
 800ce44:	464a      	mov	r2, r9
 800ce46:	f7ff fadd 	bl	800c404 <memcpy>
 800ce4a:	89a3      	ldrh	r3, [r4, #12]
 800ce4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce54:	81a3      	strh	r3, [r4, #12]
 800ce56:	6126      	str	r6, [r4, #16]
 800ce58:	6165      	str	r5, [r4, #20]
 800ce5a:	444e      	add	r6, r9
 800ce5c:	eba5 0509 	sub.w	r5, r5, r9
 800ce60:	6026      	str	r6, [r4, #0]
 800ce62:	60a5      	str	r5, [r4, #8]
 800ce64:	463e      	mov	r6, r7
 800ce66:	42be      	cmp	r6, r7
 800ce68:	d900      	bls.n	800ce6c <__ssputs_r+0x86>
 800ce6a:	463e      	mov	r6, r7
 800ce6c:	6820      	ldr	r0, [r4, #0]
 800ce6e:	4632      	mov	r2, r6
 800ce70:	4641      	mov	r1, r8
 800ce72:	f000 fd89 	bl	800d988 <memmove>
 800ce76:	68a3      	ldr	r3, [r4, #8]
 800ce78:	1b9b      	subs	r3, r3, r6
 800ce7a:	60a3      	str	r3, [r4, #8]
 800ce7c:	6823      	ldr	r3, [r4, #0]
 800ce7e:	4433      	add	r3, r6
 800ce80:	6023      	str	r3, [r4, #0]
 800ce82:	2000      	movs	r0, #0
 800ce84:	e7db      	b.n	800ce3e <__ssputs_r+0x58>
 800ce86:	462a      	mov	r2, r5
 800ce88:	f000 fd98 	bl	800d9bc <_realloc_r>
 800ce8c:	4606      	mov	r6, r0
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	d1e1      	bne.n	800ce56 <__ssputs_r+0x70>
 800ce92:	6921      	ldr	r1, [r4, #16]
 800ce94:	4650      	mov	r0, sl
 800ce96:	f7fb fceb 	bl	8008870 <_free_r>
 800ce9a:	e7c7      	b.n	800ce2c <__ssputs_r+0x46>

0800ce9c <_svfiprintf_r>:
 800ce9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea0:	4698      	mov	r8, r3
 800cea2:	898b      	ldrh	r3, [r1, #12]
 800cea4:	061b      	lsls	r3, r3, #24
 800cea6:	b09d      	sub	sp, #116	; 0x74
 800cea8:	4607      	mov	r7, r0
 800ceaa:	460d      	mov	r5, r1
 800ceac:	4614      	mov	r4, r2
 800ceae:	d50e      	bpl.n	800cece <_svfiprintf_r+0x32>
 800ceb0:	690b      	ldr	r3, [r1, #16]
 800ceb2:	b963      	cbnz	r3, 800cece <_svfiprintf_r+0x32>
 800ceb4:	2140      	movs	r1, #64	; 0x40
 800ceb6:	f7fb fd47 	bl	8008948 <_malloc_r>
 800ceba:	6028      	str	r0, [r5, #0]
 800cebc:	6128      	str	r0, [r5, #16]
 800cebe:	b920      	cbnz	r0, 800ceca <_svfiprintf_r+0x2e>
 800cec0:	230c      	movs	r3, #12
 800cec2:	603b      	str	r3, [r7, #0]
 800cec4:	f04f 30ff 	mov.w	r0, #4294967295
 800cec8:	e0d1      	b.n	800d06e <_svfiprintf_r+0x1d2>
 800ceca:	2340      	movs	r3, #64	; 0x40
 800cecc:	616b      	str	r3, [r5, #20]
 800cece:	2300      	movs	r3, #0
 800ced0:	9309      	str	r3, [sp, #36]	; 0x24
 800ced2:	2320      	movs	r3, #32
 800ced4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ced8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cedc:	2330      	movs	r3, #48	; 0x30
 800cede:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d088 <_svfiprintf_r+0x1ec>
 800cee2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cee6:	f04f 0901 	mov.w	r9, #1
 800ceea:	4623      	mov	r3, r4
 800ceec:	469a      	mov	sl, r3
 800ceee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cef2:	b10a      	cbz	r2, 800cef8 <_svfiprintf_r+0x5c>
 800cef4:	2a25      	cmp	r2, #37	; 0x25
 800cef6:	d1f9      	bne.n	800ceec <_svfiprintf_r+0x50>
 800cef8:	ebba 0b04 	subs.w	fp, sl, r4
 800cefc:	d00b      	beq.n	800cf16 <_svfiprintf_r+0x7a>
 800cefe:	465b      	mov	r3, fp
 800cf00:	4622      	mov	r2, r4
 800cf02:	4629      	mov	r1, r5
 800cf04:	4638      	mov	r0, r7
 800cf06:	f7ff ff6e 	bl	800cde6 <__ssputs_r>
 800cf0a:	3001      	adds	r0, #1
 800cf0c:	f000 80aa 	beq.w	800d064 <_svfiprintf_r+0x1c8>
 800cf10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf12:	445a      	add	r2, fp
 800cf14:	9209      	str	r2, [sp, #36]	; 0x24
 800cf16:	f89a 3000 	ldrb.w	r3, [sl]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	f000 80a2 	beq.w	800d064 <_svfiprintf_r+0x1c8>
 800cf20:	2300      	movs	r3, #0
 800cf22:	f04f 32ff 	mov.w	r2, #4294967295
 800cf26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf2a:	f10a 0a01 	add.w	sl, sl, #1
 800cf2e:	9304      	str	r3, [sp, #16]
 800cf30:	9307      	str	r3, [sp, #28]
 800cf32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf36:	931a      	str	r3, [sp, #104]	; 0x68
 800cf38:	4654      	mov	r4, sl
 800cf3a:	2205      	movs	r2, #5
 800cf3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf40:	4851      	ldr	r0, [pc, #324]	; (800d088 <_svfiprintf_r+0x1ec>)
 800cf42:	f7f3 f95d 	bl	8000200 <memchr>
 800cf46:	9a04      	ldr	r2, [sp, #16]
 800cf48:	b9d8      	cbnz	r0, 800cf82 <_svfiprintf_r+0xe6>
 800cf4a:	06d0      	lsls	r0, r2, #27
 800cf4c:	bf44      	itt	mi
 800cf4e:	2320      	movmi	r3, #32
 800cf50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf54:	0711      	lsls	r1, r2, #28
 800cf56:	bf44      	itt	mi
 800cf58:	232b      	movmi	r3, #43	; 0x2b
 800cf5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf5e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf62:	2b2a      	cmp	r3, #42	; 0x2a
 800cf64:	d015      	beq.n	800cf92 <_svfiprintf_r+0xf6>
 800cf66:	9a07      	ldr	r2, [sp, #28]
 800cf68:	4654      	mov	r4, sl
 800cf6a:	2000      	movs	r0, #0
 800cf6c:	f04f 0c0a 	mov.w	ip, #10
 800cf70:	4621      	mov	r1, r4
 800cf72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf76:	3b30      	subs	r3, #48	; 0x30
 800cf78:	2b09      	cmp	r3, #9
 800cf7a:	d94e      	bls.n	800d01a <_svfiprintf_r+0x17e>
 800cf7c:	b1b0      	cbz	r0, 800cfac <_svfiprintf_r+0x110>
 800cf7e:	9207      	str	r2, [sp, #28]
 800cf80:	e014      	b.n	800cfac <_svfiprintf_r+0x110>
 800cf82:	eba0 0308 	sub.w	r3, r0, r8
 800cf86:	fa09 f303 	lsl.w	r3, r9, r3
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	9304      	str	r3, [sp, #16]
 800cf8e:	46a2      	mov	sl, r4
 800cf90:	e7d2      	b.n	800cf38 <_svfiprintf_r+0x9c>
 800cf92:	9b03      	ldr	r3, [sp, #12]
 800cf94:	1d19      	adds	r1, r3, #4
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	9103      	str	r1, [sp, #12]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	bfbb      	ittet	lt
 800cf9e:	425b      	neglt	r3, r3
 800cfa0:	f042 0202 	orrlt.w	r2, r2, #2
 800cfa4:	9307      	strge	r3, [sp, #28]
 800cfa6:	9307      	strlt	r3, [sp, #28]
 800cfa8:	bfb8      	it	lt
 800cfaa:	9204      	strlt	r2, [sp, #16]
 800cfac:	7823      	ldrb	r3, [r4, #0]
 800cfae:	2b2e      	cmp	r3, #46	; 0x2e
 800cfb0:	d10c      	bne.n	800cfcc <_svfiprintf_r+0x130>
 800cfb2:	7863      	ldrb	r3, [r4, #1]
 800cfb4:	2b2a      	cmp	r3, #42	; 0x2a
 800cfb6:	d135      	bne.n	800d024 <_svfiprintf_r+0x188>
 800cfb8:	9b03      	ldr	r3, [sp, #12]
 800cfba:	1d1a      	adds	r2, r3, #4
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	9203      	str	r2, [sp, #12]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	bfb8      	it	lt
 800cfc4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfc8:	3402      	adds	r4, #2
 800cfca:	9305      	str	r3, [sp, #20]
 800cfcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d098 <_svfiprintf_r+0x1fc>
 800cfd0:	7821      	ldrb	r1, [r4, #0]
 800cfd2:	2203      	movs	r2, #3
 800cfd4:	4650      	mov	r0, sl
 800cfd6:	f7f3 f913 	bl	8000200 <memchr>
 800cfda:	b140      	cbz	r0, 800cfee <_svfiprintf_r+0x152>
 800cfdc:	2340      	movs	r3, #64	; 0x40
 800cfde:	eba0 000a 	sub.w	r0, r0, sl
 800cfe2:	fa03 f000 	lsl.w	r0, r3, r0
 800cfe6:	9b04      	ldr	r3, [sp, #16]
 800cfe8:	4303      	orrs	r3, r0
 800cfea:	3401      	adds	r4, #1
 800cfec:	9304      	str	r3, [sp, #16]
 800cfee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cff2:	4826      	ldr	r0, [pc, #152]	; (800d08c <_svfiprintf_r+0x1f0>)
 800cff4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cff8:	2206      	movs	r2, #6
 800cffa:	f7f3 f901 	bl	8000200 <memchr>
 800cffe:	2800      	cmp	r0, #0
 800d000:	d038      	beq.n	800d074 <_svfiprintf_r+0x1d8>
 800d002:	4b23      	ldr	r3, [pc, #140]	; (800d090 <_svfiprintf_r+0x1f4>)
 800d004:	bb1b      	cbnz	r3, 800d04e <_svfiprintf_r+0x1b2>
 800d006:	9b03      	ldr	r3, [sp, #12]
 800d008:	3307      	adds	r3, #7
 800d00a:	f023 0307 	bic.w	r3, r3, #7
 800d00e:	3308      	adds	r3, #8
 800d010:	9303      	str	r3, [sp, #12]
 800d012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d014:	4433      	add	r3, r6
 800d016:	9309      	str	r3, [sp, #36]	; 0x24
 800d018:	e767      	b.n	800ceea <_svfiprintf_r+0x4e>
 800d01a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d01e:	460c      	mov	r4, r1
 800d020:	2001      	movs	r0, #1
 800d022:	e7a5      	b.n	800cf70 <_svfiprintf_r+0xd4>
 800d024:	2300      	movs	r3, #0
 800d026:	3401      	adds	r4, #1
 800d028:	9305      	str	r3, [sp, #20]
 800d02a:	4619      	mov	r1, r3
 800d02c:	f04f 0c0a 	mov.w	ip, #10
 800d030:	4620      	mov	r0, r4
 800d032:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d036:	3a30      	subs	r2, #48	; 0x30
 800d038:	2a09      	cmp	r2, #9
 800d03a:	d903      	bls.n	800d044 <_svfiprintf_r+0x1a8>
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d0c5      	beq.n	800cfcc <_svfiprintf_r+0x130>
 800d040:	9105      	str	r1, [sp, #20]
 800d042:	e7c3      	b.n	800cfcc <_svfiprintf_r+0x130>
 800d044:	fb0c 2101 	mla	r1, ip, r1, r2
 800d048:	4604      	mov	r4, r0
 800d04a:	2301      	movs	r3, #1
 800d04c:	e7f0      	b.n	800d030 <_svfiprintf_r+0x194>
 800d04e:	ab03      	add	r3, sp, #12
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	462a      	mov	r2, r5
 800d054:	4b0f      	ldr	r3, [pc, #60]	; (800d094 <_svfiprintf_r+0x1f8>)
 800d056:	a904      	add	r1, sp, #16
 800d058:	4638      	mov	r0, r7
 800d05a:	f7fb fd89 	bl	8008b70 <_printf_float>
 800d05e:	1c42      	adds	r2, r0, #1
 800d060:	4606      	mov	r6, r0
 800d062:	d1d6      	bne.n	800d012 <_svfiprintf_r+0x176>
 800d064:	89ab      	ldrh	r3, [r5, #12]
 800d066:	065b      	lsls	r3, r3, #25
 800d068:	f53f af2c 	bmi.w	800cec4 <_svfiprintf_r+0x28>
 800d06c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d06e:	b01d      	add	sp, #116	; 0x74
 800d070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d074:	ab03      	add	r3, sp, #12
 800d076:	9300      	str	r3, [sp, #0]
 800d078:	462a      	mov	r2, r5
 800d07a:	4b06      	ldr	r3, [pc, #24]	; (800d094 <_svfiprintf_r+0x1f8>)
 800d07c:	a904      	add	r1, sp, #16
 800d07e:	4638      	mov	r0, r7
 800d080:	f7fc f81a 	bl	80090b8 <_printf_i>
 800d084:	e7eb      	b.n	800d05e <_svfiprintf_r+0x1c2>
 800d086:	bf00      	nop
 800d088:	0800ebd4 	.word	0x0800ebd4
 800d08c:	0800ebde 	.word	0x0800ebde
 800d090:	08008b71 	.word	0x08008b71
 800d094:	0800cde7 	.word	0x0800cde7
 800d098:	0800ebda 	.word	0x0800ebda

0800d09c <_sungetc_r>:
 800d09c:	b538      	push	{r3, r4, r5, lr}
 800d09e:	1c4b      	adds	r3, r1, #1
 800d0a0:	4614      	mov	r4, r2
 800d0a2:	d103      	bne.n	800d0ac <_sungetc_r+0x10>
 800d0a4:	f04f 35ff 	mov.w	r5, #4294967295
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	bd38      	pop	{r3, r4, r5, pc}
 800d0ac:	8993      	ldrh	r3, [r2, #12]
 800d0ae:	f023 0320 	bic.w	r3, r3, #32
 800d0b2:	8193      	strh	r3, [r2, #12]
 800d0b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0b6:	6852      	ldr	r2, [r2, #4]
 800d0b8:	b2cd      	uxtb	r5, r1
 800d0ba:	b18b      	cbz	r3, 800d0e0 <_sungetc_r+0x44>
 800d0bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	dd08      	ble.n	800d0d4 <_sungetc_r+0x38>
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	1e5a      	subs	r2, r3, #1
 800d0c6:	6022      	str	r2, [r4, #0]
 800d0c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d0cc:	6863      	ldr	r3, [r4, #4]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	6063      	str	r3, [r4, #4]
 800d0d2:	e7e9      	b.n	800d0a8 <_sungetc_r+0xc>
 800d0d4:	4621      	mov	r1, r4
 800d0d6:	f000 fbdf 	bl	800d898 <__submore>
 800d0da:	2800      	cmp	r0, #0
 800d0dc:	d0f1      	beq.n	800d0c2 <_sungetc_r+0x26>
 800d0de:	e7e1      	b.n	800d0a4 <_sungetc_r+0x8>
 800d0e0:	6921      	ldr	r1, [r4, #16]
 800d0e2:	6823      	ldr	r3, [r4, #0]
 800d0e4:	b151      	cbz	r1, 800d0fc <_sungetc_r+0x60>
 800d0e6:	4299      	cmp	r1, r3
 800d0e8:	d208      	bcs.n	800d0fc <_sungetc_r+0x60>
 800d0ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d0ee:	42a9      	cmp	r1, r5
 800d0f0:	d104      	bne.n	800d0fc <_sungetc_r+0x60>
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	3201      	adds	r2, #1
 800d0f6:	6023      	str	r3, [r4, #0]
 800d0f8:	6062      	str	r2, [r4, #4]
 800d0fa:	e7d5      	b.n	800d0a8 <_sungetc_r+0xc>
 800d0fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d104:	6363      	str	r3, [r4, #52]	; 0x34
 800d106:	2303      	movs	r3, #3
 800d108:	63a3      	str	r3, [r4, #56]	; 0x38
 800d10a:	4623      	mov	r3, r4
 800d10c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d110:	6023      	str	r3, [r4, #0]
 800d112:	2301      	movs	r3, #1
 800d114:	e7dc      	b.n	800d0d0 <_sungetc_r+0x34>

0800d116 <__ssrefill_r>:
 800d116:	b510      	push	{r4, lr}
 800d118:	460c      	mov	r4, r1
 800d11a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d11c:	b169      	cbz	r1, 800d13a <__ssrefill_r+0x24>
 800d11e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d122:	4299      	cmp	r1, r3
 800d124:	d001      	beq.n	800d12a <__ssrefill_r+0x14>
 800d126:	f7fb fba3 	bl	8008870 <_free_r>
 800d12a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d12c:	6063      	str	r3, [r4, #4]
 800d12e:	2000      	movs	r0, #0
 800d130:	6360      	str	r0, [r4, #52]	; 0x34
 800d132:	b113      	cbz	r3, 800d13a <__ssrefill_r+0x24>
 800d134:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d136:	6023      	str	r3, [r4, #0]
 800d138:	bd10      	pop	{r4, pc}
 800d13a:	6923      	ldr	r3, [r4, #16]
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	2300      	movs	r3, #0
 800d140:	6063      	str	r3, [r4, #4]
 800d142:	89a3      	ldrh	r3, [r4, #12]
 800d144:	f043 0320 	orr.w	r3, r3, #32
 800d148:	81a3      	strh	r3, [r4, #12]
 800d14a:	f04f 30ff 	mov.w	r0, #4294967295
 800d14e:	e7f3      	b.n	800d138 <__ssrefill_r+0x22>

0800d150 <__ssvfiscanf_r>:
 800d150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d154:	460c      	mov	r4, r1
 800d156:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d15a:	2100      	movs	r1, #0
 800d15c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d160:	49a6      	ldr	r1, [pc, #664]	; (800d3fc <__ssvfiscanf_r+0x2ac>)
 800d162:	91a0      	str	r1, [sp, #640]	; 0x280
 800d164:	f10d 0804 	add.w	r8, sp, #4
 800d168:	49a5      	ldr	r1, [pc, #660]	; (800d400 <__ssvfiscanf_r+0x2b0>)
 800d16a:	4fa6      	ldr	r7, [pc, #664]	; (800d404 <__ssvfiscanf_r+0x2b4>)
 800d16c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d408 <__ssvfiscanf_r+0x2b8>
 800d170:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d174:	4606      	mov	r6, r0
 800d176:	91a1      	str	r1, [sp, #644]	; 0x284
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	7813      	ldrb	r3, [r2, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	f000 815a 	beq.w	800d436 <__ssvfiscanf_r+0x2e6>
 800d182:	5dd9      	ldrb	r1, [r3, r7]
 800d184:	f011 0108 	ands.w	r1, r1, #8
 800d188:	f102 0501 	add.w	r5, r2, #1
 800d18c:	d019      	beq.n	800d1c2 <__ssvfiscanf_r+0x72>
 800d18e:	6863      	ldr	r3, [r4, #4]
 800d190:	2b00      	cmp	r3, #0
 800d192:	dd0f      	ble.n	800d1b4 <__ssvfiscanf_r+0x64>
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	781a      	ldrb	r2, [r3, #0]
 800d198:	5cba      	ldrb	r2, [r7, r2]
 800d19a:	0712      	lsls	r2, r2, #28
 800d19c:	d401      	bmi.n	800d1a2 <__ssvfiscanf_r+0x52>
 800d19e:	462a      	mov	r2, r5
 800d1a0:	e7eb      	b.n	800d17a <__ssvfiscanf_r+0x2a>
 800d1a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d1a4:	3201      	adds	r2, #1
 800d1a6:	9245      	str	r2, [sp, #276]	; 0x114
 800d1a8:	6862      	ldr	r2, [r4, #4]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	3a01      	subs	r2, #1
 800d1ae:	6062      	str	r2, [r4, #4]
 800d1b0:	6023      	str	r3, [r4, #0]
 800d1b2:	e7ec      	b.n	800d18e <__ssvfiscanf_r+0x3e>
 800d1b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	4798      	blx	r3
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	d0e9      	beq.n	800d194 <__ssvfiscanf_r+0x44>
 800d1c0:	e7ed      	b.n	800d19e <__ssvfiscanf_r+0x4e>
 800d1c2:	2b25      	cmp	r3, #37	; 0x25
 800d1c4:	d012      	beq.n	800d1ec <__ssvfiscanf_r+0x9c>
 800d1c6:	469a      	mov	sl, r3
 800d1c8:	6863      	ldr	r3, [r4, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f340 8091 	ble.w	800d2f2 <__ssvfiscanf_r+0x1a2>
 800d1d0:	6822      	ldr	r2, [r4, #0]
 800d1d2:	7813      	ldrb	r3, [r2, #0]
 800d1d4:	4553      	cmp	r3, sl
 800d1d6:	f040 812e 	bne.w	800d436 <__ssvfiscanf_r+0x2e6>
 800d1da:	6863      	ldr	r3, [r4, #4]
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	6063      	str	r3, [r4, #4]
 800d1e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d1e2:	3201      	adds	r2, #1
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	6022      	str	r2, [r4, #0]
 800d1e8:	9345      	str	r3, [sp, #276]	; 0x114
 800d1ea:	e7d8      	b.n	800d19e <__ssvfiscanf_r+0x4e>
 800d1ec:	9141      	str	r1, [sp, #260]	; 0x104
 800d1ee:	9143      	str	r1, [sp, #268]	; 0x10c
 800d1f0:	7853      	ldrb	r3, [r2, #1]
 800d1f2:	2b2a      	cmp	r3, #42	; 0x2a
 800d1f4:	bf02      	ittt	eq
 800d1f6:	2310      	moveq	r3, #16
 800d1f8:	1c95      	addeq	r5, r2, #2
 800d1fa:	9341      	streq	r3, [sp, #260]	; 0x104
 800d1fc:	220a      	movs	r2, #10
 800d1fe:	46aa      	mov	sl, r5
 800d200:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d204:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d208:	2b09      	cmp	r3, #9
 800d20a:	d91d      	bls.n	800d248 <__ssvfiscanf_r+0xf8>
 800d20c:	487e      	ldr	r0, [pc, #504]	; (800d408 <__ssvfiscanf_r+0x2b8>)
 800d20e:	2203      	movs	r2, #3
 800d210:	f7f2 fff6 	bl	8000200 <memchr>
 800d214:	b140      	cbz	r0, 800d228 <__ssvfiscanf_r+0xd8>
 800d216:	2301      	movs	r3, #1
 800d218:	eba0 0009 	sub.w	r0, r0, r9
 800d21c:	fa03 f000 	lsl.w	r0, r3, r0
 800d220:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d222:	4318      	orrs	r0, r3
 800d224:	9041      	str	r0, [sp, #260]	; 0x104
 800d226:	4655      	mov	r5, sl
 800d228:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d22c:	2b78      	cmp	r3, #120	; 0x78
 800d22e:	d806      	bhi.n	800d23e <__ssvfiscanf_r+0xee>
 800d230:	2b57      	cmp	r3, #87	; 0x57
 800d232:	d810      	bhi.n	800d256 <__ssvfiscanf_r+0x106>
 800d234:	2b25      	cmp	r3, #37	; 0x25
 800d236:	d0c6      	beq.n	800d1c6 <__ssvfiscanf_r+0x76>
 800d238:	d856      	bhi.n	800d2e8 <__ssvfiscanf_r+0x198>
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d064      	beq.n	800d308 <__ssvfiscanf_r+0x1b8>
 800d23e:	2303      	movs	r3, #3
 800d240:	9347      	str	r3, [sp, #284]	; 0x11c
 800d242:	230a      	movs	r3, #10
 800d244:	9342      	str	r3, [sp, #264]	; 0x108
 800d246:	e071      	b.n	800d32c <__ssvfiscanf_r+0x1dc>
 800d248:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d24a:	fb02 1103 	mla	r1, r2, r3, r1
 800d24e:	3930      	subs	r1, #48	; 0x30
 800d250:	9143      	str	r1, [sp, #268]	; 0x10c
 800d252:	4655      	mov	r5, sl
 800d254:	e7d3      	b.n	800d1fe <__ssvfiscanf_r+0xae>
 800d256:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d25a:	2a20      	cmp	r2, #32
 800d25c:	d8ef      	bhi.n	800d23e <__ssvfiscanf_r+0xee>
 800d25e:	a101      	add	r1, pc, #4	; (adr r1, 800d264 <__ssvfiscanf_r+0x114>)
 800d260:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d264:	0800d317 	.word	0x0800d317
 800d268:	0800d23f 	.word	0x0800d23f
 800d26c:	0800d23f 	.word	0x0800d23f
 800d270:	0800d375 	.word	0x0800d375
 800d274:	0800d23f 	.word	0x0800d23f
 800d278:	0800d23f 	.word	0x0800d23f
 800d27c:	0800d23f 	.word	0x0800d23f
 800d280:	0800d23f 	.word	0x0800d23f
 800d284:	0800d23f 	.word	0x0800d23f
 800d288:	0800d23f 	.word	0x0800d23f
 800d28c:	0800d23f 	.word	0x0800d23f
 800d290:	0800d38b 	.word	0x0800d38b
 800d294:	0800d361 	.word	0x0800d361
 800d298:	0800d2ef 	.word	0x0800d2ef
 800d29c:	0800d2ef 	.word	0x0800d2ef
 800d2a0:	0800d2ef 	.word	0x0800d2ef
 800d2a4:	0800d23f 	.word	0x0800d23f
 800d2a8:	0800d365 	.word	0x0800d365
 800d2ac:	0800d23f 	.word	0x0800d23f
 800d2b0:	0800d23f 	.word	0x0800d23f
 800d2b4:	0800d23f 	.word	0x0800d23f
 800d2b8:	0800d23f 	.word	0x0800d23f
 800d2bc:	0800d39b 	.word	0x0800d39b
 800d2c0:	0800d36d 	.word	0x0800d36d
 800d2c4:	0800d30f 	.word	0x0800d30f
 800d2c8:	0800d23f 	.word	0x0800d23f
 800d2cc:	0800d23f 	.word	0x0800d23f
 800d2d0:	0800d397 	.word	0x0800d397
 800d2d4:	0800d23f 	.word	0x0800d23f
 800d2d8:	0800d361 	.word	0x0800d361
 800d2dc:	0800d23f 	.word	0x0800d23f
 800d2e0:	0800d23f 	.word	0x0800d23f
 800d2e4:	0800d317 	.word	0x0800d317
 800d2e8:	3b45      	subs	r3, #69	; 0x45
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d8a7      	bhi.n	800d23e <__ssvfiscanf_r+0xee>
 800d2ee:	2305      	movs	r3, #5
 800d2f0:	e01b      	b.n	800d32a <__ssvfiscanf_r+0x1da>
 800d2f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	4798      	blx	r3
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	f43f af68 	beq.w	800d1d0 <__ssvfiscanf_r+0x80>
 800d300:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d302:	2800      	cmp	r0, #0
 800d304:	f040 808d 	bne.w	800d422 <__ssvfiscanf_r+0x2d2>
 800d308:	f04f 30ff 	mov.w	r0, #4294967295
 800d30c:	e08f      	b.n	800d42e <__ssvfiscanf_r+0x2de>
 800d30e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d310:	f042 0220 	orr.w	r2, r2, #32
 800d314:	9241      	str	r2, [sp, #260]	; 0x104
 800d316:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d31c:	9241      	str	r2, [sp, #260]	; 0x104
 800d31e:	2210      	movs	r2, #16
 800d320:	2b6f      	cmp	r3, #111	; 0x6f
 800d322:	9242      	str	r2, [sp, #264]	; 0x108
 800d324:	bf34      	ite	cc
 800d326:	2303      	movcc	r3, #3
 800d328:	2304      	movcs	r3, #4
 800d32a:	9347      	str	r3, [sp, #284]	; 0x11c
 800d32c:	6863      	ldr	r3, [r4, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	dd42      	ble.n	800d3b8 <__ssvfiscanf_r+0x268>
 800d332:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d334:	0659      	lsls	r1, r3, #25
 800d336:	d404      	bmi.n	800d342 <__ssvfiscanf_r+0x1f2>
 800d338:	6823      	ldr	r3, [r4, #0]
 800d33a:	781a      	ldrb	r2, [r3, #0]
 800d33c:	5cba      	ldrb	r2, [r7, r2]
 800d33e:	0712      	lsls	r2, r2, #28
 800d340:	d441      	bmi.n	800d3c6 <__ssvfiscanf_r+0x276>
 800d342:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d344:	2b02      	cmp	r3, #2
 800d346:	dc50      	bgt.n	800d3ea <__ssvfiscanf_r+0x29a>
 800d348:	466b      	mov	r3, sp
 800d34a:	4622      	mov	r2, r4
 800d34c:	a941      	add	r1, sp, #260	; 0x104
 800d34e:	4630      	mov	r0, r6
 800d350:	f000 f876 	bl	800d440 <_scanf_chars>
 800d354:	2801      	cmp	r0, #1
 800d356:	d06e      	beq.n	800d436 <__ssvfiscanf_r+0x2e6>
 800d358:	2802      	cmp	r0, #2
 800d35a:	f47f af20 	bne.w	800d19e <__ssvfiscanf_r+0x4e>
 800d35e:	e7cf      	b.n	800d300 <__ssvfiscanf_r+0x1b0>
 800d360:	220a      	movs	r2, #10
 800d362:	e7dd      	b.n	800d320 <__ssvfiscanf_r+0x1d0>
 800d364:	2300      	movs	r3, #0
 800d366:	9342      	str	r3, [sp, #264]	; 0x108
 800d368:	2303      	movs	r3, #3
 800d36a:	e7de      	b.n	800d32a <__ssvfiscanf_r+0x1da>
 800d36c:	2308      	movs	r3, #8
 800d36e:	9342      	str	r3, [sp, #264]	; 0x108
 800d370:	2304      	movs	r3, #4
 800d372:	e7da      	b.n	800d32a <__ssvfiscanf_r+0x1da>
 800d374:	4629      	mov	r1, r5
 800d376:	4640      	mov	r0, r8
 800d378:	f000 f9ce 	bl	800d718 <__sccl>
 800d37c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d37e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d382:	9341      	str	r3, [sp, #260]	; 0x104
 800d384:	4605      	mov	r5, r0
 800d386:	2301      	movs	r3, #1
 800d388:	e7cf      	b.n	800d32a <__ssvfiscanf_r+0x1da>
 800d38a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d38c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d390:	9341      	str	r3, [sp, #260]	; 0x104
 800d392:	2300      	movs	r3, #0
 800d394:	e7c9      	b.n	800d32a <__ssvfiscanf_r+0x1da>
 800d396:	2302      	movs	r3, #2
 800d398:	e7c7      	b.n	800d32a <__ssvfiscanf_r+0x1da>
 800d39a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d39c:	06c3      	lsls	r3, r0, #27
 800d39e:	f53f aefe 	bmi.w	800d19e <__ssvfiscanf_r+0x4e>
 800d3a2:	9b00      	ldr	r3, [sp, #0]
 800d3a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d3a6:	1d19      	adds	r1, r3, #4
 800d3a8:	9100      	str	r1, [sp, #0]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f010 0f01 	tst.w	r0, #1
 800d3b0:	bf14      	ite	ne
 800d3b2:	801a      	strhne	r2, [r3, #0]
 800d3b4:	601a      	streq	r2, [r3, #0]
 800d3b6:	e6f2      	b.n	800d19e <__ssvfiscanf_r+0x4e>
 800d3b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4630      	mov	r0, r6
 800d3be:	4798      	blx	r3
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d0b6      	beq.n	800d332 <__ssvfiscanf_r+0x1e2>
 800d3c4:	e79c      	b.n	800d300 <__ssvfiscanf_r+0x1b0>
 800d3c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d3c8:	3201      	adds	r2, #1
 800d3ca:	9245      	str	r2, [sp, #276]	; 0x114
 800d3cc:	6862      	ldr	r2, [r4, #4]
 800d3ce:	3a01      	subs	r2, #1
 800d3d0:	2a00      	cmp	r2, #0
 800d3d2:	6062      	str	r2, [r4, #4]
 800d3d4:	dd02      	ble.n	800d3dc <__ssvfiscanf_r+0x28c>
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	6023      	str	r3, [r4, #0]
 800d3da:	e7ad      	b.n	800d338 <__ssvfiscanf_r+0x1e8>
 800d3dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d3de:	4621      	mov	r1, r4
 800d3e0:	4630      	mov	r0, r6
 800d3e2:	4798      	blx	r3
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	d0a7      	beq.n	800d338 <__ssvfiscanf_r+0x1e8>
 800d3e8:	e78a      	b.n	800d300 <__ssvfiscanf_r+0x1b0>
 800d3ea:	2b04      	cmp	r3, #4
 800d3ec:	dc0e      	bgt.n	800d40c <__ssvfiscanf_r+0x2bc>
 800d3ee:	466b      	mov	r3, sp
 800d3f0:	4622      	mov	r2, r4
 800d3f2:	a941      	add	r1, sp, #260	; 0x104
 800d3f4:	4630      	mov	r0, r6
 800d3f6:	f000 f87d 	bl	800d4f4 <_scanf_i>
 800d3fa:	e7ab      	b.n	800d354 <__ssvfiscanf_r+0x204>
 800d3fc:	0800d09d 	.word	0x0800d09d
 800d400:	0800d117 	.word	0x0800d117
 800d404:	0800e809 	.word	0x0800e809
 800d408:	0800ebda 	.word	0x0800ebda
 800d40c:	4b0b      	ldr	r3, [pc, #44]	; (800d43c <__ssvfiscanf_r+0x2ec>)
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f43f aec5 	beq.w	800d19e <__ssvfiscanf_r+0x4e>
 800d414:	466b      	mov	r3, sp
 800d416:	4622      	mov	r2, r4
 800d418:	a941      	add	r1, sp, #260	; 0x104
 800d41a:	4630      	mov	r0, r6
 800d41c:	f7fb ff72 	bl	8009304 <_scanf_float>
 800d420:	e798      	b.n	800d354 <__ssvfiscanf_r+0x204>
 800d422:	89a3      	ldrh	r3, [r4, #12]
 800d424:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d428:	bf18      	it	ne
 800d42a:	f04f 30ff 	movne.w	r0, #4294967295
 800d42e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d436:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d438:	e7f9      	b.n	800d42e <__ssvfiscanf_r+0x2de>
 800d43a:	bf00      	nop
 800d43c:	08009305 	.word	0x08009305

0800d440 <_scanf_chars>:
 800d440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d444:	4615      	mov	r5, r2
 800d446:	688a      	ldr	r2, [r1, #8]
 800d448:	4680      	mov	r8, r0
 800d44a:	460c      	mov	r4, r1
 800d44c:	b932      	cbnz	r2, 800d45c <_scanf_chars+0x1c>
 800d44e:	698a      	ldr	r2, [r1, #24]
 800d450:	2a00      	cmp	r2, #0
 800d452:	bf0c      	ite	eq
 800d454:	2201      	moveq	r2, #1
 800d456:	f04f 32ff 	movne.w	r2, #4294967295
 800d45a:	608a      	str	r2, [r1, #8]
 800d45c:	6822      	ldr	r2, [r4, #0]
 800d45e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d4f0 <_scanf_chars+0xb0>
 800d462:	06d1      	lsls	r1, r2, #27
 800d464:	bf5f      	itttt	pl
 800d466:	681a      	ldrpl	r2, [r3, #0]
 800d468:	1d11      	addpl	r1, r2, #4
 800d46a:	6019      	strpl	r1, [r3, #0]
 800d46c:	6816      	ldrpl	r6, [r2, #0]
 800d46e:	2700      	movs	r7, #0
 800d470:	69a0      	ldr	r0, [r4, #24]
 800d472:	b188      	cbz	r0, 800d498 <_scanf_chars+0x58>
 800d474:	2801      	cmp	r0, #1
 800d476:	d107      	bne.n	800d488 <_scanf_chars+0x48>
 800d478:	682a      	ldr	r2, [r5, #0]
 800d47a:	7811      	ldrb	r1, [r2, #0]
 800d47c:	6962      	ldr	r2, [r4, #20]
 800d47e:	5c52      	ldrb	r2, [r2, r1]
 800d480:	b952      	cbnz	r2, 800d498 <_scanf_chars+0x58>
 800d482:	2f00      	cmp	r7, #0
 800d484:	d031      	beq.n	800d4ea <_scanf_chars+0xaa>
 800d486:	e022      	b.n	800d4ce <_scanf_chars+0x8e>
 800d488:	2802      	cmp	r0, #2
 800d48a:	d120      	bne.n	800d4ce <_scanf_chars+0x8e>
 800d48c:	682b      	ldr	r3, [r5, #0]
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d494:	071b      	lsls	r3, r3, #28
 800d496:	d41a      	bmi.n	800d4ce <_scanf_chars+0x8e>
 800d498:	6823      	ldr	r3, [r4, #0]
 800d49a:	06da      	lsls	r2, r3, #27
 800d49c:	bf5e      	ittt	pl
 800d49e:	682b      	ldrpl	r3, [r5, #0]
 800d4a0:	781b      	ldrbpl	r3, [r3, #0]
 800d4a2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d4a6:	682a      	ldr	r2, [r5, #0]
 800d4a8:	686b      	ldr	r3, [r5, #4]
 800d4aa:	3201      	adds	r2, #1
 800d4ac:	602a      	str	r2, [r5, #0]
 800d4ae:	68a2      	ldr	r2, [r4, #8]
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	3a01      	subs	r2, #1
 800d4b4:	606b      	str	r3, [r5, #4]
 800d4b6:	3701      	adds	r7, #1
 800d4b8:	60a2      	str	r2, [r4, #8]
 800d4ba:	b142      	cbz	r2, 800d4ce <_scanf_chars+0x8e>
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	dcd7      	bgt.n	800d470 <_scanf_chars+0x30>
 800d4c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	4640      	mov	r0, r8
 800d4c8:	4798      	blx	r3
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d0d0      	beq.n	800d470 <_scanf_chars+0x30>
 800d4ce:	6823      	ldr	r3, [r4, #0]
 800d4d0:	f013 0310 	ands.w	r3, r3, #16
 800d4d4:	d105      	bne.n	800d4e2 <_scanf_chars+0xa2>
 800d4d6:	68e2      	ldr	r2, [r4, #12]
 800d4d8:	3201      	adds	r2, #1
 800d4da:	60e2      	str	r2, [r4, #12]
 800d4dc:	69a2      	ldr	r2, [r4, #24]
 800d4de:	b102      	cbz	r2, 800d4e2 <_scanf_chars+0xa2>
 800d4e0:	7033      	strb	r3, [r6, #0]
 800d4e2:	6923      	ldr	r3, [r4, #16]
 800d4e4:	443b      	add	r3, r7
 800d4e6:	6123      	str	r3, [r4, #16]
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4ee:	bf00      	nop
 800d4f0:	0800e809 	.word	0x0800e809

0800d4f4 <_scanf_i>:
 800d4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f8:	4698      	mov	r8, r3
 800d4fa:	4b76      	ldr	r3, [pc, #472]	; (800d6d4 <_scanf_i+0x1e0>)
 800d4fc:	460c      	mov	r4, r1
 800d4fe:	4682      	mov	sl, r0
 800d500:	4616      	mov	r6, r2
 800d502:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d506:	b087      	sub	sp, #28
 800d508:	ab03      	add	r3, sp, #12
 800d50a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d50e:	4b72      	ldr	r3, [pc, #456]	; (800d6d8 <_scanf_i+0x1e4>)
 800d510:	69a1      	ldr	r1, [r4, #24]
 800d512:	4a72      	ldr	r2, [pc, #456]	; (800d6dc <_scanf_i+0x1e8>)
 800d514:	2903      	cmp	r1, #3
 800d516:	bf18      	it	ne
 800d518:	461a      	movne	r2, r3
 800d51a:	68a3      	ldr	r3, [r4, #8]
 800d51c:	9201      	str	r2, [sp, #4]
 800d51e:	1e5a      	subs	r2, r3, #1
 800d520:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d524:	bf88      	it	hi
 800d526:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d52a:	4627      	mov	r7, r4
 800d52c:	bf82      	ittt	hi
 800d52e:	eb03 0905 	addhi.w	r9, r3, r5
 800d532:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d536:	60a3      	strhi	r3, [r4, #8]
 800d538:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d53c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d540:	bf98      	it	ls
 800d542:	f04f 0900 	movls.w	r9, #0
 800d546:	6023      	str	r3, [r4, #0]
 800d548:	463d      	mov	r5, r7
 800d54a:	f04f 0b00 	mov.w	fp, #0
 800d54e:	6831      	ldr	r1, [r6, #0]
 800d550:	ab03      	add	r3, sp, #12
 800d552:	7809      	ldrb	r1, [r1, #0]
 800d554:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d558:	2202      	movs	r2, #2
 800d55a:	f7f2 fe51 	bl	8000200 <memchr>
 800d55e:	b328      	cbz	r0, 800d5ac <_scanf_i+0xb8>
 800d560:	f1bb 0f01 	cmp.w	fp, #1
 800d564:	d159      	bne.n	800d61a <_scanf_i+0x126>
 800d566:	6862      	ldr	r2, [r4, #4]
 800d568:	b92a      	cbnz	r2, 800d576 <_scanf_i+0x82>
 800d56a:	6822      	ldr	r2, [r4, #0]
 800d56c:	2308      	movs	r3, #8
 800d56e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d572:	6063      	str	r3, [r4, #4]
 800d574:	6022      	str	r2, [r4, #0]
 800d576:	6822      	ldr	r2, [r4, #0]
 800d578:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d57c:	6022      	str	r2, [r4, #0]
 800d57e:	68a2      	ldr	r2, [r4, #8]
 800d580:	1e51      	subs	r1, r2, #1
 800d582:	60a1      	str	r1, [r4, #8]
 800d584:	b192      	cbz	r2, 800d5ac <_scanf_i+0xb8>
 800d586:	6832      	ldr	r2, [r6, #0]
 800d588:	1c51      	adds	r1, r2, #1
 800d58a:	6031      	str	r1, [r6, #0]
 800d58c:	7812      	ldrb	r2, [r2, #0]
 800d58e:	f805 2b01 	strb.w	r2, [r5], #1
 800d592:	6872      	ldr	r2, [r6, #4]
 800d594:	3a01      	subs	r2, #1
 800d596:	2a00      	cmp	r2, #0
 800d598:	6072      	str	r2, [r6, #4]
 800d59a:	dc07      	bgt.n	800d5ac <_scanf_i+0xb8>
 800d59c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d5a0:	4631      	mov	r1, r6
 800d5a2:	4650      	mov	r0, sl
 800d5a4:	4790      	blx	r2
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	f040 8085 	bne.w	800d6b6 <_scanf_i+0x1c2>
 800d5ac:	f10b 0b01 	add.w	fp, fp, #1
 800d5b0:	f1bb 0f03 	cmp.w	fp, #3
 800d5b4:	d1cb      	bne.n	800d54e <_scanf_i+0x5a>
 800d5b6:	6863      	ldr	r3, [r4, #4]
 800d5b8:	b90b      	cbnz	r3, 800d5be <_scanf_i+0xca>
 800d5ba:	230a      	movs	r3, #10
 800d5bc:	6063      	str	r3, [r4, #4]
 800d5be:	6863      	ldr	r3, [r4, #4]
 800d5c0:	4947      	ldr	r1, [pc, #284]	; (800d6e0 <_scanf_i+0x1ec>)
 800d5c2:	6960      	ldr	r0, [r4, #20]
 800d5c4:	1ac9      	subs	r1, r1, r3
 800d5c6:	f000 f8a7 	bl	800d718 <__sccl>
 800d5ca:	f04f 0b00 	mov.w	fp, #0
 800d5ce:	68a3      	ldr	r3, [r4, #8]
 800d5d0:	6822      	ldr	r2, [r4, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d03d      	beq.n	800d652 <_scanf_i+0x15e>
 800d5d6:	6831      	ldr	r1, [r6, #0]
 800d5d8:	6960      	ldr	r0, [r4, #20]
 800d5da:	f891 c000 	ldrb.w	ip, [r1]
 800d5de:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d035      	beq.n	800d652 <_scanf_i+0x15e>
 800d5e6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d5ea:	d124      	bne.n	800d636 <_scanf_i+0x142>
 800d5ec:	0510      	lsls	r0, r2, #20
 800d5ee:	d522      	bpl.n	800d636 <_scanf_i+0x142>
 800d5f0:	f10b 0b01 	add.w	fp, fp, #1
 800d5f4:	f1b9 0f00 	cmp.w	r9, #0
 800d5f8:	d003      	beq.n	800d602 <_scanf_i+0x10e>
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	f109 39ff 	add.w	r9, r9, #4294967295
 800d600:	60a3      	str	r3, [r4, #8]
 800d602:	6873      	ldr	r3, [r6, #4]
 800d604:	3b01      	subs	r3, #1
 800d606:	2b00      	cmp	r3, #0
 800d608:	6073      	str	r3, [r6, #4]
 800d60a:	dd1b      	ble.n	800d644 <_scanf_i+0x150>
 800d60c:	6833      	ldr	r3, [r6, #0]
 800d60e:	3301      	adds	r3, #1
 800d610:	6033      	str	r3, [r6, #0]
 800d612:	68a3      	ldr	r3, [r4, #8]
 800d614:	3b01      	subs	r3, #1
 800d616:	60a3      	str	r3, [r4, #8]
 800d618:	e7d9      	b.n	800d5ce <_scanf_i+0xda>
 800d61a:	f1bb 0f02 	cmp.w	fp, #2
 800d61e:	d1ae      	bne.n	800d57e <_scanf_i+0x8a>
 800d620:	6822      	ldr	r2, [r4, #0]
 800d622:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d626:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d62a:	d1bf      	bne.n	800d5ac <_scanf_i+0xb8>
 800d62c:	2310      	movs	r3, #16
 800d62e:	6063      	str	r3, [r4, #4]
 800d630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d634:	e7a2      	b.n	800d57c <_scanf_i+0x88>
 800d636:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d63a:	6022      	str	r2, [r4, #0]
 800d63c:	780b      	ldrb	r3, [r1, #0]
 800d63e:	f805 3b01 	strb.w	r3, [r5], #1
 800d642:	e7de      	b.n	800d602 <_scanf_i+0x10e>
 800d644:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d648:	4631      	mov	r1, r6
 800d64a:	4650      	mov	r0, sl
 800d64c:	4798      	blx	r3
 800d64e:	2800      	cmp	r0, #0
 800d650:	d0df      	beq.n	800d612 <_scanf_i+0x11e>
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	05db      	lsls	r3, r3, #23
 800d656:	d50d      	bpl.n	800d674 <_scanf_i+0x180>
 800d658:	42bd      	cmp	r5, r7
 800d65a:	d909      	bls.n	800d670 <_scanf_i+0x17c>
 800d65c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d660:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d664:	4632      	mov	r2, r6
 800d666:	4650      	mov	r0, sl
 800d668:	4798      	blx	r3
 800d66a:	f105 39ff 	add.w	r9, r5, #4294967295
 800d66e:	464d      	mov	r5, r9
 800d670:	42bd      	cmp	r5, r7
 800d672:	d02d      	beq.n	800d6d0 <_scanf_i+0x1dc>
 800d674:	6822      	ldr	r2, [r4, #0]
 800d676:	f012 0210 	ands.w	r2, r2, #16
 800d67a:	d113      	bne.n	800d6a4 <_scanf_i+0x1b0>
 800d67c:	702a      	strb	r2, [r5, #0]
 800d67e:	6863      	ldr	r3, [r4, #4]
 800d680:	9e01      	ldr	r6, [sp, #4]
 800d682:	4639      	mov	r1, r7
 800d684:	4650      	mov	r0, sl
 800d686:	47b0      	blx	r6
 800d688:	6821      	ldr	r1, [r4, #0]
 800d68a:	f8d8 3000 	ldr.w	r3, [r8]
 800d68e:	f011 0f20 	tst.w	r1, #32
 800d692:	d013      	beq.n	800d6bc <_scanf_i+0x1c8>
 800d694:	1d1a      	adds	r2, r3, #4
 800d696:	f8c8 2000 	str.w	r2, [r8]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	6018      	str	r0, [r3, #0]
 800d69e:	68e3      	ldr	r3, [r4, #12]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	60e3      	str	r3, [r4, #12]
 800d6a4:	1bed      	subs	r5, r5, r7
 800d6a6:	44ab      	add	fp, r5
 800d6a8:	6925      	ldr	r5, [r4, #16]
 800d6aa:	445d      	add	r5, fp
 800d6ac:	6125      	str	r5, [r4, #16]
 800d6ae:	2000      	movs	r0, #0
 800d6b0:	b007      	add	sp, #28
 800d6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b6:	f04f 0b00 	mov.w	fp, #0
 800d6ba:	e7ca      	b.n	800d652 <_scanf_i+0x15e>
 800d6bc:	1d1a      	adds	r2, r3, #4
 800d6be:	f8c8 2000 	str.w	r2, [r8]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f011 0f01 	tst.w	r1, #1
 800d6c8:	bf14      	ite	ne
 800d6ca:	8018      	strhne	r0, [r3, #0]
 800d6cc:	6018      	streq	r0, [r3, #0]
 800d6ce:	e7e6      	b.n	800d69e <_scanf_i+0x1aa>
 800d6d0:	2001      	movs	r0, #1
 800d6d2:	e7ed      	b.n	800d6b0 <_scanf_i+0x1bc>
 800d6d4:	0800e090 	.word	0x0800e090
 800d6d8:	0800d895 	.word	0x0800d895
 800d6dc:	0800ab65 	.word	0x0800ab65
 800d6e0:	0800ebfe 	.word	0x0800ebfe

0800d6e4 <_read_r>:
 800d6e4:	b538      	push	{r3, r4, r5, lr}
 800d6e6:	4d07      	ldr	r5, [pc, #28]	; (800d704 <_read_r+0x20>)
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	4608      	mov	r0, r1
 800d6ec:	4611      	mov	r1, r2
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	602a      	str	r2, [r5, #0]
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	f7f4 faee 	bl	8001cd4 <_read>
 800d6f8:	1c43      	adds	r3, r0, #1
 800d6fa:	d102      	bne.n	800d702 <_read_r+0x1e>
 800d6fc:	682b      	ldr	r3, [r5, #0]
 800d6fe:	b103      	cbz	r3, 800d702 <_read_r+0x1e>
 800d700:	6023      	str	r3, [r4, #0]
 800d702:	bd38      	pop	{r3, r4, r5, pc}
 800d704:	20000804 	.word	0x20000804

0800d708 <nan>:
 800d708:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d710 <nan+0x8>
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	00000000 	.word	0x00000000
 800d714:	7ff80000 	.word	0x7ff80000

0800d718 <__sccl>:
 800d718:	b570      	push	{r4, r5, r6, lr}
 800d71a:	780b      	ldrb	r3, [r1, #0]
 800d71c:	4604      	mov	r4, r0
 800d71e:	2b5e      	cmp	r3, #94	; 0x5e
 800d720:	bf0b      	itete	eq
 800d722:	784b      	ldrbeq	r3, [r1, #1]
 800d724:	1c48      	addne	r0, r1, #1
 800d726:	1c88      	addeq	r0, r1, #2
 800d728:	2200      	movne	r2, #0
 800d72a:	bf08      	it	eq
 800d72c:	2201      	moveq	r2, #1
 800d72e:	1e61      	subs	r1, r4, #1
 800d730:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d734:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d738:	42a9      	cmp	r1, r5
 800d73a:	d1fb      	bne.n	800d734 <__sccl+0x1c>
 800d73c:	b90b      	cbnz	r3, 800d742 <__sccl+0x2a>
 800d73e:	3801      	subs	r0, #1
 800d740:	bd70      	pop	{r4, r5, r6, pc}
 800d742:	f082 0201 	eor.w	r2, r2, #1
 800d746:	54e2      	strb	r2, [r4, r3]
 800d748:	4605      	mov	r5, r0
 800d74a:	4628      	mov	r0, r5
 800d74c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d750:	292d      	cmp	r1, #45	; 0x2d
 800d752:	d006      	beq.n	800d762 <__sccl+0x4a>
 800d754:	295d      	cmp	r1, #93	; 0x5d
 800d756:	d0f3      	beq.n	800d740 <__sccl+0x28>
 800d758:	b909      	cbnz	r1, 800d75e <__sccl+0x46>
 800d75a:	4628      	mov	r0, r5
 800d75c:	e7f0      	b.n	800d740 <__sccl+0x28>
 800d75e:	460b      	mov	r3, r1
 800d760:	e7f1      	b.n	800d746 <__sccl+0x2e>
 800d762:	786e      	ldrb	r6, [r5, #1]
 800d764:	2e5d      	cmp	r6, #93	; 0x5d
 800d766:	d0fa      	beq.n	800d75e <__sccl+0x46>
 800d768:	42b3      	cmp	r3, r6
 800d76a:	dcf8      	bgt.n	800d75e <__sccl+0x46>
 800d76c:	3502      	adds	r5, #2
 800d76e:	4619      	mov	r1, r3
 800d770:	3101      	adds	r1, #1
 800d772:	428e      	cmp	r6, r1
 800d774:	5462      	strb	r2, [r4, r1]
 800d776:	dcfb      	bgt.n	800d770 <__sccl+0x58>
 800d778:	1af1      	subs	r1, r6, r3
 800d77a:	3901      	subs	r1, #1
 800d77c:	1c58      	adds	r0, r3, #1
 800d77e:	42b3      	cmp	r3, r6
 800d780:	bfa8      	it	ge
 800d782:	2100      	movge	r1, #0
 800d784:	1843      	adds	r3, r0, r1
 800d786:	e7e0      	b.n	800d74a <__sccl+0x32>

0800d788 <strncmp>:
 800d788:	b510      	push	{r4, lr}
 800d78a:	b17a      	cbz	r2, 800d7ac <strncmp+0x24>
 800d78c:	4603      	mov	r3, r0
 800d78e:	3901      	subs	r1, #1
 800d790:	1884      	adds	r4, r0, r2
 800d792:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d796:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d79a:	4290      	cmp	r0, r2
 800d79c:	d101      	bne.n	800d7a2 <strncmp+0x1a>
 800d79e:	42a3      	cmp	r3, r4
 800d7a0:	d101      	bne.n	800d7a6 <strncmp+0x1e>
 800d7a2:	1a80      	subs	r0, r0, r2
 800d7a4:	bd10      	pop	{r4, pc}
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	d1f3      	bne.n	800d792 <strncmp+0xa>
 800d7aa:	e7fa      	b.n	800d7a2 <strncmp+0x1a>
 800d7ac:	4610      	mov	r0, r2
 800d7ae:	e7f9      	b.n	800d7a4 <strncmp+0x1c>

0800d7b0 <_strtoul_l.constprop.0>:
 800d7b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7b4:	4f36      	ldr	r7, [pc, #216]	; (800d890 <_strtoul_l.constprop.0+0xe0>)
 800d7b6:	4686      	mov	lr, r0
 800d7b8:	460d      	mov	r5, r1
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7c0:	5de6      	ldrb	r6, [r4, r7]
 800d7c2:	f016 0608 	ands.w	r6, r6, #8
 800d7c6:	d1f8      	bne.n	800d7ba <_strtoul_l.constprop.0+0xa>
 800d7c8:	2c2d      	cmp	r4, #45	; 0x2d
 800d7ca:	d12f      	bne.n	800d82c <_strtoul_l.constprop.0+0x7c>
 800d7cc:	782c      	ldrb	r4, [r5, #0]
 800d7ce:	2601      	movs	r6, #1
 800d7d0:	1c85      	adds	r5, r0, #2
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d057      	beq.n	800d886 <_strtoul_l.constprop.0+0xd6>
 800d7d6:	2b10      	cmp	r3, #16
 800d7d8:	d109      	bne.n	800d7ee <_strtoul_l.constprop.0+0x3e>
 800d7da:	2c30      	cmp	r4, #48	; 0x30
 800d7dc:	d107      	bne.n	800d7ee <_strtoul_l.constprop.0+0x3e>
 800d7de:	7828      	ldrb	r0, [r5, #0]
 800d7e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d7e4:	2858      	cmp	r0, #88	; 0x58
 800d7e6:	d149      	bne.n	800d87c <_strtoul_l.constprop.0+0xcc>
 800d7e8:	786c      	ldrb	r4, [r5, #1]
 800d7ea:	2310      	movs	r3, #16
 800d7ec:	3502      	adds	r5, #2
 800d7ee:	f04f 38ff 	mov.w	r8, #4294967295
 800d7f2:	2700      	movs	r7, #0
 800d7f4:	fbb8 f8f3 	udiv	r8, r8, r3
 800d7f8:	fb03 f908 	mul.w	r9, r3, r8
 800d7fc:	ea6f 0909 	mvn.w	r9, r9
 800d800:	4638      	mov	r0, r7
 800d802:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d806:	f1bc 0f09 	cmp.w	ip, #9
 800d80a:	d814      	bhi.n	800d836 <_strtoul_l.constprop.0+0x86>
 800d80c:	4664      	mov	r4, ip
 800d80e:	42a3      	cmp	r3, r4
 800d810:	dd22      	ble.n	800d858 <_strtoul_l.constprop.0+0xa8>
 800d812:	2f00      	cmp	r7, #0
 800d814:	db1d      	blt.n	800d852 <_strtoul_l.constprop.0+0xa2>
 800d816:	4580      	cmp	r8, r0
 800d818:	d31b      	bcc.n	800d852 <_strtoul_l.constprop.0+0xa2>
 800d81a:	d101      	bne.n	800d820 <_strtoul_l.constprop.0+0x70>
 800d81c:	45a1      	cmp	r9, r4
 800d81e:	db18      	blt.n	800d852 <_strtoul_l.constprop.0+0xa2>
 800d820:	fb00 4003 	mla	r0, r0, r3, r4
 800d824:	2701      	movs	r7, #1
 800d826:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d82a:	e7ea      	b.n	800d802 <_strtoul_l.constprop.0+0x52>
 800d82c:	2c2b      	cmp	r4, #43	; 0x2b
 800d82e:	bf04      	itt	eq
 800d830:	782c      	ldrbeq	r4, [r5, #0]
 800d832:	1c85      	addeq	r5, r0, #2
 800d834:	e7cd      	b.n	800d7d2 <_strtoul_l.constprop.0+0x22>
 800d836:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d83a:	f1bc 0f19 	cmp.w	ip, #25
 800d83e:	d801      	bhi.n	800d844 <_strtoul_l.constprop.0+0x94>
 800d840:	3c37      	subs	r4, #55	; 0x37
 800d842:	e7e4      	b.n	800d80e <_strtoul_l.constprop.0+0x5e>
 800d844:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d848:	f1bc 0f19 	cmp.w	ip, #25
 800d84c:	d804      	bhi.n	800d858 <_strtoul_l.constprop.0+0xa8>
 800d84e:	3c57      	subs	r4, #87	; 0x57
 800d850:	e7dd      	b.n	800d80e <_strtoul_l.constprop.0+0x5e>
 800d852:	f04f 37ff 	mov.w	r7, #4294967295
 800d856:	e7e6      	b.n	800d826 <_strtoul_l.constprop.0+0x76>
 800d858:	2f00      	cmp	r7, #0
 800d85a:	da07      	bge.n	800d86c <_strtoul_l.constprop.0+0xbc>
 800d85c:	2322      	movs	r3, #34	; 0x22
 800d85e:	f8ce 3000 	str.w	r3, [lr]
 800d862:	f04f 30ff 	mov.w	r0, #4294967295
 800d866:	b932      	cbnz	r2, 800d876 <_strtoul_l.constprop.0+0xc6>
 800d868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d86c:	b106      	cbz	r6, 800d870 <_strtoul_l.constprop.0+0xc0>
 800d86e:	4240      	negs	r0, r0
 800d870:	2a00      	cmp	r2, #0
 800d872:	d0f9      	beq.n	800d868 <_strtoul_l.constprop.0+0xb8>
 800d874:	b107      	cbz	r7, 800d878 <_strtoul_l.constprop.0+0xc8>
 800d876:	1e69      	subs	r1, r5, #1
 800d878:	6011      	str	r1, [r2, #0]
 800d87a:	e7f5      	b.n	800d868 <_strtoul_l.constprop.0+0xb8>
 800d87c:	2430      	movs	r4, #48	; 0x30
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1b5      	bne.n	800d7ee <_strtoul_l.constprop.0+0x3e>
 800d882:	2308      	movs	r3, #8
 800d884:	e7b3      	b.n	800d7ee <_strtoul_l.constprop.0+0x3e>
 800d886:	2c30      	cmp	r4, #48	; 0x30
 800d888:	d0a9      	beq.n	800d7de <_strtoul_l.constprop.0+0x2e>
 800d88a:	230a      	movs	r3, #10
 800d88c:	e7af      	b.n	800d7ee <_strtoul_l.constprop.0+0x3e>
 800d88e:	bf00      	nop
 800d890:	0800e809 	.word	0x0800e809

0800d894 <_strtoul_r>:
 800d894:	f7ff bf8c 	b.w	800d7b0 <_strtoul_l.constprop.0>

0800d898 <__submore>:
 800d898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d89c:	460c      	mov	r4, r1
 800d89e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d8a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8a4:	4299      	cmp	r1, r3
 800d8a6:	d11d      	bne.n	800d8e4 <__submore+0x4c>
 800d8a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d8ac:	f7fb f84c 	bl	8008948 <_malloc_r>
 800d8b0:	b918      	cbnz	r0, 800d8ba <__submore+0x22>
 800d8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8be:	63a3      	str	r3, [r4, #56]	; 0x38
 800d8c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d8c4:	6360      	str	r0, [r4, #52]	; 0x34
 800d8c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d8ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d8ce:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d8d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d8d6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d8da:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d8de:	6020      	str	r0, [r4, #0]
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	e7e8      	b.n	800d8b6 <__submore+0x1e>
 800d8e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d8e6:	0077      	lsls	r7, r6, #1
 800d8e8:	463a      	mov	r2, r7
 800d8ea:	f000 f867 	bl	800d9bc <_realloc_r>
 800d8ee:	4605      	mov	r5, r0
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	d0de      	beq.n	800d8b2 <__submore+0x1a>
 800d8f4:	eb00 0806 	add.w	r8, r0, r6
 800d8f8:	4601      	mov	r1, r0
 800d8fa:	4632      	mov	r2, r6
 800d8fc:	4640      	mov	r0, r8
 800d8fe:	f7fe fd81 	bl	800c404 <memcpy>
 800d902:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d906:	f8c4 8000 	str.w	r8, [r4]
 800d90a:	e7e9      	b.n	800d8e0 <__submore+0x48>

0800d90c <__ascii_wctomb>:
 800d90c:	b149      	cbz	r1, 800d922 <__ascii_wctomb+0x16>
 800d90e:	2aff      	cmp	r2, #255	; 0xff
 800d910:	bf85      	ittet	hi
 800d912:	238a      	movhi	r3, #138	; 0x8a
 800d914:	6003      	strhi	r3, [r0, #0]
 800d916:	700a      	strbls	r2, [r1, #0]
 800d918:	f04f 30ff 	movhi.w	r0, #4294967295
 800d91c:	bf98      	it	ls
 800d91e:	2001      	movls	r0, #1
 800d920:	4770      	bx	lr
 800d922:	4608      	mov	r0, r1
 800d924:	4770      	bx	lr
	...

0800d928 <__assert_func>:
 800d928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d92a:	4614      	mov	r4, r2
 800d92c:	461a      	mov	r2, r3
 800d92e:	4b09      	ldr	r3, [pc, #36]	; (800d954 <__assert_func+0x2c>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4605      	mov	r5, r0
 800d934:	68d8      	ldr	r0, [r3, #12]
 800d936:	b14c      	cbz	r4, 800d94c <__assert_func+0x24>
 800d938:	4b07      	ldr	r3, [pc, #28]	; (800d958 <__assert_func+0x30>)
 800d93a:	9100      	str	r1, [sp, #0]
 800d93c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d940:	4906      	ldr	r1, [pc, #24]	; (800d95c <__assert_func+0x34>)
 800d942:	462b      	mov	r3, r5
 800d944:	f000 f80e 	bl	800d964 <fiprintf>
 800d948:	f7fa ff50 	bl	80087ec <abort>
 800d94c:	4b04      	ldr	r3, [pc, #16]	; (800d960 <__assert_func+0x38>)
 800d94e:	461c      	mov	r4, r3
 800d950:	e7f3      	b.n	800d93a <__assert_func+0x12>
 800d952:	bf00      	nop
 800d954:	2000003c 	.word	0x2000003c
 800d958:	0800ec00 	.word	0x0800ec00
 800d95c:	0800ec0d 	.word	0x0800ec0d
 800d960:	0800ec3b 	.word	0x0800ec3b

0800d964 <fiprintf>:
 800d964:	b40e      	push	{r1, r2, r3}
 800d966:	b503      	push	{r0, r1, lr}
 800d968:	4601      	mov	r1, r0
 800d96a:	ab03      	add	r3, sp, #12
 800d96c:	4805      	ldr	r0, [pc, #20]	; (800d984 <fiprintf+0x20>)
 800d96e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d972:	6800      	ldr	r0, [r0, #0]
 800d974:	9301      	str	r3, [sp, #4]
 800d976:	f000 f879 	bl	800da6c <_vfiprintf_r>
 800d97a:	b002      	add	sp, #8
 800d97c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d980:	b003      	add	sp, #12
 800d982:	4770      	bx	lr
 800d984:	2000003c 	.word	0x2000003c

0800d988 <memmove>:
 800d988:	4288      	cmp	r0, r1
 800d98a:	b510      	push	{r4, lr}
 800d98c:	eb01 0402 	add.w	r4, r1, r2
 800d990:	d902      	bls.n	800d998 <memmove+0x10>
 800d992:	4284      	cmp	r4, r0
 800d994:	4623      	mov	r3, r4
 800d996:	d807      	bhi.n	800d9a8 <memmove+0x20>
 800d998:	1e43      	subs	r3, r0, #1
 800d99a:	42a1      	cmp	r1, r4
 800d99c:	d008      	beq.n	800d9b0 <memmove+0x28>
 800d99e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9a6:	e7f8      	b.n	800d99a <memmove+0x12>
 800d9a8:	4402      	add	r2, r0
 800d9aa:	4601      	mov	r1, r0
 800d9ac:	428a      	cmp	r2, r1
 800d9ae:	d100      	bne.n	800d9b2 <memmove+0x2a>
 800d9b0:	bd10      	pop	{r4, pc}
 800d9b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9ba:	e7f7      	b.n	800d9ac <memmove+0x24>

0800d9bc <_realloc_r>:
 800d9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c0:	4680      	mov	r8, r0
 800d9c2:	4614      	mov	r4, r2
 800d9c4:	460e      	mov	r6, r1
 800d9c6:	b921      	cbnz	r1, 800d9d2 <_realloc_r+0x16>
 800d9c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	f7fa bfbb 	b.w	8008948 <_malloc_r>
 800d9d2:	b92a      	cbnz	r2, 800d9e0 <_realloc_r+0x24>
 800d9d4:	f7fa ff4c 	bl	8008870 <_free_r>
 800d9d8:	4625      	mov	r5, r4
 800d9da:	4628      	mov	r0, r5
 800d9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9e0:	f000 fa9a 	bl	800df18 <_malloc_usable_size_r>
 800d9e4:	4284      	cmp	r4, r0
 800d9e6:	4607      	mov	r7, r0
 800d9e8:	d802      	bhi.n	800d9f0 <_realloc_r+0x34>
 800d9ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9ee:	d812      	bhi.n	800da16 <_realloc_r+0x5a>
 800d9f0:	4621      	mov	r1, r4
 800d9f2:	4640      	mov	r0, r8
 800d9f4:	f7fa ffa8 	bl	8008948 <_malloc_r>
 800d9f8:	4605      	mov	r5, r0
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	d0ed      	beq.n	800d9da <_realloc_r+0x1e>
 800d9fe:	42bc      	cmp	r4, r7
 800da00:	4622      	mov	r2, r4
 800da02:	4631      	mov	r1, r6
 800da04:	bf28      	it	cs
 800da06:	463a      	movcs	r2, r7
 800da08:	f7fe fcfc 	bl	800c404 <memcpy>
 800da0c:	4631      	mov	r1, r6
 800da0e:	4640      	mov	r0, r8
 800da10:	f7fa ff2e 	bl	8008870 <_free_r>
 800da14:	e7e1      	b.n	800d9da <_realloc_r+0x1e>
 800da16:	4635      	mov	r5, r6
 800da18:	e7df      	b.n	800d9da <_realloc_r+0x1e>

0800da1a <__sfputc_r>:
 800da1a:	6893      	ldr	r3, [r2, #8]
 800da1c:	3b01      	subs	r3, #1
 800da1e:	2b00      	cmp	r3, #0
 800da20:	b410      	push	{r4}
 800da22:	6093      	str	r3, [r2, #8]
 800da24:	da08      	bge.n	800da38 <__sfputc_r+0x1e>
 800da26:	6994      	ldr	r4, [r2, #24]
 800da28:	42a3      	cmp	r3, r4
 800da2a:	db01      	blt.n	800da30 <__sfputc_r+0x16>
 800da2c:	290a      	cmp	r1, #10
 800da2e:	d103      	bne.n	800da38 <__sfputc_r+0x1e>
 800da30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da34:	f000 b94a 	b.w	800dccc <__swbuf_r>
 800da38:	6813      	ldr	r3, [r2, #0]
 800da3a:	1c58      	adds	r0, r3, #1
 800da3c:	6010      	str	r0, [r2, #0]
 800da3e:	7019      	strb	r1, [r3, #0]
 800da40:	4608      	mov	r0, r1
 800da42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <__sfputs_r>:
 800da48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da4a:	4606      	mov	r6, r0
 800da4c:	460f      	mov	r7, r1
 800da4e:	4614      	mov	r4, r2
 800da50:	18d5      	adds	r5, r2, r3
 800da52:	42ac      	cmp	r4, r5
 800da54:	d101      	bne.n	800da5a <__sfputs_r+0x12>
 800da56:	2000      	movs	r0, #0
 800da58:	e007      	b.n	800da6a <__sfputs_r+0x22>
 800da5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da5e:	463a      	mov	r2, r7
 800da60:	4630      	mov	r0, r6
 800da62:	f7ff ffda 	bl	800da1a <__sfputc_r>
 800da66:	1c43      	adds	r3, r0, #1
 800da68:	d1f3      	bne.n	800da52 <__sfputs_r+0xa>
 800da6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da6c <_vfiprintf_r>:
 800da6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da70:	460d      	mov	r5, r1
 800da72:	b09d      	sub	sp, #116	; 0x74
 800da74:	4614      	mov	r4, r2
 800da76:	4698      	mov	r8, r3
 800da78:	4606      	mov	r6, r0
 800da7a:	b118      	cbz	r0, 800da84 <_vfiprintf_r+0x18>
 800da7c:	6983      	ldr	r3, [r0, #24]
 800da7e:	b90b      	cbnz	r3, 800da84 <_vfiprintf_r+0x18>
 800da80:	f7fe f888 	bl	800bb94 <__sinit>
 800da84:	4b89      	ldr	r3, [pc, #548]	; (800dcac <_vfiprintf_r+0x240>)
 800da86:	429d      	cmp	r5, r3
 800da88:	d11b      	bne.n	800dac2 <_vfiprintf_r+0x56>
 800da8a:	6875      	ldr	r5, [r6, #4]
 800da8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da8e:	07d9      	lsls	r1, r3, #31
 800da90:	d405      	bmi.n	800da9e <_vfiprintf_r+0x32>
 800da92:	89ab      	ldrh	r3, [r5, #12]
 800da94:	059a      	lsls	r2, r3, #22
 800da96:	d402      	bmi.n	800da9e <_vfiprintf_r+0x32>
 800da98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da9a:	f7fe fc8c 	bl	800c3b6 <__retarget_lock_acquire_recursive>
 800da9e:	89ab      	ldrh	r3, [r5, #12]
 800daa0:	071b      	lsls	r3, r3, #28
 800daa2:	d501      	bpl.n	800daa8 <_vfiprintf_r+0x3c>
 800daa4:	692b      	ldr	r3, [r5, #16]
 800daa6:	b9eb      	cbnz	r3, 800dae4 <_vfiprintf_r+0x78>
 800daa8:	4629      	mov	r1, r5
 800daaa:	4630      	mov	r0, r6
 800daac:	f000 f960 	bl	800dd70 <__swsetup_r>
 800dab0:	b1c0      	cbz	r0, 800dae4 <_vfiprintf_r+0x78>
 800dab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dab4:	07dc      	lsls	r4, r3, #31
 800dab6:	d50e      	bpl.n	800dad6 <_vfiprintf_r+0x6a>
 800dab8:	f04f 30ff 	mov.w	r0, #4294967295
 800dabc:	b01d      	add	sp, #116	; 0x74
 800dabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac2:	4b7b      	ldr	r3, [pc, #492]	; (800dcb0 <_vfiprintf_r+0x244>)
 800dac4:	429d      	cmp	r5, r3
 800dac6:	d101      	bne.n	800dacc <_vfiprintf_r+0x60>
 800dac8:	68b5      	ldr	r5, [r6, #8]
 800daca:	e7df      	b.n	800da8c <_vfiprintf_r+0x20>
 800dacc:	4b79      	ldr	r3, [pc, #484]	; (800dcb4 <_vfiprintf_r+0x248>)
 800dace:	429d      	cmp	r5, r3
 800dad0:	bf08      	it	eq
 800dad2:	68f5      	ldreq	r5, [r6, #12]
 800dad4:	e7da      	b.n	800da8c <_vfiprintf_r+0x20>
 800dad6:	89ab      	ldrh	r3, [r5, #12]
 800dad8:	0598      	lsls	r0, r3, #22
 800dada:	d4ed      	bmi.n	800dab8 <_vfiprintf_r+0x4c>
 800dadc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dade:	f7fe fc6b 	bl	800c3b8 <__retarget_lock_release_recursive>
 800dae2:	e7e9      	b.n	800dab8 <_vfiprintf_r+0x4c>
 800dae4:	2300      	movs	r3, #0
 800dae6:	9309      	str	r3, [sp, #36]	; 0x24
 800dae8:	2320      	movs	r3, #32
 800daea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800daee:	f8cd 800c 	str.w	r8, [sp, #12]
 800daf2:	2330      	movs	r3, #48	; 0x30
 800daf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dcb8 <_vfiprintf_r+0x24c>
 800daf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dafc:	f04f 0901 	mov.w	r9, #1
 800db00:	4623      	mov	r3, r4
 800db02:	469a      	mov	sl, r3
 800db04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db08:	b10a      	cbz	r2, 800db0e <_vfiprintf_r+0xa2>
 800db0a:	2a25      	cmp	r2, #37	; 0x25
 800db0c:	d1f9      	bne.n	800db02 <_vfiprintf_r+0x96>
 800db0e:	ebba 0b04 	subs.w	fp, sl, r4
 800db12:	d00b      	beq.n	800db2c <_vfiprintf_r+0xc0>
 800db14:	465b      	mov	r3, fp
 800db16:	4622      	mov	r2, r4
 800db18:	4629      	mov	r1, r5
 800db1a:	4630      	mov	r0, r6
 800db1c:	f7ff ff94 	bl	800da48 <__sfputs_r>
 800db20:	3001      	adds	r0, #1
 800db22:	f000 80aa 	beq.w	800dc7a <_vfiprintf_r+0x20e>
 800db26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db28:	445a      	add	r2, fp
 800db2a:	9209      	str	r2, [sp, #36]	; 0x24
 800db2c:	f89a 3000 	ldrb.w	r3, [sl]
 800db30:	2b00      	cmp	r3, #0
 800db32:	f000 80a2 	beq.w	800dc7a <_vfiprintf_r+0x20e>
 800db36:	2300      	movs	r3, #0
 800db38:	f04f 32ff 	mov.w	r2, #4294967295
 800db3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db40:	f10a 0a01 	add.w	sl, sl, #1
 800db44:	9304      	str	r3, [sp, #16]
 800db46:	9307      	str	r3, [sp, #28]
 800db48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db4c:	931a      	str	r3, [sp, #104]	; 0x68
 800db4e:	4654      	mov	r4, sl
 800db50:	2205      	movs	r2, #5
 800db52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db56:	4858      	ldr	r0, [pc, #352]	; (800dcb8 <_vfiprintf_r+0x24c>)
 800db58:	f7f2 fb52 	bl	8000200 <memchr>
 800db5c:	9a04      	ldr	r2, [sp, #16]
 800db5e:	b9d8      	cbnz	r0, 800db98 <_vfiprintf_r+0x12c>
 800db60:	06d1      	lsls	r1, r2, #27
 800db62:	bf44      	itt	mi
 800db64:	2320      	movmi	r3, #32
 800db66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db6a:	0713      	lsls	r3, r2, #28
 800db6c:	bf44      	itt	mi
 800db6e:	232b      	movmi	r3, #43	; 0x2b
 800db70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db74:	f89a 3000 	ldrb.w	r3, [sl]
 800db78:	2b2a      	cmp	r3, #42	; 0x2a
 800db7a:	d015      	beq.n	800dba8 <_vfiprintf_r+0x13c>
 800db7c:	9a07      	ldr	r2, [sp, #28]
 800db7e:	4654      	mov	r4, sl
 800db80:	2000      	movs	r0, #0
 800db82:	f04f 0c0a 	mov.w	ip, #10
 800db86:	4621      	mov	r1, r4
 800db88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db8c:	3b30      	subs	r3, #48	; 0x30
 800db8e:	2b09      	cmp	r3, #9
 800db90:	d94e      	bls.n	800dc30 <_vfiprintf_r+0x1c4>
 800db92:	b1b0      	cbz	r0, 800dbc2 <_vfiprintf_r+0x156>
 800db94:	9207      	str	r2, [sp, #28]
 800db96:	e014      	b.n	800dbc2 <_vfiprintf_r+0x156>
 800db98:	eba0 0308 	sub.w	r3, r0, r8
 800db9c:	fa09 f303 	lsl.w	r3, r9, r3
 800dba0:	4313      	orrs	r3, r2
 800dba2:	9304      	str	r3, [sp, #16]
 800dba4:	46a2      	mov	sl, r4
 800dba6:	e7d2      	b.n	800db4e <_vfiprintf_r+0xe2>
 800dba8:	9b03      	ldr	r3, [sp, #12]
 800dbaa:	1d19      	adds	r1, r3, #4
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	9103      	str	r1, [sp, #12]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	bfbb      	ittet	lt
 800dbb4:	425b      	neglt	r3, r3
 800dbb6:	f042 0202 	orrlt.w	r2, r2, #2
 800dbba:	9307      	strge	r3, [sp, #28]
 800dbbc:	9307      	strlt	r3, [sp, #28]
 800dbbe:	bfb8      	it	lt
 800dbc0:	9204      	strlt	r2, [sp, #16]
 800dbc2:	7823      	ldrb	r3, [r4, #0]
 800dbc4:	2b2e      	cmp	r3, #46	; 0x2e
 800dbc6:	d10c      	bne.n	800dbe2 <_vfiprintf_r+0x176>
 800dbc8:	7863      	ldrb	r3, [r4, #1]
 800dbca:	2b2a      	cmp	r3, #42	; 0x2a
 800dbcc:	d135      	bne.n	800dc3a <_vfiprintf_r+0x1ce>
 800dbce:	9b03      	ldr	r3, [sp, #12]
 800dbd0:	1d1a      	adds	r2, r3, #4
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	9203      	str	r2, [sp, #12]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	bfb8      	it	lt
 800dbda:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbde:	3402      	adds	r4, #2
 800dbe0:	9305      	str	r3, [sp, #20]
 800dbe2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dcc8 <_vfiprintf_r+0x25c>
 800dbe6:	7821      	ldrb	r1, [r4, #0]
 800dbe8:	2203      	movs	r2, #3
 800dbea:	4650      	mov	r0, sl
 800dbec:	f7f2 fb08 	bl	8000200 <memchr>
 800dbf0:	b140      	cbz	r0, 800dc04 <_vfiprintf_r+0x198>
 800dbf2:	2340      	movs	r3, #64	; 0x40
 800dbf4:	eba0 000a 	sub.w	r0, r0, sl
 800dbf8:	fa03 f000 	lsl.w	r0, r3, r0
 800dbfc:	9b04      	ldr	r3, [sp, #16]
 800dbfe:	4303      	orrs	r3, r0
 800dc00:	3401      	adds	r4, #1
 800dc02:	9304      	str	r3, [sp, #16]
 800dc04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc08:	482c      	ldr	r0, [pc, #176]	; (800dcbc <_vfiprintf_r+0x250>)
 800dc0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc0e:	2206      	movs	r2, #6
 800dc10:	f7f2 faf6 	bl	8000200 <memchr>
 800dc14:	2800      	cmp	r0, #0
 800dc16:	d03f      	beq.n	800dc98 <_vfiprintf_r+0x22c>
 800dc18:	4b29      	ldr	r3, [pc, #164]	; (800dcc0 <_vfiprintf_r+0x254>)
 800dc1a:	bb1b      	cbnz	r3, 800dc64 <_vfiprintf_r+0x1f8>
 800dc1c:	9b03      	ldr	r3, [sp, #12]
 800dc1e:	3307      	adds	r3, #7
 800dc20:	f023 0307 	bic.w	r3, r3, #7
 800dc24:	3308      	adds	r3, #8
 800dc26:	9303      	str	r3, [sp, #12]
 800dc28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc2a:	443b      	add	r3, r7
 800dc2c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc2e:	e767      	b.n	800db00 <_vfiprintf_r+0x94>
 800dc30:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc34:	460c      	mov	r4, r1
 800dc36:	2001      	movs	r0, #1
 800dc38:	e7a5      	b.n	800db86 <_vfiprintf_r+0x11a>
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	3401      	adds	r4, #1
 800dc3e:	9305      	str	r3, [sp, #20]
 800dc40:	4619      	mov	r1, r3
 800dc42:	f04f 0c0a 	mov.w	ip, #10
 800dc46:	4620      	mov	r0, r4
 800dc48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc4c:	3a30      	subs	r2, #48	; 0x30
 800dc4e:	2a09      	cmp	r2, #9
 800dc50:	d903      	bls.n	800dc5a <_vfiprintf_r+0x1ee>
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d0c5      	beq.n	800dbe2 <_vfiprintf_r+0x176>
 800dc56:	9105      	str	r1, [sp, #20]
 800dc58:	e7c3      	b.n	800dbe2 <_vfiprintf_r+0x176>
 800dc5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc5e:	4604      	mov	r4, r0
 800dc60:	2301      	movs	r3, #1
 800dc62:	e7f0      	b.n	800dc46 <_vfiprintf_r+0x1da>
 800dc64:	ab03      	add	r3, sp, #12
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	462a      	mov	r2, r5
 800dc6a:	4b16      	ldr	r3, [pc, #88]	; (800dcc4 <_vfiprintf_r+0x258>)
 800dc6c:	a904      	add	r1, sp, #16
 800dc6e:	4630      	mov	r0, r6
 800dc70:	f7fa ff7e 	bl	8008b70 <_printf_float>
 800dc74:	4607      	mov	r7, r0
 800dc76:	1c78      	adds	r0, r7, #1
 800dc78:	d1d6      	bne.n	800dc28 <_vfiprintf_r+0x1bc>
 800dc7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc7c:	07d9      	lsls	r1, r3, #31
 800dc7e:	d405      	bmi.n	800dc8c <_vfiprintf_r+0x220>
 800dc80:	89ab      	ldrh	r3, [r5, #12]
 800dc82:	059a      	lsls	r2, r3, #22
 800dc84:	d402      	bmi.n	800dc8c <_vfiprintf_r+0x220>
 800dc86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc88:	f7fe fb96 	bl	800c3b8 <__retarget_lock_release_recursive>
 800dc8c:	89ab      	ldrh	r3, [r5, #12]
 800dc8e:	065b      	lsls	r3, r3, #25
 800dc90:	f53f af12 	bmi.w	800dab8 <_vfiprintf_r+0x4c>
 800dc94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc96:	e711      	b.n	800dabc <_vfiprintf_r+0x50>
 800dc98:	ab03      	add	r3, sp, #12
 800dc9a:	9300      	str	r3, [sp, #0]
 800dc9c:	462a      	mov	r2, r5
 800dc9e:	4b09      	ldr	r3, [pc, #36]	; (800dcc4 <_vfiprintf_r+0x258>)
 800dca0:	a904      	add	r1, sp, #16
 800dca2:	4630      	mov	r0, r6
 800dca4:	f7fb fa08 	bl	80090b8 <_printf_i>
 800dca8:	e7e4      	b.n	800dc74 <_vfiprintf_r+0x208>
 800dcaa:	bf00      	nop
 800dcac:	0800e9bc 	.word	0x0800e9bc
 800dcb0:	0800e9dc 	.word	0x0800e9dc
 800dcb4:	0800e99c 	.word	0x0800e99c
 800dcb8:	0800ebd4 	.word	0x0800ebd4
 800dcbc:	0800ebde 	.word	0x0800ebde
 800dcc0:	08008b71 	.word	0x08008b71
 800dcc4:	0800da49 	.word	0x0800da49
 800dcc8:	0800ebda 	.word	0x0800ebda

0800dccc <__swbuf_r>:
 800dccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcce:	460e      	mov	r6, r1
 800dcd0:	4614      	mov	r4, r2
 800dcd2:	4605      	mov	r5, r0
 800dcd4:	b118      	cbz	r0, 800dcde <__swbuf_r+0x12>
 800dcd6:	6983      	ldr	r3, [r0, #24]
 800dcd8:	b90b      	cbnz	r3, 800dcde <__swbuf_r+0x12>
 800dcda:	f7fd ff5b 	bl	800bb94 <__sinit>
 800dcde:	4b21      	ldr	r3, [pc, #132]	; (800dd64 <__swbuf_r+0x98>)
 800dce0:	429c      	cmp	r4, r3
 800dce2:	d12b      	bne.n	800dd3c <__swbuf_r+0x70>
 800dce4:	686c      	ldr	r4, [r5, #4]
 800dce6:	69a3      	ldr	r3, [r4, #24]
 800dce8:	60a3      	str	r3, [r4, #8]
 800dcea:	89a3      	ldrh	r3, [r4, #12]
 800dcec:	071a      	lsls	r2, r3, #28
 800dcee:	d52f      	bpl.n	800dd50 <__swbuf_r+0x84>
 800dcf0:	6923      	ldr	r3, [r4, #16]
 800dcf2:	b36b      	cbz	r3, 800dd50 <__swbuf_r+0x84>
 800dcf4:	6923      	ldr	r3, [r4, #16]
 800dcf6:	6820      	ldr	r0, [r4, #0]
 800dcf8:	1ac0      	subs	r0, r0, r3
 800dcfa:	6963      	ldr	r3, [r4, #20]
 800dcfc:	b2f6      	uxtb	r6, r6
 800dcfe:	4283      	cmp	r3, r0
 800dd00:	4637      	mov	r7, r6
 800dd02:	dc04      	bgt.n	800dd0e <__swbuf_r+0x42>
 800dd04:	4621      	mov	r1, r4
 800dd06:	4628      	mov	r0, r5
 800dd08:	f7fd fe72 	bl	800b9f0 <_fflush_r>
 800dd0c:	bb30      	cbnz	r0, 800dd5c <__swbuf_r+0x90>
 800dd0e:	68a3      	ldr	r3, [r4, #8]
 800dd10:	3b01      	subs	r3, #1
 800dd12:	60a3      	str	r3, [r4, #8]
 800dd14:	6823      	ldr	r3, [r4, #0]
 800dd16:	1c5a      	adds	r2, r3, #1
 800dd18:	6022      	str	r2, [r4, #0]
 800dd1a:	701e      	strb	r6, [r3, #0]
 800dd1c:	6963      	ldr	r3, [r4, #20]
 800dd1e:	3001      	adds	r0, #1
 800dd20:	4283      	cmp	r3, r0
 800dd22:	d004      	beq.n	800dd2e <__swbuf_r+0x62>
 800dd24:	89a3      	ldrh	r3, [r4, #12]
 800dd26:	07db      	lsls	r3, r3, #31
 800dd28:	d506      	bpl.n	800dd38 <__swbuf_r+0x6c>
 800dd2a:	2e0a      	cmp	r6, #10
 800dd2c:	d104      	bne.n	800dd38 <__swbuf_r+0x6c>
 800dd2e:	4621      	mov	r1, r4
 800dd30:	4628      	mov	r0, r5
 800dd32:	f7fd fe5d 	bl	800b9f0 <_fflush_r>
 800dd36:	b988      	cbnz	r0, 800dd5c <__swbuf_r+0x90>
 800dd38:	4638      	mov	r0, r7
 800dd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd3c:	4b0a      	ldr	r3, [pc, #40]	; (800dd68 <__swbuf_r+0x9c>)
 800dd3e:	429c      	cmp	r4, r3
 800dd40:	d101      	bne.n	800dd46 <__swbuf_r+0x7a>
 800dd42:	68ac      	ldr	r4, [r5, #8]
 800dd44:	e7cf      	b.n	800dce6 <__swbuf_r+0x1a>
 800dd46:	4b09      	ldr	r3, [pc, #36]	; (800dd6c <__swbuf_r+0xa0>)
 800dd48:	429c      	cmp	r4, r3
 800dd4a:	bf08      	it	eq
 800dd4c:	68ec      	ldreq	r4, [r5, #12]
 800dd4e:	e7ca      	b.n	800dce6 <__swbuf_r+0x1a>
 800dd50:	4621      	mov	r1, r4
 800dd52:	4628      	mov	r0, r5
 800dd54:	f000 f80c 	bl	800dd70 <__swsetup_r>
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	d0cb      	beq.n	800dcf4 <__swbuf_r+0x28>
 800dd5c:	f04f 37ff 	mov.w	r7, #4294967295
 800dd60:	e7ea      	b.n	800dd38 <__swbuf_r+0x6c>
 800dd62:	bf00      	nop
 800dd64:	0800e9bc 	.word	0x0800e9bc
 800dd68:	0800e9dc 	.word	0x0800e9dc
 800dd6c:	0800e99c 	.word	0x0800e99c

0800dd70 <__swsetup_r>:
 800dd70:	4b32      	ldr	r3, [pc, #200]	; (800de3c <__swsetup_r+0xcc>)
 800dd72:	b570      	push	{r4, r5, r6, lr}
 800dd74:	681d      	ldr	r5, [r3, #0]
 800dd76:	4606      	mov	r6, r0
 800dd78:	460c      	mov	r4, r1
 800dd7a:	b125      	cbz	r5, 800dd86 <__swsetup_r+0x16>
 800dd7c:	69ab      	ldr	r3, [r5, #24]
 800dd7e:	b913      	cbnz	r3, 800dd86 <__swsetup_r+0x16>
 800dd80:	4628      	mov	r0, r5
 800dd82:	f7fd ff07 	bl	800bb94 <__sinit>
 800dd86:	4b2e      	ldr	r3, [pc, #184]	; (800de40 <__swsetup_r+0xd0>)
 800dd88:	429c      	cmp	r4, r3
 800dd8a:	d10f      	bne.n	800ddac <__swsetup_r+0x3c>
 800dd8c:	686c      	ldr	r4, [r5, #4]
 800dd8e:	89a3      	ldrh	r3, [r4, #12]
 800dd90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd94:	0719      	lsls	r1, r3, #28
 800dd96:	d42c      	bmi.n	800ddf2 <__swsetup_r+0x82>
 800dd98:	06dd      	lsls	r5, r3, #27
 800dd9a:	d411      	bmi.n	800ddc0 <__swsetup_r+0x50>
 800dd9c:	2309      	movs	r3, #9
 800dd9e:	6033      	str	r3, [r6, #0]
 800dda0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dda4:	81a3      	strh	r3, [r4, #12]
 800dda6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddaa:	e03e      	b.n	800de2a <__swsetup_r+0xba>
 800ddac:	4b25      	ldr	r3, [pc, #148]	; (800de44 <__swsetup_r+0xd4>)
 800ddae:	429c      	cmp	r4, r3
 800ddb0:	d101      	bne.n	800ddb6 <__swsetup_r+0x46>
 800ddb2:	68ac      	ldr	r4, [r5, #8]
 800ddb4:	e7eb      	b.n	800dd8e <__swsetup_r+0x1e>
 800ddb6:	4b24      	ldr	r3, [pc, #144]	; (800de48 <__swsetup_r+0xd8>)
 800ddb8:	429c      	cmp	r4, r3
 800ddba:	bf08      	it	eq
 800ddbc:	68ec      	ldreq	r4, [r5, #12]
 800ddbe:	e7e6      	b.n	800dd8e <__swsetup_r+0x1e>
 800ddc0:	0758      	lsls	r0, r3, #29
 800ddc2:	d512      	bpl.n	800ddea <__swsetup_r+0x7a>
 800ddc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddc6:	b141      	cbz	r1, 800ddda <__swsetup_r+0x6a>
 800ddc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddcc:	4299      	cmp	r1, r3
 800ddce:	d002      	beq.n	800ddd6 <__swsetup_r+0x66>
 800ddd0:	4630      	mov	r0, r6
 800ddd2:	f7fa fd4d 	bl	8008870 <_free_r>
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	6363      	str	r3, [r4, #52]	; 0x34
 800ddda:	89a3      	ldrh	r3, [r4, #12]
 800dddc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dde0:	81a3      	strh	r3, [r4, #12]
 800dde2:	2300      	movs	r3, #0
 800dde4:	6063      	str	r3, [r4, #4]
 800dde6:	6923      	ldr	r3, [r4, #16]
 800dde8:	6023      	str	r3, [r4, #0]
 800ddea:	89a3      	ldrh	r3, [r4, #12]
 800ddec:	f043 0308 	orr.w	r3, r3, #8
 800ddf0:	81a3      	strh	r3, [r4, #12]
 800ddf2:	6923      	ldr	r3, [r4, #16]
 800ddf4:	b94b      	cbnz	r3, 800de0a <__swsetup_r+0x9a>
 800ddf6:	89a3      	ldrh	r3, [r4, #12]
 800ddf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ddfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de00:	d003      	beq.n	800de0a <__swsetup_r+0x9a>
 800de02:	4621      	mov	r1, r4
 800de04:	4630      	mov	r0, r6
 800de06:	f000 f847 	bl	800de98 <__smakebuf_r>
 800de0a:	89a0      	ldrh	r0, [r4, #12]
 800de0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de10:	f010 0301 	ands.w	r3, r0, #1
 800de14:	d00a      	beq.n	800de2c <__swsetup_r+0xbc>
 800de16:	2300      	movs	r3, #0
 800de18:	60a3      	str	r3, [r4, #8]
 800de1a:	6963      	ldr	r3, [r4, #20]
 800de1c:	425b      	negs	r3, r3
 800de1e:	61a3      	str	r3, [r4, #24]
 800de20:	6923      	ldr	r3, [r4, #16]
 800de22:	b943      	cbnz	r3, 800de36 <__swsetup_r+0xc6>
 800de24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de28:	d1ba      	bne.n	800dda0 <__swsetup_r+0x30>
 800de2a:	bd70      	pop	{r4, r5, r6, pc}
 800de2c:	0781      	lsls	r1, r0, #30
 800de2e:	bf58      	it	pl
 800de30:	6963      	ldrpl	r3, [r4, #20]
 800de32:	60a3      	str	r3, [r4, #8]
 800de34:	e7f4      	b.n	800de20 <__swsetup_r+0xb0>
 800de36:	2000      	movs	r0, #0
 800de38:	e7f7      	b.n	800de2a <__swsetup_r+0xba>
 800de3a:	bf00      	nop
 800de3c:	2000003c 	.word	0x2000003c
 800de40:	0800e9bc 	.word	0x0800e9bc
 800de44:	0800e9dc 	.word	0x0800e9dc
 800de48:	0800e99c 	.word	0x0800e99c

0800de4c <__swhatbuf_r>:
 800de4c:	b570      	push	{r4, r5, r6, lr}
 800de4e:	460e      	mov	r6, r1
 800de50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de54:	2900      	cmp	r1, #0
 800de56:	b096      	sub	sp, #88	; 0x58
 800de58:	4614      	mov	r4, r2
 800de5a:	461d      	mov	r5, r3
 800de5c:	da08      	bge.n	800de70 <__swhatbuf_r+0x24>
 800de5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800de62:	2200      	movs	r2, #0
 800de64:	602a      	str	r2, [r5, #0]
 800de66:	061a      	lsls	r2, r3, #24
 800de68:	d410      	bmi.n	800de8c <__swhatbuf_r+0x40>
 800de6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de6e:	e00e      	b.n	800de8e <__swhatbuf_r+0x42>
 800de70:	466a      	mov	r2, sp
 800de72:	f000 f859 	bl	800df28 <_fstat_r>
 800de76:	2800      	cmp	r0, #0
 800de78:	dbf1      	blt.n	800de5e <__swhatbuf_r+0x12>
 800de7a:	9a01      	ldr	r2, [sp, #4]
 800de7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800de80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800de84:	425a      	negs	r2, r3
 800de86:	415a      	adcs	r2, r3
 800de88:	602a      	str	r2, [r5, #0]
 800de8a:	e7ee      	b.n	800de6a <__swhatbuf_r+0x1e>
 800de8c:	2340      	movs	r3, #64	; 0x40
 800de8e:	2000      	movs	r0, #0
 800de90:	6023      	str	r3, [r4, #0]
 800de92:	b016      	add	sp, #88	; 0x58
 800de94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800de98 <__smakebuf_r>:
 800de98:	898b      	ldrh	r3, [r1, #12]
 800de9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de9c:	079d      	lsls	r5, r3, #30
 800de9e:	4606      	mov	r6, r0
 800dea0:	460c      	mov	r4, r1
 800dea2:	d507      	bpl.n	800deb4 <__smakebuf_r+0x1c>
 800dea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dea8:	6023      	str	r3, [r4, #0]
 800deaa:	6123      	str	r3, [r4, #16]
 800deac:	2301      	movs	r3, #1
 800deae:	6163      	str	r3, [r4, #20]
 800deb0:	b002      	add	sp, #8
 800deb2:	bd70      	pop	{r4, r5, r6, pc}
 800deb4:	ab01      	add	r3, sp, #4
 800deb6:	466a      	mov	r2, sp
 800deb8:	f7ff ffc8 	bl	800de4c <__swhatbuf_r>
 800debc:	9900      	ldr	r1, [sp, #0]
 800debe:	4605      	mov	r5, r0
 800dec0:	4630      	mov	r0, r6
 800dec2:	f7fa fd41 	bl	8008948 <_malloc_r>
 800dec6:	b948      	cbnz	r0, 800dedc <__smakebuf_r+0x44>
 800dec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800decc:	059a      	lsls	r2, r3, #22
 800dece:	d4ef      	bmi.n	800deb0 <__smakebuf_r+0x18>
 800ded0:	f023 0303 	bic.w	r3, r3, #3
 800ded4:	f043 0302 	orr.w	r3, r3, #2
 800ded8:	81a3      	strh	r3, [r4, #12]
 800deda:	e7e3      	b.n	800dea4 <__smakebuf_r+0xc>
 800dedc:	4b0d      	ldr	r3, [pc, #52]	; (800df14 <__smakebuf_r+0x7c>)
 800dede:	62b3      	str	r3, [r6, #40]	; 0x28
 800dee0:	89a3      	ldrh	r3, [r4, #12]
 800dee2:	6020      	str	r0, [r4, #0]
 800dee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dee8:	81a3      	strh	r3, [r4, #12]
 800deea:	9b00      	ldr	r3, [sp, #0]
 800deec:	6163      	str	r3, [r4, #20]
 800deee:	9b01      	ldr	r3, [sp, #4]
 800def0:	6120      	str	r0, [r4, #16]
 800def2:	b15b      	cbz	r3, 800df0c <__smakebuf_r+0x74>
 800def4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800def8:	4630      	mov	r0, r6
 800defa:	f000 f827 	bl	800df4c <_isatty_r>
 800defe:	b128      	cbz	r0, 800df0c <__smakebuf_r+0x74>
 800df00:	89a3      	ldrh	r3, [r4, #12]
 800df02:	f023 0303 	bic.w	r3, r3, #3
 800df06:	f043 0301 	orr.w	r3, r3, #1
 800df0a:	81a3      	strh	r3, [r4, #12]
 800df0c:	89a0      	ldrh	r0, [r4, #12]
 800df0e:	4305      	orrs	r5, r0
 800df10:	81a5      	strh	r5, [r4, #12]
 800df12:	e7cd      	b.n	800deb0 <__smakebuf_r+0x18>
 800df14:	0800bb2d 	.word	0x0800bb2d

0800df18 <_malloc_usable_size_r>:
 800df18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df1c:	1f18      	subs	r0, r3, #4
 800df1e:	2b00      	cmp	r3, #0
 800df20:	bfbc      	itt	lt
 800df22:	580b      	ldrlt	r3, [r1, r0]
 800df24:	18c0      	addlt	r0, r0, r3
 800df26:	4770      	bx	lr

0800df28 <_fstat_r>:
 800df28:	b538      	push	{r3, r4, r5, lr}
 800df2a:	4d07      	ldr	r5, [pc, #28]	; (800df48 <_fstat_r+0x20>)
 800df2c:	2300      	movs	r3, #0
 800df2e:	4604      	mov	r4, r0
 800df30:	4608      	mov	r0, r1
 800df32:	4611      	mov	r1, r2
 800df34:	602b      	str	r3, [r5, #0]
 800df36:	f7f3 ff12 	bl	8001d5e <_fstat>
 800df3a:	1c43      	adds	r3, r0, #1
 800df3c:	d102      	bne.n	800df44 <_fstat_r+0x1c>
 800df3e:	682b      	ldr	r3, [r5, #0]
 800df40:	b103      	cbz	r3, 800df44 <_fstat_r+0x1c>
 800df42:	6023      	str	r3, [r4, #0]
 800df44:	bd38      	pop	{r3, r4, r5, pc}
 800df46:	bf00      	nop
 800df48:	20000804 	.word	0x20000804

0800df4c <_isatty_r>:
 800df4c:	b538      	push	{r3, r4, r5, lr}
 800df4e:	4d06      	ldr	r5, [pc, #24]	; (800df68 <_isatty_r+0x1c>)
 800df50:	2300      	movs	r3, #0
 800df52:	4604      	mov	r4, r0
 800df54:	4608      	mov	r0, r1
 800df56:	602b      	str	r3, [r5, #0]
 800df58:	f7f3 ff11 	bl	8001d7e <_isatty>
 800df5c:	1c43      	adds	r3, r0, #1
 800df5e:	d102      	bne.n	800df66 <_isatty_r+0x1a>
 800df60:	682b      	ldr	r3, [r5, #0]
 800df62:	b103      	cbz	r3, 800df66 <_isatty_r+0x1a>
 800df64:	6023      	str	r3, [r4, #0]
 800df66:	bd38      	pop	{r3, r4, r5, pc}
 800df68:	20000804 	.word	0x20000804

0800df6c <_init>:
 800df6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df6e:	bf00      	nop
 800df70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df72:	bc08      	pop	{r3}
 800df74:	469e      	mov	lr, r3
 800df76:	4770      	bx	lr

0800df78 <_fini>:
 800df78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7a:	bf00      	nop
 800df7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df7e:	bc08      	pop	{r3}
 800df80:	469e      	mov	lr, r3
 800df82:	4770      	bx	lr
