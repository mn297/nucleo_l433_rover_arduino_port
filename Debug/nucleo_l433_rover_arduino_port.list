
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b04  08009be0  08009be0  00019be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6e4  0800a6e4  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6e4  0800a6e4  0001a6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6ec  0800a6ec  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a6ec  0800a6ec  0001a6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6f4  0800a6f4  0001a6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800a6f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000210  0800a904  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  0800a904  00020634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018771  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000359e  00000000  00000000  000389ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0003bf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279f2  00000000  00000000  0003e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174eb  00000000  00000000  00065eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dde5b  00000000  00000000  0007d3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006408  00000000  00000000  0015b280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009bc4 	.word	0x08009bc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08009bc4 	.word	0x08009bc4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB8   ------> S_TIM16_CH1
*/
void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b52      	ldr	r3, [pc, #328]	; (800100c <MX_GPIO_Init+0x160>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a51      	ldr	r2, [pc, #324]	; (800100c <MX_GPIO_Init+0x160>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b4f      	ldr	r3, [pc, #316]	; (800100c <MX_GPIO_Init+0x160>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	4b4c      	ldr	r3, [pc, #304]	; (800100c <MX_GPIO_Init+0x160>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a4b      	ldr	r2, [pc, #300]	; (800100c <MX_GPIO_Init+0x160>)
 8000ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b49      	ldr	r3, [pc, #292]	; (800100c <MX_GPIO_Init+0x160>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b46      	ldr	r3, [pc, #280]	; (800100c <MX_GPIO_Init+0x160>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a45      	ldr	r2, [pc, #276]	; (800100c <MX_GPIO_Init+0x160>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b43      	ldr	r3, [pc, #268]	; (800100c <MX_GPIO_Init+0x160>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b40      	ldr	r3, [pc, #256]	; (800100c <MX_GPIO_Init+0x160>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a3f      	ldr	r2, [pc, #252]	; (800100c <MX_GPIO_Init+0x160>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b3d      	ldr	r3, [pc, #244]	; (800100c <MX_GPIO_Init+0x160>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000f22:	2200      	movs	r2, #0
 8000f24:	f248 11b0 	movw	r1, #33200	; 0x81b0
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f001 ffc8 	bl	8002ec0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	4836      	ldr	r0, [pc, #216]	; (8001010 <MX_GPIO_Init+0x164>)
 8000f36:	f001 ffc3 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2160      	movs	r1, #96	; 0x60
 8000f3e:	4835      	ldr	r0, [pc, #212]	; (8001014 <MX_GPIO_Init+0x168>)
 8000f40:	f001 ffbe 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	482d      	ldr	r0, [pc, #180]	; (8001010 <MX_GPIO_Init+0x164>)
 8000f5c:	f001 fe36 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000f60:	f248 13b0 	movw	r3, #33200	; 0x81b0
 8000f64:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f001 fe26 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000f80:	2340      	movs	r3, #64	; 0x40
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f001 fe19 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4817      	ldr	r0, [pc, #92]	; (8001010 <MX_GPIO_Init+0x164>)
 8000fb2:	f001 fe0b 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 8000fb6:	2360      	movs	r3, #96	; 0x60
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4811      	ldr	r0, [pc, #68]	; (8001014 <MX_GPIO_Init+0x168>)
 8000fce:	f001 fdfd 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000fe4:	230e      	movs	r3, #14
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <MX_GPIO_Init+0x168>)
 8000ff0:	f001 fdec 	bl	8002bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2028      	movs	r0, #40	; 0x28
 8000ffa:	f001 fdb0 	bl	8002b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ffe:	2028      	movs	r0, #40	; 0x28
 8001000:	f001 fdc9 	bl	8002b96 <HAL_NVIC_EnableIRQ>

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	48000800 	.word	0x48000800
 8001014:	48000400 	.word	0x48000400

08001018 <_ZN3PinC1Ev>:
    uint16_t pin;
    bool valid;
    TIM_HandleTypeDef* p_tim;
    unsigned int channel;

    Pin() : port(nullptr), pin(0), valid(false), p_tim(nullptr), channel(0) {}
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	809a      	strh	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	719a      	strb	r2, [r3, #6]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_ZN3PinC1EP12GPIO_TypeDeft>:
    Pin(GPIO_TypeDef* p, uint16_t pn) : port(p), pin(pn), valid(true), p_tim(nullptr), channel(0) {} // no timer
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	4613      	mov	r3, r2
 8001058:	80fb      	strh	r3, [r7, #6]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	88fa      	ldrh	r2, [r7, #6]
 8001064:	809a      	strh	r2, [r3, #4]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2201      	movs	r2, #1
 800106a:	719a      	strb	r2, [r3, #6]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>:
    Pin(GPIO_TypeDef* p, uint16_t pn, TIM_HandleTypeDef* t, unsigned int c) : port(p), pin(pn), valid(true), p_tim(t), channel(c) {}
 8001086:	b480      	push	{r7}
 8001088:	b085      	sub	sp, #20
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4613      	mov	r3, r2
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	809a      	strh	r2, [r3, #4]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2201      	movs	r2, #1
 80010a6:	719a      	strb	r2, [r3, #6]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <_Z5printPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff f87f 	bl	80001d0 <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <_Z5printPKc+0x2c>)
 80010de:	f004 fda1 	bl	8005c24 <HAL_UART_Transmit>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000598 	.word	0x20000598

080010f4 <printf>:
int printf(const char* s, ...){
 80010f4:	b40f      	push	{r0, r1, r2, r3}
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b0c2      	sub	sp, #264	; 0x108
 80010fa:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 80010fc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001104:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001108:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 800110a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800110e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001112:	f107 0008 	add.w	r0, r7, #8
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800111c:	f006 fbf4 	bl	8007908 <vsiprintf>
	perror(buffer);
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	4618      	mov	r0, r3
 8001126:	f006 f995 	bl	8007454 <perror>
	print(buffer);
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ffc8 	bl	80010c4 <_Z5printPKc>
	va_end(args);
//	#endif
	return strlen(buffer);
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f849 	bl	80001d0 <strlen>
 800113e:	4603      	mov	r3, r0
}
 8001140:	4618      	mov	r0, r3
 8001142:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001146:	46bd      	mov	sp, r7
 8001148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800114c:	b004      	add	sp, #16
 800114e:	4770      	bx	lr

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f001 fb87 	bl	8002868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115a:	f000 f8c9 	bl	80012f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115e:	f7ff fea5 	bl	8000eac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001162:	f000 fe1b 	bl	8001d9c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001166:	f000 f9b3 	bl	80014d0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800116a:	f000 f9ef 	bl	800154c <MX_SPI2_Init>
  MX_SPI3_Init();
 800116e:	f000 fa2b 	bl	80015c8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001172:	f000 fc3f 	bl	80019f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001176:	f000 fce9 	bl	8001b4c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderData_1 = 99;
 800117a:	2363      	movs	r3, #99	; 0x63
 800117c:	82fb      	strh	r3, [r7, #22]
  uint16_t encoderData_2 = 99;
 800117e:	2363      	movs	r3, #99	; 0x63
 8001180:	82bb      	strh	r3, [r7, #20]
  uint16_t encoderData_3 = 99;
 8001182:	2363      	movs	r3, #99	; 0x63
 8001184:	827b      	strh	r3, [r7, #18]
  uint16_t encoder_max = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	823b      	strh	r3, [r7, #16]
  uint16_t encoder_min = 4100;
 800118a:	f241 0304 	movw	r3, #4100	; 0x1004
 800118e:	81fb      	strh	r3, [r7, #14]
  HAL_TIM_Base_Start(&htim1);
 8001190:	4847      	ldr	r0, [pc, #284]	; (80012b0 <main+0x160>)
 8001192:	f003 fd0f 	bl	8004bb4 <HAL_TIM_Base_Start>




  /*---AMT22 setup---*/
  resetAMT22(&hspi1, GPIOC, GPIO_PIN_7, &htim1);
 8001196:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <main+0x160>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	4946      	ldr	r1, [pc, #280]	; (80012b4 <main+0x164>)
 800119c:	4846      	ldr	r0, [pc, #280]	; (80012b8 <main+0x168>)
 800119e:	f005 fad4 	bl	800674a <resetAMT22>

  /*---ESC setup---*/
  int32_t  CH2_ESC = 1500-1;
 80011a2:	f240 53db 	movw	r3, #1499	; 0x5db
 80011a6:	60bb      	str	r3, [r7, #8]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011a8:	2104      	movs	r1, #4
 80011aa:	4841      	ldr	r0, [pc, #260]	; (80012b0 <main+0x160>)
 80011ac:	f003 fdb0 	bl	8004d10 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 80011b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b4:	f001 fbd4 	bl	8002960 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500-1);
 80011b8:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <main+0x160>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f240 52db 	movw	r2, #1499	; 0x5db
 80011c0:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(500);
 80011c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c6:	f001 fbcb 	bl	8002960 <HAL_Delay>
//  HAL_Delay(500);



    /*---CYTRON setup---*/
    int32_t  CH2_DC = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011ce:	2104      	movs	r1, #4
 80011d0:	483a      	ldr	r0, [pc, #232]	; (80012bc <main+0x16c>)
 80011d2:	f003 fd9d 	bl	8004d10 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80011d6:	4b39      	ldr	r3, [pc, #228]	; (80012bc <main+0x16c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(10);
 80011de:	200a      	movs	r0, #10
 80011e0:	f001 fbbe 	bl	8002960 <HAL_Delay>
    Wrist_Roll.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
 80011e4:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <main+0x170>)
 80011e6:	ed93 7b00 	vldr	d7, [r3]
 80011ea:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <main+0x174>)
 80011ec:	ed93 6b00 	vldr	d6, [r3]
 80011f0:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <main+0x178>)
 80011f2:	ed93 2b00 	vldr	d2, [r3]
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <main+0x17c>)
 80011f8:	ed93 3b00 	vldr	d3, [r3]
 80011fc:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <main+0x180>)
 80011fe:	ed93 4b00 	vldr	d4, [r3]
 8001202:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <main+0x184>)
 8001204:	ed93 5b00 	vldr	d5, [r3]
 8001208:	eeb0 1a46 	vmov.f32	s2, s12
 800120c:	eef0 1a66 	vmov.f32	s3, s13
 8001210:	eeb0 0a47 	vmov.f32	s0, s14
 8001214:	eef0 0a67 	vmov.f32	s1, s15
 8001218:	482f      	ldr	r0, [pc, #188]	; (80012d8 <main+0x188>)
 800121a:	f000 ff21 	bl	8002060 <_ZN13RoverArmMotor5beginEdddddd>
    Wrist_Roll.setAngleLimits(2, 120.0f); //for angle limits test
 800121e:	ed9f 1b20 	vldr	d1, [pc, #128]	; 80012a0 <main+0x150>
 8001222:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80012a8 <main+0x158>
 8001226:	482c      	ldr	r0, [pc, #176]	; (80012d8 <main+0x188>)
 8001228:	f000 ffe9 	bl	80021fe <_ZN13RoverArmMotor14setAngleLimitsEdd>
    Wrist_Roll.reset_encoder();
 800122c:	482a      	ldr	r0, [pc, #168]	; (80012d8 <main+0x188>)
 800122e:	f001 f81e 	bl	800226e <_ZN13RoverArmMotor13reset_encoderEv>
    Wrist_Roll.set_zero_angle();
 8001232:	4829      	ldr	r0, [pc, #164]	; (80012d8 <main+0x188>)
 8001234:	f001 f807 	bl	8002246 <_ZN13RoverArmMotor14set_zero_angleEv>
    // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 70);
    // current_angle = Wrist_Roll.get_current_angle();
    // printf("current angle is %f\r\n, current_angle");
    // Wrist_Roll.newSetpoint(current_angle + 150);

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 30);
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <main+0x16c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	221e      	movs	r2, #30
 800123e:	639a      	str	r2, [r3, #56]	; 0x38
    while(!brakeSet){
 8001240:	4b26      	ldr	r3, [pc, #152]	; (80012dc <main+0x18c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d108      	bne.n	800125a <main+0x10a>
      printf("waiting for brake set, current %f\r\n", Wrist_Roll.get_current_angle());
 8001248:	4823      	ldr	r0, [pc, #140]	; (80012d8 <main+0x188>)
 800124a:	f001 f83b 	bl	80022c4 <_ZN13RoverArmMotor17get_current_angleEv>
 800124e:	ec53 2b10 	vmov	r2, r3, d0
 8001252:	4823      	ldr	r0, [pc, #140]	; (80012e0 <main+0x190>)
 8001254:	f7ff ff4e 	bl	80010f4 <printf>
    while(!brakeSet){
 8001258:	e7f2      	b.n	8001240 <main+0xf0>
    // current_angle = Wrist_Roll.get_current_angle();
    // printf("current angle is %f\r\n, current_angle");
    // HAL_Delay(50);
    // Wrist_Roll.newSetpoint(current_angle + 10);

    current_angle = Wrist_Roll.get_current_angle();
 800125a:	481f      	ldr	r0, [pc, #124]	; (80012d8 <main+0x188>)
 800125c:	f001 f832 	bl	80022c4 <_ZN13RoverArmMotor17get_current_angleEv>
 8001260:	eeb0 7a40 	vmov.f32	s14, s0
 8001264:	eef0 7a60 	vmov.f32	s15, s1
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <main+0x194>)
 800126a:	ed83 7b00 	vstr	d7, [r3]
    setpoint = Wrist_Roll.getSetpoint();
 800126e:	481a      	ldr	r0, [pc, #104]	; (80012d8 <main+0x188>)
 8001270:	f000 ffae 	bl	80021d0 <_ZN13RoverArmMotor11getSetpointEv>
 8001274:	eeb0 7a40 	vmov.f32	s14, s0
 8001278:	eef0 7a60 	vmov.f32	s15, s1
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <main+0x198>)
 800127e:	ed83 7b00 	vstr	d7, [r3]
    printf("current angle: %f, setpoint: %f\r\n", current_angle, setpoint);
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <main+0x194>)
 8001284:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <main+0x198>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	e9cd 2300 	strd	r2, r3, [sp]
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4815      	ldr	r0, [pc, #84]	; (80012ec <main+0x19c>)
 8001298:	f7ff ff2c 	bl	80010f4 <printf>
    current_angle = Wrist_Roll.get_current_angle();
 800129c:	e7dd      	b.n	800125a <main+0x10a>
 800129e:	bf00      	nop
 80012a0:	00000000 	.word	0x00000000
 80012a4:	405e0000 	.word	0x405e0000
 80012a8:	00000000 	.word	0x00000000
 80012ac:	40000000 	.word	0x40000000
 80012b0:	20000500 	.word	0x20000500
 80012b4:	48000800 	.word	0x48000800
 80012b8:	200003d0 	.word	0x200003d0
 80012bc:	2000054c 	.word	0x2000054c
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000010 	.word	0x20000010
 80012cc:	20000018 	.word	0x20000018
 80012d0:	20000020 	.word	0x20000020
 80012d4:	20000028 	.word	0x20000028
 80012d8:	20000278 	.word	0x20000278
 80012dc:	20000240 	.word	0x20000240
 80012e0:	08009be0 	.word	0x08009be0
 80012e4:	20000230 	.word	0x20000230
 80012e8:	20000238 	.word	0x20000238
 80012ec:	08009c04 	.word	0x08009c04

080012f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b096      	sub	sp, #88	; 0x58
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	2244      	movs	r2, #68	; 0x44
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f005 fabc 	bl	800687c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	463b      	mov	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001312:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001316:	f001 fe11 	bl	8002f3c <HAL_PWREx_ControlVoltageScaling>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf14      	ite	ne
 8001320:	2301      	movne	r3, #1
 8001322:	2300      	moveq	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800132a:	f000 f85f 	bl	80013ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800132e:	2302      	movs	r3, #2
 8001330:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001336:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001338:	2310      	movs	r3, #16
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133c:	2302      	movs	r3, #2
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001340:	2302      	movs	r3, #2
 8001342:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001344:	2301      	movs	r3, #1
 8001346:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001348:	230a      	movs	r3, #10
 800134a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800134c:	2307      	movs	r3, #7
 800134e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001350:	2302      	movs	r3, #2
 8001352:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001354:	2302      	movs	r3, #2
 8001356:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4618      	mov	r0, r3
 800135e:	f001 fe43 	bl	8002fe8 <HAL_RCC_OscConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	bf14      	ite	ne
 8001368:	2301      	movne	r3, #1
 800136a:	2300      	moveq	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8001372:	f000 f83b 	bl	80013ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001376:	230f      	movs	r3, #15
 8001378:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137a:	2303      	movs	r3, #3
 800137c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	2104      	movs	r1, #4
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fa3e 	bl	8003810 <HAL_RCC_ClockConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	bf14      	ite	ne
 800139a:	2301      	movne	r3, #1
 800139c:	2300      	moveq	r3, #0
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 80013a4:	f000 f822 	bl	80013ec <Error_Handler>
  }
}
 80013a8:	bf00      	nop
 80013aa:	3758      	adds	r7, #88	; 0x58
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == B1_Pin) // INT Source is pin A9
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013c0:	d10a      	bne.n	80013d8 <HAL_GPIO_EXTI_Callback+0x28>
      // printf("INTERRUPT\r\n");
      // current_angle = Wrist_Roll.get_current_angle();
      // printf("current angle is %f\r\n, current_angle");
      // Wrist_Roll.newSetpoint(current_angle + 150);

      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x30>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	639a      	str	r2, [r3, #56]	; 0x38
      Wrist_Roll.set_zero_angle();
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80013cc:	f000 ff3b 	bl	8002246 <_ZN13RoverArmMotor14set_zero_angleEv>
      brakeSet = 1;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
      return;
 80013d6:	bf00      	nop
    }
}
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000054c 	.word	0x2000054c
 80013e4:	20000278 	.word	0x20000278
 80013e8:	20000240 	.word	0x20000240

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <Error_Handler+0x8>
	...

080013f8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b096      	sub	sp, #88	; 0x58
 80013fc:	af10      	add	r7, sp, #64	; 0x40
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d13f      	bne.n	8001488 <_Z41__static_initialization_and_destruction_0ii+0x90>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140e:	4293      	cmp	r3, r2
 8001410:	d13a      	bne.n	8001488 <_Z41__static_initialization_and_destruction_0ii+0x90>
Pin CYTRON_DIR_1(CYTRON_DIR_1_GPIO_Port, CYTRON_DIR_1_Pin);
 8001412:	2220      	movs	r2, #32
 8001414:	4922      	ldr	r1, [pc, #136]	; (80014a0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001416:	4823      	ldr	r0, [pc, #140]	; (80014a4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001418:	f7ff fe18 	bl	800104c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin, &htim2, TIM_CHANNEL_2);
 800141c:	2304      	movs	r3, #4
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001422:	2208      	movs	r2, #8
 8001424:	491e      	ldr	r1, [pc, #120]	; (80014a0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001426:	4821      	ldr	r0, [pc, #132]	; (80014ac <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001428:	f7ff fe2d 	bl	8001086 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>
Pin AMT22_1(GPIOC, GPIO_PIN_7);
 800142c:	2280      	movs	r2, #128	; 0x80
 800142e:	4920      	ldr	r1, [pc, #128]	; (80014b0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001430:	4820      	ldr	r0, [pc, #128]	; (80014b4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001432:	f7ff fe0b 	bl	800104c <_ZN3PinC1EP12GPIO_TypeDeft>
RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fdec 	bl	8001018 <_ZN3PinC1Ev>
 8001440:	4c1a      	ldr	r4, [pc, #104]	; (80014ac <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001442:	ad0b      	add	r5, sp, #44	; 0x2c
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800144e:	2300      	movs	r3, #0
 8001450:	930a      	str	r3, [sp, #40]	; 0x28
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001454:	ad06      	add	r5, sp, #24
 8001456:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001458:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800145e:	ad02      	add	r5, sp, #8
 8001460:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001462:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001466:	466a      	mov	r2, sp
 8001468:	f104 0308 	add.w	r3, r4, #8
 800146c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001470:	e882 0003 	stmia.w	r2, {r0, r1}
 8001474:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001478:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8001490 <_Z41__static_initialization_and_destruction_0ii+0x98>
 800147c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8001498 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8001480:	490d      	ldr	r1, [pc, #52]	; (80014b8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001482:	480e      	ldr	r0, [pc, #56]	; (80014bc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001484:	f000 fd55 	bl	8001f32 <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>
}
 8001488:	bf00      	nop
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bdb0      	pop	{r4, r5, r7, pc}
 8001490:	00000000 	.word	0x00000000
 8001494:	40767000 	.word	0x40767000
	...
 80014a0:	48000400 	.word	0x48000400
 80014a4:	20000244 	.word	0x20000244
 80014a8:	2000054c 	.word	0x2000054c
 80014ac:	20000254 	.word	0x20000254
 80014b0:	48000800 	.word	0x48000800
 80014b4:	20000264 	.word	0x20000264
 80014b8:	200003d0 	.word	0x200003d0
 80014bc:	20000278 	.word	0x20000278

080014c0 <_GLOBAL__sub_I_aggKp>:
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7ff ff95 	bl	80013f8 <_Z41__static_initialization_and_destruction_0ii>
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_SPI1_Init+0x74>)
 80014d6:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <MX_SPI1_Init+0x78>)
 80014d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_SPI1_Init+0x74>)
 80014dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_SPI1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <MX_SPI1_Init+0x74>)
 80014ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_SPI1_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MX_SPI1_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_SPI1_Init+0x74>)
 80014fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001502:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_SPI1_Init+0x74>)
 8001506:	2220      	movs	r2, #32
 8001508:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_SPI1_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_SPI1_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_SPI1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_SPI1_Init+0x74>)
 800151e:	2207      	movs	r2, #7
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_SPI1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_SPI1_Init+0x74>)
 800152a:	2208      	movs	r2, #8
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_SPI1_Init+0x74>)
 8001530:	f002 fece 	bl	80042d0 <HAL_SPI_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800153a:	f7ff ff57 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200003d0 	.word	0x200003d0
 8001548:	40013000 	.word	0x40013000

0800154c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <MX_SPI2_Init+0x74>)
 8001552:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <MX_SPI2_Init+0x78>)
 8001554:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <MX_SPI2_Init+0x74>)
 8001558:	f44f 7282 	mov.w	r2, #260	; 0x104
 800155c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <MX_SPI2_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <MX_SPI2_Init+0x74>)
 8001566:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800156a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_SPI2_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <MX_SPI2_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_SPI2_Init+0x74>)
 800157a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_SPI2_Init+0x74>)
 8001582:	2220      	movs	r2, #32
 8001584:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_SPI2_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_SPI2_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <MX_SPI2_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_SPI2_Init+0x74>)
 800159a:	2207      	movs	r2, #7
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <MX_SPI2_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_SPI2_Init+0x74>)
 80015a6:	2208      	movs	r2, #8
 80015a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_SPI2_Init+0x74>)
 80015ac:	f002 fe90 	bl	80042d0 <HAL_SPI_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015b6:	f7ff ff19 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000434 	.word	0x20000434
 80015c4:	40003800 	.word	0x40003800

080015c8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <MX_SPI3_Init+0x74>)
 80015ce:	4a1c      	ldr	r2, [pc, #112]	; (8001640 <MX_SPI3_Init+0x78>)
 80015d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_SPI3_Init+0x74>)
 80015d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <MX_SPI3_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_SPI3_Init+0x74>)
 80015e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015e6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_SPI3_Init+0x74>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_SPI3_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_SPI3_Init+0x74>)
 80015f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_SPI3_Init+0x74>)
 80015fe:	2220      	movs	r2, #32
 8001600:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_SPI3_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_SPI3_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_SPI3_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_SPI3_Init+0x74>)
 8001616:	2207      	movs	r2, #7
 8001618:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <MX_SPI3_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_SPI3_Init+0x74>)
 8001622:	2208      	movs	r2, #8
 8001624:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_SPI3_Init+0x74>)
 8001628:	f002 fe52 	bl	80042d0 <HAL_SPI_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001632:	f7ff fedb 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000498 	.word	0x20000498
 8001640:	40003c00 	.word	0x40003c00

08001644 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08e      	sub	sp, #56	; 0x38
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a47      	ldr	r2, [pc, #284]	; (8001780 <HAL_SPI_MspInit+0x13c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d12a      	bne.n	80016bc <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001666:	4b47      	ldr	r3, [pc, #284]	; (8001784 <HAL_SPI_MspInit+0x140>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	4a46      	ldr	r2, [pc, #280]	; (8001784 <HAL_SPI_MspInit+0x140>)
 800166c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001670:	6613      	str	r3, [r2, #96]	; 0x60
 8001672:	4b44      	ldr	r3, [pc, #272]	; (8001784 <HAL_SPI_MspInit+0x140>)
 8001674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167a:	623b      	str	r3, [r7, #32]
 800167c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <HAL_SPI_MspInit+0x140>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a40      	ldr	r2, [pc, #256]	; (8001784 <HAL_SPI_MspInit+0x140>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <HAL_SPI_MspInit+0x140>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001696:	f641 0302 	movw	r3, #6146	; 0x1802
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016a8:	2305      	movs	r3, #5
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b6:	f001 fa89 	bl	8002bcc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80016ba:	e05c      	b.n	8001776 <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a31      	ldr	r2, [pc, #196]	; (8001788 <HAL_SPI_MspInit+0x144>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d129      	bne.n	800171a <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016c6:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <HAL_SPI_MspInit+0x140>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ca:	4a2e      	ldr	r2, [pc, #184]	; (8001784 <HAL_SPI_MspInit+0x140>)
 80016cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d0:	6593      	str	r3, [r2, #88]	; 0x58
 80016d2:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <HAL_SPI_MspInit+0x140>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016da:	61bb      	str	r3, [r7, #24]
 80016dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <HAL_SPI_MspInit+0x140>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a28      	ldr	r2, [pc, #160]	; (8001784 <HAL_SPI_MspInit+0x140>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <HAL_SPI_MspInit+0x140>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016f6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001708:	2305      	movs	r3, #5
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	481e      	ldr	r0, [pc, #120]	; (800178c <HAL_SPI_MspInit+0x148>)
 8001714:	f001 fa5a 	bl	8002bcc <HAL_GPIO_Init>
}
 8001718:	e02d      	b.n	8001776 <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI3)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a1c      	ldr	r2, [pc, #112]	; (8001790 <HAL_SPI_MspInit+0x14c>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d128      	bne.n	8001776 <HAL_SPI_MspInit+0x132>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <HAL_SPI_MspInit+0x140>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	4a16      	ldr	r2, [pc, #88]	; (8001784 <HAL_SPI_MspInit+0x140>)
 800172a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800172e:	6593      	str	r3, [r2, #88]	; 0x58
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_SPI_MspInit+0x140>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_SPI_MspInit+0x140>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001740:	4a10      	ldr	r2, [pc, #64]	; (8001784 <HAL_SPI_MspInit+0x140>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_SPI_MspInit+0x140>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001754:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001766:	2306      	movs	r3, #6
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176e:	4619      	mov	r1, r3
 8001770:	4808      	ldr	r0, [pc, #32]	; (8001794 <HAL_SPI_MspInit+0x150>)
 8001772:	f001 fa2b 	bl	8002bcc <HAL_GPIO_Init>
}
 8001776:	bf00      	nop
 8001778:	3738      	adds	r7, #56	; 0x38
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40013000 	.word	0x40013000
 8001784:	40021000 	.word	0x40021000
 8001788:	40003800 	.word	0x40003800
 800178c:	48000400 	.word	0x48000400
 8001790:	40003c00 	.word	0x40003c00
 8001794:	48000800 	.word	0x48000800

08001798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_MspInit+0x44>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_MspInit+0x44>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6613      	str	r3, [r2, #96]	; 0x60
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_MspInit+0x44>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_MspInit+0x44>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_MspInit+0x44>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6593      	str	r3, [r2, #88]	; 0x58
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_MspInit+0x44>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <NMI_Handler+0x4>

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182c:	f001 f878 	bl	8002920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001838:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800183c:	f001 fb58 	bl	8002ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return 1;
 8001848:	2301      	movs	r3, #1
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_kill>:

int _kill(int pid, int sig)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800185e:	f004 ffdb 	bl	8006818 <__errno>
 8001862:	4603      	mov	r3, r0
 8001864:	2216      	movs	r2, #22
 8001866:	601a      	str	r2, [r3, #0]
  return -1;
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_exit>:

void _exit (int status)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ffe7 	bl	8001854 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001886:	e7fe      	b.n	8001886 <_exit+0x12>

08001888 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	e00a      	b.n	80018b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800189a:	f3af 8000 	nop.w
 800189e:	4601      	mov	r1, r0
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	60ba      	str	r2, [r7, #8]
 80018a6:	b2ca      	uxtb	r2, r1
 80018a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dbf0      	blt.n	800189a <_read+0x12>
  }

  return len;
 80018b8:	687b      	ldr	r3, [r7, #4]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e009      	b.n	80018e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	60ba      	str	r2, [r7, #8]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbf1      	blt.n	80018d4 <_write+0x12>
  }
  return len;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_close>:

int _close(int file)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001922:	605a      	str	r2, [r3, #4]
  return 0;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_isatty>:

int _isatty(int file)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800196c:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <_sbrk+0x5c>)
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <_sbrk+0x60>)
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <_sbrk+0x64>)
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <_sbrk+0x68>)
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	d207      	bcs.n	80019a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001994:	f004 ff40 	bl	8006818 <__errno>
 8001998:	4603      	mov	r3, r0
 800199a:	220c      	movs	r2, #12
 800199c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	e009      	b.n	80019b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <_sbrk+0x64>)
 80019b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20010000 	.word	0x20010000
 80019c4:	00000400 	.word	0x00000400
 80019c8:	200004fc 	.word	0x200004fc
 80019cc:	20000638 	.word	0x20000638

080019d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <SystemInit+0x20>)
 80019d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <SystemInit+0x20>)
 80019dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b09a      	sub	sp, #104	; 0x68
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	615a      	str	r2, [r3, #20]
 8001a26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	222c      	movs	r2, #44	; 0x2c
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f004 ff24 	bl	800687c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a34:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <MX_TIM1_Init+0x150>)
 8001a36:	4a44      	ldr	r2, [pc, #272]	; (8001b48 <MX_TIM1_Init+0x154>)
 8001a38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001a3a:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <MX_TIM1_Init+0x150>)
 8001a3c:	224f      	movs	r2, #79	; 0x4f
 8001a3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <MX_TIM1_Init+0x150>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500-1;
 8001a46:	4b3f      	ldr	r3, [pc, #252]	; (8001b44 <MX_TIM1_Init+0x150>)
 8001a48:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001a4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <MX_TIM1_Init+0x150>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a54:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <MX_TIM1_Init+0x150>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5a:	4b3a      	ldr	r3, [pc, #232]	; (8001b44 <MX_TIM1_Init+0x150>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a60:	4838      	ldr	r0, [pc, #224]	; (8001b44 <MX_TIM1_Init+0x150>)
 8001a62:	f003 f84f 	bl	8004b04 <HAL_TIM_Base_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a6c:	f7ff fcbe 	bl	80013ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a74:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4831      	ldr	r0, [pc, #196]	; (8001b44 <MX_TIM1_Init+0x150>)
 8001a7e:	f003 fb39 	bl	80050f4 <HAL_TIM_ConfigClockSource>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001a88:	f7ff fcb0 	bl	80013ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a8c:	482d      	ldr	r0, [pc, #180]	; (8001b44 <MX_TIM1_Init+0x150>)
 8001a8e:	f003 f8dd 	bl	8004c4c <HAL_TIM_PWM_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a98:	f7ff fca8 	bl	80013ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aa8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aac:	4619      	mov	r1, r3
 8001aae:	4825      	ldr	r0, [pc, #148]	; (8001b44 <MX_TIM1_Init+0x150>)
 8001ab0:	f003 ff8c 	bl	80059cc <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001aba:	f7ff fc97 	bl	80013ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abe:	2360      	movs	r3, #96	; 0x60
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aca:	2300      	movs	r3, #0
 8001acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ada:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ade:	2204      	movs	r2, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4818      	ldr	r0, [pc, #96]	; (8001b44 <MX_TIM1_Init+0x150>)
 8001ae4:	f003 f9f2 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001aee:	f7ff fc7d 	bl	80013ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	4619      	mov	r1, r3
 8001b26:	4807      	ldr	r0, [pc, #28]	; (8001b44 <MX_TIM1_Init+0x150>)
 8001b28:	f003 ffb6 	bl	8005a98 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001b32:	f7ff fc5b 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b36:	4803      	ldr	r0, [pc, #12]	; (8001b44 <MX_TIM1_Init+0x150>)
 8001b38:	f000 f8d4 	bl	8001ce4 <HAL_TIM_MspPostInit>

}
 8001b3c:	bf00      	nop
 8001b3e:	3768      	adds	r7, #104	; 0x68
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000500 	.word	0x20000500
 8001b48:	40012c00 	.word	0x40012c00

08001b4c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	; 0x38
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b60:	f107 031c 	add.w	r3, r7, #28
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]
 8001b7a:	615a      	str	r2, [r3, #20]
 8001b7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <MX_TIM2_Init+0xe8>)
 8001b80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001b86:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <MX_TIM2_Init+0xe8>)
 8001b88:	224f      	movs	r2, #79	; 0x4f
 8001b8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8c:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <MX_TIM2_Init+0xe8>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <MX_TIM2_Init+0xe8>)
 8001b94:	2263      	movs	r2, #99	; 0x63
 8001b96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b98:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <MX_TIM2_Init+0xe8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b9e:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <MX_TIM2_Init+0xe8>)
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ba4:	4823      	ldr	r0, [pc, #140]	; (8001c34 <MX_TIM2_Init+0xe8>)
 8001ba6:	f002 ffad 	bl	8004b04 <HAL_TIM_Base_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001bb0:	f7ff fc1c 	bl	80013ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	481c      	ldr	r0, [pc, #112]	; (8001c34 <MX_TIM2_Init+0xe8>)
 8001bc2:	f003 fa97 	bl	80050f4 <HAL_TIM_ConfigClockSource>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001bcc:	f7ff fc0e 	bl	80013ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bd0:	4818      	ldr	r0, [pc, #96]	; (8001c34 <MX_TIM2_Init+0xe8>)
 8001bd2:	f003 f83b 	bl	8004c4c <HAL_TIM_PWM_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001bdc:	f7ff fc06 	bl	80013ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	4619      	mov	r1, r3
 8001bee:	4811      	ldr	r0, [pc, #68]	; (8001c34 <MX_TIM2_Init+0xe8>)
 8001bf0:	f003 feec 	bl	80059cc <HAL_TIMEx_MasterConfigSynchronization>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001bfa:	f7ff fbf7 	bl	80013ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bfe:	2360      	movs	r3, #96	; 0x60
 8001c00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c0e:	463b      	mov	r3, r7
 8001c10:	2204      	movs	r2, #4
 8001c12:	4619      	mov	r1, r3
 8001c14:	4807      	ldr	r0, [pc, #28]	; (8001c34 <MX_TIM2_Init+0xe8>)
 8001c16:	f003 f959 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c20:	f7ff fbe4 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c24:	4803      	ldr	r0, [pc, #12]	; (8001c34 <MX_TIM2_Init+0xe8>)
 8001c26:	f000 f85d 	bl	8001ce4 <HAL_TIM_MspPostInit>

}
 8001c2a:	bf00      	nop
 8001c2c:	3738      	adds	r7, #56	; 0x38
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	2000054c 	.word	0x2000054c

08001c38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a20      	ldr	r2, [pc, #128]	; (8001cd8 <HAL_TIM_Base_MspInit+0xa0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10c      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <HAL_TIM_Base_MspInit+0xa4>)
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5e:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <HAL_TIM_Base_MspInit+0xa4>)
 8001c60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c64:	6613      	str	r3, [r2, #96]	; 0x60
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_TIM_Base_MspInit+0xa4>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c72:	e02d      	b.n	8001cd0 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d128      	bne.n	8001cd0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_TIM_Base_MspInit+0xa4>)
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	4a16      	ldr	r2, [pc, #88]	; (8001cdc <HAL_TIM_Base_MspInit+0xa4>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6593      	str	r3, [r2, #88]	; 0x58
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_TIM_Base_MspInit+0xa4>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_TIM_Base_MspInit+0xa4>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	4a10      	ldr	r2, [pc, #64]	; (8001cdc <HAL_TIM_Base_MspInit+0xa4>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_TIM_Base_MspInit+0xa4>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <HAL_TIM_Base_MspInit+0xa8>)
 8001ccc:	f000 ff7e 	bl	8002bcc <HAL_GPIO_Init>
}
 8001cd0:	bf00      	nop
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40012c00 	.word	0x40012c00
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	48000400 	.word	0x48000400

08001ce4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a23      	ldr	r2, [pc, #140]	; (8001d90 <HAL_TIM_MspPostInit+0xac>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d11e      	bne.n	8001d44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_TIM_MspPostInit+0xb0>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <HAL_TIM_MspPostInit+0xb0>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_TIM_MspPostInit+0xb0>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 8001d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d30:	2301      	movs	r3, #1
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3e:	f000 ff45 	bl	8002bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d42:	e020      	b.n	8001d86 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4c:	d11b      	bne.n	8001d86 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_TIM_MspPostInit+0xb0>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a10      	ldr	r2, [pc, #64]	; (8001d94 <HAL_TIM_MspPostInit+0xb0>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_TIM_MspPostInit+0xb0>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 8001d66:	2308      	movs	r3, #8
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d76:	2301      	movs	r3, #1
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4805      	ldr	r0, [pc, #20]	; (8001d98 <HAL_TIM_MspPostInit+0xb4>)
 8001d82:	f000 ff23 	bl	8002bcc <HAL_GPIO_Init>
}
 8001d86:	bf00      	nop
 8001d88:	3728      	adds	r7, #40	; 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40012c00 	.word	0x40012c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000400 	.word	0x48000400

08001d9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001da2:	4a15      	ldr	r2, [pc, #84]	; (8001df8 <MX_USART2_UART_Init+0x5c>)
 8001da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dde:	4805      	ldr	r0, [pc, #20]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001de0:	f003 fed2 	bl	8005b88 <HAL_UART_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dea:	f7ff faff 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000598 	.word	0x20000598
 8001df8:	40004400 	.word	0x40004400

08001dfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b0a2      	sub	sp, #136	; 0x88
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2260      	movs	r2, #96	; 0x60
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f004 fd2d 	bl	800687c <memset>
  if(uartHandle->Instance==USART2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a20      	ldr	r2, [pc, #128]	; (8001ea8 <HAL_UART_MspInit+0xac>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d138      	bne.n	8001e9e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 ff0d 	bl	8003c58 <HAL_RCCEx_PeriphCLKConfig>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e44:	f7ff fad2 	bl	80013ec <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_UART_MspInit+0xb0>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_UART_MspInit+0xb0>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6593      	str	r3, [r2, #88]	; 0x58
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_UART_MspInit+0xb0>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e60:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_UART_MspInit+0xb0>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e64:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HAL_UART_MspInit+0xb0>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_UART_MspInit+0xb0>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e78:	230c      	movs	r3, #12
 8001e7a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e94:	4619      	mov	r1, r3
 8001e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9a:	f000 fe97 	bl	8002bcc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3788      	adds	r7, #136	; 0x88
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40004400 	.word	0x40004400
 8001eac:	40021000 	.word	0x40021000

08001eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eb4:	f7ff fd8c 	bl	80019d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb8:	480c      	ldr	r0, [pc, #48]	; (8001eec <LoopForever+0x6>)
  ldr r1, =_edata
 8001eba:	490d      	ldr	r1, [pc, #52]	; (8001ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	; (8001ef4 <LoopForever+0xe>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec0:	e002      	b.n	8001ec8 <LoopCopyDataInit>

08001ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec6:	3304      	adds	r3, #4

08001ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ecc:	d3f9      	bcc.n	8001ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ed0:	4c0a      	ldr	r4, [pc, #40]	; (8001efc <LoopForever+0x16>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed4:	e001      	b.n	8001eda <LoopFillZerobss>

08001ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed8:	3204      	adds	r2, #4

08001eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001edc:	d3fb      	bcc.n	8001ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ede:	f004 fca1 	bl	8006824 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ee2:	f7ff f935 	bl	8001150 <main>

08001ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ee6:	e7fe      	b.n	8001ee6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ee8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001ef4:	0800a6f8 	.word	0x0800a6f8
  ldr r2, =_sbss
 8001ef8:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001efc:	20000634 	.word	0x20000634

08001f00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC1_IRQHandler>

08001f02 <_ZN9movingAvgC1Ei>:
#define MOVINGAVG_H_INCLUDED

class movingAvg
{
    public:
        movingAvg(int interval)
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
            : m_interval{interval}, m_nbrReadings{0}, m_sum{0}, m_next{0} {}
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	60da      	str	r2, [r3, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>:

// TODO: Test this class with the old code, remember to create backup beforehand!
// I'm very suspicious of the way I handled user defined pointers...

// The motor will not move until begin() is called!
RoverArmMotor::RoverArmMotor(SPI_HandleTypeDef* spi_handle, Pin pwm_pin, Pin dir_pin, Pin encoder_pin, int esc_type, double minimum_angle, double maximum_angle, Pin brake_pin)
 8001f32:	b082      	sub	sp, #8
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	6178      	str	r0, [r7, #20]
 8001f3c:	6139      	str	r1, [r7, #16]
 8001f3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f42:	e881 000c 	stmia.w	r1, {r2, r3}
 8001f46:	ed87 0b02 	vstr	d0, [r7, #8]
 8001f4a:	ed87 1b00 	vstr	d1, [r7]
                :internalPIDInstance(&input, &output, &setpoint, regularKp, regularKi, regularKd, _PID_CD_DIRECT)
                ,internalAveragerInstance(15){
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8001f74:	2300      	movs	r3, #0
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	eeb0 2a45 	vmov.f32	s4, s10
 8001f7c:	eef0 2a65 	vmov.f32	s5, s11
 8001f80:	eeb0 1a46 	vmov.f32	s2, s12
 8001f84:	eef0 1a66 	vmov.f32	s3, s13
 8001f88:	eeb0 0a47 	vmov.f32	s0, s14
 8001f8c:	eef0 0a67 	vmov.f32	s1, s15
 8001f90:	4623      	mov	r3, r4
 8001f92:	f000 fa7d 	bl	8002490 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3370      	adds	r3, #112	; 0x70
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ffb0 	bl	8001f02 <_ZN9movingAvgC1Ei>
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	33b8      	adds	r3, #184	; 0xb8
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff f836 	bl	8001018 <_ZN3PinC1Ev>
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	33c8      	adds	r3, #200	; 0xc8
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff f831 	bl	8001018 <_ZN3PinC1Ev>
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	33d8      	adds	r3, #216	; 0xd8
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff f82c 	bl	8001018 <_ZN3PinC1Ev>
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	33e8      	adds	r3, #232	; 0xe8
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff f827 	bl	8001018 <_ZN3PinC1Ev>

    //constructor
    spi = spi_handle;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    pwm = pwm_pin;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8001fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    dir = dir_pin;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8001fe8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    encoder = encoder_pin;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8001ff8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ffc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ffe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    brake = brake_pin;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8002008:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800200c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800200e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    escType = esc_type;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002016:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    lowestAngle = minimum_angle;
 800201a:	6979      	ldr	r1, [r7, #20]
 800201c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002020:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = maximum_angle;
 8002024:	6979      	ldr	r1, [r7, #20]
 8002026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800202a:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108

    //clean up variables
    input = 0;
 800202e:	6979      	ldr	r1, [r7, #20]
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
    output = 0;
 800203c:	6979      	ldr	r1, [r7, #20]
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
    
}
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	4618      	mov	r0, r3
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002056:	b002      	add	sp, #8
 8002058:	4770      	bx	lr
 800205a:	0000      	movs	r0, r0
 800205c:	0000      	movs	r0, r0
	...

08002060 <_ZN13RoverArmMotor5beginEdddddd>:

void RoverArmMotor::begin(double aggP, double aggI, double aggD, double regP, double regI, double regD){
 8002060:	b580      	push	{r7, lr}
 8002062:	b08e      	sub	sp, #56	; 0x38
 8002064:	af00      	add	r7, sp, #0
 8002066:	6378      	str	r0, [r7, #52]	; 0x34
 8002068:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800206c:	ed87 1b08 	vstr	d1, [r7, #32]
 8002070:	ed87 2b06 	vstr	d2, [r7, #24]
 8002074:	ed87 3b04 	vstr	d3, [r7, #16]
 8002078:	ed87 4b02 	vstr	d4, [r7, #8]
 800207c:	ed87 5b00 	vstr	d5, [r7]
    /*------------------Initialize pins------------------*/ 
    // Initialize given pins
    // pinMode(encoder, INPUT); // not needed since we use HAL library
    // pinMode(pwm, OUTPUT);

    if(escType == CYTRON){
 8002080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002082:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002086:	2b00      	cmp	r3, #0
 8002088:	d107      	bne.n	800209a <_ZN13RoverArmMotor5beginEdddddd+0x3a>
        // pinMode(dir, OUTPUT); // not needed since we use HAL library

        // Allow negative outputs, the sign will be interpreted as
        // the direction pin
        internalPIDInstance.SetOutputLimits(5, 99); // PWM duty cycle mn297 TOOD: check this
 800208a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208c:	ed9f 1b48 	vldr	d1, [pc, #288]	; 80021b0 <_ZN13RoverArmMotor5beginEdddddd+0x150>
 8002090:	ed9f 0b49 	vldr	d0, [pc, #292]	; 80021b8 <_ZN13RoverArmMotor5beginEdddddd+0x158>
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fa76 	bl	8002586 <_ZN3PID15SetOutputLimitsEdd>
    //     // internalServoInstance.attach(pwm);
    //     internalServoInstance.attach(pwm, 1100, 1900, 1500); // mn297
    // }
    
    /*------------------Initialize moving average------------------*/
    internalAveragerInstance.begin();
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	3370      	adds	r3, #112	; 0x70
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f991 	bl	80023c6 <_ZN9movingAvg5beginEv>

    /*------------------Initialize PID------------------*/
    internalPIDInstance.Init();
 80020a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fa15 	bl	80024d6 <_ZN3PID4InitEv>
    internalPIDInstance.SetMode(_PID_MODE_AUTOMATIC);
 80020ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ae:	2101      	movs	r1, #1
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 fa4a 	bl	800254a <_ZN3PID7SetModeE15PIDMode_TypeDef>
    /*------------------Get setpoint------------------*/
    // Get current location and set it as setpoint. Essential to prevent jerkiness
    // as the microcontroller initializes.
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    //after setup, currentAngle is same as setpoint
    adcResult = get_current_angle();    // fix setpoint not equal to current angle
 80020b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020b8:	f000 f904 	bl	80022c4 <_ZN13RoverArmMotor17get_current_angleEv>
 80020bc:	ec53 2b10 	vmov	r2, r3, d0
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7fe fd48 	bl	8000b58 <__aeabi_d2iz>
 80020c8:	4602      	mov	r2, r0
 80020ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020cc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    currentAngle = mapFloat((float) adcResult, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f);
 80020d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020de:	ed9f 2a38 	vldr	s4, [pc, #224]	; 80021c0 <_ZN13RoverArmMotor5beginEdddddd+0x160>
 80020e2:	eddf 1a38 	vldr	s3, [pc, #224]	; 80021c4 <_ZN13RoverArmMotor5beginEdddddd+0x164>
 80020e6:	ed9f 1a38 	vldr	s2, [pc, #224]	; 80021c8 <_ZN13RoverArmMotor5beginEdddddd+0x168>
 80020ea:	eddf 0a36 	vldr	s1, [pc, #216]	; 80021c4 <_ZN13RoverArmMotor5beginEdddddd+0x164>
 80020ee:	eeb0 0a67 	vmov.f32	s0, s15
 80020f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020f4:	f000 f92c 	bl	8002350 <_ZN13RoverArmMotor8mapFloatEfffff>
 80020f8:	eeb0 7a40 	vmov.f32	s14, s0
 80020fc:	eef0 7a60 	vmov.f32	s15, s1
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    setpoint = currentAngle;
 8002106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002108:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 800210c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800210e:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140



    /*------------------Set PID parameters------------------*/
    regularKp = regP;
 8002112:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002114:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002118:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    regularKi = regI;
 800211c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800211e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002122:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    regularKd = regD;
 8002126:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800212c:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    aggressiveKp = aggP;
 8002130:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002136:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    aggressiveKi = aggI;
 800213a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800213c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002140:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    aggressiveKd = aggD;
 8002144:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002146:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800214a:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

    internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 800214e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002152:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8002156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002158:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 800215c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215e:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8002162:	eeb0 2a45 	vmov.f32	s4, s10
 8002166:	eef0 2a65 	vmov.f32	s5, s11
 800216a:	eeb0 1a46 	vmov.f32	s2, s12
 800216e:	eef0 1a66 	vmov.f32	s3, s13
 8002172:	eeb0 0a47 	vmov.f32	s0, s14
 8002176:	eef0 0a67 	vmov.f32	s1, s15
 800217a:	4610      	mov	r0, r2
 800217c:	f000 fa71 	bl	8002662 <_ZN3PID10SetTuningsEddd>
    // if(brake)  engageBrake(); //use brake if there is one
    if (brake.valid != 0)  engageBrake(); //use brake if there is one
 8002180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002182:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <_ZN13RoverArmMotor5beginEdddddd+0x130>
 800218a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800218c:	f000 f883 	bl	8002296 <_ZN13RoverArmMotor11engageBrakeEv>

    //initialize the multiplier bool to false and the multiplier to 1. 
    wrist_waist = false; 
 8002190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    //multiplier = 1;
    gearRatio = 1;  //TODO check if this is correct
 8002198:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <_ZN13RoverArmMotor5beginEdddddd+0x16c>)
 80021a0:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150

}
 80021a4:	bf00      	nop
 80021a6:	3738      	adds	r7, #56	; 0x38
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	f3af 8000 	nop.w
 80021b0:	00000000 	.word	0x00000000
 80021b4:	4058c000 	.word	0x4058c000
 80021b8:	00000000 	.word	0x00000000
 80021bc:	40140000 	.word	0x40140000
 80021c0:	43b38000 	.word	0x43b38000
 80021c4:	00000000 	.word	0x00000000
 80021c8:	457ff000 	.word	0x457ff000
 80021cc:	3ff00000 	.word	0x3ff00000

080021d0 <_ZN13RoverArmMotor11getSetpointEv>:
    if(getRatio() == ratio) return true; 
    return false; 
}

// For display purposes
double RoverArmMotor::getSetpoint(){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
    return setpoint / gearRatio;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80021e4:	f7fe fb32 	bl	800084c <__aeabi_ddiv>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80021f0:	eeb0 0a47 	vmov.f32	s0, s14
 80021f4:	eef0 0a67 	vmov.f32	s1, s15
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <_ZN13RoverArmMotor14setAngleLimitsEdd>:

// void RoverArmMotor::setGearRatio(double ratio){
//     gearRatio = ratio;
// }

void RoverArmMotor::setAngleLimits(double lowest, double highest){
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	6178      	str	r0, [r7, #20]
 8002206:	ed87 0b02 	vstr	d0, [r7, #8]
 800220a:	ed87 1b00 	vstr	d1, [r7]
    lowestAngle = lowest * gearRatio;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 8002214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002218:	f7fe f9ee 	bl	80005f8 <__aeabi_dmul>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	6979      	ldr	r1, [r7, #20]
 8002222:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = highest * gearRatio;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 800222c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002230:	f7fe f9e2 	bl	80005f8 <__aeabi_dmul>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	6979      	ldr	r1, [r7, #20]
 800223a:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
}
 800223e:	bf00      	nop
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_ZN13RoverArmMotor14set_zero_angleEv>:

void RoverArmMotor::set_zero_angle(){
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
    setZeroSPI(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 8002260:	2300      	movs	r3, #0
 8002262:	f004 fa4a 	bl	80066fa <setZeroSPI>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <_ZN13RoverArmMotor13reset_encoderEv>:
void RoverArmMotor::reset_encoder(){
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
    resetAMT22(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 8002288:	2300      	movs	r3, #0
 800228a:	f004 fa5e 	bl	800674a <resetAMT22>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_ZN13RoverArmMotor11engageBrakeEv>:
    //   digitalWrite(brake, LOW);  
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_RESET); //mn297
    }
}

void RoverArmMotor::engageBrake(){
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
    if(brake.valid != 0){
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d009      	beq.n	80022bc <_ZN13RoverArmMotor11engageBrakeEv+0x26>
    //    digitalWrite(brake, HIGH); 
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_SET); //mn297
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80022b4:	2201      	movs	r2, #1
 80022b6:	4619      	mov	r1, r3
 80022b8:	f000 fe02 	bl	8002ec0 <HAL_GPIO_WritePin>
    }
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_ZN13RoverArmMotor17get_current_angleEv>:
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
    adcResult = internalAveragerInstance.reading(encoderData);  // implicit cast to int
    currentAngle = mapFloat((float) adcResult, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
    return currentAngle / gearRatio;
}
double RoverArmMotor::get_current_angle(){    //mn297
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 80022de:	2300      	movs	r3, #0
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	230c      	movs	r3, #12
 80022e4:	f004 f979 	bl	80065da <getPositionSPI>
 80022e8:	4603      	mov	r3, r0
 80022ea:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 80022ec:	89fb      	ldrh	r3, [r7, #14]
 80022ee:	ee07 3a90 	vmov	s15, r3
 80022f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f6:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8002344 <_ZN13RoverArmMotor17get_current_angleEv+0x80>
 80022fa:	eddf 1a13 	vldr	s3, [pc, #76]	; 8002348 <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 80022fe:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800234c <_ZN13RoverArmMotor17get_current_angleEv+0x88>
 8002302:	eddf 0a11 	vldr	s1, [pc, #68]	; 8002348 <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 8002306:	eeb0 0a67 	vmov.f32	s0, s15
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f820 	bl	8002350 <_ZN13RoverArmMotor8mapFloatEfffff>
 8002310:	eeb0 7a40 	vmov.f32	s14, s0
 8002314:	eef0 7a60 	vmov.f32	s15, s1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    return currentAngle / gearRatio;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800232a:	f7fe fa8f 	bl	800084c <__aeabi_ddiv>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	ec43 2b17 	vmov	d7, r2, r3
}
 8002336:	eeb0 0a47 	vmov.f32	s0, s14
 800233a:	eef0 0a67 	vmov.f32	s1, s15
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	43b38000 	.word	0x43b38000
 8002348:	00000000 	.word	0x00000000
 800234c:	457ff000 	.word	0x457ff000

08002350 <_ZN13RoverArmMotor8mapFloatEfffff>:
double RoverArmMotor::getCurrentOutput(){
    return output;
}

double RoverArmMotor::mapFloat(float x, float in_min, float in_max, float out_min, float out_max){
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
 8002356:	6178      	str	r0, [r7, #20]
 8002358:	ed87 0a04 	vstr	s0, [r7, #16]
 800235c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002360:	ed87 1a02 	vstr	s2, [r7, #8]
 8002364:	edc7 1a01 	vstr	s3, [r7, #4]
 8002368:	ed87 2a00 	vstr	s4, [r7]
    double result = ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 800236c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002370:	edd7 7a03 	vldr	s15, [r7, #12]
 8002374:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002378:	edd7 6a00 	vldr	s13, [r7]
 800237c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002380:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002384:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002388:	ed97 7a02 	vldr	s14, [r7, #8]
 800238c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002398:	edd7 7a01 	vldr	s15, [r7, #4]
 800239c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a0:	ee17 0a90 	vmov	r0, s15
 80023a4:	f7fe f8d0 	bl	8000548 <__aeabi_f2d>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result; 
 80023b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b4:	ec43 2b17 	vmov	d7, r2, r3
    }
 80023b8:	eeb0 0a47 	vmov.f32	s0, s14
 80023bc:	eef0 0a67 	vmov.f32	s1, s15
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <_ZN9movingAvg5beginEv>:

#include <movingAvg.h>

// initialize - allocate the interval array
void movingAvg::begin()
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
    m_readings = new int[m_interval];
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d201      	bcs.n	80023de <_ZN9movingAvg5beginEv+0x18>
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	e001      	b.n	80023e2 <_ZN9movingAvg5beginEv+0x1c>
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	4618      	mov	r0, r3
 80023e4:	f004 f9f4 	bl	80067d0 <_Znaj>
 80023e8:	4603      	mov	r3, r0
 80023ea:	461a      	mov	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	611a      	str	r2, [r3, #16]
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~ Constructor ~~~~~~~~~~~~~~~~ */
PID::PID() { }

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6278      	str	r0, [r7, #36]	; 0x24
 8002400:	6239      	str	r1, [r7, #32]
 8002402:	61fa      	str	r2, [r7, #28]
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	ed87 0b04 	vstr	d0, [r7, #16]
 800240a:	ed87 1b02 	vstr	d1, [r7, #8]
 800240e:	ed87 2b00 	vstr	d2, [r7]
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_myOutput   = Output;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	645a      	str	r2, [r3, #68]	; 0x44
	_myInput    = Input;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	6a3a      	ldr	r2, [r7, #32]
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
	_mySetpoint = Setpoint;
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	649a      	str	r2, [r3, #72]	; 0x48
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	2200      	movs	r2, #0
 8002428:	705a      	strb	r2, [r3, #1]
	
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 800242a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002480 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x88>
 800242e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002488 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x90>
 8002432:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002434:	f000 f8a7 	bl	8002586 <_ZN3PID15SetOutputLimitsEdd>
	
	_sampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	2264      	movs	r2, #100	; 0x64
 800243c:	609a      	str	r2, [r3, #8]
	
	PID::SetControllerDirection(ControllerDirection);
 800243e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002442:	4619      	mov	r1, r3
 8002444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002446:	f000 f9cf 	bl	80027e8 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>
	PID::SetTunings(Kp, Ki, Kd, POn);
 800244a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800244e:	4619      	mov	r1, r3
 8002450:	ed97 2b00 	vldr	d2, [r7]
 8002454:	ed97 1b02 	vldr	d1, [r7, #8]
 8002458:	ed97 0b04 	vldr	d0, [r7, #16]
 800245c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800245e:	f000 f91b 	bl	8002698 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
	
	_lastTime = GetTime() - _sampleTime;
 8002462:	f000 fa71 	bl	8002948 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	1ad2      	subs	r2, r2, r3
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	605a      	str	r2, [r3, #4]
	
}
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	4618      	mov	r0, r3
 8002476:	3728      	adds	r7, #40	; 0x28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	f3af 8000 	nop.w
 8002480:	00000000 	.word	0x00000000
 8002484:	406fe000 	.word	0x406fe000
	...

08002490 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>:

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection) : PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection)
 8002490:	b580      	push	{r7, lr}
 8002492:	b08c      	sub	sp, #48	; 0x30
 8002494:	af02      	add	r7, sp, #8
 8002496:	6278      	str	r0, [r7, #36]	; 0x24
 8002498:	6239      	str	r1, [r7, #32]
 800249a:	61fa      	str	r2, [r7, #28]
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	ed87 0b04 	vstr	d0, [r7, #16]
 80024a2:	ed87 1b02 	vstr	d1, [r7, #8]
 80024a6:	ed87 2b00 	vstr	d2, [r7]
 80024aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	2301      	movs	r3, #1
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	ed97 2b00 	vldr	d2, [r7]
 80024b8:	ed97 1b02 	vldr	d1, [r7, #8]
 80024bc:	ed97 0b04 	vldr	d0, [r7, #16]
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	6a39      	ldr	r1, [r7, #32]
 80024c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024c8:	f7ff ff96 	bl	80023f8 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>
{ }
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	4618      	mov	r0, r3
 80024d0:	3728      	adds	r7, #40	; 0x28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_ZN3PID4InitEv>:



/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	_lastInput = *_myInput;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (_outputSum > _outMax)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002506:	f7fe fb07 	bl	8000b18 <__aeabi_dcmpgt>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <_ZN3PID4InitEv+0x48>
	{
		_outputSum = _outMax;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		_outputSum = _outMin;
	}
	else { }	
	
}
 800251c:	e011      	b.n	8002542 <_ZN3PID4InitEv+0x6c>
	else if (_outputSum < _outMin)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800252a:	f7fe fad7 	bl	8000adc <__aeabi_dcmplt>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d100      	bne.n	8002536 <_ZN3PID4InitEv+0x60>
}
 8002534:	e005      	b.n	8002542 <_ZN3PID4InitEv+0x6c>
		_outputSum = _outMin;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <_ZN3PID7SetModeE15PIDMode_TypeDef>:
	
}

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID::SetMode(PIDMode_TypeDef Mode)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	2b01      	cmp	r3, #1
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !_inAuto)
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d006      	beq.n	8002578 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	785b      	ldrb	r3, [r3, #1]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
	{
		Init();
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffaf 	bl	80024d6 <_ZN3PID4InitEv>
	}
	
	_inAuto = (PIDMode_TypeDef)newAuto;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7bfa      	ldrb	r2, [r7, #15]
 800257c:	705a      	strb	r2, [r3, #1]
	
}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <_ZN3PID15SetOutputLimitsEdd>:
	return _inAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(double Min, double Max)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	6178      	str	r0, [r7, #20]
 800258e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002592:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800259a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800259e:	f7fe fab1 	bl	8000b04 <__aeabi_dcmpge>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d158      	bne.n	800265a <_ZN3PID15SetOutputLimitsEdd+0xd4>
	{
		return;
	}
	
	_outMin = Min;
 80025a8:	6979      	ldr	r1, [r7, #20]
 80025aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025ae:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	_outMax = Max;
 80025b2:	6979      	ldr	r1, [r7, #20]
 80025b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025b8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	785b      	ldrb	r3, [r3, #1]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d04b      	beq.n	800265c <_ZN3PID15SetOutputLimitsEdd+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80025d2:	f7fe faa1 	bl	8000b18 <__aeabi_dcmpgt>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <_ZN3PID15SetOutputLimitsEdd+0x66>
		{
			*_myOutput = _outMax;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80025e6:	e9c1 2300 	strd	r2, r3, [r1]
 80025ea:	e012      	b.n	8002612 <_ZN3PID15SetOutputLimitsEdd+0x8c>
		}
		else if (*_myOutput < _outMin)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80025fa:	f7fe fa6f 	bl	8000adc <__aeabi_dcmplt>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d006      	beq.n	8002612 <_ZN3PID15SetOutputLimitsEdd+0x8c>
		{
			*_myOutput = _outMin;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800260e:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800261e:	f7fe fa7b 	bl	8000b18 <__aeabi_dcmpgt>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d006      	beq.n	8002636 <_ZN3PID15SetOutputLimitsEdd+0xb0>
		{
			_outputSum = _outMax;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800262e:	6979      	ldr	r1, [r7, #20]
 8002630:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002634:	e012      	b.n	800265c <_ZN3PID15SetOutputLimitsEdd+0xd6>
		}
		else if (_outputSum < _outMin)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002642:	f7fe fa4b 	bl	8000adc <__aeabi_dcmplt>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <_ZN3PID15SetOutputLimitsEdd+0xd6>
		{
			_outputSum = _outMin;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002652:	6979      	ldr	r1, [r7, #20]
 8002654:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002658:	e000      	b.n	800265c <_ZN3PID15SetOutputLimitsEdd+0xd6>
		return;
 800265a:	bf00      	nop
		}
		else { }
		
	}
	
}
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_ZN3PID10SetTuningsEddd>:

/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID::SetTunings(double Kp, double Ki, double Kd)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b088      	sub	sp, #32
 8002666:	af00      	add	r7, sp, #0
 8002668:	61f8      	str	r0, [r7, #28]
 800266a:	ed87 0b04 	vstr	d0, [r7, #16]
 800266e:	ed87 1b02 	vstr	d1, [r7, #8]
 8002672:	ed87 2b00 	vstr	d2, [r7]
	PID::SetTunings(Kp, Ki, Kd, _pOn);
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	789b      	ldrb	r3, [r3, #2]
 800267a:	4619      	mov	r1, r3
 800267c:	ed97 2b00 	vldr	d2, [r7]
 8002680:	ed97 1b02 	vldr	d1, [r7, #8]
 8002684:	ed97 0b04 	vldr	d0, [r7, #16]
 8002688:	69f8      	ldr	r0, [r7, #28]
 800268a:	f000 f805 	bl	8002698 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
}
 800268e:	bf00      	nop
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>:
void PID::SetTunings(double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	61f8      	str	r0, [r7, #28]
 80026a0:	ed87 0b04 	vstr	d0, [r7, #16]
 80026a4:	ed87 1b02 	vstr	d1, [r7, #8]
 80026a8:	ed87 2b00 	vstr	d2, [r7]
 80026ac:	460b      	mov	r3, r1
 80026ae:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026bc:	f7fe fa0e 	bl	8000adc <__aeabi_dcmplt>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 8089 	bne.w	80027da <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026d4:	f7fe fa02 	bl	8000adc <__aeabi_dcmplt>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d17d      	bne.n	80027da <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026ea:	f7fe f9f7 	bl	8000adc <__aeabi_dcmplt>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d172      	bne.n	80027da <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	_pOn    = POn;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	7efa      	ldrb	r2, [r7, #27]
 80026f8:	709a      	strb	r2, [r3, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80026fa:	7efb      	ldrb	r3, [r7, #27]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	701a      	strb	r2, [r3, #0]

	_dispKp = Kp;
 800270c:	69f9      	ldr	r1, [r7, #28]
 800270e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002712:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_dispKi = Ki;
 8002716:	69f9      	ldr	r1, [r7, #28]
 8002718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800271c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_dispKd = Kd;
 8002720:	69f9      	ldr	r1, [r7, #28]
 8002722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002726:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)_sampleTime) / 1000;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd fee8 	bl	8000504 <__aeabi_ui2d>
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	4b2a      	ldr	r3, [pc, #168]	; (80027e4 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x14c>)
 800273a:	f7fe f887 	bl	800084c <__aeabi_ddiv>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	_kp = Kp;
 8002746:	69f9      	ldr	r1, [r7, #28]
 8002748:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800274c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	_ki = Ki * SampleTimeInSec;
 8002750:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002754:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002758:	f7fd ff4e 	bl	80005f8 <__aeabi_dmul>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	69f9      	ldr	r1, [r7, #28]
 8002762:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	_kd = Kd / SampleTimeInSec;
 8002766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800276a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800276e:	f7fe f86d 	bl	800084c <__aeabi_ddiv>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	69f9      	ldr	r1, [r7, #28]
 8002778:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (_controllerDirection == _PID_CD_REVERSE)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	78db      	ldrb	r3, [r3, #3]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d12b      	bne.n	80027dc <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
	{
		
		_kp = (0 - _kp);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800278a:	f04f 0000 	mov.w	r0, #0
 800278e:	f04f 0100 	mov.w	r1, #0
 8002792:	f7fd fd79 	bl	8000288 <__aeabi_dsub>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	69f9      	ldr	r1, [r7, #28]
 800279c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80027a6:	f04f 0000 	mov.w	r0, #0
 80027aa:	f04f 0100 	mov.w	r1, #0
 80027ae:	f7fd fd6b 	bl	8000288 <__aeabi_dsub>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	69f9      	ldr	r1, [r7, #28]
 80027b8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80027c2:	f04f 0000 	mov.w	r0, #0
 80027c6:	f04f 0100 	mov.w	r1, #0
 80027ca:	f7fd fd5d 	bl	8000288 <__aeabi_dsub>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	69f9      	ldr	r1, [r7, #28]
 80027d4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80027d8:	e000      	b.n	80027dc <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
		return;
 80027da:	bf00      	nop
		
	}
	
}
 80027dc:	3728      	adds	r7, #40	; 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	408f4000 	.word	0x408f4000

080027e8 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	785b      	ldrb	r3, [r3, #1]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d02e      	beq.n	800285a <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	78db      	ldrb	r3, [r3, #3]
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	429a      	cmp	r2, r3
 8002804:	d029      	beq.n	800285a <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
	{
		
		_kp = (0 - _kp);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800280c:	f04f 0000 	mov.w	r0, #0
 8002810:	f04f 0100 	mov.w	r1, #0
 8002814:	f7fd fd38 	bl	8000288 <__aeabi_dsub>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002828:	f04f 0000 	mov.w	r0, #0
 800282c:	f04f 0100 	mov.w	r1, #0
 8002830:	f7fd fd2a 	bl	8000288 <__aeabi_dsub>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002844:	f04f 0000 	mov.w	r0, #0
 8002848:	f04f 0100 	mov.w	r1, #0
 800284c:	f7fd fd1c 	bl	8000288 <__aeabi_dsub>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	_controllerDirection = Direction;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	70da      	strb	r2, [r3, #3]
	
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002872:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <HAL_Init+0x3c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <HAL_Init+0x3c>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287e:	2003      	movs	r0, #3
 8002880:	f000 f962 	bl	8002b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002884:	2000      	movs	r0, #0
 8002886:	f000 f80f 	bl	80028a8 <HAL_InitTick>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	71fb      	strb	r3, [r7, #7]
 8002894:	e001      	b.n	800289a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002896:	f7fe ff7f 	bl	8001798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800289a:	79fb      	ldrb	r3, [r7, #7]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40022000 	.word	0x40022000

080028a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028b4:	4b17      	ldr	r3, [pc, #92]	; (8002914 <HAL_InitTick+0x6c>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d023      	beq.n	8002904 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028bc:	4b16      	ldr	r3, [pc, #88]	; (8002918 <HAL_InitTick+0x70>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <HAL_InitTick+0x6c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	4619      	mov	r1, r3
 80028c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f96d 	bl	8002bb2 <HAL_SYSTICK_Config>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b0f      	cmp	r3, #15
 80028e2:	d809      	bhi.n	80028f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e4:	2200      	movs	r2, #0
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ec:	f000 f937 	bl	8002b5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028f0:	4a0a      	ldr	r2, [pc, #40]	; (800291c <HAL_InitTick+0x74>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e007      	b.n	8002908 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
 80028fc:	e004      	b.n	8002908 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
 8002902:	e001      	b.n	8002908 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000038 	.word	0x20000038
 8002918:	20000030 	.word	0x20000030
 800291c:	20000034 	.word	0x20000034

08002920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_IncTick+0x20>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_IncTick+0x24>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4413      	add	r3, r2
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_IncTick+0x24>)
 8002932:	6013      	str	r3, [r2, #0]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20000038 	.word	0x20000038
 8002944:	2000061c 	.word	0x2000061c

08002948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return uwTick;
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <HAL_GetTick+0x14>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	2000061c 	.word	0x2000061c

08002960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff ffee 	bl	8002948 <HAL_GetTick>
 800296c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d005      	beq.n	8002986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_Delay+0x44>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002986:	bf00      	nop
 8002988:	f7ff ffde 	bl	8002948 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	429a      	cmp	r2, r3
 8002996:	d8f7      	bhi.n	8002988 <HAL_Delay+0x28>
  {
  }
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000038 	.word	0x20000038

080029a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <__NVIC_SetPriorityGrouping+0x44>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c4:	4013      	ands	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029da:	4a04      	ldr	r2, [pc, #16]	; (80029ec <__NVIC_SetPriorityGrouping+0x44>)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	60d3      	str	r3, [r2, #12]
}
 80029e0:	bf00      	nop
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <__NVIC_GetPriorityGrouping+0x18>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	0a1b      	lsrs	r3, r3, #8
 80029fa:	f003 0307 	and.w	r3, r3, #7
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	db0b      	blt.n	8002a36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	f003 021f 	and.w	r2, r3, #31
 8002a24:	4907      	ldr	r1, [pc, #28]	; (8002a44 <__NVIC_EnableIRQ+0x38>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	e000e100 	.word	0xe000e100

08002a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	6039      	str	r1, [r7, #0]
 8002a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	db0a      	blt.n	8002a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	490c      	ldr	r1, [pc, #48]	; (8002a94 <__NVIC_SetPriority+0x4c>)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	0112      	lsls	r2, r2, #4
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a70:	e00a      	b.n	8002a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4908      	ldr	r1, [pc, #32]	; (8002a98 <__NVIC_SetPriority+0x50>)
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	3b04      	subs	r3, #4
 8002a80:	0112      	lsls	r2, r2, #4
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	440b      	add	r3, r1
 8002a86:	761a      	strb	r2, [r3, #24]
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000e100 	.word	0xe000e100
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b089      	sub	sp, #36	; 0x24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f1c3 0307 	rsb	r3, r3, #7
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	bf28      	it	cs
 8002aba:	2304      	movcs	r3, #4
 8002abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d902      	bls.n	8002acc <NVIC_EncodePriority+0x30>
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3b03      	subs	r3, #3
 8002aca:	e000      	b.n	8002ace <NVIC_EncodePriority+0x32>
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43da      	mvns	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	401a      	ands	r2, r3
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	fa01 f303 	lsl.w	r3, r1, r3
 8002aee:	43d9      	mvns	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af4:	4313      	orrs	r3, r2
         );
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3724      	adds	r7, #36	; 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b14:	d301      	bcc.n	8002b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b16:	2301      	movs	r3, #1
 8002b18:	e00f      	b.n	8002b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <SysTick_Config+0x40>)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b22:	210f      	movs	r1, #15
 8002b24:	f04f 30ff 	mov.w	r0, #4294967295
 8002b28:	f7ff ff8e 	bl	8002a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <SysTick_Config+0x40>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b32:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <SysTick_Config+0x40>)
 8002b34:	2207      	movs	r2, #7
 8002b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	e000e010 	.word	0xe000e010

08002b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff ff29 	bl	80029a8 <__NVIC_SetPriorityGrouping>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b70:	f7ff ff3e 	bl	80029f0 <__NVIC_GetPriorityGrouping>
 8002b74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	6978      	ldr	r0, [r7, #20]
 8002b7c:	f7ff ff8e 	bl	8002a9c <NVIC_EncodePriority>
 8002b80:	4602      	mov	r2, r0
 8002b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff5d 	bl	8002a48 <__NVIC_SetPriority>
}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff31 	bl	8002a0c <__NVIC_EnableIRQ>
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ffa2 	bl	8002b04 <SysTick_Config>
 8002bc0:	4603      	mov	r3, r0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bda:	e154      	b.n	8002e86 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	2101      	movs	r1, #1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	fa01 f303 	lsl.w	r3, r1, r3
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8146 	beq.w	8002e80 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d005      	beq.n	8002c0c <HAL_GPIO_Init+0x40>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d130      	bne.n	8002c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c42:	2201      	movs	r2, #1
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 0201 	and.w	r2, r3, #1
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d017      	beq.n	8002caa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	2203      	movs	r2, #3
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d123      	bne.n	8002cfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	08da      	lsrs	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3208      	adds	r2, #8
 8002cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	6939      	ldr	r1, [r7, #16]
 8002cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0203 	and.w	r2, r3, #3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80a0 	beq.w	8002e80 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d40:	4b58      	ldr	r3, [pc, #352]	; (8002ea4 <HAL_GPIO_Init+0x2d8>)
 8002d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d44:	4a57      	ldr	r2, [pc, #348]	; (8002ea4 <HAL_GPIO_Init+0x2d8>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6613      	str	r3, [r2, #96]	; 0x60
 8002d4c:	4b55      	ldr	r3, [pc, #340]	; (8002ea4 <HAL_GPIO_Init+0x2d8>)
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d58:	4a53      	ldr	r2, [pc, #332]	; (8002ea8 <HAL_GPIO_Init+0x2dc>)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	220f      	movs	r2, #15
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d82:	d019      	beq.n	8002db8 <HAL_GPIO_Init+0x1ec>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a49      	ldr	r2, [pc, #292]	; (8002eac <HAL_GPIO_Init+0x2e0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d013      	beq.n	8002db4 <HAL_GPIO_Init+0x1e8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a48      	ldr	r2, [pc, #288]	; (8002eb0 <HAL_GPIO_Init+0x2e4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00d      	beq.n	8002db0 <HAL_GPIO_Init+0x1e4>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a47      	ldr	r2, [pc, #284]	; (8002eb4 <HAL_GPIO_Init+0x2e8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d007      	beq.n	8002dac <HAL_GPIO_Init+0x1e0>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a46      	ldr	r2, [pc, #280]	; (8002eb8 <HAL_GPIO_Init+0x2ec>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d101      	bne.n	8002da8 <HAL_GPIO_Init+0x1dc>
 8002da4:	2304      	movs	r3, #4
 8002da6:	e008      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002da8:	2307      	movs	r3, #7
 8002daa:	e006      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002dac:	2303      	movs	r3, #3
 8002dae:	e004      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e002      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002db8:	2300      	movs	r3, #0
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	f002 0203 	and.w	r2, r2, #3
 8002dc0:	0092      	lsls	r2, r2, #2
 8002dc2:	4093      	lsls	r3, r2
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dca:	4937      	ldr	r1, [pc, #220]	; (8002ea8 <HAL_GPIO_Init+0x2dc>)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dd8:	4b38      	ldr	r3, [pc, #224]	; (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dfc:	4a2f      	ldr	r2, [pc, #188]	; (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e02:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e26:	4a25      	ldr	r2, [pc, #148]	; (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e2c:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e50:	4a1a      	ldr	r2, [pc, #104]	; (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e56:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4013      	ands	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e7a:	4a10      	ldr	r2, [pc, #64]	; (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	3301      	adds	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f47f aea3 	bne.w	8002bdc <HAL_GPIO_Init+0x10>
  }
}
 8002e96:	bf00      	nop
 8002e98:	bf00      	nop
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	48000400 	.word	0x48000400
 8002eb0:	48000800 	.word	0x48000800
 8002eb4:	48000c00 	.word	0x48000c00
 8002eb8:	48001000 	.word	0x48001000
 8002ebc:	40010400 	.word	0x40010400

08002ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ed0:	787b      	ldrb	r3, [r7, #1]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ed6:	887a      	ldrh	r2, [r7, #2]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002edc:	e002      	b.n	8002ee4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d006      	beq.n	8002f14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f06:	4a05      	ldr	r2, [pc, #20]	; (8002f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f08:	88fb      	ldrh	r3, [r7, #6]
 8002f0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe fa4e 	bl	80013b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40010400 	.word	0x40010400

08002f20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40007000 	.word	0x40007000

08002f3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f4a:	d130      	bne.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f4c:	4b23      	ldr	r3, [pc, #140]	; (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f58:	d038      	beq.n	8002fcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f5a:	4b20      	ldr	r3, [pc, #128]	; (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f62:	4a1e      	ldr	r2, [pc, #120]	; (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2232      	movs	r2, #50	; 0x32
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0c9b      	lsrs	r3, r3, #18
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f80:	e002      	b.n	8002f88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f88:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f94:	d102      	bne.n	8002f9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f2      	bne.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa8:	d110      	bne.n	8002fcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e00f      	b.n	8002fce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fba:	d007      	beq.n	8002fcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fc4:	4a05      	ldr	r2, [pc, #20]	; (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40007000 	.word	0x40007000
 8002fe0:	20000030 	.word	0x20000030
 8002fe4:	431bde83 	.word	0x431bde83

08002fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f000 bc02 	b.w	8003800 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffc:	4b96      	ldr	r3, [pc, #600]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003006:	4b94      	ldr	r3, [pc, #592]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80e4 	beq.w	80031e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d007      	beq.n	8003034 <HAL_RCC_OscConfig+0x4c>
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b0c      	cmp	r3, #12
 8003028:	f040 808b 	bne.w	8003142 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b01      	cmp	r3, #1
 8003030:	f040 8087 	bne.w	8003142 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003034:	4b88      	ldr	r3, [pc, #544]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_RCC_OscConfig+0x64>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e3d9      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1a      	ldr	r2, [r3, #32]
 8003050:	4b81      	ldr	r3, [pc, #516]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d004      	beq.n	8003066 <HAL_RCC_OscConfig+0x7e>
 800305c:	4b7e      	ldr	r3, [pc, #504]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003064:	e005      	b.n	8003072 <HAL_RCC_OscConfig+0x8a>
 8003066:	4b7c      	ldr	r3, [pc, #496]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003072:	4293      	cmp	r3, r2
 8003074:	d223      	bcs.n	80030be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fd8c 	bl	8003b98 <RCC_SetFlashLatencyFromMSIRange>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e3ba      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800308a:	4b73      	ldr	r3, [pc, #460]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a72      	ldr	r2, [pc, #456]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003090:	f043 0308 	orr.w	r3, r3, #8
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b70      	ldr	r3, [pc, #448]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	496d      	ldr	r1, [pc, #436]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a8:	4b6b      	ldr	r3, [pc, #428]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	4968      	ldr	r1, [pc, #416]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
 80030bc:	e025      	b.n	800310a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030be:	4b66      	ldr	r3, [pc, #408]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a65      	ldr	r2, [pc, #404]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030c4:	f043 0308 	orr.w	r3, r3, #8
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4960      	ldr	r1, [pc, #384]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030dc:	4b5e      	ldr	r3, [pc, #376]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	495b      	ldr	r1, [pc, #364]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fd4c 	bl	8003b98 <RCC_SetFlashLatencyFromMSIRange>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e37a      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800310a:	f000 fc81 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 800310e:	4602      	mov	r2, r0
 8003110:	4b51      	ldr	r3, [pc, #324]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	4950      	ldr	r1, [pc, #320]	; (800325c <HAL_RCC_OscConfig+0x274>)
 800311c:	5ccb      	ldrb	r3, [r1, r3]
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	4a4e      	ldr	r2, [pc, #312]	; (8003260 <HAL_RCC_OscConfig+0x278>)
 8003128:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800312a:	4b4e      	ldr	r3, [pc, #312]	; (8003264 <HAL_RCC_OscConfig+0x27c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fbba 	bl	80028a8 <HAL_InitTick>
 8003134:	4603      	mov	r3, r0
 8003136:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d052      	beq.n	80031e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	e35e      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d032      	beq.n	80031b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800314a:	4b43      	ldr	r3, [pc, #268]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a42      	ldr	r2, [pc, #264]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003156:	f7ff fbf7 	bl	8002948 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800315e:	f7ff fbf3 	bl	8002948 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e347      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003170:	4b39      	ldr	r3, [pc, #228]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800317c:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a35      	ldr	r2, [pc, #212]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003182:	f043 0308 	orr.w	r3, r3, #8
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b33      	ldr	r3, [pc, #204]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4930      	ldr	r1, [pc, #192]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800319a:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	492b      	ldr	r1, [pc, #172]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
 80031ae:	e01a      	b.n	80031e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031b0:	4b29      	ldr	r3, [pc, #164]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a28      	ldr	r2, [pc, #160]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031bc:	f7ff fbc4 	bl	8002948 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031c4:	f7ff fbc0 	bl	8002948 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e314      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x1dc>
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d073      	beq.n	80032da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_OscConfig+0x21c>
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	d10e      	bne.n	800321c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d10b      	bne.n	800321c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d063      	beq.n	80032d8 <HAL_RCC_OscConfig+0x2f0>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d15f      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e2f1      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003224:	d106      	bne.n	8003234 <HAL_RCC_OscConfig+0x24c>
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a0b      	ldr	r2, [pc, #44]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e025      	b.n	8003280 <HAL_RCC_OscConfig+0x298>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800323c:	d114      	bne.n	8003268 <HAL_RCC_OscConfig+0x280>
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a05      	ldr	r2, [pc, #20]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b03      	ldr	r3, [pc, #12]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a02      	ldr	r2, [pc, #8]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e013      	b.n	8003280 <HAL_RCC_OscConfig+0x298>
 8003258:	40021000 	.word	0x40021000
 800325c:	08009c28 	.word	0x08009c28
 8003260:	20000030 	.word	0x20000030
 8003264:	20000034 	.word	0x20000034
 8003268:	4ba0      	ldr	r3, [pc, #640]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a9f      	ldr	r2, [pc, #636]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b9d      	ldr	r3, [pc, #628]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a9c      	ldr	r2, [pc, #624]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7ff fb5e 	bl	8002948 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003290:	f7ff fb5a 	bl	8002948 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e2ae      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032a2:	4b92      	ldr	r3, [pc, #584]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x2a8>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7ff fb4a 	bl	8002948 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b8:	f7ff fb46 	bl	8002948 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e29a      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ca:	4b88      	ldr	r3, [pc, #544]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x2d0>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d060      	beq.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_OscConfig+0x310>
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d119      	bne.n	8003326 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d116      	bne.n	8003326 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f8:	4b7c      	ldr	r3, [pc, #496]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_OscConfig+0x328>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e277      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003310:	4b76      	ldr	r3, [pc, #472]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	4973      	ldr	r1, [pc, #460]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003324:	e040      	b.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d023      	beq.n	8003376 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332e:	4b6f      	ldr	r3, [pc, #444]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6e      	ldr	r2, [pc, #440]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7ff fb05 	bl	8002948 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003342:	f7ff fb01 	bl	8002948 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e255      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003354:	4b65      	ldr	r3, [pc, #404]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b62      	ldr	r3, [pc, #392]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	495f      	ldr	r1, [pc, #380]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]
 8003374:	e018      	b.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003376:	4b5d      	ldr	r3, [pc, #372]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a5c      	ldr	r2, [pc, #368]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 800337c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7ff fae1 	bl	8002948 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338a:	f7ff fadd 	bl	8002948 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e231      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800339c:	4b53      	ldr	r3, [pc, #332]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f0      	bne.n	800338a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d03c      	beq.n	800342e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033bc:	4b4b      	ldr	r3, [pc, #300]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80033be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c2:	4a4a      	ldr	r2, [pc, #296]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7ff fabc 	bl	8002948 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d4:	f7ff fab8 	bl	8002948 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e20c      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80033e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ef      	beq.n	80033d4 <HAL_RCC_OscConfig+0x3ec>
 80033f4:	e01b      	b.n	800342e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f6:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80033f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fc:	4a3b      	ldr	r2, [pc, #236]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7ff fa9f 	bl	8002948 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340e:	f7ff fa9b 	bl	8002948 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e1ef      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003420:	4b32      	ldr	r3, [pc, #200]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ef      	bne.n	800340e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80a6 	beq.w	8003588 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343c:	2300      	movs	r3, #0
 800343e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003440:	4b2a      	ldr	r3, [pc, #168]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	4a26      	ldr	r2, [pc, #152]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003456:	6593      	str	r3, [r2, #88]	; 0x58
 8003458:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003464:	2301      	movs	r3, #1
 8003466:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <HAL_RCC_OscConfig+0x508>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d118      	bne.n	80034a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003474:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <HAL_RCC_OscConfig+0x508>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <HAL_RCC_OscConfig+0x508>)
 800347a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003480:	f7ff fa62 	bl	8002948 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003488:	f7ff fa5e 	bl	8002948 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e1b2      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <HAL_RCC_OscConfig+0x508>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d108      	bne.n	80034c0 <HAL_RCC_OscConfig+0x4d8>
 80034ae:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034be:	e029      	b.n	8003514 <HAL_RCC_OscConfig+0x52c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d115      	bne.n	80034f4 <HAL_RCC_OscConfig+0x50c>
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	4a07      	ldr	r2, [pc, #28]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80034d0:	f043 0304 	orr.w	r3, r3, #4
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	4a03      	ldr	r2, [pc, #12]	; (80034ec <HAL_RCC_OscConfig+0x504>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034e8:	e014      	b.n	8003514 <HAL_RCC_OscConfig+0x52c>
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40007000 	.word	0x40007000
 80034f4:	4b9a      	ldr	r3, [pc, #616]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fa:	4a99      	ldr	r2, [pc, #612]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003504:	4b96      	ldr	r3, [pc, #600]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	4a95      	ldr	r2, [pc, #596]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d016      	beq.n	800354a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7ff fa14 	bl	8002948 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003522:	e00a      	b.n	800353a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7ff fa10 	bl	8002948 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e162      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353a:	4b89      	ldr	r3, [pc, #548]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0ed      	beq.n	8003524 <HAL_RCC_OscConfig+0x53c>
 8003548:	e015      	b.n	8003576 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354a:	f7ff f9fd 	bl	8002948 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003550:	e00a      	b.n	8003568 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f7ff f9f9 	bl	8002948 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003560:	4293      	cmp	r3, r2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e14b      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003568:	4b7d      	ldr	r3, [pc, #500]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ed      	bne.n	8003552 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003576:	7ffb      	ldrb	r3, [r7, #31]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d105      	bne.n	8003588 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357c:	4b78      	ldr	r3, [pc, #480]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	4a77      	ldr	r2, [pc, #476]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 8003582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003586:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d03c      	beq.n	800360e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01c      	beq.n	80035d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800359c:	4b70      	ldr	r3, [pc, #448]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 800359e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035a2:	4a6f      	ldr	r2, [pc, #444]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7ff f9cc 	bl	8002948 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035b4:	f7ff f9c8 	bl	8002948 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e11c      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035c6:	4b66      	ldr	r3, [pc, #408]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 80035c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ef      	beq.n	80035b4 <HAL_RCC_OscConfig+0x5cc>
 80035d4:	e01b      	b.n	800360e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035d6:	4b62      	ldr	r3, [pc, #392]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 80035d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035dc:	4a60      	ldr	r2, [pc, #384]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7ff f9af 	bl	8002948 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ee:	f7ff f9ab 	bl	8002948 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e0ff      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003600:	4b57      	ldr	r3, [pc, #348]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 8003602:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ef      	bne.n	80035ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80f3 	beq.w	80037fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	2b02      	cmp	r3, #2
 800361e:	f040 80c9 	bne.w	80037b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003622:	4b4f      	ldr	r3, [pc, #316]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0203 	and.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	429a      	cmp	r2, r3
 8003634:	d12c      	bne.n	8003690 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	3b01      	subs	r3, #1
 8003642:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d123      	bne.n	8003690 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003652:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d11b      	bne.n	8003690 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d113      	bne.n	8003690 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	3b01      	subs	r3, #1
 8003676:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d109      	bne.n	8003690 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	3b01      	subs	r3, #1
 800368a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d06b      	beq.n	8003768 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d062      	beq.n	800375c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003696:	4b32      	ldr	r3, [pc, #200]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e0ac      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036a6:	4b2e      	ldr	r3, [pc, #184]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a2d      	ldr	r2, [pc, #180]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 80036ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036b2:	f7ff f949 	bl	8002948 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ba:	f7ff f945 	bl	8002948 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e099      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036cc:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f0      	bne.n	80036ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d8:	4b21      	ldr	r3, [pc, #132]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	4b21      	ldr	r3, [pc, #132]	; (8003764 <HAL_RCC_OscConfig+0x77c>)
 80036de:	4013      	ands	r3, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036e8:	3a01      	subs	r2, #1
 80036ea:	0112      	lsls	r2, r2, #4
 80036ec:	4311      	orrs	r1, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036f2:	0212      	lsls	r2, r2, #8
 80036f4:	4311      	orrs	r1, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036fa:	0852      	lsrs	r2, r2, #1
 80036fc:	3a01      	subs	r2, #1
 80036fe:	0552      	lsls	r2, r2, #21
 8003700:	4311      	orrs	r1, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003706:	0852      	lsrs	r2, r2, #1
 8003708:	3a01      	subs	r2, #1
 800370a:	0652      	lsls	r2, r2, #25
 800370c:	4311      	orrs	r1, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003712:	06d2      	lsls	r2, r2, #27
 8003714:	430a      	orrs	r2, r1
 8003716:	4912      	ldr	r1, [pc, #72]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 8003718:	4313      	orrs	r3, r2
 800371a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800371c:	4b10      	ldr	r3, [pc, #64]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0f      	ldr	r2, [pc, #60]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 8003722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003726:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003728:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a0c      	ldr	r2, [pc, #48]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 800372e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003732:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003734:	f7ff f908 	bl	8002948 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373c:	f7ff f904 	bl	8002948 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e058      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374e:	4b04      	ldr	r3, [pc, #16]	; (8003760 <HAL_RCC_OscConfig+0x778>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800375a:	e050      	b.n	80037fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e04f      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
 8003760:	40021000 	.word	0x40021000
 8003764:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003768:	4b27      	ldr	r3, [pc, #156]	; (8003808 <HAL_RCC_OscConfig+0x820>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d144      	bne.n	80037fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003774:	4b24      	ldr	r3, [pc, #144]	; (8003808 <HAL_RCC_OscConfig+0x820>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a23      	ldr	r2, [pc, #140]	; (8003808 <HAL_RCC_OscConfig+0x820>)
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003780:	4b21      	ldr	r3, [pc, #132]	; (8003808 <HAL_RCC_OscConfig+0x820>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a20      	ldr	r2, [pc, #128]	; (8003808 <HAL_RCC_OscConfig+0x820>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800378c:	f7ff f8dc 	bl	8002948 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7ff f8d8 	bl	8002948 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e02c      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a6:	4b18      	ldr	r3, [pc, #96]	; (8003808 <HAL_RCC_OscConfig+0x820>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x7ac>
 80037b2:	e024      	b.n	80037fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d01f      	beq.n	80037fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b13      	ldr	r3, [pc, #76]	; (8003808 <HAL_RCC_OscConfig+0x820>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a12      	ldr	r2, [pc, #72]	; (8003808 <HAL_RCC_OscConfig+0x820>)
 80037c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7ff f8bf 	bl	8002948 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ce:	f7ff f8bb 	bl	8002948 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e00f      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e0:	4b09      	ldr	r3, [pc, #36]	; (8003808 <HAL_RCC_OscConfig+0x820>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f0      	bne.n	80037ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_OscConfig+0x820>)
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	4905      	ldr	r1, [pc, #20]	; (8003808 <HAL_RCC_OscConfig+0x820>)
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_RCC_OscConfig+0x824>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	60cb      	str	r3, [r1, #12]
 80037f8:	e001      	b.n	80037fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40021000 	.word	0x40021000
 800380c:	feeefffc 	.word	0xfeeefffc

08003810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0e7      	b.n	80039f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003824:	4b75      	ldr	r3, [pc, #468]	; (80039fc <HAL_RCC_ClockConfig+0x1ec>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d910      	bls.n	8003854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b72      	ldr	r3, [pc, #456]	; (80039fc <HAL_RCC_ClockConfig+0x1ec>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 0207 	bic.w	r2, r3, #7
 800383a:	4970      	ldr	r1, [pc, #448]	; (80039fc <HAL_RCC_ClockConfig+0x1ec>)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003842:	4b6e      	ldr	r3, [pc, #440]	; (80039fc <HAL_RCC_ClockConfig+0x1ec>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0cf      	b.n	80039f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d010      	beq.n	8003882 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	4b66      	ldr	r3, [pc, #408]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386c:	429a      	cmp	r2, r3
 800386e:	d908      	bls.n	8003882 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b63      	ldr	r3, [pc, #396]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4960      	ldr	r1, [pc, #384]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d04c      	beq.n	8003928 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b03      	cmp	r3, #3
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003896:	4b5a      	ldr	r3, [pc, #360]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d121      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e0a6      	b.n	80039f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ae:	4b54      	ldr	r3, [pc, #336]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d115      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e09a      	b.n	80039f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038c6:	4b4e      	ldr	r3, [pc, #312]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e08e      	b.n	80039f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d6:	4b4a      	ldr	r3, [pc, #296]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e086      	b.n	80039f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038e6:	4b46      	ldr	r3, [pc, #280]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4943      	ldr	r1, [pc, #268]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f8:	f7ff f826 	bl	8002948 <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003900:	f7ff f822 	bl	8002948 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e06e      	b.n	80039f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	4b3a      	ldr	r3, [pc, #232]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 020c 	and.w	r2, r3, #12
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	429a      	cmp	r2, r3
 8003926:	d1eb      	bne.n	8003900 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d010      	beq.n	8003956 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003940:	429a      	cmp	r2, r3
 8003942:	d208      	bcs.n	8003956 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003944:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	492b      	ldr	r1, [pc, #172]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003956:	4b29      	ldr	r3, [pc, #164]	; (80039fc <HAL_RCC_ClockConfig+0x1ec>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d210      	bcs.n	8003986 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003964:	4b25      	ldr	r3, [pc, #148]	; (80039fc <HAL_RCC_ClockConfig+0x1ec>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 0207 	bic.w	r2, r3, #7
 800396c:	4923      	ldr	r1, [pc, #140]	; (80039fc <HAL_RCC_ClockConfig+0x1ec>)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003974:	4b21      	ldr	r3, [pc, #132]	; (80039fc <HAL_RCC_ClockConfig+0x1ec>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d001      	beq.n	8003986 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e036      	b.n	80039f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003992:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	4918      	ldr	r1, [pc, #96]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d009      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b0:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	4910      	ldr	r1, [pc, #64]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039c4:	f000 f824 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 80039c8:	4602      	mov	r2, r0
 80039ca:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <HAL_RCC_ClockConfig+0x1f0>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	490b      	ldr	r1, [pc, #44]	; (8003a04 <HAL_RCC_ClockConfig+0x1f4>)
 80039d6:	5ccb      	ldrb	r3, [r1, r3]
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	fa22 f303 	lsr.w	r3, r2, r3
 80039e0:	4a09      	ldr	r2, [pc, #36]	; (8003a08 <HAL_RCC_ClockConfig+0x1f8>)
 80039e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <HAL_RCC_ClockConfig+0x1fc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe ff5d 	bl	80028a8 <HAL_InitTick>
 80039ee:	4603      	mov	r3, r0
 80039f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80039f2:	7afb      	ldrb	r3, [r7, #11]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40022000 	.word	0x40022000
 8003a00:	40021000 	.word	0x40021000
 8003a04:	08009c28 	.word	0x08009c28
 8003a08:	20000030 	.word	0x20000030
 8003a0c:	20000034 	.word	0x20000034

08003a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b089      	sub	sp, #36	; 0x24
 8003a14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a1e:	4b3e      	ldr	r3, [pc, #248]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a28:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x34>
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d121      	bne.n	8003a82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d11e      	bne.n	8003a82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a44:	4b34      	ldr	r3, [pc, #208]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d107      	bne.n	8003a60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a50:	4b31      	ldr	r3, [pc, #196]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	e005      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a60:	4b2d      	ldr	r3, [pc, #180]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a6c:	4a2b      	ldr	r2, [pc, #172]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10d      	bne.n	8003a98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a80:	e00a      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d102      	bne.n	8003a8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a88:	4b25      	ldr	r3, [pc, #148]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	e004      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a94:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	2b0c      	cmp	r3, #12
 8003a9c:	d134      	bne.n	8003b08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d003      	beq.n	8003ab6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d003      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0xac>
 8003ab4:	e005      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ab6:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ab8:	617b      	str	r3, [r7, #20]
      break;
 8003aba:	e005      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003abc:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x114>)
 8003abe:	617b      	str	r3, [r7, #20]
      break;
 8003ac0:	e002      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	617b      	str	r3, [r7, #20]
      break;
 8003ac6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ac8:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	091b      	lsrs	r3, r3, #4
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	fb03 f202 	mul.w	r2, r3, r2
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	0e5b      	lsrs	r3, r3, #25
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	3301      	adds	r3, #1
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b08:	69bb      	ldr	r3, [r7, #24]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3724      	adds	r7, #36	; 0x24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	08009c40 	.word	0x08009c40
 8003b20:	00f42400 	.word	0x00f42400
 8003b24:	007a1200 	.word	0x007a1200

08003b28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b2c:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000030 	.word	0x20000030

08003b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b44:	f7ff fff0 	bl	8003b28 <HAL_RCC_GetHCLKFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	4904      	ldr	r1, [pc, #16]	; (8003b68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	08009c38 	.word	0x08009c38

08003b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b70:	f7ff ffda 	bl	8003b28 <HAL_RCC_GetHCLKFreq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	0adb      	lsrs	r3, r3, #11
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	4904      	ldr	r1, [pc, #16]	; (8003b94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b82:	5ccb      	ldrb	r3, [r1, r3]
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	08009c38 	.word	0x08009c38

08003b98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ba4:	4b2a      	ldr	r3, [pc, #168]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bb0:	f7ff f9b6 	bl	8002f20 <HAL_PWREx_GetVoltageRange>
 8003bb4:	6178      	str	r0, [r7, #20]
 8003bb6:	e014      	b.n	8003be2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bb8:	4b25      	ldr	r3, [pc, #148]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	4a24      	ldr	r2, [pc, #144]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc4:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bd0:	f7ff f9a6 	bl	8002f20 <HAL_PWREx_GetVoltageRange>
 8003bd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bd6:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	4a1d      	ldr	r2, [pc, #116]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be8:	d10b      	bne.n	8003c02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b80      	cmp	r3, #128	; 0x80
 8003bee:	d919      	bls.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2ba0      	cmp	r3, #160	; 0xa0
 8003bf4:	d902      	bls.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	e013      	b.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	e010      	b.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b80      	cmp	r3, #128	; 0x80
 8003c06:	d902      	bls.n	8003c0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c08:	2303      	movs	r3, #3
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	e00a      	b.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b80      	cmp	r3, #128	; 0x80
 8003c12:	d102      	bne.n	8003c1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c14:	2302      	movs	r3, #2
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	e004      	b.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b70      	cmp	r3, #112	; 0x70
 8003c1e:	d101      	bne.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c20:	2301      	movs	r3, #1
 8003c22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c24:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 0207 	bic.w	r2, r3, #7
 8003c2c:	4909      	ldr	r1, [pc, #36]	; (8003c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c34:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d001      	beq.n	8003c46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40022000 	.word	0x40022000

08003c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c60:	2300      	movs	r3, #0
 8003c62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c64:	2300      	movs	r3, #0
 8003c66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d031      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c7c:	d01a      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003c7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c82:	d814      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c8c:	d10f      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003c8e:	4b5d      	ldr	r3, [pc, #372]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	4a5c      	ldr	r2, [pc, #368]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c9a:	e00c      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fa22 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cac:	e003      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb6:	7cfb      	ldrb	r3, [r7, #19]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10b      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cbc:	4b51      	ldr	r3, [pc, #324]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	494e      	ldr	r1, [pc, #312]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cd2:	e001      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 809e 	beq.w	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cea:	4b46      	ldr	r3, [pc, #280]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00d      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d00:	4b40      	ldr	r3, [pc, #256]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	4a3f      	ldr	r2, [pc, #252]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d0c:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d1c:	4b3a      	ldr	r3, [pc, #232]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a39      	ldr	r2, [pc, #228]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d28:	f7fe fe0e 	bl	8002948 <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d2e:	e009      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d30:	f7fe fe0a 	bl	8002948 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d902      	bls.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	74fb      	strb	r3, [r7, #19]
        break;
 8003d42:	e005      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d44:	4b30      	ldr	r3, [pc, #192]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ef      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003d50:	7cfb      	ldrb	r3, [r7, #19]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d15a      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d56:	4b2b      	ldr	r3, [pc, #172]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01e      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d019      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d72:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d7e:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	4a1f      	ldr	r2, [pc, #124]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d9e:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d016      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7fe fdca 	bl	8002948 <HAL_GetTick>
 8003db4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db6:	e00b      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db8:	f7fe fdc6 	bl	8002948 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d902      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	74fb      	strb	r3, [r7, #19]
            break;
 8003dce:	e006      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0ec      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003dde:	7cfb      	ldrb	r3, [r7, #19]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de4:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	4904      	ldr	r1, [pc, #16]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dfa:	e009      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	74bb      	strb	r3, [r7, #18]
 8003e00:	e006      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e10:	7c7b      	ldrb	r3, [r7, #17]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d105      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b8d      	ldr	r3, [pc, #564]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	4a8c      	ldr	r2, [pc, #560]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e2e:	4b87      	ldr	r3, [pc, #540]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f023 0203 	bic.w	r2, r3, #3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	4983      	ldr	r1, [pc, #524]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e50:	4b7e      	ldr	r3, [pc, #504]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f023 020c 	bic.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	497b      	ldr	r1, [pc, #492]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e72:	4b76      	ldr	r3, [pc, #472]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	4972      	ldr	r1, [pc, #456]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e94:	4b6d      	ldr	r3, [pc, #436]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	496a      	ldr	r1, [pc, #424]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eb6:	4b65      	ldr	r3, [pc, #404]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	4961      	ldr	r1, [pc, #388]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ed8:	4b5c      	ldr	r3, [pc, #368]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	4959      	ldr	r1, [pc, #356]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003efa:	4b54      	ldr	r3, [pc, #336]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	4950      	ldr	r1, [pc, #320]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f1c:	4b4b      	ldr	r3, [pc, #300]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	4948      	ldr	r1, [pc, #288]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f3e:	4b43      	ldr	r3, [pc, #268]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	493f      	ldr	r1, [pc, #252]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d028      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f60:	4b3a      	ldr	r3, [pc, #232]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6e:	4937      	ldr	r1, [pc, #220]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f80:	4b32      	ldr	r3, [pc, #200]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4a31      	ldr	r2, [pc, #196]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f8a:	60d3      	str	r3, [r2, #12]
 8003f8c:	e011      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f96:	d10c      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 f8a4 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003fae:	7cfb      	ldrb	r3, [r7, #19]
 8003fb0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d028      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fbe:	4b23      	ldr	r3, [pc, #140]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fcc:	491f      	ldr	r1, [pc, #124]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fdc:	d106      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fde:	4b1b      	ldr	r3, [pc, #108]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4a1a      	ldr	r2, [pc, #104]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fe8:	60d3      	str	r3, [r2, #12]
 8003fea:	e011      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f875 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02b      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402a:	4908      	ldr	r1, [pc, #32]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800403a:	d109      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4a02      	ldr	r2, [pc, #8]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004046:	60d3      	str	r3, [r2, #12]
 8004048:	e014      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800404a:	bf00      	nop
 800404c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004058:	d10c      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3304      	adds	r3, #4
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f000 f843 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800406a:	7cfb      	ldrb	r3, [r7, #19]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01c      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004086:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	4916      	ldr	r1, [pc, #88]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800409e:	d10c      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	2102      	movs	r1, #2
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f820 	bl	80040ec <RCCEx_PLLSAI1_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80040b6:	7cfb      	ldrb	r3, [r7, #19]
 80040b8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	4904      	ldr	r1, [pc, #16]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000

080040ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040fa:	4b74      	ldr	r3, [pc, #464]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d018      	beq.n	8004138 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004106:	4b71      	ldr	r3, [pc, #452]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0203 	and.w	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d10d      	bne.n	8004132 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
       ||
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800411e:	4b6b      	ldr	r3, [pc, #428]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
       ||
 800412e:	429a      	cmp	r2, r3
 8004130:	d047      	beq.n	80041c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
 8004136:	e044      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d018      	beq.n	8004172 <RCCEx_PLLSAI1_Config+0x86>
 8004140:	2b03      	cmp	r3, #3
 8004142:	d825      	bhi.n	8004190 <RCCEx_PLLSAI1_Config+0xa4>
 8004144:	2b01      	cmp	r3, #1
 8004146:	d002      	beq.n	800414e <RCCEx_PLLSAI1_Config+0x62>
 8004148:	2b02      	cmp	r3, #2
 800414a:	d009      	beq.n	8004160 <RCCEx_PLLSAI1_Config+0x74>
 800414c:	e020      	b.n	8004190 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800414e:	4b5f      	ldr	r3, [pc, #380]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d11d      	bne.n	8004196 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415e:	e01a      	b.n	8004196 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004160:	4b5a      	ldr	r3, [pc, #360]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004168:	2b00      	cmp	r3, #0
 800416a:	d116      	bne.n	800419a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004170:	e013      	b.n	800419a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004172:	4b56      	ldr	r3, [pc, #344]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800417e:	4b53      	ldr	r3, [pc, #332]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800418e:	e006      	b.n	800419e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      break;
 8004194:	e004      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004196:	bf00      	nop
 8004198:	e002      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800419e:	bf00      	nop
    }

    if(status == HAL_OK)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10d      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041a6:	4b49      	ldr	r3, [pc, #292]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6819      	ldr	r1, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	430b      	orrs	r3, r1
 80041bc:	4943      	ldr	r1, [pc, #268]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d17c      	bne.n	80042c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041c8:	4b40      	ldr	r3, [pc, #256]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a3f      	ldr	r2, [pc, #252]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d4:	f7fe fbb8 	bl	8002948 <HAL_GetTick>
 80041d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041da:	e009      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041dc:	f7fe fbb4 	bl	8002948 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d902      	bls.n	80041f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	73fb      	strb	r3, [r7, #15]
        break;
 80041ee:	e005      	b.n	80041fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041f0:	4b36      	ldr	r3, [pc, #216]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ef      	bne.n	80041dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d15f      	bne.n	80042c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d110      	bne.n	800422a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004208:	4b30      	ldr	r3, [pc, #192]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004210:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6892      	ldr	r2, [r2, #8]
 8004218:	0211      	lsls	r1, r2, #8
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68d2      	ldr	r2, [r2, #12]
 800421e:	06d2      	lsls	r2, r2, #27
 8004220:	430a      	orrs	r2, r1
 8004222:	492a      	ldr	r1, [pc, #168]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004224:	4313      	orrs	r3, r2
 8004226:	610b      	str	r3, [r1, #16]
 8004228:	e027      	b.n	800427a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d112      	bne.n	8004256 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004230:	4b26      	ldr	r3, [pc, #152]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004238:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6892      	ldr	r2, [r2, #8]
 8004240:	0211      	lsls	r1, r2, #8
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6912      	ldr	r2, [r2, #16]
 8004246:	0852      	lsrs	r2, r2, #1
 8004248:	3a01      	subs	r2, #1
 800424a:	0552      	lsls	r2, r2, #21
 800424c:	430a      	orrs	r2, r1
 800424e:	491f      	ldr	r1, [pc, #124]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004250:	4313      	orrs	r3, r2
 8004252:	610b      	str	r3, [r1, #16]
 8004254:	e011      	b.n	800427a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800425e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6892      	ldr	r2, [r2, #8]
 8004266:	0211      	lsls	r1, r2, #8
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6952      	ldr	r2, [r2, #20]
 800426c:	0852      	lsrs	r2, r2, #1
 800426e:	3a01      	subs	r2, #1
 8004270:	0652      	lsls	r2, r2, #25
 8004272:	430a      	orrs	r2, r1
 8004274:	4915      	ldr	r1, [pc, #84]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004276:	4313      	orrs	r3, r2
 8004278:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a13      	ldr	r2, [pc, #76]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004280:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004284:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004286:	f7fe fb5f 	bl	8002948 <HAL_GetTick>
 800428a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800428c:	e009      	b.n	80042a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800428e:	f7fe fb5b 	bl	8002948 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d902      	bls.n	80042a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	73fb      	strb	r3, [r7, #15]
          break;
 80042a0:	e005      	b.n	80042ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0ef      	beq.n	800428e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d106      	bne.n	80042c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	4903      	ldr	r1, [pc, #12]	; (80042cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40021000 	.word	0x40021000

080042d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e095      	b.n	800440e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d108      	bne.n	80042fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f2:	d009      	beq.n	8004308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	61da      	str	r2, [r3, #28]
 80042fa:	e005      	b.n	8004308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd f98e 	bl	8001644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004348:	d902      	bls.n	8004350 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	e002      	b.n	8004356 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004354:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800435e:	d007      	beq.n	8004370 <HAL_SPI_Init+0xa0>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004368:	d002      	beq.n	8004370 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b2:	ea42 0103 	orr.w	r1, r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	0c1b      	lsrs	r3, r3, #16
 80043cc:	f003 0204 	and.w	r2, r3, #4
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80043ec:	ea42 0103 	orr.w	r1, r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b08a      	sub	sp, #40	; 0x28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004424:	2301      	movs	r3, #1
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_SPI_TransmitReceive+0x26>
 8004438:	2302      	movs	r3, #2
 800443a:	e1fb      	b.n	8004834 <HAL_SPI_TransmitReceive+0x41e>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004444:	f7fe fa80 	bl	8002948 <HAL_GetTick>
 8004448:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004450:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004458:	887b      	ldrh	r3, [r7, #2]
 800445a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800445c:	887b      	ldrh	r3, [r7, #2]
 800445e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004460:	7efb      	ldrb	r3, [r7, #27]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d00e      	beq.n	8004484 <HAL_SPI_TransmitReceive+0x6e>
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800446c:	d106      	bne.n	800447c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <HAL_SPI_TransmitReceive+0x66>
 8004476:	7efb      	ldrb	r3, [r7, #27]
 8004478:	2b04      	cmp	r3, #4
 800447a:	d003      	beq.n	8004484 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800447c:	2302      	movs	r3, #2
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004482:	e1cd      	b.n	8004820 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_SPI_TransmitReceive+0x80>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_SPI_TransmitReceive+0x80>
 8004490:	887b      	ldrh	r3, [r7, #2]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d103      	bne.n	800449e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800449c:	e1c0      	b.n	8004820 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d003      	beq.n	80044b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2205      	movs	r2, #5
 80044ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	887a      	ldrh	r2, [r7, #2]
 80044c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	887a      	ldrh	r2, [r7, #2]
 80044ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	887a      	ldrh	r2, [r7, #2]
 80044d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	887a      	ldrh	r2, [r7, #2]
 80044de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044f4:	d802      	bhi.n	80044fc <HAL_SPI_TransmitReceive+0xe6>
 80044f6:	8a3b      	ldrh	r3, [r7, #16]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d908      	bls.n	800450e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800450a:	605a      	str	r2, [r3, #4]
 800450c:	e007      	b.n	800451e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800451c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004528:	2b40      	cmp	r3, #64	; 0x40
 800452a:	d007      	beq.n	800453c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800453a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004544:	d97c      	bls.n	8004640 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x13e>
 800454e:	8a7b      	ldrh	r3, [r7, #18]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d169      	bne.n	8004628 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	881a      	ldrh	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	1c9a      	adds	r2, r3, #2
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004578:	e056      	b.n	8004628 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b02      	cmp	r3, #2
 8004586:	d11b      	bne.n	80045c0 <HAL_SPI_TransmitReceive+0x1aa>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d016      	beq.n	80045c0 <HAL_SPI_TransmitReceive+0x1aa>
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	2b01      	cmp	r3, #1
 8004596:	d113      	bne.n	80045c0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	881a      	ldrh	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	1c9a      	adds	r2, r3, #2
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d11c      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x1f2>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	b292      	uxth	r2, r2
 80045e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	1c9a      	adds	r2, r3, #2
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004604:	2301      	movs	r3, #1
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004608:	f7fe f99e 	bl	8002948 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004614:	429a      	cmp	r2, r3
 8004616:	d807      	bhi.n	8004628 <HAL_SPI_TransmitReceive+0x212>
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461e:	d003      	beq.n	8004628 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004626:	e0fb      	b.n	8004820 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1a3      	bne.n	800457a <HAL_SPI_TransmitReceive+0x164>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d19d      	bne.n	800457a <HAL_SPI_TransmitReceive+0x164>
 800463e:	e0df      	b.n	8004800 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_SPI_TransmitReceive+0x23a>
 8004648:	8a7b      	ldrh	r3, [r7, #18]
 800464a:	2b01      	cmp	r3, #1
 800464c:	f040 80cb 	bne.w	80047e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b01      	cmp	r3, #1
 8004658:	d912      	bls.n	8004680 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	881a      	ldrh	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	1c9a      	adds	r2, r3, #2
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b02      	subs	r3, #2
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800467e:	e0b2      	b.n	80047e6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	330c      	adds	r3, #12
 800468a:	7812      	ldrb	r2, [r2, #0]
 800468c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046a6:	e09e      	b.n	80047e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d134      	bne.n	8004720 <HAL_SPI_TransmitReceive+0x30a>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d02f      	beq.n	8004720 <HAL_SPI_TransmitReceive+0x30a>
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d12c      	bne.n	8004720 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d912      	bls.n	80046f6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	881a      	ldrh	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	1c9a      	adds	r2, r3, #2
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b02      	subs	r3, #2
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046f4:	e012      	b.n	800471c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b01      	cmp	r3, #1
 800472c:	d148      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x3aa>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d042      	beq.n	80047c0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	d923      	bls.n	800478e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	b292      	uxth	r2, r2
 8004752:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	1c9a      	adds	r2, r3, #2
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b02      	subs	r3, #2
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	d81f      	bhi.n	80047bc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800478a:	605a      	str	r2, [r3, #4]
 800478c:	e016      	b.n	80047bc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f103 020c 	add.w	r2, r3, #12
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	7812      	ldrb	r2, [r2, #0]
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047bc:	2301      	movs	r3, #1
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047c0:	f7fe f8c2 	bl	8002948 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d803      	bhi.n	80047d8 <HAL_SPI_TransmitReceive+0x3c2>
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d102      	bne.n	80047de <HAL_SPI_TransmitReceive+0x3c8>
 80047d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d103      	bne.n	80047e6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80047e4:	e01c      	b.n	8004820 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f47f af5b 	bne.w	80046a8 <HAL_SPI_TransmitReceive+0x292>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f47f af54 	bne.w	80046a8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f937 	bl	8004a78 <SPI_EndRxTxTransaction>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	661a      	str	r2, [r3, #96]	; 0x60
 800481c:	e000      	b.n	8004820 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800481e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004834:	4618      	mov	r0, r3
 8004836:	3728      	adds	r7, #40	; 0x28
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	4613      	mov	r3, r2
 800484a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800484c:	f7fe f87c 	bl	8002948 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	4413      	add	r3, r2
 800485a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800485c:	f7fe f874 	bl	8002948 <HAL_GetTick>
 8004860:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004862:	4b39      	ldr	r3, [pc, #228]	; (8004948 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	015b      	lsls	r3, r3, #5
 8004868:	0d1b      	lsrs	r3, r3, #20
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	fb02 f303 	mul.w	r3, r2, r3
 8004870:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004872:	e054      	b.n	800491e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d050      	beq.n	800491e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800487c:	f7fe f864 	bl	8002948 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	429a      	cmp	r2, r3
 800488a:	d902      	bls.n	8004892 <SPI_WaitFlagStateUntilTimeout+0x56>
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d13d      	bne.n	800490e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048aa:	d111      	bne.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	d004      	beq.n	80048c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048be:	d107      	bne.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d8:	d10f      	bne.n	80048fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e017      	b.n	800493e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	3b01      	subs	r3, #1
 800491c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4013      	ands	r3, r2
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	429a      	cmp	r2, r3
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	429a      	cmp	r2, r3
 800493a:	d19b      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000030 	.word	0x20000030

0800494c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	; 0x28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800495e:	f7fd fff3 	bl	8002948 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	4413      	add	r3, r2
 800496c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800496e:	f7fd ffeb 	bl	8002948 <HAL_GetTick>
 8004972:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	330c      	adds	r3, #12
 800497a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800497c:	4b3d      	ldr	r3, [pc, #244]	; (8004a74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	00da      	lsls	r2, r3, #3
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	0d1b      	lsrs	r3, r3, #20
 800498c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498e:	fb02 f303 	mul.w	r3, r2, r3
 8004992:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004994:	e060      	b.n	8004a58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800499c:	d107      	bne.n	80049ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d104      	bne.n	80049ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80049ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b4:	d050      	beq.n	8004a58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049b6:	f7fd ffc7 	bl	8002948 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d902      	bls.n	80049cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d13d      	bne.n	8004a48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e4:	d111      	bne.n	8004a0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ee:	d004      	beq.n	80049fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f8:	d107      	bne.n	8004a0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a12:	d10f      	bne.n	8004a34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e010      	b.n	8004a6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	4013      	ands	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d196      	bne.n	8004996 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3728      	adds	r7, #40	; 0x28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000030 	.word	0x20000030

08004a78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7ff ff5b 	bl	800494c <SPI_WaitFifoStateUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa0:	f043 0220 	orr.w	r2, r3, #32
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e027      	b.n	8004afc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	2180      	movs	r1, #128	; 0x80
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f7ff fec0 	bl	800483c <SPI_WaitFlagStateUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac6:	f043 0220 	orr.w	r2, r3, #32
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e014      	b.n	8004afc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff ff34 	bl	800494c <SPI_WaitFifoStateUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e000      	b.n	8004afc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e049      	b.n	8004baa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fd f884 	bl	8001c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	4619      	mov	r1, r3
 8004b42:	4610      	mov	r0, r2
 8004b44:	f000 fba0 	bl	8005288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d001      	beq.n	8004bcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e033      	b.n	8004c34 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <HAL_TIM_Base_Start+0x8c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d009      	beq.n	8004bf2 <HAL_TIM_Base_Start+0x3e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be6:	d004      	beq.n	8004bf2 <HAL_TIM_Base_Start+0x3e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <HAL_TIM_Base_Start+0x90>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d115      	bne.n	8004c1e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <HAL_TIM_Base_Start+0x94>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b06      	cmp	r3, #6
 8004c02:	d015      	beq.n	8004c30 <HAL_TIM_Base_Start+0x7c>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0a:	d011      	beq.n	8004c30 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1c:	e008      	b.n	8004c30 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0201 	orr.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	e000      	b.n	8004c32 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	40012c00 	.word	0x40012c00
 8004c44:	40014000 	.word	0x40014000
 8004c48:	00010007 	.word	0x00010007

08004c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e049      	b.n	8004cf2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f841 	bl	8004cfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3304      	adds	r3, #4
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f000 fafc 	bl	8005288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d109      	bne.n	8004d34 <HAL_TIM_PWM_Start+0x24>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	bf14      	ite	ne
 8004d2c:	2301      	movne	r3, #1
 8004d2e:	2300      	moveq	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	e03c      	b.n	8004dae <HAL_TIM_PWM_Start+0x9e>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d109      	bne.n	8004d4e <HAL_TIM_PWM_Start+0x3e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	bf14      	ite	ne
 8004d46:	2301      	movne	r3, #1
 8004d48:	2300      	moveq	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	e02f      	b.n	8004dae <HAL_TIM_PWM_Start+0x9e>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d109      	bne.n	8004d68 <HAL_TIM_PWM_Start+0x58>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	bf14      	ite	ne
 8004d60:	2301      	movne	r3, #1
 8004d62:	2300      	moveq	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	e022      	b.n	8004dae <HAL_TIM_PWM_Start+0x9e>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b0c      	cmp	r3, #12
 8004d6c:	d109      	bne.n	8004d82 <HAL_TIM_PWM_Start+0x72>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	bf14      	ite	ne
 8004d7a:	2301      	movne	r3, #1
 8004d7c:	2300      	moveq	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	e015      	b.n	8004dae <HAL_TIM_PWM_Start+0x9e>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d109      	bne.n	8004d9c <HAL_TIM_PWM_Start+0x8c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e008      	b.n	8004dae <HAL_TIM_PWM_Start+0x9e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	bf14      	ite	ne
 8004da8:	2301      	movne	r3, #1
 8004daa:	2300      	moveq	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e07e      	b.n	8004eb4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0xb6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc4:	e023      	b.n	8004e0e <HAL_TIM_PWM_Start+0xfe>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d104      	bne.n	8004dd6 <HAL_TIM_PWM_Start+0xc6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd4:	e01b      	b.n	8004e0e <HAL_TIM_PWM_Start+0xfe>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_PWM_Start+0xd6>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de4:	e013      	b.n	8004e0e <HAL_TIM_PWM_Start+0xfe>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b0c      	cmp	r3, #12
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_PWM_Start+0xe6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004df4:	e00b      	b.n	8004e0e <HAL_TIM_PWM_Start+0xfe>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_PWM_Start+0xf6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e04:	e003      	b.n	8004e0e <HAL_TIM_PWM_Start+0xfe>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2201      	movs	r2, #1
 8004e14:	6839      	ldr	r1, [r7, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fdb2 	bl	8005980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a26      	ldr	r2, [pc, #152]	; (8004ebc <HAL_TIM_PWM_Start+0x1ac>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_TIM_PWM_Start+0x12a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a25      	ldr	r2, [pc, #148]	; (8004ec0 <HAL_TIM_PWM_Start+0x1b0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_TIM_PWM_Start+0x12a>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a23      	ldr	r2, [pc, #140]	; (8004ec4 <HAL_TIM_PWM_Start+0x1b4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d101      	bne.n	8004e3e <HAL_TIM_PWM_Start+0x12e>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <HAL_TIM_PWM_Start+0x130>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <HAL_TIM_PWM_Start+0x1ac>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x162>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e66:	d004      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x162>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a14      	ldr	r2, [pc, #80]	; (8004ec0 <HAL_TIM_PWM_Start+0x1b0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d115      	bne.n	8004e9e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <HAL_TIM_PWM_Start+0x1b8>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b06      	cmp	r3, #6
 8004e82:	d015      	beq.n	8004eb0 <HAL_TIM_PWM_Start+0x1a0>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8a:	d011      	beq.n	8004eb0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9c:	e008      	b.n	8004eb0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0201 	orr.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e000      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	00010007 	.word	0x00010007

08004ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e0ff      	b.n	80050ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b14      	cmp	r3, #20
 8004ef6:	f200 80f0 	bhi.w	80050da <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f55 	.word	0x08004f55
 8004f04:	080050db 	.word	0x080050db
 8004f08:	080050db 	.word	0x080050db
 8004f0c:	080050db 	.word	0x080050db
 8004f10:	08004f95 	.word	0x08004f95
 8004f14:	080050db 	.word	0x080050db
 8004f18:	080050db 	.word	0x080050db
 8004f1c:	080050db 	.word	0x080050db
 8004f20:	08004fd7 	.word	0x08004fd7
 8004f24:	080050db 	.word	0x080050db
 8004f28:	080050db 	.word	0x080050db
 8004f2c:	080050db 	.word	0x080050db
 8004f30:	08005017 	.word	0x08005017
 8004f34:	080050db 	.word	0x080050db
 8004f38:	080050db 	.word	0x080050db
 8004f3c:	080050db 	.word	0x080050db
 8004f40:	08005059 	.word	0x08005059
 8004f44:	080050db 	.word	0x080050db
 8004f48:	080050db 	.word	0x080050db
 8004f4c:	080050db 	.word	0x080050db
 8004f50:	08005099 	.word	0x08005099
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 f9f8 	bl	8005350 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0208 	orr.w	r2, r2, #8
 8004f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0204 	bic.w	r2, r2, #4
 8004f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6999      	ldr	r1, [r3, #24]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	619a      	str	r2, [r3, #24]
      break;
 8004f92:	e0a5      	b.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fa54 	bl	8005448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6999      	ldr	r1, [r3, #24]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	021a      	lsls	r2, r3, #8
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	619a      	str	r2, [r3, #24]
      break;
 8004fd4:	e084      	b.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 faad 	bl	800553c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0208 	orr.w	r2, r2, #8
 8004ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0204 	bic.w	r2, r2, #4
 8005000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69d9      	ldr	r1, [r3, #28]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	61da      	str	r2, [r3, #28]
      break;
 8005014:	e064      	b.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fb05 	bl	800562c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69d9      	ldr	r1, [r3, #28]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	021a      	lsls	r2, r3, #8
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	61da      	str	r2, [r3, #28]
      break;
 8005056:	e043      	b.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fb42 	bl	80056e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0208 	orr.w	r2, r2, #8
 8005072:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0204 	bic.w	r2, r2, #4
 8005082:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005096:	e023      	b.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fb7a 	bl	8005798 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	021a      	lsls	r2, r3, #8
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050d8:	e002      	b.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	75fb      	strb	r3, [r7, #23]
      break;
 80050de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop

080050f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <HAL_TIM_ConfigClockSource+0x1c>
 800510c:	2302      	movs	r3, #2
 800510e:	e0b6      	b.n	800527e <HAL_TIM_ConfigClockSource+0x18a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800512e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800513a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800514c:	d03e      	beq.n	80051cc <HAL_TIM_ConfigClockSource+0xd8>
 800514e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005152:	f200 8087 	bhi.w	8005264 <HAL_TIM_ConfigClockSource+0x170>
 8005156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515a:	f000 8086 	beq.w	800526a <HAL_TIM_ConfigClockSource+0x176>
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005162:	d87f      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x170>
 8005164:	2b70      	cmp	r3, #112	; 0x70
 8005166:	d01a      	beq.n	800519e <HAL_TIM_ConfigClockSource+0xaa>
 8005168:	2b70      	cmp	r3, #112	; 0x70
 800516a:	d87b      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x170>
 800516c:	2b60      	cmp	r3, #96	; 0x60
 800516e:	d050      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0x11e>
 8005170:	2b60      	cmp	r3, #96	; 0x60
 8005172:	d877      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x170>
 8005174:	2b50      	cmp	r3, #80	; 0x50
 8005176:	d03c      	beq.n	80051f2 <HAL_TIM_ConfigClockSource+0xfe>
 8005178:	2b50      	cmp	r3, #80	; 0x50
 800517a:	d873      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x170>
 800517c:	2b40      	cmp	r3, #64	; 0x40
 800517e:	d058      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x13e>
 8005180:	2b40      	cmp	r3, #64	; 0x40
 8005182:	d86f      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x170>
 8005184:	2b30      	cmp	r3, #48	; 0x30
 8005186:	d064      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x15e>
 8005188:	2b30      	cmp	r3, #48	; 0x30
 800518a:	d86b      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x170>
 800518c:	2b20      	cmp	r3, #32
 800518e:	d060      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x15e>
 8005190:	2b20      	cmp	r3, #32
 8005192:	d867      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x170>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d05c      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x15e>
 8005198:	2b10      	cmp	r3, #16
 800519a:	d05a      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x15e>
 800519c:	e062      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	6899      	ldr	r1, [r3, #8]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f000 fbc7 	bl	8005940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	609a      	str	r2, [r3, #8]
      break;
 80051ca:	e04f      	b.n	800526c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	6899      	ldr	r1, [r3, #8]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f000 fbb0 	bl	8005940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ee:	609a      	str	r2, [r3, #8]
      break;
 80051f0:	e03c      	b.n	800526c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6859      	ldr	r1, [r3, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	461a      	mov	r2, r3
 8005200:	f000 fb24 	bl	800584c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2150      	movs	r1, #80	; 0x50
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fb7d 	bl	800590a <TIM_ITRx_SetConfig>
      break;
 8005210:	e02c      	b.n	800526c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	6859      	ldr	r1, [r3, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	461a      	mov	r2, r3
 8005220:	f000 fb43 	bl	80058aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2160      	movs	r1, #96	; 0x60
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fb6d 	bl	800590a <TIM_ITRx_SetConfig>
      break;
 8005230:	e01c      	b.n	800526c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6859      	ldr	r1, [r3, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	461a      	mov	r2, r3
 8005240:	f000 fb04 	bl	800584c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2140      	movs	r1, #64	; 0x40
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fb5d 	bl	800590a <TIM_ITRx_SetConfig>
      break;
 8005250:	e00c      	b.n	800526c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4619      	mov	r1, r3
 800525c:	4610      	mov	r0, r2
 800525e:	f000 fb54 	bl	800590a <TIM_ITRx_SetConfig>
      break;
 8005262:	e003      	b.n	800526c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	73fb      	strb	r3, [r7, #15]
      break;
 8005268:	e000      	b.n	800526c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800526a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800527c:	7bfb      	ldrb	r3, [r7, #15]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a2a      	ldr	r2, [pc, #168]	; (8005344 <TIM_Base_SetConfig+0xbc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_Base_SetConfig+0x20>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a6:	d108      	bne.n	80052ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a21      	ldr	r2, [pc, #132]	; (8005344 <TIM_Base_SetConfig+0xbc>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00b      	beq.n	80052da <TIM_Base_SetConfig+0x52>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d007      	beq.n	80052da <TIM_Base_SetConfig+0x52>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <TIM_Base_SetConfig+0xc0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_Base_SetConfig+0x52>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a1d      	ldr	r2, [pc, #116]	; (800534c <TIM_Base_SetConfig+0xc4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d108      	bne.n	80052ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <TIM_Base_SetConfig+0xbc>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d007      	beq.n	8005328 <TIM_Base_SetConfig+0xa0>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a0b      	ldr	r2, [pc, #44]	; (8005348 <TIM_Base_SetConfig+0xc0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_Base_SetConfig+0xa0>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a0a      	ldr	r2, [pc, #40]	; (800534c <TIM_Base_SetConfig+0xc4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d103      	bne.n	8005330 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	615a      	str	r2, [r3, #20]
}
 8005336:	bf00      	nop
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40014000 	.word	0x40014000
 800534c:	40014400 	.word	0x40014400

08005350 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	f023 0201 	bic.w	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0303 	bic.w	r3, r3, #3
 800538a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f023 0302 	bic.w	r3, r3, #2
 800539c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a24      	ldr	r2, [pc, #144]	; (800543c <TIM_OC1_SetConfig+0xec>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d007      	beq.n	80053c0 <TIM_OC1_SetConfig+0x70>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a23      	ldr	r2, [pc, #140]	; (8005440 <TIM_OC1_SetConfig+0xf0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_OC1_SetConfig+0x70>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a22      	ldr	r2, [pc, #136]	; (8005444 <TIM_OC1_SetConfig+0xf4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d10c      	bne.n	80053da <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f023 0308 	bic.w	r3, r3, #8
 80053c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f023 0304 	bic.w	r3, r3, #4
 80053d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a17      	ldr	r2, [pc, #92]	; (800543c <TIM_OC1_SetConfig+0xec>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d007      	beq.n	80053f2 <TIM_OC1_SetConfig+0xa2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a16      	ldr	r2, [pc, #88]	; (8005440 <TIM_OC1_SetConfig+0xf0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d003      	beq.n	80053f2 <TIM_OC1_SetConfig+0xa2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a15      	ldr	r2, [pc, #84]	; (8005444 <TIM_OC1_SetConfig+0xf4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d111      	bne.n	8005416 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	621a      	str	r2, [r3, #32]
}
 8005430:	bf00      	nop
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40014000 	.word	0x40014000
 8005444:	40014400 	.word	0x40014400

08005448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f023 0210 	bic.w	r2, r3, #16
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f023 0320 	bic.w	r3, r3, #32
 8005496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a22      	ldr	r2, [pc, #136]	; (8005530 <TIM_OC2_SetConfig+0xe8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d10d      	bne.n	80054c8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a19      	ldr	r2, [pc, #100]	; (8005530 <TIM_OC2_SetConfig+0xe8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d007      	beq.n	80054e0 <TIM_OC2_SetConfig+0x98>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a18      	ldr	r2, [pc, #96]	; (8005534 <TIM_OC2_SetConfig+0xec>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d003      	beq.n	80054e0 <TIM_OC2_SetConfig+0x98>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a17      	ldr	r2, [pc, #92]	; (8005538 <TIM_OC2_SetConfig+0xf0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d113      	bne.n	8005508 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40014000 	.word	0x40014000
 8005538:	40014400 	.word	0x40014400

0800553c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0303 	bic.w	r3, r3, #3
 8005576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a21      	ldr	r2, [pc, #132]	; (8005620 <TIM_OC3_SetConfig+0xe4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d10d      	bne.n	80055ba <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a18      	ldr	r2, [pc, #96]	; (8005620 <TIM_OC3_SetConfig+0xe4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_OC3_SetConfig+0x96>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a17      	ldr	r2, [pc, #92]	; (8005624 <TIM_OC3_SetConfig+0xe8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_OC3_SetConfig+0x96>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a16      	ldr	r2, [pc, #88]	; (8005628 <TIM_OC3_SetConfig+0xec>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d113      	bne.n	80055fa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	621a      	str	r2, [r3, #32]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40014000 	.word	0x40014000
 8005628:	40014400 	.word	0x40014400

0800562c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800565a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800567a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	031b      	lsls	r3, r3, #12
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a14      	ldr	r2, [pc, #80]	; (80056dc <TIM_OC4_SetConfig+0xb0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d007      	beq.n	80056a0 <TIM_OC4_SetConfig+0x74>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <TIM_OC4_SetConfig+0xb4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_OC4_SetConfig+0x74>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a12      	ldr	r2, [pc, #72]	; (80056e4 <TIM_OC4_SetConfig+0xb8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d109      	bne.n	80056b4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	019b      	lsls	r3, r3, #6
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40012c00 	.word	0x40012c00
 80056e0:	40014000 	.word	0x40014000
 80056e4:	40014400 	.word	0x40014400

080056e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800572c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	041b      	lsls	r3, r3, #16
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a13      	ldr	r2, [pc, #76]	; (800578c <TIM_OC5_SetConfig+0xa4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d007      	beq.n	8005752 <TIM_OC5_SetConfig+0x6a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a12      	ldr	r2, [pc, #72]	; (8005790 <TIM_OC5_SetConfig+0xa8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d003      	beq.n	8005752 <TIM_OC5_SetConfig+0x6a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a11      	ldr	r2, [pc, #68]	; (8005794 <TIM_OC5_SetConfig+0xac>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d109      	bne.n	8005766 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005758:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	021b      	lsls	r3, r3, #8
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	621a      	str	r2, [r3, #32]
}
 8005780:	bf00      	nop
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40014000 	.word	0x40014000
 8005794:	40014400 	.word	0x40014400

08005798 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	051b      	lsls	r3, r3, #20
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a14      	ldr	r2, [pc, #80]	; (8005840 <TIM_OC6_SetConfig+0xa8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_OC6_SetConfig+0x6c>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a13      	ldr	r2, [pc, #76]	; (8005844 <TIM_OC6_SetConfig+0xac>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_OC6_SetConfig+0x6c>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a12      	ldr	r2, [pc, #72]	; (8005848 <TIM_OC6_SetConfig+0xb0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d109      	bne.n	8005818 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800580a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	029b      	lsls	r3, r3, #10
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40014000 	.word	0x40014000
 8005848:	40014400 	.word	0x40014400

0800584c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f023 0201 	bic.w	r2, r3, #1
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4313      	orrs	r3, r2
 8005880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f023 030a 	bic.w	r3, r3, #10
 8005888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	621a      	str	r2, [r3, #32]
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b087      	sub	sp, #28
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f023 0210 	bic.w	r2, r3, #16
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	031b      	lsls	r3, r3, #12
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800590a:	b480      	push	{r7}
 800590c:	b085      	sub	sp, #20
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	f043 0307 	orr.w	r3, r3, #7
 800592c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	609a      	str	r2, [r3, #8]
}
 8005934:	bf00      	nop
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800595a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	021a      	lsls	r2, r3, #8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	431a      	orrs	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4313      	orrs	r3, r2
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	609a      	str	r2, [r3, #8]
}
 8005974:	bf00      	nop
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 031f 	and.w	r3, r3, #31
 8005992:	2201      	movs	r2, #1
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a1a      	ldr	r2, [r3, #32]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	401a      	ands	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a1a      	ldr	r2, [r3, #32]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	fa01 f303 	lsl.w	r3, r1, r3
 80059b8:	431a      	orrs	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	621a      	str	r2, [r3, #32]
}
 80059be:	bf00      	nop
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
	...

080059cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e04f      	b.n	8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a21      	ldr	r2, [pc, #132]	; (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d108      	bne.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a14      	ldr	r2, [pc, #80]	; (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d009      	beq.n	8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4c:	d004      	beq.n	8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a10      	ldr	r2, [pc, #64]	; (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d10c      	bne.n	8005a72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	40014000 	.word	0x40014000

08005a98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d101      	bne.n	8005ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	e060      	b.n	8005b76 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	041b      	lsls	r3, r3, #16
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a14      	ldr	r2, [pc, #80]	; (8005b84 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d115      	bne.n	8005b64 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	051b      	lsls	r3, r3, #20
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40012c00 	.word	0x40012c00

08005b88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e040      	b.n	8005c1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fc f926 	bl	8001dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2224      	movs	r2, #36	; 0x24
 8005bb4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0201 	bic.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f8c0 	bl	8005d4c <UART_SetConfig>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e022      	b.n	8005c1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fb0e 	bl	8006200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fb95 	bl	8006344 <UART_CheckIdleState>
 8005c1a:	4603      	mov	r3, r0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08a      	sub	sp, #40	; 0x28
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	4613      	mov	r3, r2
 8005c32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	f040 8082 	bne.w	8005d42 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <HAL_UART_Transmit+0x26>
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e07a      	b.n	8005d44 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_UART_Transmit+0x38>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e073      	b.n	8005d44 <HAL_UART_Transmit+0x120>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2221      	movs	r2, #33	; 0x21
 8005c70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c72:	f7fc fe69 	bl	8002948 <HAL_GetTick>
 8005c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	88fa      	ldrh	r2, [r7, #6]
 8005c7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	88fa      	ldrh	r2, [r7, #6]
 8005c84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c90:	d108      	bne.n	8005ca4 <HAL_UART_Transmit+0x80>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d104      	bne.n	8005ca4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	e003      	b.n	8005cac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005cb4:	e02d      	b.n	8005d12 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2180      	movs	r1, #128	; 0x80
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 fb88 	bl	80063d6 <UART_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e039      	b.n	8005d44 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10b      	bne.n	8005cee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	881a      	ldrh	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	3302      	adds	r3, #2
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	e008      	b.n	8005d00 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	b292      	uxth	r2, r2
 8005cf8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1cb      	bne.n	8005cb6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2200      	movs	r2, #0
 8005d26:	2140      	movs	r1, #64	; 0x40
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fb54 	bl	80063d6 <UART_WaitOnFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e005      	b.n	8005d44 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e000      	b.n	8005d44 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005d42:	2302      	movs	r3, #2
  }
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d50:	b08a      	sub	sp, #40	; 0x28
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	4b9e      	ldr	r3, [pc, #632]	; (8005ff4 <UART_SetConfig+0x2a8>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d84:	430b      	orrs	r3, r1
 8005d86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a93      	ldr	r2, [pc, #588]	; (8005ff8 <UART_SetConfig+0x2ac>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d004      	beq.n	8005db8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db4:	4313      	orrs	r3, r2
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a8a      	ldr	r2, [pc, #552]	; (8005ffc <UART_SetConfig+0x2b0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d126      	bne.n	8005e24 <UART_SetConfig+0xd8>
 8005dd6:	4b8a      	ldr	r3, [pc, #552]	; (8006000 <UART_SetConfig+0x2b4>)
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ddc:	f003 0303 	and.w	r3, r3, #3
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d81b      	bhi.n	8005e1c <UART_SetConfig+0xd0>
 8005de4:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <UART_SetConfig+0xa0>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005dfd 	.word	0x08005dfd
 8005df0:	08005e0d 	.word	0x08005e0d
 8005df4:	08005e05 	.word	0x08005e05
 8005df8:	08005e15 	.word	0x08005e15
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e02:	e0ab      	b.n	8005f5c <UART_SetConfig+0x210>
 8005e04:	2302      	movs	r3, #2
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e0a:	e0a7      	b.n	8005f5c <UART_SetConfig+0x210>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e12:	e0a3      	b.n	8005f5c <UART_SetConfig+0x210>
 8005e14:	2308      	movs	r3, #8
 8005e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e1a:	e09f      	b.n	8005f5c <UART_SetConfig+0x210>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e22:	e09b      	b.n	8005f5c <UART_SetConfig+0x210>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a76      	ldr	r2, [pc, #472]	; (8006004 <UART_SetConfig+0x2b8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d138      	bne.n	8005ea0 <UART_SetConfig+0x154>
 8005e2e:	4b74      	ldr	r3, [pc, #464]	; (8006000 <UART_SetConfig+0x2b4>)
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e34:	f003 030c 	and.w	r3, r3, #12
 8005e38:	2b0c      	cmp	r3, #12
 8005e3a:	d82d      	bhi.n	8005e98 <UART_SetConfig+0x14c>
 8005e3c:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <UART_SetConfig+0xf8>)
 8005e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e42:	bf00      	nop
 8005e44:	08005e79 	.word	0x08005e79
 8005e48:	08005e99 	.word	0x08005e99
 8005e4c:	08005e99 	.word	0x08005e99
 8005e50:	08005e99 	.word	0x08005e99
 8005e54:	08005e89 	.word	0x08005e89
 8005e58:	08005e99 	.word	0x08005e99
 8005e5c:	08005e99 	.word	0x08005e99
 8005e60:	08005e99 	.word	0x08005e99
 8005e64:	08005e81 	.word	0x08005e81
 8005e68:	08005e99 	.word	0x08005e99
 8005e6c:	08005e99 	.word	0x08005e99
 8005e70:	08005e99 	.word	0x08005e99
 8005e74:	08005e91 	.word	0x08005e91
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7e:	e06d      	b.n	8005f5c <UART_SetConfig+0x210>
 8005e80:	2302      	movs	r3, #2
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e86:	e069      	b.n	8005f5c <UART_SetConfig+0x210>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e8e:	e065      	b.n	8005f5c <UART_SetConfig+0x210>
 8005e90:	2308      	movs	r3, #8
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e96:	e061      	b.n	8005f5c <UART_SetConfig+0x210>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9e:	e05d      	b.n	8005f5c <UART_SetConfig+0x210>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a58      	ldr	r2, [pc, #352]	; (8006008 <UART_SetConfig+0x2bc>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d125      	bne.n	8005ef6 <UART_SetConfig+0x1aa>
 8005eaa:	4b55      	ldr	r3, [pc, #340]	; (8006000 <UART_SetConfig+0x2b4>)
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005eb4:	2b30      	cmp	r3, #48	; 0x30
 8005eb6:	d016      	beq.n	8005ee6 <UART_SetConfig+0x19a>
 8005eb8:	2b30      	cmp	r3, #48	; 0x30
 8005eba:	d818      	bhi.n	8005eee <UART_SetConfig+0x1a2>
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d00a      	beq.n	8005ed6 <UART_SetConfig+0x18a>
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d814      	bhi.n	8005eee <UART_SetConfig+0x1a2>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <UART_SetConfig+0x182>
 8005ec8:	2b10      	cmp	r3, #16
 8005eca:	d008      	beq.n	8005ede <UART_SetConfig+0x192>
 8005ecc:	e00f      	b.n	8005eee <UART_SetConfig+0x1a2>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed4:	e042      	b.n	8005f5c <UART_SetConfig+0x210>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005edc:	e03e      	b.n	8005f5c <UART_SetConfig+0x210>
 8005ede:	2304      	movs	r3, #4
 8005ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee4:	e03a      	b.n	8005f5c <UART_SetConfig+0x210>
 8005ee6:	2308      	movs	r3, #8
 8005ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eec:	e036      	b.n	8005f5c <UART_SetConfig+0x210>
 8005eee:	2310      	movs	r3, #16
 8005ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef4:	e032      	b.n	8005f5c <UART_SetConfig+0x210>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a3f      	ldr	r2, [pc, #252]	; (8005ff8 <UART_SetConfig+0x2ac>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d12a      	bne.n	8005f56 <UART_SetConfig+0x20a>
 8005f00:	4b3f      	ldr	r3, [pc, #252]	; (8006000 <UART_SetConfig+0x2b4>)
 8005f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f0e:	d01a      	beq.n	8005f46 <UART_SetConfig+0x1fa>
 8005f10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f14:	d81b      	bhi.n	8005f4e <UART_SetConfig+0x202>
 8005f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f1a:	d00c      	beq.n	8005f36 <UART_SetConfig+0x1ea>
 8005f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f20:	d815      	bhi.n	8005f4e <UART_SetConfig+0x202>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <UART_SetConfig+0x1e2>
 8005f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f2a:	d008      	beq.n	8005f3e <UART_SetConfig+0x1f2>
 8005f2c:	e00f      	b.n	8005f4e <UART_SetConfig+0x202>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f34:	e012      	b.n	8005f5c <UART_SetConfig+0x210>
 8005f36:	2302      	movs	r3, #2
 8005f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f3c:	e00e      	b.n	8005f5c <UART_SetConfig+0x210>
 8005f3e:	2304      	movs	r3, #4
 8005f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f44:	e00a      	b.n	8005f5c <UART_SetConfig+0x210>
 8005f46:	2308      	movs	r3, #8
 8005f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f4c:	e006      	b.n	8005f5c <UART_SetConfig+0x210>
 8005f4e:	2310      	movs	r3, #16
 8005f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f54:	e002      	b.n	8005f5c <UART_SetConfig+0x210>
 8005f56:	2310      	movs	r3, #16
 8005f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a25      	ldr	r2, [pc, #148]	; (8005ff8 <UART_SetConfig+0x2ac>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	f040 808a 	bne.w	800607c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d824      	bhi.n	8005fba <UART_SetConfig+0x26e>
 8005f70:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <UART_SetConfig+0x22c>)
 8005f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f76:	bf00      	nop
 8005f78:	08005f9d 	.word	0x08005f9d
 8005f7c:	08005fbb 	.word	0x08005fbb
 8005f80:	08005fa5 	.word	0x08005fa5
 8005f84:	08005fbb 	.word	0x08005fbb
 8005f88:	08005fab 	.word	0x08005fab
 8005f8c:	08005fbb 	.word	0x08005fbb
 8005f90:	08005fbb 	.word	0x08005fbb
 8005f94:	08005fbb 	.word	0x08005fbb
 8005f98:	08005fb3 	.word	0x08005fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f9c:	f7fd fdd0 	bl	8003b40 <HAL_RCC_GetPCLK1Freq>
 8005fa0:	61f8      	str	r0, [r7, #28]
        break;
 8005fa2:	e010      	b.n	8005fc6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa4:	4b19      	ldr	r3, [pc, #100]	; (800600c <UART_SetConfig+0x2c0>)
 8005fa6:	61fb      	str	r3, [r7, #28]
        break;
 8005fa8:	e00d      	b.n	8005fc6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005faa:	f7fd fd31 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 8005fae:	61f8      	str	r0, [r7, #28]
        break;
 8005fb0:	e009      	b.n	8005fc6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fb6:	61fb      	str	r3, [r7, #28]
        break;
 8005fb8:	e005      	b.n	8005fc6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005fc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 8109 	beq.w	80061e0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	4413      	add	r3, r2
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d305      	bcc.n	8005fea <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d912      	bls.n	8006010 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ff0:	e0f6      	b.n	80061e0 <UART_SetConfig+0x494>
 8005ff2:	bf00      	nop
 8005ff4:	efff69f3 	.word	0xefff69f3
 8005ff8:	40008000 	.word	0x40008000
 8005ffc:	40013800 	.word	0x40013800
 8006000:	40021000 	.word	0x40021000
 8006004:	40004400 	.word	0x40004400
 8006008:	40004800 	.word	0x40004800
 800600c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	2200      	movs	r2, #0
 8006014:	461c      	mov	r4, r3
 8006016:	4615      	mov	r5, r2
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	022b      	lsls	r3, r5, #8
 8006022:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006026:	0222      	lsls	r2, r4, #8
 8006028:	68f9      	ldr	r1, [r7, #12]
 800602a:	6849      	ldr	r1, [r1, #4]
 800602c:	0849      	lsrs	r1, r1, #1
 800602e:	2000      	movs	r0, #0
 8006030:	4688      	mov	r8, r1
 8006032:	4681      	mov	r9, r0
 8006034:	eb12 0a08 	adds.w	sl, r2, r8
 8006038:	eb43 0b09 	adc.w	fp, r3, r9
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	607a      	str	r2, [r7, #4]
 8006046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800604a:	4650      	mov	r0, sl
 800604c:	4659      	mov	r1, fp
 800604e:	f7fa fdab 	bl	8000ba8 <__aeabi_uldivmod>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4613      	mov	r3, r2
 8006058:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006060:	d308      	bcc.n	8006074 <UART_SetConfig+0x328>
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006068:	d204      	bcs.n	8006074 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	e0b5      	b.n	80061e0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800607a:	e0b1      	b.n	80061e0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006084:	d15d      	bne.n	8006142 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006086:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800608a:	2b08      	cmp	r3, #8
 800608c:	d827      	bhi.n	80060de <UART_SetConfig+0x392>
 800608e:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <UART_SetConfig+0x348>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	080060b9 	.word	0x080060b9
 8006098:	080060c1 	.word	0x080060c1
 800609c:	080060c9 	.word	0x080060c9
 80060a0:	080060df 	.word	0x080060df
 80060a4:	080060cf 	.word	0x080060cf
 80060a8:	080060df 	.word	0x080060df
 80060ac:	080060df 	.word	0x080060df
 80060b0:	080060df 	.word	0x080060df
 80060b4:	080060d7 	.word	0x080060d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060b8:	f7fd fd42 	bl	8003b40 <HAL_RCC_GetPCLK1Freq>
 80060bc:	61f8      	str	r0, [r7, #28]
        break;
 80060be:	e014      	b.n	80060ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c0:	f7fd fd54 	bl	8003b6c <HAL_RCC_GetPCLK2Freq>
 80060c4:	61f8      	str	r0, [r7, #28]
        break;
 80060c6:	e010      	b.n	80060ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060c8:	4b4c      	ldr	r3, [pc, #304]	; (80061fc <UART_SetConfig+0x4b0>)
 80060ca:	61fb      	str	r3, [r7, #28]
        break;
 80060cc:	e00d      	b.n	80060ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ce:	f7fd fc9f 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 80060d2:	61f8      	str	r0, [r7, #28]
        break;
 80060d4:	e009      	b.n	80060ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060da:	61fb      	str	r3, [r7, #28]
        break;
 80060dc:	e005      	b.n	80060ea <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d077      	beq.n	80061e0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	005a      	lsls	r2, r3, #1
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	085b      	lsrs	r3, r3, #1
 80060fa:	441a      	add	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	fbb2 f3f3 	udiv	r3, r2, r3
 8006104:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	2b0f      	cmp	r3, #15
 800610a:	d916      	bls.n	800613a <UART_SetConfig+0x3ee>
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006112:	d212      	bcs.n	800613a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	b29b      	uxth	r3, r3
 8006118:	f023 030f 	bic.w	r3, r3, #15
 800611c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	085b      	lsrs	r3, r3, #1
 8006122:	b29b      	uxth	r3, r3
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	b29a      	uxth	r2, r3
 800612a:	8afb      	ldrh	r3, [r7, #22]
 800612c:	4313      	orrs	r3, r2
 800612e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	8afa      	ldrh	r2, [r7, #22]
 8006136:	60da      	str	r2, [r3, #12]
 8006138:	e052      	b.n	80061e0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006140:	e04e      	b.n	80061e0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006146:	2b08      	cmp	r3, #8
 8006148:	d827      	bhi.n	800619a <UART_SetConfig+0x44e>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <UART_SetConfig+0x404>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	08006175 	.word	0x08006175
 8006154:	0800617d 	.word	0x0800617d
 8006158:	08006185 	.word	0x08006185
 800615c:	0800619b 	.word	0x0800619b
 8006160:	0800618b 	.word	0x0800618b
 8006164:	0800619b 	.word	0x0800619b
 8006168:	0800619b 	.word	0x0800619b
 800616c:	0800619b 	.word	0x0800619b
 8006170:	08006193 	.word	0x08006193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006174:	f7fd fce4 	bl	8003b40 <HAL_RCC_GetPCLK1Freq>
 8006178:	61f8      	str	r0, [r7, #28]
        break;
 800617a:	e014      	b.n	80061a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800617c:	f7fd fcf6 	bl	8003b6c <HAL_RCC_GetPCLK2Freq>
 8006180:	61f8      	str	r0, [r7, #28]
        break;
 8006182:	e010      	b.n	80061a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006184:	4b1d      	ldr	r3, [pc, #116]	; (80061fc <UART_SetConfig+0x4b0>)
 8006186:	61fb      	str	r3, [r7, #28]
        break;
 8006188:	e00d      	b.n	80061a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800618a:	f7fd fc41 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 800618e:	61f8      	str	r0, [r7, #28]
        break;
 8006190:	e009      	b.n	80061a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006196:	61fb      	str	r3, [r7, #28]
        break;
 8006198:	e005      	b.n	80061a6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80061a4:	bf00      	nop
    }

    if (pclk != 0U)
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d019      	beq.n	80061e0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	085a      	lsrs	r2, r3, #1
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	441a      	add	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80061be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b0f      	cmp	r3, #15
 80061c4:	d909      	bls.n	80061da <UART_SetConfig+0x48e>
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061cc:	d205      	bcs.n	80061da <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60da      	str	r2, [r3, #12]
 80061d8:	e002      	b.n	80061e0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80061ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3728      	adds	r7, #40	; 0x28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061fa:	bf00      	nop
 80061fc:	00f42400 	.word	0x00f42400

08006200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01a      	beq.n	8006316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062fe:	d10a      	bne.n	8006316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	605a      	str	r2, [r3, #4]
  }
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af02      	add	r7, sp, #8
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006354:	f7fc faf8 	bl	8002948 <HAL_GetTick>
 8006358:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b08      	cmp	r3, #8
 8006366:	d10e      	bne.n	8006386 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f82d 	bl	80063d6 <UART_WaitOnFlagUntilTimeout>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e023      	b.n	80063ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b04      	cmp	r3, #4
 8006392:	d10e      	bne.n	80063b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f817 	bl	80063d6 <UART_WaitOnFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e00d      	b.n	80063ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b09c      	sub	sp, #112	; 0x70
 80063da:	af00      	add	r7, sp, #0
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	603b      	str	r3, [r7, #0]
 80063e2:	4613      	mov	r3, r2
 80063e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e6:	e0a5      	b.n	8006534 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ee:	f000 80a1 	beq.w	8006534 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f2:	f7fc faa9 	bl	8002948 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063fe:	429a      	cmp	r2, r3
 8006400:	d302      	bcc.n	8006408 <UART_WaitOnFlagUntilTimeout+0x32>
 8006402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006404:	2b00      	cmp	r3, #0
 8006406:	d13e      	bne.n	8006486 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006418:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800641c:	667b      	str	r3, [r7, #100]	; 0x64
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006428:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800642c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800642e:	e841 2300 	strex	r3, r2, [r1]
 8006432:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e6      	bne.n	8006408 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3308      	adds	r3, #8
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	f023 0301 	bic.w	r3, r3, #1
 8006450:	663b      	str	r3, [r7, #96]	; 0x60
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3308      	adds	r3, #8
 8006458:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800645a:	64ba      	str	r2, [r7, #72]	; 0x48
 800645c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e5      	bne.n	800643a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2220      	movs	r2, #32
 8006478:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e067      	b.n	8006556 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d04f      	beq.n	8006534 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800649e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a2:	d147      	bne.n	8006534 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
 80064ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e6      	bne.n	80064ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3308      	adds	r3, #8
 80064e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	613b      	str	r3, [r7, #16]
   return(result);
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f023 0301 	bic.w	r3, r3, #1
 80064f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3308      	adds	r3, #8
 80064fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006500:	623a      	str	r2, [r7, #32]
 8006502:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	69f9      	ldr	r1, [r7, #28]
 8006506:	6a3a      	ldr	r2, [r7, #32]
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	61bb      	str	r3, [r7, #24]
   return(result);
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e5      	bne.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2220      	movs	r2, #32
 8006518:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2220      	movs	r2, #32
 800651e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2220      	movs	r2, #32
 8006524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e010      	b.n	8006556 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	69da      	ldr	r2, [r3, #28]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4013      	ands	r3, r2
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	429a      	cmp	r2, r3
 8006542:	bf0c      	ite	eq
 8006544:	2301      	moveq	r3, #1
 8006546:	2300      	movne	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	429a      	cmp	r2, r3
 8006550:	f43f af4a 	beq.w	80063e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3770      	adds	r7, #112	; 0x70
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <setCSLine>:
#define RES14           14

#define AMT22_DELAY     10

void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	807b      	strh	r3, [r7, #2]
 800656a:	4613      	mov	r3, r2
 800656c:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 800656e:	787a      	ldrb	r2, [r7, #1]
 8006570:	887b      	ldrh	r3, [r7, #2]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fc fca3 	bl	8002ec0 <HAL_GPIO_WritePin>
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b088      	sub	sp, #32
 8006586:	af02      	add	r7, sp, #8
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	461a      	mov	r2, r3
 800658e:	460b      	mov	r3, r1
 8006590:	72fb      	strb	r3, [r7, #11]
 8006592:	4613      	mov	r3, r2
 8006594:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 8006596:	893b      	ldrh	r3, [r7, #8]
 8006598:	2200      	movs	r2, #0
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7ff ffde 	bl	800655e <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 80065a2:	200a      	movs	r0, #10
 80065a4:	f000 f8fa 	bl	800679c <delay_us_AMT22>

  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 80065a8:	f107 0217 	add.w	r2, r7, #23
 80065ac:	f107 010b 	add.w	r1, r7, #11
 80065b0:	230a      	movs	r3, #10
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	2301      	movs	r3, #1
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7fd ff2d 	bl	8004416 <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  //  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 80065bc:	200a      	movs	r0, #10
 80065be:	f000 f8ed 	bl	800679c <delay_us_AMT22>

  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 80065c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80065c6:	893b      	ldrh	r3, [r7, #8]
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff ffc7 	bl	800655e <setCSLine>

  return data;
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b08c      	sub	sp, #48	; 0x30
 80065de:	af02      	add	r7, sp, #8
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	60b9      	str	r1, [r7, #8]
 80065e4:	4611      	mov	r1, r2
 80065e6:	461a      	mov	r2, r3
 80065e8:	460b      	mov	r3, r1
 80065ea:	80fb      	strh	r3, [r7, #6]
 80065ec:	4613      	mov	r3, r2
 80065ee:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8;
 80065f0:	88fa      	ldrh	r2, [r7, #6]
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	9301      	str	r3, [sp, #4]
 80065f6:	2300      	movs	r3, #0
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	4613      	mov	r3, r2
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	2100      	movs	r1, #0
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f7ff ffbe 	bl	8006582 <spiWriteRead>
 8006606:	4603      	mov	r3, r0
 8006608:	b29b      	uxth	r3, r3
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 800660e:	200a      	movs	r0, #10
 8006610:	f000 f8c4 	bl	800679c <delay_us_AMT22>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer);
 8006614:	88fa      	ldrh	r2, [r7, #6]
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	2301      	movs	r3, #1
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	4613      	mov	r3, r2
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	2100      	movs	r1, #0
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f7ff ffac 	bl	8006582 <spiWriteRead>
 800662a:	4603      	mov	r3, r0
 800662c:	b29a      	uxth	r2, r3
 800662e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006630:	4313      	orrs	r3, r2
 8006632:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 8006634:	2300      	movs	r3, #0
 8006636:	623b      	str	r3, [r7, #32]
 8006638:	e010      	b.n	800665c <getPositionSPI+0x82>
 800663a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	fa42 f303 	asr.w	r3, r2, r3
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	b2d9      	uxtb	r1, r3
 800664a:	f107 0210 	add.w	r2, r7, #16
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	4413      	add	r3, r2
 8006652:	460a      	mov	r2, r1
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	3301      	adds	r3, #1
 800665a:	623b      	str	r3, [r7, #32]
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	2b0f      	cmp	r3, #15
 8006660:	ddeb      	ble.n	800663a <getPositionSPI+0x60>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
 if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8006662:	7ffb      	ldrb	r3, [r7, #31]
 8006664:	4619      	mov	r1, r3
 8006666:	7f7a      	ldrb	r2, [r7, #29]
 8006668:	7efb      	ldrb	r3, [r7, #27]
 800666a:	4053      	eors	r3, r2
 800666c:	b2da      	uxtb	r2, r3
 800666e:	7e7b      	ldrb	r3, [r7, #25]
 8006670:	4053      	eors	r3, r2
 8006672:	b2da      	uxtb	r2, r3
 8006674:	7dfb      	ldrb	r3, [r7, #23]
 8006676:	4053      	eors	r3, r2
 8006678:	b2da      	uxtb	r2, r3
 800667a:	7d7b      	ldrb	r3, [r7, #21]
 800667c:	4053      	eors	r3, r2
 800667e:	b2da      	uxtb	r2, r3
 8006680:	7cfb      	ldrb	r3, [r7, #19]
 8006682:	4053      	eors	r3, r2
 8006684:	b2da      	uxtb	r2, r3
 8006686:	7c7b      	ldrb	r3, [r7, #17]
 8006688:	429a      	cmp	r2, r3
 800668a:	bf0c      	ite	eq
 800668c:	2301      	moveq	r3, #1
 800668e:	2300      	movne	r3, #0
 8006690:	b2db      	uxtb	r3, r3
 8006692:	4299      	cmp	r1, r3
 8006694:	d11e      	bne.n	80066d4 <getPositionSPI+0xfa>
         && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8006696:	7fbb      	ldrb	r3, [r7, #30]
 8006698:	4619      	mov	r1, r3
 800669a:	7f3a      	ldrb	r2, [r7, #28]
 800669c:	7ebb      	ldrb	r3, [r7, #26]
 800669e:	4053      	eors	r3, r2
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	7e3b      	ldrb	r3, [r7, #24]
 80066a4:	4053      	eors	r3, r2
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	7dbb      	ldrb	r3, [r7, #22]
 80066aa:	4053      	eors	r3, r2
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	7d3b      	ldrb	r3, [r7, #20]
 80066b0:	4053      	eors	r3, r2
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	7cbb      	ldrb	r3, [r7, #18]
 80066b6:	4053      	eors	r3, r2
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	7c3b      	ldrb	r3, [r7, #16]
 80066bc:	429a      	cmp	r2, r3
 80066be:	bf0c      	ite	eq
 80066c0:	2301      	moveq	r3, #1
 80066c2:	2300      	movne	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	4299      	cmp	r1, r3
 80066c8:	d104      	bne.n	80066d4 <getPositionSPI+0xfa>
   {
     //we got back a good position, so just mask away the checkbits
     currentPosition &= 0x3FFF;
 80066ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80066d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80066d2:	e002      	b.n	80066da <getPositionSPI+0x100>
   }
 else
 {
   currentPosition = 0xFFFF; //bad position
 80066d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 }
  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 80066da:	797b      	ldrb	r3, [r7, #5]
 80066dc:	2b0c      	cmp	r3, #12
 80066de:	d107      	bne.n	80066f0 <getPositionSPI+0x116>
 80066e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d002      	beq.n	80066f0 <getPositionSPI+0x116>
 80066ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066ec:	089b      	lsrs	r3, r3, #2
 80066ee:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 80066f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3728      	adds	r7, #40	; 0x28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <setZeroSPI>:

void setZeroSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, TIM_HandleTypeDef *timer)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af02      	add	r7, sp, #8
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	603b      	str	r3, [r7, #0]
 8006706:	4613      	mov	r3, r2
 8006708:	80fb      	strh	r3, [r7, #6]
  spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer);
 800670a:	88fa      	ldrh	r2, [r7, #6]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	2300      	movs	r3, #0
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	4613      	mov	r3, r2
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	2100      	movs	r1, #0
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f7ff ff31 	bl	8006582 <spiWriteRead>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
//  delay(timer, 3);
  delay_us_AMT22(3);
 8006720:	2003      	movs	r0, #3
 8006722:	f000 f83b 	bl	800679c <delay_us_AMT22>

  spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1, timer);
 8006726:	88fa      	ldrh	r2, [r7, #6]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	9301      	str	r3, [sp, #4]
 800672c:	2301      	movs	r3, #1
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	4613      	mov	r3, r2
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	2170      	movs	r1, #112	; 0x70
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f7ff ff23 	bl	8006582 <spiWriteRead>


//  delay(timer, 250);
  delay_us_AMT22(250);
 800673c:	20fa      	movs	r0, #250	; 0xfa
 800673e:	f000 f82d 	bl	800679c <delay_us_AMT22>
}
 8006742:	bf00      	nop
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <resetAMT22>:

void resetAMT22(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, TIM_HandleTypeDef *timer)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b086      	sub	sp, #24
 800674e:	af02      	add	r7, sp, #8
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	60b9      	str	r1, [r7, #8]
 8006754:	603b      	str	r3, [r7, #0]
 8006756:	4613      	mov	r3, r2
 8006758:	80fb      	strh	r3, [r7, #6]
  spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer);
 800675a:	88fa      	ldrh	r2, [r7, #6]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	9301      	str	r3, [sp, #4]
 8006760:	2300      	movs	r3, #0
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	4613      	mov	r3, r2
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	2100      	movs	r1, #0
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7ff ff09 	bl	8006582 <spiWriteRead>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006770:	200a      	movs	r0, #10
 8006772:	f000 f813 	bl	800679c <delay_us_AMT22>

  spiWriteRead(hspi, AMT22_RESET, encoderPort, encoderPin, 1, timer);
 8006776:	88fa      	ldrh	r2, [r7, #6]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	9301      	str	r3, [sp, #4]
 800677c:	2301      	movs	r3, #1
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	4613      	mov	r3, r2
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	2160      	movs	r1, #96	; 0x60
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff fefb 	bl	8006582 <spiWriteRead>

//  delay(timer, 250);
  delay_us_AMT22(250);
 800678c:	20fa      	movs	r0, #250	; 0xfa
 800678e:	f000 f805 	bl	800679c <delay_us_AMT22>
}
 8006792:	bf00      	nop
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <delay_us_AMT22>:
			passedTime +=timer->Init.Period;
		}
	}
}
void delay_us_AMT22 (uint16_t us)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	4603      	mov	r3, r0
 80067a4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80067a6:	4b09      	ldr	r3, [pc, #36]	; (80067cc <delay_us_AMT22+0x30>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2200      	movs	r2, #0
 80067ac:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80067ae:	bf00      	nop
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <delay_us_AMT22+0x30>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067b6:	88fb      	ldrh	r3, [r7, #6]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d3f9      	bcc.n	80067b0 <delay_us_AMT22+0x14>
}
 80067bc:	bf00      	nop
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	20000500 	.word	0x20000500

080067d0 <_Znaj>:
 80067d0:	f000 b800 	b.w	80067d4 <_Znwj>

080067d4 <_Znwj>:
 80067d4:	2801      	cmp	r0, #1
 80067d6:	bf38      	it	cc
 80067d8:	2001      	movcc	r0, #1
 80067da:	b510      	push	{r4, lr}
 80067dc:	4604      	mov	r4, r0
 80067de:	4620      	mov	r0, r4
 80067e0:	f000 f844 	bl	800686c <malloc>
 80067e4:	b930      	cbnz	r0, 80067f4 <_Znwj+0x20>
 80067e6:	f000 f807 	bl	80067f8 <_ZSt15get_new_handlerv>
 80067ea:	b908      	cbnz	r0, 80067f0 <_Znwj+0x1c>
 80067ec:	f000 f80c 	bl	8006808 <abort>
 80067f0:	4780      	blx	r0
 80067f2:	e7f4      	b.n	80067de <_Znwj+0xa>
 80067f4:	bd10      	pop	{r4, pc}
	...

080067f8 <_ZSt15get_new_handlerv>:
 80067f8:	4b02      	ldr	r3, [pc, #8]	; (8006804 <_ZSt15get_new_handlerv+0xc>)
 80067fa:	6818      	ldr	r0, [r3, #0]
 80067fc:	f3bf 8f5b 	dmb	ish
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20000620 	.word	0x20000620

08006808 <abort>:
 8006808:	b508      	push	{r3, lr}
 800680a:	2006      	movs	r0, #6
 800680c:	f000 fe62 	bl	80074d4 <raise>
 8006810:	2001      	movs	r0, #1
 8006812:	f7fb f82f 	bl	8001874 <_exit>
	...

08006818 <__errno>:
 8006818:	4b01      	ldr	r3, [pc, #4]	; (8006820 <__errno+0x8>)
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	2000003c 	.word	0x2000003c

08006824 <__libc_init_array>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	4d0d      	ldr	r5, [pc, #52]	; (800685c <__libc_init_array+0x38>)
 8006828:	4c0d      	ldr	r4, [pc, #52]	; (8006860 <__libc_init_array+0x3c>)
 800682a:	1b64      	subs	r4, r4, r5
 800682c:	10a4      	asrs	r4, r4, #2
 800682e:	2600      	movs	r6, #0
 8006830:	42a6      	cmp	r6, r4
 8006832:	d109      	bne.n	8006848 <__libc_init_array+0x24>
 8006834:	4d0b      	ldr	r5, [pc, #44]	; (8006864 <__libc_init_array+0x40>)
 8006836:	4c0c      	ldr	r4, [pc, #48]	; (8006868 <__libc_init_array+0x44>)
 8006838:	f003 f9c4 	bl	8009bc4 <_init>
 800683c:	1b64      	subs	r4, r4, r5
 800683e:	10a4      	asrs	r4, r4, #2
 8006840:	2600      	movs	r6, #0
 8006842:	42a6      	cmp	r6, r4
 8006844:	d105      	bne.n	8006852 <__libc_init_array+0x2e>
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	f855 3b04 	ldr.w	r3, [r5], #4
 800684c:	4798      	blx	r3
 800684e:	3601      	adds	r6, #1
 8006850:	e7ee      	b.n	8006830 <__libc_init_array+0xc>
 8006852:	f855 3b04 	ldr.w	r3, [r5], #4
 8006856:	4798      	blx	r3
 8006858:	3601      	adds	r6, #1
 800685a:	e7f2      	b.n	8006842 <__libc_init_array+0x1e>
 800685c:	0800a6ec 	.word	0x0800a6ec
 8006860:	0800a6ec 	.word	0x0800a6ec
 8006864:	0800a6ec 	.word	0x0800a6ec
 8006868:	0800a6f4 	.word	0x0800a6f4

0800686c <malloc>:
 800686c:	4b02      	ldr	r3, [pc, #8]	; (8006878 <malloc+0xc>)
 800686e:	4601      	mov	r1, r0
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	f000 b877 	b.w	8006964 <_malloc_r>
 8006876:	bf00      	nop
 8006878:	2000003c 	.word	0x2000003c

0800687c <memset>:
 800687c:	4402      	add	r2, r0
 800687e:	4603      	mov	r3, r0
 8006880:	4293      	cmp	r3, r2
 8006882:	d100      	bne.n	8006886 <memset+0xa>
 8006884:	4770      	bx	lr
 8006886:	f803 1b01 	strb.w	r1, [r3], #1
 800688a:	e7f9      	b.n	8006880 <memset+0x4>

0800688c <_free_r>:
 800688c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800688e:	2900      	cmp	r1, #0
 8006890:	d044      	beq.n	800691c <_free_r+0x90>
 8006892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006896:	9001      	str	r0, [sp, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f1a1 0404 	sub.w	r4, r1, #4
 800689e:	bfb8      	it	lt
 80068a0:	18e4      	addlt	r4, r4, r3
 80068a2:	f002 f8d3 	bl	8008a4c <__malloc_lock>
 80068a6:	4a1e      	ldr	r2, [pc, #120]	; (8006920 <_free_r+0x94>)
 80068a8:	9801      	ldr	r0, [sp, #4]
 80068aa:	6813      	ldr	r3, [r2, #0]
 80068ac:	b933      	cbnz	r3, 80068bc <_free_r+0x30>
 80068ae:	6063      	str	r3, [r4, #4]
 80068b0:	6014      	str	r4, [r2, #0]
 80068b2:	b003      	add	sp, #12
 80068b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068b8:	f002 b8ce 	b.w	8008a58 <__malloc_unlock>
 80068bc:	42a3      	cmp	r3, r4
 80068be:	d908      	bls.n	80068d2 <_free_r+0x46>
 80068c0:	6825      	ldr	r5, [r4, #0]
 80068c2:	1961      	adds	r1, r4, r5
 80068c4:	428b      	cmp	r3, r1
 80068c6:	bf01      	itttt	eq
 80068c8:	6819      	ldreq	r1, [r3, #0]
 80068ca:	685b      	ldreq	r3, [r3, #4]
 80068cc:	1949      	addeq	r1, r1, r5
 80068ce:	6021      	streq	r1, [r4, #0]
 80068d0:	e7ed      	b.n	80068ae <_free_r+0x22>
 80068d2:	461a      	mov	r2, r3
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	b10b      	cbz	r3, 80068dc <_free_r+0x50>
 80068d8:	42a3      	cmp	r3, r4
 80068da:	d9fa      	bls.n	80068d2 <_free_r+0x46>
 80068dc:	6811      	ldr	r1, [r2, #0]
 80068de:	1855      	adds	r5, r2, r1
 80068e0:	42a5      	cmp	r5, r4
 80068e2:	d10b      	bne.n	80068fc <_free_r+0x70>
 80068e4:	6824      	ldr	r4, [r4, #0]
 80068e6:	4421      	add	r1, r4
 80068e8:	1854      	adds	r4, r2, r1
 80068ea:	42a3      	cmp	r3, r4
 80068ec:	6011      	str	r1, [r2, #0]
 80068ee:	d1e0      	bne.n	80068b2 <_free_r+0x26>
 80068f0:	681c      	ldr	r4, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	6053      	str	r3, [r2, #4]
 80068f6:	4421      	add	r1, r4
 80068f8:	6011      	str	r1, [r2, #0]
 80068fa:	e7da      	b.n	80068b2 <_free_r+0x26>
 80068fc:	d902      	bls.n	8006904 <_free_r+0x78>
 80068fe:	230c      	movs	r3, #12
 8006900:	6003      	str	r3, [r0, #0]
 8006902:	e7d6      	b.n	80068b2 <_free_r+0x26>
 8006904:	6825      	ldr	r5, [r4, #0]
 8006906:	1961      	adds	r1, r4, r5
 8006908:	428b      	cmp	r3, r1
 800690a:	bf04      	itt	eq
 800690c:	6819      	ldreq	r1, [r3, #0]
 800690e:	685b      	ldreq	r3, [r3, #4]
 8006910:	6063      	str	r3, [r4, #4]
 8006912:	bf04      	itt	eq
 8006914:	1949      	addeq	r1, r1, r5
 8006916:	6021      	streq	r1, [r4, #0]
 8006918:	6054      	str	r4, [r2, #4]
 800691a:	e7ca      	b.n	80068b2 <_free_r+0x26>
 800691c:	b003      	add	sp, #12
 800691e:	bd30      	pop	{r4, r5, pc}
 8006920:	20000624 	.word	0x20000624

08006924 <sbrk_aligned>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	4e0e      	ldr	r6, [pc, #56]	; (8006960 <sbrk_aligned+0x3c>)
 8006928:	460c      	mov	r4, r1
 800692a:	6831      	ldr	r1, [r6, #0]
 800692c:	4605      	mov	r5, r0
 800692e:	b911      	cbnz	r1, 8006936 <sbrk_aligned+0x12>
 8006930:	f000 fd98 	bl	8007464 <_sbrk_r>
 8006934:	6030      	str	r0, [r6, #0]
 8006936:	4621      	mov	r1, r4
 8006938:	4628      	mov	r0, r5
 800693a:	f000 fd93 	bl	8007464 <_sbrk_r>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d00a      	beq.n	8006958 <sbrk_aligned+0x34>
 8006942:	1cc4      	adds	r4, r0, #3
 8006944:	f024 0403 	bic.w	r4, r4, #3
 8006948:	42a0      	cmp	r0, r4
 800694a:	d007      	beq.n	800695c <sbrk_aligned+0x38>
 800694c:	1a21      	subs	r1, r4, r0
 800694e:	4628      	mov	r0, r5
 8006950:	f000 fd88 	bl	8007464 <_sbrk_r>
 8006954:	3001      	adds	r0, #1
 8006956:	d101      	bne.n	800695c <sbrk_aligned+0x38>
 8006958:	f04f 34ff 	mov.w	r4, #4294967295
 800695c:	4620      	mov	r0, r4
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	20000628 	.word	0x20000628

08006964 <_malloc_r>:
 8006964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006968:	1ccd      	adds	r5, r1, #3
 800696a:	f025 0503 	bic.w	r5, r5, #3
 800696e:	3508      	adds	r5, #8
 8006970:	2d0c      	cmp	r5, #12
 8006972:	bf38      	it	cc
 8006974:	250c      	movcc	r5, #12
 8006976:	2d00      	cmp	r5, #0
 8006978:	4607      	mov	r7, r0
 800697a:	db01      	blt.n	8006980 <_malloc_r+0x1c>
 800697c:	42a9      	cmp	r1, r5
 800697e:	d905      	bls.n	800698c <_malloc_r+0x28>
 8006980:	230c      	movs	r3, #12
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	2600      	movs	r6, #0
 8006986:	4630      	mov	r0, r6
 8006988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800698c:	4e2e      	ldr	r6, [pc, #184]	; (8006a48 <_malloc_r+0xe4>)
 800698e:	f002 f85d 	bl	8008a4c <__malloc_lock>
 8006992:	6833      	ldr	r3, [r6, #0]
 8006994:	461c      	mov	r4, r3
 8006996:	bb34      	cbnz	r4, 80069e6 <_malloc_r+0x82>
 8006998:	4629      	mov	r1, r5
 800699a:	4638      	mov	r0, r7
 800699c:	f7ff ffc2 	bl	8006924 <sbrk_aligned>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	4604      	mov	r4, r0
 80069a4:	d14d      	bne.n	8006a42 <_malloc_r+0xde>
 80069a6:	6834      	ldr	r4, [r6, #0]
 80069a8:	4626      	mov	r6, r4
 80069aa:	2e00      	cmp	r6, #0
 80069ac:	d140      	bne.n	8006a30 <_malloc_r+0xcc>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	4631      	mov	r1, r6
 80069b2:	4638      	mov	r0, r7
 80069b4:	eb04 0803 	add.w	r8, r4, r3
 80069b8:	f000 fd54 	bl	8007464 <_sbrk_r>
 80069bc:	4580      	cmp	r8, r0
 80069be:	d13a      	bne.n	8006a36 <_malloc_r+0xd2>
 80069c0:	6821      	ldr	r1, [r4, #0]
 80069c2:	3503      	adds	r5, #3
 80069c4:	1a6d      	subs	r5, r5, r1
 80069c6:	f025 0503 	bic.w	r5, r5, #3
 80069ca:	3508      	adds	r5, #8
 80069cc:	2d0c      	cmp	r5, #12
 80069ce:	bf38      	it	cc
 80069d0:	250c      	movcc	r5, #12
 80069d2:	4629      	mov	r1, r5
 80069d4:	4638      	mov	r0, r7
 80069d6:	f7ff ffa5 	bl	8006924 <sbrk_aligned>
 80069da:	3001      	adds	r0, #1
 80069dc:	d02b      	beq.n	8006a36 <_malloc_r+0xd2>
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	442b      	add	r3, r5
 80069e2:	6023      	str	r3, [r4, #0]
 80069e4:	e00e      	b.n	8006a04 <_malloc_r+0xa0>
 80069e6:	6822      	ldr	r2, [r4, #0]
 80069e8:	1b52      	subs	r2, r2, r5
 80069ea:	d41e      	bmi.n	8006a2a <_malloc_r+0xc6>
 80069ec:	2a0b      	cmp	r2, #11
 80069ee:	d916      	bls.n	8006a1e <_malloc_r+0xba>
 80069f0:	1961      	adds	r1, r4, r5
 80069f2:	42a3      	cmp	r3, r4
 80069f4:	6025      	str	r5, [r4, #0]
 80069f6:	bf18      	it	ne
 80069f8:	6059      	strne	r1, [r3, #4]
 80069fa:	6863      	ldr	r3, [r4, #4]
 80069fc:	bf08      	it	eq
 80069fe:	6031      	streq	r1, [r6, #0]
 8006a00:	5162      	str	r2, [r4, r5]
 8006a02:	604b      	str	r3, [r1, #4]
 8006a04:	4638      	mov	r0, r7
 8006a06:	f104 060b 	add.w	r6, r4, #11
 8006a0a:	f002 f825 	bl	8008a58 <__malloc_unlock>
 8006a0e:	f026 0607 	bic.w	r6, r6, #7
 8006a12:	1d23      	adds	r3, r4, #4
 8006a14:	1af2      	subs	r2, r6, r3
 8006a16:	d0b6      	beq.n	8006986 <_malloc_r+0x22>
 8006a18:	1b9b      	subs	r3, r3, r6
 8006a1a:	50a3      	str	r3, [r4, r2]
 8006a1c:	e7b3      	b.n	8006986 <_malloc_r+0x22>
 8006a1e:	6862      	ldr	r2, [r4, #4]
 8006a20:	42a3      	cmp	r3, r4
 8006a22:	bf0c      	ite	eq
 8006a24:	6032      	streq	r2, [r6, #0]
 8006a26:	605a      	strne	r2, [r3, #4]
 8006a28:	e7ec      	b.n	8006a04 <_malloc_r+0xa0>
 8006a2a:	4623      	mov	r3, r4
 8006a2c:	6864      	ldr	r4, [r4, #4]
 8006a2e:	e7b2      	b.n	8006996 <_malloc_r+0x32>
 8006a30:	4634      	mov	r4, r6
 8006a32:	6876      	ldr	r6, [r6, #4]
 8006a34:	e7b9      	b.n	80069aa <_malloc_r+0x46>
 8006a36:	230c      	movs	r3, #12
 8006a38:	603b      	str	r3, [r7, #0]
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	f002 f80c 	bl	8008a58 <__malloc_unlock>
 8006a40:	e7a1      	b.n	8006986 <_malloc_r+0x22>
 8006a42:	6025      	str	r5, [r4, #0]
 8006a44:	e7de      	b.n	8006a04 <_malloc_r+0xa0>
 8006a46:	bf00      	nop
 8006a48:	20000624 	.word	0x20000624

08006a4c <__cvt>:
 8006a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a50:	ec55 4b10 	vmov	r4, r5, d0
 8006a54:	2d00      	cmp	r5, #0
 8006a56:	460e      	mov	r6, r1
 8006a58:	4619      	mov	r1, r3
 8006a5a:	462b      	mov	r3, r5
 8006a5c:	bfbb      	ittet	lt
 8006a5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a62:	461d      	movlt	r5, r3
 8006a64:	2300      	movge	r3, #0
 8006a66:	232d      	movlt	r3, #45	; 0x2d
 8006a68:	700b      	strb	r3, [r1, #0]
 8006a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a70:	4691      	mov	r9, r2
 8006a72:	f023 0820 	bic.w	r8, r3, #32
 8006a76:	bfbc      	itt	lt
 8006a78:	4622      	movlt	r2, r4
 8006a7a:	4614      	movlt	r4, r2
 8006a7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a80:	d005      	beq.n	8006a8e <__cvt+0x42>
 8006a82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a86:	d100      	bne.n	8006a8a <__cvt+0x3e>
 8006a88:	3601      	adds	r6, #1
 8006a8a:	2102      	movs	r1, #2
 8006a8c:	e000      	b.n	8006a90 <__cvt+0x44>
 8006a8e:	2103      	movs	r1, #3
 8006a90:	ab03      	add	r3, sp, #12
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	ab02      	add	r3, sp, #8
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	ec45 4b10 	vmov	d0, r4, r5
 8006a9c:	4653      	mov	r3, sl
 8006a9e:	4632      	mov	r2, r6
 8006aa0:	f000 ffda 	bl	8007a58 <_dtoa_r>
 8006aa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006aa8:	4607      	mov	r7, r0
 8006aaa:	d102      	bne.n	8006ab2 <__cvt+0x66>
 8006aac:	f019 0f01 	tst.w	r9, #1
 8006ab0:	d022      	beq.n	8006af8 <__cvt+0xac>
 8006ab2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ab6:	eb07 0906 	add.w	r9, r7, r6
 8006aba:	d110      	bne.n	8006ade <__cvt+0x92>
 8006abc:	783b      	ldrb	r3, [r7, #0]
 8006abe:	2b30      	cmp	r3, #48	; 0x30
 8006ac0:	d10a      	bne.n	8006ad8 <__cvt+0x8c>
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	4629      	mov	r1, r5
 8006aca:	f7f9 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ace:	b918      	cbnz	r0, 8006ad8 <__cvt+0x8c>
 8006ad0:	f1c6 0601 	rsb	r6, r6, #1
 8006ad4:	f8ca 6000 	str.w	r6, [sl]
 8006ad8:	f8da 3000 	ldr.w	r3, [sl]
 8006adc:	4499      	add	r9, r3
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	f7f9 ffef 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aea:	b108      	cbz	r0, 8006af0 <__cvt+0xa4>
 8006aec:	f8cd 900c 	str.w	r9, [sp, #12]
 8006af0:	2230      	movs	r2, #48	; 0x30
 8006af2:	9b03      	ldr	r3, [sp, #12]
 8006af4:	454b      	cmp	r3, r9
 8006af6:	d307      	bcc.n	8006b08 <__cvt+0xbc>
 8006af8:	9b03      	ldr	r3, [sp, #12]
 8006afa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006afc:	1bdb      	subs	r3, r3, r7
 8006afe:	4638      	mov	r0, r7
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	b004      	add	sp, #16
 8006b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b08:	1c59      	adds	r1, r3, #1
 8006b0a:	9103      	str	r1, [sp, #12]
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	e7f0      	b.n	8006af2 <__cvt+0xa6>

08006b10 <__exponent>:
 8006b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b12:	4603      	mov	r3, r0
 8006b14:	2900      	cmp	r1, #0
 8006b16:	bfb8      	it	lt
 8006b18:	4249      	neglt	r1, r1
 8006b1a:	f803 2b02 	strb.w	r2, [r3], #2
 8006b1e:	bfb4      	ite	lt
 8006b20:	222d      	movlt	r2, #45	; 0x2d
 8006b22:	222b      	movge	r2, #43	; 0x2b
 8006b24:	2909      	cmp	r1, #9
 8006b26:	7042      	strb	r2, [r0, #1]
 8006b28:	dd2a      	ble.n	8006b80 <__exponent+0x70>
 8006b2a:	f10d 0407 	add.w	r4, sp, #7
 8006b2e:	46a4      	mov	ip, r4
 8006b30:	270a      	movs	r7, #10
 8006b32:	46a6      	mov	lr, r4
 8006b34:	460a      	mov	r2, r1
 8006b36:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b3a:	fb07 1516 	mls	r5, r7, r6, r1
 8006b3e:	3530      	adds	r5, #48	; 0x30
 8006b40:	2a63      	cmp	r2, #99	; 0x63
 8006b42:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	dcf1      	bgt.n	8006b32 <__exponent+0x22>
 8006b4e:	3130      	adds	r1, #48	; 0x30
 8006b50:	f1ae 0502 	sub.w	r5, lr, #2
 8006b54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b58:	1c44      	adds	r4, r0, #1
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	4561      	cmp	r1, ip
 8006b5e:	d30a      	bcc.n	8006b76 <__exponent+0x66>
 8006b60:	f10d 0209 	add.w	r2, sp, #9
 8006b64:	eba2 020e 	sub.w	r2, r2, lr
 8006b68:	4565      	cmp	r5, ip
 8006b6a:	bf88      	it	hi
 8006b6c:	2200      	movhi	r2, #0
 8006b6e:	4413      	add	r3, r2
 8006b70:	1a18      	subs	r0, r3, r0
 8006b72:	b003      	add	sp, #12
 8006b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b7e:	e7ed      	b.n	8006b5c <__exponent+0x4c>
 8006b80:	2330      	movs	r3, #48	; 0x30
 8006b82:	3130      	adds	r1, #48	; 0x30
 8006b84:	7083      	strb	r3, [r0, #2]
 8006b86:	70c1      	strb	r1, [r0, #3]
 8006b88:	1d03      	adds	r3, r0, #4
 8006b8a:	e7f1      	b.n	8006b70 <__exponent+0x60>

08006b8c <_printf_float>:
 8006b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b90:	ed2d 8b02 	vpush	{d8}
 8006b94:	b08d      	sub	sp, #52	; 0x34
 8006b96:	460c      	mov	r4, r1
 8006b98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b9c:	4616      	mov	r6, r2
 8006b9e:	461f      	mov	r7, r3
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	f001 ff3d 	bl	8008a20 <_localeconv_r>
 8006ba6:	f8d0 a000 	ldr.w	sl, [r0]
 8006baa:	4650      	mov	r0, sl
 8006bac:	f7f9 fb10 	bl	80001d0 <strlen>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	9305      	str	r3, [sp, #20]
 8006bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8006bbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006bc0:	3307      	adds	r3, #7
 8006bc2:	f023 0307 	bic.w	r3, r3, #7
 8006bc6:	f103 0208 	add.w	r2, r3, #8
 8006bca:	f8c8 2000 	str.w	r2, [r8]
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006bda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bde:	9307      	str	r3, [sp, #28]
 8006be0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006be4:	ee08 0a10 	vmov	s16, r0
 8006be8:	4b9f      	ldr	r3, [pc, #636]	; (8006e68 <_printf_float+0x2dc>)
 8006bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bee:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf2:	f7f9 ff9b 	bl	8000b2c <__aeabi_dcmpun>
 8006bf6:	bb88      	cbnz	r0, 8006c5c <_printf_float+0xd0>
 8006bf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bfc:	4b9a      	ldr	r3, [pc, #616]	; (8006e68 <_printf_float+0x2dc>)
 8006bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006c02:	f7f9 ff75 	bl	8000af0 <__aeabi_dcmple>
 8006c06:	bb48      	cbnz	r0, 8006c5c <_printf_float+0xd0>
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	4649      	mov	r1, r9
 8006c10:	f7f9 ff64 	bl	8000adc <__aeabi_dcmplt>
 8006c14:	b110      	cbz	r0, 8006c1c <_printf_float+0x90>
 8006c16:	232d      	movs	r3, #45	; 0x2d
 8006c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c1c:	4b93      	ldr	r3, [pc, #588]	; (8006e6c <_printf_float+0x2e0>)
 8006c1e:	4894      	ldr	r0, [pc, #592]	; (8006e70 <_printf_float+0x2e4>)
 8006c20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c24:	bf94      	ite	ls
 8006c26:	4698      	movls	r8, r3
 8006c28:	4680      	movhi	r8, r0
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	6123      	str	r3, [r4, #16]
 8006c2e:	9b05      	ldr	r3, [sp, #20]
 8006c30:	f023 0204 	bic.w	r2, r3, #4
 8006c34:	6022      	str	r2, [r4, #0]
 8006c36:	f04f 0900 	mov.w	r9, #0
 8006c3a:	9700      	str	r7, [sp, #0]
 8006c3c:	4633      	mov	r3, r6
 8006c3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c40:	4621      	mov	r1, r4
 8006c42:	4628      	mov	r0, r5
 8006c44:	f000 f9d8 	bl	8006ff8 <_printf_common>
 8006c48:	3001      	adds	r0, #1
 8006c4a:	f040 8090 	bne.w	8006d6e <_printf_float+0x1e2>
 8006c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c52:	b00d      	add	sp, #52	; 0x34
 8006c54:	ecbd 8b02 	vpop	{d8}
 8006c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5c:	4642      	mov	r2, r8
 8006c5e:	464b      	mov	r3, r9
 8006c60:	4640      	mov	r0, r8
 8006c62:	4649      	mov	r1, r9
 8006c64:	f7f9 ff62 	bl	8000b2c <__aeabi_dcmpun>
 8006c68:	b140      	cbz	r0, 8006c7c <_printf_float+0xf0>
 8006c6a:	464b      	mov	r3, r9
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	bfbc      	itt	lt
 8006c70:	232d      	movlt	r3, #45	; 0x2d
 8006c72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c76:	487f      	ldr	r0, [pc, #508]	; (8006e74 <_printf_float+0x2e8>)
 8006c78:	4b7f      	ldr	r3, [pc, #508]	; (8006e78 <_printf_float+0x2ec>)
 8006c7a:	e7d1      	b.n	8006c20 <_printf_float+0x94>
 8006c7c:	6863      	ldr	r3, [r4, #4]
 8006c7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c82:	9206      	str	r2, [sp, #24]
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	d13f      	bne.n	8006d08 <_printf_float+0x17c>
 8006c88:	2306      	movs	r3, #6
 8006c8a:	6063      	str	r3, [r4, #4]
 8006c8c:	9b05      	ldr	r3, [sp, #20]
 8006c8e:	6861      	ldr	r1, [r4, #4]
 8006c90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c94:	2300      	movs	r3, #0
 8006c96:	9303      	str	r3, [sp, #12]
 8006c98:	ab0a      	add	r3, sp, #40	; 0x28
 8006c9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c9e:	ab09      	add	r3, sp, #36	; 0x24
 8006ca0:	ec49 8b10 	vmov	d0, r8, r9
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	6022      	str	r2, [r4, #0]
 8006ca8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006cac:	4628      	mov	r0, r5
 8006cae:	f7ff fecd 	bl	8006a4c <__cvt>
 8006cb2:	9b06      	ldr	r3, [sp, #24]
 8006cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cb6:	2b47      	cmp	r3, #71	; 0x47
 8006cb8:	4680      	mov	r8, r0
 8006cba:	d108      	bne.n	8006cce <_printf_float+0x142>
 8006cbc:	1cc8      	adds	r0, r1, #3
 8006cbe:	db02      	blt.n	8006cc6 <_printf_float+0x13a>
 8006cc0:	6863      	ldr	r3, [r4, #4]
 8006cc2:	4299      	cmp	r1, r3
 8006cc4:	dd41      	ble.n	8006d4a <_printf_float+0x1be>
 8006cc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8006cca:	fa5f fb8b 	uxtb.w	fp, fp
 8006cce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cd2:	d820      	bhi.n	8006d16 <_printf_float+0x18a>
 8006cd4:	3901      	subs	r1, #1
 8006cd6:	465a      	mov	r2, fp
 8006cd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cdc:	9109      	str	r1, [sp, #36]	; 0x24
 8006cde:	f7ff ff17 	bl	8006b10 <__exponent>
 8006ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ce4:	1813      	adds	r3, r2, r0
 8006ce6:	2a01      	cmp	r2, #1
 8006ce8:	4681      	mov	r9, r0
 8006cea:	6123      	str	r3, [r4, #16]
 8006cec:	dc02      	bgt.n	8006cf4 <_printf_float+0x168>
 8006cee:	6822      	ldr	r2, [r4, #0]
 8006cf0:	07d2      	lsls	r2, r2, #31
 8006cf2:	d501      	bpl.n	8006cf8 <_printf_float+0x16c>
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	6123      	str	r3, [r4, #16]
 8006cf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d09c      	beq.n	8006c3a <_printf_float+0xae>
 8006d00:	232d      	movs	r3, #45	; 0x2d
 8006d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d06:	e798      	b.n	8006c3a <_printf_float+0xae>
 8006d08:	9a06      	ldr	r2, [sp, #24]
 8006d0a:	2a47      	cmp	r2, #71	; 0x47
 8006d0c:	d1be      	bne.n	8006c8c <_printf_float+0x100>
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1bc      	bne.n	8006c8c <_printf_float+0x100>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e7b9      	b.n	8006c8a <_printf_float+0xfe>
 8006d16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d1a:	d118      	bne.n	8006d4e <_printf_float+0x1c2>
 8006d1c:	2900      	cmp	r1, #0
 8006d1e:	6863      	ldr	r3, [r4, #4]
 8006d20:	dd0b      	ble.n	8006d3a <_printf_float+0x1ae>
 8006d22:	6121      	str	r1, [r4, #16]
 8006d24:	b913      	cbnz	r3, 8006d2c <_printf_float+0x1a0>
 8006d26:	6822      	ldr	r2, [r4, #0]
 8006d28:	07d0      	lsls	r0, r2, #31
 8006d2a:	d502      	bpl.n	8006d32 <_printf_float+0x1a6>
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	440b      	add	r3, r1
 8006d30:	6123      	str	r3, [r4, #16]
 8006d32:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d34:	f04f 0900 	mov.w	r9, #0
 8006d38:	e7de      	b.n	8006cf8 <_printf_float+0x16c>
 8006d3a:	b913      	cbnz	r3, 8006d42 <_printf_float+0x1b6>
 8006d3c:	6822      	ldr	r2, [r4, #0]
 8006d3e:	07d2      	lsls	r2, r2, #31
 8006d40:	d501      	bpl.n	8006d46 <_printf_float+0x1ba>
 8006d42:	3302      	adds	r3, #2
 8006d44:	e7f4      	b.n	8006d30 <_printf_float+0x1a4>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e7f2      	b.n	8006d30 <_printf_float+0x1a4>
 8006d4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d50:	4299      	cmp	r1, r3
 8006d52:	db05      	blt.n	8006d60 <_printf_float+0x1d4>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	6121      	str	r1, [r4, #16]
 8006d58:	07d8      	lsls	r0, r3, #31
 8006d5a:	d5ea      	bpl.n	8006d32 <_printf_float+0x1a6>
 8006d5c:	1c4b      	adds	r3, r1, #1
 8006d5e:	e7e7      	b.n	8006d30 <_printf_float+0x1a4>
 8006d60:	2900      	cmp	r1, #0
 8006d62:	bfd4      	ite	le
 8006d64:	f1c1 0202 	rsble	r2, r1, #2
 8006d68:	2201      	movgt	r2, #1
 8006d6a:	4413      	add	r3, r2
 8006d6c:	e7e0      	b.n	8006d30 <_printf_float+0x1a4>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	055a      	lsls	r2, r3, #21
 8006d72:	d407      	bmi.n	8006d84 <_printf_float+0x1f8>
 8006d74:	6923      	ldr	r3, [r4, #16]
 8006d76:	4642      	mov	r2, r8
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b8      	blx	r7
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d12c      	bne.n	8006ddc <_printf_float+0x250>
 8006d82:	e764      	b.n	8006c4e <_printf_float+0xc2>
 8006d84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d88:	f240 80e0 	bls.w	8006f4c <_printf_float+0x3c0>
 8006d8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d90:	2200      	movs	r2, #0
 8006d92:	2300      	movs	r3, #0
 8006d94:	f7f9 fe98 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d034      	beq.n	8006e06 <_printf_float+0x27a>
 8006d9c:	4a37      	ldr	r2, [pc, #220]	; (8006e7c <_printf_float+0x2f0>)
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4631      	mov	r1, r6
 8006da2:	4628      	mov	r0, r5
 8006da4:	47b8      	blx	r7
 8006da6:	3001      	adds	r0, #1
 8006da8:	f43f af51 	beq.w	8006c4e <_printf_float+0xc2>
 8006dac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006db0:	429a      	cmp	r2, r3
 8006db2:	db02      	blt.n	8006dba <_printf_float+0x22e>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	07d8      	lsls	r0, r3, #31
 8006db8:	d510      	bpl.n	8006ddc <_printf_float+0x250>
 8006dba:	ee18 3a10 	vmov	r3, s16
 8006dbe:	4652      	mov	r2, sl
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	47b8      	blx	r7
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	f43f af41 	beq.w	8006c4e <_printf_float+0xc2>
 8006dcc:	f04f 0800 	mov.w	r8, #0
 8006dd0:	f104 091a 	add.w	r9, r4, #26
 8006dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	4543      	cmp	r3, r8
 8006dda:	dc09      	bgt.n	8006df0 <_printf_float+0x264>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	079b      	lsls	r3, r3, #30
 8006de0:	f100 8105 	bmi.w	8006fee <_printf_float+0x462>
 8006de4:	68e0      	ldr	r0, [r4, #12]
 8006de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006de8:	4298      	cmp	r0, r3
 8006dea:	bfb8      	it	lt
 8006dec:	4618      	movlt	r0, r3
 8006dee:	e730      	b.n	8006c52 <_printf_float+0xc6>
 8006df0:	2301      	movs	r3, #1
 8006df2:	464a      	mov	r2, r9
 8006df4:	4631      	mov	r1, r6
 8006df6:	4628      	mov	r0, r5
 8006df8:	47b8      	blx	r7
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	f43f af27 	beq.w	8006c4e <_printf_float+0xc2>
 8006e00:	f108 0801 	add.w	r8, r8, #1
 8006e04:	e7e6      	b.n	8006dd4 <_printf_float+0x248>
 8006e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dc39      	bgt.n	8006e80 <_printf_float+0x2f4>
 8006e0c:	4a1b      	ldr	r2, [pc, #108]	; (8006e7c <_printf_float+0x2f0>)
 8006e0e:	2301      	movs	r3, #1
 8006e10:	4631      	mov	r1, r6
 8006e12:	4628      	mov	r0, r5
 8006e14:	47b8      	blx	r7
 8006e16:	3001      	adds	r0, #1
 8006e18:	f43f af19 	beq.w	8006c4e <_printf_float+0xc2>
 8006e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e20:	4313      	orrs	r3, r2
 8006e22:	d102      	bne.n	8006e2a <_printf_float+0x29e>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	07d9      	lsls	r1, r3, #31
 8006e28:	d5d8      	bpl.n	8006ddc <_printf_float+0x250>
 8006e2a:	ee18 3a10 	vmov	r3, s16
 8006e2e:	4652      	mov	r2, sl
 8006e30:	4631      	mov	r1, r6
 8006e32:	4628      	mov	r0, r5
 8006e34:	47b8      	blx	r7
 8006e36:	3001      	adds	r0, #1
 8006e38:	f43f af09 	beq.w	8006c4e <_printf_float+0xc2>
 8006e3c:	f04f 0900 	mov.w	r9, #0
 8006e40:	f104 0a1a 	add.w	sl, r4, #26
 8006e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e46:	425b      	negs	r3, r3
 8006e48:	454b      	cmp	r3, r9
 8006e4a:	dc01      	bgt.n	8006e50 <_printf_float+0x2c4>
 8006e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e4e:	e792      	b.n	8006d76 <_printf_float+0x1ea>
 8006e50:	2301      	movs	r3, #1
 8006e52:	4652      	mov	r2, sl
 8006e54:	4631      	mov	r1, r6
 8006e56:	4628      	mov	r0, r5
 8006e58:	47b8      	blx	r7
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	f43f aef7 	beq.w	8006c4e <_printf_float+0xc2>
 8006e60:	f109 0901 	add.w	r9, r9, #1
 8006e64:	e7ee      	b.n	8006e44 <_printf_float+0x2b8>
 8006e66:	bf00      	nop
 8006e68:	7fefffff 	.word	0x7fefffff
 8006e6c:	08009c74 	.word	0x08009c74
 8006e70:	08009c78 	.word	0x08009c78
 8006e74:	08009c80 	.word	0x08009c80
 8006e78:	08009c7c 	.word	0x08009c7c
 8006e7c:	08009c84 	.word	0x08009c84
 8006e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e84:	429a      	cmp	r2, r3
 8006e86:	bfa8      	it	ge
 8006e88:	461a      	movge	r2, r3
 8006e8a:	2a00      	cmp	r2, #0
 8006e8c:	4691      	mov	r9, r2
 8006e8e:	dc37      	bgt.n	8006f00 <_printf_float+0x374>
 8006e90:	f04f 0b00 	mov.w	fp, #0
 8006e94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e98:	f104 021a 	add.w	r2, r4, #26
 8006e9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e9e:	9305      	str	r3, [sp, #20]
 8006ea0:	eba3 0309 	sub.w	r3, r3, r9
 8006ea4:	455b      	cmp	r3, fp
 8006ea6:	dc33      	bgt.n	8006f10 <_printf_float+0x384>
 8006ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eac:	429a      	cmp	r2, r3
 8006eae:	db3b      	blt.n	8006f28 <_printf_float+0x39c>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	07da      	lsls	r2, r3, #31
 8006eb4:	d438      	bmi.n	8006f28 <_printf_float+0x39c>
 8006eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb8:	9a05      	ldr	r2, [sp, #20]
 8006eba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ebc:	1a9a      	subs	r2, r3, r2
 8006ebe:	eba3 0901 	sub.w	r9, r3, r1
 8006ec2:	4591      	cmp	r9, r2
 8006ec4:	bfa8      	it	ge
 8006ec6:	4691      	movge	r9, r2
 8006ec8:	f1b9 0f00 	cmp.w	r9, #0
 8006ecc:	dc35      	bgt.n	8006f3a <_printf_float+0x3ae>
 8006ece:	f04f 0800 	mov.w	r8, #0
 8006ed2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ed6:	f104 0a1a 	add.w	sl, r4, #26
 8006eda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ede:	1a9b      	subs	r3, r3, r2
 8006ee0:	eba3 0309 	sub.w	r3, r3, r9
 8006ee4:	4543      	cmp	r3, r8
 8006ee6:	f77f af79 	ble.w	8006ddc <_printf_float+0x250>
 8006eea:	2301      	movs	r3, #1
 8006eec:	4652      	mov	r2, sl
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b8      	blx	r7
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	f43f aeaa 	beq.w	8006c4e <_printf_float+0xc2>
 8006efa:	f108 0801 	add.w	r8, r8, #1
 8006efe:	e7ec      	b.n	8006eda <_printf_float+0x34e>
 8006f00:	4613      	mov	r3, r2
 8006f02:	4631      	mov	r1, r6
 8006f04:	4642      	mov	r2, r8
 8006f06:	4628      	mov	r0, r5
 8006f08:	47b8      	blx	r7
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	d1c0      	bne.n	8006e90 <_printf_float+0x304>
 8006f0e:	e69e      	b.n	8006c4e <_printf_float+0xc2>
 8006f10:	2301      	movs	r3, #1
 8006f12:	4631      	mov	r1, r6
 8006f14:	4628      	mov	r0, r5
 8006f16:	9205      	str	r2, [sp, #20]
 8006f18:	47b8      	blx	r7
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	f43f ae97 	beq.w	8006c4e <_printf_float+0xc2>
 8006f20:	9a05      	ldr	r2, [sp, #20]
 8006f22:	f10b 0b01 	add.w	fp, fp, #1
 8006f26:	e7b9      	b.n	8006e9c <_printf_float+0x310>
 8006f28:	ee18 3a10 	vmov	r3, s16
 8006f2c:	4652      	mov	r2, sl
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	d1be      	bne.n	8006eb6 <_printf_float+0x32a>
 8006f38:	e689      	b.n	8006c4e <_printf_float+0xc2>
 8006f3a:	9a05      	ldr	r2, [sp, #20]
 8006f3c:	464b      	mov	r3, r9
 8006f3e:	4442      	add	r2, r8
 8006f40:	4631      	mov	r1, r6
 8006f42:	4628      	mov	r0, r5
 8006f44:	47b8      	blx	r7
 8006f46:	3001      	adds	r0, #1
 8006f48:	d1c1      	bne.n	8006ece <_printf_float+0x342>
 8006f4a:	e680      	b.n	8006c4e <_printf_float+0xc2>
 8006f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f4e:	2a01      	cmp	r2, #1
 8006f50:	dc01      	bgt.n	8006f56 <_printf_float+0x3ca>
 8006f52:	07db      	lsls	r3, r3, #31
 8006f54:	d538      	bpl.n	8006fc8 <_printf_float+0x43c>
 8006f56:	2301      	movs	r3, #1
 8006f58:	4642      	mov	r2, r8
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	47b8      	blx	r7
 8006f60:	3001      	adds	r0, #1
 8006f62:	f43f ae74 	beq.w	8006c4e <_printf_float+0xc2>
 8006f66:	ee18 3a10 	vmov	r3, s16
 8006f6a:	4652      	mov	r2, sl
 8006f6c:	4631      	mov	r1, r6
 8006f6e:	4628      	mov	r0, r5
 8006f70:	47b8      	blx	r7
 8006f72:	3001      	adds	r0, #1
 8006f74:	f43f ae6b 	beq.w	8006c4e <_printf_float+0xc2>
 8006f78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f7f9 fda2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f84:	b9d8      	cbnz	r0, 8006fbe <_printf_float+0x432>
 8006f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f88:	f108 0201 	add.w	r2, r8, #1
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	4631      	mov	r1, r6
 8006f90:	4628      	mov	r0, r5
 8006f92:	47b8      	blx	r7
 8006f94:	3001      	adds	r0, #1
 8006f96:	d10e      	bne.n	8006fb6 <_printf_float+0x42a>
 8006f98:	e659      	b.n	8006c4e <_printf_float+0xc2>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	4652      	mov	r2, sl
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	f43f ae52 	beq.w	8006c4e <_printf_float+0xc2>
 8006faa:	f108 0801 	add.w	r8, r8, #1
 8006fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	4543      	cmp	r3, r8
 8006fb4:	dcf1      	bgt.n	8006f9a <_printf_float+0x40e>
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fbc:	e6dc      	b.n	8006d78 <_printf_float+0x1ec>
 8006fbe:	f04f 0800 	mov.w	r8, #0
 8006fc2:	f104 0a1a 	add.w	sl, r4, #26
 8006fc6:	e7f2      	b.n	8006fae <_printf_float+0x422>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	4642      	mov	r2, r8
 8006fcc:	e7df      	b.n	8006f8e <_printf_float+0x402>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	464a      	mov	r2, r9
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	47b8      	blx	r7
 8006fd8:	3001      	adds	r0, #1
 8006fda:	f43f ae38 	beq.w	8006c4e <_printf_float+0xc2>
 8006fde:	f108 0801 	add.w	r8, r8, #1
 8006fe2:	68e3      	ldr	r3, [r4, #12]
 8006fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fe6:	1a5b      	subs	r3, r3, r1
 8006fe8:	4543      	cmp	r3, r8
 8006fea:	dcf0      	bgt.n	8006fce <_printf_float+0x442>
 8006fec:	e6fa      	b.n	8006de4 <_printf_float+0x258>
 8006fee:	f04f 0800 	mov.w	r8, #0
 8006ff2:	f104 0919 	add.w	r9, r4, #25
 8006ff6:	e7f4      	b.n	8006fe2 <_printf_float+0x456>

08006ff8 <_printf_common>:
 8006ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ffc:	4616      	mov	r6, r2
 8006ffe:	4699      	mov	r9, r3
 8007000:	688a      	ldr	r2, [r1, #8]
 8007002:	690b      	ldr	r3, [r1, #16]
 8007004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007008:	4293      	cmp	r3, r2
 800700a:	bfb8      	it	lt
 800700c:	4613      	movlt	r3, r2
 800700e:	6033      	str	r3, [r6, #0]
 8007010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007014:	4607      	mov	r7, r0
 8007016:	460c      	mov	r4, r1
 8007018:	b10a      	cbz	r2, 800701e <_printf_common+0x26>
 800701a:	3301      	adds	r3, #1
 800701c:	6033      	str	r3, [r6, #0]
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	0699      	lsls	r1, r3, #26
 8007022:	bf42      	ittt	mi
 8007024:	6833      	ldrmi	r3, [r6, #0]
 8007026:	3302      	addmi	r3, #2
 8007028:	6033      	strmi	r3, [r6, #0]
 800702a:	6825      	ldr	r5, [r4, #0]
 800702c:	f015 0506 	ands.w	r5, r5, #6
 8007030:	d106      	bne.n	8007040 <_printf_common+0x48>
 8007032:	f104 0a19 	add.w	sl, r4, #25
 8007036:	68e3      	ldr	r3, [r4, #12]
 8007038:	6832      	ldr	r2, [r6, #0]
 800703a:	1a9b      	subs	r3, r3, r2
 800703c:	42ab      	cmp	r3, r5
 800703e:	dc26      	bgt.n	800708e <_printf_common+0x96>
 8007040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007044:	1e13      	subs	r3, r2, #0
 8007046:	6822      	ldr	r2, [r4, #0]
 8007048:	bf18      	it	ne
 800704a:	2301      	movne	r3, #1
 800704c:	0692      	lsls	r2, r2, #26
 800704e:	d42b      	bmi.n	80070a8 <_printf_common+0xb0>
 8007050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007054:	4649      	mov	r1, r9
 8007056:	4638      	mov	r0, r7
 8007058:	47c0      	blx	r8
 800705a:	3001      	adds	r0, #1
 800705c:	d01e      	beq.n	800709c <_printf_common+0xa4>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	68e5      	ldr	r5, [r4, #12]
 8007062:	6832      	ldr	r2, [r6, #0]
 8007064:	f003 0306 	and.w	r3, r3, #6
 8007068:	2b04      	cmp	r3, #4
 800706a:	bf08      	it	eq
 800706c:	1aad      	subeq	r5, r5, r2
 800706e:	68a3      	ldr	r3, [r4, #8]
 8007070:	6922      	ldr	r2, [r4, #16]
 8007072:	bf0c      	ite	eq
 8007074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007078:	2500      	movne	r5, #0
 800707a:	4293      	cmp	r3, r2
 800707c:	bfc4      	itt	gt
 800707e:	1a9b      	subgt	r3, r3, r2
 8007080:	18ed      	addgt	r5, r5, r3
 8007082:	2600      	movs	r6, #0
 8007084:	341a      	adds	r4, #26
 8007086:	42b5      	cmp	r5, r6
 8007088:	d11a      	bne.n	80070c0 <_printf_common+0xc8>
 800708a:	2000      	movs	r0, #0
 800708c:	e008      	b.n	80070a0 <_printf_common+0xa8>
 800708e:	2301      	movs	r3, #1
 8007090:	4652      	mov	r2, sl
 8007092:	4649      	mov	r1, r9
 8007094:	4638      	mov	r0, r7
 8007096:	47c0      	blx	r8
 8007098:	3001      	adds	r0, #1
 800709a:	d103      	bne.n	80070a4 <_printf_common+0xac>
 800709c:	f04f 30ff 	mov.w	r0, #4294967295
 80070a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a4:	3501      	adds	r5, #1
 80070a6:	e7c6      	b.n	8007036 <_printf_common+0x3e>
 80070a8:	18e1      	adds	r1, r4, r3
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	2030      	movs	r0, #48	; 0x30
 80070ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070b2:	4422      	add	r2, r4
 80070b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070bc:	3302      	adds	r3, #2
 80070be:	e7c7      	b.n	8007050 <_printf_common+0x58>
 80070c0:	2301      	movs	r3, #1
 80070c2:	4622      	mov	r2, r4
 80070c4:	4649      	mov	r1, r9
 80070c6:	4638      	mov	r0, r7
 80070c8:	47c0      	blx	r8
 80070ca:	3001      	adds	r0, #1
 80070cc:	d0e6      	beq.n	800709c <_printf_common+0xa4>
 80070ce:	3601      	adds	r6, #1
 80070d0:	e7d9      	b.n	8007086 <_printf_common+0x8e>
	...

080070d4 <_printf_i>:
 80070d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070d8:	7e0f      	ldrb	r7, [r1, #24]
 80070da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070dc:	2f78      	cmp	r7, #120	; 0x78
 80070de:	4691      	mov	r9, r2
 80070e0:	4680      	mov	r8, r0
 80070e2:	460c      	mov	r4, r1
 80070e4:	469a      	mov	sl, r3
 80070e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070ea:	d807      	bhi.n	80070fc <_printf_i+0x28>
 80070ec:	2f62      	cmp	r7, #98	; 0x62
 80070ee:	d80a      	bhi.n	8007106 <_printf_i+0x32>
 80070f0:	2f00      	cmp	r7, #0
 80070f2:	f000 80d8 	beq.w	80072a6 <_printf_i+0x1d2>
 80070f6:	2f58      	cmp	r7, #88	; 0x58
 80070f8:	f000 80a3 	beq.w	8007242 <_printf_i+0x16e>
 80070fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007104:	e03a      	b.n	800717c <_printf_i+0xa8>
 8007106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800710a:	2b15      	cmp	r3, #21
 800710c:	d8f6      	bhi.n	80070fc <_printf_i+0x28>
 800710e:	a101      	add	r1, pc, #4	; (adr r1, 8007114 <_printf_i+0x40>)
 8007110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007114:	0800716d 	.word	0x0800716d
 8007118:	08007181 	.word	0x08007181
 800711c:	080070fd 	.word	0x080070fd
 8007120:	080070fd 	.word	0x080070fd
 8007124:	080070fd 	.word	0x080070fd
 8007128:	080070fd 	.word	0x080070fd
 800712c:	08007181 	.word	0x08007181
 8007130:	080070fd 	.word	0x080070fd
 8007134:	080070fd 	.word	0x080070fd
 8007138:	080070fd 	.word	0x080070fd
 800713c:	080070fd 	.word	0x080070fd
 8007140:	0800728d 	.word	0x0800728d
 8007144:	080071b1 	.word	0x080071b1
 8007148:	0800726f 	.word	0x0800726f
 800714c:	080070fd 	.word	0x080070fd
 8007150:	080070fd 	.word	0x080070fd
 8007154:	080072af 	.word	0x080072af
 8007158:	080070fd 	.word	0x080070fd
 800715c:	080071b1 	.word	0x080071b1
 8007160:	080070fd 	.word	0x080070fd
 8007164:	080070fd 	.word	0x080070fd
 8007168:	08007277 	.word	0x08007277
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	1d1a      	adds	r2, r3, #4
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	602a      	str	r2, [r5, #0]
 8007174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800717c:	2301      	movs	r3, #1
 800717e:	e0a3      	b.n	80072c8 <_printf_i+0x1f4>
 8007180:	6820      	ldr	r0, [r4, #0]
 8007182:	6829      	ldr	r1, [r5, #0]
 8007184:	0606      	lsls	r6, r0, #24
 8007186:	f101 0304 	add.w	r3, r1, #4
 800718a:	d50a      	bpl.n	80071a2 <_printf_i+0xce>
 800718c:	680e      	ldr	r6, [r1, #0]
 800718e:	602b      	str	r3, [r5, #0]
 8007190:	2e00      	cmp	r6, #0
 8007192:	da03      	bge.n	800719c <_printf_i+0xc8>
 8007194:	232d      	movs	r3, #45	; 0x2d
 8007196:	4276      	negs	r6, r6
 8007198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800719c:	485e      	ldr	r0, [pc, #376]	; (8007318 <_printf_i+0x244>)
 800719e:	230a      	movs	r3, #10
 80071a0:	e019      	b.n	80071d6 <_printf_i+0x102>
 80071a2:	680e      	ldr	r6, [r1, #0]
 80071a4:	602b      	str	r3, [r5, #0]
 80071a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071aa:	bf18      	it	ne
 80071ac:	b236      	sxthne	r6, r6
 80071ae:	e7ef      	b.n	8007190 <_printf_i+0xbc>
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	6820      	ldr	r0, [r4, #0]
 80071b4:	1d19      	adds	r1, r3, #4
 80071b6:	6029      	str	r1, [r5, #0]
 80071b8:	0601      	lsls	r1, r0, #24
 80071ba:	d501      	bpl.n	80071c0 <_printf_i+0xec>
 80071bc:	681e      	ldr	r6, [r3, #0]
 80071be:	e002      	b.n	80071c6 <_printf_i+0xf2>
 80071c0:	0646      	lsls	r6, r0, #25
 80071c2:	d5fb      	bpl.n	80071bc <_printf_i+0xe8>
 80071c4:	881e      	ldrh	r6, [r3, #0]
 80071c6:	4854      	ldr	r0, [pc, #336]	; (8007318 <_printf_i+0x244>)
 80071c8:	2f6f      	cmp	r7, #111	; 0x6f
 80071ca:	bf0c      	ite	eq
 80071cc:	2308      	moveq	r3, #8
 80071ce:	230a      	movne	r3, #10
 80071d0:	2100      	movs	r1, #0
 80071d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071d6:	6865      	ldr	r5, [r4, #4]
 80071d8:	60a5      	str	r5, [r4, #8]
 80071da:	2d00      	cmp	r5, #0
 80071dc:	bfa2      	ittt	ge
 80071de:	6821      	ldrge	r1, [r4, #0]
 80071e0:	f021 0104 	bicge.w	r1, r1, #4
 80071e4:	6021      	strge	r1, [r4, #0]
 80071e6:	b90e      	cbnz	r6, 80071ec <_printf_i+0x118>
 80071e8:	2d00      	cmp	r5, #0
 80071ea:	d04d      	beq.n	8007288 <_printf_i+0x1b4>
 80071ec:	4615      	mov	r5, r2
 80071ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80071f2:	fb03 6711 	mls	r7, r3, r1, r6
 80071f6:	5dc7      	ldrb	r7, [r0, r7]
 80071f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071fc:	4637      	mov	r7, r6
 80071fe:	42bb      	cmp	r3, r7
 8007200:	460e      	mov	r6, r1
 8007202:	d9f4      	bls.n	80071ee <_printf_i+0x11a>
 8007204:	2b08      	cmp	r3, #8
 8007206:	d10b      	bne.n	8007220 <_printf_i+0x14c>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	07de      	lsls	r6, r3, #31
 800720c:	d508      	bpl.n	8007220 <_printf_i+0x14c>
 800720e:	6923      	ldr	r3, [r4, #16]
 8007210:	6861      	ldr	r1, [r4, #4]
 8007212:	4299      	cmp	r1, r3
 8007214:	bfde      	ittt	le
 8007216:	2330      	movle	r3, #48	; 0x30
 8007218:	f805 3c01 	strble.w	r3, [r5, #-1]
 800721c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007220:	1b52      	subs	r2, r2, r5
 8007222:	6122      	str	r2, [r4, #16]
 8007224:	f8cd a000 	str.w	sl, [sp]
 8007228:	464b      	mov	r3, r9
 800722a:	aa03      	add	r2, sp, #12
 800722c:	4621      	mov	r1, r4
 800722e:	4640      	mov	r0, r8
 8007230:	f7ff fee2 	bl	8006ff8 <_printf_common>
 8007234:	3001      	adds	r0, #1
 8007236:	d14c      	bne.n	80072d2 <_printf_i+0x1fe>
 8007238:	f04f 30ff 	mov.w	r0, #4294967295
 800723c:	b004      	add	sp, #16
 800723e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007242:	4835      	ldr	r0, [pc, #212]	; (8007318 <_printf_i+0x244>)
 8007244:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007248:	6829      	ldr	r1, [r5, #0]
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007250:	6029      	str	r1, [r5, #0]
 8007252:	061d      	lsls	r5, r3, #24
 8007254:	d514      	bpl.n	8007280 <_printf_i+0x1ac>
 8007256:	07df      	lsls	r7, r3, #31
 8007258:	bf44      	itt	mi
 800725a:	f043 0320 	orrmi.w	r3, r3, #32
 800725e:	6023      	strmi	r3, [r4, #0]
 8007260:	b91e      	cbnz	r6, 800726a <_printf_i+0x196>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	f023 0320 	bic.w	r3, r3, #32
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	2310      	movs	r3, #16
 800726c:	e7b0      	b.n	80071d0 <_printf_i+0xfc>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	f043 0320 	orr.w	r3, r3, #32
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	2378      	movs	r3, #120	; 0x78
 8007278:	4828      	ldr	r0, [pc, #160]	; (800731c <_printf_i+0x248>)
 800727a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800727e:	e7e3      	b.n	8007248 <_printf_i+0x174>
 8007280:	0659      	lsls	r1, r3, #25
 8007282:	bf48      	it	mi
 8007284:	b2b6      	uxthmi	r6, r6
 8007286:	e7e6      	b.n	8007256 <_printf_i+0x182>
 8007288:	4615      	mov	r5, r2
 800728a:	e7bb      	b.n	8007204 <_printf_i+0x130>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	6826      	ldr	r6, [r4, #0]
 8007290:	6961      	ldr	r1, [r4, #20]
 8007292:	1d18      	adds	r0, r3, #4
 8007294:	6028      	str	r0, [r5, #0]
 8007296:	0635      	lsls	r5, r6, #24
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	d501      	bpl.n	80072a0 <_printf_i+0x1cc>
 800729c:	6019      	str	r1, [r3, #0]
 800729e:	e002      	b.n	80072a6 <_printf_i+0x1d2>
 80072a0:	0670      	lsls	r0, r6, #25
 80072a2:	d5fb      	bpl.n	800729c <_printf_i+0x1c8>
 80072a4:	8019      	strh	r1, [r3, #0]
 80072a6:	2300      	movs	r3, #0
 80072a8:	6123      	str	r3, [r4, #16]
 80072aa:	4615      	mov	r5, r2
 80072ac:	e7ba      	b.n	8007224 <_printf_i+0x150>
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	1d1a      	adds	r2, r3, #4
 80072b2:	602a      	str	r2, [r5, #0]
 80072b4:	681d      	ldr	r5, [r3, #0]
 80072b6:	6862      	ldr	r2, [r4, #4]
 80072b8:	2100      	movs	r1, #0
 80072ba:	4628      	mov	r0, r5
 80072bc:	f7f8 ff90 	bl	80001e0 <memchr>
 80072c0:	b108      	cbz	r0, 80072c6 <_printf_i+0x1f2>
 80072c2:	1b40      	subs	r0, r0, r5
 80072c4:	6060      	str	r0, [r4, #4]
 80072c6:	6863      	ldr	r3, [r4, #4]
 80072c8:	6123      	str	r3, [r4, #16]
 80072ca:	2300      	movs	r3, #0
 80072cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072d0:	e7a8      	b.n	8007224 <_printf_i+0x150>
 80072d2:	6923      	ldr	r3, [r4, #16]
 80072d4:	462a      	mov	r2, r5
 80072d6:	4649      	mov	r1, r9
 80072d8:	4640      	mov	r0, r8
 80072da:	47d0      	blx	sl
 80072dc:	3001      	adds	r0, #1
 80072de:	d0ab      	beq.n	8007238 <_printf_i+0x164>
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	079b      	lsls	r3, r3, #30
 80072e4:	d413      	bmi.n	800730e <_printf_i+0x23a>
 80072e6:	68e0      	ldr	r0, [r4, #12]
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	4298      	cmp	r0, r3
 80072ec:	bfb8      	it	lt
 80072ee:	4618      	movlt	r0, r3
 80072f0:	e7a4      	b.n	800723c <_printf_i+0x168>
 80072f2:	2301      	movs	r3, #1
 80072f4:	4632      	mov	r2, r6
 80072f6:	4649      	mov	r1, r9
 80072f8:	4640      	mov	r0, r8
 80072fa:	47d0      	blx	sl
 80072fc:	3001      	adds	r0, #1
 80072fe:	d09b      	beq.n	8007238 <_printf_i+0x164>
 8007300:	3501      	adds	r5, #1
 8007302:	68e3      	ldr	r3, [r4, #12]
 8007304:	9903      	ldr	r1, [sp, #12]
 8007306:	1a5b      	subs	r3, r3, r1
 8007308:	42ab      	cmp	r3, r5
 800730a:	dcf2      	bgt.n	80072f2 <_printf_i+0x21e>
 800730c:	e7eb      	b.n	80072e6 <_printf_i+0x212>
 800730e:	2500      	movs	r5, #0
 8007310:	f104 0619 	add.w	r6, r4, #25
 8007314:	e7f5      	b.n	8007302 <_printf_i+0x22e>
 8007316:	bf00      	nop
 8007318:	08009c86 	.word	0x08009c86
 800731c:	08009c97 	.word	0x08009c97

08007320 <_perror_r>:
 8007320:	6983      	ldr	r3, [r0, #24]
 8007322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007324:	68c4      	ldr	r4, [r0, #12]
 8007326:	4605      	mov	r5, r0
 8007328:	460e      	mov	r6, r1
 800732a:	b90b      	cbnz	r3, 8007330 <_perror_r+0x10>
 800732c:	f001 fada 	bl	80088e4 <__sinit>
 8007330:	4b43      	ldr	r3, [pc, #268]	; (8007440 <_perror_r+0x120>)
 8007332:	429c      	cmp	r4, r3
 8007334:	d132      	bne.n	800739c <_perror_r+0x7c>
 8007336:	686c      	ldr	r4, [r5, #4]
 8007338:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800733a:	07d8      	lsls	r0, r3, #31
 800733c:	d405      	bmi.n	800734a <_perror_r+0x2a>
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	0599      	lsls	r1, r3, #22
 8007342:	d402      	bmi.n	800734a <_perror_r+0x2a>
 8007344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007346:	f001 fb70 	bl	8008a2a <__retarget_lock_acquire_recursive>
 800734a:	4621      	mov	r1, r4
 800734c:	4628      	mov	r0, r5
 800734e:	f001 f9f7 	bl	8008740 <_fflush_r>
 8007352:	bb6e      	cbnz	r6, 80073b0 <_perror_r+0x90>
 8007354:	6829      	ldr	r1, [r5, #0]
 8007356:	ab01      	add	r3, sp, #4
 8007358:	2201      	movs	r2, #1
 800735a:	4628      	mov	r0, r5
 800735c:	f000 f8d6 	bl	800750c <_strerror_r>
 8007360:	4607      	mov	r7, r0
 8007362:	2800      	cmp	r0, #0
 8007364:	d14f      	bne.n	8007406 <_perror_r+0xe6>
 8007366:	4837      	ldr	r0, [pc, #220]	; (8007444 <_perror_r+0x124>)
 8007368:	4f36      	ldr	r7, [pc, #216]	; (8007444 <_perror_r+0x124>)
 800736a:	f7f8 ff31 	bl	80001d0 <strlen>
 800736e:	4606      	mov	r6, r0
 8007370:	b156      	cbz	r6, 8007388 <_perror_r+0x68>
 8007372:	4620      	mov	r0, r4
 8007374:	f001 fa20 	bl	80087b8 <fileno>
 8007378:	4633      	mov	r3, r6
 800737a:	4601      	mov	r1, r0
 800737c:	463a      	mov	r2, r7
 800737e:	4628      	mov	r0, r5
 8007380:	f000 facc 	bl	800791c <_write_r>
 8007384:	2800      	cmp	r0, #0
 8007386:	da51      	bge.n	800742c <_perror_r+0x10c>
 8007388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800738c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800738e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007392:	07d2      	lsls	r2, r2, #31
 8007394:	81a3      	strh	r3, [r4, #12]
 8007396:	d54c      	bpl.n	8007432 <_perror_r+0x112>
 8007398:	b003      	add	sp, #12
 800739a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800739c:	4b2a      	ldr	r3, [pc, #168]	; (8007448 <_perror_r+0x128>)
 800739e:	429c      	cmp	r4, r3
 80073a0:	d101      	bne.n	80073a6 <_perror_r+0x86>
 80073a2:	68ac      	ldr	r4, [r5, #8]
 80073a4:	e7c8      	b.n	8007338 <_perror_r+0x18>
 80073a6:	4b29      	ldr	r3, [pc, #164]	; (800744c <_perror_r+0x12c>)
 80073a8:	429c      	cmp	r4, r3
 80073aa:	bf08      	it	eq
 80073ac:	68ec      	ldreq	r4, [r5, #12]
 80073ae:	e7c3      	b.n	8007338 <_perror_r+0x18>
 80073b0:	7833      	ldrb	r3, [r6, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0ce      	beq.n	8007354 <_perror_r+0x34>
 80073b6:	4630      	mov	r0, r6
 80073b8:	f7f8 ff0a 	bl	80001d0 <strlen>
 80073bc:	4607      	mov	r7, r0
 80073be:	b157      	cbz	r7, 80073d6 <_perror_r+0xb6>
 80073c0:	4620      	mov	r0, r4
 80073c2:	f001 f9f9 	bl	80087b8 <fileno>
 80073c6:	463b      	mov	r3, r7
 80073c8:	4601      	mov	r1, r0
 80073ca:	4632      	mov	r2, r6
 80073cc:	4628      	mov	r0, r5
 80073ce:	f000 faa5 	bl	800791c <_write_r>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	da14      	bge.n	8007400 <_perror_r+0xe0>
 80073d6:	481e      	ldr	r0, [pc, #120]	; (8007450 <_perror_r+0x130>)
 80073d8:	4f1d      	ldr	r7, [pc, #116]	; (8007450 <_perror_r+0x130>)
 80073da:	f7f8 fef9 	bl	80001d0 <strlen>
 80073de:	4606      	mov	r6, r0
 80073e0:	2e00      	cmp	r6, #0
 80073e2:	d0b7      	beq.n	8007354 <_perror_r+0x34>
 80073e4:	4620      	mov	r0, r4
 80073e6:	f001 f9e7 	bl	80087b8 <fileno>
 80073ea:	4633      	mov	r3, r6
 80073ec:	4601      	mov	r1, r0
 80073ee:	463a      	mov	r2, r7
 80073f0:	4628      	mov	r0, r5
 80073f2:	f000 fa93 	bl	800791c <_write_r>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	dbac      	blt.n	8007354 <_perror_r+0x34>
 80073fa:	1a36      	subs	r6, r6, r0
 80073fc:	4407      	add	r7, r0
 80073fe:	e7ef      	b.n	80073e0 <_perror_r+0xc0>
 8007400:	1a3f      	subs	r7, r7, r0
 8007402:	4406      	add	r6, r0
 8007404:	e7db      	b.n	80073be <_perror_r+0x9e>
 8007406:	f7f8 fee3 	bl	80001d0 <strlen>
 800740a:	4606      	mov	r6, r0
 800740c:	2e00      	cmp	r6, #0
 800740e:	d0aa      	beq.n	8007366 <_perror_r+0x46>
 8007410:	4620      	mov	r0, r4
 8007412:	f001 f9d1 	bl	80087b8 <fileno>
 8007416:	4633      	mov	r3, r6
 8007418:	4601      	mov	r1, r0
 800741a:	463a      	mov	r2, r7
 800741c:	4628      	mov	r0, r5
 800741e:	f000 fa7d 	bl	800791c <_write_r>
 8007422:	2800      	cmp	r0, #0
 8007424:	db9f      	blt.n	8007366 <_perror_r+0x46>
 8007426:	1a36      	subs	r6, r6, r0
 8007428:	4407      	add	r7, r0
 800742a:	e7ef      	b.n	800740c <_perror_r+0xec>
 800742c:	1a36      	subs	r6, r6, r0
 800742e:	4407      	add	r7, r0
 8007430:	e79e      	b.n	8007370 <_perror_r+0x50>
 8007432:	059b      	lsls	r3, r3, #22
 8007434:	d4b0      	bmi.n	8007398 <_perror_r+0x78>
 8007436:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007438:	f001 faf8 	bl	8008a2c <__retarget_lock_release_recursive>
 800743c:	e7ac      	b.n	8007398 <_perror_r+0x78>
 800743e:	bf00      	nop
 8007440:	0800a3f0 	.word	0x0800a3f0
 8007444:	0800a5d7 	.word	0x0800a5d7
 8007448:	0800a410 	.word	0x0800a410
 800744c:	0800a3d0 	.word	0x0800a3d0
 8007450:	0800a5a7 	.word	0x0800a5a7

08007454 <perror>:
 8007454:	4b02      	ldr	r3, [pc, #8]	; (8007460 <perror+0xc>)
 8007456:	4601      	mov	r1, r0
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	f7ff bf61 	b.w	8007320 <_perror_r>
 800745e:	bf00      	nop
 8007460:	2000003c 	.word	0x2000003c

08007464 <_sbrk_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4d06      	ldr	r5, [pc, #24]	; (8007480 <_sbrk_r+0x1c>)
 8007468:	2300      	movs	r3, #0
 800746a:	4604      	mov	r4, r0
 800746c:	4608      	mov	r0, r1
 800746e:	602b      	str	r3, [r5, #0]
 8007470:	f7fa fa78 	bl	8001964 <_sbrk>
 8007474:	1c43      	adds	r3, r0, #1
 8007476:	d102      	bne.n	800747e <_sbrk_r+0x1a>
 8007478:	682b      	ldr	r3, [r5, #0]
 800747a:	b103      	cbz	r3, 800747e <_sbrk_r+0x1a>
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	bd38      	pop	{r3, r4, r5, pc}
 8007480:	20000630 	.word	0x20000630

08007484 <_raise_r>:
 8007484:	291f      	cmp	r1, #31
 8007486:	b538      	push	{r3, r4, r5, lr}
 8007488:	4604      	mov	r4, r0
 800748a:	460d      	mov	r5, r1
 800748c:	d904      	bls.n	8007498 <_raise_r+0x14>
 800748e:	2316      	movs	r3, #22
 8007490:	6003      	str	r3, [r0, #0]
 8007492:	f04f 30ff 	mov.w	r0, #4294967295
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800749a:	b112      	cbz	r2, 80074a2 <_raise_r+0x1e>
 800749c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074a0:	b94b      	cbnz	r3, 80074b6 <_raise_r+0x32>
 80074a2:	4620      	mov	r0, r4
 80074a4:	f000 f830 	bl	8007508 <_getpid_r>
 80074a8:	462a      	mov	r2, r5
 80074aa:	4601      	mov	r1, r0
 80074ac:	4620      	mov	r0, r4
 80074ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b2:	f000 b817 	b.w	80074e4 <_kill_r>
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d00a      	beq.n	80074d0 <_raise_r+0x4c>
 80074ba:	1c59      	adds	r1, r3, #1
 80074bc:	d103      	bne.n	80074c6 <_raise_r+0x42>
 80074be:	2316      	movs	r3, #22
 80074c0:	6003      	str	r3, [r0, #0]
 80074c2:	2001      	movs	r0, #1
 80074c4:	e7e7      	b.n	8007496 <_raise_r+0x12>
 80074c6:	2400      	movs	r4, #0
 80074c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074cc:	4628      	mov	r0, r5
 80074ce:	4798      	blx	r3
 80074d0:	2000      	movs	r0, #0
 80074d2:	e7e0      	b.n	8007496 <_raise_r+0x12>

080074d4 <raise>:
 80074d4:	4b02      	ldr	r3, [pc, #8]	; (80074e0 <raise+0xc>)
 80074d6:	4601      	mov	r1, r0
 80074d8:	6818      	ldr	r0, [r3, #0]
 80074da:	f7ff bfd3 	b.w	8007484 <_raise_r>
 80074de:	bf00      	nop
 80074e0:	2000003c 	.word	0x2000003c

080074e4 <_kill_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4d07      	ldr	r5, [pc, #28]	; (8007504 <_kill_r+0x20>)
 80074e8:	2300      	movs	r3, #0
 80074ea:	4604      	mov	r4, r0
 80074ec:	4608      	mov	r0, r1
 80074ee:	4611      	mov	r1, r2
 80074f0:	602b      	str	r3, [r5, #0]
 80074f2:	f7fa f9af 	bl	8001854 <_kill>
 80074f6:	1c43      	adds	r3, r0, #1
 80074f8:	d102      	bne.n	8007500 <_kill_r+0x1c>
 80074fa:	682b      	ldr	r3, [r5, #0]
 80074fc:	b103      	cbz	r3, 8007500 <_kill_r+0x1c>
 80074fe:	6023      	str	r3, [r4, #0]
 8007500:	bd38      	pop	{r3, r4, r5, pc}
 8007502:	bf00      	nop
 8007504:	20000630 	.word	0x20000630

08007508 <_getpid_r>:
 8007508:	f7fa b99c 	b.w	8001844 <_getpid>

0800750c <_strerror_r>:
 800750c:	b510      	push	{r4, lr}
 800750e:	4604      	mov	r4, r0
 8007510:	4608      	mov	r0, r1
 8007512:	4611      	mov	r1, r2
 8007514:	288e      	cmp	r0, #142	; 0x8e
 8007516:	f200 8130 	bhi.w	800777a <_strerror_r+0x26e>
 800751a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800751e:	0139      	.short	0x0139
 8007520:	0092008f 	.word	0x0092008f
 8007524:	00960094 	.word	0x00960094
 8007528:	009a0098 	.word	0x009a0098
 800752c:	009e009c 	.word	0x009e009c
 8007530:	00a400a2 	.word	0x00a400a2
 8007534:	00aa00a8 	.word	0x00aa00a8
 8007538:	00ae00ac 	.word	0x00ae00ac
 800753c:	00b0012e 	.word	0x00b0012e
 8007540:	00b400b2 	.word	0x00b400b2
 8007544:	00b800b6 	.word	0x00b800b6
 8007548:	00c000be 	.word	0x00c000be
 800754c:	00c800c6 	.word	0x00c800c6
 8007550:	00cc00ca 	.word	0x00cc00ca
 8007554:	00d200ce 	.word	0x00d200ce
 8007558:	00d800d6 	.word	0x00d800d6
 800755c:	00dc00da 	.word	0x00dc00da
 8007560:	00e000de 	.word	0x00e000de
 8007564:	00e400e2 	.word	0x00e400e2
 8007568:	012e012e 	.word	0x012e012e
 800756c:	012e012e 	.word	0x012e012e
 8007570:	012e012e 	.word	0x012e012e
 8007574:	012e012e 	.word	0x012e012e
 8007578:	00ec00e8 	.word	0x00ec00e8
 800757c:	012e012e 	.word	0x012e012e
 8007580:	012e012e 	.word	0x012e012e
 8007584:	012e012e 	.word	0x012e012e
 8007588:	012e012e 	.word	0x012e012e
 800758c:	012e012e 	.word	0x012e012e
 8007590:	012e012e 	.word	0x012e012e
 8007594:	00ee012e 	.word	0x00ee012e
 8007598:	00f00108 	.word	0x00f00108
 800759c:	012e00f2 	.word	0x012e00f2
 80075a0:	012e012e 	.word	0x012e012e
 80075a4:	012e00f4 	.word	0x012e00f4
 80075a8:	012e012e 	.word	0x012e012e
 80075ac:	012e00f6 	.word	0x012e00f6
 80075b0:	00fa012e 	.word	0x00fa012e
 80075b4:	012e012e 	.word	0x012e012e
 80075b8:	012e00fc 	.word	0x012e00fc
 80075bc:	012e012e 	.word	0x012e012e
 80075c0:	012e012e 	.word	0x012e012e
 80075c4:	012e012e 	.word	0x012e012e
 80075c8:	012e012e 	.word	0x012e012e
 80075cc:	00fe012e 	.word	0x00fe012e
 80075d0:	0100012e 	.word	0x0100012e
 80075d4:	01040102 	.word	0x01040102
 80075d8:	012e012e 	.word	0x012e012e
 80075dc:	012e0126 	.word	0x012e0126
 80075e0:	012e012e 	.word	0x012e012e
 80075e4:	012e012e 	.word	0x012e012e
 80075e8:	012e012e 	.word	0x012e012e
 80075ec:	0114012e 	.word	0x0114012e
 80075f0:	010a0106 	.word	0x010a0106
 80075f4:	010e010c 	.word	0x010e010c
 80075f8:	012e0110 	.word	0x012e0110
 80075fc:	01160112 	.word	0x01160112
 8007600:	00ea011a 	.word	0x00ea011a
 8007604:	012c00c2 	.word	0x012c00c2
 8007608:	00d000ba 	.word	0x00d000ba
 800760c:	00a000bc 	.word	0x00a000bc
 8007610:	012a00a6 	.word	0x012a00a6
 8007614:	012e00f8 	.word	0x012e00f8
 8007618:	00c40118 	.word	0x00c40118
 800761c:	011c011e 	.word	0x011c011e
 8007620:	012e012e 	.word	0x012e012e
 8007624:	012e012e 	.word	0x012e012e
 8007628:	00d4012e 	.word	0x00d4012e
 800762c:	012e012e 	.word	0x012e012e
 8007630:	00e6012e 	.word	0x00e6012e
 8007634:	01200128 	.word	0x01200128
 8007638:	01240122 	.word	0x01240122
 800763c:	4b55      	ldr	r3, [pc, #340]	; (8007794 <_strerror_r+0x288>)
 800763e:	4618      	mov	r0, r3
 8007640:	bd10      	pop	{r4, pc}
 8007642:	4b55      	ldr	r3, [pc, #340]	; (8007798 <_strerror_r+0x28c>)
 8007644:	e7fb      	b.n	800763e <_strerror_r+0x132>
 8007646:	4b55      	ldr	r3, [pc, #340]	; (800779c <_strerror_r+0x290>)
 8007648:	e7f9      	b.n	800763e <_strerror_r+0x132>
 800764a:	4b55      	ldr	r3, [pc, #340]	; (80077a0 <_strerror_r+0x294>)
 800764c:	e7f7      	b.n	800763e <_strerror_r+0x132>
 800764e:	4b55      	ldr	r3, [pc, #340]	; (80077a4 <_strerror_r+0x298>)
 8007650:	e7f5      	b.n	800763e <_strerror_r+0x132>
 8007652:	4b55      	ldr	r3, [pc, #340]	; (80077a8 <_strerror_r+0x29c>)
 8007654:	e7f3      	b.n	800763e <_strerror_r+0x132>
 8007656:	4b55      	ldr	r3, [pc, #340]	; (80077ac <_strerror_r+0x2a0>)
 8007658:	e7f1      	b.n	800763e <_strerror_r+0x132>
 800765a:	4b55      	ldr	r3, [pc, #340]	; (80077b0 <_strerror_r+0x2a4>)
 800765c:	e7ef      	b.n	800763e <_strerror_r+0x132>
 800765e:	4b55      	ldr	r3, [pc, #340]	; (80077b4 <_strerror_r+0x2a8>)
 8007660:	e7ed      	b.n	800763e <_strerror_r+0x132>
 8007662:	4b55      	ldr	r3, [pc, #340]	; (80077b8 <_strerror_r+0x2ac>)
 8007664:	e7eb      	b.n	800763e <_strerror_r+0x132>
 8007666:	4b55      	ldr	r3, [pc, #340]	; (80077bc <_strerror_r+0x2b0>)
 8007668:	e7e9      	b.n	800763e <_strerror_r+0x132>
 800766a:	4b55      	ldr	r3, [pc, #340]	; (80077c0 <_strerror_r+0x2b4>)
 800766c:	e7e7      	b.n	800763e <_strerror_r+0x132>
 800766e:	4b55      	ldr	r3, [pc, #340]	; (80077c4 <_strerror_r+0x2b8>)
 8007670:	e7e5      	b.n	800763e <_strerror_r+0x132>
 8007672:	4b55      	ldr	r3, [pc, #340]	; (80077c8 <_strerror_r+0x2bc>)
 8007674:	e7e3      	b.n	800763e <_strerror_r+0x132>
 8007676:	4b55      	ldr	r3, [pc, #340]	; (80077cc <_strerror_r+0x2c0>)
 8007678:	e7e1      	b.n	800763e <_strerror_r+0x132>
 800767a:	4b55      	ldr	r3, [pc, #340]	; (80077d0 <_strerror_r+0x2c4>)
 800767c:	e7df      	b.n	800763e <_strerror_r+0x132>
 800767e:	4b55      	ldr	r3, [pc, #340]	; (80077d4 <_strerror_r+0x2c8>)
 8007680:	e7dd      	b.n	800763e <_strerror_r+0x132>
 8007682:	4b55      	ldr	r3, [pc, #340]	; (80077d8 <_strerror_r+0x2cc>)
 8007684:	e7db      	b.n	800763e <_strerror_r+0x132>
 8007686:	4b55      	ldr	r3, [pc, #340]	; (80077dc <_strerror_r+0x2d0>)
 8007688:	e7d9      	b.n	800763e <_strerror_r+0x132>
 800768a:	4b55      	ldr	r3, [pc, #340]	; (80077e0 <_strerror_r+0x2d4>)
 800768c:	e7d7      	b.n	800763e <_strerror_r+0x132>
 800768e:	4b55      	ldr	r3, [pc, #340]	; (80077e4 <_strerror_r+0x2d8>)
 8007690:	e7d5      	b.n	800763e <_strerror_r+0x132>
 8007692:	4b55      	ldr	r3, [pc, #340]	; (80077e8 <_strerror_r+0x2dc>)
 8007694:	e7d3      	b.n	800763e <_strerror_r+0x132>
 8007696:	4b55      	ldr	r3, [pc, #340]	; (80077ec <_strerror_r+0x2e0>)
 8007698:	e7d1      	b.n	800763e <_strerror_r+0x132>
 800769a:	4b55      	ldr	r3, [pc, #340]	; (80077f0 <_strerror_r+0x2e4>)
 800769c:	e7cf      	b.n	800763e <_strerror_r+0x132>
 800769e:	4b55      	ldr	r3, [pc, #340]	; (80077f4 <_strerror_r+0x2e8>)
 80076a0:	e7cd      	b.n	800763e <_strerror_r+0x132>
 80076a2:	4b55      	ldr	r3, [pc, #340]	; (80077f8 <_strerror_r+0x2ec>)
 80076a4:	e7cb      	b.n	800763e <_strerror_r+0x132>
 80076a6:	4b55      	ldr	r3, [pc, #340]	; (80077fc <_strerror_r+0x2f0>)
 80076a8:	e7c9      	b.n	800763e <_strerror_r+0x132>
 80076aa:	4b55      	ldr	r3, [pc, #340]	; (8007800 <_strerror_r+0x2f4>)
 80076ac:	e7c7      	b.n	800763e <_strerror_r+0x132>
 80076ae:	4b55      	ldr	r3, [pc, #340]	; (8007804 <_strerror_r+0x2f8>)
 80076b0:	e7c5      	b.n	800763e <_strerror_r+0x132>
 80076b2:	4b55      	ldr	r3, [pc, #340]	; (8007808 <_strerror_r+0x2fc>)
 80076b4:	e7c3      	b.n	800763e <_strerror_r+0x132>
 80076b6:	4b55      	ldr	r3, [pc, #340]	; (800780c <_strerror_r+0x300>)
 80076b8:	e7c1      	b.n	800763e <_strerror_r+0x132>
 80076ba:	4b55      	ldr	r3, [pc, #340]	; (8007810 <_strerror_r+0x304>)
 80076bc:	e7bf      	b.n	800763e <_strerror_r+0x132>
 80076be:	4b55      	ldr	r3, [pc, #340]	; (8007814 <_strerror_r+0x308>)
 80076c0:	e7bd      	b.n	800763e <_strerror_r+0x132>
 80076c2:	4b55      	ldr	r3, [pc, #340]	; (8007818 <_strerror_r+0x30c>)
 80076c4:	e7bb      	b.n	800763e <_strerror_r+0x132>
 80076c6:	4b55      	ldr	r3, [pc, #340]	; (800781c <_strerror_r+0x310>)
 80076c8:	e7b9      	b.n	800763e <_strerror_r+0x132>
 80076ca:	4b55      	ldr	r3, [pc, #340]	; (8007820 <_strerror_r+0x314>)
 80076cc:	e7b7      	b.n	800763e <_strerror_r+0x132>
 80076ce:	4b55      	ldr	r3, [pc, #340]	; (8007824 <_strerror_r+0x318>)
 80076d0:	e7b5      	b.n	800763e <_strerror_r+0x132>
 80076d2:	4b55      	ldr	r3, [pc, #340]	; (8007828 <_strerror_r+0x31c>)
 80076d4:	e7b3      	b.n	800763e <_strerror_r+0x132>
 80076d6:	4b55      	ldr	r3, [pc, #340]	; (800782c <_strerror_r+0x320>)
 80076d8:	e7b1      	b.n	800763e <_strerror_r+0x132>
 80076da:	4b55      	ldr	r3, [pc, #340]	; (8007830 <_strerror_r+0x324>)
 80076dc:	e7af      	b.n	800763e <_strerror_r+0x132>
 80076de:	4b55      	ldr	r3, [pc, #340]	; (8007834 <_strerror_r+0x328>)
 80076e0:	e7ad      	b.n	800763e <_strerror_r+0x132>
 80076e2:	4b55      	ldr	r3, [pc, #340]	; (8007838 <_strerror_r+0x32c>)
 80076e4:	e7ab      	b.n	800763e <_strerror_r+0x132>
 80076e6:	4b55      	ldr	r3, [pc, #340]	; (800783c <_strerror_r+0x330>)
 80076e8:	e7a9      	b.n	800763e <_strerror_r+0x132>
 80076ea:	4b55      	ldr	r3, [pc, #340]	; (8007840 <_strerror_r+0x334>)
 80076ec:	e7a7      	b.n	800763e <_strerror_r+0x132>
 80076ee:	4b55      	ldr	r3, [pc, #340]	; (8007844 <_strerror_r+0x338>)
 80076f0:	e7a5      	b.n	800763e <_strerror_r+0x132>
 80076f2:	4b55      	ldr	r3, [pc, #340]	; (8007848 <_strerror_r+0x33c>)
 80076f4:	e7a3      	b.n	800763e <_strerror_r+0x132>
 80076f6:	4b55      	ldr	r3, [pc, #340]	; (800784c <_strerror_r+0x340>)
 80076f8:	e7a1      	b.n	800763e <_strerror_r+0x132>
 80076fa:	4b55      	ldr	r3, [pc, #340]	; (8007850 <_strerror_r+0x344>)
 80076fc:	e79f      	b.n	800763e <_strerror_r+0x132>
 80076fe:	4b55      	ldr	r3, [pc, #340]	; (8007854 <_strerror_r+0x348>)
 8007700:	e79d      	b.n	800763e <_strerror_r+0x132>
 8007702:	4b55      	ldr	r3, [pc, #340]	; (8007858 <_strerror_r+0x34c>)
 8007704:	e79b      	b.n	800763e <_strerror_r+0x132>
 8007706:	4b55      	ldr	r3, [pc, #340]	; (800785c <_strerror_r+0x350>)
 8007708:	e799      	b.n	800763e <_strerror_r+0x132>
 800770a:	4b55      	ldr	r3, [pc, #340]	; (8007860 <_strerror_r+0x354>)
 800770c:	e797      	b.n	800763e <_strerror_r+0x132>
 800770e:	4b55      	ldr	r3, [pc, #340]	; (8007864 <_strerror_r+0x358>)
 8007710:	e795      	b.n	800763e <_strerror_r+0x132>
 8007712:	4b55      	ldr	r3, [pc, #340]	; (8007868 <_strerror_r+0x35c>)
 8007714:	e793      	b.n	800763e <_strerror_r+0x132>
 8007716:	4b55      	ldr	r3, [pc, #340]	; (800786c <_strerror_r+0x360>)
 8007718:	e791      	b.n	800763e <_strerror_r+0x132>
 800771a:	4b55      	ldr	r3, [pc, #340]	; (8007870 <_strerror_r+0x364>)
 800771c:	e78f      	b.n	800763e <_strerror_r+0x132>
 800771e:	4b55      	ldr	r3, [pc, #340]	; (8007874 <_strerror_r+0x368>)
 8007720:	e78d      	b.n	800763e <_strerror_r+0x132>
 8007722:	4b55      	ldr	r3, [pc, #340]	; (8007878 <_strerror_r+0x36c>)
 8007724:	e78b      	b.n	800763e <_strerror_r+0x132>
 8007726:	4b55      	ldr	r3, [pc, #340]	; (800787c <_strerror_r+0x370>)
 8007728:	e789      	b.n	800763e <_strerror_r+0x132>
 800772a:	4b55      	ldr	r3, [pc, #340]	; (8007880 <_strerror_r+0x374>)
 800772c:	e787      	b.n	800763e <_strerror_r+0x132>
 800772e:	4b55      	ldr	r3, [pc, #340]	; (8007884 <_strerror_r+0x378>)
 8007730:	e785      	b.n	800763e <_strerror_r+0x132>
 8007732:	4b55      	ldr	r3, [pc, #340]	; (8007888 <_strerror_r+0x37c>)
 8007734:	e783      	b.n	800763e <_strerror_r+0x132>
 8007736:	4b55      	ldr	r3, [pc, #340]	; (800788c <_strerror_r+0x380>)
 8007738:	e781      	b.n	800763e <_strerror_r+0x132>
 800773a:	4b55      	ldr	r3, [pc, #340]	; (8007890 <_strerror_r+0x384>)
 800773c:	e77f      	b.n	800763e <_strerror_r+0x132>
 800773e:	4b55      	ldr	r3, [pc, #340]	; (8007894 <_strerror_r+0x388>)
 8007740:	e77d      	b.n	800763e <_strerror_r+0x132>
 8007742:	4b55      	ldr	r3, [pc, #340]	; (8007898 <_strerror_r+0x38c>)
 8007744:	e77b      	b.n	800763e <_strerror_r+0x132>
 8007746:	4b55      	ldr	r3, [pc, #340]	; (800789c <_strerror_r+0x390>)
 8007748:	e779      	b.n	800763e <_strerror_r+0x132>
 800774a:	4b55      	ldr	r3, [pc, #340]	; (80078a0 <_strerror_r+0x394>)
 800774c:	e777      	b.n	800763e <_strerror_r+0x132>
 800774e:	4b55      	ldr	r3, [pc, #340]	; (80078a4 <_strerror_r+0x398>)
 8007750:	e775      	b.n	800763e <_strerror_r+0x132>
 8007752:	4b55      	ldr	r3, [pc, #340]	; (80078a8 <_strerror_r+0x39c>)
 8007754:	e773      	b.n	800763e <_strerror_r+0x132>
 8007756:	4b55      	ldr	r3, [pc, #340]	; (80078ac <_strerror_r+0x3a0>)
 8007758:	e771      	b.n	800763e <_strerror_r+0x132>
 800775a:	4b55      	ldr	r3, [pc, #340]	; (80078b0 <_strerror_r+0x3a4>)
 800775c:	e76f      	b.n	800763e <_strerror_r+0x132>
 800775e:	4b55      	ldr	r3, [pc, #340]	; (80078b4 <_strerror_r+0x3a8>)
 8007760:	e76d      	b.n	800763e <_strerror_r+0x132>
 8007762:	4b55      	ldr	r3, [pc, #340]	; (80078b8 <_strerror_r+0x3ac>)
 8007764:	e76b      	b.n	800763e <_strerror_r+0x132>
 8007766:	4b55      	ldr	r3, [pc, #340]	; (80078bc <_strerror_r+0x3b0>)
 8007768:	e769      	b.n	800763e <_strerror_r+0x132>
 800776a:	4b55      	ldr	r3, [pc, #340]	; (80078c0 <_strerror_r+0x3b4>)
 800776c:	e767      	b.n	800763e <_strerror_r+0x132>
 800776e:	4b55      	ldr	r3, [pc, #340]	; (80078c4 <_strerror_r+0x3b8>)
 8007770:	e765      	b.n	800763e <_strerror_r+0x132>
 8007772:	4b55      	ldr	r3, [pc, #340]	; (80078c8 <_strerror_r+0x3bc>)
 8007774:	e763      	b.n	800763e <_strerror_r+0x132>
 8007776:	4b55      	ldr	r3, [pc, #340]	; (80078cc <_strerror_r+0x3c0>)
 8007778:	e761      	b.n	800763e <_strerror_r+0x132>
 800777a:	2b00      	cmp	r3, #0
 800777c:	bf14      	ite	ne
 800777e:	461a      	movne	r2, r3
 8007780:	4622      	moveq	r2, r4
 8007782:	f000 f8a9 	bl	80078d8 <_user_strerror>
 8007786:	4b52      	ldr	r3, [pc, #328]	; (80078d0 <_strerror_r+0x3c4>)
 8007788:	2800      	cmp	r0, #0
 800778a:	bf18      	it	ne
 800778c:	4603      	movne	r3, r0
 800778e:	e756      	b.n	800763e <_strerror_r+0x132>
 8007790:	4b50      	ldr	r3, [pc, #320]	; (80078d4 <_strerror_r+0x3c8>)
 8007792:	e754      	b.n	800763e <_strerror_r+0x132>
 8007794:	08009ca8 	.word	0x08009ca8
 8007798:	08009cb2 	.word	0x08009cb2
 800779c:	08009ccc 	.word	0x08009ccc
 80077a0:	08009cdc 	.word	0x08009cdc
 80077a4:	08009cf4 	.word	0x08009cf4
 80077a8:	08009cfe 	.word	0x08009cfe
 80077ac:	08009d18 	.word	0x08009d18
 80077b0:	08009d2a 	.word	0x08009d2a
 80077b4:	08009d3c 	.word	0x08009d3c
 80077b8:	08009d55 	.word	0x08009d55
 80077bc:	08009d65 	.word	0x08009d65
 80077c0:	08009d71 	.word	0x08009d71
 80077c4:	08009d8e 	.word	0x08009d8e
 80077c8:	08009da0 	.word	0x08009da0
 80077cc:	08009db1 	.word	0x08009db1
 80077d0:	08009dc3 	.word	0x08009dc3
 80077d4:	08009dcf 	.word	0x08009dcf
 80077d8:	08009de7 	.word	0x08009de7
 80077dc:	08009df3 	.word	0x08009df3
 80077e0:	08009e05 	.word	0x08009e05
 80077e4:	08009e14 	.word	0x08009e14
 80077e8:	08009e24 	.word	0x08009e24
 80077ec:	08009e31 	.word	0x08009e31
 80077f0:	08009e50 	.word	0x08009e50
 80077f4:	08009e5f 	.word	0x08009e5f
 80077f8:	08009e70 	.word	0x08009e70
 80077fc:	08009e94 	.word	0x08009e94
 8007800:	08009eb2 	.word	0x08009eb2
 8007804:	08009ed0 	.word	0x08009ed0
 8007808:	08009ef0 	.word	0x08009ef0
 800780c:	08009f07 	.word	0x08009f07
 8007810:	08009f16 	.word	0x08009f16
 8007814:	08009f25 	.word	0x08009f25
 8007818:	08009f39 	.word	0x08009f39
 800781c:	08009f51 	.word	0x08009f51
 8007820:	08009f5f 	.word	0x08009f5f
 8007824:	08009f6c 	.word	0x08009f6c
 8007828:	08009f82 	.word	0x08009f82
 800782c:	08009f91 	.word	0x08009f91
 8007830:	08009f9d 	.word	0x08009f9d
 8007834:	08009fcc 	.word	0x08009fcc
 8007838:	08009fdd 	.word	0x08009fdd
 800783c:	08009ff8 	.word	0x08009ff8
 8007840:	0800a00b 	.word	0x0800a00b
 8007844:	0800a021 	.word	0x0800a021
 8007848:	0800a02a 	.word	0x0800a02a
 800784c:	0800a041 	.word	0x0800a041
 8007850:	0800a049 	.word	0x0800a049
 8007854:	0800a056 	.word	0x0800a056
 8007858:	0800a06b 	.word	0x0800a06b
 800785c:	0800a07f 	.word	0x0800a07f
 8007860:	0800a097 	.word	0x0800a097
 8007864:	0800a0a6 	.word	0x0800a0a6
 8007868:	0800a0b7 	.word	0x0800a0b7
 800786c:	0800a0ca 	.word	0x0800a0ca
 8007870:	0800a0d6 	.word	0x0800a0d6
 8007874:	0800a0ef 	.word	0x0800a0ef
 8007878:	0800a103 	.word	0x0800a103
 800787c:	0800a11e 	.word	0x0800a11e
 8007880:	0800a136 	.word	0x0800a136
 8007884:	0800a150 	.word	0x0800a150
 8007888:	0800a158 	.word	0x0800a158
 800788c:	0800a188 	.word	0x0800a188
 8007890:	0800a1a7 	.word	0x0800a1a7
 8007894:	0800a1c6 	.word	0x0800a1c6
 8007898:	0800a1dd 	.word	0x0800a1dd
 800789c:	0800a1f0 	.word	0x0800a1f0
 80078a0:	0800a209 	.word	0x0800a209
 80078a4:	0800a220 	.word	0x0800a220
 80078a8:	0800a236 	.word	0x0800a236
 80078ac:	0800a257 	.word	0x0800a257
 80078b0:	0800a26f 	.word	0x0800a26f
 80078b4:	0800a28b 	.word	0x0800a28b
 80078b8:	0800a29e 	.word	0x0800a29e
 80078bc:	0800a2b4 	.word	0x0800a2b4
 80078c0:	0800a2c8 	.word	0x0800a2c8
 80078c4:	0800a2ea 	.word	0x0800a2ea
 80078c8:	0800a310 	.word	0x0800a310
 80078cc:	0800a321 	.word	0x0800a321
 80078d0:	0800a5d8 	.word	0x0800a5d8
 80078d4:	0800a336 	.word	0x0800a336

080078d8 <_user_strerror>:
 80078d8:	2000      	movs	r0, #0
 80078da:	4770      	bx	lr

080078dc <_vsiprintf_r>:
 80078dc:	b500      	push	{lr}
 80078de:	b09b      	sub	sp, #108	; 0x6c
 80078e0:	9100      	str	r1, [sp, #0]
 80078e2:	9104      	str	r1, [sp, #16]
 80078e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078e8:	9105      	str	r1, [sp, #20]
 80078ea:	9102      	str	r1, [sp, #8]
 80078ec:	4905      	ldr	r1, [pc, #20]	; (8007904 <_vsiprintf_r+0x28>)
 80078ee:	9103      	str	r1, [sp, #12]
 80078f0:	4669      	mov	r1, sp
 80078f2:	f001 fcad 	bl	8009250 <_svfiprintf_r>
 80078f6:	9b00      	ldr	r3, [sp, #0]
 80078f8:	2200      	movs	r2, #0
 80078fa:	701a      	strb	r2, [r3, #0]
 80078fc:	b01b      	add	sp, #108	; 0x6c
 80078fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007902:	bf00      	nop
 8007904:	ffff0208 	.word	0xffff0208

08007908 <vsiprintf>:
 8007908:	4613      	mov	r3, r2
 800790a:	460a      	mov	r2, r1
 800790c:	4601      	mov	r1, r0
 800790e:	4802      	ldr	r0, [pc, #8]	; (8007918 <vsiprintf+0x10>)
 8007910:	6800      	ldr	r0, [r0, #0]
 8007912:	f7ff bfe3 	b.w	80078dc <_vsiprintf_r>
 8007916:	bf00      	nop
 8007918:	2000003c 	.word	0x2000003c

0800791c <_write_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4d07      	ldr	r5, [pc, #28]	; (800793c <_write_r+0x20>)
 8007920:	4604      	mov	r4, r0
 8007922:	4608      	mov	r0, r1
 8007924:	4611      	mov	r1, r2
 8007926:	2200      	movs	r2, #0
 8007928:	602a      	str	r2, [r5, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	f7f9 ffc9 	bl	80018c2 <_write>
 8007930:	1c43      	adds	r3, r0, #1
 8007932:	d102      	bne.n	800793a <_write_r+0x1e>
 8007934:	682b      	ldr	r3, [r5, #0]
 8007936:	b103      	cbz	r3, 800793a <_write_r+0x1e>
 8007938:	6023      	str	r3, [r4, #0]
 800793a:	bd38      	pop	{r3, r4, r5, pc}
 800793c:	20000630 	.word	0x20000630

08007940 <quorem>:
 8007940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007944:	6903      	ldr	r3, [r0, #16]
 8007946:	690c      	ldr	r4, [r1, #16]
 8007948:	42a3      	cmp	r3, r4
 800794a:	4607      	mov	r7, r0
 800794c:	f2c0 8081 	blt.w	8007a52 <quorem+0x112>
 8007950:	3c01      	subs	r4, #1
 8007952:	f101 0814 	add.w	r8, r1, #20
 8007956:	f100 0514 	add.w	r5, r0, #20
 800795a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800795e:	9301      	str	r3, [sp, #4]
 8007960:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007968:	3301      	adds	r3, #1
 800796a:	429a      	cmp	r2, r3
 800796c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007970:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007974:	fbb2 f6f3 	udiv	r6, r2, r3
 8007978:	d331      	bcc.n	80079de <quorem+0x9e>
 800797a:	f04f 0e00 	mov.w	lr, #0
 800797e:	4640      	mov	r0, r8
 8007980:	46ac      	mov	ip, r5
 8007982:	46f2      	mov	sl, lr
 8007984:	f850 2b04 	ldr.w	r2, [r0], #4
 8007988:	b293      	uxth	r3, r2
 800798a:	fb06 e303 	mla	r3, r6, r3, lr
 800798e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007992:	b29b      	uxth	r3, r3
 8007994:	ebaa 0303 	sub.w	r3, sl, r3
 8007998:	f8dc a000 	ldr.w	sl, [ip]
 800799c:	0c12      	lsrs	r2, r2, #16
 800799e:	fa13 f38a 	uxtah	r3, r3, sl
 80079a2:	fb06 e202 	mla	r2, r6, r2, lr
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	9b00      	ldr	r3, [sp, #0]
 80079aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079ae:	b292      	uxth	r2, r2
 80079b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80079bc:	4581      	cmp	r9, r0
 80079be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079c2:	f84c 3b04 	str.w	r3, [ip], #4
 80079c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079ca:	d2db      	bcs.n	8007984 <quorem+0x44>
 80079cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80079d0:	b92b      	cbnz	r3, 80079de <quorem+0x9e>
 80079d2:	9b01      	ldr	r3, [sp, #4]
 80079d4:	3b04      	subs	r3, #4
 80079d6:	429d      	cmp	r5, r3
 80079d8:	461a      	mov	r2, r3
 80079da:	d32e      	bcc.n	8007a3a <quorem+0xfa>
 80079dc:	613c      	str	r4, [r7, #16]
 80079de:	4638      	mov	r0, r7
 80079e0:	f001 fac2 	bl	8008f68 <__mcmp>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	db24      	blt.n	8007a32 <quorem+0xf2>
 80079e8:	3601      	adds	r6, #1
 80079ea:	4628      	mov	r0, r5
 80079ec:	f04f 0c00 	mov.w	ip, #0
 80079f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80079f4:	f8d0 e000 	ldr.w	lr, [r0]
 80079f8:	b293      	uxth	r3, r2
 80079fa:	ebac 0303 	sub.w	r3, ip, r3
 80079fe:	0c12      	lsrs	r2, r2, #16
 8007a00:	fa13 f38e 	uxtah	r3, r3, lr
 8007a04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a12:	45c1      	cmp	r9, r8
 8007a14:	f840 3b04 	str.w	r3, [r0], #4
 8007a18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a1c:	d2e8      	bcs.n	80079f0 <quorem+0xb0>
 8007a1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a26:	b922      	cbnz	r2, 8007a32 <quorem+0xf2>
 8007a28:	3b04      	subs	r3, #4
 8007a2a:	429d      	cmp	r5, r3
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	d30a      	bcc.n	8007a46 <quorem+0x106>
 8007a30:	613c      	str	r4, [r7, #16]
 8007a32:	4630      	mov	r0, r6
 8007a34:	b003      	add	sp, #12
 8007a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3a:	6812      	ldr	r2, [r2, #0]
 8007a3c:	3b04      	subs	r3, #4
 8007a3e:	2a00      	cmp	r2, #0
 8007a40:	d1cc      	bne.n	80079dc <quorem+0x9c>
 8007a42:	3c01      	subs	r4, #1
 8007a44:	e7c7      	b.n	80079d6 <quorem+0x96>
 8007a46:	6812      	ldr	r2, [r2, #0]
 8007a48:	3b04      	subs	r3, #4
 8007a4a:	2a00      	cmp	r2, #0
 8007a4c:	d1f0      	bne.n	8007a30 <quorem+0xf0>
 8007a4e:	3c01      	subs	r4, #1
 8007a50:	e7eb      	b.n	8007a2a <quorem+0xea>
 8007a52:	2000      	movs	r0, #0
 8007a54:	e7ee      	b.n	8007a34 <quorem+0xf4>
	...

08007a58 <_dtoa_r>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	ed2d 8b04 	vpush	{d8-d9}
 8007a60:	ec57 6b10 	vmov	r6, r7, d0
 8007a64:	b093      	sub	sp, #76	; 0x4c
 8007a66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a6c:	9106      	str	r1, [sp, #24]
 8007a6e:	ee10 aa10 	vmov	sl, s0
 8007a72:	4604      	mov	r4, r0
 8007a74:	9209      	str	r2, [sp, #36]	; 0x24
 8007a76:	930c      	str	r3, [sp, #48]	; 0x30
 8007a78:	46bb      	mov	fp, r7
 8007a7a:	b975      	cbnz	r5, 8007a9a <_dtoa_r+0x42>
 8007a7c:	2010      	movs	r0, #16
 8007a7e:	f7fe fef5 	bl	800686c <malloc>
 8007a82:	4602      	mov	r2, r0
 8007a84:	6260      	str	r0, [r4, #36]	; 0x24
 8007a86:	b920      	cbnz	r0, 8007a92 <_dtoa_r+0x3a>
 8007a88:	4ba7      	ldr	r3, [pc, #668]	; (8007d28 <_dtoa_r+0x2d0>)
 8007a8a:	21ea      	movs	r1, #234	; 0xea
 8007a8c:	48a7      	ldr	r0, [pc, #668]	; (8007d2c <_dtoa_r+0x2d4>)
 8007a8e:	f001 fd23 	bl	80094d8 <__assert_func>
 8007a92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a96:	6005      	str	r5, [r0, #0]
 8007a98:	60c5      	str	r5, [r0, #12]
 8007a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a9c:	6819      	ldr	r1, [r3, #0]
 8007a9e:	b151      	cbz	r1, 8007ab6 <_dtoa_r+0x5e>
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	604a      	str	r2, [r1, #4]
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	4093      	lsls	r3, r2
 8007aa8:	608b      	str	r3, [r1, #8]
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f001 f81a 	bl	8008ae4 <_Bfree>
 8007ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	1e3b      	subs	r3, r7, #0
 8007ab8:	bfaa      	itet	ge
 8007aba:	2300      	movge	r3, #0
 8007abc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007ac0:	f8c8 3000 	strge.w	r3, [r8]
 8007ac4:	4b9a      	ldr	r3, [pc, #616]	; (8007d30 <_dtoa_r+0x2d8>)
 8007ac6:	bfbc      	itt	lt
 8007ac8:	2201      	movlt	r2, #1
 8007aca:	f8c8 2000 	strlt.w	r2, [r8]
 8007ace:	ea33 030b 	bics.w	r3, r3, fp
 8007ad2:	d11b      	bne.n	8007b0c <_dtoa_r+0xb4>
 8007ad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ae0:	4333      	orrs	r3, r6
 8007ae2:	f000 8592 	beq.w	800860a <_dtoa_r+0xbb2>
 8007ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ae8:	b963      	cbnz	r3, 8007b04 <_dtoa_r+0xac>
 8007aea:	4b92      	ldr	r3, [pc, #584]	; (8007d34 <_dtoa_r+0x2dc>)
 8007aec:	e022      	b.n	8007b34 <_dtoa_r+0xdc>
 8007aee:	4b92      	ldr	r3, [pc, #584]	; (8007d38 <_dtoa_r+0x2e0>)
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	3308      	adds	r3, #8
 8007af4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	9801      	ldr	r0, [sp, #4]
 8007afa:	b013      	add	sp, #76	; 0x4c
 8007afc:	ecbd 8b04 	vpop	{d8-d9}
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b04:	4b8b      	ldr	r3, [pc, #556]	; (8007d34 <_dtoa_r+0x2dc>)
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	3303      	adds	r3, #3
 8007b0a:	e7f3      	b.n	8007af4 <_dtoa_r+0x9c>
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	2300      	movs	r3, #0
 8007b10:	4650      	mov	r0, sl
 8007b12:	4659      	mov	r1, fp
 8007b14:	f7f8 ffd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b18:	ec4b ab19 	vmov	d9, sl, fp
 8007b1c:	4680      	mov	r8, r0
 8007b1e:	b158      	cbz	r0, 8007b38 <_dtoa_r+0xe0>
 8007b20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b22:	2301      	movs	r3, #1
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 856b 	beq.w	8008604 <_dtoa_r+0xbac>
 8007b2e:	4883      	ldr	r0, [pc, #524]	; (8007d3c <_dtoa_r+0x2e4>)
 8007b30:	6018      	str	r0, [r3, #0]
 8007b32:	1e43      	subs	r3, r0, #1
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	e7df      	b.n	8007af8 <_dtoa_r+0xa0>
 8007b38:	ec4b ab10 	vmov	d0, sl, fp
 8007b3c:	aa10      	add	r2, sp, #64	; 0x40
 8007b3e:	a911      	add	r1, sp, #68	; 0x44
 8007b40:	4620      	mov	r0, r4
 8007b42:	f001 fab7 	bl	80090b4 <__d2b>
 8007b46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007b4a:	ee08 0a10 	vmov	s16, r0
 8007b4e:	2d00      	cmp	r5, #0
 8007b50:	f000 8084 	beq.w	8007c5c <_dtoa_r+0x204>
 8007b54:	ee19 3a90 	vmov	r3, s19
 8007b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b60:	4656      	mov	r6, sl
 8007b62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007b6e:	4b74      	ldr	r3, [pc, #464]	; (8007d40 <_dtoa_r+0x2e8>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	4630      	mov	r0, r6
 8007b74:	4639      	mov	r1, r7
 8007b76:	f7f8 fb87 	bl	8000288 <__aeabi_dsub>
 8007b7a:	a365      	add	r3, pc, #404	; (adr r3, 8007d10 <_dtoa_r+0x2b8>)
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f7f8 fd3a 	bl	80005f8 <__aeabi_dmul>
 8007b84:	a364      	add	r3, pc, #400	; (adr r3, 8007d18 <_dtoa_r+0x2c0>)
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	f7f8 fb7f 	bl	800028c <__adddf3>
 8007b8e:	4606      	mov	r6, r0
 8007b90:	4628      	mov	r0, r5
 8007b92:	460f      	mov	r7, r1
 8007b94:	f7f8 fcc6 	bl	8000524 <__aeabi_i2d>
 8007b98:	a361      	add	r3, pc, #388	; (adr r3, 8007d20 <_dtoa_r+0x2c8>)
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	f7f8 fd2b 	bl	80005f8 <__aeabi_dmul>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	4639      	mov	r1, r7
 8007baa:	f7f8 fb6f 	bl	800028c <__adddf3>
 8007bae:	4606      	mov	r6, r0
 8007bb0:	460f      	mov	r7, r1
 8007bb2:	f7f8 ffd1 	bl	8000b58 <__aeabi_d2iz>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	9000      	str	r0, [sp, #0]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f7f8 ff8c 	bl	8000adc <__aeabi_dcmplt>
 8007bc4:	b150      	cbz	r0, 8007bdc <_dtoa_r+0x184>
 8007bc6:	9800      	ldr	r0, [sp, #0]
 8007bc8:	f7f8 fcac 	bl	8000524 <__aeabi_i2d>
 8007bcc:	4632      	mov	r2, r6
 8007bce:	463b      	mov	r3, r7
 8007bd0:	f7f8 ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bd4:	b910      	cbnz	r0, 8007bdc <_dtoa_r+0x184>
 8007bd6:	9b00      	ldr	r3, [sp, #0]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	9b00      	ldr	r3, [sp, #0]
 8007bde:	2b16      	cmp	r3, #22
 8007be0:	d85a      	bhi.n	8007c98 <_dtoa_r+0x240>
 8007be2:	9a00      	ldr	r2, [sp, #0]
 8007be4:	4b57      	ldr	r3, [pc, #348]	; (8007d44 <_dtoa_r+0x2ec>)
 8007be6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	ec51 0b19 	vmov	r0, r1, d9
 8007bf2:	f7f8 ff73 	bl	8000adc <__aeabi_dcmplt>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d050      	beq.n	8007c9c <_dtoa_r+0x244>
 8007bfa:	9b00      	ldr	r3, [sp, #0]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	2300      	movs	r3, #0
 8007c02:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c06:	1b5d      	subs	r5, r3, r5
 8007c08:	1e6b      	subs	r3, r5, #1
 8007c0a:	9305      	str	r3, [sp, #20]
 8007c0c:	bf45      	ittet	mi
 8007c0e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c12:	9304      	strmi	r3, [sp, #16]
 8007c14:	2300      	movpl	r3, #0
 8007c16:	2300      	movmi	r3, #0
 8007c18:	bf4c      	ite	mi
 8007c1a:	9305      	strmi	r3, [sp, #20]
 8007c1c:	9304      	strpl	r3, [sp, #16]
 8007c1e:	9b00      	ldr	r3, [sp, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	db3d      	blt.n	8007ca0 <_dtoa_r+0x248>
 8007c24:	9b05      	ldr	r3, [sp, #20]
 8007c26:	9a00      	ldr	r2, [sp, #0]
 8007c28:	920a      	str	r2, [sp, #40]	; 0x28
 8007c2a:	4413      	add	r3, r2
 8007c2c:	9305      	str	r3, [sp, #20]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9307      	str	r3, [sp, #28]
 8007c32:	9b06      	ldr	r3, [sp, #24]
 8007c34:	2b09      	cmp	r3, #9
 8007c36:	f200 8089 	bhi.w	8007d4c <_dtoa_r+0x2f4>
 8007c3a:	2b05      	cmp	r3, #5
 8007c3c:	bfc4      	itt	gt
 8007c3e:	3b04      	subgt	r3, #4
 8007c40:	9306      	strgt	r3, [sp, #24]
 8007c42:	9b06      	ldr	r3, [sp, #24]
 8007c44:	f1a3 0302 	sub.w	r3, r3, #2
 8007c48:	bfcc      	ite	gt
 8007c4a:	2500      	movgt	r5, #0
 8007c4c:	2501      	movle	r5, #1
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	f200 8087 	bhi.w	8007d62 <_dtoa_r+0x30a>
 8007c54:	e8df f003 	tbb	[pc, r3]
 8007c58:	59383a2d 	.word	0x59383a2d
 8007c5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c60:	441d      	add	r5, r3
 8007c62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	bfc1      	itttt	gt
 8007c6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c72:	fa0b f303 	lslgt.w	r3, fp, r3
 8007c76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c7a:	bfda      	itte	le
 8007c7c:	f1c3 0320 	rsble	r3, r3, #32
 8007c80:	fa06 f003 	lslle.w	r0, r6, r3
 8007c84:	4318      	orrgt	r0, r3
 8007c86:	f7f8 fc3d 	bl	8000504 <__aeabi_ui2d>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007c92:	3d01      	subs	r5, #1
 8007c94:	930e      	str	r3, [sp, #56]	; 0x38
 8007c96:	e76a      	b.n	8007b6e <_dtoa_r+0x116>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e7b2      	b.n	8007c02 <_dtoa_r+0x1aa>
 8007c9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c9e:	e7b1      	b.n	8007c04 <_dtoa_r+0x1ac>
 8007ca0:	9b04      	ldr	r3, [sp, #16]
 8007ca2:	9a00      	ldr	r2, [sp, #0]
 8007ca4:	1a9b      	subs	r3, r3, r2
 8007ca6:	9304      	str	r3, [sp, #16]
 8007ca8:	4253      	negs	r3, r2
 8007caa:	9307      	str	r3, [sp, #28]
 8007cac:	2300      	movs	r3, #0
 8007cae:	930a      	str	r3, [sp, #40]	; 0x28
 8007cb0:	e7bf      	b.n	8007c32 <_dtoa_r+0x1da>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	9308      	str	r3, [sp, #32]
 8007cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc55      	bgt.n	8007d68 <_dtoa_r+0x310>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cc6:	e00c      	b.n	8007ce2 <_dtoa_r+0x28a>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e7f3      	b.n	8007cb4 <_dtoa_r+0x25c>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cd0:	9308      	str	r3, [sp, #32]
 8007cd2:	9b00      	ldr	r3, [sp, #0]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	9302      	str	r3, [sp, #8]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	9303      	str	r3, [sp, #12]
 8007cde:	bfb8      	it	lt
 8007ce0:	2301      	movlt	r3, #1
 8007ce2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	6042      	str	r2, [r0, #4]
 8007ce8:	2204      	movs	r2, #4
 8007cea:	f102 0614 	add.w	r6, r2, #20
 8007cee:	429e      	cmp	r6, r3
 8007cf0:	6841      	ldr	r1, [r0, #4]
 8007cf2:	d93d      	bls.n	8007d70 <_dtoa_r+0x318>
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 feb5 	bl	8008a64 <_Balloc>
 8007cfa:	9001      	str	r0, [sp, #4]
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d13b      	bne.n	8007d78 <_dtoa_r+0x320>
 8007d00:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <_dtoa_r+0x2f0>)
 8007d02:	4602      	mov	r2, r0
 8007d04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d08:	e6c0      	b.n	8007a8c <_dtoa_r+0x34>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e7df      	b.n	8007cce <_dtoa_r+0x276>
 8007d0e:	bf00      	nop
 8007d10:	636f4361 	.word	0x636f4361
 8007d14:	3fd287a7 	.word	0x3fd287a7
 8007d18:	8b60c8b3 	.word	0x8b60c8b3
 8007d1c:	3fc68a28 	.word	0x3fc68a28
 8007d20:	509f79fb 	.word	0x509f79fb
 8007d24:	3fd34413 	.word	0x3fd34413
 8007d28:	0800a34b 	.word	0x0800a34b
 8007d2c:	0800a362 	.word	0x0800a362
 8007d30:	7ff00000 	.word	0x7ff00000
 8007d34:	0800a347 	.word	0x0800a347
 8007d38:	0800a33e 	.word	0x0800a33e
 8007d3c:	08009c85 	.word	0x08009c85
 8007d40:	3ff80000 	.word	0x3ff80000
 8007d44:	0800a4b8 	.word	0x0800a4b8
 8007d48:	0800a3bd 	.word	0x0800a3bd
 8007d4c:	2501      	movs	r5, #1
 8007d4e:	2300      	movs	r3, #0
 8007d50:	9306      	str	r3, [sp, #24]
 8007d52:	9508      	str	r5, [sp, #32]
 8007d54:	f04f 33ff 	mov.w	r3, #4294967295
 8007d58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2312      	movs	r3, #18
 8007d60:	e7b0      	b.n	8007cc4 <_dtoa_r+0x26c>
 8007d62:	2301      	movs	r3, #1
 8007d64:	9308      	str	r3, [sp, #32]
 8007d66:	e7f5      	b.n	8007d54 <_dtoa_r+0x2fc>
 8007d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d6e:	e7b8      	b.n	8007ce2 <_dtoa_r+0x28a>
 8007d70:	3101      	adds	r1, #1
 8007d72:	6041      	str	r1, [r0, #4]
 8007d74:	0052      	lsls	r2, r2, #1
 8007d76:	e7b8      	b.n	8007cea <_dtoa_r+0x292>
 8007d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d7a:	9a01      	ldr	r2, [sp, #4]
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	9b03      	ldr	r3, [sp, #12]
 8007d80:	2b0e      	cmp	r3, #14
 8007d82:	f200 809d 	bhi.w	8007ec0 <_dtoa_r+0x468>
 8007d86:	2d00      	cmp	r5, #0
 8007d88:	f000 809a 	beq.w	8007ec0 <_dtoa_r+0x468>
 8007d8c:	9b00      	ldr	r3, [sp, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	dd32      	ble.n	8007df8 <_dtoa_r+0x3a0>
 8007d92:	4ab7      	ldr	r2, [pc, #732]	; (8008070 <_dtoa_r+0x618>)
 8007d94:	f003 030f 	and.w	r3, r3, #15
 8007d98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007da0:	9b00      	ldr	r3, [sp, #0]
 8007da2:	05d8      	lsls	r0, r3, #23
 8007da4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007da8:	d516      	bpl.n	8007dd8 <_dtoa_r+0x380>
 8007daa:	4bb2      	ldr	r3, [pc, #712]	; (8008074 <_dtoa_r+0x61c>)
 8007dac:	ec51 0b19 	vmov	r0, r1, d9
 8007db0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007db4:	f7f8 fd4a 	bl	800084c <__aeabi_ddiv>
 8007db8:	f007 070f 	and.w	r7, r7, #15
 8007dbc:	4682      	mov	sl, r0
 8007dbe:	468b      	mov	fp, r1
 8007dc0:	2503      	movs	r5, #3
 8007dc2:	4eac      	ldr	r6, [pc, #688]	; (8008074 <_dtoa_r+0x61c>)
 8007dc4:	b957      	cbnz	r7, 8007ddc <_dtoa_r+0x384>
 8007dc6:	4642      	mov	r2, r8
 8007dc8:	464b      	mov	r3, r9
 8007dca:	4650      	mov	r0, sl
 8007dcc:	4659      	mov	r1, fp
 8007dce:	f7f8 fd3d 	bl	800084c <__aeabi_ddiv>
 8007dd2:	4682      	mov	sl, r0
 8007dd4:	468b      	mov	fp, r1
 8007dd6:	e028      	b.n	8007e2a <_dtoa_r+0x3d2>
 8007dd8:	2502      	movs	r5, #2
 8007dda:	e7f2      	b.n	8007dc2 <_dtoa_r+0x36a>
 8007ddc:	07f9      	lsls	r1, r7, #31
 8007dde:	d508      	bpl.n	8007df2 <_dtoa_r+0x39a>
 8007de0:	4640      	mov	r0, r8
 8007de2:	4649      	mov	r1, r9
 8007de4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007de8:	f7f8 fc06 	bl	80005f8 <__aeabi_dmul>
 8007dec:	3501      	adds	r5, #1
 8007dee:	4680      	mov	r8, r0
 8007df0:	4689      	mov	r9, r1
 8007df2:	107f      	asrs	r7, r7, #1
 8007df4:	3608      	adds	r6, #8
 8007df6:	e7e5      	b.n	8007dc4 <_dtoa_r+0x36c>
 8007df8:	f000 809b 	beq.w	8007f32 <_dtoa_r+0x4da>
 8007dfc:	9b00      	ldr	r3, [sp, #0]
 8007dfe:	4f9d      	ldr	r7, [pc, #628]	; (8008074 <_dtoa_r+0x61c>)
 8007e00:	425e      	negs	r6, r3
 8007e02:	4b9b      	ldr	r3, [pc, #620]	; (8008070 <_dtoa_r+0x618>)
 8007e04:	f006 020f 	and.w	r2, r6, #15
 8007e08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	ec51 0b19 	vmov	r0, r1, d9
 8007e14:	f7f8 fbf0 	bl	80005f8 <__aeabi_dmul>
 8007e18:	1136      	asrs	r6, r6, #4
 8007e1a:	4682      	mov	sl, r0
 8007e1c:	468b      	mov	fp, r1
 8007e1e:	2300      	movs	r3, #0
 8007e20:	2502      	movs	r5, #2
 8007e22:	2e00      	cmp	r6, #0
 8007e24:	d17a      	bne.n	8007f1c <_dtoa_r+0x4c4>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1d3      	bne.n	8007dd2 <_dtoa_r+0x37a>
 8007e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 8082 	beq.w	8007f36 <_dtoa_r+0x4de>
 8007e32:	4b91      	ldr	r3, [pc, #580]	; (8008078 <_dtoa_r+0x620>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	4650      	mov	r0, sl
 8007e38:	4659      	mov	r1, fp
 8007e3a:	f7f8 fe4f 	bl	8000adc <__aeabi_dcmplt>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d079      	beq.n	8007f36 <_dtoa_r+0x4de>
 8007e42:	9b03      	ldr	r3, [sp, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d076      	beq.n	8007f36 <_dtoa_r+0x4de>
 8007e48:	9b02      	ldr	r3, [sp, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	dd36      	ble.n	8007ebc <_dtoa_r+0x464>
 8007e4e:	9b00      	ldr	r3, [sp, #0]
 8007e50:	4650      	mov	r0, sl
 8007e52:	4659      	mov	r1, fp
 8007e54:	1e5f      	subs	r7, r3, #1
 8007e56:	2200      	movs	r2, #0
 8007e58:	4b88      	ldr	r3, [pc, #544]	; (800807c <_dtoa_r+0x624>)
 8007e5a:	f7f8 fbcd 	bl	80005f8 <__aeabi_dmul>
 8007e5e:	9e02      	ldr	r6, [sp, #8]
 8007e60:	4682      	mov	sl, r0
 8007e62:	468b      	mov	fp, r1
 8007e64:	3501      	adds	r5, #1
 8007e66:	4628      	mov	r0, r5
 8007e68:	f7f8 fb5c 	bl	8000524 <__aeabi_i2d>
 8007e6c:	4652      	mov	r2, sl
 8007e6e:	465b      	mov	r3, fp
 8007e70:	f7f8 fbc2 	bl	80005f8 <__aeabi_dmul>
 8007e74:	4b82      	ldr	r3, [pc, #520]	; (8008080 <_dtoa_r+0x628>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	f7f8 fa08 	bl	800028c <__adddf3>
 8007e7c:	46d0      	mov	r8, sl
 8007e7e:	46d9      	mov	r9, fp
 8007e80:	4682      	mov	sl, r0
 8007e82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007e86:	2e00      	cmp	r6, #0
 8007e88:	d158      	bne.n	8007f3c <_dtoa_r+0x4e4>
 8007e8a:	4b7e      	ldr	r3, [pc, #504]	; (8008084 <_dtoa_r+0x62c>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	4640      	mov	r0, r8
 8007e90:	4649      	mov	r1, r9
 8007e92:	f7f8 f9f9 	bl	8000288 <__aeabi_dsub>
 8007e96:	4652      	mov	r2, sl
 8007e98:	465b      	mov	r3, fp
 8007e9a:	4680      	mov	r8, r0
 8007e9c:	4689      	mov	r9, r1
 8007e9e:	f7f8 fe3b 	bl	8000b18 <__aeabi_dcmpgt>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	f040 8295 	bne.w	80083d2 <_dtoa_r+0x97a>
 8007ea8:	4652      	mov	r2, sl
 8007eaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007eae:	4640      	mov	r0, r8
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	f7f8 fe13 	bl	8000adc <__aeabi_dcmplt>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f040 8289 	bne.w	80083ce <_dtoa_r+0x976>
 8007ebc:	ec5b ab19 	vmov	sl, fp, d9
 8007ec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f2c0 8148 	blt.w	8008158 <_dtoa_r+0x700>
 8007ec8:	9a00      	ldr	r2, [sp, #0]
 8007eca:	2a0e      	cmp	r2, #14
 8007ecc:	f300 8144 	bgt.w	8008158 <_dtoa_r+0x700>
 8007ed0:	4b67      	ldr	r3, [pc, #412]	; (8008070 <_dtoa_r+0x618>)
 8007ed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ed6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f280 80d5 	bge.w	800808c <_dtoa_r+0x634>
 8007ee2:	9b03      	ldr	r3, [sp, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f300 80d1 	bgt.w	800808c <_dtoa_r+0x634>
 8007eea:	f040 826f 	bne.w	80083cc <_dtoa_r+0x974>
 8007eee:	4b65      	ldr	r3, [pc, #404]	; (8008084 <_dtoa_r+0x62c>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4640      	mov	r0, r8
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	f7f8 fb7f 	bl	80005f8 <__aeabi_dmul>
 8007efa:	4652      	mov	r2, sl
 8007efc:	465b      	mov	r3, fp
 8007efe:	f7f8 fe01 	bl	8000b04 <__aeabi_dcmpge>
 8007f02:	9e03      	ldr	r6, [sp, #12]
 8007f04:	4637      	mov	r7, r6
 8007f06:	2800      	cmp	r0, #0
 8007f08:	f040 8245 	bne.w	8008396 <_dtoa_r+0x93e>
 8007f0c:	9d01      	ldr	r5, [sp, #4]
 8007f0e:	2331      	movs	r3, #49	; 0x31
 8007f10:	f805 3b01 	strb.w	r3, [r5], #1
 8007f14:	9b00      	ldr	r3, [sp, #0]
 8007f16:	3301      	adds	r3, #1
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	e240      	b.n	800839e <_dtoa_r+0x946>
 8007f1c:	07f2      	lsls	r2, r6, #31
 8007f1e:	d505      	bpl.n	8007f2c <_dtoa_r+0x4d4>
 8007f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f24:	f7f8 fb68 	bl	80005f8 <__aeabi_dmul>
 8007f28:	3501      	adds	r5, #1
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	1076      	asrs	r6, r6, #1
 8007f2e:	3708      	adds	r7, #8
 8007f30:	e777      	b.n	8007e22 <_dtoa_r+0x3ca>
 8007f32:	2502      	movs	r5, #2
 8007f34:	e779      	b.n	8007e2a <_dtoa_r+0x3d2>
 8007f36:	9f00      	ldr	r7, [sp, #0]
 8007f38:	9e03      	ldr	r6, [sp, #12]
 8007f3a:	e794      	b.n	8007e66 <_dtoa_r+0x40e>
 8007f3c:	9901      	ldr	r1, [sp, #4]
 8007f3e:	4b4c      	ldr	r3, [pc, #304]	; (8008070 <_dtoa_r+0x618>)
 8007f40:	4431      	add	r1, r6
 8007f42:	910d      	str	r1, [sp, #52]	; 0x34
 8007f44:	9908      	ldr	r1, [sp, #32]
 8007f46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f4e:	2900      	cmp	r1, #0
 8007f50:	d043      	beq.n	8007fda <_dtoa_r+0x582>
 8007f52:	494d      	ldr	r1, [pc, #308]	; (8008088 <_dtoa_r+0x630>)
 8007f54:	2000      	movs	r0, #0
 8007f56:	f7f8 fc79 	bl	800084c <__aeabi_ddiv>
 8007f5a:	4652      	mov	r2, sl
 8007f5c:	465b      	mov	r3, fp
 8007f5e:	f7f8 f993 	bl	8000288 <__aeabi_dsub>
 8007f62:	9d01      	ldr	r5, [sp, #4]
 8007f64:	4682      	mov	sl, r0
 8007f66:	468b      	mov	fp, r1
 8007f68:	4649      	mov	r1, r9
 8007f6a:	4640      	mov	r0, r8
 8007f6c:	f7f8 fdf4 	bl	8000b58 <__aeabi_d2iz>
 8007f70:	4606      	mov	r6, r0
 8007f72:	f7f8 fad7 	bl	8000524 <__aeabi_i2d>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	f7f8 f983 	bl	8000288 <__aeabi_dsub>
 8007f82:	3630      	adds	r6, #48	; 0x30
 8007f84:	f805 6b01 	strb.w	r6, [r5], #1
 8007f88:	4652      	mov	r2, sl
 8007f8a:	465b      	mov	r3, fp
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	4689      	mov	r9, r1
 8007f90:	f7f8 fda4 	bl	8000adc <__aeabi_dcmplt>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d163      	bne.n	8008060 <_dtoa_r+0x608>
 8007f98:	4642      	mov	r2, r8
 8007f9a:	464b      	mov	r3, r9
 8007f9c:	4936      	ldr	r1, [pc, #216]	; (8008078 <_dtoa_r+0x620>)
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	f7f8 f972 	bl	8000288 <__aeabi_dsub>
 8007fa4:	4652      	mov	r2, sl
 8007fa6:	465b      	mov	r3, fp
 8007fa8:	f7f8 fd98 	bl	8000adc <__aeabi_dcmplt>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	f040 80b5 	bne.w	800811c <_dtoa_r+0x6c4>
 8007fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fb4:	429d      	cmp	r5, r3
 8007fb6:	d081      	beq.n	8007ebc <_dtoa_r+0x464>
 8007fb8:	4b30      	ldr	r3, [pc, #192]	; (800807c <_dtoa_r+0x624>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	4650      	mov	r0, sl
 8007fbe:	4659      	mov	r1, fp
 8007fc0:	f7f8 fb1a 	bl	80005f8 <__aeabi_dmul>
 8007fc4:	4b2d      	ldr	r3, [pc, #180]	; (800807c <_dtoa_r+0x624>)
 8007fc6:	4682      	mov	sl, r0
 8007fc8:	468b      	mov	fp, r1
 8007fca:	4640      	mov	r0, r8
 8007fcc:	4649      	mov	r1, r9
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f7f8 fb12 	bl	80005f8 <__aeabi_dmul>
 8007fd4:	4680      	mov	r8, r0
 8007fd6:	4689      	mov	r9, r1
 8007fd8:	e7c6      	b.n	8007f68 <_dtoa_r+0x510>
 8007fda:	4650      	mov	r0, sl
 8007fdc:	4659      	mov	r1, fp
 8007fde:	f7f8 fb0b 	bl	80005f8 <__aeabi_dmul>
 8007fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fe4:	9d01      	ldr	r5, [sp, #4]
 8007fe6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fe8:	4682      	mov	sl, r0
 8007fea:	468b      	mov	fp, r1
 8007fec:	4649      	mov	r1, r9
 8007fee:	4640      	mov	r0, r8
 8007ff0:	f7f8 fdb2 	bl	8000b58 <__aeabi_d2iz>
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	f7f8 fa95 	bl	8000524 <__aeabi_i2d>
 8007ffa:	3630      	adds	r6, #48	; 0x30
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4640      	mov	r0, r8
 8008002:	4649      	mov	r1, r9
 8008004:	f7f8 f940 	bl	8000288 <__aeabi_dsub>
 8008008:	f805 6b01 	strb.w	r6, [r5], #1
 800800c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800800e:	429d      	cmp	r5, r3
 8008010:	4680      	mov	r8, r0
 8008012:	4689      	mov	r9, r1
 8008014:	f04f 0200 	mov.w	r2, #0
 8008018:	d124      	bne.n	8008064 <_dtoa_r+0x60c>
 800801a:	4b1b      	ldr	r3, [pc, #108]	; (8008088 <_dtoa_r+0x630>)
 800801c:	4650      	mov	r0, sl
 800801e:	4659      	mov	r1, fp
 8008020:	f7f8 f934 	bl	800028c <__adddf3>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4640      	mov	r0, r8
 800802a:	4649      	mov	r1, r9
 800802c:	f7f8 fd74 	bl	8000b18 <__aeabi_dcmpgt>
 8008030:	2800      	cmp	r0, #0
 8008032:	d173      	bne.n	800811c <_dtoa_r+0x6c4>
 8008034:	4652      	mov	r2, sl
 8008036:	465b      	mov	r3, fp
 8008038:	4913      	ldr	r1, [pc, #76]	; (8008088 <_dtoa_r+0x630>)
 800803a:	2000      	movs	r0, #0
 800803c:	f7f8 f924 	bl	8000288 <__aeabi_dsub>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4640      	mov	r0, r8
 8008046:	4649      	mov	r1, r9
 8008048:	f7f8 fd48 	bl	8000adc <__aeabi_dcmplt>
 800804c:	2800      	cmp	r0, #0
 800804e:	f43f af35 	beq.w	8007ebc <_dtoa_r+0x464>
 8008052:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008054:	1e6b      	subs	r3, r5, #1
 8008056:	930f      	str	r3, [sp, #60]	; 0x3c
 8008058:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800805c:	2b30      	cmp	r3, #48	; 0x30
 800805e:	d0f8      	beq.n	8008052 <_dtoa_r+0x5fa>
 8008060:	9700      	str	r7, [sp, #0]
 8008062:	e049      	b.n	80080f8 <_dtoa_r+0x6a0>
 8008064:	4b05      	ldr	r3, [pc, #20]	; (800807c <_dtoa_r+0x624>)
 8008066:	f7f8 fac7 	bl	80005f8 <__aeabi_dmul>
 800806a:	4680      	mov	r8, r0
 800806c:	4689      	mov	r9, r1
 800806e:	e7bd      	b.n	8007fec <_dtoa_r+0x594>
 8008070:	0800a4b8 	.word	0x0800a4b8
 8008074:	0800a490 	.word	0x0800a490
 8008078:	3ff00000 	.word	0x3ff00000
 800807c:	40240000 	.word	0x40240000
 8008080:	401c0000 	.word	0x401c0000
 8008084:	40140000 	.word	0x40140000
 8008088:	3fe00000 	.word	0x3fe00000
 800808c:	9d01      	ldr	r5, [sp, #4]
 800808e:	4656      	mov	r6, sl
 8008090:	465f      	mov	r7, fp
 8008092:	4642      	mov	r2, r8
 8008094:	464b      	mov	r3, r9
 8008096:	4630      	mov	r0, r6
 8008098:	4639      	mov	r1, r7
 800809a:	f7f8 fbd7 	bl	800084c <__aeabi_ddiv>
 800809e:	f7f8 fd5b 	bl	8000b58 <__aeabi_d2iz>
 80080a2:	4682      	mov	sl, r0
 80080a4:	f7f8 fa3e 	bl	8000524 <__aeabi_i2d>
 80080a8:	4642      	mov	r2, r8
 80080aa:	464b      	mov	r3, r9
 80080ac:	f7f8 faa4 	bl	80005f8 <__aeabi_dmul>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4630      	mov	r0, r6
 80080b6:	4639      	mov	r1, r7
 80080b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80080bc:	f7f8 f8e4 	bl	8000288 <__aeabi_dsub>
 80080c0:	f805 6b01 	strb.w	r6, [r5], #1
 80080c4:	9e01      	ldr	r6, [sp, #4]
 80080c6:	9f03      	ldr	r7, [sp, #12]
 80080c8:	1bae      	subs	r6, r5, r6
 80080ca:	42b7      	cmp	r7, r6
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	d135      	bne.n	800813e <_dtoa_r+0x6e6>
 80080d2:	f7f8 f8db 	bl	800028c <__adddf3>
 80080d6:	4642      	mov	r2, r8
 80080d8:	464b      	mov	r3, r9
 80080da:	4606      	mov	r6, r0
 80080dc:	460f      	mov	r7, r1
 80080de:	f7f8 fd1b 	bl	8000b18 <__aeabi_dcmpgt>
 80080e2:	b9d0      	cbnz	r0, 800811a <_dtoa_r+0x6c2>
 80080e4:	4642      	mov	r2, r8
 80080e6:	464b      	mov	r3, r9
 80080e8:	4630      	mov	r0, r6
 80080ea:	4639      	mov	r1, r7
 80080ec:	f7f8 fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80080f0:	b110      	cbz	r0, 80080f8 <_dtoa_r+0x6a0>
 80080f2:	f01a 0f01 	tst.w	sl, #1
 80080f6:	d110      	bne.n	800811a <_dtoa_r+0x6c2>
 80080f8:	4620      	mov	r0, r4
 80080fa:	ee18 1a10 	vmov	r1, s16
 80080fe:	f000 fcf1 	bl	8008ae4 <_Bfree>
 8008102:	2300      	movs	r3, #0
 8008104:	9800      	ldr	r0, [sp, #0]
 8008106:	702b      	strb	r3, [r5, #0]
 8008108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800810a:	3001      	adds	r0, #1
 800810c:	6018      	str	r0, [r3, #0]
 800810e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008110:	2b00      	cmp	r3, #0
 8008112:	f43f acf1 	beq.w	8007af8 <_dtoa_r+0xa0>
 8008116:	601d      	str	r5, [r3, #0]
 8008118:	e4ee      	b.n	8007af8 <_dtoa_r+0xa0>
 800811a:	9f00      	ldr	r7, [sp, #0]
 800811c:	462b      	mov	r3, r5
 800811e:	461d      	mov	r5, r3
 8008120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008124:	2a39      	cmp	r2, #57	; 0x39
 8008126:	d106      	bne.n	8008136 <_dtoa_r+0x6de>
 8008128:	9a01      	ldr	r2, [sp, #4]
 800812a:	429a      	cmp	r2, r3
 800812c:	d1f7      	bne.n	800811e <_dtoa_r+0x6c6>
 800812e:	9901      	ldr	r1, [sp, #4]
 8008130:	2230      	movs	r2, #48	; 0x30
 8008132:	3701      	adds	r7, #1
 8008134:	700a      	strb	r2, [r1, #0]
 8008136:	781a      	ldrb	r2, [r3, #0]
 8008138:	3201      	adds	r2, #1
 800813a:	701a      	strb	r2, [r3, #0]
 800813c:	e790      	b.n	8008060 <_dtoa_r+0x608>
 800813e:	4ba6      	ldr	r3, [pc, #664]	; (80083d8 <_dtoa_r+0x980>)
 8008140:	2200      	movs	r2, #0
 8008142:	f7f8 fa59 	bl	80005f8 <__aeabi_dmul>
 8008146:	2200      	movs	r2, #0
 8008148:	2300      	movs	r3, #0
 800814a:	4606      	mov	r6, r0
 800814c:	460f      	mov	r7, r1
 800814e:	f7f8 fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008152:	2800      	cmp	r0, #0
 8008154:	d09d      	beq.n	8008092 <_dtoa_r+0x63a>
 8008156:	e7cf      	b.n	80080f8 <_dtoa_r+0x6a0>
 8008158:	9a08      	ldr	r2, [sp, #32]
 800815a:	2a00      	cmp	r2, #0
 800815c:	f000 80d7 	beq.w	800830e <_dtoa_r+0x8b6>
 8008160:	9a06      	ldr	r2, [sp, #24]
 8008162:	2a01      	cmp	r2, #1
 8008164:	f300 80ba 	bgt.w	80082dc <_dtoa_r+0x884>
 8008168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800816a:	2a00      	cmp	r2, #0
 800816c:	f000 80b2 	beq.w	80082d4 <_dtoa_r+0x87c>
 8008170:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008174:	9e07      	ldr	r6, [sp, #28]
 8008176:	9d04      	ldr	r5, [sp, #16]
 8008178:	9a04      	ldr	r2, [sp, #16]
 800817a:	441a      	add	r2, r3
 800817c:	9204      	str	r2, [sp, #16]
 800817e:	9a05      	ldr	r2, [sp, #20]
 8008180:	2101      	movs	r1, #1
 8008182:	441a      	add	r2, r3
 8008184:	4620      	mov	r0, r4
 8008186:	9205      	str	r2, [sp, #20]
 8008188:	f000 fd64 	bl	8008c54 <__i2b>
 800818c:	4607      	mov	r7, r0
 800818e:	2d00      	cmp	r5, #0
 8008190:	dd0c      	ble.n	80081ac <_dtoa_r+0x754>
 8008192:	9b05      	ldr	r3, [sp, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	dd09      	ble.n	80081ac <_dtoa_r+0x754>
 8008198:	42ab      	cmp	r3, r5
 800819a:	9a04      	ldr	r2, [sp, #16]
 800819c:	bfa8      	it	ge
 800819e:	462b      	movge	r3, r5
 80081a0:	1ad2      	subs	r2, r2, r3
 80081a2:	9204      	str	r2, [sp, #16]
 80081a4:	9a05      	ldr	r2, [sp, #20]
 80081a6:	1aed      	subs	r5, r5, r3
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	9305      	str	r3, [sp, #20]
 80081ac:	9b07      	ldr	r3, [sp, #28]
 80081ae:	b31b      	cbz	r3, 80081f8 <_dtoa_r+0x7a0>
 80081b0:	9b08      	ldr	r3, [sp, #32]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 80af 	beq.w	8008316 <_dtoa_r+0x8be>
 80081b8:	2e00      	cmp	r6, #0
 80081ba:	dd13      	ble.n	80081e4 <_dtoa_r+0x78c>
 80081bc:	4639      	mov	r1, r7
 80081be:	4632      	mov	r2, r6
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 fe07 	bl	8008dd4 <__pow5mult>
 80081c6:	ee18 2a10 	vmov	r2, s16
 80081ca:	4601      	mov	r1, r0
 80081cc:	4607      	mov	r7, r0
 80081ce:	4620      	mov	r0, r4
 80081d0:	f000 fd56 	bl	8008c80 <__multiply>
 80081d4:	ee18 1a10 	vmov	r1, s16
 80081d8:	4680      	mov	r8, r0
 80081da:	4620      	mov	r0, r4
 80081dc:	f000 fc82 	bl	8008ae4 <_Bfree>
 80081e0:	ee08 8a10 	vmov	s16, r8
 80081e4:	9b07      	ldr	r3, [sp, #28]
 80081e6:	1b9a      	subs	r2, r3, r6
 80081e8:	d006      	beq.n	80081f8 <_dtoa_r+0x7a0>
 80081ea:	ee18 1a10 	vmov	r1, s16
 80081ee:	4620      	mov	r0, r4
 80081f0:	f000 fdf0 	bl	8008dd4 <__pow5mult>
 80081f4:	ee08 0a10 	vmov	s16, r0
 80081f8:	2101      	movs	r1, #1
 80081fa:	4620      	mov	r0, r4
 80081fc:	f000 fd2a 	bl	8008c54 <__i2b>
 8008200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008202:	2b00      	cmp	r3, #0
 8008204:	4606      	mov	r6, r0
 8008206:	f340 8088 	ble.w	800831a <_dtoa_r+0x8c2>
 800820a:	461a      	mov	r2, r3
 800820c:	4601      	mov	r1, r0
 800820e:	4620      	mov	r0, r4
 8008210:	f000 fde0 	bl	8008dd4 <__pow5mult>
 8008214:	9b06      	ldr	r3, [sp, #24]
 8008216:	2b01      	cmp	r3, #1
 8008218:	4606      	mov	r6, r0
 800821a:	f340 8081 	ble.w	8008320 <_dtoa_r+0x8c8>
 800821e:	f04f 0800 	mov.w	r8, #0
 8008222:	6933      	ldr	r3, [r6, #16]
 8008224:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008228:	6918      	ldr	r0, [r3, #16]
 800822a:	f000 fcc3 	bl	8008bb4 <__hi0bits>
 800822e:	f1c0 0020 	rsb	r0, r0, #32
 8008232:	9b05      	ldr	r3, [sp, #20]
 8008234:	4418      	add	r0, r3
 8008236:	f010 001f 	ands.w	r0, r0, #31
 800823a:	f000 8092 	beq.w	8008362 <_dtoa_r+0x90a>
 800823e:	f1c0 0320 	rsb	r3, r0, #32
 8008242:	2b04      	cmp	r3, #4
 8008244:	f340 808a 	ble.w	800835c <_dtoa_r+0x904>
 8008248:	f1c0 001c 	rsb	r0, r0, #28
 800824c:	9b04      	ldr	r3, [sp, #16]
 800824e:	4403      	add	r3, r0
 8008250:	9304      	str	r3, [sp, #16]
 8008252:	9b05      	ldr	r3, [sp, #20]
 8008254:	4403      	add	r3, r0
 8008256:	4405      	add	r5, r0
 8008258:	9305      	str	r3, [sp, #20]
 800825a:	9b04      	ldr	r3, [sp, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	dd07      	ble.n	8008270 <_dtoa_r+0x818>
 8008260:	ee18 1a10 	vmov	r1, s16
 8008264:	461a      	mov	r2, r3
 8008266:	4620      	mov	r0, r4
 8008268:	f000 fe0e 	bl	8008e88 <__lshift>
 800826c:	ee08 0a10 	vmov	s16, r0
 8008270:	9b05      	ldr	r3, [sp, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	dd05      	ble.n	8008282 <_dtoa_r+0x82a>
 8008276:	4631      	mov	r1, r6
 8008278:	461a      	mov	r2, r3
 800827a:	4620      	mov	r0, r4
 800827c:	f000 fe04 	bl	8008e88 <__lshift>
 8008280:	4606      	mov	r6, r0
 8008282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d06e      	beq.n	8008366 <_dtoa_r+0x90e>
 8008288:	ee18 0a10 	vmov	r0, s16
 800828c:	4631      	mov	r1, r6
 800828e:	f000 fe6b 	bl	8008f68 <__mcmp>
 8008292:	2800      	cmp	r0, #0
 8008294:	da67      	bge.n	8008366 <_dtoa_r+0x90e>
 8008296:	9b00      	ldr	r3, [sp, #0]
 8008298:	3b01      	subs	r3, #1
 800829a:	ee18 1a10 	vmov	r1, s16
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	220a      	movs	r2, #10
 80082a2:	2300      	movs	r3, #0
 80082a4:	4620      	mov	r0, r4
 80082a6:	f000 fc3f 	bl	8008b28 <__multadd>
 80082aa:	9b08      	ldr	r3, [sp, #32]
 80082ac:	ee08 0a10 	vmov	s16, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 81b1 	beq.w	8008618 <_dtoa_r+0xbc0>
 80082b6:	2300      	movs	r3, #0
 80082b8:	4639      	mov	r1, r7
 80082ba:	220a      	movs	r2, #10
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 fc33 	bl	8008b28 <__multadd>
 80082c2:	9b02      	ldr	r3, [sp, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	4607      	mov	r7, r0
 80082c8:	f300 808e 	bgt.w	80083e8 <_dtoa_r+0x990>
 80082cc:	9b06      	ldr	r3, [sp, #24]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	dc51      	bgt.n	8008376 <_dtoa_r+0x91e>
 80082d2:	e089      	b.n	80083e8 <_dtoa_r+0x990>
 80082d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082da:	e74b      	b.n	8008174 <_dtoa_r+0x71c>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	1e5e      	subs	r6, r3, #1
 80082e0:	9b07      	ldr	r3, [sp, #28]
 80082e2:	42b3      	cmp	r3, r6
 80082e4:	bfbf      	itttt	lt
 80082e6:	9b07      	ldrlt	r3, [sp, #28]
 80082e8:	9607      	strlt	r6, [sp, #28]
 80082ea:	1af2      	sublt	r2, r6, r3
 80082ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80082ee:	bfb6      	itet	lt
 80082f0:	189b      	addlt	r3, r3, r2
 80082f2:	1b9e      	subge	r6, r3, r6
 80082f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80082f6:	9b03      	ldr	r3, [sp, #12]
 80082f8:	bfb8      	it	lt
 80082fa:	2600      	movlt	r6, #0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	bfb7      	itett	lt
 8008300:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008304:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008308:	1a9d      	sublt	r5, r3, r2
 800830a:	2300      	movlt	r3, #0
 800830c:	e734      	b.n	8008178 <_dtoa_r+0x720>
 800830e:	9e07      	ldr	r6, [sp, #28]
 8008310:	9d04      	ldr	r5, [sp, #16]
 8008312:	9f08      	ldr	r7, [sp, #32]
 8008314:	e73b      	b.n	800818e <_dtoa_r+0x736>
 8008316:	9a07      	ldr	r2, [sp, #28]
 8008318:	e767      	b.n	80081ea <_dtoa_r+0x792>
 800831a:	9b06      	ldr	r3, [sp, #24]
 800831c:	2b01      	cmp	r3, #1
 800831e:	dc18      	bgt.n	8008352 <_dtoa_r+0x8fa>
 8008320:	f1ba 0f00 	cmp.w	sl, #0
 8008324:	d115      	bne.n	8008352 <_dtoa_r+0x8fa>
 8008326:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800832a:	b993      	cbnz	r3, 8008352 <_dtoa_r+0x8fa>
 800832c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008330:	0d1b      	lsrs	r3, r3, #20
 8008332:	051b      	lsls	r3, r3, #20
 8008334:	b183      	cbz	r3, 8008358 <_dtoa_r+0x900>
 8008336:	9b04      	ldr	r3, [sp, #16]
 8008338:	3301      	adds	r3, #1
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	9b05      	ldr	r3, [sp, #20]
 800833e:	3301      	adds	r3, #1
 8008340:	9305      	str	r3, [sp, #20]
 8008342:	f04f 0801 	mov.w	r8, #1
 8008346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008348:	2b00      	cmp	r3, #0
 800834a:	f47f af6a 	bne.w	8008222 <_dtoa_r+0x7ca>
 800834e:	2001      	movs	r0, #1
 8008350:	e76f      	b.n	8008232 <_dtoa_r+0x7da>
 8008352:	f04f 0800 	mov.w	r8, #0
 8008356:	e7f6      	b.n	8008346 <_dtoa_r+0x8ee>
 8008358:	4698      	mov	r8, r3
 800835a:	e7f4      	b.n	8008346 <_dtoa_r+0x8ee>
 800835c:	f43f af7d 	beq.w	800825a <_dtoa_r+0x802>
 8008360:	4618      	mov	r0, r3
 8008362:	301c      	adds	r0, #28
 8008364:	e772      	b.n	800824c <_dtoa_r+0x7f4>
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	dc37      	bgt.n	80083dc <_dtoa_r+0x984>
 800836c:	9b06      	ldr	r3, [sp, #24]
 800836e:	2b02      	cmp	r3, #2
 8008370:	dd34      	ble.n	80083dc <_dtoa_r+0x984>
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	9302      	str	r3, [sp, #8]
 8008376:	9b02      	ldr	r3, [sp, #8]
 8008378:	b96b      	cbnz	r3, 8008396 <_dtoa_r+0x93e>
 800837a:	4631      	mov	r1, r6
 800837c:	2205      	movs	r2, #5
 800837e:	4620      	mov	r0, r4
 8008380:	f000 fbd2 	bl	8008b28 <__multadd>
 8008384:	4601      	mov	r1, r0
 8008386:	4606      	mov	r6, r0
 8008388:	ee18 0a10 	vmov	r0, s16
 800838c:	f000 fdec 	bl	8008f68 <__mcmp>
 8008390:	2800      	cmp	r0, #0
 8008392:	f73f adbb 	bgt.w	8007f0c <_dtoa_r+0x4b4>
 8008396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008398:	9d01      	ldr	r5, [sp, #4]
 800839a:	43db      	mvns	r3, r3
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	f04f 0800 	mov.w	r8, #0
 80083a2:	4631      	mov	r1, r6
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 fb9d 	bl	8008ae4 <_Bfree>
 80083aa:	2f00      	cmp	r7, #0
 80083ac:	f43f aea4 	beq.w	80080f8 <_dtoa_r+0x6a0>
 80083b0:	f1b8 0f00 	cmp.w	r8, #0
 80083b4:	d005      	beq.n	80083c2 <_dtoa_r+0x96a>
 80083b6:	45b8      	cmp	r8, r7
 80083b8:	d003      	beq.n	80083c2 <_dtoa_r+0x96a>
 80083ba:	4641      	mov	r1, r8
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 fb91 	bl	8008ae4 <_Bfree>
 80083c2:	4639      	mov	r1, r7
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 fb8d 	bl	8008ae4 <_Bfree>
 80083ca:	e695      	b.n	80080f8 <_dtoa_r+0x6a0>
 80083cc:	2600      	movs	r6, #0
 80083ce:	4637      	mov	r7, r6
 80083d0:	e7e1      	b.n	8008396 <_dtoa_r+0x93e>
 80083d2:	9700      	str	r7, [sp, #0]
 80083d4:	4637      	mov	r7, r6
 80083d6:	e599      	b.n	8007f0c <_dtoa_r+0x4b4>
 80083d8:	40240000 	.word	0x40240000
 80083dc:	9b08      	ldr	r3, [sp, #32]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 80ca 	beq.w	8008578 <_dtoa_r+0xb20>
 80083e4:	9b03      	ldr	r3, [sp, #12]
 80083e6:	9302      	str	r3, [sp, #8]
 80083e8:	2d00      	cmp	r5, #0
 80083ea:	dd05      	ble.n	80083f8 <_dtoa_r+0x9a0>
 80083ec:	4639      	mov	r1, r7
 80083ee:	462a      	mov	r2, r5
 80083f0:	4620      	mov	r0, r4
 80083f2:	f000 fd49 	bl	8008e88 <__lshift>
 80083f6:	4607      	mov	r7, r0
 80083f8:	f1b8 0f00 	cmp.w	r8, #0
 80083fc:	d05b      	beq.n	80084b6 <_dtoa_r+0xa5e>
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	4620      	mov	r0, r4
 8008402:	f000 fb2f 	bl	8008a64 <_Balloc>
 8008406:	4605      	mov	r5, r0
 8008408:	b928      	cbnz	r0, 8008416 <_dtoa_r+0x9be>
 800840a:	4b87      	ldr	r3, [pc, #540]	; (8008628 <_dtoa_r+0xbd0>)
 800840c:	4602      	mov	r2, r0
 800840e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008412:	f7ff bb3b 	b.w	8007a8c <_dtoa_r+0x34>
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	3202      	adds	r2, #2
 800841a:	0092      	lsls	r2, r2, #2
 800841c:	f107 010c 	add.w	r1, r7, #12
 8008420:	300c      	adds	r0, #12
 8008422:	f000 fb04 	bl	8008a2e <memcpy>
 8008426:	2201      	movs	r2, #1
 8008428:	4629      	mov	r1, r5
 800842a:	4620      	mov	r0, r4
 800842c:	f000 fd2c 	bl	8008e88 <__lshift>
 8008430:	9b01      	ldr	r3, [sp, #4]
 8008432:	f103 0901 	add.w	r9, r3, #1
 8008436:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800843a:	4413      	add	r3, r2
 800843c:	9305      	str	r3, [sp, #20]
 800843e:	f00a 0301 	and.w	r3, sl, #1
 8008442:	46b8      	mov	r8, r7
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	4607      	mov	r7, r0
 8008448:	4631      	mov	r1, r6
 800844a:	ee18 0a10 	vmov	r0, s16
 800844e:	f7ff fa77 	bl	8007940 <quorem>
 8008452:	4641      	mov	r1, r8
 8008454:	9002      	str	r0, [sp, #8]
 8008456:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800845a:	ee18 0a10 	vmov	r0, s16
 800845e:	f000 fd83 	bl	8008f68 <__mcmp>
 8008462:	463a      	mov	r2, r7
 8008464:	9003      	str	r0, [sp, #12]
 8008466:	4631      	mov	r1, r6
 8008468:	4620      	mov	r0, r4
 800846a:	f000 fd99 	bl	8008fa0 <__mdiff>
 800846e:	68c2      	ldr	r2, [r0, #12]
 8008470:	f109 3bff 	add.w	fp, r9, #4294967295
 8008474:	4605      	mov	r5, r0
 8008476:	bb02      	cbnz	r2, 80084ba <_dtoa_r+0xa62>
 8008478:	4601      	mov	r1, r0
 800847a:	ee18 0a10 	vmov	r0, s16
 800847e:	f000 fd73 	bl	8008f68 <__mcmp>
 8008482:	4602      	mov	r2, r0
 8008484:	4629      	mov	r1, r5
 8008486:	4620      	mov	r0, r4
 8008488:	9207      	str	r2, [sp, #28]
 800848a:	f000 fb2b 	bl	8008ae4 <_Bfree>
 800848e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008492:	ea43 0102 	orr.w	r1, r3, r2
 8008496:	9b04      	ldr	r3, [sp, #16]
 8008498:	430b      	orrs	r3, r1
 800849a:	464d      	mov	r5, r9
 800849c:	d10f      	bne.n	80084be <_dtoa_r+0xa66>
 800849e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084a2:	d02a      	beq.n	80084fa <_dtoa_r+0xaa2>
 80084a4:	9b03      	ldr	r3, [sp, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	dd02      	ble.n	80084b0 <_dtoa_r+0xa58>
 80084aa:	9b02      	ldr	r3, [sp, #8]
 80084ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80084b0:	f88b a000 	strb.w	sl, [fp]
 80084b4:	e775      	b.n	80083a2 <_dtoa_r+0x94a>
 80084b6:	4638      	mov	r0, r7
 80084b8:	e7ba      	b.n	8008430 <_dtoa_r+0x9d8>
 80084ba:	2201      	movs	r2, #1
 80084bc:	e7e2      	b.n	8008484 <_dtoa_r+0xa2c>
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	db04      	blt.n	80084ce <_dtoa_r+0xa76>
 80084c4:	9906      	ldr	r1, [sp, #24]
 80084c6:	430b      	orrs	r3, r1
 80084c8:	9904      	ldr	r1, [sp, #16]
 80084ca:	430b      	orrs	r3, r1
 80084cc:	d122      	bne.n	8008514 <_dtoa_r+0xabc>
 80084ce:	2a00      	cmp	r2, #0
 80084d0:	ddee      	ble.n	80084b0 <_dtoa_r+0xa58>
 80084d2:	ee18 1a10 	vmov	r1, s16
 80084d6:	2201      	movs	r2, #1
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 fcd5 	bl	8008e88 <__lshift>
 80084de:	4631      	mov	r1, r6
 80084e0:	ee08 0a10 	vmov	s16, r0
 80084e4:	f000 fd40 	bl	8008f68 <__mcmp>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	dc03      	bgt.n	80084f4 <_dtoa_r+0xa9c>
 80084ec:	d1e0      	bne.n	80084b0 <_dtoa_r+0xa58>
 80084ee:	f01a 0f01 	tst.w	sl, #1
 80084f2:	d0dd      	beq.n	80084b0 <_dtoa_r+0xa58>
 80084f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084f8:	d1d7      	bne.n	80084aa <_dtoa_r+0xa52>
 80084fa:	2339      	movs	r3, #57	; 0x39
 80084fc:	f88b 3000 	strb.w	r3, [fp]
 8008500:	462b      	mov	r3, r5
 8008502:	461d      	mov	r5, r3
 8008504:	3b01      	subs	r3, #1
 8008506:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800850a:	2a39      	cmp	r2, #57	; 0x39
 800850c:	d071      	beq.n	80085f2 <_dtoa_r+0xb9a>
 800850e:	3201      	adds	r2, #1
 8008510:	701a      	strb	r2, [r3, #0]
 8008512:	e746      	b.n	80083a2 <_dtoa_r+0x94a>
 8008514:	2a00      	cmp	r2, #0
 8008516:	dd07      	ble.n	8008528 <_dtoa_r+0xad0>
 8008518:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800851c:	d0ed      	beq.n	80084fa <_dtoa_r+0xaa2>
 800851e:	f10a 0301 	add.w	r3, sl, #1
 8008522:	f88b 3000 	strb.w	r3, [fp]
 8008526:	e73c      	b.n	80083a2 <_dtoa_r+0x94a>
 8008528:	9b05      	ldr	r3, [sp, #20]
 800852a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800852e:	4599      	cmp	r9, r3
 8008530:	d047      	beq.n	80085c2 <_dtoa_r+0xb6a>
 8008532:	ee18 1a10 	vmov	r1, s16
 8008536:	2300      	movs	r3, #0
 8008538:	220a      	movs	r2, #10
 800853a:	4620      	mov	r0, r4
 800853c:	f000 faf4 	bl	8008b28 <__multadd>
 8008540:	45b8      	cmp	r8, r7
 8008542:	ee08 0a10 	vmov	s16, r0
 8008546:	f04f 0300 	mov.w	r3, #0
 800854a:	f04f 020a 	mov.w	r2, #10
 800854e:	4641      	mov	r1, r8
 8008550:	4620      	mov	r0, r4
 8008552:	d106      	bne.n	8008562 <_dtoa_r+0xb0a>
 8008554:	f000 fae8 	bl	8008b28 <__multadd>
 8008558:	4680      	mov	r8, r0
 800855a:	4607      	mov	r7, r0
 800855c:	f109 0901 	add.w	r9, r9, #1
 8008560:	e772      	b.n	8008448 <_dtoa_r+0x9f0>
 8008562:	f000 fae1 	bl	8008b28 <__multadd>
 8008566:	4639      	mov	r1, r7
 8008568:	4680      	mov	r8, r0
 800856a:	2300      	movs	r3, #0
 800856c:	220a      	movs	r2, #10
 800856e:	4620      	mov	r0, r4
 8008570:	f000 fada 	bl	8008b28 <__multadd>
 8008574:	4607      	mov	r7, r0
 8008576:	e7f1      	b.n	800855c <_dtoa_r+0xb04>
 8008578:	9b03      	ldr	r3, [sp, #12]
 800857a:	9302      	str	r3, [sp, #8]
 800857c:	9d01      	ldr	r5, [sp, #4]
 800857e:	ee18 0a10 	vmov	r0, s16
 8008582:	4631      	mov	r1, r6
 8008584:	f7ff f9dc 	bl	8007940 <quorem>
 8008588:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800858c:	9b01      	ldr	r3, [sp, #4]
 800858e:	f805 ab01 	strb.w	sl, [r5], #1
 8008592:	1aea      	subs	r2, r5, r3
 8008594:	9b02      	ldr	r3, [sp, #8]
 8008596:	4293      	cmp	r3, r2
 8008598:	dd09      	ble.n	80085ae <_dtoa_r+0xb56>
 800859a:	ee18 1a10 	vmov	r1, s16
 800859e:	2300      	movs	r3, #0
 80085a0:	220a      	movs	r2, #10
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 fac0 	bl	8008b28 <__multadd>
 80085a8:	ee08 0a10 	vmov	s16, r0
 80085ac:	e7e7      	b.n	800857e <_dtoa_r+0xb26>
 80085ae:	9b02      	ldr	r3, [sp, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	bfc8      	it	gt
 80085b4:	461d      	movgt	r5, r3
 80085b6:	9b01      	ldr	r3, [sp, #4]
 80085b8:	bfd8      	it	le
 80085ba:	2501      	movle	r5, #1
 80085bc:	441d      	add	r5, r3
 80085be:	f04f 0800 	mov.w	r8, #0
 80085c2:	ee18 1a10 	vmov	r1, s16
 80085c6:	2201      	movs	r2, #1
 80085c8:	4620      	mov	r0, r4
 80085ca:	f000 fc5d 	bl	8008e88 <__lshift>
 80085ce:	4631      	mov	r1, r6
 80085d0:	ee08 0a10 	vmov	s16, r0
 80085d4:	f000 fcc8 	bl	8008f68 <__mcmp>
 80085d8:	2800      	cmp	r0, #0
 80085da:	dc91      	bgt.n	8008500 <_dtoa_r+0xaa8>
 80085dc:	d102      	bne.n	80085e4 <_dtoa_r+0xb8c>
 80085de:	f01a 0f01 	tst.w	sl, #1
 80085e2:	d18d      	bne.n	8008500 <_dtoa_r+0xaa8>
 80085e4:	462b      	mov	r3, r5
 80085e6:	461d      	mov	r5, r3
 80085e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ec:	2a30      	cmp	r2, #48	; 0x30
 80085ee:	d0fa      	beq.n	80085e6 <_dtoa_r+0xb8e>
 80085f0:	e6d7      	b.n	80083a2 <_dtoa_r+0x94a>
 80085f2:	9a01      	ldr	r2, [sp, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d184      	bne.n	8008502 <_dtoa_r+0xaaa>
 80085f8:	9b00      	ldr	r3, [sp, #0]
 80085fa:	3301      	adds	r3, #1
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	2331      	movs	r3, #49	; 0x31
 8008600:	7013      	strb	r3, [r2, #0]
 8008602:	e6ce      	b.n	80083a2 <_dtoa_r+0x94a>
 8008604:	4b09      	ldr	r3, [pc, #36]	; (800862c <_dtoa_r+0xbd4>)
 8008606:	f7ff ba95 	b.w	8007b34 <_dtoa_r+0xdc>
 800860a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800860c:	2b00      	cmp	r3, #0
 800860e:	f47f aa6e 	bne.w	8007aee <_dtoa_r+0x96>
 8008612:	4b07      	ldr	r3, [pc, #28]	; (8008630 <_dtoa_r+0xbd8>)
 8008614:	f7ff ba8e 	b.w	8007b34 <_dtoa_r+0xdc>
 8008618:	9b02      	ldr	r3, [sp, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	dcae      	bgt.n	800857c <_dtoa_r+0xb24>
 800861e:	9b06      	ldr	r3, [sp, #24]
 8008620:	2b02      	cmp	r3, #2
 8008622:	f73f aea8 	bgt.w	8008376 <_dtoa_r+0x91e>
 8008626:	e7a9      	b.n	800857c <_dtoa_r+0xb24>
 8008628:	0800a3bd 	.word	0x0800a3bd
 800862c:	08009c84 	.word	0x08009c84
 8008630:	0800a33e 	.word	0x0800a33e

08008634 <__sflush_r>:
 8008634:	898a      	ldrh	r2, [r1, #12]
 8008636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800863a:	4605      	mov	r5, r0
 800863c:	0710      	lsls	r0, r2, #28
 800863e:	460c      	mov	r4, r1
 8008640:	d458      	bmi.n	80086f4 <__sflush_r+0xc0>
 8008642:	684b      	ldr	r3, [r1, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	dc05      	bgt.n	8008654 <__sflush_r+0x20>
 8008648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800864a:	2b00      	cmp	r3, #0
 800864c:	dc02      	bgt.n	8008654 <__sflush_r+0x20>
 800864e:	2000      	movs	r0, #0
 8008650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008656:	2e00      	cmp	r6, #0
 8008658:	d0f9      	beq.n	800864e <__sflush_r+0x1a>
 800865a:	2300      	movs	r3, #0
 800865c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008660:	682f      	ldr	r7, [r5, #0]
 8008662:	602b      	str	r3, [r5, #0]
 8008664:	d032      	beq.n	80086cc <__sflush_r+0x98>
 8008666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	075a      	lsls	r2, r3, #29
 800866c:	d505      	bpl.n	800867a <__sflush_r+0x46>
 800866e:	6863      	ldr	r3, [r4, #4]
 8008670:	1ac0      	subs	r0, r0, r3
 8008672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008674:	b10b      	cbz	r3, 800867a <__sflush_r+0x46>
 8008676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008678:	1ac0      	subs	r0, r0, r3
 800867a:	2300      	movs	r3, #0
 800867c:	4602      	mov	r2, r0
 800867e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008680:	6a21      	ldr	r1, [r4, #32]
 8008682:	4628      	mov	r0, r5
 8008684:	47b0      	blx	r6
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	d106      	bne.n	800869a <__sflush_r+0x66>
 800868c:	6829      	ldr	r1, [r5, #0]
 800868e:	291d      	cmp	r1, #29
 8008690:	d82c      	bhi.n	80086ec <__sflush_r+0xb8>
 8008692:	4a2a      	ldr	r2, [pc, #168]	; (800873c <__sflush_r+0x108>)
 8008694:	40ca      	lsrs	r2, r1
 8008696:	07d6      	lsls	r6, r2, #31
 8008698:	d528      	bpl.n	80086ec <__sflush_r+0xb8>
 800869a:	2200      	movs	r2, #0
 800869c:	6062      	str	r2, [r4, #4]
 800869e:	04d9      	lsls	r1, r3, #19
 80086a0:	6922      	ldr	r2, [r4, #16]
 80086a2:	6022      	str	r2, [r4, #0]
 80086a4:	d504      	bpl.n	80086b0 <__sflush_r+0x7c>
 80086a6:	1c42      	adds	r2, r0, #1
 80086a8:	d101      	bne.n	80086ae <__sflush_r+0x7a>
 80086aa:	682b      	ldr	r3, [r5, #0]
 80086ac:	b903      	cbnz	r3, 80086b0 <__sflush_r+0x7c>
 80086ae:	6560      	str	r0, [r4, #84]	; 0x54
 80086b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086b2:	602f      	str	r7, [r5, #0]
 80086b4:	2900      	cmp	r1, #0
 80086b6:	d0ca      	beq.n	800864e <__sflush_r+0x1a>
 80086b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086bc:	4299      	cmp	r1, r3
 80086be:	d002      	beq.n	80086c6 <__sflush_r+0x92>
 80086c0:	4628      	mov	r0, r5
 80086c2:	f7fe f8e3 	bl	800688c <_free_r>
 80086c6:	2000      	movs	r0, #0
 80086c8:	6360      	str	r0, [r4, #52]	; 0x34
 80086ca:	e7c1      	b.n	8008650 <__sflush_r+0x1c>
 80086cc:	6a21      	ldr	r1, [r4, #32]
 80086ce:	2301      	movs	r3, #1
 80086d0:	4628      	mov	r0, r5
 80086d2:	47b0      	blx	r6
 80086d4:	1c41      	adds	r1, r0, #1
 80086d6:	d1c7      	bne.n	8008668 <__sflush_r+0x34>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0c4      	beq.n	8008668 <__sflush_r+0x34>
 80086de:	2b1d      	cmp	r3, #29
 80086e0:	d001      	beq.n	80086e6 <__sflush_r+0xb2>
 80086e2:	2b16      	cmp	r3, #22
 80086e4:	d101      	bne.n	80086ea <__sflush_r+0xb6>
 80086e6:	602f      	str	r7, [r5, #0]
 80086e8:	e7b1      	b.n	800864e <__sflush_r+0x1a>
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086f0:	81a3      	strh	r3, [r4, #12]
 80086f2:	e7ad      	b.n	8008650 <__sflush_r+0x1c>
 80086f4:	690f      	ldr	r7, [r1, #16]
 80086f6:	2f00      	cmp	r7, #0
 80086f8:	d0a9      	beq.n	800864e <__sflush_r+0x1a>
 80086fa:	0793      	lsls	r3, r2, #30
 80086fc:	680e      	ldr	r6, [r1, #0]
 80086fe:	bf08      	it	eq
 8008700:	694b      	ldreq	r3, [r1, #20]
 8008702:	600f      	str	r7, [r1, #0]
 8008704:	bf18      	it	ne
 8008706:	2300      	movne	r3, #0
 8008708:	eba6 0807 	sub.w	r8, r6, r7
 800870c:	608b      	str	r3, [r1, #8]
 800870e:	f1b8 0f00 	cmp.w	r8, #0
 8008712:	dd9c      	ble.n	800864e <__sflush_r+0x1a>
 8008714:	6a21      	ldr	r1, [r4, #32]
 8008716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008718:	4643      	mov	r3, r8
 800871a:	463a      	mov	r2, r7
 800871c:	4628      	mov	r0, r5
 800871e:	47b0      	blx	r6
 8008720:	2800      	cmp	r0, #0
 8008722:	dc06      	bgt.n	8008732 <__sflush_r+0xfe>
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800872a:	81a3      	strh	r3, [r4, #12]
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	e78e      	b.n	8008650 <__sflush_r+0x1c>
 8008732:	4407      	add	r7, r0
 8008734:	eba8 0800 	sub.w	r8, r8, r0
 8008738:	e7e9      	b.n	800870e <__sflush_r+0xda>
 800873a:	bf00      	nop
 800873c:	20400001 	.word	0x20400001

08008740 <_fflush_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	690b      	ldr	r3, [r1, #16]
 8008744:	4605      	mov	r5, r0
 8008746:	460c      	mov	r4, r1
 8008748:	b913      	cbnz	r3, 8008750 <_fflush_r+0x10>
 800874a:	2500      	movs	r5, #0
 800874c:	4628      	mov	r0, r5
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	b118      	cbz	r0, 800875a <_fflush_r+0x1a>
 8008752:	6983      	ldr	r3, [r0, #24]
 8008754:	b90b      	cbnz	r3, 800875a <_fflush_r+0x1a>
 8008756:	f000 f8c5 	bl	80088e4 <__sinit>
 800875a:	4b14      	ldr	r3, [pc, #80]	; (80087ac <_fflush_r+0x6c>)
 800875c:	429c      	cmp	r4, r3
 800875e:	d11b      	bne.n	8008798 <_fflush_r+0x58>
 8008760:	686c      	ldr	r4, [r5, #4]
 8008762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0ef      	beq.n	800874a <_fflush_r+0xa>
 800876a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800876c:	07d0      	lsls	r0, r2, #31
 800876e:	d404      	bmi.n	800877a <_fflush_r+0x3a>
 8008770:	0599      	lsls	r1, r3, #22
 8008772:	d402      	bmi.n	800877a <_fflush_r+0x3a>
 8008774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008776:	f000 f958 	bl	8008a2a <__retarget_lock_acquire_recursive>
 800877a:	4628      	mov	r0, r5
 800877c:	4621      	mov	r1, r4
 800877e:	f7ff ff59 	bl	8008634 <__sflush_r>
 8008782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008784:	07da      	lsls	r2, r3, #31
 8008786:	4605      	mov	r5, r0
 8008788:	d4e0      	bmi.n	800874c <_fflush_r+0xc>
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	059b      	lsls	r3, r3, #22
 800878e:	d4dd      	bmi.n	800874c <_fflush_r+0xc>
 8008790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008792:	f000 f94b 	bl	8008a2c <__retarget_lock_release_recursive>
 8008796:	e7d9      	b.n	800874c <_fflush_r+0xc>
 8008798:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <_fflush_r+0x70>)
 800879a:	429c      	cmp	r4, r3
 800879c:	d101      	bne.n	80087a2 <_fflush_r+0x62>
 800879e:	68ac      	ldr	r4, [r5, #8]
 80087a0:	e7df      	b.n	8008762 <_fflush_r+0x22>
 80087a2:	4b04      	ldr	r3, [pc, #16]	; (80087b4 <_fflush_r+0x74>)
 80087a4:	429c      	cmp	r4, r3
 80087a6:	bf08      	it	eq
 80087a8:	68ec      	ldreq	r4, [r5, #12]
 80087aa:	e7da      	b.n	8008762 <_fflush_r+0x22>
 80087ac:	0800a3f0 	.word	0x0800a3f0
 80087b0:	0800a410 	.word	0x0800a410
 80087b4:	0800a3d0 	.word	0x0800a3d0

080087b8 <fileno>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	4e1a      	ldr	r6, [pc, #104]	; (8008824 <fileno+0x6c>)
 80087bc:	6835      	ldr	r5, [r6, #0]
 80087be:	4604      	mov	r4, r0
 80087c0:	b125      	cbz	r5, 80087cc <fileno+0x14>
 80087c2:	69ab      	ldr	r3, [r5, #24]
 80087c4:	b913      	cbnz	r3, 80087cc <fileno+0x14>
 80087c6:	4628      	mov	r0, r5
 80087c8:	f000 f88c 	bl	80088e4 <__sinit>
 80087cc:	4b16      	ldr	r3, [pc, #88]	; (8008828 <fileno+0x70>)
 80087ce:	429c      	cmp	r4, r3
 80087d0:	d118      	bne.n	8008804 <fileno+0x4c>
 80087d2:	686c      	ldr	r4, [r5, #4]
 80087d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087d6:	07d8      	lsls	r0, r3, #31
 80087d8:	d405      	bmi.n	80087e6 <fileno+0x2e>
 80087da:	89a3      	ldrh	r3, [r4, #12]
 80087dc:	0599      	lsls	r1, r3, #22
 80087de:	d402      	bmi.n	80087e6 <fileno+0x2e>
 80087e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087e2:	f000 f922 	bl	8008a2a <__retarget_lock_acquire_recursive>
 80087e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ea:	b1ab      	cbz	r3, 8008818 <fileno+0x60>
 80087ec:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 80087f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087f2:	07d2      	lsls	r2, r2, #31
 80087f4:	d404      	bmi.n	8008800 <fileno+0x48>
 80087f6:	059b      	lsls	r3, r3, #22
 80087f8:	d402      	bmi.n	8008800 <fileno+0x48>
 80087fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087fc:	f000 f916 	bl	8008a2c <__retarget_lock_release_recursive>
 8008800:	4628      	mov	r0, r5
 8008802:	bd70      	pop	{r4, r5, r6, pc}
 8008804:	4b09      	ldr	r3, [pc, #36]	; (800882c <fileno+0x74>)
 8008806:	429c      	cmp	r4, r3
 8008808:	d101      	bne.n	800880e <fileno+0x56>
 800880a:	68ac      	ldr	r4, [r5, #8]
 800880c:	e7e2      	b.n	80087d4 <fileno+0x1c>
 800880e:	4b08      	ldr	r3, [pc, #32]	; (8008830 <fileno+0x78>)
 8008810:	429c      	cmp	r4, r3
 8008812:	bf08      	it	eq
 8008814:	68ec      	ldreq	r4, [r5, #12]
 8008816:	e7dd      	b.n	80087d4 <fileno+0x1c>
 8008818:	6832      	ldr	r2, [r6, #0]
 800881a:	2109      	movs	r1, #9
 800881c:	6011      	str	r1, [r2, #0]
 800881e:	f04f 35ff 	mov.w	r5, #4294967295
 8008822:	e7e5      	b.n	80087f0 <fileno+0x38>
 8008824:	2000003c 	.word	0x2000003c
 8008828:	0800a3f0 	.word	0x0800a3f0
 800882c:	0800a410 	.word	0x0800a410
 8008830:	0800a3d0 	.word	0x0800a3d0

08008834 <std>:
 8008834:	2300      	movs	r3, #0
 8008836:	b510      	push	{r4, lr}
 8008838:	4604      	mov	r4, r0
 800883a:	e9c0 3300 	strd	r3, r3, [r0]
 800883e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008842:	6083      	str	r3, [r0, #8]
 8008844:	8181      	strh	r1, [r0, #12]
 8008846:	6643      	str	r3, [r0, #100]	; 0x64
 8008848:	81c2      	strh	r2, [r0, #14]
 800884a:	6183      	str	r3, [r0, #24]
 800884c:	4619      	mov	r1, r3
 800884e:	2208      	movs	r2, #8
 8008850:	305c      	adds	r0, #92	; 0x5c
 8008852:	f7fe f813 	bl	800687c <memset>
 8008856:	4b05      	ldr	r3, [pc, #20]	; (800886c <std+0x38>)
 8008858:	6263      	str	r3, [r4, #36]	; 0x24
 800885a:	4b05      	ldr	r3, [pc, #20]	; (8008870 <std+0x3c>)
 800885c:	62a3      	str	r3, [r4, #40]	; 0x28
 800885e:	4b05      	ldr	r3, [pc, #20]	; (8008874 <std+0x40>)
 8008860:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008862:	4b05      	ldr	r3, [pc, #20]	; (8008878 <std+0x44>)
 8008864:	6224      	str	r4, [r4, #32]
 8008866:	6323      	str	r3, [r4, #48]	; 0x30
 8008868:	bd10      	pop	{r4, pc}
 800886a:	bf00      	nop
 800886c:	08009451 	.word	0x08009451
 8008870:	08009473 	.word	0x08009473
 8008874:	080094ab 	.word	0x080094ab
 8008878:	080094cf 	.word	0x080094cf

0800887c <_cleanup_r>:
 800887c:	4901      	ldr	r1, [pc, #4]	; (8008884 <_cleanup_r+0x8>)
 800887e:	f000 b8af 	b.w	80089e0 <_fwalk_reent>
 8008882:	bf00      	nop
 8008884:	08008741 	.word	0x08008741

08008888 <__sfmoreglue>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	2268      	movs	r2, #104	; 0x68
 800888c:	1e4d      	subs	r5, r1, #1
 800888e:	4355      	muls	r5, r2
 8008890:	460e      	mov	r6, r1
 8008892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008896:	f7fe f865 	bl	8006964 <_malloc_r>
 800889a:	4604      	mov	r4, r0
 800889c:	b140      	cbz	r0, 80088b0 <__sfmoreglue+0x28>
 800889e:	2100      	movs	r1, #0
 80088a0:	e9c0 1600 	strd	r1, r6, [r0]
 80088a4:	300c      	adds	r0, #12
 80088a6:	60a0      	str	r0, [r4, #8]
 80088a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088ac:	f7fd ffe6 	bl	800687c <memset>
 80088b0:	4620      	mov	r0, r4
 80088b2:	bd70      	pop	{r4, r5, r6, pc}

080088b4 <__sfp_lock_acquire>:
 80088b4:	4801      	ldr	r0, [pc, #4]	; (80088bc <__sfp_lock_acquire+0x8>)
 80088b6:	f000 b8b8 	b.w	8008a2a <__retarget_lock_acquire_recursive>
 80088ba:	bf00      	nop
 80088bc:	2000062d 	.word	0x2000062d

080088c0 <__sfp_lock_release>:
 80088c0:	4801      	ldr	r0, [pc, #4]	; (80088c8 <__sfp_lock_release+0x8>)
 80088c2:	f000 b8b3 	b.w	8008a2c <__retarget_lock_release_recursive>
 80088c6:	bf00      	nop
 80088c8:	2000062d 	.word	0x2000062d

080088cc <__sinit_lock_acquire>:
 80088cc:	4801      	ldr	r0, [pc, #4]	; (80088d4 <__sinit_lock_acquire+0x8>)
 80088ce:	f000 b8ac 	b.w	8008a2a <__retarget_lock_acquire_recursive>
 80088d2:	bf00      	nop
 80088d4:	2000062e 	.word	0x2000062e

080088d8 <__sinit_lock_release>:
 80088d8:	4801      	ldr	r0, [pc, #4]	; (80088e0 <__sinit_lock_release+0x8>)
 80088da:	f000 b8a7 	b.w	8008a2c <__retarget_lock_release_recursive>
 80088de:	bf00      	nop
 80088e0:	2000062e 	.word	0x2000062e

080088e4 <__sinit>:
 80088e4:	b510      	push	{r4, lr}
 80088e6:	4604      	mov	r4, r0
 80088e8:	f7ff fff0 	bl	80088cc <__sinit_lock_acquire>
 80088ec:	69a3      	ldr	r3, [r4, #24]
 80088ee:	b11b      	cbz	r3, 80088f8 <__sinit+0x14>
 80088f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088f4:	f7ff bff0 	b.w	80088d8 <__sinit_lock_release>
 80088f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088fc:	6523      	str	r3, [r4, #80]	; 0x50
 80088fe:	4b13      	ldr	r3, [pc, #76]	; (800894c <__sinit+0x68>)
 8008900:	4a13      	ldr	r2, [pc, #76]	; (8008950 <__sinit+0x6c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	62a2      	str	r2, [r4, #40]	; 0x28
 8008906:	42a3      	cmp	r3, r4
 8008908:	bf04      	itt	eq
 800890a:	2301      	moveq	r3, #1
 800890c:	61a3      	streq	r3, [r4, #24]
 800890e:	4620      	mov	r0, r4
 8008910:	f000 f820 	bl	8008954 <__sfp>
 8008914:	6060      	str	r0, [r4, #4]
 8008916:	4620      	mov	r0, r4
 8008918:	f000 f81c 	bl	8008954 <__sfp>
 800891c:	60a0      	str	r0, [r4, #8]
 800891e:	4620      	mov	r0, r4
 8008920:	f000 f818 	bl	8008954 <__sfp>
 8008924:	2200      	movs	r2, #0
 8008926:	60e0      	str	r0, [r4, #12]
 8008928:	2104      	movs	r1, #4
 800892a:	6860      	ldr	r0, [r4, #4]
 800892c:	f7ff ff82 	bl	8008834 <std>
 8008930:	68a0      	ldr	r0, [r4, #8]
 8008932:	2201      	movs	r2, #1
 8008934:	2109      	movs	r1, #9
 8008936:	f7ff ff7d 	bl	8008834 <std>
 800893a:	68e0      	ldr	r0, [r4, #12]
 800893c:	2202      	movs	r2, #2
 800893e:	2112      	movs	r1, #18
 8008940:	f7ff ff78 	bl	8008834 <std>
 8008944:	2301      	movs	r3, #1
 8008946:	61a3      	str	r3, [r4, #24]
 8008948:	e7d2      	b.n	80088f0 <__sinit+0xc>
 800894a:	bf00      	nop
 800894c:	08009c70 	.word	0x08009c70
 8008950:	0800887d 	.word	0x0800887d

08008954 <__sfp>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	4607      	mov	r7, r0
 8008958:	f7ff ffac 	bl	80088b4 <__sfp_lock_acquire>
 800895c:	4b1e      	ldr	r3, [pc, #120]	; (80089d8 <__sfp+0x84>)
 800895e:	681e      	ldr	r6, [r3, #0]
 8008960:	69b3      	ldr	r3, [r6, #24]
 8008962:	b913      	cbnz	r3, 800896a <__sfp+0x16>
 8008964:	4630      	mov	r0, r6
 8008966:	f7ff ffbd 	bl	80088e4 <__sinit>
 800896a:	3648      	adds	r6, #72	; 0x48
 800896c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008970:	3b01      	subs	r3, #1
 8008972:	d503      	bpl.n	800897c <__sfp+0x28>
 8008974:	6833      	ldr	r3, [r6, #0]
 8008976:	b30b      	cbz	r3, 80089bc <__sfp+0x68>
 8008978:	6836      	ldr	r6, [r6, #0]
 800897a:	e7f7      	b.n	800896c <__sfp+0x18>
 800897c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008980:	b9d5      	cbnz	r5, 80089b8 <__sfp+0x64>
 8008982:	4b16      	ldr	r3, [pc, #88]	; (80089dc <__sfp+0x88>)
 8008984:	60e3      	str	r3, [r4, #12]
 8008986:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800898a:	6665      	str	r5, [r4, #100]	; 0x64
 800898c:	f000 f84c 	bl	8008a28 <__retarget_lock_init_recursive>
 8008990:	f7ff ff96 	bl	80088c0 <__sfp_lock_release>
 8008994:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008998:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800899c:	6025      	str	r5, [r4, #0]
 800899e:	61a5      	str	r5, [r4, #24]
 80089a0:	2208      	movs	r2, #8
 80089a2:	4629      	mov	r1, r5
 80089a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089a8:	f7fd ff68 	bl	800687c <memset>
 80089ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089b4:	4620      	mov	r0, r4
 80089b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089b8:	3468      	adds	r4, #104	; 0x68
 80089ba:	e7d9      	b.n	8008970 <__sfp+0x1c>
 80089bc:	2104      	movs	r1, #4
 80089be:	4638      	mov	r0, r7
 80089c0:	f7ff ff62 	bl	8008888 <__sfmoreglue>
 80089c4:	4604      	mov	r4, r0
 80089c6:	6030      	str	r0, [r6, #0]
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d1d5      	bne.n	8008978 <__sfp+0x24>
 80089cc:	f7ff ff78 	bl	80088c0 <__sfp_lock_release>
 80089d0:	230c      	movs	r3, #12
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	e7ee      	b.n	80089b4 <__sfp+0x60>
 80089d6:	bf00      	nop
 80089d8:	08009c70 	.word	0x08009c70
 80089dc:	ffff0001 	.word	0xffff0001

080089e0 <_fwalk_reent>:
 80089e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089e4:	4606      	mov	r6, r0
 80089e6:	4688      	mov	r8, r1
 80089e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089ec:	2700      	movs	r7, #0
 80089ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089f2:	f1b9 0901 	subs.w	r9, r9, #1
 80089f6:	d505      	bpl.n	8008a04 <_fwalk_reent+0x24>
 80089f8:	6824      	ldr	r4, [r4, #0]
 80089fa:	2c00      	cmp	r4, #0
 80089fc:	d1f7      	bne.n	80089ee <_fwalk_reent+0xe>
 80089fe:	4638      	mov	r0, r7
 8008a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a04:	89ab      	ldrh	r3, [r5, #12]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d907      	bls.n	8008a1a <_fwalk_reent+0x3a>
 8008a0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	d003      	beq.n	8008a1a <_fwalk_reent+0x3a>
 8008a12:	4629      	mov	r1, r5
 8008a14:	4630      	mov	r0, r6
 8008a16:	47c0      	blx	r8
 8008a18:	4307      	orrs	r7, r0
 8008a1a:	3568      	adds	r5, #104	; 0x68
 8008a1c:	e7e9      	b.n	80089f2 <_fwalk_reent+0x12>
	...

08008a20 <_localeconv_r>:
 8008a20:	4800      	ldr	r0, [pc, #0]	; (8008a24 <_localeconv_r+0x4>)
 8008a22:	4770      	bx	lr
 8008a24:	20000190 	.word	0x20000190

08008a28 <__retarget_lock_init_recursive>:
 8008a28:	4770      	bx	lr

08008a2a <__retarget_lock_acquire_recursive>:
 8008a2a:	4770      	bx	lr

08008a2c <__retarget_lock_release_recursive>:
 8008a2c:	4770      	bx	lr

08008a2e <memcpy>:
 8008a2e:	440a      	add	r2, r1
 8008a30:	4291      	cmp	r1, r2
 8008a32:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a36:	d100      	bne.n	8008a3a <memcpy+0xc>
 8008a38:	4770      	bx	lr
 8008a3a:	b510      	push	{r4, lr}
 8008a3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a44:	4291      	cmp	r1, r2
 8008a46:	d1f9      	bne.n	8008a3c <memcpy+0xe>
 8008a48:	bd10      	pop	{r4, pc}
	...

08008a4c <__malloc_lock>:
 8008a4c:	4801      	ldr	r0, [pc, #4]	; (8008a54 <__malloc_lock+0x8>)
 8008a4e:	f7ff bfec 	b.w	8008a2a <__retarget_lock_acquire_recursive>
 8008a52:	bf00      	nop
 8008a54:	2000062c 	.word	0x2000062c

08008a58 <__malloc_unlock>:
 8008a58:	4801      	ldr	r0, [pc, #4]	; (8008a60 <__malloc_unlock+0x8>)
 8008a5a:	f7ff bfe7 	b.w	8008a2c <__retarget_lock_release_recursive>
 8008a5e:	bf00      	nop
 8008a60:	2000062c 	.word	0x2000062c

08008a64 <_Balloc>:
 8008a64:	b570      	push	{r4, r5, r6, lr}
 8008a66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a68:	4604      	mov	r4, r0
 8008a6a:	460d      	mov	r5, r1
 8008a6c:	b976      	cbnz	r6, 8008a8c <_Balloc+0x28>
 8008a6e:	2010      	movs	r0, #16
 8008a70:	f7fd fefc 	bl	800686c <malloc>
 8008a74:	4602      	mov	r2, r0
 8008a76:	6260      	str	r0, [r4, #36]	; 0x24
 8008a78:	b920      	cbnz	r0, 8008a84 <_Balloc+0x20>
 8008a7a:	4b18      	ldr	r3, [pc, #96]	; (8008adc <_Balloc+0x78>)
 8008a7c:	4818      	ldr	r0, [pc, #96]	; (8008ae0 <_Balloc+0x7c>)
 8008a7e:	2166      	movs	r1, #102	; 0x66
 8008a80:	f000 fd2a 	bl	80094d8 <__assert_func>
 8008a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a88:	6006      	str	r6, [r0, #0]
 8008a8a:	60c6      	str	r6, [r0, #12]
 8008a8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a8e:	68f3      	ldr	r3, [r6, #12]
 8008a90:	b183      	cbz	r3, 8008ab4 <_Balloc+0x50>
 8008a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a9a:	b9b8      	cbnz	r0, 8008acc <_Balloc+0x68>
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	fa01 f605 	lsl.w	r6, r1, r5
 8008aa2:	1d72      	adds	r2, r6, #5
 8008aa4:	0092      	lsls	r2, r2, #2
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f000 fb60 	bl	800916c <_calloc_r>
 8008aac:	b160      	cbz	r0, 8008ac8 <_Balloc+0x64>
 8008aae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ab2:	e00e      	b.n	8008ad2 <_Balloc+0x6e>
 8008ab4:	2221      	movs	r2, #33	; 0x21
 8008ab6:	2104      	movs	r1, #4
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 fb57 	bl	800916c <_calloc_r>
 8008abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ac0:	60f0      	str	r0, [r6, #12]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e4      	bne.n	8008a92 <_Balloc+0x2e>
 8008ac8:	2000      	movs	r0, #0
 8008aca:	bd70      	pop	{r4, r5, r6, pc}
 8008acc:	6802      	ldr	r2, [r0, #0]
 8008ace:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ad8:	e7f7      	b.n	8008aca <_Balloc+0x66>
 8008ada:	bf00      	nop
 8008adc:	0800a34b 	.word	0x0800a34b
 8008ae0:	0800a430 	.word	0x0800a430

08008ae4 <_Bfree>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ae8:	4605      	mov	r5, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	b976      	cbnz	r6, 8008b0c <_Bfree+0x28>
 8008aee:	2010      	movs	r0, #16
 8008af0:	f7fd febc 	bl	800686c <malloc>
 8008af4:	4602      	mov	r2, r0
 8008af6:	6268      	str	r0, [r5, #36]	; 0x24
 8008af8:	b920      	cbnz	r0, 8008b04 <_Bfree+0x20>
 8008afa:	4b09      	ldr	r3, [pc, #36]	; (8008b20 <_Bfree+0x3c>)
 8008afc:	4809      	ldr	r0, [pc, #36]	; (8008b24 <_Bfree+0x40>)
 8008afe:	218a      	movs	r1, #138	; 0x8a
 8008b00:	f000 fcea 	bl	80094d8 <__assert_func>
 8008b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b08:	6006      	str	r6, [r0, #0]
 8008b0a:	60c6      	str	r6, [r0, #12]
 8008b0c:	b13c      	cbz	r4, 8008b1e <_Bfree+0x3a>
 8008b0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b10:	6862      	ldr	r2, [r4, #4]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b18:	6021      	str	r1, [r4, #0]
 8008b1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	0800a34b 	.word	0x0800a34b
 8008b24:	0800a430 	.word	0x0800a430

08008b28 <__multadd>:
 8008b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2c:	690d      	ldr	r5, [r1, #16]
 8008b2e:	4607      	mov	r7, r0
 8008b30:	460c      	mov	r4, r1
 8008b32:	461e      	mov	r6, r3
 8008b34:	f101 0c14 	add.w	ip, r1, #20
 8008b38:	2000      	movs	r0, #0
 8008b3a:	f8dc 3000 	ldr.w	r3, [ip]
 8008b3e:	b299      	uxth	r1, r3
 8008b40:	fb02 6101 	mla	r1, r2, r1, r6
 8008b44:	0c1e      	lsrs	r6, r3, #16
 8008b46:	0c0b      	lsrs	r3, r1, #16
 8008b48:	fb02 3306 	mla	r3, r2, r6, r3
 8008b4c:	b289      	uxth	r1, r1
 8008b4e:	3001      	adds	r0, #1
 8008b50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b54:	4285      	cmp	r5, r0
 8008b56:	f84c 1b04 	str.w	r1, [ip], #4
 8008b5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b5e:	dcec      	bgt.n	8008b3a <__multadd+0x12>
 8008b60:	b30e      	cbz	r6, 8008ba6 <__multadd+0x7e>
 8008b62:	68a3      	ldr	r3, [r4, #8]
 8008b64:	42ab      	cmp	r3, r5
 8008b66:	dc19      	bgt.n	8008b9c <__multadd+0x74>
 8008b68:	6861      	ldr	r1, [r4, #4]
 8008b6a:	4638      	mov	r0, r7
 8008b6c:	3101      	adds	r1, #1
 8008b6e:	f7ff ff79 	bl	8008a64 <_Balloc>
 8008b72:	4680      	mov	r8, r0
 8008b74:	b928      	cbnz	r0, 8008b82 <__multadd+0x5a>
 8008b76:	4602      	mov	r2, r0
 8008b78:	4b0c      	ldr	r3, [pc, #48]	; (8008bac <__multadd+0x84>)
 8008b7a:	480d      	ldr	r0, [pc, #52]	; (8008bb0 <__multadd+0x88>)
 8008b7c:	21b5      	movs	r1, #181	; 0xb5
 8008b7e:	f000 fcab 	bl	80094d8 <__assert_func>
 8008b82:	6922      	ldr	r2, [r4, #16]
 8008b84:	3202      	adds	r2, #2
 8008b86:	f104 010c 	add.w	r1, r4, #12
 8008b8a:	0092      	lsls	r2, r2, #2
 8008b8c:	300c      	adds	r0, #12
 8008b8e:	f7ff ff4e 	bl	8008a2e <memcpy>
 8008b92:	4621      	mov	r1, r4
 8008b94:	4638      	mov	r0, r7
 8008b96:	f7ff ffa5 	bl	8008ae4 <_Bfree>
 8008b9a:	4644      	mov	r4, r8
 8008b9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ba0:	3501      	adds	r5, #1
 8008ba2:	615e      	str	r6, [r3, #20]
 8008ba4:	6125      	str	r5, [r4, #16]
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bac:	0800a3bd 	.word	0x0800a3bd
 8008bb0:	0800a430 	.word	0x0800a430

08008bb4 <__hi0bits>:
 8008bb4:	0c03      	lsrs	r3, r0, #16
 8008bb6:	041b      	lsls	r3, r3, #16
 8008bb8:	b9d3      	cbnz	r3, 8008bf0 <__hi0bits+0x3c>
 8008bba:	0400      	lsls	r0, r0, #16
 8008bbc:	2310      	movs	r3, #16
 8008bbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008bc2:	bf04      	itt	eq
 8008bc4:	0200      	lsleq	r0, r0, #8
 8008bc6:	3308      	addeq	r3, #8
 8008bc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008bcc:	bf04      	itt	eq
 8008bce:	0100      	lsleq	r0, r0, #4
 8008bd0:	3304      	addeq	r3, #4
 8008bd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008bd6:	bf04      	itt	eq
 8008bd8:	0080      	lsleq	r0, r0, #2
 8008bda:	3302      	addeq	r3, #2
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	db05      	blt.n	8008bec <__hi0bits+0x38>
 8008be0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008be4:	f103 0301 	add.w	r3, r3, #1
 8008be8:	bf08      	it	eq
 8008bea:	2320      	moveq	r3, #32
 8008bec:	4618      	mov	r0, r3
 8008bee:	4770      	bx	lr
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	e7e4      	b.n	8008bbe <__hi0bits+0xa>

08008bf4 <__lo0bits>:
 8008bf4:	6803      	ldr	r3, [r0, #0]
 8008bf6:	f013 0207 	ands.w	r2, r3, #7
 8008bfa:	4601      	mov	r1, r0
 8008bfc:	d00b      	beq.n	8008c16 <__lo0bits+0x22>
 8008bfe:	07da      	lsls	r2, r3, #31
 8008c00:	d423      	bmi.n	8008c4a <__lo0bits+0x56>
 8008c02:	0798      	lsls	r0, r3, #30
 8008c04:	bf49      	itett	mi
 8008c06:	085b      	lsrmi	r3, r3, #1
 8008c08:	089b      	lsrpl	r3, r3, #2
 8008c0a:	2001      	movmi	r0, #1
 8008c0c:	600b      	strmi	r3, [r1, #0]
 8008c0e:	bf5c      	itt	pl
 8008c10:	600b      	strpl	r3, [r1, #0]
 8008c12:	2002      	movpl	r0, #2
 8008c14:	4770      	bx	lr
 8008c16:	b298      	uxth	r0, r3
 8008c18:	b9a8      	cbnz	r0, 8008c46 <__lo0bits+0x52>
 8008c1a:	0c1b      	lsrs	r3, r3, #16
 8008c1c:	2010      	movs	r0, #16
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	b90a      	cbnz	r2, 8008c26 <__lo0bits+0x32>
 8008c22:	3008      	adds	r0, #8
 8008c24:	0a1b      	lsrs	r3, r3, #8
 8008c26:	071a      	lsls	r2, r3, #28
 8008c28:	bf04      	itt	eq
 8008c2a:	091b      	lsreq	r3, r3, #4
 8008c2c:	3004      	addeq	r0, #4
 8008c2e:	079a      	lsls	r2, r3, #30
 8008c30:	bf04      	itt	eq
 8008c32:	089b      	lsreq	r3, r3, #2
 8008c34:	3002      	addeq	r0, #2
 8008c36:	07da      	lsls	r2, r3, #31
 8008c38:	d403      	bmi.n	8008c42 <__lo0bits+0x4e>
 8008c3a:	085b      	lsrs	r3, r3, #1
 8008c3c:	f100 0001 	add.w	r0, r0, #1
 8008c40:	d005      	beq.n	8008c4e <__lo0bits+0x5a>
 8008c42:	600b      	str	r3, [r1, #0]
 8008c44:	4770      	bx	lr
 8008c46:	4610      	mov	r0, r2
 8008c48:	e7e9      	b.n	8008c1e <__lo0bits+0x2a>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	4770      	bx	lr
 8008c4e:	2020      	movs	r0, #32
 8008c50:	4770      	bx	lr
	...

08008c54 <__i2b>:
 8008c54:	b510      	push	{r4, lr}
 8008c56:	460c      	mov	r4, r1
 8008c58:	2101      	movs	r1, #1
 8008c5a:	f7ff ff03 	bl	8008a64 <_Balloc>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	b928      	cbnz	r0, 8008c6e <__i2b+0x1a>
 8008c62:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <__i2b+0x24>)
 8008c64:	4805      	ldr	r0, [pc, #20]	; (8008c7c <__i2b+0x28>)
 8008c66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c6a:	f000 fc35 	bl	80094d8 <__assert_func>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	6144      	str	r4, [r0, #20]
 8008c72:	6103      	str	r3, [r0, #16]
 8008c74:	bd10      	pop	{r4, pc}
 8008c76:	bf00      	nop
 8008c78:	0800a3bd 	.word	0x0800a3bd
 8008c7c:	0800a430 	.word	0x0800a430

08008c80 <__multiply>:
 8008c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c84:	4691      	mov	r9, r2
 8008c86:	690a      	ldr	r2, [r1, #16]
 8008c88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	bfb8      	it	lt
 8008c90:	460b      	movlt	r3, r1
 8008c92:	460c      	mov	r4, r1
 8008c94:	bfbc      	itt	lt
 8008c96:	464c      	movlt	r4, r9
 8008c98:	4699      	movlt	r9, r3
 8008c9a:	6927      	ldr	r7, [r4, #16]
 8008c9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ca0:	68a3      	ldr	r3, [r4, #8]
 8008ca2:	6861      	ldr	r1, [r4, #4]
 8008ca4:	eb07 060a 	add.w	r6, r7, sl
 8008ca8:	42b3      	cmp	r3, r6
 8008caa:	b085      	sub	sp, #20
 8008cac:	bfb8      	it	lt
 8008cae:	3101      	addlt	r1, #1
 8008cb0:	f7ff fed8 	bl	8008a64 <_Balloc>
 8008cb4:	b930      	cbnz	r0, 8008cc4 <__multiply+0x44>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	4b44      	ldr	r3, [pc, #272]	; (8008dcc <__multiply+0x14c>)
 8008cba:	4845      	ldr	r0, [pc, #276]	; (8008dd0 <__multiply+0x150>)
 8008cbc:	f240 115d 	movw	r1, #349	; 0x15d
 8008cc0:	f000 fc0a 	bl	80094d8 <__assert_func>
 8008cc4:	f100 0514 	add.w	r5, r0, #20
 8008cc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ccc:	462b      	mov	r3, r5
 8008cce:	2200      	movs	r2, #0
 8008cd0:	4543      	cmp	r3, r8
 8008cd2:	d321      	bcc.n	8008d18 <__multiply+0x98>
 8008cd4:	f104 0314 	add.w	r3, r4, #20
 8008cd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008cdc:	f109 0314 	add.w	r3, r9, #20
 8008ce0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ce4:	9202      	str	r2, [sp, #8]
 8008ce6:	1b3a      	subs	r2, r7, r4
 8008ce8:	3a15      	subs	r2, #21
 8008cea:	f022 0203 	bic.w	r2, r2, #3
 8008cee:	3204      	adds	r2, #4
 8008cf0:	f104 0115 	add.w	r1, r4, #21
 8008cf4:	428f      	cmp	r7, r1
 8008cf6:	bf38      	it	cc
 8008cf8:	2204      	movcc	r2, #4
 8008cfa:	9201      	str	r2, [sp, #4]
 8008cfc:	9a02      	ldr	r2, [sp, #8]
 8008cfe:	9303      	str	r3, [sp, #12]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d80c      	bhi.n	8008d1e <__multiply+0x9e>
 8008d04:	2e00      	cmp	r6, #0
 8008d06:	dd03      	ble.n	8008d10 <__multiply+0x90>
 8008d08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d05a      	beq.n	8008dc6 <__multiply+0x146>
 8008d10:	6106      	str	r6, [r0, #16]
 8008d12:	b005      	add	sp, #20
 8008d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d18:	f843 2b04 	str.w	r2, [r3], #4
 8008d1c:	e7d8      	b.n	8008cd0 <__multiply+0x50>
 8008d1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d22:	f1ba 0f00 	cmp.w	sl, #0
 8008d26:	d024      	beq.n	8008d72 <__multiply+0xf2>
 8008d28:	f104 0e14 	add.w	lr, r4, #20
 8008d2c:	46a9      	mov	r9, r5
 8008d2e:	f04f 0c00 	mov.w	ip, #0
 8008d32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d36:	f8d9 1000 	ldr.w	r1, [r9]
 8008d3a:	fa1f fb82 	uxth.w	fp, r2
 8008d3e:	b289      	uxth	r1, r1
 8008d40:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008d48:	f8d9 2000 	ldr.w	r2, [r9]
 8008d4c:	4461      	add	r1, ip
 8008d4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d52:	fb0a c20b 	mla	r2, sl, fp, ip
 8008d56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d5a:	b289      	uxth	r1, r1
 8008d5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d60:	4577      	cmp	r7, lr
 8008d62:	f849 1b04 	str.w	r1, [r9], #4
 8008d66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d6a:	d8e2      	bhi.n	8008d32 <__multiply+0xb2>
 8008d6c:	9a01      	ldr	r2, [sp, #4]
 8008d6e:	f845 c002 	str.w	ip, [r5, r2]
 8008d72:	9a03      	ldr	r2, [sp, #12]
 8008d74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d78:	3304      	adds	r3, #4
 8008d7a:	f1b9 0f00 	cmp.w	r9, #0
 8008d7e:	d020      	beq.n	8008dc2 <__multiply+0x142>
 8008d80:	6829      	ldr	r1, [r5, #0]
 8008d82:	f104 0c14 	add.w	ip, r4, #20
 8008d86:	46ae      	mov	lr, r5
 8008d88:	f04f 0a00 	mov.w	sl, #0
 8008d8c:	f8bc b000 	ldrh.w	fp, [ip]
 8008d90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d94:	fb09 220b 	mla	r2, r9, fp, r2
 8008d98:	4492      	add	sl, r2
 8008d9a:	b289      	uxth	r1, r1
 8008d9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008da0:	f84e 1b04 	str.w	r1, [lr], #4
 8008da4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008da8:	f8be 1000 	ldrh.w	r1, [lr]
 8008dac:	0c12      	lsrs	r2, r2, #16
 8008dae:	fb09 1102 	mla	r1, r9, r2, r1
 8008db2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008db6:	4567      	cmp	r7, ip
 8008db8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008dbc:	d8e6      	bhi.n	8008d8c <__multiply+0x10c>
 8008dbe:	9a01      	ldr	r2, [sp, #4]
 8008dc0:	50a9      	str	r1, [r5, r2]
 8008dc2:	3504      	adds	r5, #4
 8008dc4:	e79a      	b.n	8008cfc <__multiply+0x7c>
 8008dc6:	3e01      	subs	r6, #1
 8008dc8:	e79c      	b.n	8008d04 <__multiply+0x84>
 8008dca:	bf00      	nop
 8008dcc:	0800a3bd 	.word	0x0800a3bd
 8008dd0:	0800a430 	.word	0x0800a430

08008dd4 <__pow5mult>:
 8008dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dd8:	4615      	mov	r5, r2
 8008dda:	f012 0203 	ands.w	r2, r2, #3
 8008dde:	4606      	mov	r6, r0
 8008de0:	460f      	mov	r7, r1
 8008de2:	d007      	beq.n	8008df4 <__pow5mult+0x20>
 8008de4:	4c25      	ldr	r4, [pc, #148]	; (8008e7c <__pow5mult+0xa8>)
 8008de6:	3a01      	subs	r2, #1
 8008de8:	2300      	movs	r3, #0
 8008dea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dee:	f7ff fe9b 	bl	8008b28 <__multadd>
 8008df2:	4607      	mov	r7, r0
 8008df4:	10ad      	asrs	r5, r5, #2
 8008df6:	d03d      	beq.n	8008e74 <__pow5mult+0xa0>
 8008df8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008dfa:	b97c      	cbnz	r4, 8008e1c <__pow5mult+0x48>
 8008dfc:	2010      	movs	r0, #16
 8008dfe:	f7fd fd35 	bl	800686c <malloc>
 8008e02:	4602      	mov	r2, r0
 8008e04:	6270      	str	r0, [r6, #36]	; 0x24
 8008e06:	b928      	cbnz	r0, 8008e14 <__pow5mult+0x40>
 8008e08:	4b1d      	ldr	r3, [pc, #116]	; (8008e80 <__pow5mult+0xac>)
 8008e0a:	481e      	ldr	r0, [pc, #120]	; (8008e84 <__pow5mult+0xb0>)
 8008e0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e10:	f000 fb62 	bl	80094d8 <__assert_func>
 8008e14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e18:	6004      	str	r4, [r0, #0]
 8008e1a:	60c4      	str	r4, [r0, #12]
 8008e1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e24:	b94c      	cbnz	r4, 8008e3a <__pow5mult+0x66>
 8008e26:	f240 2171 	movw	r1, #625	; 0x271
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f7ff ff12 	bl	8008c54 <__i2b>
 8008e30:	2300      	movs	r3, #0
 8008e32:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e36:	4604      	mov	r4, r0
 8008e38:	6003      	str	r3, [r0, #0]
 8008e3a:	f04f 0900 	mov.w	r9, #0
 8008e3e:	07eb      	lsls	r3, r5, #31
 8008e40:	d50a      	bpl.n	8008e58 <__pow5mult+0x84>
 8008e42:	4639      	mov	r1, r7
 8008e44:	4622      	mov	r2, r4
 8008e46:	4630      	mov	r0, r6
 8008e48:	f7ff ff1a 	bl	8008c80 <__multiply>
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	4680      	mov	r8, r0
 8008e50:	4630      	mov	r0, r6
 8008e52:	f7ff fe47 	bl	8008ae4 <_Bfree>
 8008e56:	4647      	mov	r7, r8
 8008e58:	106d      	asrs	r5, r5, #1
 8008e5a:	d00b      	beq.n	8008e74 <__pow5mult+0xa0>
 8008e5c:	6820      	ldr	r0, [r4, #0]
 8008e5e:	b938      	cbnz	r0, 8008e70 <__pow5mult+0x9c>
 8008e60:	4622      	mov	r2, r4
 8008e62:	4621      	mov	r1, r4
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7ff ff0b 	bl	8008c80 <__multiply>
 8008e6a:	6020      	str	r0, [r4, #0]
 8008e6c:	f8c0 9000 	str.w	r9, [r0]
 8008e70:	4604      	mov	r4, r0
 8008e72:	e7e4      	b.n	8008e3e <__pow5mult+0x6a>
 8008e74:	4638      	mov	r0, r7
 8008e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e7a:	bf00      	nop
 8008e7c:	0800a580 	.word	0x0800a580
 8008e80:	0800a34b 	.word	0x0800a34b
 8008e84:	0800a430 	.word	0x0800a430

08008e88 <__lshift>:
 8008e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	6849      	ldr	r1, [r1, #4]
 8008e90:	6923      	ldr	r3, [r4, #16]
 8008e92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e96:	68a3      	ldr	r3, [r4, #8]
 8008e98:	4607      	mov	r7, r0
 8008e9a:	4691      	mov	r9, r2
 8008e9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ea0:	f108 0601 	add.w	r6, r8, #1
 8008ea4:	42b3      	cmp	r3, r6
 8008ea6:	db0b      	blt.n	8008ec0 <__lshift+0x38>
 8008ea8:	4638      	mov	r0, r7
 8008eaa:	f7ff fddb 	bl	8008a64 <_Balloc>
 8008eae:	4605      	mov	r5, r0
 8008eb0:	b948      	cbnz	r0, 8008ec6 <__lshift+0x3e>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	4b2a      	ldr	r3, [pc, #168]	; (8008f60 <__lshift+0xd8>)
 8008eb6:	482b      	ldr	r0, [pc, #172]	; (8008f64 <__lshift+0xdc>)
 8008eb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ebc:	f000 fb0c 	bl	80094d8 <__assert_func>
 8008ec0:	3101      	adds	r1, #1
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	e7ee      	b.n	8008ea4 <__lshift+0x1c>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f100 0114 	add.w	r1, r0, #20
 8008ecc:	f100 0210 	add.w	r2, r0, #16
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	4553      	cmp	r3, sl
 8008ed4:	db37      	blt.n	8008f46 <__lshift+0xbe>
 8008ed6:	6920      	ldr	r0, [r4, #16]
 8008ed8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008edc:	f104 0314 	add.w	r3, r4, #20
 8008ee0:	f019 091f 	ands.w	r9, r9, #31
 8008ee4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ee8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008eec:	d02f      	beq.n	8008f4e <__lshift+0xc6>
 8008eee:	f1c9 0e20 	rsb	lr, r9, #32
 8008ef2:	468a      	mov	sl, r1
 8008ef4:	f04f 0c00 	mov.w	ip, #0
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	fa02 f209 	lsl.w	r2, r2, r9
 8008efe:	ea42 020c 	orr.w	r2, r2, ip
 8008f02:	f84a 2b04 	str.w	r2, [sl], #4
 8008f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f0a:	4298      	cmp	r0, r3
 8008f0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008f10:	d8f2      	bhi.n	8008ef8 <__lshift+0x70>
 8008f12:	1b03      	subs	r3, r0, r4
 8008f14:	3b15      	subs	r3, #21
 8008f16:	f023 0303 	bic.w	r3, r3, #3
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	f104 0215 	add.w	r2, r4, #21
 8008f20:	4290      	cmp	r0, r2
 8008f22:	bf38      	it	cc
 8008f24:	2304      	movcc	r3, #4
 8008f26:	f841 c003 	str.w	ip, [r1, r3]
 8008f2a:	f1bc 0f00 	cmp.w	ip, #0
 8008f2e:	d001      	beq.n	8008f34 <__lshift+0xac>
 8008f30:	f108 0602 	add.w	r6, r8, #2
 8008f34:	3e01      	subs	r6, #1
 8008f36:	4638      	mov	r0, r7
 8008f38:	612e      	str	r6, [r5, #16]
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	f7ff fdd2 	bl	8008ae4 <_Bfree>
 8008f40:	4628      	mov	r0, r5
 8008f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f46:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	e7c1      	b.n	8008ed2 <__lshift+0x4a>
 8008f4e:	3904      	subs	r1, #4
 8008f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f54:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f58:	4298      	cmp	r0, r3
 8008f5a:	d8f9      	bhi.n	8008f50 <__lshift+0xc8>
 8008f5c:	e7ea      	b.n	8008f34 <__lshift+0xac>
 8008f5e:	bf00      	nop
 8008f60:	0800a3bd 	.word	0x0800a3bd
 8008f64:	0800a430 	.word	0x0800a430

08008f68 <__mcmp>:
 8008f68:	b530      	push	{r4, r5, lr}
 8008f6a:	6902      	ldr	r2, [r0, #16]
 8008f6c:	690c      	ldr	r4, [r1, #16]
 8008f6e:	1b12      	subs	r2, r2, r4
 8008f70:	d10e      	bne.n	8008f90 <__mcmp+0x28>
 8008f72:	f100 0314 	add.w	r3, r0, #20
 8008f76:	3114      	adds	r1, #20
 8008f78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f88:	42a5      	cmp	r5, r4
 8008f8a:	d003      	beq.n	8008f94 <__mcmp+0x2c>
 8008f8c:	d305      	bcc.n	8008f9a <__mcmp+0x32>
 8008f8e:	2201      	movs	r2, #1
 8008f90:	4610      	mov	r0, r2
 8008f92:	bd30      	pop	{r4, r5, pc}
 8008f94:	4283      	cmp	r3, r0
 8008f96:	d3f3      	bcc.n	8008f80 <__mcmp+0x18>
 8008f98:	e7fa      	b.n	8008f90 <__mcmp+0x28>
 8008f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9e:	e7f7      	b.n	8008f90 <__mcmp+0x28>

08008fa0 <__mdiff>:
 8008fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	4611      	mov	r1, r2
 8008faa:	4620      	mov	r0, r4
 8008fac:	4690      	mov	r8, r2
 8008fae:	f7ff ffdb 	bl	8008f68 <__mcmp>
 8008fb2:	1e05      	subs	r5, r0, #0
 8008fb4:	d110      	bne.n	8008fd8 <__mdiff+0x38>
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f7ff fd53 	bl	8008a64 <_Balloc>
 8008fbe:	b930      	cbnz	r0, 8008fce <__mdiff+0x2e>
 8008fc0:	4b3a      	ldr	r3, [pc, #232]	; (80090ac <__mdiff+0x10c>)
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	f240 2132 	movw	r1, #562	; 0x232
 8008fc8:	4839      	ldr	r0, [pc, #228]	; (80090b0 <__mdiff+0x110>)
 8008fca:	f000 fa85 	bl	80094d8 <__assert_func>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd8:	bfa4      	itt	ge
 8008fda:	4643      	movge	r3, r8
 8008fdc:	46a0      	movge	r8, r4
 8008fde:	4630      	mov	r0, r6
 8008fe0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008fe4:	bfa6      	itte	ge
 8008fe6:	461c      	movge	r4, r3
 8008fe8:	2500      	movge	r5, #0
 8008fea:	2501      	movlt	r5, #1
 8008fec:	f7ff fd3a 	bl	8008a64 <_Balloc>
 8008ff0:	b920      	cbnz	r0, 8008ffc <__mdiff+0x5c>
 8008ff2:	4b2e      	ldr	r3, [pc, #184]	; (80090ac <__mdiff+0x10c>)
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ffa:	e7e5      	b.n	8008fc8 <__mdiff+0x28>
 8008ffc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009000:	6926      	ldr	r6, [r4, #16]
 8009002:	60c5      	str	r5, [r0, #12]
 8009004:	f104 0914 	add.w	r9, r4, #20
 8009008:	f108 0514 	add.w	r5, r8, #20
 800900c:	f100 0e14 	add.w	lr, r0, #20
 8009010:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009014:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009018:	f108 0210 	add.w	r2, r8, #16
 800901c:	46f2      	mov	sl, lr
 800901e:	2100      	movs	r1, #0
 8009020:	f859 3b04 	ldr.w	r3, [r9], #4
 8009024:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009028:	fa1f f883 	uxth.w	r8, r3
 800902c:	fa11 f18b 	uxtah	r1, r1, fp
 8009030:	0c1b      	lsrs	r3, r3, #16
 8009032:	eba1 0808 	sub.w	r8, r1, r8
 8009036:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800903a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800903e:	fa1f f888 	uxth.w	r8, r8
 8009042:	1419      	asrs	r1, r3, #16
 8009044:	454e      	cmp	r6, r9
 8009046:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800904a:	f84a 3b04 	str.w	r3, [sl], #4
 800904e:	d8e7      	bhi.n	8009020 <__mdiff+0x80>
 8009050:	1b33      	subs	r3, r6, r4
 8009052:	3b15      	subs	r3, #21
 8009054:	f023 0303 	bic.w	r3, r3, #3
 8009058:	3304      	adds	r3, #4
 800905a:	3415      	adds	r4, #21
 800905c:	42a6      	cmp	r6, r4
 800905e:	bf38      	it	cc
 8009060:	2304      	movcc	r3, #4
 8009062:	441d      	add	r5, r3
 8009064:	4473      	add	r3, lr
 8009066:	469e      	mov	lr, r3
 8009068:	462e      	mov	r6, r5
 800906a:	4566      	cmp	r6, ip
 800906c:	d30e      	bcc.n	800908c <__mdiff+0xec>
 800906e:	f10c 0203 	add.w	r2, ip, #3
 8009072:	1b52      	subs	r2, r2, r5
 8009074:	f022 0203 	bic.w	r2, r2, #3
 8009078:	3d03      	subs	r5, #3
 800907a:	45ac      	cmp	ip, r5
 800907c:	bf38      	it	cc
 800907e:	2200      	movcc	r2, #0
 8009080:	441a      	add	r2, r3
 8009082:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009086:	b17b      	cbz	r3, 80090a8 <__mdiff+0x108>
 8009088:	6107      	str	r7, [r0, #16]
 800908a:	e7a3      	b.n	8008fd4 <__mdiff+0x34>
 800908c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009090:	fa11 f288 	uxtah	r2, r1, r8
 8009094:	1414      	asrs	r4, r2, #16
 8009096:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800909a:	b292      	uxth	r2, r2
 800909c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80090a0:	f84e 2b04 	str.w	r2, [lr], #4
 80090a4:	1421      	asrs	r1, r4, #16
 80090a6:	e7e0      	b.n	800906a <__mdiff+0xca>
 80090a8:	3f01      	subs	r7, #1
 80090aa:	e7ea      	b.n	8009082 <__mdiff+0xe2>
 80090ac:	0800a3bd 	.word	0x0800a3bd
 80090b0:	0800a430 	.word	0x0800a430

080090b4 <__d2b>:
 80090b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090b8:	4689      	mov	r9, r1
 80090ba:	2101      	movs	r1, #1
 80090bc:	ec57 6b10 	vmov	r6, r7, d0
 80090c0:	4690      	mov	r8, r2
 80090c2:	f7ff fccf 	bl	8008a64 <_Balloc>
 80090c6:	4604      	mov	r4, r0
 80090c8:	b930      	cbnz	r0, 80090d8 <__d2b+0x24>
 80090ca:	4602      	mov	r2, r0
 80090cc:	4b25      	ldr	r3, [pc, #148]	; (8009164 <__d2b+0xb0>)
 80090ce:	4826      	ldr	r0, [pc, #152]	; (8009168 <__d2b+0xb4>)
 80090d0:	f240 310a 	movw	r1, #778	; 0x30a
 80090d4:	f000 fa00 	bl	80094d8 <__assert_func>
 80090d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80090dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80090e0:	bb35      	cbnz	r5, 8009130 <__d2b+0x7c>
 80090e2:	2e00      	cmp	r6, #0
 80090e4:	9301      	str	r3, [sp, #4]
 80090e6:	d028      	beq.n	800913a <__d2b+0x86>
 80090e8:	4668      	mov	r0, sp
 80090ea:	9600      	str	r6, [sp, #0]
 80090ec:	f7ff fd82 	bl	8008bf4 <__lo0bits>
 80090f0:	9900      	ldr	r1, [sp, #0]
 80090f2:	b300      	cbz	r0, 8009136 <__d2b+0x82>
 80090f4:	9a01      	ldr	r2, [sp, #4]
 80090f6:	f1c0 0320 	rsb	r3, r0, #32
 80090fa:	fa02 f303 	lsl.w	r3, r2, r3
 80090fe:	430b      	orrs	r3, r1
 8009100:	40c2      	lsrs	r2, r0
 8009102:	6163      	str	r3, [r4, #20]
 8009104:	9201      	str	r2, [sp, #4]
 8009106:	9b01      	ldr	r3, [sp, #4]
 8009108:	61a3      	str	r3, [r4, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	bf14      	ite	ne
 800910e:	2202      	movne	r2, #2
 8009110:	2201      	moveq	r2, #1
 8009112:	6122      	str	r2, [r4, #16]
 8009114:	b1d5      	cbz	r5, 800914c <__d2b+0x98>
 8009116:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800911a:	4405      	add	r5, r0
 800911c:	f8c9 5000 	str.w	r5, [r9]
 8009120:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009124:	f8c8 0000 	str.w	r0, [r8]
 8009128:	4620      	mov	r0, r4
 800912a:	b003      	add	sp, #12
 800912c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009134:	e7d5      	b.n	80090e2 <__d2b+0x2e>
 8009136:	6161      	str	r1, [r4, #20]
 8009138:	e7e5      	b.n	8009106 <__d2b+0x52>
 800913a:	a801      	add	r0, sp, #4
 800913c:	f7ff fd5a 	bl	8008bf4 <__lo0bits>
 8009140:	9b01      	ldr	r3, [sp, #4]
 8009142:	6163      	str	r3, [r4, #20]
 8009144:	2201      	movs	r2, #1
 8009146:	6122      	str	r2, [r4, #16]
 8009148:	3020      	adds	r0, #32
 800914a:	e7e3      	b.n	8009114 <__d2b+0x60>
 800914c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009150:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009154:	f8c9 0000 	str.w	r0, [r9]
 8009158:	6918      	ldr	r0, [r3, #16]
 800915a:	f7ff fd2b 	bl	8008bb4 <__hi0bits>
 800915e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009162:	e7df      	b.n	8009124 <__d2b+0x70>
 8009164:	0800a3bd 	.word	0x0800a3bd
 8009168:	0800a430 	.word	0x0800a430

0800916c <_calloc_r>:
 800916c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800916e:	fba1 2402 	umull	r2, r4, r1, r2
 8009172:	b94c      	cbnz	r4, 8009188 <_calloc_r+0x1c>
 8009174:	4611      	mov	r1, r2
 8009176:	9201      	str	r2, [sp, #4]
 8009178:	f7fd fbf4 	bl	8006964 <_malloc_r>
 800917c:	9a01      	ldr	r2, [sp, #4]
 800917e:	4605      	mov	r5, r0
 8009180:	b930      	cbnz	r0, 8009190 <_calloc_r+0x24>
 8009182:	4628      	mov	r0, r5
 8009184:	b003      	add	sp, #12
 8009186:	bd30      	pop	{r4, r5, pc}
 8009188:	220c      	movs	r2, #12
 800918a:	6002      	str	r2, [r0, #0]
 800918c:	2500      	movs	r5, #0
 800918e:	e7f8      	b.n	8009182 <_calloc_r+0x16>
 8009190:	4621      	mov	r1, r4
 8009192:	f7fd fb73 	bl	800687c <memset>
 8009196:	e7f4      	b.n	8009182 <_calloc_r+0x16>

08009198 <__ssputs_r>:
 8009198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800919c:	688e      	ldr	r6, [r1, #8]
 800919e:	429e      	cmp	r6, r3
 80091a0:	4682      	mov	sl, r0
 80091a2:	460c      	mov	r4, r1
 80091a4:	4690      	mov	r8, r2
 80091a6:	461f      	mov	r7, r3
 80091a8:	d838      	bhi.n	800921c <__ssputs_r+0x84>
 80091aa:	898a      	ldrh	r2, [r1, #12]
 80091ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091b0:	d032      	beq.n	8009218 <__ssputs_r+0x80>
 80091b2:	6825      	ldr	r5, [r4, #0]
 80091b4:	6909      	ldr	r1, [r1, #16]
 80091b6:	eba5 0901 	sub.w	r9, r5, r1
 80091ba:	6965      	ldr	r5, [r4, #20]
 80091bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091c4:	3301      	adds	r3, #1
 80091c6:	444b      	add	r3, r9
 80091c8:	106d      	asrs	r5, r5, #1
 80091ca:	429d      	cmp	r5, r3
 80091cc:	bf38      	it	cc
 80091ce:	461d      	movcc	r5, r3
 80091d0:	0553      	lsls	r3, r2, #21
 80091d2:	d531      	bpl.n	8009238 <__ssputs_r+0xa0>
 80091d4:	4629      	mov	r1, r5
 80091d6:	f7fd fbc5 	bl	8006964 <_malloc_r>
 80091da:	4606      	mov	r6, r0
 80091dc:	b950      	cbnz	r0, 80091f4 <__ssputs_r+0x5c>
 80091de:	230c      	movs	r3, #12
 80091e0:	f8ca 3000 	str.w	r3, [sl]
 80091e4:	89a3      	ldrh	r3, [r4, #12]
 80091e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ea:	81a3      	strh	r3, [r4, #12]
 80091ec:	f04f 30ff 	mov.w	r0, #4294967295
 80091f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f4:	6921      	ldr	r1, [r4, #16]
 80091f6:	464a      	mov	r2, r9
 80091f8:	f7ff fc19 	bl	8008a2e <memcpy>
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009206:	81a3      	strh	r3, [r4, #12]
 8009208:	6126      	str	r6, [r4, #16]
 800920a:	6165      	str	r5, [r4, #20]
 800920c:	444e      	add	r6, r9
 800920e:	eba5 0509 	sub.w	r5, r5, r9
 8009212:	6026      	str	r6, [r4, #0]
 8009214:	60a5      	str	r5, [r4, #8]
 8009216:	463e      	mov	r6, r7
 8009218:	42be      	cmp	r6, r7
 800921a:	d900      	bls.n	800921e <__ssputs_r+0x86>
 800921c:	463e      	mov	r6, r7
 800921e:	6820      	ldr	r0, [r4, #0]
 8009220:	4632      	mov	r2, r6
 8009222:	4641      	mov	r1, r8
 8009224:	f000 f9bc 	bl	80095a0 <memmove>
 8009228:	68a3      	ldr	r3, [r4, #8]
 800922a:	1b9b      	subs	r3, r3, r6
 800922c:	60a3      	str	r3, [r4, #8]
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	4433      	add	r3, r6
 8009232:	6023      	str	r3, [r4, #0]
 8009234:	2000      	movs	r0, #0
 8009236:	e7db      	b.n	80091f0 <__ssputs_r+0x58>
 8009238:	462a      	mov	r2, r5
 800923a:	f000 f9cb 	bl	80095d4 <_realloc_r>
 800923e:	4606      	mov	r6, r0
 8009240:	2800      	cmp	r0, #0
 8009242:	d1e1      	bne.n	8009208 <__ssputs_r+0x70>
 8009244:	6921      	ldr	r1, [r4, #16]
 8009246:	4650      	mov	r0, sl
 8009248:	f7fd fb20 	bl	800688c <_free_r>
 800924c:	e7c7      	b.n	80091de <__ssputs_r+0x46>
	...

08009250 <_svfiprintf_r>:
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	4698      	mov	r8, r3
 8009256:	898b      	ldrh	r3, [r1, #12]
 8009258:	061b      	lsls	r3, r3, #24
 800925a:	b09d      	sub	sp, #116	; 0x74
 800925c:	4607      	mov	r7, r0
 800925e:	460d      	mov	r5, r1
 8009260:	4614      	mov	r4, r2
 8009262:	d50e      	bpl.n	8009282 <_svfiprintf_r+0x32>
 8009264:	690b      	ldr	r3, [r1, #16]
 8009266:	b963      	cbnz	r3, 8009282 <_svfiprintf_r+0x32>
 8009268:	2140      	movs	r1, #64	; 0x40
 800926a:	f7fd fb7b 	bl	8006964 <_malloc_r>
 800926e:	6028      	str	r0, [r5, #0]
 8009270:	6128      	str	r0, [r5, #16]
 8009272:	b920      	cbnz	r0, 800927e <_svfiprintf_r+0x2e>
 8009274:	230c      	movs	r3, #12
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	f04f 30ff 	mov.w	r0, #4294967295
 800927c:	e0d1      	b.n	8009422 <_svfiprintf_r+0x1d2>
 800927e:	2340      	movs	r3, #64	; 0x40
 8009280:	616b      	str	r3, [r5, #20]
 8009282:	2300      	movs	r3, #0
 8009284:	9309      	str	r3, [sp, #36]	; 0x24
 8009286:	2320      	movs	r3, #32
 8009288:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800928c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009290:	2330      	movs	r3, #48	; 0x30
 8009292:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800943c <_svfiprintf_r+0x1ec>
 8009296:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800929a:	f04f 0901 	mov.w	r9, #1
 800929e:	4623      	mov	r3, r4
 80092a0:	469a      	mov	sl, r3
 80092a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092a6:	b10a      	cbz	r2, 80092ac <_svfiprintf_r+0x5c>
 80092a8:	2a25      	cmp	r2, #37	; 0x25
 80092aa:	d1f9      	bne.n	80092a0 <_svfiprintf_r+0x50>
 80092ac:	ebba 0b04 	subs.w	fp, sl, r4
 80092b0:	d00b      	beq.n	80092ca <_svfiprintf_r+0x7a>
 80092b2:	465b      	mov	r3, fp
 80092b4:	4622      	mov	r2, r4
 80092b6:	4629      	mov	r1, r5
 80092b8:	4638      	mov	r0, r7
 80092ba:	f7ff ff6d 	bl	8009198 <__ssputs_r>
 80092be:	3001      	adds	r0, #1
 80092c0:	f000 80aa 	beq.w	8009418 <_svfiprintf_r+0x1c8>
 80092c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092c6:	445a      	add	r2, fp
 80092c8:	9209      	str	r2, [sp, #36]	; 0x24
 80092ca:	f89a 3000 	ldrb.w	r3, [sl]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 80a2 	beq.w	8009418 <_svfiprintf_r+0x1c8>
 80092d4:	2300      	movs	r3, #0
 80092d6:	f04f 32ff 	mov.w	r2, #4294967295
 80092da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092de:	f10a 0a01 	add.w	sl, sl, #1
 80092e2:	9304      	str	r3, [sp, #16]
 80092e4:	9307      	str	r3, [sp, #28]
 80092e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092ea:	931a      	str	r3, [sp, #104]	; 0x68
 80092ec:	4654      	mov	r4, sl
 80092ee:	2205      	movs	r2, #5
 80092f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f4:	4851      	ldr	r0, [pc, #324]	; (800943c <_svfiprintf_r+0x1ec>)
 80092f6:	f7f6 ff73 	bl	80001e0 <memchr>
 80092fa:	9a04      	ldr	r2, [sp, #16]
 80092fc:	b9d8      	cbnz	r0, 8009336 <_svfiprintf_r+0xe6>
 80092fe:	06d0      	lsls	r0, r2, #27
 8009300:	bf44      	itt	mi
 8009302:	2320      	movmi	r3, #32
 8009304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009308:	0711      	lsls	r1, r2, #28
 800930a:	bf44      	itt	mi
 800930c:	232b      	movmi	r3, #43	; 0x2b
 800930e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009312:	f89a 3000 	ldrb.w	r3, [sl]
 8009316:	2b2a      	cmp	r3, #42	; 0x2a
 8009318:	d015      	beq.n	8009346 <_svfiprintf_r+0xf6>
 800931a:	9a07      	ldr	r2, [sp, #28]
 800931c:	4654      	mov	r4, sl
 800931e:	2000      	movs	r0, #0
 8009320:	f04f 0c0a 	mov.w	ip, #10
 8009324:	4621      	mov	r1, r4
 8009326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800932a:	3b30      	subs	r3, #48	; 0x30
 800932c:	2b09      	cmp	r3, #9
 800932e:	d94e      	bls.n	80093ce <_svfiprintf_r+0x17e>
 8009330:	b1b0      	cbz	r0, 8009360 <_svfiprintf_r+0x110>
 8009332:	9207      	str	r2, [sp, #28]
 8009334:	e014      	b.n	8009360 <_svfiprintf_r+0x110>
 8009336:	eba0 0308 	sub.w	r3, r0, r8
 800933a:	fa09 f303 	lsl.w	r3, r9, r3
 800933e:	4313      	orrs	r3, r2
 8009340:	9304      	str	r3, [sp, #16]
 8009342:	46a2      	mov	sl, r4
 8009344:	e7d2      	b.n	80092ec <_svfiprintf_r+0x9c>
 8009346:	9b03      	ldr	r3, [sp, #12]
 8009348:	1d19      	adds	r1, r3, #4
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	9103      	str	r1, [sp, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	bfbb      	ittet	lt
 8009352:	425b      	neglt	r3, r3
 8009354:	f042 0202 	orrlt.w	r2, r2, #2
 8009358:	9307      	strge	r3, [sp, #28]
 800935a:	9307      	strlt	r3, [sp, #28]
 800935c:	bfb8      	it	lt
 800935e:	9204      	strlt	r2, [sp, #16]
 8009360:	7823      	ldrb	r3, [r4, #0]
 8009362:	2b2e      	cmp	r3, #46	; 0x2e
 8009364:	d10c      	bne.n	8009380 <_svfiprintf_r+0x130>
 8009366:	7863      	ldrb	r3, [r4, #1]
 8009368:	2b2a      	cmp	r3, #42	; 0x2a
 800936a:	d135      	bne.n	80093d8 <_svfiprintf_r+0x188>
 800936c:	9b03      	ldr	r3, [sp, #12]
 800936e:	1d1a      	adds	r2, r3, #4
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	9203      	str	r2, [sp, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	bfb8      	it	lt
 8009378:	f04f 33ff 	movlt.w	r3, #4294967295
 800937c:	3402      	adds	r4, #2
 800937e:	9305      	str	r3, [sp, #20]
 8009380:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800944c <_svfiprintf_r+0x1fc>
 8009384:	7821      	ldrb	r1, [r4, #0]
 8009386:	2203      	movs	r2, #3
 8009388:	4650      	mov	r0, sl
 800938a:	f7f6 ff29 	bl	80001e0 <memchr>
 800938e:	b140      	cbz	r0, 80093a2 <_svfiprintf_r+0x152>
 8009390:	2340      	movs	r3, #64	; 0x40
 8009392:	eba0 000a 	sub.w	r0, r0, sl
 8009396:	fa03 f000 	lsl.w	r0, r3, r0
 800939a:	9b04      	ldr	r3, [sp, #16]
 800939c:	4303      	orrs	r3, r0
 800939e:	3401      	adds	r4, #1
 80093a0:	9304      	str	r3, [sp, #16]
 80093a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a6:	4826      	ldr	r0, [pc, #152]	; (8009440 <_svfiprintf_r+0x1f0>)
 80093a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093ac:	2206      	movs	r2, #6
 80093ae:	f7f6 ff17 	bl	80001e0 <memchr>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d038      	beq.n	8009428 <_svfiprintf_r+0x1d8>
 80093b6:	4b23      	ldr	r3, [pc, #140]	; (8009444 <_svfiprintf_r+0x1f4>)
 80093b8:	bb1b      	cbnz	r3, 8009402 <_svfiprintf_r+0x1b2>
 80093ba:	9b03      	ldr	r3, [sp, #12]
 80093bc:	3307      	adds	r3, #7
 80093be:	f023 0307 	bic.w	r3, r3, #7
 80093c2:	3308      	adds	r3, #8
 80093c4:	9303      	str	r3, [sp, #12]
 80093c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c8:	4433      	add	r3, r6
 80093ca:	9309      	str	r3, [sp, #36]	; 0x24
 80093cc:	e767      	b.n	800929e <_svfiprintf_r+0x4e>
 80093ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80093d2:	460c      	mov	r4, r1
 80093d4:	2001      	movs	r0, #1
 80093d6:	e7a5      	b.n	8009324 <_svfiprintf_r+0xd4>
 80093d8:	2300      	movs	r3, #0
 80093da:	3401      	adds	r4, #1
 80093dc:	9305      	str	r3, [sp, #20]
 80093de:	4619      	mov	r1, r3
 80093e0:	f04f 0c0a 	mov.w	ip, #10
 80093e4:	4620      	mov	r0, r4
 80093e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ea:	3a30      	subs	r2, #48	; 0x30
 80093ec:	2a09      	cmp	r2, #9
 80093ee:	d903      	bls.n	80093f8 <_svfiprintf_r+0x1a8>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d0c5      	beq.n	8009380 <_svfiprintf_r+0x130>
 80093f4:	9105      	str	r1, [sp, #20]
 80093f6:	e7c3      	b.n	8009380 <_svfiprintf_r+0x130>
 80093f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80093fc:	4604      	mov	r4, r0
 80093fe:	2301      	movs	r3, #1
 8009400:	e7f0      	b.n	80093e4 <_svfiprintf_r+0x194>
 8009402:	ab03      	add	r3, sp, #12
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	462a      	mov	r2, r5
 8009408:	4b0f      	ldr	r3, [pc, #60]	; (8009448 <_svfiprintf_r+0x1f8>)
 800940a:	a904      	add	r1, sp, #16
 800940c:	4638      	mov	r0, r7
 800940e:	f7fd fbbd 	bl	8006b8c <_printf_float>
 8009412:	1c42      	adds	r2, r0, #1
 8009414:	4606      	mov	r6, r0
 8009416:	d1d6      	bne.n	80093c6 <_svfiprintf_r+0x176>
 8009418:	89ab      	ldrh	r3, [r5, #12]
 800941a:	065b      	lsls	r3, r3, #25
 800941c:	f53f af2c 	bmi.w	8009278 <_svfiprintf_r+0x28>
 8009420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009422:	b01d      	add	sp, #116	; 0x74
 8009424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009428:	ab03      	add	r3, sp, #12
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	462a      	mov	r2, r5
 800942e:	4b06      	ldr	r3, [pc, #24]	; (8009448 <_svfiprintf_r+0x1f8>)
 8009430:	a904      	add	r1, sp, #16
 8009432:	4638      	mov	r0, r7
 8009434:	f7fd fe4e 	bl	80070d4 <_printf_i>
 8009438:	e7eb      	b.n	8009412 <_svfiprintf_r+0x1c2>
 800943a:	bf00      	nop
 800943c:	0800a58c 	.word	0x0800a58c
 8009440:	0800a596 	.word	0x0800a596
 8009444:	08006b8d 	.word	0x08006b8d
 8009448:	08009199 	.word	0x08009199
 800944c:	0800a592 	.word	0x0800a592

08009450 <__sread>:
 8009450:	b510      	push	{r4, lr}
 8009452:	460c      	mov	r4, r1
 8009454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009458:	f000 fa44 	bl	80098e4 <_read_r>
 800945c:	2800      	cmp	r0, #0
 800945e:	bfab      	itete	ge
 8009460:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009462:	89a3      	ldrhlt	r3, [r4, #12]
 8009464:	181b      	addge	r3, r3, r0
 8009466:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800946a:	bfac      	ite	ge
 800946c:	6563      	strge	r3, [r4, #84]	; 0x54
 800946e:	81a3      	strhlt	r3, [r4, #12]
 8009470:	bd10      	pop	{r4, pc}

08009472 <__swrite>:
 8009472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009476:	461f      	mov	r7, r3
 8009478:	898b      	ldrh	r3, [r1, #12]
 800947a:	05db      	lsls	r3, r3, #23
 800947c:	4605      	mov	r5, r0
 800947e:	460c      	mov	r4, r1
 8009480:	4616      	mov	r6, r2
 8009482:	d505      	bpl.n	8009490 <__swrite+0x1e>
 8009484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009488:	2302      	movs	r3, #2
 800948a:	2200      	movs	r2, #0
 800948c:	f000 f864 	bl	8009558 <_lseek_r>
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800949a:	81a3      	strh	r3, [r4, #12]
 800949c:	4632      	mov	r2, r6
 800949e:	463b      	mov	r3, r7
 80094a0:	4628      	mov	r0, r5
 80094a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094a6:	f7fe ba39 	b.w	800791c <_write_r>

080094aa <__sseek>:
 80094aa:	b510      	push	{r4, lr}
 80094ac:	460c      	mov	r4, r1
 80094ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b2:	f000 f851 	bl	8009558 <_lseek_r>
 80094b6:	1c43      	adds	r3, r0, #1
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	bf15      	itete	ne
 80094bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80094be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094c6:	81a3      	strheq	r3, [r4, #12]
 80094c8:	bf18      	it	ne
 80094ca:	81a3      	strhne	r3, [r4, #12]
 80094cc:	bd10      	pop	{r4, pc}

080094ce <__sclose>:
 80094ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d2:	f000 b81f 	b.w	8009514 <_close_r>
	...

080094d8 <__assert_func>:
 80094d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094da:	4614      	mov	r4, r2
 80094dc:	461a      	mov	r2, r3
 80094de:	4b09      	ldr	r3, [pc, #36]	; (8009504 <__assert_func+0x2c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4605      	mov	r5, r0
 80094e4:	68d8      	ldr	r0, [r3, #12]
 80094e6:	b14c      	cbz	r4, 80094fc <__assert_func+0x24>
 80094e8:	4b07      	ldr	r3, [pc, #28]	; (8009508 <__assert_func+0x30>)
 80094ea:	9100      	str	r1, [sp, #0]
 80094ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094f0:	4906      	ldr	r1, [pc, #24]	; (800950c <__assert_func+0x34>)
 80094f2:	462b      	mov	r3, r5
 80094f4:	f000 f81e 	bl	8009534 <fiprintf>
 80094f8:	f7fd f986 	bl	8006808 <abort>
 80094fc:	4b04      	ldr	r3, [pc, #16]	; (8009510 <__assert_func+0x38>)
 80094fe:	461c      	mov	r4, r3
 8009500:	e7f3      	b.n	80094ea <__assert_func+0x12>
 8009502:	bf00      	nop
 8009504:	2000003c 	.word	0x2000003c
 8009508:	0800a59d 	.word	0x0800a59d
 800950c:	0800a5aa 	.word	0x0800a5aa
 8009510:	0800a5d8 	.word	0x0800a5d8

08009514 <_close_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4d06      	ldr	r5, [pc, #24]	; (8009530 <_close_r+0x1c>)
 8009518:	2300      	movs	r3, #0
 800951a:	4604      	mov	r4, r0
 800951c:	4608      	mov	r0, r1
 800951e:	602b      	str	r3, [r5, #0]
 8009520:	f7f8 f9eb 	bl	80018fa <_close>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	d102      	bne.n	800952e <_close_r+0x1a>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	b103      	cbz	r3, 800952e <_close_r+0x1a>
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	bd38      	pop	{r3, r4, r5, pc}
 8009530:	20000630 	.word	0x20000630

08009534 <fiprintf>:
 8009534:	b40e      	push	{r1, r2, r3}
 8009536:	b503      	push	{r0, r1, lr}
 8009538:	4601      	mov	r1, r0
 800953a:	ab03      	add	r3, sp, #12
 800953c:	4805      	ldr	r0, [pc, #20]	; (8009554 <fiprintf+0x20>)
 800953e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009542:	6800      	ldr	r0, [r0, #0]
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	f000 f89d 	bl	8009684 <_vfiprintf_r>
 800954a:	b002      	add	sp, #8
 800954c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009550:	b003      	add	sp, #12
 8009552:	4770      	bx	lr
 8009554:	2000003c 	.word	0x2000003c

08009558 <_lseek_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d07      	ldr	r5, [pc, #28]	; (8009578 <_lseek_r+0x20>)
 800955c:	4604      	mov	r4, r0
 800955e:	4608      	mov	r0, r1
 8009560:	4611      	mov	r1, r2
 8009562:	2200      	movs	r2, #0
 8009564:	602a      	str	r2, [r5, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	f7f8 f9ee 	bl	8001948 <_lseek>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_lseek_r+0x1e>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_lseek_r+0x1e>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	20000630 	.word	0x20000630

0800957c <__ascii_mbtowc>:
 800957c:	b082      	sub	sp, #8
 800957e:	b901      	cbnz	r1, 8009582 <__ascii_mbtowc+0x6>
 8009580:	a901      	add	r1, sp, #4
 8009582:	b142      	cbz	r2, 8009596 <__ascii_mbtowc+0x1a>
 8009584:	b14b      	cbz	r3, 800959a <__ascii_mbtowc+0x1e>
 8009586:	7813      	ldrb	r3, [r2, #0]
 8009588:	600b      	str	r3, [r1, #0]
 800958a:	7812      	ldrb	r2, [r2, #0]
 800958c:	1e10      	subs	r0, r2, #0
 800958e:	bf18      	it	ne
 8009590:	2001      	movne	r0, #1
 8009592:	b002      	add	sp, #8
 8009594:	4770      	bx	lr
 8009596:	4610      	mov	r0, r2
 8009598:	e7fb      	b.n	8009592 <__ascii_mbtowc+0x16>
 800959a:	f06f 0001 	mvn.w	r0, #1
 800959e:	e7f8      	b.n	8009592 <__ascii_mbtowc+0x16>

080095a0 <memmove>:
 80095a0:	4288      	cmp	r0, r1
 80095a2:	b510      	push	{r4, lr}
 80095a4:	eb01 0402 	add.w	r4, r1, r2
 80095a8:	d902      	bls.n	80095b0 <memmove+0x10>
 80095aa:	4284      	cmp	r4, r0
 80095ac:	4623      	mov	r3, r4
 80095ae:	d807      	bhi.n	80095c0 <memmove+0x20>
 80095b0:	1e43      	subs	r3, r0, #1
 80095b2:	42a1      	cmp	r1, r4
 80095b4:	d008      	beq.n	80095c8 <memmove+0x28>
 80095b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095be:	e7f8      	b.n	80095b2 <memmove+0x12>
 80095c0:	4402      	add	r2, r0
 80095c2:	4601      	mov	r1, r0
 80095c4:	428a      	cmp	r2, r1
 80095c6:	d100      	bne.n	80095ca <memmove+0x2a>
 80095c8:	bd10      	pop	{r4, pc}
 80095ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095d2:	e7f7      	b.n	80095c4 <memmove+0x24>

080095d4 <_realloc_r>:
 80095d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d8:	4680      	mov	r8, r0
 80095da:	4614      	mov	r4, r2
 80095dc:	460e      	mov	r6, r1
 80095de:	b921      	cbnz	r1, 80095ea <_realloc_r+0x16>
 80095e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095e4:	4611      	mov	r1, r2
 80095e6:	f7fd b9bd 	b.w	8006964 <_malloc_r>
 80095ea:	b92a      	cbnz	r2, 80095f8 <_realloc_r+0x24>
 80095ec:	f7fd f94e 	bl	800688c <_free_r>
 80095f0:	4625      	mov	r5, r4
 80095f2:	4628      	mov	r0, r5
 80095f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f8:	f000 faba 	bl	8009b70 <_malloc_usable_size_r>
 80095fc:	4284      	cmp	r4, r0
 80095fe:	4607      	mov	r7, r0
 8009600:	d802      	bhi.n	8009608 <_realloc_r+0x34>
 8009602:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009606:	d812      	bhi.n	800962e <_realloc_r+0x5a>
 8009608:	4621      	mov	r1, r4
 800960a:	4640      	mov	r0, r8
 800960c:	f7fd f9aa 	bl	8006964 <_malloc_r>
 8009610:	4605      	mov	r5, r0
 8009612:	2800      	cmp	r0, #0
 8009614:	d0ed      	beq.n	80095f2 <_realloc_r+0x1e>
 8009616:	42bc      	cmp	r4, r7
 8009618:	4622      	mov	r2, r4
 800961a:	4631      	mov	r1, r6
 800961c:	bf28      	it	cs
 800961e:	463a      	movcs	r2, r7
 8009620:	f7ff fa05 	bl	8008a2e <memcpy>
 8009624:	4631      	mov	r1, r6
 8009626:	4640      	mov	r0, r8
 8009628:	f7fd f930 	bl	800688c <_free_r>
 800962c:	e7e1      	b.n	80095f2 <_realloc_r+0x1e>
 800962e:	4635      	mov	r5, r6
 8009630:	e7df      	b.n	80095f2 <_realloc_r+0x1e>

08009632 <__sfputc_r>:
 8009632:	6893      	ldr	r3, [r2, #8]
 8009634:	3b01      	subs	r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	b410      	push	{r4}
 800963a:	6093      	str	r3, [r2, #8]
 800963c:	da08      	bge.n	8009650 <__sfputc_r+0x1e>
 800963e:	6994      	ldr	r4, [r2, #24]
 8009640:	42a3      	cmp	r3, r4
 8009642:	db01      	blt.n	8009648 <__sfputc_r+0x16>
 8009644:	290a      	cmp	r1, #10
 8009646:	d103      	bne.n	8009650 <__sfputc_r+0x1e>
 8009648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800964c:	f000 b95c 	b.w	8009908 <__swbuf_r>
 8009650:	6813      	ldr	r3, [r2, #0]
 8009652:	1c58      	adds	r0, r3, #1
 8009654:	6010      	str	r0, [r2, #0]
 8009656:	7019      	strb	r1, [r3, #0]
 8009658:	4608      	mov	r0, r1
 800965a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800965e:	4770      	bx	lr

08009660 <__sfputs_r>:
 8009660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009662:	4606      	mov	r6, r0
 8009664:	460f      	mov	r7, r1
 8009666:	4614      	mov	r4, r2
 8009668:	18d5      	adds	r5, r2, r3
 800966a:	42ac      	cmp	r4, r5
 800966c:	d101      	bne.n	8009672 <__sfputs_r+0x12>
 800966e:	2000      	movs	r0, #0
 8009670:	e007      	b.n	8009682 <__sfputs_r+0x22>
 8009672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009676:	463a      	mov	r2, r7
 8009678:	4630      	mov	r0, r6
 800967a:	f7ff ffda 	bl	8009632 <__sfputc_r>
 800967e:	1c43      	adds	r3, r0, #1
 8009680:	d1f3      	bne.n	800966a <__sfputs_r+0xa>
 8009682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009684 <_vfiprintf_r>:
 8009684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009688:	460d      	mov	r5, r1
 800968a:	b09d      	sub	sp, #116	; 0x74
 800968c:	4614      	mov	r4, r2
 800968e:	4698      	mov	r8, r3
 8009690:	4606      	mov	r6, r0
 8009692:	b118      	cbz	r0, 800969c <_vfiprintf_r+0x18>
 8009694:	6983      	ldr	r3, [r0, #24]
 8009696:	b90b      	cbnz	r3, 800969c <_vfiprintf_r+0x18>
 8009698:	f7ff f924 	bl	80088e4 <__sinit>
 800969c:	4b89      	ldr	r3, [pc, #548]	; (80098c4 <_vfiprintf_r+0x240>)
 800969e:	429d      	cmp	r5, r3
 80096a0:	d11b      	bne.n	80096da <_vfiprintf_r+0x56>
 80096a2:	6875      	ldr	r5, [r6, #4]
 80096a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096a6:	07d9      	lsls	r1, r3, #31
 80096a8:	d405      	bmi.n	80096b6 <_vfiprintf_r+0x32>
 80096aa:	89ab      	ldrh	r3, [r5, #12]
 80096ac:	059a      	lsls	r2, r3, #22
 80096ae:	d402      	bmi.n	80096b6 <_vfiprintf_r+0x32>
 80096b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096b2:	f7ff f9ba 	bl	8008a2a <__retarget_lock_acquire_recursive>
 80096b6:	89ab      	ldrh	r3, [r5, #12]
 80096b8:	071b      	lsls	r3, r3, #28
 80096ba:	d501      	bpl.n	80096c0 <_vfiprintf_r+0x3c>
 80096bc:	692b      	ldr	r3, [r5, #16]
 80096be:	b9eb      	cbnz	r3, 80096fc <_vfiprintf_r+0x78>
 80096c0:	4629      	mov	r1, r5
 80096c2:	4630      	mov	r0, r6
 80096c4:	f000 f980 	bl	80099c8 <__swsetup_r>
 80096c8:	b1c0      	cbz	r0, 80096fc <_vfiprintf_r+0x78>
 80096ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096cc:	07dc      	lsls	r4, r3, #31
 80096ce:	d50e      	bpl.n	80096ee <_vfiprintf_r+0x6a>
 80096d0:	f04f 30ff 	mov.w	r0, #4294967295
 80096d4:	b01d      	add	sp, #116	; 0x74
 80096d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096da:	4b7b      	ldr	r3, [pc, #492]	; (80098c8 <_vfiprintf_r+0x244>)
 80096dc:	429d      	cmp	r5, r3
 80096de:	d101      	bne.n	80096e4 <_vfiprintf_r+0x60>
 80096e0:	68b5      	ldr	r5, [r6, #8]
 80096e2:	e7df      	b.n	80096a4 <_vfiprintf_r+0x20>
 80096e4:	4b79      	ldr	r3, [pc, #484]	; (80098cc <_vfiprintf_r+0x248>)
 80096e6:	429d      	cmp	r5, r3
 80096e8:	bf08      	it	eq
 80096ea:	68f5      	ldreq	r5, [r6, #12]
 80096ec:	e7da      	b.n	80096a4 <_vfiprintf_r+0x20>
 80096ee:	89ab      	ldrh	r3, [r5, #12]
 80096f0:	0598      	lsls	r0, r3, #22
 80096f2:	d4ed      	bmi.n	80096d0 <_vfiprintf_r+0x4c>
 80096f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096f6:	f7ff f999 	bl	8008a2c <__retarget_lock_release_recursive>
 80096fa:	e7e9      	b.n	80096d0 <_vfiprintf_r+0x4c>
 80096fc:	2300      	movs	r3, #0
 80096fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009700:	2320      	movs	r3, #32
 8009702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009706:	f8cd 800c 	str.w	r8, [sp, #12]
 800970a:	2330      	movs	r3, #48	; 0x30
 800970c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098d0 <_vfiprintf_r+0x24c>
 8009710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009714:	f04f 0901 	mov.w	r9, #1
 8009718:	4623      	mov	r3, r4
 800971a:	469a      	mov	sl, r3
 800971c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009720:	b10a      	cbz	r2, 8009726 <_vfiprintf_r+0xa2>
 8009722:	2a25      	cmp	r2, #37	; 0x25
 8009724:	d1f9      	bne.n	800971a <_vfiprintf_r+0x96>
 8009726:	ebba 0b04 	subs.w	fp, sl, r4
 800972a:	d00b      	beq.n	8009744 <_vfiprintf_r+0xc0>
 800972c:	465b      	mov	r3, fp
 800972e:	4622      	mov	r2, r4
 8009730:	4629      	mov	r1, r5
 8009732:	4630      	mov	r0, r6
 8009734:	f7ff ff94 	bl	8009660 <__sfputs_r>
 8009738:	3001      	adds	r0, #1
 800973a:	f000 80aa 	beq.w	8009892 <_vfiprintf_r+0x20e>
 800973e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009740:	445a      	add	r2, fp
 8009742:	9209      	str	r2, [sp, #36]	; 0x24
 8009744:	f89a 3000 	ldrb.w	r3, [sl]
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 80a2 	beq.w	8009892 <_vfiprintf_r+0x20e>
 800974e:	2300      	movs	r3, #0
 8009750:	f04f 32ff 	mov.w	r2, #4294967295
 8009754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009758:	f10a 0a01 	add.w	sl, sl, #1
 800975c:	9304      	str	r3, [sp, #16]
 800975e:	9307      	str	r3, [sp, #28]
 8009760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009764:	931a      	str	r3, [sp, #104]	; 0x68
 8009766:	4654      	mov	r4, sl
 8009768:	2205      	movs	r2, #5
 800976a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800976e:	4858      	ldr	r0, [pc, #352]	; (80098d0 <_vfiprintf_r+0x24c>)
 8009770:	f7f6 fd36 	bl	80001e0 <memchr>
 8009774:	9a04      	ldr	r2, [sp, #16]
 8009776:	b9d8      	cbnz	r0, 80097b0 <_vfiprintf_r+0x12c>
 8009778:	06d1      	lsls	r1, r2, #27
 800977a:	bf44      	itt	mi
 800977c:	2320      	movmi	r3, #32
 800977e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009782:	0713      	lsls	r3, r2, #28
 8009784:	bf44      	itt	mi
 8009786:	232b      	movmi	r3, #43	; 0x2b
 8009788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800978c:	f89a 3000 	ldrb.w	r3, [sl]
 8009790:	2b2a      	cmp	r3, #42	; 0x2a
 8009792:	d015      	beq.n	80097c0 <_vfiprintf_r+0x13c>
 8009794:	9a07      	ldr	r2, [sp, #28]
 8009796:	4654      	mov	r4, sl
 8009798:	2000      	movs	r0, #0
 800979a:	f04f 0c0a 	mov.w	ip, #10
 800979e:	4621      	mov	r1, r4
 80097a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097a4:	3b30      	subs	r3, #48	; 0x30
 80097a6:	2b09      	cmp	r3, #9
 80097a8:	d94e      	bls.n	8009848 <_vfiprintf_r+0x1c4>
 80097aa:	b1b0      	cbz	r0, 80097da <_vfiprintf_r+0x156>
 80097ac:	9207      	str	r2, [sp, #28]
 80097ae:	e014      	b.n	80097da <_vfiprintf_r+0x156>
 80097b0:	eba0 0308 	sub.w	r3, r0, r8
 80097b4:	fa09 f303 	lsl.w	r3, r9, r3
 80097b8:	4313      	orrs	r3, r2
 80097ba:	9304      	str	r3, [sp, #16]
 80097bc:	46a2      	mov	sl, r4
 80097be:	e7d2      	b.n	8009766 <_vfiprintf_r+0xe2>
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	1d19      	adds	r1, r3, #4
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	9103      	str	r1, [sp, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	bfbb      	ittet	lt
 80097cc:	425b      	neglt	r3, r3
 80097ce:	f042 0202 	orrlt.w	r2, r2, #2
 80097d2:	9307      	strge	r3, [sp, #28]
 80097d4:	9307      	strlt	r3, [sp, #28]
 80097d6:	bfb8      	it	lt
 80097d8:	9204      	strlt	r2, [sp, #16]
 80097da:	7823      	ldrb	r3, [r4, #0]
 80097dc:	2b2e      	cmp	r3, #46	; 0x2e
 80097de:	d10c      	bne.n	80097fa <_vfiprintf_r+0x176>
 80097e0:	7863      	ldrb	r3, [r4, #1]
 80097e2:	2b2a      	cmp	r3, #42	; 0x2a
 80097e4:	d135      	bne.n	8009852 <_vfiprintf_r+0x1ce>
 80097e6:	9b03      	ldr	r3, [sp, #12]
 80097e8:	1d1a      	adds	r2, r3, #4
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	9203      	str	r2, [sp, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	bfb8      	it	lt
 80097f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80097f6:	3402      	adds	r4, #2
 80097f8:	9305      	str	r3, [sp, #20]
 80097fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098e0 <_vfiprintf_r+0x25c>
 80097fe:	7821      	ldrb	r1, [r4, #0]
 8009800:	2203      	movs	r2, #3
 8009802:	4650      	mov	r0, sl
 8009804:	f7f6 fcec 	bl	80001e0 <memchr>
 8009808:	b140      	cbz	r0, 800981c <_vfiprintf_r+0x198>
 800980a:	2340      	movs	r3, #64	; 0x40
 800980c:	eba0 000a 	sub.w	r0, r0, sl
 8009810:	fa03 f000 	lsl.w	r0, r3, r0
 8009814:	9b04      	ldr	r3, [sp, #16]
 8009816:	4303      	orrs	r3, r0
 8009818:	3401      	adds	r4, #1
 800981a:	9304      	str	r3, [sp, #16]
 800981c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009820:	482c      	ldr	r0, [pc, #176]	; (80098d4 <_vfiprintf_r+0x250>)
 8009822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009826:	2206      	movs	r2, #6
 8009828:	f7f6 fcda 	bl	80001e0 <memchr>
 800982c:	2800      	cmp	r0, #0
 800982e:	d03f      	beq.n	80098b0 <_vfiprintf_r+0x22c>
 8009830:	4b29      	ldr	r3, [pc, #164]	; (80098d8 <_vfiprintf_r+0x254>)
 8009832:	bb1b      	cbnz	r3, 800987c <_vfiprintf_r+0x1f8>
 8009834:	9b03      	ldr	r3, [sp, #12]
 8009836:	3307      	adds	r3, #7
 8009838:	f023 0307 	bic.w	r3, r3, #7
 800983c:	3308      	adds	r3, #8
 800983e:	9303      	str	r3, [sp, #12]
 8009840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009842:	443b      	add	r3, r7
 8009844:	9309      	str	r3, [sp, #36]	; 0x24
 8009846:	e767      	b.n	8009718 <_vfiprintf_r+0x94>
 8009848:	fb0c 3202 	mla	r2, ip, r2, r3
 800984c:	460c      	mov	r4, r1
 800984e:	2001      	movs	r0, #1
 8009850:	e7a5      	b.n	800979e <_vfiprintf_r+0x11a>
 8009852:	2300      	movs	r3, #0
 8009854:	3401      	adds	r4, #1
 8009856:	9305      	str	r3, [sp, #20]
 8009858:	4619      	mov	r1, r3
 800985a:	f04f 0c0a 	mov.w	ip, #10
 800985e:	4620      	mov	r0, r4
 8009860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009864:	3a30      	subs	r2, #48	; 0x30
 8009866:	2a09      	cmp	r2, #9
 8009868:	d903      	bls.n	8009872 <_vfiprintf_r+0x1ee>
 800986a:	2b00      	cmp	r3, #0
 800986c:	d0c5      	beq.n	80097fa <_vfiprintf_r+0x176>
 800986e:	9105      	str	r1, [sp, #20]
 8009870:	e7c3      	b.n	80097fa <_vfiprintf_r+0x176>
 8009872:	fb0c 2101 	mla	r1, ip, r1, r2
 8009876:	4604      	mov	r4, r0
 8009878:	2301      	movs	r3, #1
 800987a:	e7f0      	b.n	800985e <_vfiprintf_r+0x1da>
 800987c:	ab03      	add	r3, sp, #12
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	462a      	mov	r2, r5
 8009882:	4b16      	ldr	r3, [pc, #88]	; (80098dc <_vfiprintf_r+0x258>)
 8009884:	a904      	add	r1, sp, #16
 8009886:	4630      	mov	r0, r6
 8009888:	f7fd f980 	bl	8006b8c <_printf_float>
 800988c:	4607      	mov	r7, r0
 800988e:	1c78      	adds	r0, r7, #1
 8009890:	d1d6      	bne.n	8009840 <_vfiprintf_r+0x1bc>
 8009892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009894:	07d9      	lsls	r1, r3, #31
 8009896:	d405      	bmi.n	80098a4 <_vfiprintf_r+0x220>
 8009898:	89ab      	ldrh	r3, [r5, #12]
 800989a:	059a      	lsls	r2, r3, #22
 800989c:	d402      	bmi.n	80098a4 <_vfiprintf_r+0x220>
 800989e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098a0:	f7ff f8c4 	bl	8008a2c <__retarget_lock_release_recursive>
 80098a4:	89ab      	ldrh	r3, [r5, #12]
 80098a6:	065b      	lsls	r3, r3, #25
 80098a8:	f53f af12 	bmi.w	80096d0 <_vfiprintf_r+0x4c>
 80098ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ae:	e711      	b.n	80096d4 <_vfiprintf_r+0x50>
 80098b0:	ab03      	add	r3, sp, #12
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	462a      	mov	r2, r5
 80098b6:	4b09      	ldr	r3, [pc, #36]	; (80098dc <_vfiprintf_r+0x258>)
 80098b8:	a904      	add	r1, sp, #16
 80098ba:	4630      	mov	r0, r6
 80098bc:	f7fd fc0a 	bl	80070d4 <_printf_i>
 80098c0:	e7e4      	b.n	800988c <_vfiprintf_r+0x208>
 80098c2:	bf00      	nop
 80098c4:	0800a3f0 	.word	0x0800a3f0
 80098c8:	0800a410 	.word	0x0800a410
 80098cc:	0800a3d0 	.word	0x0800a3d0
 80098d0:	0800a58c 	.word	0x0800a58c
 80098d4:	0800a596 	.word	0x0800a596
 80098d8:	08006b8d 	.word	0x08006b8d
 80098dc:	08009661 	.word	0x08009661
 80098e0:	0800a592 	.word	0x0800a592

080098e4 <_read_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4d07      	ldr	r5, [pc, #28]	; (8009904 <_read_r+0x20>)
 80098e8:	4604      	mov	r4, r0
 80098ea:	4608      	mov	r0, r1
 80098ec:	4611      	mov	r1, r2
 80098ee:	2200      	movs	r2, #0
 80098f0:	602a      	str	r2, [r5, #0]
 80098f2:	461a      	mov	r2, r3
 80098f4:	f7f7 ffc8 	bl	8001888 <_read>
 80098f8:	1c43      	adds	r3, r0, #1
 80098fa:	d102      	bne.n	8009902 <_read_r+0x1e>
 80098fc:	682b      	ldr	r3, [r5, #0]
 80098fe:	b103      	cbz	r3, 8009902 <_read_r+0x1e>
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	bd38      	pop	{r3, r4, r5, pc}
 8009904:	20000630 	.word	0x20000630

08009908 <__swbuf_r>:
 8009908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990a:	460e      	mov	r6, r1
 800990c:	4614      	mov	r4, r2
 800990e:	4605      	mov	r5, r0
 8009910:	b118      	cbz	r0, 800991a <__swbuf_r+0x12>
 8009912:	6983      	ldr	r3, [r0, #24]
 8009914:	b90b      	cbnz	r3, 800991a <__swbuf_r+0x12>
 8009916:	f7fe ffe5 	bl	80088e4 <__sinit>
 800991a:	4b21      	ldr	r3, [pc, #132]	; (80099a0 <__swbuf_r+0x98>)
 800991c:	429c      	cmp	r4, r3
 800991e:	d12b      	bne.n	8009978 <__swbuf_r+0x70>
 8009920:	686c      	ldr	r4, [r5, #4]
 8009922:	69a3      	ldr	r3, [r4, #24]
 8009924:	60a3      	str	r3, [r4, #8]
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	071a      	lsls	r2, r3, #28
 800992a:	d52f      	bpl.n	800998c <__swbuf_r+0x84>
 800992c:	6923      	ldr	r3, [r4, #16]
 800992e:	b36b      	cbz	r3, 800998c <__swbuf_r+0x84>
 8009930:	6923      	ldr	r3, [r4, #16]
 8009932:	6820      	ldr	r0, [r4, #0]
 8009934:	1ac0      	subs	r0, r0, r3
 8009936:	6963      	ldr	r3, [r4, #20]
 8009938:	b2f6      	uxtb	r6, r6
 800993a:	4283      	cmp	r3, r0
 800993c:	4637      	mov	r7, r6
 800993e:	dc04      	bgt.n	800994a <__swbuf_r+0x42>
 8009940:	4621      	mov	r1, r4
 8009942:	4628      	mov	r0, r5
 8009944:	f7fe fefc 	bl	8008740 <_fflush_r>
 8009948:	bb30      	cbnz	r0, 8009998 <__swbuf_r+0x90>
 800994a:	68a3      	ldr	r3, [r4, #8]
 800994c:	3b01      	subs	r3, #1
 800994e:	60a3      	str	r3, [r4, #8]
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	1c5a      	adds	r2, r3, #1
 8009954:	6022      	str	r2, [r4, #0]
 8009956:	701e      	strb	r6, [r3, #0]
 8009958:	6963      	ldr	r3, [r4, #20]
 800995a:	3001      	adds	r0, #1
 800995c:	4283      	cmp	r3, r0
 800995e:	d004      	beq.n	800996a <__swbuf_r+0x62>
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	07db      	lsls	r3, r3, #31
 8009964:	d506      	bpl.n	8009974 <__swbuf_r+0x6c>
 8009966:	2e0a      	cmp	r6, #10
 8009968:	d104      	bne.n	8009974 <__swbuf_r+0x6c>
 800996a:	4621      	mov	r1, r4
 800996c:	4628      	mov	r0, r5
 800996e:	f7fe fee7 	bl	8008740 <_fflush_r>
 8009972:	b988      	cbnz	r0, 8009998 <__swbuf_r+0x90>
 8009974:	4638      	mov	r0, r7
 8009976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009978:	4b0a      	ldr	r3, [pc, #40]	; (80099a4 <__swbuf_r+0x9c>)
 800997a:	429c      	cmp	r4, r3
 800997c:	d101      	bne.n	8009982 <__swbuf_r+0x7a>
 800997e:	68ac      	ldr	r4, [r5, #8]
 8009980:	e7cf      	b.n	8009922 <__swbuf_r+0x1a>
 8009982:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <__swbuf_r+0xa0>)
 8009984:	429c      	cmp	r4, r3
 8009986:	bf08      	it	eq
 8009988:	68ec      	ldreq	r4, [r5, #12]
 800998a:	e7ca      	b.n	8009922 <__swbuf_r+0x1a>
 800998c:	4621      	mov	r1, r4
 800998e:	4628      	mov	r0, r5
 8009990:	f000 f81a 	bl	80099c8 <__swsetup_r>
 8009994:	2800      	cmp	r0, #0
 8009996:	d0cb      	beq.n	8009930 <__swbuf_r+0x28>
 8009998:	f04f 37ff 	mov.w	r7, #4294967295
 800999c:	e7ea      	b.n	8009974 <__swbuf_r+0x6c>
 800999e:	bf00      	nop
 80099a0:	0800a3f0 	.word	0x0800a3f0
 80099a4:	0800a410 	.word	0x0800a410
 80099a8:	0800a3d0 	.word	0x0800a3d0

080099ac <__ascii_wctomb>:
 80099ac:	b149      	cbz	r1, 80099c2 <__ascii_wctomb+0x16>
 80099ae:	2aff      	cmp	r2, #255	; 0xff
 80099b0:	bf85      	ittet	hi
 80099b2:	238a      	movhi	r3, #138	; 0x8a
 80099b4:	6003      	strhi	r3, [r0, #0]
 80099b6:	700a      	strbls	r2, [r1, #0]
 80099b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80099bc:	bf98      	it	ls
 80099be:	2001      	movls	r0, #1
 80099c0:	4770      	bx	lr
 80099c2:	4608      	mov	r0, r1
 80099c4:	4770      	bx	lr
	...

080099c8 <__swsetup_r>:
 80099c8:	4b32      	ldr	r3, [pc, #200]	; (8009a94 <__swsetup_r+0xcc>)
 80099ca:	b570      	push	{r4, r5, r6, lr}
 80099cc:	681d      	ldr	r5, [r3, #0]
 80099ce:	4606      	mov	r6, r0
 80099d0:	460c      	mov	r4, r1
 80099d2:	b125      	cbz	r5, 80099de <__swsetup_r+0x16>
 80099d4:	69ab      	ldr	r3, [r5, #24]
 80099d6:	b913      	cbnz	r3, 80099de <__swsetup_r+0x16>
 80099d8:	4628      	mov	r0, r5
 80099da:	f7fe ff83 	bl	80088e4 <__sinit>
 80099de:	4b2e      	ldr	r3, [pc, #184]	; (8009a98 <__swsetup_r+0xd0>)
 80099e0:	429c      	cmp	r4, r3
 80099e2:	d10f      	bne.n	8009a04 <__swsetup_r+0x3c>
 80099e4:	686c      	ldr	r4, [r5, #4]
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099ec:	0719      	lsls	r1, r3, #28
 80099ee:	d42c      	bmi.n	8009a4a <__swsetup_r+0x82>
 80099f0:	06dd      	lsls	r5, r3, #27
 80099f2:	d411      	bmi.n	8009a18 <__swsetup_r+0x50>
 80099f4:	2309      	movs	r3, #9
 80099f6:	6033      	str	r3, [r6, #0]
 80099f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009a02:	e03e      	b.n	8009a82 <__swsetup_r+0xba>
 8009a04:	4b25      	ldr	r3, [pc, #148]	; (8009a9c <__swsetup_r+0xd4>)
 8009a06:	429c      	cmp	r4, r3
 8009a08:	d101      	bne.n	8009a0e <__swsetup_r+0x46>
 8009a0a:	68ac      	ldr	r4, [r5, #8]
 8009a0c:	e7eb      	b.n	80099e6 <__swsetup_r+0x1e>
 8009a0e:	4b24      	ldr	r3, [pc, #144]	; (8009aa0 <__swsetup_r+0xd8>)
 8009a10:	429c      	cmp	r4, r3
 8009a12:	bf08      	it	eq
 8009a14:	68ec      	ldreq	r4, [r5, #12]
 8009a16:	e7e6      	b.n	80099e6 <__swsetup_r+0x1e>
 8009a18:	0758      	lsls	r0, r3, #29
 8009a1a:	d512      	bpl.n	8009a42 <__swsetup_r+0x7a>
 8009a1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a1e:	b141      	cbz	r1, 8009a32 <__swsetup_r+0x6a>
 8009a20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a24:	4299      	cmp	r1, r3
 8009a26:	d002      	beq.n	8009a2e <__swsetup_r+0x66>
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f7fc ff2f 	bl	800688c <_free_r>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	6363      	str	r3, [r4, #52]	; 0x34
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a38:	81a3      	strh	r3, [r4, #12]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	6063      	str	r3, [r4, #4]
 8009a3e:	6923      	ldr	r3, [r4, #16]
 8009a40:	6023      	str	r3, [r4, #0]
 8009a42:	89a3      	ldrh	r3, [r4, #12]
 8009a44:	f043 0308 	orr.w	r3, r3, #8
 8009a48:	81a3      	strh	r3, [r4, #12]
 8009a4a:	6923      	ldr	r3, [r4, #16]
 8009a4c:	b94b      	cbnz	r3, 8009a62 <__swsetup_r+0x9a>
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a58:	d003      	beq.n	8009a62 <__swsetup_r+0x9a>
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f000 f847 	bl	8009af0 <__smakebuf_r>
 8009a62:	89a0      	ldrh	r0, [r4, #12]
 8009a64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a68:	f010 0301 	ands.w	r3, r0, #1
 8009a6c:	d00a      	beq.n	8009a84 <__swsetup_r+0xbc>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60a3      	str	r3, [r4, #8]
 8009a72:	6963      	ldr	r3, [r4, #20]
 8009a74:	425b      	negs	r3, r3
 8009a76:	61a3      	str	r3, [r4, #24]
 8009a78:	6923      	ldr	r3, [r4, #16]
 8009a7a:	b943      	cbnz	r3, 8009a8e <__swsetup_r+0xc6>
 8009a7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a80:	d1ba      	bne.n	80099f8 <__swsetup_r+0x30>
 8009a82:	bd70      	pop	{r4, r5, r6, pc}
 8009a84:	0781      	lsls	r1, r0, #30
 8009a86:	bf58      	it	pl
 8009a88:	6963      	ldrpl	r3, [r4, #20]
 8009a8a:	60a3      	str	r3, [r4, #8]
 8009a8c:	e7f4      	b.n	8009a78 <__swsetup_r+0xb0>
 8009a8e:	2000      	movs	r0, #0
 8009a90:	e7f7      	b.n	8009a82 <__swsetup_r+0xba>
 8009a92:	bf00      	nop
 8009a94:	2000003c 	.word	0x2000003c
 8009a98:	0800a3f0 	.word	0x0800a3f0
 8009a9c:	0800a410 	.word	0x0800a410
 8009aa0:	0800a3d0 	.word	0x0800a3d0

08009aa4 <__swhatbuf_r>:
 8009aa4:	b570      	push	{r4, r5, r6, lr}
 8009aa6:	460e      	mov	r6, r1
 8009aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aac:	2900      	cmp	r1, #0
 8009aae:	b096      	sub	sp, #88	; 0x58
 8009ab0:	4614      	mov	r4, r2
 8009ab2:	461d      	mov	r5, r3
 8009ab4:	da08      	bge.n	8009ac8 <__swhatbuf_r+0x24>
 8009ab6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	602a      	str	r2, [r5, #0]
 8009abe:	061a      	lsls	r2, r3, #24
 8009ac0:	d410      	bmi.n	8009ae4 <__swhatbuf_r+0x40>
 8009ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ac6:	e00e      	b.n	8009ae6 <__swhatbuf_r+0x42>
 8009ac8:	466a      	mov	r2, sp
 8009aca:	f000 f859 	bl	8009b80 <_fstat_r>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	dbf1      	blt.n	8009ab6 <__swhatbuf_r+0x12>
 8009ad2:	9a01      	ldr	r2, [sp, #4]
 8009ad4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ad8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009adc:	425a      	negs	r2, r3
 8009ade:	415a      	adcs	r2, r3
 8009ae0:	602a      	str	r2, [r5, #0]
 8009ae2:	e7ee      	b.n	8009ac2 <__swhatbuf_r+0x1e>
 8009ae4:	2340      	movs	r3, #64	; 0x40
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	b016      	add	sp, #88	; 0x58
 8009aec:	bd70      	pop	{r4, r5, r6, pc}
	...

08009af0 <__smakebuf_r>:
 8009af0:	898b      	ldrh	r3, [r1, #12]
 8009af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009af4:	079d      	lsls	r5, r3, #30
 8009af6:	4606      	mov	r6, r0
 8009af8:	460c      	mov	r4, r1
 8009afa:	d507      	bpl.n	8009b0c <__smakebuf_r+0x1c>
 8009afc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	6123      	str	r3, [r4, #16]
 8009b04:	2301      	movs	r3, #1
 8009b06:	6163      	str	r3, [r4, #20]
 8009b08:	b002      	add	sp, #8
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	ab01      	add	r3, sp, #4
 8009b0e:	466a      	mov	r2, sp
 8009b10:	f7ff ffc8 	bl	8009aa4 <__swhatbuf_r>
 8009b14:	9900      	ldr	r1, [sp, #0]
 8009b16:	4605      	mov	r5, r0
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f7fc ff23 	bl	8006964 <_malloc_r>
 8009b1e:	b948      	cbnz	r0, 8009b34 <__smakebuf_r+0x44>
 8009b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b24:	059a      	lsls	r2, r3, #22
 8009b26:	d4ef      	bmi.n	8009b08 <__smakebuf_r+0x18>
 8009b28:	f023 0303 	bic.w	r3, r3, #3
 8009b2c:	f043 0302 	orr.w	r3, r3, #2
 8009b30:	81a3      	strh	r3, [r4, #12]
 8009b32:	e7e3      	b.n	8009afc <__smakebuf_r+0xc>
 8009b34:	4b0d      	ldr	r3, [pc, #52]	; (8009b6c <__smakebuf_r+0x7c>)
 8009b36:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b38:	89a3      	ldrh	r3, [r4, #12]
 8009b3a:	6020      	str	r0, [r4, #0]
 8009b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b40:	81a3      	strh	r3, [r4, #12]
 8009b42:	9b00      	ldr	r3, [sp, #0]
 8009b44:	6163      	str	r3, [r4, #20]
 8009b46:	9b01      	ldr	r3, [sp, #4]
 8009b48:	6120      	str	r0, [r4, #16]
 8009b4a:	b15b      	cbz	r3, 8009b64 <__smakebuf_r+0x74>
 8009b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b50:	4630      	mov	r0, r6
 8009b52:	f000 f827 	bl	8009ba4 <_isatty_r>
 8009b56:	b128      	cbz	r0, 8009b64 <__smakebuf_r+0x74>
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	f023 0303 	bic.w	r3, r3, #3
 8009b5e:	f043 0301 	orr.w	r3, r3, #1
 8009b62:	81a3      	strh	r3, [r4, #12]
 8009b64:	89a0      	ldrh	r0, [r4, #12]
 8009b66:	4305      	orrs	r5, r0
 8009b68:	81a5      	strh	r5, [r4, #12]
 8009b6a:	e7cd      	b.n	8009b08 <__smakebuf_r+0x18>
 8009b6c:	0800887d 	.word	0x0800887d

08009b70 <_malloc_usable_size_r>:
 8009b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b74:	1f18      	subs	r0, r3, #4
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	bfbc      	itt	lt
 8009b7a:	580b      	ldrlt	r3, [r1, r0]
 8009b7c:	18c0      	addlt	r0, r0, r3
 8009b7e:	4770      	bx	lr

08009b80 <_fstat_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4d07      	ldr	r5, [pc, #28]	; (8009ba0 <_fstat_r+0x20>)
 8009b84:	2300      	movs	r3, #0
 8009b86:	4604      	mov	r4, r0
 8009b88:	4608      	mov	r0, r1
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	602b      	str	r3, [r5, #0]
 8009b8e:	f7f7 fec0 	bl	8001912 <_fstat>
 8009b92:	1c43      	adds	r3, r0, #1
 8009b94:	d102      	bne.n	8009b9c <_fstat_r+0x1c>
 8009b96:	682b      	ldr	r3, [r5, #0]
 8009b98:	b103      	cbz	r3, 8009b9c <_fstat_r+0x1c>
 8009b9a:	6023      	str	r3, [r4, #0]
 8009b9c:	bd38      	pop	{r3, r4, r5, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20000630 	.word	0x20000630

08009ba4 <_isatty_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4d06      	ldr	r5, [pc, #24]	; (8009bc0 <_isatty_r+0x1c>)
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4604      	mov	r4, r0
 8009bac:	4608      	mov	r0, r1
 8009bae:	602b      	str	r3, [r5, #0]
 8009bb0:	f7f7 febf 	bl	8001932 <_isatty>
 8009bb4:	1c43      	adds	r3, r0, #1
 8009bb6:	d102      	bne.n	8009bbe <_isatty_r+0x1a>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	b103      	cbz	r3, 8009bbe <_isatty_r+0x1a>
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	20000630 	.word	0x20000630

08009bc4 <_init>:
 8009bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc6:	bf00      	nop
 8009bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bca:	bc08      	pop	{r3}
 8009bcc:	469e      	mov	lr, r3
 8009bce:	4770      	bx	lr

08009bd0 <_fini>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	bf00      	nop
 8009bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd6:	bc08      	pop	{r3}
 8009bd8:	469e      	mov	lr, r3
 8009bda:	4770      	bx	lr
