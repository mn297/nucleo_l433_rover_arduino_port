
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a180  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800a310  0800a310  0001a310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7fc  0800a7fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7fc  0800a7fc  0001a7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a804  0800a804  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a804  0800a804  0001a804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a808  0800a808  0001a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a80c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001e0  0800a9ec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  0800a9ec  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014731  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf7  00000000  00000000  00034941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00037538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  000387a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002442c  00000000  00000000  000398c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163d0  00000000  00000000  0005dcec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d90d7  00000000  00000000  000740bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014d193  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061f4  00000000  00000000  0014d1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2f8 	.word	0x0800a2f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a2f8 	.word	0x0800a2f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_DMA_Init+0x38>)
 8001000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <MX_DMA_Init+0x38>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6493      	str	r3, [r2, #72]	; 0x48
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_DMA_Init+0x38>)
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2010      	movs	r0, #16
 800101c:	f000 ff87 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001020:	2010      	movs	r0, #16
 8001022:	f000 ffa0 	bl	8001f66 <HAL_NVIC_EnableIRQ>

}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000

08001034 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB8   ------> S_TIM16_CH1
*/
void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	4b5c      	ldr	r3, [pc, #368]	; (80011bc <MX_GPIO_Init+0x188>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a5b      	ldr	r2, [pc, #364]	; (80011bc <MX_GPIO_Init+0x188>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b59      	ldr	r3, [pc, #356]	; (80011bc <MX_GPIO_Init+0x188>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	4b56      	ldr	r3, [pc, #344]	; (80011bc <MX_GPIO_Init+0x188>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a55      	ldr	r2, [pc, #340]	; (80011bc <MX_GPIO_Init+0x188>)
 8001068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <MX_GPIO_Init+0x188>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b50      	ldr	r3, [pc, #320]	; (80011bc <MX_GPIO_Init+0x188>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a4f      	ldr	r2, [pc, #316]	; (80011bc <MX_GPIO_Init+0x188>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b4d      	ldr	r3, [pc, #308]	; (80011bc <MX_GPIO_Init+0x188>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b4a      	ldr	r3, [pc, #296]	; (80011bc <MX_GPIO_Init+0x188>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a49      	ldr	r2, [pc, #292]	; (80011bc <MX_GPIO_Init+0x188>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b47      	ldr	r3, [pc, #284]	; (80011bc <MX_GPIO_Init+0x188>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 80010aa:	2200      	movs	r2, #0
 80010ac:	f248 11b0 	movw	r1, #33200	; 0x81b0
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f001 fad2 	bl	800265c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f242 0160 	movw	r1, #8288	; 0x2060
 80010be:	4840      	ldr	r0, [pc, #256]	; (80011c0 <MX_GPIO_Init+0x18c>)
 80010c0:	f001 facc 	bl	800265c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	483e      	ldr	r0, [pc, #248]	; (80011c4 <MX_GPIO_Init+0x190>)
 80010ca:	f001 fac7 	bl	800265c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4837      	ldr	r0, [pc, #220]	; (80011c4 <MX_GPIO_Init+0x190>)
 80010e6:	f001 f93f 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 80010ea:	f248 13b0 	movw	r3, #33200	; 0x81b0
 80010ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f001 f92f 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001112:	2301      	movs	r3, #1
 8001114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f001 f922 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 8001124:	f242 0360 	movw	r3, #8288	; 0x2060
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4820      	ldr	r0, [pc, #128]	; (80011c0 <MX_GPIO_Init+0x18c>)
 800113e:	f001 f913 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001142:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001154:	2305      	movs	r3, #5
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <MX_GPIO_Init+0x18c>)
 8001160:	f001 f902 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4812      	ldr	r0, [pc, #72]	; (80011c4 <MX_GPIO_Init+0x190>)
 800117c:	f001 f8f4 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001192:	230e      	movs	r3, #14
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4808      	ldr	r0, [pc, #32]	; (80011c0 <MX_GPIO_Init+0x18c>)
 800119e:	f001 f8e3 	bl	8002368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2101      	movs	r1, #1
 80011a6:	2028      	movs	r0, #40	; 0x28
 80011a8:	f000 fec1 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ac:	2028      	movs	r0, #40	; 0x28
 80011ae:	f000 feda 	bl	8001f66 <HAL_NVIC_EnableIRQ>

}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	48000800 	.word	0x48000800

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011cc:	f000 fd58 	bl	8001c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d0:	f000 f80f 	bl	80011f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d4:	f7ff ff2e 	bl	8001034 <MX_GPIO_Init>
  MX_DMA_Init();
 80011d8:	f7ff ff0e 	bl	8000ff8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011dc:	f000 fc68 	bl	8001ab0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80011e0:	f000 f85e 	bl	80012a0 <MX_SPI1_Init>
  MX_SPI3_Init();
 80011e4:	f000 f89a 	bl	800131c <MX_SPI3_Init>
  MX_TIM1_Init();
 80011e8:	f000 fa8e 	bl	8001708 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011ec:	f000 fb38 	bl	8001860 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <main+0x28>

080011f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b096      	sub	sp, #88	; 0x58
 80011f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2244      	movs	r2, #68	; 0x44
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f004 fc13 	bl	8005a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001206:	463b      	mov	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001214:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001218:	f001 fa6a 	bl	80026f0 <HAL_PWREx_ControlVoltageScaling>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001222:	f000 f837 	bl	8001294 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001226:	2302      	movs	r3, #2
 8001228:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001230:	2310      	movs	r3, #16
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001234:	2302      	movs	r3, #2
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800123c:	2301      	movs	r3, #1
 800123e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001240:	230a      	movs	r3, #10
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001244:	2307      	movs	r3, #7
 8001246:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800124c:	2302      	movs	r3, #2
 800124e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4618      	mov	r0, r3
 8001256:	f001 faa1 	bl	800279c <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001260:	f000 f818 	bl	8001294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001264:	230f      	movs	r3, #15
 8001266:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001268:	2303      	movs	r3, #3
 800126a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	2104      	movs	r1, #4
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fea1 	bl	8002fc4 <HAL_RCC_ClockConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001288:	f000 f804 	bl	8001294 <Error_Handler>
  }
}
 800128c:	bf00      	nop
 800128e:	3758      	adds	r7, #88	; 0x58
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	e7fe      	b.n	800129c <Error_Handler+0x8>
	...

080012a0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_SPI1_Init+0x74>)
 80012a6:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <MX_SPI1_Init+0x78>)
 80012a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_SPI1_Init+0x74>)
 80012ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_SPI1_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_SPI1_Init+0x74>)
 80012ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_SPI1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_SPI1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_SPI1_Init+0x74>)
 80012ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_SPI1_Init+0x74>)
 80012d6:	2228      	movs	r2, #40	; 0x28
 80012d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_SPI1_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_SPI1_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_SPI1_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_SPI1_Init+0x74>)
 80012ee:	2207      	movs	r2, #7
 80012f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_SPI1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_SPI1_Init+0x74>)
 80012fa:	2208      	movs	r2, #8
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_SPI1_Init+0x74>)
 8001300:	f002 fbc0 	bl	8003a84 <HAL_SPI_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800130a:	f7ff ffc3 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200001fc 	.word	0x200001fc
 8001318:	40013000 	.word	0x40013000

0800131c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_SPI3_Init+0x74>)
 8001322:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <MX_SPI3_Init+0x78>)
 8001324:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_SPI3_Init+0x74>)
 8001328:	f44f 7282 	mov.w	r2, #260	; 0x104
 800132c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_SPI3_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_SPI3_Init+0x74>)
 8001336:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800133a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_SPI3_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_SPI3_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_SPI3_Init+0x74>)
 800134a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_SPI3_Init+0x74>)
 8001352:	2220      	movs	r2, #32
 8001354:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_SPI3_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_SPI3_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_SPI3_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_SPI3_Init+0x74>)
 800136a:	2207      	movs	r2, #7
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_SPI3_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_SPI3_Init+0x74>)
 8001376:	2208      	movs	r2, #8
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_SPI3_Init+0x74>)
 800137c:	f002 fb82 	bl	8003a84 <HAL_SPI_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001386:	f7ff ff85 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000260 	.word	0x20000260
 8001394:	40003c00 	.word	0x40003c00

08001398 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a2f      	ldr	r2, [pc, #188]	; (8001474 <HAL_SPI_MspInit+0xdc>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d12a      	bne.n	8001410 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_SPI_MspInit+0xe0>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013be:	4a2e      	ldr	r2, [pc, #184]	; (8001478 <HAL_SPI_MspInit+0xe0>)
 80013c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c4:	6613      	str	r3, [r2, #96]	; 0x60
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <HAL_SPI_MspInit+0xe0>)
 80013c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4b29      	ldr	r3, [pc, #164]	; (8001478 <HAL_SPI_MspInit+0xe0>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4a28      	ldr	r2, [pc, #160]	; (8001478 <HAL_SPI_MspInit+0xe0>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <HAL_SPI_MspInit+0xe0>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80013ea:	f641 0302 	movw	r3, #6146	; 0x1802
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013fc:	2305      	movs	r3, #5
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140a:	f000 ffad 	bl	8002368 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800140e:	e02d      	b.n	800146c <HAL_SPI_MspInit+0xd4>
  else if(spiHandle->Instance==SPI3)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <HAL_SPI_MspInit+0xe4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d128      	bne.n	800146c <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_SPI_MspInit+0xe0>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	4a16      	ldr	r2, [pc, #88]	; (8001478 <HAL_SPI_MspInit+0xe0>)
 8001420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001424:	6593      	str	r3, [r2, #88]	; 0x58
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_SPI_MspInit+0xe0>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_SPI_MspInit+0xe0>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_SPI_MspInit+0xe0>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_SPI_MspInit+0xe0>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800144a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800145c:	2306      	movs	r3, #6
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <HAL_SPI_MspInit+0xe8>)
 8001468:	f000 ff7e 	bl	8002368 <HAL_GPIO_Init>
}
 800146c:	bf00      	nop
 800146e:	3730      	adds	r7, #48	; 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40013000 	.word	0x40013000
 8001478:	40021000 	.word	0x40021000
 800147c:	40003c00 	.word	0x40003c00
 8001480:	48000800 	.word	0x48000800

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_MspInit+0x44>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <HAL_MspInit+0x44>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6613      	str	r3, [r2, #96]	; 0x60
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_MspInit+0x44>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_MspInit+0x44>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <HAL_MspInit+0x44>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6593      	str	r3, [r2, #88]	; 0x58
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_MspInit+0x44>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler+0x4>

080014d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001518:	f000 fc0e 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <DMA1_Channel6_IRQHandler+0x10>)
 8001526:	f000 fe70 	bl	800220a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200003e4 	.word	0x200003e4

08001534 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <USART2_IRQHandler+0x10>)
 800153a:	f003 fa85 	bl	8004a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000360 	.word	0x20000360

08001548 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800154c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001550:	f001 f89c 	bl	800268c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return 1;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_kill>:

int _kill(int pid, int sig)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001572:	f004 fa29 	bl	80059c8 <__errno>
 8001576:	4603      	mov	r3, r0
 8001578:	2216      	movs	r2, #22
 800157a:	601a      	str	r2, [r3, #0]
  return -1;
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_exit>:

void _exit (int status)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ffe7 	bl	8001568 <_kill>
  while (1) {}    /* Make sure we hang here */
 800159a:	e7fe      	b.n	800159a <_exit+0x12>

0800159c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e00a      	b.n	80015c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ae:	f3af 8000 	nop.w
 80015b2:	4601      	mov	r1, r0
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	60ba      	str	r2, [r7, #8]
 80015ba:	b2ca      	uxtb	r2, r1
 80015bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbf0      	blt.n	80015ae <_read+0x12>
  }

  return len;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	e009      	b.n	80015fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	60ba      	str	r2, [r7, #8]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	dbf1      	blt.n	80015e8 <_write+0x12>
  }
  return len;
 8001604:	687b      	ldr	r3, [r7, #4]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_close>:

int _close(int file)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001636:	605a      	str	r2, [r3, #4]
  return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_isatty>:

int _isatty(int file)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f004 f98e 	bl	80059c8 <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20010000 	.word	0x20010000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	200002c4 	.word	0x200002c4
 80016e0:	20000440 	.word	0x20000440

080016e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b09a      	sub	sp, #104	; 0x68
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001728:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
 8001738:	615a      	str	r2, [r3, #20]
 800173a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	222c      	movs	r2, #44	; 0x2c
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f004 f972 	bl	8005a2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001748:	4b43      	ldr	r3, [pc, #268]	; (8001858 <MX_TIM1_Init+0x150>)
 800174a:	4a44      	ldr	r2, [pc, #272]	; (800185c <MX_TIM1_Init+0x154>)
 800174c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800174e:	4b42      	ldr	r3, [pc, #264]	; (8001858 <MX_TIM1_Init+0x150>)
 8001750:	224f      	movs	r2, #79	; 0x4f
 8001752:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b40      	ldr	r3, [pc, #256]	; (8001858 <MX_TIM1_Init+0x150>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500-1;
 800175a:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <MX_TIM1_Init+0x150>)
 800175c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001760:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001762:	4b3d      	ldr	r3, [pc, #244]	; (8001858 <MX_TIM1_Init+0x150>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001768:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <MX_TIM1_Init+0x150>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176e:	4b3a      	ldr	r3, [pc, #232]	; (8001858 <MX_TIM1_Init+0x150>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001774:	4838      	ldr	r0, [pc, #224]	; (8001858 <MX_TIM1_Init+0x150>)
 8001776:	f002 fa28 	bl	8003bca <HAL_TIM_Base_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001780:	f7ff fd88 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001788:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800178a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800178e:	4619      	mov	r1, r3
 8001790:	4831      	ldr	r0, [pc, #196]	; (8001858 <MX_TIM1_Init+0x150>)
 8001792:	f002 fbe7 	bl	8003f64 <HAL_TIM_ConfigClockSource>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800179c:	f7ff fd7a 	bl	8001294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017a0:	482d      	ldr	r0, [pc, #180]	; (8001858 <MX_TIM1_Init+0x150>)
 80017a2:	f002 fa69 	bl	8003c78 <HAL_TIM_PWM_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80017ac:	f7ff fd72 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017c0:	4619      	mov	r1, r3
 80017c2:	4825      	ldr	r0, [pc, #148]	; (8001858 <MX_TIM1_Init+0x150>)
 80017c4:	f003 f814 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80017ce:	f7ff fd61 	bl	8001294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d2:	2360      	movs	r3, #96	; 0x60
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017da:	2300      	movs	r3, #0
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017de:	2300      	movs	r3, #0
 80017e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017f2:	2204      	movs	r2, #4
 80017f4:	4619      	mov	r1, r3
 80017f6:	4818      	ldr	r0, [pc, #96]	; (8001858 <MX_TIM1_Init+0x150>)
 80017f8:	f002 faa0 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001802:	f7ff fd47 	bl	8001294 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800181a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	4619      	mov	r1, r3
 800183a:	4807      	ldr	r0, [pc, #28]	; (8001858 <MX_TIM1_Init+0x150>)
 800183c:	f003 f83e 	bl	80048bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001846:	f7ff fd25 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800184a:	4803      	ldr	r0, [pc, #12]	; (8001858 <MX_TIM1_Init+0x150>)
 800184c:	f000 f8d4 	bl	80019f8 <HAL_TIM_MspPostInit>

}
 8001850:	bf00      	nop
 8001852:	3768      	adds	r7, #104	; 0x68
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200002c8 	.word	0x200002c8
 800185c:	40012c00 	.word	0x40012c00

08001860 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08e      	sub	sp, #56	; 0x38
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001880:	463b      	mov	r3, r7
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]
 800188e:	615a      	str	r2, [r3, #20]
 8001890:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <MX_TIM2_Init+0xe8>)
 8001894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001898:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 800189a:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <MX_TIM2_Init+0xe8>)
 800189c:	224f      	movs	r2, #79	; 0x4f
 800189e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b29      	ldr	r3, [pc, #164]	; (8001948 <MX_TIM2_Init+0xe8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80018a6:	4b28      	ldr	r3, [pc, #160]	; (8001948 <MX_TIM2_Init+0xe8>)
 80018a8:	2263      	movs	r2, #99	; 0x63
 80018aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ac:	4b26      	ldr	r3, [pc, #152]	; (8001948 <MX_TIM2_Init+0xe8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <MX_TIM2_Init+0xe8>)
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018b8:	4823      	ldr	r0, [pc, #140]	; (8001948 <MX_TIM2_Init+0xe8>)
 80018ba:	f002 f986 	bl	8003bca <HAL_TIM_Base_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80018c4:	f7ff fce6 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d2:	4619      	mov	r1, r3
 80018d4:	481c      	ldr	r0, [pc, #112]	; (8001948 <MX_TIM2_Init+0xe8>)
 80018d6:	f002 fb45 	bl	8003f64 <HAL_TIM_ConfigClockSource>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80018e0:	f7ff fcd8 	bl	8001294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018e4:	4818      	ldr	r0, [pc, #96]	; (8001948 <MX_TIM2_Init+0xe8>)
 80018e6:	f002 f9c7 	bl	8003c78 <HAL_TIM_PWM_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80018f0:	f7ff fcd0 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	4619      	mov	r1, r3
 8001902:	4811      	ldr	r0, [pc, #68]	; (8001948 <MX_TIM2_Init+0xe8>)
 8001904:	f002 ff74 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800190e:	f7ff fcc1 	bl	8001294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001912:	2360      	movs	r3, #96	; 0x60
 8001914:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001922:	463b      	mov	r3, r7
 8001924:	2204      	movs	r2, #4
 8001926:	4619      	mov	r1, r3
 8001928:	4807      	ldr	r0, [pc, #28]	; (8001948 <MX_TIM2_Init+0xe8>)
 800192a:	f002 fa07 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001934:	f7ff fcae 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <MX_TIM2_Init+0xe8>)
 800193a:	f000 f85d 	bl	80019f8 <HAL_TIM_MspPostInit>

}
 800193e:	bf00      	nop
 8001940:	3738      	adds	r7, #56	; 0x38
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000314 	.word	0x20000314

0800194c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a20      	ldr	r2, [pc, #128]	; (80019ec <HAL_TIM_Base_MspInit+0xa0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10c      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_TIM_Base_MspInit+0xa4>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001972:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <HAL_TIM_Base_MspInit+0xa4>)
 8001974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001978:	6613      	str	r3, [r2, #96]	; 0x60
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_TIM_Base_MspInit+0xa4>)
 800197c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001986:	e02d      	b.n	80019e4 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001990:	d128      	bne.n	80019e4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_TIM_Base_MspInit+0xa4>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <HAL_TIM_Base_MspInit+0xa4>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6593      	str	r3, [r2, #88]	; 0x58
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_TIM_Base_MspInit+0xa4>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_TIM_Base_MspInit+0xa4>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_TIM_Base_MspInit+0xa4>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_TIM_Base_MspInit+0xa4>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019d4:	2301      	movs	r3, #1
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <HAL_TIM_Base_MspInit+0xa8>)
 80019e0:	f000 fcc2 	bl	8002368 <HAL_GPIO_Init>
}
 80019e4:	bf00      	nop
 80019e6:	3728      	adds	r7, #40	; 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40012c00 	.word	0x40012c00
 80019f0:	40021000 	.word	0x40021000
 80019f4:	48000400 	.word	0x48000400

080019f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a23      	ldr	r2, [pc, #140]	; (8001aa4 <HAL_TIM_MspPostInit+0xac>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d11e      	bne.n	8001a58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_TIM_MspPostInit+0xb0>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a22      	ldr	r2, [pc, #136]	; (8001aa8 <HAL_TIM_MspPostInit+0xb0>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_TIM_MspPostInit+0xb0>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 8001a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a44:	2301      	movs	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a52:	f000 fc89 	bl	8002368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a56:	e020      	b.n	8001a9a <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a60:	d11b      	bne.n	8001a9a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_TIM_MspPostInit+0xb0>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	4a10      	ldr	r2, [pc, #64]	; (8001aa8 <HAL_TIM_MspPostInit+0xb0>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <HAL_TIM_MspPostInit+0xb0>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <HAL_TIM_MspPostInit+0xb4>)
 8001a96:	f000 fc67 	bl	8002368 <HAL_GPIO_Init>
}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40012c00 	.word	0x40012c00
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	48000400 	.word	0x48000400

08001ab0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001ab6:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <MX_USART2_UART_Init+0x5c>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001af4:	f002 ff5a 	bl	80049ac <HAL_UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001afe:	f7ff fbc9 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000360 	.word	0x20000360
 8001b0c:	40004400 	.word	0x40004400

08001b10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b0a2      	sub	sp, #136	; 0x88
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2260      	movs	r2, #96	; 0x60
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 ff7b 	bl	8005a2c <memset>
  if(uartHandle->Instance==USART2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a38      	ldr	r2, [pc, #224]	; (8001c1c <HAL_UART_MspInit+0x10c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d169      	bne.n	8001c14 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b40:	2302      	movs	r3, #2
 8001b42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f001 fc5d 	bl	800340c <HAL_RCCEx_PeriphCLKConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b58:	f7ff fb9c 	bl	8001294 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5c:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <HAL_UART_MspInit+0x110>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	4a2f      	ldr	r2, [pc, #188]	; (8001c20 <HAL_UART_MspInit+0x110>)
 8001b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b66:	6593      	str	r3, [r2, #88]	; 0x58
 8001b68:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <HAL_UART_MspInit+0x110>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_UART_MspInit+0x110>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b78:	4a29      	ldr	r2, [pc, #164]	; (8001c20 <HAL_UART_MspInit+0x110>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <HAL_UART_MspInit+0x110>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b8c:	230c      	movs	r3, #12
 8001b8e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bae:	f000 fbdb 	bl	8002368 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <HAL_UART_MspInit+0x114>)
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_UART_MspInit+0x118>)
 8001bb6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001bb8:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <HAL_UART_MspInit+0x114>)
 8001bba:	2202      	movs	r2, #2
 8001bbc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bbe:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_UART_MspInit+0x114>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_UART_MspInit+0x114>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_UART_MspInit+0x114>)
 8001bcc:	2280      	movs	r2, #128	; 0x80
 8001bce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_UART_MspInit+0x114>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_UART_MspInit+0x114>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_UART_MspInit+0x114>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_UART_MspInit+0x114>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001be8:	480e      	ldr	r0, [pc, #56]	; (8001c24 <HAL_UART_MspInit+0x114>)
 8001bea:	f000 f9d7 	bl	8001f9c <HAL_DMA_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001bf4:	f7ff fb4e 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_UART_MspInit+0x114>)
 8001bfc:	671a      	str	r2, [r3, #112]	; 0x70
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_UART_MspInit+0x114>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	2026      	movs	r0, #38	; 0x26
 8001c0a:	f000 f990 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c0e:	2026      	movs	r0, #38	; 0x26
 8001c10:	f000 f9a9 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c14:	bf00      	nop
 8001c16:	3788      	adds	r7, #136	; 0x88
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40004400 	.word	0x40004400
 8001c20:	40021000 	.word	0x40021000
 8001c24:	200003e4 	.word	0x200003e4
 8001c28:	4002006c 	.word	0x4002006c

08001c2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c30:	f7ff fd58 	bl	80016e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c36:	490d      	ldr	r1, [pc, #52]	; (8001c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c38:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <LoopForever+0xe>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c3c:	e002      	b.n	8001c44 <LoopCopyDataInit>

08001c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c42:	3304      	adds	r3, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c48:	d3f9      	bcc.n	8001c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c4c:	4c0a      	ldr	r4, [pc, #40]	; (8001c78 <LoopForever+0x16>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c50:	e001      	b.n	8001c56 <LoopFillZerobss>

08001c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c54:	3204      	adds	r2, #4

08001c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c58:	d3fb      	bcc.n	8001c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f003 febb 	bl	80059d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c5e:	f7ff fab3 	bl	80011c8 <main>

08001c62 <LoopForever>:

LoopForever:
    b LoopForever
 8001c62:	e7fe      	b.n	8001c62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c6c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c70:	0800a80c 	.word	0x0800a80c
  ldr r2, =_sbss
 8001c74:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c78:	20000440 	.word	0x20000440

08001c7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <ADC1_IRQHandler>
	...

08001c80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_Init+0x3c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <HAL_Init+0x3c>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c96:	2003      	movs	r0, #3
 8001c98:	f000 f93e 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f000 f80f 	bl	8001cc0 <HAL_InitTick>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	71fb      	strb	r3, [r7, #7]
 8001cac:	e001      	b.n	8001cb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cae:	f7ff fbe9 	bl	8001484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40022000 	.word	0x40022000

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_InitTick+0x6c>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d023      	beq.n	8001d1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cd4:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <HAL_InitTick+0x70>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_InitTick+0x6c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f949 	bl	8001f82 <HAL_SYSTICK_Config>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10f      	bne.n	8001d16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d809      	bhi.n	8001d10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f000 f913 	bl	8001f2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <HAL_InitTick+0x74>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e007      	b.n	8001d20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
 8001d14:	e004      	b.n	8001d20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
 8001d1a:	e001      	b.n	8001d20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000008 	.word	0x20000008
 8001d30:	20000000 	.word	0x20000000
 8001d34:	20000004 	.word	0x20000004

08001d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_IncTick+0x20>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x24>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <HAL_IncTick+0x24>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	2000042c 	.word	0x2000042c

08001d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return uwTick;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_GetTick+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	2000042c 	.word	0x2000042c

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4907      	ldr	r1, [pc, #28]	; (8001e14 <__NVIC_EnableIRQ+0x38>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	; (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d301      	bcc.n	8001eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00f      	b.n	8001f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <SysTick_Config+0x40>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f7ff ff8e 	bl	8001e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SysTick_Config+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <SysTick_Config+0x40>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff29 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f40:	f7ff ff3e 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff ff8e 	bl	8001e6c <NVIC_EncodePriority>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff5d 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff31 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffa2 	bl	8001ed4 <SysTick_Config>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e098      	b.n	80020e0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b4d      	ldr	r3, [pc, #308]	; (80020ec <HAL_DMA_Init+0x150>)
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d80f      	bhi.n	8001fda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b4b      	ldr	r3, [pc, #300]	; (80020f0 <HAL_DMA_Init+0x154>)
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a4b      	ldr	r2, [pc, #300]	; (80020f4 <HAL_DMA_Init+0x158>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	009a      	lsls	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a48      	ldr	r2, [pc, #288]	; (80020f8 <HAL_DMA_Init+0x15c>)
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40
 8001fd8:	e00e      	b.n	8001ff8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <HAL_DMA_Init+0x160>)
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a43      	ldr	r2, [pc, #268]	; (80020f4 <HAL_DMA_Init+0x158>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	009a      	lsls	r2, r3, #2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a42      	ldr	r2, [pc, #264]	; (8002100 <HAL_DMA_Init+0x164>)
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800200e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002012:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800201c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002052:	d039      	beq.n	80020c8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	4a27      	ldr	r2, [pc, #156]	; (80020f8 <HAL_DMA_Init+0x15c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d11a      	bne.n	8002094 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800205e:	4b29      	ldr	r3, [pc, #164]	; (8002104 <HAL_DMA_Init+0x168>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f003 031c 	and.w	r3, r3, #28
 800206a:	210f      	movs	r1, #15
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	4924      	ldr	r1, [pc, #144]	; (8002104 <HAL_DMA_Init+0x168>)
 8002074:	4013      	ands	r3, r2
 8002076:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002078:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_DMA_Init+0x168>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	f003 031c 	and.w	r3, r3, #28
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	491d      	ldr	r1, [pc, #116]	; (8002104 <HAL_DMA_Init+0x168>)
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
 8002092:	e019      	b.n	80020c8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_DMA_Init+0x16c>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	f003 031c 	and.w	r3, r3, #28
 80020a0:	210f      	movs	r1, #15
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	4917      	ldr	r1, [pc, #92]	; (8002108 <HAL_DMA_Init+0x16c>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <HAL_DMA_Init+0x16c>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f003 031c 	and.w	r3, r3, #28
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	4911      	ldr	r1, [pc, #68]	; (8002108 <HAL_DMA_Init+0x16c>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40020407 	.word	0x40020407
 80020f0:	bffdfff8 	.word	0xbffdfff8
 80020f4:	cccccccd 	.word	0xcccccccd
 80020f8:	40020000 	.word	0x40020000
 80020fc:	bffdfbf8 	.word	0xbffdfbf8
 8002100:	40020400 	.word	0x40020400
 8002104:	400200a8 	.word	0x400200a8
 8002108:	400204a8 	.word	0x400204a8

0800210c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d008      	beq.n	8002136 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2204      	movs	r2, #4
 8002128:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e022      	b.n	800217c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 020e 	bic.w	r2, r2, #14
 8002144:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f003 021c 	and.w	r2, r3, #28
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f202 	lsl.w	r2, r1, r2
 8002168:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d005      	beq.n	80021ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2204      	movs	r2, #4
 80021a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	e029      	b.n	8002200 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 020e 	bic.w	r2, r2, #14
 80021ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	f003 021c 	and.w	r2, r3, #28
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f202 	lsl.w	r2, r1, r2
 80021de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	4798      	blx	r3
    }
  }
  return status;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f003 031c 	and.w	r3, r3, #28
 800222a:	2204      	movs	r2, #4
 800222c:	409a      	lsls	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d026      	beq.n	8002284 <HAL_DMA_IRQHandler+0x7a>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d021      	beq.n	8002284 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d107      	bne.n	800225e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0204 	bic.w	r2, r2, #4
 800225c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f003 021c 	and.w	r2, r3, #28
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	2104      	movs	r1, #4
 800226c:	fa01 f202 	lsl.w	r2, r1, r2
 8002270:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	2b00      	cmp	r3, #0
 8002278:	d071      	beq.n	800235e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002282:	e06c      	b.n	800235e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002288:	f003 031c 	and.w	r3, r3, #28
 800228c:	2202      	movs	r2, #2
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d02e      	beq.n	80022f6 <HAL_DMA_IRQHandler+0xec>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d029      	beq.n	80022f6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10b      	bne.n	80022c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 020a 	bic.w	r2, r2, #10
 80022be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	f003 021c 	and.w	r2, r3, #28
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	2102      	movs	r1, #2
 80022d6:	fa01 f202 	lsl.w	r2, r1, r2
 80022da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d038      	beq.n	800235e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022f4:	e033      	b.n	800235e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f003 031c 	and.w	r3, r3, #28
 80022fe:	2208      	movs	r2, #8
 8002300:	409a      	lsls	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d02a      	beq.n	8002360 <HAL_DMA_IRQHandler+0x156>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d025      	beq.n	8002360 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 020e 	bic.w	r2, r2, #14
 8002322:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002328:	f003 021c 	and.w	r2, r3, #28
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	2101      	movs	r1, #1
 8002332:	fa01 f202 	lsl.w	r2, r1, r2
 8002336:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002352:	2b00      	cmp	r3, #0
 8002354:	d004      	beq.n	8002360 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800235e:	bf00      	nop
 8002360:	bf00      	nop
}
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002376:	e154      	b.n	8002622 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	4013      	ands	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8146 	beq.w	800261c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d005      	beq.n	80023a8 <HAL_GPIO_Init+0x40>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d130      	bne.n	800240a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023de:	2201      	movs	r2, #1
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f003 0201 	and.w	r2, r3, #1
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b03      	cmp	r3, #3
 8002414:	d017      	beq.n	8002446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d123      	bne.n	800249a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	08da      	lsrs	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3208      	adds	r2, #8
 800245a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	220f      	movs	r2, #15
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	08da      	lsrs	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3208      	adds	r2, #8
 8002494:	6939      	ldr	r1, [r7, #16]
 8002496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0203 	and.w	r2, r3, #3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 80a0 	beq.w	800261c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024dc:	4b58      	ldr	r3, [pc, #352]	; (8002640 <HAL_GPIO_Init+0x2d8>)
 80024de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e0:	4a57      	ldr	r2, [pc, #348]	; (8002640 <HAL_GPIO_Init+0x2d8>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6613      	str	r3, [r2, #96]	; 0x60
 80024e8:	4b55      	ldr	r3, [pc, #340]	; (8002640 <HAL_GPIO_Init+0x2d8>)
 80024ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024f4:	4a53      	ldr	r2, [pc, #332]	; (8002644 <HAL_GPIO_Init+0x2dc>)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800251e:	d019      	beq.n	8002554 <HAL_GPIO_Init+0x1ec>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a49      	ldr	r2, [pc, #292]	; (8002648 <HAL_GPIO_Init+0x2e0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d013      	beq.n	8002550 <HAL_GPIO_Init+0x1e8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a48      	ldr	r2, [pc, #288]	; (800264c <HAL_GPIO_Init+0x2e4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00d      	beq.n	800254c <HAL_GPIO_Init+0x1e4>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a47      	ldr	r2, [pc, #284]	; (8002650 <HAL_GPIO_Init+0x2e8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d007      	beq.n	8002548 <HAL_GPIO_Init+0x1e0>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a46      	ldr	r2, [pc, #280]	; (8002654 <HAL_GPIO_Init+0x2ec>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_GPIO_Init+0x1dc>
 8002540:	2304      	movs	r3, #4
 8002542:	e008      	b.n	8002556 <HAL_GPIO_Init+0x1ee>
 8002544:	2307      	movs	r3, #7
 8002546:	e006      	b.n	8002556 <HAL_GPIO_Init+0x1ee>
 8002548:	2303      	movs	r3, #3
 800254a:	e004      	b.n	8002556 <HAL_GPIO_Init+0x1ee>
 800254c:	2302      	movs	r3, #2
 800254e:	e002      	b.n	8002556 <HAL_GPIO_Init+0x1ee>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <HAL_GPIO_Init+0x1ee>
 8002554:	2300      	movs	r3, #0
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	f002 0203 	and.w	r2, r2, #3
 800255c:	0092      	lsls	r2, r2, #2
 800255e:	4093      	lsls	r3, r2
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002566:	4937      	ldr	r1, [pc, #220]	; (8002644 <HAL_GPIO_Init+0x2dc>)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002574:	4b38      	ldr	r3, [pc, #224]	; (8002658 <HAL_GPIO_Init+0x2f0>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002598:	4a2f      	ldr	r2, [pc, #188]	; (8002658 <HAL_GPIO_Init+0x2f0>)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800259e:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <HAL_GPIO_Init+0x2f0>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025c2:	4a25      	ldr	r2, [pc, #148]	; (8002658 <HAL_GPIO_Init+0x2f0>)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025c8:	4b23      	ldr	r3, [pc, #140]	; (8002658 <HAL_GPIO_Init+0x2f0>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025ec:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <HAL_GPIO_Init+0x2f0>)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025f2:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_GPIO_Init+0x2f0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002616:	4a10      	ldr	r2, [pc, #64]	; (8002658 <HAL_GPIO_Init+0x2f0>)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	3301      	adds	r3, #1
 8002620:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	f47f aea3 	bne.w	8002378 <HAL_GPIO_Init+0x10>
  }
}
 8002632:	bf00      	nop
 8002634:	bf00      	nop
 8002636:	371c      	adds	r7, #28
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40021000 	.word	0x40021000
 8002644:	40010000 	.word	0x40010000
 8002648:	48000400 	.word	0x48000400
 800264c:	48000800 	.word	0x48000800
 8002650:	48000c00 	.word	0x48000c00
 8002654:	48001000 	.word	0x48001000
 8002658:	40010400 	.word	0x40010400

0800265c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	807b      	strh	r3, [r7, #2]
 8002668:	4613      	mov	r3, r2
 800266a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800266c:	787b      	ldrb	r3, [r7, #1]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002678:	e002      	b.n	8002680 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800267a:	887a      	ldrh	r2, [r7, #2]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f806 	bl	80026bc <HAL_GPIO_EXTI_Callback>
  }
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40010400 	.word	0x40010400

080026bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <HAL_PWREx_GetVoltageRange+0x18>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40007000 	.word	0x40007000

080026f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026fe:	d130      	bne.n	8002762 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002700:	4b23      	ldr	r3, [pc, #140]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800270c:	d038      	beq.n	8002780 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002716:	4a1e      	ldr	r2, [pc, #120]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800271c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800271e:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2232      	movs	r2, #50	; 0x32
 8002724:	fb02 f303 	mul.w	r3, r2, r3
 8002728:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	0c9b      	lsrs	r3, r3, #18
 8002730:	3301      	adds	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002734:	e002      	b.n	800273c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3b01      	subs	r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002748:	d102      	bne.n	8002750 <HAL_PWREx_ControlVoltageScaling+0x60>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f2      	bne.n	8002736 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275c:	d110      	bne.n	8002780 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e00f      	b.n	8002782 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800276a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276e:	d007      	beq.n	8002780 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002778:	4a05      	ldr	r2, [pc, #20]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800277e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40007000 	.word	0x40007000
 8002794:	20000000 	.word	0x20000000
 8002798:	431bde83 	.word	0x431bde83

0800279c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d102      	bne.n	80027b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f000 bc02 	b.w	8002fb4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b0:	4b96      	ldr	r3, [pc, #600]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ba:	4b94      	ldr	r3, [pc, #592]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80e4 	beq.w	800299a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4c>
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	f040 808b 	bne.w	80028f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	f040 8087 	bne.w	80028f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027e8:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_OscConfig+0x64>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e3d9      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	4b81      	ldr	r3, [pc, #516]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <HAL_RCC_OscConfig+0x7e>
 8002810:	4b7e      	ldr	r3, [pc, #504]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002818:	e005      	b.n	8002826 <HAL_RCC_OscConfig+0x8a>
 800281a:	4b7c      	ldr	r3, [pc, #496]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800281c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002826:	4293      	cmp	r3, r2
 8002828:	d223      	bcs.n	8002872 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fd8c 	bl	800334c <RCC_SetFlashLatencyFromMSIRange>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e3ba      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800283e:	4b73      	ldr	r3, [pc, #460]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a72      	ldr	r2, [pc, #456]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002844:	f043 0308 	orr.w	r3, r3, #8
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b70      	ldr	r3, [pc, #448]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	496d      	ldr	r1, [pc, #436]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002858:	4313      	orrs	r3, r2
 800285a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285c:	4b6b      	ldr	r3, [pc, #428]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	4968      	ldr	r1, [pc, #416]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
 8002870:	e025      	b.n	80028be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002872:	4b66      	ldr	r3, [pc, #408]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a65      	ldr	r2, [pc, #404]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002878:	f043 0308 	orr.w	r3, r3, #8
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	4960      	ldr	r1, [pc, #384]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800288c:	4313      	orrs	r3, r2
 800288e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002890:	4b5e      	ldr	r3, [pc, #376]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	495b      	ldr	r1, [pc, #364]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fd4c 	bl	800334c <RCC_SetFlashLatencyFromMSIRange>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e37a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028be:	f000 fc81 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 80028c2:	4602      	mov	r2, r0
 80028c4:	4b51      	ldr	r3, [pc, #324]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4950      	ldr	r1, [pc, #320]	; (8002a10 <HAL_RCC_OscConfig+0x274>)
 80028d0:	5ccb      	ldrb	r3, [r1, r3]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	fa22 f303 	lsr.w	r3, r2, r3
 80028da:	4a4e      	ldr	r2, [pc, #312]	; (8002a14 <HAL_RCC_OscConfig+0x278>)
 80028dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028de:	4b4e      	ldr	r3, [pc, #312]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff f9ec 	bl	8001cc0 <HAL_InitTick>
 80028e8:	4603      	mov	r3, r0
 80028ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d052      	beq.n	8002998 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	e35e      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d032      	beq.n	8002964 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028fe:	4b43      	ldr	r3, [pc, #268]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a42      	ldr	r2, [pc, #264]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800290a:	f7ff fa29 	bl	8001d60 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002912:	f7ff fa25 	bl	8001d60 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e347      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002924:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002930:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a35      	ldr	r2, [pc, #212]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4930      	ldr	r1, [pc, #192]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800294e:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	492b      	ldr	r1, [pc, #172]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
 8002962:	e01a      	b.n	800299a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002964:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a28      	ldr	r2, [pc, #160]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002970:	f7ff f9f6 	bl	8001d60 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002978:	f7ff f9f2 	bl	8001d60 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e314      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x1dc>
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002998:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d073      	beq.n	8002a8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_OscConfig+0x21c>
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d10e      	bne.n	80029d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d063      	beq.n	8002a8c <HAL_RCC_OscConfig+0x2f0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d15f      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e2f1      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x24c>
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e025      	b.n	8002a34 <HAL_RCC_OscConfig+0x298>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f0:	d114      	bne.n	8002a1c <HAL_RCC_OscConfig+0x280>
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a02      	ldr	r2, [pc, #8]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e013      	b.n	8002a34 <HAL_RCC_OscConfig+0x298>
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	0800a310 	.word	0x0800a310
 8002a14:	20000000 	.word	0x20000000
 8002a18:	20000004 	.word	0x20000004
 8002a1c:	4ba0      	ldr	r3, [pc, #640]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a9f      	ldr	r2, [pc, #636]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b9d      	ldr	r3, [pc, #628]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a9c      	ldr	r2, [pc, #624]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7ff f990 	bl	8001d60 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7ff f98c 	bl	8001d60 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e2ae      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a56:	4b92      	ldr	r3, [pc, #584]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x2a8>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7ff f97c 	bl	8001d60 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7ff f978 	bl	8001d60 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e29a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a7e:	4b88      	ldr	r3, [pc, #544]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2d0>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d060      	beq.n	8002b5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_OscConfig+0x310>
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d119      	bne.n	8002ada <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d116      	bne.n	8002ada <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aac:	4b7c      	ldr	r3, [pc, #496]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x328>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e277      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac4:	4b76      	ldr	r3, [pc, #472]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	061b      	lsls	r3, r3, #24
 8002ad2:	4973      	ldr	r1, [pc, #460]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad8:	e040      	b.n	8002b5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d023      	beq.n	8002b2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae2:	4b6f      	ldr	r3, [pc, #444]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a6e      	ldr	r2, [pc, #440]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7ff f937 	bl	8001d60 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af6:	f7ff f933 	bl	8001d60 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e255      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b08:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b14:	4b62      	ldr	r3, [pc, #392]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	495f      	ldr	r1, [pc, #380]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
 8002b28:	e018      	b.n	8002b5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a5c      	ldr	r2, [pc, #368]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7ff f913 	bl	8001d60 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3e:	f7ff f90f 	bl	8001d60 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e231      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b50:	4b53      	ldr	r3, [pc, #332]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d03c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01c      	beq.n	8002baa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b70:	4b4b      	ldr	r3, [pc, #300]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b76:	4a4a      	ldr	r2, [pc, #296]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b80:	f7ff f8ee 	bl	8001d60 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b88:	f7ff f8ea 	bl	8001d60 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e20c      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b9a:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ef      	beq.n	8002b88 <HAL_RCC_OscConfig+0x3ec>
 8002ba8:	e01b      	b.n	8002be2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002baa:	4b3d      	ldr	r3, [pc, #244]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb0:	4a3b      	ldr	r2, [pc, #236]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	f023 0301 	bic.w	r3, r3, #1
 8002bb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7ff f8d1 	bl	8001d60 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7ff f8cd 	bl	8001d60 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e1ef      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bd4:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1ef      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80a6 	beq.w	8002d3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10d      	bne.n	8002c1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1c:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <HAL_RCC_OscConfig+0x508>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d118      	bne.n	8002c5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c28:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_RCC_OscConfig+0x508>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_RCC_OscConfig+0x508>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c34:	f7ff f894 	bl	8001d60 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3c:	f7ff f890 	bl	8001d60 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1b2      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_RCC_OscConfig+0x508>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d108      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4d8>
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c72:	e029      	b.n	8002cc8 <HAL_RCC_OscConfig+0x52c>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d115      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x50c>
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c82:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c84:	f043 0304 	orr.w	r3, r3, #4
 8002c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9c:	e014      	b.n	8002cc8 <HAL_RCC_OscConfig+0x52c>
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	4b9a      	ldr	r3, [pc, #616]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	4a99      	ldr	r2, [pc, #612]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cb8:	4b96      	ldr	r3, [pc, #600]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	4a95      	ldr	r2, [pc, #596]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002cc0:	f023 0304 	bic.w	r3, r3, #4
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d016      	beq.n	8002cfe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7ff f846 	bl	8001d60 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7ff f842 	bl	8001d60 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e162      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cee:	4b89      	ldr	r3, [pc, #548]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0ed      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x53c>
 8002cfc:	e015      	b.n	8002d2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfe:	f7ff f82f 	bl	8001d60 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7ff f82b 	bl	8001d60 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e14b      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d1c:	4b7d      	ldr	r3, [pc, #500]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ed      	bne.n	8002d06 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2a:	7ffb      	ldrb	r3, [r7, #31]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4b78      	ldr	r3, [pc, #480]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	4a77      	ldr	r2, [pc, #476]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d03c      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01c      	beq.n	8002d8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d50:	4b70      	ldr	r3, [pc, #448]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d56:	4a6f      	ldr	r2, [pc, #444]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7fe fffe 	bl	8001d60 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d68:	f7fe fffa 	bl	8001d60 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e11c      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d7a:	4b66      	ldr	r3, [pc, #408]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ef      	beq.n	8002d68 <HAL_RCC_OscConfig+0x5cc>
 8002d88:	e01b      	b.n	8002dc2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d8a:	4b62      	ldr	r3, [pc, #392]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d90:	4a60      	ldr	r2, [pc, #384]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe ffe1 	bl	8001d60 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da2:	f7fe ffdd 	bl	8001d60 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0ff      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002db4:	4b57      	ldr	r3, [pc, #348]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1ef      	bne.n	8002da2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 80f3 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	f040 80c9 	bne.w	8002f68 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dd6:	4b4f      	ldr	r3, [pc, #316]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f003 0203 	and.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d12c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	3b01      	subs	r3, #1
 8002df6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d123      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e06:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d11b      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d113      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d109      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d06b      	beq.n	8002f1c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d062      	beq.n	8002f10 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e4a:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0ac      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e5a:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a2d      	ldr	r2, [pc, #180]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002e60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e66:	f7fe ff7b 	bl	8001d60 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6e:	f7fe ff77 	bl	8001d60 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e099      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e8c:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <HAL_RCC_OscConfig+0x77c>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e9c:	3a01      	subs	r2, #1
 8002e9e:	0112      	lsls	r2, r2, #4
 8002ea0:	4311      	orrs	r1, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ea6:	0212      	lsls	r2, r2, #8
 8002ea8:	4311      	orrs	r1, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eae:	0852      	lsrs	r2, r2, #1
 8002eb0:	3a01      	subs	r2, #1
 8002eb2:	0552      	lsls	r2, r2, #21
 8002eb4:	4311      	orrs	r1, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002eba:	0852      	lsrs	r2, r2, #1
 8002ebc:	3a01      	subs	r2, #1
 8002ebe:	0652      	lsls	r2, r2, #25
 8002ec0:	4311      	orrs	r1, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ec6:	06d2      	lsls	r2, r2, #27
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	4912      	ldr	r1, [pc, #72]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ed0:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002edc:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ee8:	f7fe ff3a 	bl	8001d60 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fe ff36 	bl	8001d60 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e058      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f02:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <HAL_RCC_OscConfig+0x778>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f0e:	e050      	b.n	8002fb2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e04f      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
 8002f14:	40021000 	.word	0x40021000
 8002f18:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1c:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <HAL_RCC_OscConfig+0x820>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d144      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f28:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <HAL_RCC_OscConfig+0x820>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <HAL_RCC_OscConfig+0x820>)
 8002f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f34:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <HAL_RCC_OscConfig+0x820>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4a20      	ldr	r2, [pc, #128]	; (8002fbc <HAL_RCC_OscConfig+0x820>)
 8002f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f40:	f7fe ff0e 	bl	8001d60 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe ff0a 	bl	8001d60 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e02c      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5a:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <HAL_RCC_OscConfig+0x820>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x7ac>
 8002f66:	e024      	b.n	8002fb2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d01f      	beq.n	8002fae <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_RCC_OscConfig+0x820>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <HAL_RCC_OscConfig+0x820>)
 8002f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7a:	f7fe fef1 	bl	8001d60 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fe feed 	bl	8001d60 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e00f      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f94:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <HAL_RCC_OscConfig+0x820>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_RCC_OscConfig+0x820>)
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	4905      	ldr	r1, [pc, #20]	; (8002fbc <HAL_RCC_OscConfig+0x820>)
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60cb      	str	r3, [r1, #12]
 8002fac:	e001      	b.n	8002fb2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	feeefffc 	.word	0xfeeefffc

08002fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0e7      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b75      	ldr	r3, [pc, #468]	; (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d910      	bls.n	8003008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b72      	ldr	r3, [pc, #456]	; (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 0207 	bic.w	r2, r3, #7
 8002fee:	4970      	ldr	r1, [pc, #448]	; (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b6e      	ldr	r3, [pc, #440]	; (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0cf      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d010      	beq.n	8003036 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	4b66      	ldr	r3, [pc, #408]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003020:	429a      	cmp	r2, r3
 8003022:	d908      	bls.n	8003036 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003024:	4b63      	ldr	r3, [pc, #396]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4960      	ldr	r1, [pc, #384]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d04c      	beq.n	80030dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d107      	bne.n	800305a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304a:	4b5a      	ldr	r3, [pc, #360]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d121      	bne.n	800309a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e0a6      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003062:	4b54      	ldr	r3, [pc, #336]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d115      	bne.n	800309a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e09a      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800307a:	4b4e      	ldr	r3, [pc, #312]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e08e      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800308a:	4b4a      	ldr	r3, [pc, #296]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e086      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800309a:	4b46      	ldr	r3, [pc, #280]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f023 0203 	bic.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4943      	ldr	r1, [pc, #268]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ac:	f7fe fe58 	bl	8001d60 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b4:	f7fe fe54 	bl	8001d60 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e06e      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	4b3a      	ldr	r3, [pc, #232]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 020c 	and.w	r2, r3, #12
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	429a      	cmp	r2, r3
 80030da:	d1eb      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d010      	beq.n	800310a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d208      	bcs.n	800310a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f8:	4b2e      	ldr	r3, [pc, #184]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	492b      	ldr	r1, [pc, #172]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800310a:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d210      	bcs.n	800313a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003118:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 0207 	bic.w	r2, r3, #7
 8003120:	4923      	ldr	r1, [pc, #140]	; (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003128:	4b21      	ldr	r3, [pc, #132]	; (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d001      	beq.n	800313a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e036      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003146:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	4918      	ldr	r1, [pc, #96]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003154:	4313      	orrs	r3, r2
 8003156:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4910      	ldr	r1, [pc, #64]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003178:	f000 f824 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	490b      	ldr	r1, [pc, #44]	; (80031b8 <HAL_RCC_ClockConfig+0x1f4>)
 800318a:	5ccb      	ldrb	r3, [r1, r3]
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
 8003194:	4a09      	ldr	r2, [pc, #36]	; (80031bc <HAL_RCC_ClockConfig+0x1f8>)
 8003196:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003198:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_RCC_ClockConfig+0x1fc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fd8f 	bl	8001cc0 <HAL_InitTick>
 80031a2:	4603      	mov	r3, r0
 80031a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80031a6:	7afb      	ldrb	r3, [r7, #11]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40022000 	.word	0x40022000
 80031b4:	40021000 	.word	0x40021000
 80031b8:	0800a310 	.word	0x0800a310
 80031bc:	20000000 	.word	0x20000000
 80031c0:	20000004 	.word	0x20000004

080031c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	; 0x24
 80031c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d2:	4b3e      	ldr	r3, [pc, #248]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031dc:	4b3b      	ldr	r3, [pc, #236]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x34>
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b0c      	cmp	r3, #12
 80031f0:	d121      	bne.n	8003236 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d11e      	bne.n	8003236 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031f8:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003204:	4b31      	ldr	r3, [pc, #196]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	e005      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003214:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003220:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003228:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10d      	bne.n	800324c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003234:	e00a      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	2b04      	cmp	r3, #4
 800323a:	d102      	bne.n	8003242 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	e004      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d101      	bne.n	800324c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003248:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800324a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2b0c      	cmp	r3, #12
 8003250:	d134      	bne.n	80032bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003252:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d003      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0xa6>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b03      	cmp	r3, #3
 8003266:	d003      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0xac>
 8003268:	e005      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800326a:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800326c:	617b      	str	r3, [r7, #20]
      break;
 800326e:	e005      	b.n	800327c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003272:	617b      	str	r3, [r7, #20]
      break;
 8003274:	e002      	b.n	800327c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	617b      	str	r3, [r7, #20]
      break;
 800327a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800327c:	4b13      	ldr	r3, [pc, #76]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	3301      	adds	r3, #1
 8003288:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	fb03 f202 	mul.w	r2, r3, r2
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	0e5b      	lsrs	r3, r3, #25
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	3301      	adds	r3, #1
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032bc:	69bb      	ldr	r3, [r7, #24]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3724      	adds	r7, #36	; 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	0800a328 	.word	0x0800a328
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	007a1200 	.word	0x007a1200

080032dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000000 	.word	0x20000000

080032f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032f8:	f7ff fff0 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	0a1b      	lsrs	r3, r3, #8
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	4904      	ldr	r1, [pc, #16]	; (800331c <HAL_RCC_GetPCLK1Freq+0x28>)
 800330a:	5ccb      	ldrb	r3, [r1, r3]
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	0800a320 	.word	0x0800a320

08003320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003324:	f7ff ffda 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	0adb      	lsrs	r3, r3, #11
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4904      	ldr	r1, [pc, #16]	; (8003348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40021000 	.word	0x40021000
 8003348:	0800a320 	.word	0x0800a320

0800334c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003358:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003364:	f7ff f9b6 	bl	80026d4 <HAL_PWREx_GetVoltageRange>
 8003368:	6178      	str	r0, [r7, #20]
 800336a:	e014      	b.n	8003396 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800336c:	4b25      	ldr	r3, [pc, #148]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003370:	4a24      	ldr	r2, [pc, #144]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003376:	6593      	str	r3, [r2, #88]	; 0x58
 8003378:	4b22      	ldr	r3, [pc, #136]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003384:	f7ff f9a6 	bl	80026d4 <HAL_PWREx_GetVoltageRange>
 8003388:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003394:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339c:	d10b      	bne.n	80033b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b80      	cmp	r3, #128	; 0x80
 80033a2:	d919      	bls.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2ba0      	cmp	r3, #160	; 0xa0
 80033a8:	d902      	bls.n	80033b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033aa:	2302      	movs	r3, #2
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	e013      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033b0:	2301      	movs	r3, #1
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	e010      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b80      	cmp	r3, #128	; 0x80
 80033ba:	d902      	bls.n	80033c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033bc:	2303      	movs	r3, #3
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e00a      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b80      	cmp	r3, #128	; 0x80
 80033c6:	d102      	bne.n	80033ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033c8:	2302      	movs	r3, #2
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	e004      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b70      	cmp	r3, #112	; 0x70
 80033d2:	d101      	bne.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033d4:	2301      	movs	r3, #1
 80033d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 0207 	bic.w	r2, r3, #7
 80033e0:	4909      	ldr	r1, [pc, #36]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033e8:	4b07      	ldr	r3, [pc, #28]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	40022000 	.word	0x40022000

0800340c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003414:	2300      	movs	r3, #0
 8003416:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003418:	2300      	movs	r3, #0
 800341a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003424:	2b00      	cmp	r3, #0
 8003426:	d031      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003430:	d01a      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003432:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003436:	d814      	bhi.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d009      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800343c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003440:	d10f      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003442:	4b5d      	ldr	r3, [pc, #372]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	4a5c      	ldr	r2, [pc, #368]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800344e:	e00c      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	2100      	movs	r1, #0
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fa22 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 800345c:	4603      	mov	r3, r0
 800345e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003460:	e003      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	74fb      	strb	r3, [r7, #19]
      break;
 8003466:	e000      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800346a:	7cfb      	ldrb	r3, [r7, #19]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003470:	4b51      	ldr	r3, [pc, #324]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	494e      	ldr	r1, [pc, #312]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003486:	e001      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 809e 	beq.w	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800349e:	4b46      	ldr	r3, [pc, #280]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80034ae:	2300      	movs	r3, #0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b4:	4b40      	ldr	r3, [pc, #256]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	4a3f      	ldr	r2, [pc, #252]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034be:	6593      	str	r3, [r2, #88]	; 0x58
 80034c0:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034cc:	2301      	movs	r3, #1
 80034ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034d0:	4b3a      	ldr	r3, [pc, #232]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a39      	ldr	r2, [pc, #228]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80034d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034dc:	f7fe fc40 	bl	8001d60 <HAL_GetTick>
 80034e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034e2:	e009      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e4:	f7fe fc3c 	bl	8001d60 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d902      	bls.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	74fb      	strb	r3, [r7, #19]
        break;
 80034f6:	e005      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034f8:	4b30      	ldr	r3, [pc, #192]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0ef      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d15a      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800350a:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003514:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01e      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	429a      	cmp	r2, r3
 8003524:	d019      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003526:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003530:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003532:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003538:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800353a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800354a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003552:	4a19      	ldr	r2, [pc, #100]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d016      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe fbfc 	bl	8001d60 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356a:	e00b      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7fe fbf8 	bl	8001d60 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d902      	bls.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	74fb      	strb	r3, [r7, #19]
            break;
 8003582:	e006      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0ec      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003592:	7cfb      	ldrb	r3, [r7, #19]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003598:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	4904      	ldr	r1, [pc, #16]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035ae:	e009      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	74bb      	strb	r3, [r7, #18]
 80035b4:	e006      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c0:	7cfb      	ldrb	r3, [r7, #19]
 80035c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035c4:	7c7b      	ldrb	r3, [r7, #17]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d105      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ca:	4b8d      	ldr	r3, [pc, #564]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ce:	4a8c      	ldr	r2, [pc, #560]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e2:	4b87      	ldr	r3, [pc, #540]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f023 0203 	bic.w	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4983      	ldr	r1, [pc, #524]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003604:	4b7e      	ldr	r3, [pc, #504]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f023 020c 	bic.w	r2, r3, #12
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	497b      	ldr	r1, [pc, #492]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003626:	4b76      	ldr	r3, [pc, #472]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	4972      	ldr	r1, [pc, #456]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003648:	4b6d      	ldr	r3, [pc, #436]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	496a      	ldr	r1, [pc, #424]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800366a:	4b65      	ldr	r3, [pc, #404]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	4961      	ldr	r1, [pc, #388]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800368c:	4b5c      	ldr	r3, [pc, #368]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4959      	ldr	r1, [pc, #356]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ae:	4b54      	ldr	r3, [pc, #336]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	4950      	ldr	r1, [pc, #320]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036d0:	4b4b      	ldr	r3, [pc, #300]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	4948      	ldr	r1, [pc, #288]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036f2:	4b43      	ldr	r3, [pc, #268]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	493f      	ldr	r1, [pc, #252]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d028      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003714:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003722:	4937      	ldr	r1, [pc, #220]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003732:	d106      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003734:	4b32      	ldr	r3, [pc, #200]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a31      	ldr	r2, [pc, #196]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800373a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800373e:	60d3      	str	r3, [r2, #12]
 8003740:	e011      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003746:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800374a:	d10c      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3304      	adds	r3, #4
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f8a4 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003762:	7cfb      	ldrb	r3, [r7, #19]
 8003764:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d028      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003772:	4b23      	ldr	r3, [pc, #140]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003780:	491f      	ldr	r1, [pc, #124]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003790:	d106      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003792:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	4a1a      	ldr	r2, [pc, #104]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800379c:	60d3      	str	r3, [r2, #12]
 800379e:	e011      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 f875 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d02b      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037de:	4908      	ldr	r1, [pc, #32]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ee:	d109      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4a02      	ldr	r2, [pc, #8]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037fa:	60d3      	str	r3, [r2, #12]
 80037fc:	e014      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800380c:	d10c      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3304      	adds	r3, #4
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f843 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01c      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003834:	4b19      	ldr	r3, [pc, #100]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	4916      	ldr	r1, [pc, #88]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003852:	d10c      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	2102      	movs	r1, #2
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f820 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800386a:	7cfb      	ldrb	r3, [r7, #19]
 800386c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800387a:	4b08      	ldr	r3, [pc, #32]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003880:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	4904      	ldr	r1, [pc, #16]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003890:	7cbb      	ldrb	r3, [r7, #18]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000

080038a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ae:	4b74      	ldr	r3, [pc, #464]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d018      	beq.n	80038ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038ba:	4b71      	ldr	r3, [pc, #452]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0203 	and.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d10d      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
       ||
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038d2:	4b6b      	ldr	r3, [pc, #428]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
       ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d047      	beq.n	8003976 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	e044      	b.n	8003976 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d018      	beq.n	8003926 <RCCEx_PLLSAI1_Config+0x86>
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d825      	bhi.n	8003944 <RCCEx_PLLSAI1_Config+0xa4>
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d002      	beq.n	8003902 <RCCEx_PLLSAI1_Config+0x62>
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d009      	beq.n	8003914 <RCCEx_PLLSAI1_Config+0x74>
 8003900:	e020      	b.n	8003944 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003902:	4b5f      	ldr	r3, [pc, #380]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d11d      	bne.n	800394a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003912:	e01a      	b.n	800394a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003914:	4b5a      	ldr	r3, [pc, #360]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391c:	2b00      	cmp	r3, #0
 800391e:	d116      	bne.n	800394e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003924:	e013      	b.n	800394e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003926:	4b56      	ldr	r3, [pc, #344]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003932:	4b53      	ldr	r3, [pc, #332]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003942:	e006      	b.n	8003952 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      break;
 8003948:	e004      	b.n	8003954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800394a:	bf00      	nop
 800394c:	e002      	b.n	8003954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800394e:	bf00      	nop
 8003950:	e000      	b.n	8003954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003952:	bf00      	nop
    }

    if(status == HAL_OK)
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10d      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800395a:	4b49      	ldr	r3, [pc, #292]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	430b      	orrs	r3, r1
 8003970:	4943      	ldr	r1, [pc, #268]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003972:	4313      	orrs	r3, r2
 8003974:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d17c      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800397c:	4b40      	ldr	r3, [pc, #256]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a3f      	ldr	r2, [pc, #252]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003988:	f7fe f9ea 	bl	8001d60 <HAL_GetTick>
 800398c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800398e:	e009      	b.n	80039a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003990:	f7fe f9e6 	bl	8001d60 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d902      	bls.n	80039a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	73fb      	strb	r3, [r7, #15]
        break;
 80039a2:	e005      	b.n	80039b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039a4:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ef      	bne.n	8003990 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d15f      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d110      	bne.n	80039de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039bc:	4b30      	ldr	r3, [pc, #192]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80039c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6892      	ldr	r2, [r2, #8]
 80039cc:	0211      	lsls	r1, r2, #8
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d2      	ldr	r2, [r2, #12]
 80039d2:	06d2      	lsls	r2, r2, #27
 80039d4:	430a      	orrs	r2, r1
 80039d6:	492a      	ldr	r1, [pc, #168]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	610b      	str	r3, [r1, #16]
 80039dc:	e027      	b.n	8003a2e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d112      	bne.n	8003a0a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e4:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80039ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6892      	ldr	r2, [r2, #8]
 80039f4:	0211      	lsls	r1, r2, #8
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6912      	ldr	r2, [r2, #16]
 80039fa:	0852      	lsrs	r2, r2, #1
 80039fc:	3a01      	subs	r2, #1
 80039fe:	0552      	lsls	r2, r2, #21
 8003a00:	430a      	orrs	r2, r1
 8003a02:	491f      	ldr	r1, [pc, #124]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	610b      	str	r3, [r1, #16]
 8003a08:	e011      	b.n	8003a2e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6892      	ldr	r2, [r2, #8]
 8003a1a:	0211      	lsls	r1, r2, #8
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6952      	ldr	r2, [r2, #20]
 8003a20:	0852      	lsrs	r2, r2, #1
 8003a22:	3a01      	subs	r2, #1
 8003a24:	0652      	lsls	r2, r2, #25
 8003a26:	430a      	orrs	r2, r1
 8003a28:	4915      	ldr	r1, [pc, #84]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a2e:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3a:	f7fe f991 	bl	8001d60 <HAL_GetTick>
 8003a3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a40:	e009      	b.n	8003a56 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a42:	f7fe f98d 	bl	8001d60 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d902      	bls.n	8003a56 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	73fb      	strb	r3, [r7, #15]
          break;
 8003a54:	e005      	b.n	8003a62 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0ef      	beq.n	8003a42 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d106      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	4903      	ldr	r1, [pc, #12]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000

08003a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e095      	b.n	8003bc2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d108      	bne.n	8003ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aa6:	d009      	beq.n	8003abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	61da      	str	r2, [r3, #28]
 8003aae:	e005      	b.n	8003abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fd fc5e 	bl	8001398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003afc:	d902      	bls.n	8003b04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	e002      	b.n	8003b0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b12:	d007      	beq.n	8003b24 <HAL_SPI_Init+0xa0>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b1c:	d002      	beq.n	8003b24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	ea42 0103 	orr.w	r1, r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	0c1b      	lsrs	r3, r3, #16
 8003b80:	f003 0204 	and.w	r2, r3, #4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ba0:	ea42 0103 	orr.w	r1, r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e049      	b.n	8003c70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fd feab 	bl	800194c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3304      	adds	r3, #4
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f000 fa75 	bl	80040f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e049      	b.n	8003d1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f841 	bl	8003d26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f000 fa1e 	bl	80040f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e0ff      	b.n	8003f5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b14      	cmp	r3, #20
 8003d66:	f200 80f0 	bhi.w	8003f4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d6a:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003dc5 	.word	0x08003dc5
 8003d74:	08003f4b 	.word	0x08003f4b
 8003d78:	08003f4b 	.word	0x08003f4b
 8003d7c:	08003f4b 	.word	0x08003f4b
 8003d80:	08003e05 	.word	0x08003e05
 8003d84:	08003f4b 	.word	0x08003f4b
 8003d88:	08003f4b 	.word	0x08003f4b
 8003d8c:	08003f4b 	.word	0x08003f4b
 8003d90:	08003e47 	.word	0x08003e47
 8003d94:	08003f4b 	.word	0x08003f4b
 8003d98:	08003f4b 	.word	0x08003f4b
 8003d9c:	08003f4b 	.word	0x08003f4b
 8003da0:	08003e87 	.word	0x08003e87
 8003da4:	08003f4b 	.word	0x08003f4b
 8003da8:	08003f4b 	.word	0x08003f4b
 8003dac:	08003f4b 	.word	0x08003f4b
 8003db0:	08003ec9 	.word	0x08003ec9
 8003db4:	08003f4b 	.word	0x08003f4b
 8003db8:	08003f4b 	.word	0x08003f4b
 8003dbc:	08003f4b 	.word	0x08003f4b
 8003dc0:	08003f09 	.word	0x08003f09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f9f8 	bl	80041c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0208 	orr.w	r2, r2, #8
 8003dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0204 	bic.w	r2, r2, #4
 8003dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6999      	ldr	r1, [r3, #24]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	619a      	str	r2, [r3, #24]
      break;
 8003e02:	e0a5      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fa54 	bl	80042b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6999      	ldr	r1, [r3, #24]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	021a      	lsls	r2, r3, #8
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	619a      	str	r2, [r3, #24]
      break;
 8003e44:	e084      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 faad 	bl	80043ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0208 	orr.w	r2, r2, #8
 8003e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0204 	bic.w	r2, r2, #4
 8003e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69d9      	ldr	r1, [r3, #28]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	61da      	str	r2, [r3, #28]
      break;
 8003e84:	e064      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fb05 	bl	800449c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69d9      	ldr	r1, [r3, #28]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	021a      	lsls	r2, r3, #8
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	61da      	str	r2, [r3, #28]
      break;
 8003ec6:	e043      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fb42 	bl	8004558 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0208 	orr.w	r2, r2, #8
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0204 	bic.w	r2, r2, #4
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f06:	e023      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fb7a 	bl	8004608 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	021a      	lsls	r2, r3, #8
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f48:	e002      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop

08003f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIM_ConfigClockSource+0x1c>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e0b6      	b.n	80040ee <HAL_TIM_ConfigClockSource+0x18a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003faa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbc:	d03e      	beq.n	800403c <HAL_TIM_ConfigClockSource+0xd8>
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc2:	f200 8087 	bhi.w	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	f000 8086 	beq.w	80040da <HAL_TIM_ConfigClockSource+0x176>
 8003fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd2:	d87f      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8003fd4:	2b70      	cmp	r3, #112	; 0x70
 8003fd6:	d01a      	beq.n	800400e <HAL_TIM_ConfigClockSource+0xaa>
 8003fd8:	2b70      	cmp	r3, #112	; 0x70
 8003fda:	d87b      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8003fdc:	2b60      	cmp	r3, #96	; 0x60
 8003fde:	d050      	beq.n	8004082 <HAL_TIM_ConfigClockSource+0x11e>
 8003fe0:	2b60      	cmp	r3, #96	; 0x60
 8003fe2:	d877      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8003fe4:	2b50      	cmp	r3, #80	; 0x50
 8003fe6:	d03c      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0xfe>
 8003fe8:	2b50      	cmp	r3, #80	; 0x50
 8003fea:	d873      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d058      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x13e>
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d86f      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8003ff4:	2b30      	cmp	r3, #48	; 0x30
 8003ff6:	d064      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15e>
 8003ff8:	2b30      	cmp	r3, #48	; 0x30
 8003ffa:	d86b      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d060      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15e>
 8004000:	2b20      	cmp	r3, #32
 8004002:	d867      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d05c      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15e>
 8004008:	2b10      	cmp	r3, #16
 800400a:	d05a      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15e>
 800400c:	e062      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6899      	ldr	r1, [r3, #8]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f000 fbc7 	bl	80047b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	609a      	str	r2, [r3, #8]
      break;
 800403a:	e04f      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6899      	ldr	r1, [r3, #8]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f000 fbb0 	bl	80047b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800405e:	609a      	str	r2, [r3, #8]
      break;
 8004060:	e03c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	461a      	mov	r2, r3
 8004070:	f000 fb24 	bl	80046bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2150      	movs	r1, #80	; 0x50
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fb7d 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 8004080:	e02c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	461a      	mov	r2, r3
 8004090:	f000 fb43 	bl	800471a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2160      	movs	r1, #96	; 0x60
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fb6d 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 80040a0:	e01c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f000 fb04 	bl	80046bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2140      	movs	r1, #64	; 0x40
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fb5d 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 80040c0:	e00c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4619      	mov	r1, r3
 80040cc:	4610      	mov	r0, r2
 80040ce:	f000 fb54 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 80040d2:	e003      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e000      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80040da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a2a      	ldr	r2, [pc, #168]	; (80041b4 <TIM_Base_SetConfig+0xbc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_Base_SetConfig+0x20>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004116:	d108      	bne.n	800412a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a21      	ldr	r2, [pc, #132]	; (80041b4 <TIM_Base_SetConfig+0xbc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00b      	beq.n	800414a <TIM_Base_SetConfig+0x52>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004138:	d007      	beq.n	800414a <TIM_Base_SetConfig+0x52>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <TIM_Base_SetConfig+0xc0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d003      	beq.n	800414a <TIM_Base_SetConfig+0x52>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <TIM_Base_SetConfig+0xc4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d108      	bne.n	800415c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a0c      	ldr	r2, [pc, #48]	; (80041b4 <TIM_Base_SetConfig+0xbc>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d007      	beq.n	8004198 <TIM_Base_SetConfig+0xa0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a0b      	ldr	r2, [pc, #44]	; (80041b8 <TIM_Base_SetConfig+0xc0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d003      	beq.n	8004198 <TIM_Base_SetConfig+0xa0>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <TIM_Base_SetConfig+0xc4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d103      	bne.n	80041a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	615a      	str	r2, [r3, #20]
}
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40012c00 	.word	0x40012c00
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40014400 	.word	0x40014400

080041c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 0201 	bic.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f023 0302 	bic.w	r3, r3, #2
 800420c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a24      	ldr	r2, [pc, #144]	; (80042ac <TIM_OC1_SetConfig+0xec>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d007      	beq.n	8004230 <TIM_OC1_SetConfig+0x70>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a23      	ldr	r2, [pc, #140]	; (80042b0 <TIM_OC1_SetConfig+0xf0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d003      	beq.n	8004230 <TIM_OC1_SetConfig+0x70>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <TIM_OC1_SetConfig+0xf4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d10c      	bne.n	800424a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f023 0308 	bic.w	r3, r3, #8
 8004236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	4313      	orrs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f023 0304 	bic.w	r3, r3, #4
 8004248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a17      	ldr	r2, [pc, #92]	; (80042ac <TIM_OC1_SetConfig+0xec>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d007      	beq.n	8004262 <TIM_OC1_SetConfig+0xa2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a16      	ldr	r2, [pc, #88]	; (80042b0 <TIM_OC1_SetConfig+0xf0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d003      	beq.n	8004262 <TIM_OC1_SetConfig+0xa2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a15      	ldr	r2, [pc, #84]	; (80042b4 <TIM_OC1_SetConfig+0xf4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d111      	bne.n	8004286 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	621a      	str	r2, [r3, #32]
}
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	40012c00 	.word	0x40012c00
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40014400 	.word	0x40014400

080042b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f023 0210 	bic.w	r2, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f023 0320 	bic.w	r3, r3, #32
 8004306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <TIM_OC2_SetConfig+0xe8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d10d      	bne.n	8004338 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004336:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a19      	ldr	r2, [pc, #100]	; (80043a0 <TIM_OC2_SetConfig+0xe8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d007      	beq.n	8004350 <TIM_OC2_SetConfig+0x98>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <TIM_OC2_SetConfig+0xec>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <TIM_OC2_SetConfig+0x98>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a17      	ldr	r2, [pc, #92]	; (80043a8 <TIM_OC2_SetConfig+0xf0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d113      	bne.n	8004378 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004356:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800435e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	621a      	str	r2, [r3, #32]
}
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40012c00 	.word	0x40012c00
 80043a4:	40014000 	.word	0x40014000
 80043a8:	40014400 	.word	0x40014400

080043ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0303 	bic.w	r3, r3, #3
 80043e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a21      	ldr	r2, [pc, #132]	; (8004490 <TIM_OC3_SetConfig+0xe4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d10d      	bne.n	800442a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a18      	ldr	r2, [pc, #96]	; (8004490 <TIM_OC3_SetConfig+0xe4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d007      	beq.n	8004442 <TIM_OC3_SetConfig+0x96>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a17      	ldr	r2, [pc, #92]	; (8004494 <TIM_OC3_SetConfig+0xe8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d003      	beq.n	8004442 <TIM_OC3_SetConfig+0x96>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a16      	ldr	r2, [pc, #88]	; (8004498 <TIM_OC3_SetConfig+0xec>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d113      	bne.n	800446a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	621a      	str	r2, [r3, #32]
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40012c00 	.word	0x40012c00
 8004494:	40014000 	.word	0x40014000
 8004498:	40014400 	.word	0x40014400

0800449c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	031b      	lsls	r3, r3, #12
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a14      	ldr	r2, [pc, #80]	; (800454c <TIM_OC4_SetConfig+0xb0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d007      	beq.n	8004510 <TIM_OC4_SetConfig+0x74>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a13      	ldr	r2, [pc, #76]	; (8004550 <TIM_OC4_SetConfig+0xb4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <TIM_OC4_SetConfig+0x74>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a12      	ldr	r2, [pc, #72]	; (8004554 <TIM_OC4_SetConfig+0xb8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d109      	bne.n	8004524 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004516:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	019b      	lsls	r3, r3, #6
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	621a      	str	r2, [r3, #32]
}
 800453e:	bf00      	nop
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40014000 	.word	0x40014000
 8004554:	40014400 	.word	0x40014400

08004558 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800459c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	041b      	lsls	r3, r3, #16
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a13      	ldr	r2, [pc, #76]	; (80045fc <TIM_OC5_SetConfig+0xa4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d007      	beq.n	80045c2 <TIM_OC5_SetConfig+0x6a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a12      	ldr	r2, [pc, #72]	; (8004600 <TIM_OC5_SetConfig+0xa8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d003      	beq.n	80045c2 <TIM_OC5_SetConfig+0x6a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a11      	ldr	r2, [pc, #68]	; (8004604 <TIM_OC5_SetConfig+0xac>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d109      	bne.n	80045d6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	621a      	str	r2, [r3, #32]
}
 80045f0:	bf00      	nop
 80045f2:	371c      	adds	r7, #28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40014000 	.word	0x40014000
 8004604:	40014400 	.word	0x40014400

08004608 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800464e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	051b      	lsls	r3, r3, #20
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <TIM_OC6_SetConfig+0xa8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d007      	beq.n	8004674 <TIM_OC6_SetConfig+0x6c>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <TIM_OC6_SetConfig+0xac>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_OC6_SetConfig+0x6c>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <TIM_OC6_SetConfig+0xb0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d109      	bne.n	8004688 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800467a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	029b      	lsls	r3, r3, #10
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40012c00 	.word	0x40012c00
 80046b4:	40014000 	.word	0x40014000
 80046b8:	40014400 	.word	0x40014400

080046bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f023 0201 	bic.w	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f023 030a 	bic.w	r3, r3, #10
 80046f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	bf00      	nop
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800471a:	b480      	push	{r7}
 800471c:	b087      	sub	sp, #28
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f023 0210 	bic.w	r2, r3, #16
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	031b      	lsls	r3, r3, #12
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	f043 0307 	orr.w	r3, r3, #7
 800479c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	609a      	str	r2, [r3, #8]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	021a      	lsls	r2, r3, #8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	609a      	str	r2, [r3, #8]
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004804:	2302      	movs	r3, #2
 8004806:	e04f      	b.n	80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a21      	ldr	r2, [pc, #132]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d108      	bne.n	8004844 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004838:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d009      	beq.n	800487c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004870:	d004      	beq.n	800487c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a10      	ldr	r2, [pc, #64]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d10c      	bne.n	8004896 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004882:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	4313      	orrs	r3, r2
 800488c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40014000 	.word	0x40014000

080048bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e060      	b.n	800499a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a14      	ldr	r2, [pc, #80]	; (80049a8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d115      	bne.n	8004988 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	051b      	lsls	r3, r3, #20
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40012c00 	.word	0x40012c00

080049ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e040      	b.n	8004a40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fd f89e 	bl	8001b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2224      	movs	r2, #36	; 0x24
 80049d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0201 	bic.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fb2e 	bl	800504c <UART_SetConfig>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e022      	b.n	8004a40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fd7c 	bl	8005500 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fe03 	bl	8005644 <UART_CheckIdleState>
 8004a3e:	4603      	mov	r3, r0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b0ba      	sub	sp, #232	; 0xe8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a72:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a76:	4013      	ands	r3, r2
 8004a78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d115      	bne.n	8004ab0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00f      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d009      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 82a6 	beq.w	8004ff2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	4798      	blx	r3
      }
      return;
 8004aae:	e2a0      	b.n	8004ff2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8117 	beq.w	8004ce8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ac6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004aca:	4b85      	ldr	r3, [pc, #532]	; (8004ce0 <HAL_UART_IRQHandler+0x298>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 810a 	beq.w	8004ce8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d011      	beq.n	8004b04 <HAL_UART_IRQHandler+0xbc>
 8004ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00b      	beq.n	8004b04 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2201      	movs	r2, #1
 8004af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004afa:	f043 0201 	orr.w	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d011      	beq.n	8004b34 <HAL_UART_IRQHandler+0xec>
 8004b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00b      	beq.n	8004b34 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2202      	movs	r2, #2
 8004b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b2a:	f043 0204 	orr.w	r2, r3, #4
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d011      	beq.n	8004b64 <HAL_UART_IRQHandler+0x11c>
 8004b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00b      	beq.n	8004b64 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2204      	movs	r2, #4
 8004b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b5a:	f043 0202 	orr.w	r2, r3, #2
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d017      	beq.n	8004ba0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00b      	beq.n	8004ba0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b96:	f043 0208 	orr.w	r2, r3, #8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d012      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x18a>
 8004bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00c      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc8:	f043 0220 	orr.w	r2, r3, #32
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 820c 	beq.w	8004ff6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00d      	beq.n	8004c06 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b40      	cmp	r3, #64	; 0x40
 8004c1c:	d005      	beq.n	8004c2a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d04f      	beq.n	8004cca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fe17 	bl	800585e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b40      	cmp	r3, #64	; 0x40
 8004c3c:	d141      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3308      	adds	r3, #8
 8004c44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3308      	adds	r3, #8
 8004c66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1d9      	bne.n	8004c3e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d013      	beq.n	8004cba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	4a13      	ldr	r2, [pc, #76]	; (8004ce4 <HAL_UART_IRQHandler+0x29c>)
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fd fa72 	bl	8002188 <HAL_DMA_Abort_IT>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d017      	beq.n	8004cda <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	e00f      	b.n	8004cda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f9b0 	bl	8005020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc0:	e00b      	b.n	8004cda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f9ac 	bl	8005020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	e007      	b.n	8004cda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f9a8 	bl	8005020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004cd8:	e18d      	b.n	8004ff6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cda:	bf00      	nop
    return;
 8004cdc:	e18b      	b.n	8004ff6 <HAL_UART_IRQHandler+0x5ae>
 8004cde:	bf00      	nop
 8004ce0:	04000120 	.word	0x04000120
 8004ce4:	08005925 	.word	0x08005925

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	f040 8146 	bne.w	8004f7e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 813f 	beq.w	8004f7e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 8138 	beq.w	8004f7e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2210      	movs	r2, #16
 8004d14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b40      	cmp	r3, #64	; 0x40
 8004d22:	f040 80b4 	bne.w	8004e8e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 815f 	beq.w	8004ffa <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d46:	429a      	cmp	r2, r3
 8004d48:	f080 8157 	bcs.w	8004ffa <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f040 8085 	bne.w	8004e72 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1da      	bne.n	8004d68 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3308      	adds	r3, #8
 8004db8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004dda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004dde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e1      	bne.n	8004db2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3308      	adds	r3, #8
 8004df4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e3      	bne.n	8004dee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e3a:	e853 3f00 	ldrex	r3, [r3]
 8004e3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e42:	f023 0310 	bic.w	r3, r3, #16
 8004e46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e54:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e4      	bne.n	8004e32 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fd f94d 	bl	800210c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f8d4 	bl	8005034 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e8c:	e0b5      	b.n	8004ffa <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80a7 	beq.w	8004ffe <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80a2 	beq.w	8004ffe <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	e853 3f00 	ldrex	r3, [r3]
 8004ec6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ece:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004edc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ede:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e4      	bne.n	8004eba <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	623b      	str	r3, [r7, #32]
   return(result);
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f14:	633a      	str	r2, [r7, #48]	; 0x30
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e3      	bne.n	8004ef0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0310 	bic.w	r3, r3, #16
 8004f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f5c:	61fb      	str	r3, [r7, #28]
 8004f5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	69b9      	ldr	r1, [r7, #24]
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	e841 2300 	strex	r3, r2, [r1]
 8004f68:	617b      	str	r3, [r7, #20]
   return(result);
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e4      	bne.n	8004f3a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f85c 	bl	8005034 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f7c:	e03f      	b.n	8004ffe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00e      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x560>
 8004f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d008      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fcff 	bl	80059a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fa6:	e02d      	b.n	8005004 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01c      	beq.n	8005002 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	4798      	blx	r3
    }
    return;
 8004fd0:	e017      	b.n	8005002 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d012      	beq.n	8005004 <HAL_UART_IRQHandler+0x5bc>
 8004fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00c      	beq.n	8005004 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fcb0 	bl	8005950 <UART_EndTransmit_IT>
    return;
 8004ff0:	e008      	b.n	8005004 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004ff2:	bf00      	nop
 8004ff4:	e006      	b.n	8005004 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004ff6:	bf00      	nop
 8004ff8:	e004      	b.n	8005004 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004ffa:	bf00      	nop
 8004ffc:	e002      	b.n	8005004 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004ffe:	bf00      	nop
 8005000:	e000      	b.n	8005004 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005002:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005004:	37e8      	adds	r7, #232	; 0xe8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop

0800500c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	460b      	mov	r3, r1
 800503e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800504c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005050:	b08a      	sub	sp, #40	; 0x28
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	431a      	orrs	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	431a      	orrs	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	4313      	orrs	r3, r2
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b9e      	ldr	r3, [pc, #632]	; (80052f4 <UART_SetConfig+0x2a8>)
 800507c:	4013      	ands	r3, r2
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005084:	430b      	orrs	r3, r1
 8005086:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a93      	ldr	r2, [pc, #588]	; (80052f8 <UART_SetConfig+0x2ac>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b4:	4313      	orrs	r3, r2
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c8:	430a      	orrs	r2, r1
 80050ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a8a      	ldr	r2, [pc, #552]	; (80052fc <UART_SetConfig+0x2b0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d126      	bne.n	8005124 <UART_SetConfig+0xd8>
 80050d6:	4b8a      	ldr	r3, [pc, #552]	; (8005300 <UART_SetConfig+0x2b4>)
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d81b      	bhi.n	800511c <UART_SetConfig+0xd0>
 80050e4:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <UART_SetConfig+0xa0>)
 80050e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ea:	bf00      	nop
 80050ec:	080050fd 	.word	0x080050fd
 80050f0:	0800510d 	.word	0x0800510d
 80050f4:	08005105 	.word	0x08005105
 80050f8:	08005115 	.word	0x08005115
 80050fc:	2301      	movs	r3, #1
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005102:	e0ab      	b.n	800525c <UART_SetConfig+0x210>
 8005104:	2302      	movs	r3, #2
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510a:	e0a7      	b.n	800525c <UART_SetConfig+0x210>
 800510c:	2304      	movs	r3, #4
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005112:	e0a3      	b.n	800525c <UART_SetConfig+0x210>
 8005114:	2308      	movs	r3, #8
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511a:	e09f      	b.n	800525c <UART_SetConfig+0x210>
 800511c:	2310      	movs	r3, #16
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005122:	e09b      	b.n	800525c <UART_SetConfig+0x210>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a76      	ldr	r2, [pc, #472]	; (8005304 <UART_SetConfig+0x2b8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d138      	bne.n	80051a0 <UART_SetConfig+0x154>
 800512e:	4b74      	ldr	r3, [pc, #464]	; (8005300 <UART_SetConfig+0x2b4>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005134:	f003 030c 	and.w	r3, r3, #12
 8005138:	2b0c      	cmp	r3, #12
 800513a:	d82d      	bhi.n	8005198 <UART_SetConfig+0x14c>
 800513c:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <UART_SetConfig+0xf8>)
 800513e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005142:	bf00      	nop
 8005144:	08005179 	.word	0x08005179
 8005148:	08005199 	.word	0x08005199
 800514c:	08005199 	.word	0x08005199
 8005150:	08005199 	.word	0x08005199
 8005154:	08005189 	.word	0x08005189
 8005158:	08005199 	.word	0x08005199
 800515c:	08005199 	.word	0x08005199
 8005160:	08005199 	.word	0x08005199
 8005164:	08005181 	.word	0x08005181
 8005168:	08005199 	.word	0x08005199
 800516c:	08005199 	.word	0x08005199
 8005170:	08005199 	.word	0x08005199
 8005174:	08005191 	.word	0x08005191
 8005178:	2300      	movs	r3, #0
 800517a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517e:	e06d      	b.n	800525c <UART_SetConfig+0x210>
 8005180:	2302      	movs	r3, #2
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005186:	e069      	b.n	800525c <UART_SetConfig+0x210>
 8005188:	2304      	movs	r3, #4
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518e:	e065      	b.n	800525c <UART_SetConfig+0x210>
 8005190:	2308      	movs	r3, #8
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005196:	e061      	b.n	800525c <UART_SetConfig+0x210>
 8005198:	2310      	movs	r3, #16
 800519a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519e:	e05d      	b.n	800525c <UART_SetConfig+0x210>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a58      	ldr	r2, [pc, #352]	; (8005308 <UART_SetConfig+0x2bc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d125      	bne.n	80051f6 <UART_SetConfig+0x1aa>
 80051aa:	4b55      	ldr	r3, [pc, #340]	; (8005300 <UART_SetConfig+0x2b4>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051b4:	2b30      	cmp	r3, #48	; 0x30
 80051b6:	d016      	beq.n	80051e6 <UART_SetConfig+0x19a>
 80051b8:	2b30      	cmp	r3, #48	; 0x30
 80051ba:	d818      	bhi.n	80051ee <UART_SetConfig+0x1a2>
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d00a      	beq.n	80051d6 <UART_SetConfig+0x18a>
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d814      	bhi.n	80051ee <UART_SetConfig+0x1a2>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <UART_SetConfig+0x182>
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d008      	beq.n	80051de <UART_SetConfig+0x192>
 80051cc:	e00f      	b.n	80051ee <UART_SetConfig+0x1a2>
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d4:	e042      	b.n	800525c <UART_SetConfig+0x210>
 80051d6:	2302      	movs	r3, #2
 80051d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051dc:	e03e      	b.n	800525c <UART_SetConfig+0x210>
 80051de:	2304      	movs	r3, #4
 80051e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e4:	e03a      	b.n	800525c <UART_SetConfig+0x210>
 80051e6:	2308      	movs	r3, #8
 80051e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ec:	e036      	b.n	800525c <UART_SetConfig+0x210>
 80051ee:	2310      	movs	r3, #16
 80051f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f4:	e032      	b.n	800525c <UART_SetConfig+0x210>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a3f      	ldr	r2, [pc, #252]	; (80052f8 <UART_SetConfig+0x2ac>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d12a      	bne.n	8005256 <UART_SetConfig+0x20a>
 8005200:	4b3f      	ldr	r3, [pc, #252]	; (8005300 <UART_SetConfig+0x2b4>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005206:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800520a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800520e:	d01a      	beq.n	8005246 <UART_SetConfig+0x1fa>
 8005210:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005214:	d81b      	bhi.n	800524e <UART_SetConfig+0x202>
 8005216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800521a:	d00c      	beq.n	8005236 <UART_SetConfig+0x1ea>
 800521c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005220:	d815      	bhi.n	800524e <UART_SetConfig+0x202>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <UART_SetConfig+0x1e2>
 8005226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800522a:	d008      	beq.n	800523e <UART_SetConfig+0x1f2>
 800522c:	e00f      	b.n	800524e <UART_SetConfig+0x202>
 800522e:	2300      	movs	r3, #0
 8005230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005234:	e012      	b.n	800525c <UART_SetConfig+0x210>
 8005236:	2302      	movs	r3, #2
 8005238:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523c:	e00e      	b.n	800525c <UART_SetConfig+0x210>
 800523e:	2304      	movs	r3, #4
 8005240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005244:	e00a      	b.n	800525c <UART_SetConfig+0x210>
 8005246:	2308      	movs	r3, #8
 8005248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524c:	e006      	b.n	800525c <UART_SetConfig+0x210>
 800524e:	2310      	movs	r3, #16
 8005250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005254:	e002      	b.n	800525c <UART_SetConfig+0x210>
 8005256:	2310      	movs	r3, #16
 8005258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a25      	ldr	r2, [pc, #148]	; (80052f8 <UART_SetConfig+0x2ac>)
 8005262:	4293      	cmp	r3, r2
 8005264:	f040 808a 	bne.w	800537c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005268:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800526c:	2b08      	cmp	r3, #8
 800526e:	d824      	bhi.n	80052ba <UART_SetConfig+0x26e>
 8005270:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <UART_SetConfig+0x22c>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	0800529d 	.word	0x0800529d
 800527c:	080052bb 	.word	0x080052bb
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052bb 	.word	0x080052bb
 8005288:	080052ab 	.word	0x080052ab
 800528c:	080052bb 	.word	0x080052bb
 8005290:	080052bb 	.word	0x080052bb
 8005294:	080052bb 	.word	0x080052bb
 8005298:	080052b3 	.word	0x080052b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800529c:	f7fe f82a 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 80052a0:	61f8      	str	r0, [r7, #28]
        break;
 80052a2:	e010      	b.n	80052c6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a4:	4b19      	ldr	r3, [pc, #100]	; (800530c <UART_SetConfig+0x2c0>)
 80052a6:	61fb      	str	r3, [r7, #28]
        break;
 80052a8:	e00d      	b.n	80052c6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052aa:	f7fd ff8b 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 80052ae:	61f8      	str	r0, [r7, #28]
        break;
 80052b0:	e009      	b.n	80052c6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052b6:	61fb      	str	r3, [r7, #28]
        break;
 80052b8:	e005      	b.n	80052c6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8109 	beq.w	80054e0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	4413      	add	r3, r2
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d305      	bcc.n	80052ea <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d912      	bls.n	8005310 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052f0:	e0f6      	b.n	80054e0 <UART_SetConfig+0x494>
 80052f2:	bf00      	nop
 80052f4:	efff69f3 	.word	0xefff69f3
 80052f8:	40008000 	.word	0x40008000
 80052fc:	40013800 	.word	0x40013800
 8005300:	40021000 	.word	0x40021000
 8005304:	40004400 	.word	0x40004400
 8005308:	40004800 	.word	0x40004800
 800530c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	2200      	movs	r2, #0
 8005314:	461c      	mov	r4, r3
 8005316:	4615      	mov	r5, r2
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	022b      	lsls	r3, r5, #8
 8005322:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005326:	0222      	lsls	r2, r4, #8
 8005328:	68f9      	ldr	r1, [r7, #12]
 800532a:	6849      	ldr	r1, [r1, #4]
 800532c:	0849      	lsrs	r1, r1, #1
 800532e:	2000      	movs	r0, #0
 8005330:	4688      	mov	r8, r1
 8005332:	4681      	mov	r9, r0
 8005334:	eb12 0a08 	adds.w	sl, r2, r8
 8005338:	eb43 0b09 	adc.w	fp, r3, r9
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	607a      	str	r2, [r7, #4]
 8005346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800534a:	4650      	mov	r0, sl
 800534c:	4659      	mov	r1, fp
 800534e:	f7fb fc9b 	bl	8000c88 <__aeabi_uldivmod>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4613      	mov	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005360:	d308      	bcc.n	8005374 <UART_SetConfig+0x328>
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005368:	d204      	bcs.n	8005374 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	60da      	str	r2, [r3, #12]
 8005372:	e0b5      	b.n	80054e0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800537a:	e0b1      	b.n	80054e0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005384:	d15d      	bne.n	8005442 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005386:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800538a:	2b08      	cmp	r3, #8
 800538c:	d827      	bhi.n	80053de <UART_SetConfig+0x392>
 800538e:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0x348>)
 8005390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005394:	080053b9 	.word	0x080053b9
 8005398:	080053c1 	.word	0x080053c1
 800539c:	080053c9 	.word	0x080053c9
 80053a0:	080053df 	.word	0x080053df
 80053a4:	080053cf 	.word	0x080053cf
 80053a8:	080053df 	.word	0x080053df
 80053ac:	080053df 	.word	0x080053df
 80053b0:	080053df 	.word	0x080053df
 80053b4:	080053d7 	.word	0x080053d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b8:	f7fd ff9c 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 80053bc:	61f8      	str	r0, [r7, #28]
        break;
 80053be:	e014      	b.n	80053ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c0:	f7fd ffae 	bl	8003320 <HAL_RCC_GetPCLK2Freq>
 80053c4:	61f8      	str	r0, [r7, #28]
        break;
 80053c6:	e010      	b.n	80053ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c8:	4b4c      	ldr	r3, [pc, #304]	; (80054fc <UART_SetConfig+0x4b0>)
 80053ca:	61fb      	str	r3, [r7, #28]
        break;
 80053cc:	e00d      	b.n	80053ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ce:	f7fd fef9 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 80053d2:	61f8      	str	r0, [r7, #28]
        break;
 80053d4:	e009      	b.n	80053ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053da:	61fb      	str	r3, [r7, #28]
        break;
 80053dc:	e005      	b.n	80053ea <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d077      	beq.n	80054e0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	005a      	lsls	r2, r3, #1
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	085b      	lsrs	r3, r3, #1
 80053fa:	441a      	add	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b0f      	cmp	r3, #15
 800540a:	d916      	bls.n	800543a <UART_SetConfig+0x3ee>
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005412:	d212      	bcs.n	800543a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f023 030f 	bic.w	r3, r3, #15
 800541c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	085b      	lsrs	r3, r3, #1
 8005422:	b29b      	uxth	r3, r3
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	b29a      	uxth	r2, r3
 800542a:	8afb      	ldrh	r3, [r7, #22]
 800542c:	4313      	orrs	r3, r2
 800542e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	8afa      	ldrh	r2, [r7, #22]
 8005436:	60da      	str	r2, [r3, #12]
 8005438:	e052      	b.n	80054e0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005440:	e04e      	b.n	80054e0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005442:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005446:	2b08      	cmp	r3, #8
 8005448:	d827      	bhi.n	800549a <UART_SetConfig+0x44e>
 800544a:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <UART_SetConfig+0x404>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	08005475 	.word	0x08005475
 8005454:	0800547d 	.word	0x0800547d
 8005458:	08005485 	.word	0x08005485
 800545c:	0800549b 	.word	0x0800549b
 8005460:	0800548b 	.word	0x0800548b
 8005464:	0800549b 	.word	0x0800549b
 8005468:	0800549b 	.word	0x0800549b
 800546c:	0800549b 	.word	0x0800549b
 8005470:	08005493 	.word	0x08005493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005474:	f7fd ff3e 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 8005478:	61f8      	str	r0, [r7, #28]
        break;
 800547a:	e014      	b.n	80054a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800547c:	f7fd ff50 	bl	8003320 <HAL_RCC_GetPCLK2Freq>
 8005480:	61f8      	str	r0, [r7, #28]
        break;
 8005482:	e010      	b.n	80054a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005484:	4b1d      	ldr	r3, [pc, #116]	; (80054fc <UART_SetConfig+0x4b0>)
 8005486:	61fb      	str	r3, [r7, #28]
        break;
 8005488:	e00d      	b.n	80054a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800548a:	f7fd fe9b 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 800548e:	61f8      	str	r0, [r7, #28]
        break;
 8005490:	e009      	b.n	80054a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005496:	61fb      	str	r3, [r7, #28]
        break;
 8005498:	e005      	b.n	80054a6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054a4:	bf00      	nop
    }

    if (pclk != 0U)
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d019      	beq.n	80054e0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	085a      	lsrs	r2, r3, #1
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	441a      	add	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2b0f      	cmp	r3, #15
 80054c4:	d909      	bls.n	80054da <UART_SetConfig+0x48e>
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054cc:	d205      	bcs.n	80054da <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60da      	str	r2, [r3, #12]
 80054d8:	e002      	b.n	80054e0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3728      	adds	r7, #40	; 0x28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054fa:	bf00      	nop
 80054fc:	00f42400 	.word	0x00f42400

08005500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00a      	beq.n	800556e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01a      	beq.n	8005616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fe:	d10a      	bne.n	8005616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	605a      	str	r2, [r3, #4]
  }
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af02      	add	r7, sp, #8
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005654:	f7fc fb84 	bl	8001d60 <HAL_GetTick>
 8005658:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b08      	cmp	r3, #8
 8005666:	d10e      	bne.n	8005686 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f82d 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e023      	b.n	80056ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b04      	cmp	r3, #4
 8005692:	d10e      	bne.n	80056b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f817 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e00d      	b.n	80056ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b09c      	sub	sp, #112	; 0x70
 80056da:	af00      	add	r7, sp, #0
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	4613      	mov	r3, r2
 80056e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e6:	e0a5      	b.n	8005834 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	f000 80a1 	beq.w	8005834 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f2:	f7fc fb35 	bl	8001d60 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056fe:	429a      	cmp	r2, r3
 8005700:	d302      	bcc.n	8005708 <UART_WaitOnFlagUntilTimeout+0x32>
 8005702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005704:	2b00      	cmp	r3, #0
 8005706:	d13e      	bne.n	8005786 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005718:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800571c:	667b      	str	r3, [r7, #100]	; 0x64
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005728:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800572c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e6      	bne.n	8005708 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3308      	adds	r3, #8
 8005740:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	f023 0301 	bic.w	r3, r3, #1
 8005750:	663b      	str	r3, [r7, #96]	; 0x60
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3308      	adds	r3, #8
 8005758:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800575a:	64ba      	str	r2, [r7, #72]	; 0x48
 800575c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e5      	bne.n	800573a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e067      	b.n	8005856 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d04f      	beq.n	8005834 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800579e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a2:	d147      	bne.n	8005834 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
 80057ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e6      	bne.n	80057ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3308      	adds	r3, #8
 80057e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	613b      	str	r3, [r7, #16]
   return(result);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3308      	adds	r3, #8
 80057fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005800:	623a      	str	r2, [r7, #32]
 8005802:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	69f9      	ldr	r1, [r7, #28]
 8005806:	6a3a      	ldr	r2, [r7, #32]
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	61bb      	str	r3, [r7, #24]
   return(result);
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e5      	bne.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2220      	movs	r2, #32
 800581e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e010      	b.n	8005856 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69da      	ldr	r2, [r3, #28]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4013      	ands	r3, r2
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	429a      	cmp	r2, r3
 8005842:	bf0c      	ite	eq
 8005844:	2301      	moveq	r3, #1
 8005846:	2300      	movne	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	429a      	cmp	r2, r3
 8005850:	f43f af4a 	beq.w	80056e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3770      	adds	r7, #112	; 0x70
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800585e:	b480      	push	{r7}
 8005860:	b095      	sub	sp, #84	; 0x54
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800587a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005884:	643b      	str	r3, [r7, #64]	; 0x40
 8005886:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800588a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e6      	bne.n	8005866 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3308      	adds	r3, #8
 800589e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	f023 0301 	bic.w	r3, r3, #1
 80058ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3308      	adds	r3, #8
 80058b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e5      	bne.n	8005898 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d118      	bne.n	8005906 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f023 0310 	bic.w	r3, r3, #16
 80058e8:	647b      	str	r3, [r7, #68]	; 0x44
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058f2:	61bb      	str	r3, [r7, #24]
 80058f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6979      	ldr	r1, [r7, #20]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e6      	bne.n	80058d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005918:	bf00      	nop
 800591a:	3754      	adds	r7, #84	; 0x54
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f7ff fb6c 	bl	8005020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005948:	bf00      	nop
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	60bb      	str	r3, [r7, #8]
   return(result);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800596c:	61fb      	str	r3, [r7, #28]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	61bb      	str	r3, [r7, #24]
 8005978:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	6979      	ldr	r1, [r7, #20]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	613b      	str	r3, [r7, #16]
   return(result);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e6      	bne.n	8005958 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff fb38 	bl	800500c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800599c:	bf00      	nop
 800599e:	3720      	adds	r7, #32
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <abort>:
 80059b8:	b508      	push	{r3, lr}
 80059ba:	2006      	movs	r0, #6
 80059bc:	f000 ffd6 	bl	800696c <raise>
 80059c0:	2001      	movs	r0, #1
 80059c2:	f7fb fde1 	bl	8001588 <_exit>
	...

080059c8 <__errno>:
 80059c8:	4b01      	ldr	r3, [pc, #4]	; (80059d0 <__errno+0x8>)
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	2000000c 	.word	0x2000000c

080059d4 <__libc_init_array>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	4d0d      	ldr	r5, [pc, #52]	; (8005a0c <__libc_init_array+0x38>)
 80059d8:	4c0d      	ldr	r4, [pc, #52]	; (8005a10 <__libc_init_array+0x3c>)
 80059da:	1b64      	subs	r4, r4, r5
 80059dc:	10a4      	asrs	r4, r4, #2
 80059de:	2600      	movs	r6, #0
 80059e0:	42a6      	cmp	r6, r4
 80059e2:	d109      	bne.n	80059f8 <__libc_init_array+0x24>
 80059e4:	4d0b      	ldr	r5, [pc, #44]	; (8005a14 <__libc_init_array+0x40>)
 80059e6:	4c0c      	ldr	r4, [pc, #48]	; (8005a18 <__libc_init_array+0x44>)
 80059e8:	f004 fc86 	bl	800a2f8 <_init>
 80059ec:	1b64      	subs	r4, r4, r5
 80059ee:	10a4      	asrs	r4, r4, #2
 80059f0:	2600      	movs	r6, #0
 80059f2:	42a6      	cmp	r6, r4
 80059f4:	d105      	bne.n	8005a02 <__libc_init_array+0x2e>
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fc:	4798      	blx	r3
 80059fe:	3601      	adds	r6, #1
 8005a00:	e7ee      	b.n	80059e0 <__libc_init_array+0xc>
 8005a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a06:	4798      	blx	r3
 8005a08:	3601      	adds	r6, #1
 8005a0a:	e7f2      	b.n	80059f2 <__libc_init_array+0x1e>
 8005a0c:	0800a804 	.word	0x0800a804
 8005a10:	0800a804 	.word	0x0800a804
 8005a14:	0800a804 	.word	0x0800a804
 8005a18:	0800a808 	.word	0x0800a808

08005a1c <malloc>:
 8005a1c:	4b02      	ldr	r3, [pc, #8]	; (8005a28 <malloc+0xc>)
 8005a1e:	4601      	mov	r1, r0
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	f000 b877 	b.w	8005b14 <_malloc_r>
 8005a26:	bf00      	nop
 8005a28:	2000000c 	.word	0x2000000c

08005a2c <memset>:
 8005a2c:	4402      	add	r2, r0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d100      	bne.n	8005a36 <memset+0xa>
 8005a34:	4770      	bx	lr
 8005a36:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3a:	e7f9      	b.n	8005a30 <memset+0x4>

08005a3c <_free_r>:
 8005a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a3e:	2900      	cmp	r1, #0
 8005a40:	d044      	beq.n	8005acc <_free_r+0x90>
 8005a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a46:	9001      	str	r0, [sp, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8005a4e:	bfb8      	it	lt
 8005a50:	18e4      	addlt	r4, r4, r3
 8005a52:	f003 f883 	bl	8008b5c <__malloc_lock>
 8005a56:	4a1e      	ldr	r2, [pc, #120]	; (8005ad0 <_free_r+0x94>)
 8005a58:	9801      	ldr	r0, [sp, #4]
 8005a5a:	6813      	ldr	r3, [r2, #0]
 8005a5c:	b933      	cbnz	r3, 8005a6c <_free_r+0x30>
 8005a5e:	6063      	str	r3, [r4, #4]
 8005a60:	6014      	str	r4, [r2, #0]
 8005a62:	b003      	add	sp, #12
 8005a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a68:	f003 b87e 	b.w	8008b68 <__malloc_unlock>
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d908      	bls.n	8005a82 <_free_r+0x46>
 8005a70:	6825      	ldr	r5, [r4, #0]
 8005a72:	1961      	adds	r1, r4, r5
 8005a74:	428b      	cmp	r3, r1
 8005a76:	bf01      	itttt	eq
 8005a78:	6819      	ldreq	r1, [r3, #0]
 8005a7a:	685b      	ldreq	r3, [r3, #4]
 8005a7c:	1949      	addeq	r1, r1, r5
 8005a7e:	6021      	streq	r1, [r4, #0]
 8005a80:	e7ed      	b.n	8005a5e <_free_r+0x22>
 8005a82:	461a      	mov	r2, r3
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	b10b      	cbz	r3, 8005a8c <_free_r+0x50>
 8005a88:	42a3      	cmp	r3, r4
 8005a8a:	d9fa      	bls.n	8005a82 <_free_r+0x46>
 8005a8c:	6811      	ldr	r1, [r2, #0]
 8005a8e:	1855      	adds	r5, r2, r1
 8005a90:	42a5      	cmp	r5, r4
 8005a92:	d10b      	bne.n	8005aac <_free_r+0x70>
 8005a94:	6824      	ldr	r4, [r4, #0]
 8005a96:	4421      	add	r1, r4
 8005a98:	1854      	adds	r4, r2, r1
 8005a9a:	42a3      	cmp	r3, r4
 8005a9c:	6011      	str	r1, [r2, #0]
 8005a9e:	d1e0      	bne.n	8005a62 <_free_r+0x26>
 8005aa0:	681c      	ldr	r4, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	6053      	str	r3, [r2, #4]
 8005aa6:	4421      	add	r1, r4
 8005aa8:	6011      	str	r1, [r2, #0]
 8005aaa:	e7da      	b.n	8005a62 <_free_r+0x26>
 8005aac:	d902      	bls.n	8005ab4 <_free_r+0x78>
 8005aae:	230c      	movs	r3, #12
 8005ab0:	6003      	str	r3, [r0, #0]
 8005ab2:	e7d6      	b.n	8005a62 <_free_r+0x26>
 8005ab4:	6825      	ldr	r5, [r4, #0]
 8005ab6:	1961      	adds	r1, r4, r5
 8005ab8:	428b      	cmp	r3, r1
 8005aba:	bf04      	itt	eq
 8005abc:	6819      	ldreq	r1, [r3, #0]
 8005abe:	685b      	ldreq	r3, [r3, #4]
 8005ac0:	6063      	str	r3, [r4, #4]
 8005ac2:	bf04      	itt	eq
 8005ac4:	1949      	addeq	r1, r1, r5
 8005ac6:	6021      	streq	r1, [r4, #0]
 8005ac8:	6054      	str	r4, [r2, #4]
 8005aca:	e7ca      	b.n	8005a62 <_free_r+0x26>
 8005acc:	b003      	add	sp, #12
 8005ace:	bd30      	pop	{r4, r5, pc}
 8005ad0:	20000430 	.word	0x20000430

08005ad4 <sbrk_aligned>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	4e0e      	ldr	r6, [pc, #56]	; (8005b10 <sbrk_aligned+0x3c>)
 8005ad8:	460c      	mov	r4, r1
 8005ada:	6831      	ldr	r1, [r6, #0]
 8005adc:	4605      	mov	r5, r0
 8005ade:	b911      	cbnz	r1, 8005ae6 <sbrk_aligned+0x12>
 8005ae0:	f000 ff06 	bl	80068f0 <_sbrk_r>
 8005ae4:	6030      	str	r0, [r6, #0]
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f000 ff01 	bl	80068f0 <_sbrk_r>
 8005aee:	1c43      	adds	r3, r0, #1
 8005af0:	d00a      	beq.n	8005b08 <sbrk_aligned+0x34>
 8005af2:	1cc4      	adds	r4, r0, #3
 8005af4:	f024 0403 	bic.w	r4, r4, #3
 8005af8:	42a0      	cmp	r0, r4
 8005afa:	d007      	beq.n	8005b0c <sbrk_aligned+0x38>
 8005afc:	1a21      	subs	r1, r4, r0
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 fef6 	bl	80068f0 <_sbrk_r>
 8005b04:	3001      	adds	r0, #1
 8005b06:	d101      	bne.n	8005b0c <sbrk_aligned+0x38>
 8005b08:	f04f 34ff 	mov.w	r4, #4294967295
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	20000434 	.word	0x20000434

08005b14 <_malloc_r>:
 8005b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b18:	1ccd      	adds	r5, r1, #3
 8005b1a:	f025 0503 	bic.w	r5, r5, #3
 8005b1e:	3508      	adds	r5, #8
 8005b20:	2d0c      	cmp	r5, #12
 8005b22:	bf38      	it	cc
 8005b24:	250c      	movcc	r5, #12
 8005b26:	2d00      	cmp	r5, #0
 8005b28:	4607      	mov	r7, r0
 8005b2a:	db01      	blt.n	8005b30 <_malloc_r+0x1c>
 8005b2c:	42a9      	cmp	r1, r5
 8005b2e:	d905      	bls.n	8005b3c <_malloc_r+0x28>
 8005b30:	230c      	movs	r3, #12
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	2600      	movs	r6, #0
 8005b36:	4630      	mov	r0, r6
 8005b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b3c:	4e2e      	ldr	r6, [pc, #184]	; (8005bf8 <_malloc_r+0xe4>)
 8005b3e:	f003 f80d 	bl	8008b5c <__malloc_lock>
 8005b42:	6833      	ldr	r3, [r6, #0]
 8005b44:	461c      	mov	r4, r3
 8005b46:	bb34      	cbnz	r4, 8005b96 <_malloc_r+0x82>
 8005b48:	4629      	mov	r1, r5
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	f7ff ffc2 	bl	8005ad4 <sbrk_aligned>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	4604      	mov	r4, r0
 8005b54:	d14d      	bne.n	8005bf2 <_malloc_r+0xde>
 8005b56:	6834      	ldr	r4, [r6, #0]
 8005b58:	4626      	mov	r6, r4
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	d140      	bne.n	8005be0 <_malloc_r+0xcc>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	4631      	mov	r1, r6
 8005b62:	4638      	mov	r0, r7
 8005b64:	eb04 0803 	add.w	r8, r4, r3
 8005b68:	f000 fec2 	bl	80068f0 <_sbrk_r>
 8005b6c:	4580      	cmp	r8, r0
 8005b6e:	d13a      	bne.n	8005be6 <_malloc_r+0xd2>
 8005b70:	6821      	ldr	r1, [r4, #0]
 8005b72:	3503      	adds	r5, #3
 8005b74:	1a6d      	subs	r5, r5, r1
 8005b76:	f025 0503 	bic.w	r5, r5, #3
 8005b7a:	3508      	adds	r5, #8
 8005b7c:	2d0c      	cmp	r5, #12
 8005b7e:	bf38      	it	cc
 8005b80:	250c      	movcc	r5, #12
 8005b82:	4629      	mov	r1, r5
 8005b84:	4638      	mov	r0, r7
 8005b86:	f7ff ffa5 	bl	8005ad4 <sbrk_aligned>
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d02b      	beq.n	8005be6 <_malloc_r+0xd2>
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	442b      	add	r3, r5
 8005b92:	6023      	str	r3, [r4, #0]
 8005b94:	e00e      	b.n	8005bb4 <_malloc_r+0xa0>
 8005b96:	6822      	ldr	r2, [r4, #0]
 8005b98:	1b52      	subs	r2, r2, r5
 8005b9a:	d41e      	bmi.n	8005bda <_malloc_r+0xc6>
 8005b9c:	2a0b      	cmp	r2, #11
 8005b9e:	d916      	bls.n	8005bce <_malloc_r+0xba>
 8005ba0:	1961      	adds	r1, r4, r5
 8005ba2:	42a3      	cmp	r3, r4
 8005ba4:	6025      	str	r5, [r4, #0]
 8005ba6:	bf18      	it	ne
 8005ba8:	6059      	strne	r1, [r3, #4]
 8005baa:	6863      	ldr	r3, [r4, #4]
 8005bac:	bf08      	it	eq
 8005bae:	6031      	streq	r1, [r6, #0]
 8005bb0:	5162      	str	r2, [r4, r5]
 8005bb2:	604b      	str	r3, [r1, #4]
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	f104 060b 	add.w	r6, r4, #11
 8005bba:	f002 ffd5 	bl	8008b68 <__malloc_unlock>
 8005bbe:	f026 0607 	bic.w	r6, r6, #7
 8005bc2:	1d23      	adds	r3, r4, #4
 8005bc4:	1af2      	subs	r2, r6, r3
 8005bc6:	d0b6      	beq.n	8005b36 <_malloc_r+0x22>
 8005bc8:	1b9b      	subs	r3, r3, r6
 8005bca:	50a3      	str	r3, [r4, r2]
 8005bcc:	e7b3      	b.n	8005b36 <_malloc_r+0x22>
 8005bce:	6862      	ldr	r2, [r4, #4]
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	bf0c      	ite	eq
 8005bd4:	6032      	streq	r2, [r6, #0]
 8005bd6:	605a      	strne	r2, [r3, #4]
 8005bd8:	e7ec      	b.n	8005bb4 <_malloc_r+0xa0>
 8005bda:	4623      	mov	r3, r4
 8005bdc:	6864      	ldr	r4, [r4, #4]
 8005bde:	e7b2      	b.n	8005b46 <_malloc_r+0x32>
 8005be0:	4634      	mov	r4, r6
 8005be2:	6876      	ldr	r6, [r6, #4]
 8005be4:	e7b9      	b.n	8005b5a <_malloc_r+0x46>
 8005be6:	230c      	movs	r3, #12
 8005be8:	603b      	str	r3, [r7, #0]
 8005bea:	4638      	mov	r0, r7
 8005bec:	f002 ffbc 	bl	8008b68 <__malloc_unlock>
 8005bf0:	e7a1      	b.n	8005b36 <_malloc_r+0x22>
 8005bf2:	6025      	str	r5, [r4, #0]
 8005bf4:	e7de      	b.n	8005bb4 <_malloc_r+0xa0>
 8005bf6:	bf00      	nop
 8005bf8:	20000430 	.word	0x20000430

08005bfc <__cvt>:
 8005bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c00:	ec55 4b10 	vmov	r4, r5, d0
 8005c04:	2d00      	cmp	r5, #0
 8005c06:	460e      	mov	r6, r1
 8005c08:	4619      	mov	r1, r3
 8005c0a:	462b      	mov	r3, r5
 8005c0c:	bfbb      	ittet	lt
 8005c0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c12:	461d      	movlt	r5, r3
 8005c14:	2300      	movge	r3, #0
 8005c16:	232d      	movlt	r3, #45	; 0x2d
 8005c18:	700b      	strb	r3, [r1, #0]
 8005c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c20:	4691      	mov	r9, r2
 8005c22:	f023 0820 	bic.w	r8, r3, #32
 8005c26:	bfbc      	itt	lt
 8005c28:	4622      	movlt	r2, r4
 8005c2a:	4614      	movlt	r4, r2
 8005c2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c30:	d005      	beq.n	8005c3e <__cvt+0x42>
 8005c32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c36:	d100      	bne.n	8005c3a <__cvt+0x3e>
 8005c38:	3601      	adds	r6, #1
 8005c3a:	2102      	movs	r1, #2
 8005c3c:	e000      	b.n	8005c40 <__cvt+0x44>
 8005c3e:	2103      	movs	r1, #3
 8005c40:	ab03      	add	r3, sp, #12
 8005c42:	9301      	str	r3, [sp, #4]
 8005c44:	ab02      	add	r3, sp, #8
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	ec45 4b10 	vmov	d0, r4, r5
 8005c4c:	4653      	mov	r3, sl
 8005c4e:	4632      	mov	r2, r6
 8005c50:	f001 fe02 	bl	8007858 <_dtoa_r>
 8005c54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c58:	4607      	mov	r7, r0
 8005c5a:	d102      	bne.n	8005c62 <__cvt+0x66>
 8005c5c:	f019 0f01 	tst.w	r9, #1
 8005c60:	d022      	beq.n	8005ca8 <__cvt+0xac>
 8005c62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c66:	eb07 0906 	add.w	r9, r7, r6
 8005c6a:	d110      	bne.n	8005c8e <__cvt+0x92>
 8005c6c:	783b      	ldrb	r3, [r7, #0]
 8005c6e:	2b30      	cmp	r3, #48	; 0x30
 8005c70:	d10a      	bne.n	8005c88 <__cvt+0x8c>
 8005c72:	2200      	movs	r2, #0
 8005c74:	2300      	movs	r3, #0
 8005c76:	4620      	mov	r0, r4
 8005c78:	4629      	mov	r1, r5
 8005c7a:	f7fa ff25 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c7e:	b918      	cbnz	r0, 8005c88 <__cvt+0x8c>
 8005c80:	f1c6 0601 	rsb	r6, r6, #1
 8005c84:	f8ca 6000 	str.w	r6, [sl]
 8005c88:	f8da 3000 	ldr.w	r3, [sl]
 8005c8c:	4499      	add	r9, r3
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2300      	movs	r3, #0
 8005c92:	4620      	mov	r0, r4
 8005c94:	4629      	mov	r1, r5
 8005c96:	f7fa ff17 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c9a:	b108      	cbz	r0, 8005ca0 <__cvt+0xa4>
 8005c9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ca0:	2230      	movs	r2, #48	; 0x30
 8005ca2:	9b03      	ldr	r3, [sp, #12]
 8005ca4:	454b      	cmp	r3, r9
 8005ca6:	d307      	bcc.n	8005cb8 <__cvt+0xbc>
 8005ca8:	9b03      	ldr	r3, [sp, #12]
 8005caa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cac:	1bdb      	subs	r3, r3, r7
 8005cae:	4638      	mov	r0, r7
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	b004      	add	sp, #16
 8005cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb8:	1c59      	adds	r1, r3, #1
 8005cba:	9103      	str	r1, [sp, #12]
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	e7f0      	b.n	8005ca2 <__cvt+0xa6>

08005cc0 <__exponent>:
 8005cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	bfb8      	it	lt
 8005cc8:	4249      	neglt	r1, r1
 8005cca:	f803 2b02 	strb.w	r2, [r3], #2
 8005cce:	bfb4      	ite	lt
 8005cd0:	222d      	movlt	r2, #45	; 0x2d
 8005cd2:	222b      	movge	r2, #43	; 0x2b
 8005cd4:	2909      	cmp	r1, #9
 8005cd6:	7042      	strb	r2, [r0, #1]
 8005cd8:	dd2a      	ble.n	8005d30 <__exponent+0x70>
 8005cda:	f10d 0407 	add.w	r4, sp, #7
 8005cde:	46a4      	mov	ip, r4
 8005ce0:	270a      	movs	r7, #10
 8005ce2:	46a6      	mov	lr, r4
 8005ce4:	460a      	mov	r2, r1
 8005ce6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005cea:	fb07 1516 	mls	r5, r7, r6, r1
 8005cee:	3530      	adds	r5, #48	; 0x30
 8005cf0:	2a63      	cmp	r2, #99	; 0x63
 8005cf2:	f104 34ff 	add.w	r4, r4, #4294967295
 8005cf6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	dcf1      	bgt.n	8005ce2 <__exponent+0x22>
 8005cfe:	3130      	adds	r1, #48	; 0x30
 8005d00:	f1ae 0502 	sub.w	r5, lr, #2
 8005d04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d08:	1c44      	adds	r4, r0, #1
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	4561      	cmp	r1, ip
 8005d0e:	d30a      	bcc.n	8005d26 <__exponent+0x66>
 8005d10:	f10d 0209 	add.w	r2, sp, #9
 8005d14:	eba2 020e 	sub.w	r2, r2, lr
 8005d18:	4565      	cmp	r5, ip
 8005d1a:	bf88      	it	hi
 8005d1c:	2200      	movhi	r2, #0
 8005d1e:	4413      	add	r3, r2
 8005d20:	1a18      	subs	r0, r3, r0
 8005d22:	b003      	add	sp, #12
 8005d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d2e:	e7ed      	b.n	8005d0c <__exponent+0x4c>
 8005d30:	2330      	movs	r3, #48	; 0x30
 8005d32:	3130      	adds	r1, #48	; 0x30
 8005d34:	7083      	strb	r3, [r0, #2]
 8005d36:	70c1      	strb	r1, [r0, #3]
 8005d38:	1d03      	adds	r3, r0, #4
 8005d3a:	e7f1      	b.n	8005d20 <__exponent+0x60>

08005d3c <_printf_float>:
 8005d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d40:	ed2d 8b02 	vpush	{d8}
 8005d44:	b08d      	sub	sp, #52	; 0x34
 8005d46:	460c      	mov	r4, r1
 8005d48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d4c:	4616      	mov	r6, r2
 8005d4e:	461f      	mov	r7, r3
 8005d50:	4605      	mov	r5, r0
 8005d52:	f002 fedf 	bl	8008b14 <_localeconv_r>
 8005d56:	f8d0 a000 	ldr.w	sl, [r0]
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	f7fa fa38 	bl	80001d0 <strlen>
 8005d60:	2300      	movs	r3, #0
 8005d62:	930a      	str	r3, [sp, #40]	; 0x28
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	9305      	str	r3, [sp, #20]
 8005d68:	f8d8 3000 	ldr.w	r3, [r8]
 8005d6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d70:	3307      	adds	r3, #7
 8005d72:	f023 0307 	bic.w	r3, r3, #7
 8005d76:	f103 0208 	add.w	r2, r3, #8
 8005d7a:	f8c8 2000 	str.w	r2, [r8]
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005d8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d8e:	9307      	str	r3, [sp, #28]
 8005d90:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d94:	ee08 0a10 	vmov	s16, r0
 8005d98:	4b9f      	ldr	r3, [pc, #636]	; (8006018 <_printf_float+0x2dc>)
 8005d9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005da2:	f7fa fec3 	bl	8000b2c <__aeabi_dcmpun>
 8005da6:	bb88      	cbnz	r0, 8005e0c <_printf_float+0xd0>
 8005da8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dac:	4b9a      	ldr	r3, [pc, #616]	; (8006018 <_printf_float+0x2dc>)
 8005dae:	f04f 32ff 	mov.w	r2, #4294967295
 8005db2:	f7fa fe9d 	bl	8000af0 <__aeabi_dcmple>
 8005db6:	bb48      	cbnz	r0, 8005e0c <_printf_float+0xd0>
 8005db8:	2200      	movs	r2, #0
 8005dba:	2300      	movs	r3, #0
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	f7fa fe8c 	bl	8000adc <__aeabi_dcmplt>
 8005dc4:	b110      	cbz	r0, 8005dcc <_printf_float+0x90>
 8005dc6:	232d      	movs	r3, #45	; 0x2d
 8005dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dcc:	4b93      	ldr	r3, [pc, #588]	; (800601c <_printf_float+0x2e0>)
 8005dce:	4894      	ldr	r0, [pc, #592]	; (8006020 <_printf_float+0x2e4>)
 8005dd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005dd4:	bf94      	ite	ls
 8005dd6:	4698      	movls	r8, r3
 8005dd8:	4680      	movhi	r8, r0
 8005dda:	2303      	movs	r3, #3
 8005ddc:	6123      	str	r3, [r4, #16]
 8005dde:	9b05      	ldr	r3, [sp, #20]
 8005de0:	f023 0204 	bic.w	r2, r3, #4
 8005de4:	6022      	str	r2, [r4, #0]
 8005de6:	f04f 0900 	mov.w	r9, #0
 8005dea:	9700      	str	r7, [sp, #0]
 8005dec:	4633      	mov	r3, r6
 8005dee:	aa0b      	add	r2, sp, #44	; 0x2c
 8005df0:	4621      	mov	r1, r4
 8005df2:	4628      	mov	r0, r5
 8005df4:	f000 f9d8 	bl	80061a8 <_printf_common>
 8005df8:	3001      	adds	r0, #1
 8005dfa:	f040 8090 	bne.w	8005f1e <_printf_float+0x1e2>
 8005dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005e02:	b00d      	add	sp, #52	; 0x34
 8005e04:	ecbd 8b02 	vpop	{d8}
 8005e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	464b      	mov	r3, r9
 8005e10:	4640      	mov	r0, r8
 8005e12:	4649      	mov	r1, r9
 8005e14:	f7fa fe8a 	bl	8000b2c <__aeabi_dcmpun>
 8005e18:	b140      	cbz	r0, 8005e2c <_printf_float+0xf0>
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	bfbc      	itt	lt
 8005e20:	232d      	movlt	r3, #45	; 0x2d
 8005e22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e26:	487f      	ldr	r0, [pc, #508]	; (8006024 <_printf_float+0x2e8>)
 8005e28:	4b7f      	ldr	r3, [pc, #508]	; (8006028 <_printf_float+0x2ec>)
 8005e2a:	e7d1      	b.n	8005dd0 <_printf_float+0x94>
 8005e2c:	6863      	ldr	r3, [r4, #4]
 8005e2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e32:	9206      	str	r2, [sp, #24]
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	d13f      	bne.n	8005eb8 <_printf_float+0x17c>
 8005e38:	2306      	movs	r3, #6
 8005e3a:	6063      	str	r3, [r4, #4]
 8005e3c:	9b05      	ldr	r3, [sp, #20]
 8005e3e:	6861      	ldr	r1, [r4, #4]
 8005e40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e44:	2300      	movs	r3, #0
 8005e46:	9303      	str	r3, [sp, #12]
 8005e48:	ab0a      	add	r3, sp, #40	; 0x28
 8005e4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e4e:	ab09      	add	r3, sp, #36	; 0x24
 8005e50:	ec49 8b10 	vmov	d0, r8, r9
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	6022      	str	r2, [r4, #0]
 8005e58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f7ff fecd 	bl	8005bfc <__cvt>
 8005e62:	9b06      	ldr	r3, [sp, #24]
 8005e64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e66:	2b47      	cmp	r3, #71	; 0x47
 8005e68:	4680      	mov	r8, r0
 8005e6a:	d108      	bne.n	8005e7e <_printf_float+0x142>
 8005e6c:	1cc8      	adds	r0, r1, #3
 8005e6e:	db02      	blt.n	8005e76 <_printf_float+0x13a>
 8005e70:	6863      	ldr	r3, [r4, #4]
 8005e72:	4299      	cmp	r1, r3
 8005e74:	dd41      	ble.n	8005efa <_printf_float+0x1be>
 8005e76:	f1ab 0b02 	sub.w	fp, fp, #2
 8005e7a:	fa5f fb8b 	uxtb.w	fp, fp
 8005e7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e82:	d820      	bhi.n	8005ec6 <_printf_float+0x18a>
 8005e84:	3901      	subs	r1, #1
 8005e86:	465a      	mov	r2, fp
 8005e88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e8c:	9109      	str	r1, [sp, #36]	; 0x24
 8005e8e:	f7ff ff17 	bl	8005cc0 <__exponent>
 8005e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e94:	1813      	adds	r3, r2, r0
 8005e96:	2a01      	cmp	r2, #1
 8005e98:	4681      	mov	r9, r0
 8005e9a:	6123      	str	r3, [r4, #16]
 8005e9c:	dc02      	bgt.n	8005ea4 <_printf_float+0x168>
 8005e9e:	6822      	ldr	r2, [r4, #0]
 8005ea0:	07d2      	lsls	r2, r2, #31
 8005ea2:	d501      	bpl.n	8005ea8 <_printf_float+0x16c>
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	6123      	str	r3, [r4, #16]
 8005ea8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d09c      	beq.n	8005dea <_printf_float+0xae>
 8005eb0:	232d      	movs	r3, #45	; 0x2d
 8005eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb6:	e798      	b.n	8005dea <_printf_float+0xae>
 8005eb8:	9a06      	ldr	r2, [sp, #24]
 8005eba:	2a47      	cmp	r2, #71	; 0x47
 8005ebc:	d1be      	bne.n	8005e3c <_printf_float+0x100>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1bc      	bne.n	8005e3c <_printf_float+0x100>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e7b9      	b.n	8005e3a <_printf_float+0xfe>
 8005ec6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005eca:	d118      	bne.n	8005efe <_printf_float+0x1c2>
 8005ecc:	2900      	cmp	r1, #0
 8005ece:	6863      	ldr	r3, [r4, #4]
 8005ed0:	dd0b      	ble.n	8005eea <_printf_float+0x1ae>
 8005ed2:	6121      	str	r1, [r4, #16]
 8005ed4:	b913      	cbnz	r3, 8005edc <_printf_float+0x1a0>
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	07d0      	lsls	r0, r2, #31
 8005eda:	d502      	bpl.n	8005ee2 <_printf_float+0x1a6>
 8005edc:	3301      	adds	r3, #1
 8005ede:	440b      	add	r3, r1
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ee4:	f04f 0900 	mov.w	r9, #0
 8005ee8:	e7de      	b.n	8005ea8 <_printf_float+0x16c>
 8005eea:	b913      	cbnz	r3, 8005ef2 <_printf_float+0x1b6>
 8005eec:	6822      	ldr	r2, [r4, #0]
 8005eee:	07d2      	lsls	r2, r2, #31
 8005ef0:	d501      	bpl.n	8005ef6 <_printf_float+0x1ba>
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	e7f4      	b.n	8005ee0 <_printf_float+0x1a4>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e7f2      	b.n	8005ee0 <_printf_float+0x1a4>
 8005efa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f00:	4299      	cmp	r1, r3
 8005f02:	db05      	blt.n	8005f10 <_printf_float+0x1d4>
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	6121      	str	r1, [r4, #16]
 8005f08:	07d8      	lsls	r0, r3, #31
 8005f0a:	d5ea      	bpl.n	8005ee2 <_printf_float+0x1a6>
 8005f0c:	1c4b      	adds	r3, r1, #1
 8005f0e:	e7e7      	b.n	8005ee0 <_printf_float+0x1a4>
 8005f10:	2900      	cmp	r1, #0
 8005f12:	bfd4      	ite	le
 8005f14:	f1c1 0202 	rsble	r2, r1, #2
 8005f18:	2201      	movgt	r2, #1
 8005f1a:	4413      	add	r3, r2
 8005f1c:	e7e0      	b.n	8005ee0 <_printf_float+0x1a4>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	055a      	lsls	r2, r3, #21
 8005f22:	d407      	bmi.n	8005f34 <_printf_float+0x1f8>
 8005f24:	6923      	ldr	r3, [r4, #16]
 8005f26:	4642      	mov	r2, r8
 8005f28:	4631      	mov	r1, r6
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	47b8      	blx	r7
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d12c      	bne.n	8005f8c <_printf_float+0x250>
 8005f32:	e764      	b.n	8005dfe <_printf_float+0xc2>
 8005f34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f38:	f240 80e0 	bls.w	80060fc <_printf_float+0x3c0>
 8005f3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f40:	2200      	movs	r2, #0
 8005f42:	2300      	movs	r3, #0
 8005f44:	f7fa fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d034      	beq.n	8005fb6 <_printf_float+0x27a>
 8005f4c:	4a37      	ldr	r2, [pc, #220]	; (800602c <_printf_float+0x2f0>)
 8005f4e:	2301      	movs	r3, #1
 8005f50:	4631      	mov	r1, r6
 8005f52:	4628      	mov	r0, r5
 8005f54:	47b8      	blx	r7
 8005f56:	3001      	adds	r0, #1
 8005f58:	f43f af51 	beq.w	8005dfe <_printf_float+0xc2>
 8005f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f60:	429a      	cmp	r2, r3
 8005f62:	db02      	blt.n	8005f6a <_printf_float+0x22e>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	07d8      	lsls	r0, r3, #31
 8005f68:	d510      	bpl.n	8005f8c <_printf_float+0x250>
 8005f6a:	ee18 3a10 	vmov	r3, s16
 8005f6e:	4652      	mov	r2, sl
 8005f70:	4631      	mov	r1, r6
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	f43f af41 	beq.w	8005dfe <_printf_float+0xc2>
 8005f7c:	f04f 0800 	mov.w	r8, #0
 8005f80:	f104 091a 	add.w	r9, r4, #26
 8005f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f86:	3b01      	subs	r3, #1
 8005f88:	4543      	cmp	r3, r8
 8005f8a:	dc09      	bgt.n	8005fa0 <_printf_float+0x264>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	079b      	lsls	r3, r3, #30
 8005f90:	f100 8105 	bmi.w	800619e <_printf_float+0x462>
 8005f94:	68e0      	ldr	r0, [r4, #12]
 8005f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f98:	4298      	cmp	r0, r3
 8005f9a:	bfb8      	it	lt
 8005f9c:	4618      	movlt	r0, r3
 8005f9e:	e730      	b.n	8005e02 <_printf_float+0xc6>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	464a      	mov	r2, r9
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	47b8      	blx	r7
 8005faa:	3001      	adds	r0, #1
 8005fac:	f43f af27 	beq.w	8005dfe <_printf_float+0xc2>
 8005fb0:	f108 0801 	add.w	r8, r8, #1
 8005fb4:	e7e6      	b.n	8005f84 <_printf_float+0x248>
 8005fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	dc39      	bgt.n	8006030 <_printf_float+0x2f4>
 8005fbc:	4a1b      	ldr	r2, [pc, #108]	; (800602c <_printf_float+0x2f0>)
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	47b8      	blx	r7
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	f43f af19 	beq.w	8005dfe <_printf_float+0xc2>
 8005fcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	d102      	bne.n	8005fda <_printf_float+0x29e>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	07d9      	lsls	r1, r3, #31
 8005fd8:	d5d8      	bpl.n	8005f8c <_printf_float+0x250>
 8005fda:	ee18 3a10 	vmov	r3, s16
 8005fde:	4652      	mov	r2, sl
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	47b8      	blx	r7
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	f43f af09 	beq.w	8005dfe <_printf_float+0xc2>
 8005fec:	f04f 0900 	mov.w	r9, #0
 8005ff0:	f104 0a1a 	add.w	sl, r4, #26
 8005ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff6:	425b      	negs	r3, r3
 8005ff8:	454b      	cmp	r3, r9
 8005ffa:	dc01      	bgt.n	8006000 <_printf_float+0x2c4>
 8005ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ffe:	e792      	b.n	8005f26 <_printf_float+0x1ea>
 8006000:	2301      	movs	r3, #1
 8006002:	4652      	mov	r2, sl
 8006004:	4631      	mov	r1, r6
 8006006:	4628      	mov	r0, r5
 8006008:	47b8      	blx	r7
 800600a:	3001      	adds	r0, #1
 800600c:	f43f aef7 	beq.w	8005dfe <_printf_float+0xc2>
 8006010:	f109 0901 	add.w	r9, r9, #1
 8006014:	e7ee      	b.n	8005ff4 <_printf_float+0x2b8>
 8006016:	bf00      	nop
 8006018:	7fefffff 	.word	0x7fefffff
 800601c:	0800a35c 	.word	0x0800a35c
 8006020:	0800a360 	.word	0x0800a360
 8006024:	0800a368 	.word	0x0800a368
 8006028:	0800a364 	.word	0x0800a364
 800602c:	0800a36c 	.word	0x0800a36c
 8006030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006032:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006034:	429a      	cmp	r2, r3
 8006036:	bfa8      	it	ge
 8006038:	461a      	movge	r2, r3
 800603a:	2a00      	cmp	r2, #0
 800603c:	4691      	mov	r9, r2
 800603e:	dc37      	bgt.n	80060b0 <_printf_float+0x374>
 8006040:	f04f 0b00 	mov.w	fp, #0
 8006044:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006048:	f104 021a 	add.w	r2, r4, #26
 800604c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800604e:	9305      	str	r3, [sp, #20]
 8006050:	eba3 0309 	sub.w	r3, r3, r9
 8006054:	455b      	cmp	r3, fp
 8006056:	dc33      	bgt.n	80060c0 <_printf_float+0x384>
 8006058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800605c:	429a      	cmp	r2, r3
 800605e:	db3b      	blt.n	80060d8 <_printf_float+0x39c>
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	07da      	lsls	r2, r3, #31
 8006064:	d438      	bmi.n	80060d8 <_printf_float+0x39c>
 8006066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006068:	9a05      	ldr	r2, [sp, #20]
 800606a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800606c:	1a9a      	subs	r2, r3, r2
 800606e:	eba3 0901 	sub.w	r9, r3, r1
 8006072:	4591      	cmp	r9, r2
 8006074:	bfa8      	it	ge
 8006076:	4691      	movge	r9, r2
 8006078:	f1b9 0f00 	cmp.w	r9, #0
 800607c:	dc35      	bgt.n	80060ea <_printf_float+0x3ae>
 800607e:	f04f 0800 	mov.w	r8, #0
 8006082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006086:	f104 0a1a 	add.w	sl, r4, #26
 800608a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800608e:	1a9b      	subs	r3, r3, r2
 8006090:	eba3 0309 	sub.w	r3, r3, r9
 8006094:	4543      	cmp	r3, r8
 8006096:	f77f af79 	ble.w	8005f8c <_printf_float+0x250>
 800609a:	2301      	movs	r3, #1
 800609c:	4652      	mov	r2, sl
 800609e:	4631      	mov	r1, r6
 80060a0:	4628      	mov	r0, r5
 80060a2:	47b8      	blx	r7
 80060a4:	3001      	adds	r0, #1
 80060a6:	f43f aeaa 	beq.w	8005dfe <_printf_float+0xc2>
 80060aa:	f108 0801 	add.w	r8, r8, #1
 80060ae:	e7ec      	b.n	800608a <_printf_float+0x34e>
 80060b0:	4613      	mov	r3, r2
 80060b2:	4631      	mov	r1, r6
 80060b4:	4642      	mov	r2, r8
 80060b6:	4628      	mov	r0, r5
 80060b8:	47b8      	blx	r7
 80060ba:	3001      	adds	r0, #1
 80060bc:	d1c0      	bne.n	8006040 <_printf_float+0x304>
 80060be:	e69e      	b.n	8005dfe <_printf_float+0xc2>
 80060c0:	2301      	movs	r3, #1
 80060c2:	4631      	mov	r1, r6
 80060c4:	4628      	mov	r0, r5
 80060c6:	9205      	str	r2, [sp, #20]
 80060c8:	47b8      	blx	r7
 80060ca:	3001      	adds	r0, #1
 80060cc:	f43f ae97 	beq.w	8005dfe <_printf_float+0xc2>
 80060d0:	9a05      	ldr	r2, [sp, #20]
 80060d2:	f10b 0b01 	add.w	fp, fp, #1
 80060d6:	e7b9      	b.n	800604c <_printf_float+0x310>
 80060d8:	ee18 3a10 	vmov	r3, s16
 80060dc:	4652      	mov	r2, sl
 80060de:	4631      	mov	r1, r6
 80060e0:	4628      	mov	r0, r5
 80060e2:	47b8      	blx	r7
 80060e4:	3001      	adds	r0, #1
 80060e6:	d1be      	bne.n	8006066 <_printf_float+0x32a>
 80060e8:	e689      	b.n	8005dfe <_printf_float+0xc2>
 80060ea:	9a05      	ldr	r2, [sp, #20]
 80060ec:	464b      	mov	r3, r9
 80060ee:	4442      	add	r2, r8
 80060f0:	4631      	mov	r1, r6
 80060f2:	4628      	mov	r0, r5
 80060f4:	47b8      	blx	r7
 80060f6:	3001      	adds	r0, #1
 80060f8:	d1c1      	bne.n	800607e <_printf_float+0x342>
 80060fa:	e680      	b.n	8005dfe <_printf_float+0xc2>
 80060fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060fe:	2a01      	cmp	r2, #1
 8006100:	dc01      	bgt.n	8006106 <_printf_float+0x3ca>
 8006102:	07db      	lsls	r3, r3, #31
 8006104:	d538      	bpl.n	8006178 <_printf_float+0x43c>
 8006106:	2301      	movs	r3, #1
 8006108:	4642      	mov	r2, r8
 800610a:	4631      	mov	r1, r6
 800610c:	4628      	mov	r0, r5
 800610e:	47b8      	blx	r7
 8006110:	3001      	adds	r0, #1
 8006112:	f43f ae74 	beq.w	8005dfe <_printf_float+0xc2>
 8006116:	ee18 3a10 	vmov	r3, s16
 800611a:	4652      	mov	r2, sl
 800611c:	4631      	mov	r1, r6
 800611e:	4628      	mov	r0, r5
 8006120:	47b8      	blx	r7
 8006122:	3001      	adds	r0, #1
 8006124:	f43f ae6b 	beq.w	8005dfe <_printf_float+0xc2>
 8006128:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800612c:	2200      	movs	r2, #0
 800612e:	2300      	movs	r3, #0
 8006130:	f7fa fcca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006134:	b9d8      	cbnz	r0, 800616e <_printf_float+0x432>
 8006136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006138:	f108 0201 	add.w	r2, r8, #1
 800613c:	3b01      	subs	r3, #1
 800613e:	4631      	mov	r1, r6
 8006140:	4628      	mov	r0, r5
 8006142:	47b8      	blx	r7
 8006144:	3001      	adds	r0, #1
 8006146:	d10e      	bne.n	8006166 <_printf_float+0x42a>
 8006148:	e659      	b.n	8005dfe <_printf_float+0xc2>
 800614a:	2301      	movs	r3, #1
 800614c:	4652      	mov	r2, sl
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	47b8      	blx	r7
 8006154:	3001      	adds	r0, #1
 8006156:	f43f ae52 	beq.w	8005dfe <_printf_float+0xc2>
 800615a:	f108 0801 	add.w	r8, r8, #1
 800615e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006160:	3b01      	subs	r3, #1
 8006162:	4543      	cmp	r3, r8
 8006164:	dcf1      	bgt.n	800614a <_printf_float+0x40e>
 8006166:	464b      	mov	r3, r9
 8006168:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800616c:	e6dc      	b.n	8005f28 <_printf_float+0x1ec>
 800616e:	f04f 0800 	mov.w	r8, #0
 8006172:	f104 0a1a 	add.w	sl, r4, #26
 8006176:	e7f2      	b.n	800615e <_printf_float+0x422>
 8006178:	2301      	movs	r3, #1
 800617a:	4642      	mov	r2, r8
 800617c:	e7df      	b.n	800613e <_printf_float+0x402>
 800617e:	2301      	movs	r3, #1
 8006180:	464a      	mov	r2, r9
 8006182:	4631      	mov	r1, r6
 8006184:	4628      	mov	r0, r5
 8006186:	47b8      	blx	r7
 8006188:	3001      	adds	r0, #1
 800618a:	f43f ae38 	beq.w	8005dfe <_printf_float+0xc2>
 800618e:	f108 0801 	add.w	r8, r8, #1
 8006192:	68e3      	ldr	r3, [r4, #12]
 8006194:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006196:	1a5b      	subs	r3, r3, r1
 8006198:	4543      	cmp	r3, r8
 800619a:	dcf0      	bgt.n	800617e <_printf_float+0x442>
 800619c:	e6fa      	b.n	8005f94 <_printf_float+0x258>
 800619e:	f04f 0800 	mov.w	r8, #0
 80061a2:	f104 0919 	add.w	r9, r4, #25
 80061a6:	e7f4      	b.n	8006192 <_printf_float+0x456>

080061a8 <_printf_common>:
 80061a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ac:	4616      	mov	r6, r2
 80061ae:	4699      	mov	r9, r3
 80061b0:	688a      	ldr	r2, [r1, #8]
 80061b2:	690b      	ldr	r3, [r1, #16]
 80061b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061b8:	4293      	cmp	r3, r2
 80061ba:	bfb8      	it	lt
 80061bc:	4613      	movlt	r3, r2
 80061be:	6033      	str	r3, [r6, #0]
 80061c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061c4:	4607      	mov	r7, r0
 80061c6:	460c      	mov	r4, r1
 80061c8:	b10a      	cbz	r2, 80061ce <_printf_common+0x26>
 80061ca:	3301      	adds	r3, #1
 80061cc:	6033      	str	r3, [r6, #0]
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	0699      	lsls	r1, r3, #26
 80061d2:	bf42      	ittt	mi
 80061d4:	6833      	ldrmi	r3, [r6, #0]
 80061d6:	3302      	addmi	r3, #2
 80061d8:	6033      	strmi	r3, [r6, #0]
 80061da:	6825      	ldr	r5, [r4, #0]
 80061dc:	f015 0506 	ands.w	r5, r5, #6
 80061e0:	d106      	bne.n	80061f0 <_printf_common+0x48>
 80061e2:	f104 0a19 	add.w	sl, r4, #25
 80061e6:	68e3      	ldr	r3, [r4, #12]
 80061e8:	6832      	ldr	r2, [r6, #0]
 80061ea:	1a9b      	subs	r3, r3, r2
 80061ec:	42ab      	cmp	r3, r5
 80061ee:	dc26      	bgt.n	800623e <_printf_common+0x96>
 80061f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061f4:	1e13      	subs	r3, r2, #0
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	bf18      	it	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	0692      	lsls	r2, r2, #26
 80061fe:	d42b      	bmi.n	8006258 <_printf_common+0xb0>
 8006200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006204:	4649      	mov	r1, r9
 8006206:	4638      	mov	r0, r7
 8006208:	47c0      	blx	r8
 800620a:	3001      	adds	r0, #1
 800620c:	d01e      	beq.n	800624c <_printf_common+0xa4>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	68e5      	ldr	r5, [r4, #12]
 8006212:	6832      	ldr	r2, [r6, #0]
 8006214:	f003 0306 	and.w	r3, r3, #6
 8006218:	2b04      	cmp	r3, #4
 800621a:	bf08      	it	eq
 800621c:	1aad      	subeq	r5, r5, r2
 800621e:	68a3      	ldr	r3, [r4, #8]
 8006220:	6922      	ldr	r2, [r4, #16]
 8006222:	bf0c      	ite	eq
 8006224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006228:	2500      	movne	r5, #0
 800622a:	4293      	cmp	r3, r2
 800622c:	bfc4      	itt	gt
 800622e:	1a9b      	subgt	r3, r3, r2
 8006230:	18ed      	addgt	r5, r5, r3
 8006232:	2600      	movs	r6, #0
 8006234:	341a      	adds	r4, #26
 8006236:	42b5      	cmp	r5, r6
 8006238:	d11a      	bne.n	8006270 <_printf_common+0xc8>
 800623a:	2000      	movs	r0, #0
 800623c:	e008      	b.n	8006250 <_printf_common+0xa8>
 800623e:	2301      	movs	r3, #1
 8006240:	4652      	mov	r2, sl
 8006242:	4649      	mov	r1, r9
 8006244:	4638      	mov	r0, r7
 8006246:	47c0      	blx	r8
 8006248:	3001      	adds	r0, #1
 800624a:	d103      	bne.n	8006254 <_printf_common+0xac>
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006254:	3501      	adds	r5, #1
 8006256:	e7c6      	b.n	80061e6 <_printf_common+0x3e>
 8006258:	18e1      	adds	r1, r4, r3
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	2030      	movs	r0, #48	; 0x30
 800625e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006262:	4422      	add	r2, r4
 8006264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800626c:	3302      	adds	r3, #2
 800626e:	e7c7      	b.n	8006200 <_printf_common+0x58>
 8006270:	2301      	movs	r3, #1
 8006272:	4622      	mov	r2, r4
 8006274:	4649      	mov	r1, r9
 8006276:	4638      	mov	r0, r7
 8006278:	47c0      	blx	r8
 800627a:	3001      	adds	r0, #1
 800627c:	d0e6      	beq.n	800624c <_printf_common+0xa4>
 800627e:	3601      	adds	r6, #1
 8006280:	e7d9      	b.n	8006236 <_printf_common+0x8e>
	...

08006284 <_printf_i>:
 8006284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	7e0f      	ldrb	r7, [r1, #24]
 800628a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800628c:	2f78      	cmp	r7, #120	; 0x78
 800628e:	4691      	mov	r9, r2
 8006290:	4680      	mov	r8, r0
 8006292:	460c      	mov	r4, r1
 8006294:	469a      	mov	sl, r3
 8006296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800629a:	d807      	bhi.n	80062ac <_printf_i+0x28>
 800629c:	2f62      	cmp	r7, #98	; 0x62
 800629e:	d80a      	bhi.n	80062b6 <_printf_i+0x32>
 80062a0:	2f00      	cmp	r7, #0
 80062a2:	f000 80d8 	beq.w	8006456 <_printf_i+0x1d2>
 80062a6:	2f58      	cmp	r7, #88	; 0x58
 80062a8:	f000 80a3 	beq.w	80063f2 <_printf_i+0x16e>
 80062ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062b4:	e03a      	b.n	800632c <_printf_i+0xa8>
 80062b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062ba:	2b15      	cmp	r3, #21
 80062bc:	d8f6      	bhi.n	80062ac <_printf_i+0x28>
 80062be:	a101      	add	r1, pc, #4	; (adr r1, 80062c4 <_printf_i+0x40>)
 80062c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062c4:	0800631d 	.word	0x0800631d
 80062c8:	08006331 	.word	0x08006331
 80062cc:	080062ad 	.word	0x080062ad
 80062d0:	080062ad 	.word	0x080062ad
 80062d4:	080062ad 	.word	0x080062ad
 80062d8:	080062ad 	.word	0x080062ad
 80062dc:	08006331 	.word	0x08006331
 80062e0:	080062ad 	.word	0x080062ad
 80062e4:	080062ad 	.word	0x080062ad
 80062e8:	080062ad 	.word	0x080062ad
 80062ec:	080062ad 	.word	0x080062ad
 80062f0:	0800643d 	.word	0x0800643d
 80062f4:	08006361 	.word	0x08006361
 80062f8:	0800641f 	.word	0x0800641f
 80062fc:	080062ad 	.word	0x080062ad
 8006300:	080062ad 	.word	0x080062ad
 8006304:	0800645f 	.word	0x0800645f
 8006308:	080062ad 	.word	0x080062ad
 800630c:	08006361 	.word	0x08006361
 8006310:	080062ad 	.word	0x080062ad
 8006314:	080062ad 	.word	0x080062ad
 8006318:	08006427 	.word	0x08006427
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	1d1a      	adds	r2, r3, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	602a      	str	r2, [r5, #0]
 8006324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800632c:	2301      	movs	r3, #1
 800632e:	e0a3      	b.n	8006478 <_printf_i+0x1f4>
 8006330:	6820      	ldr	r0, [r4, #0]
 8006332:	6829      	ldr	r1, [r5, #0]
 8006334:	0606      	lsls	r6, r0, #24
 8006336:	f101 0304 	add.w	r3, r1, #4
 800633a:	d50a      	bpl.n	8006352 <_printf_i+0xce>
 800633c:	680e      	ldr	r6, [r1, #0]
 800633e:	602b      	str	r3, [r5, #0]
 8006340:	2e00      	cmp	r6, #0
 8006342:	da03      	bge.n	800634c <_printf_i+0xc8>
 8006344:	232d      	movs	r3, #45	; 0x2d
 8006346:	4276      	negs	r6, r6
 8006348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800634c:	485e      	ldr	r0, [pc, #376]	; (80064c8 <_printf_i+0x244>)
 800634e:	230a      	movs	r3, #10
 8006350:	e019      	b.n	8006386 <_printf_i+0x102>
 8006352:	680e      	ldr	r6, [r1, #0]
 8006354:	602b      	str	r3, [r5, #0]
 8006356:	f010 0f40 	tst.w	r0, #64	; 0x40
 800635a:	bf18      	it	ne
 800635c:	b236      	sxthne	r6, r6
 800635e:	e7ef      	b.n	8006340 <_printf_i+0xbc>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	6820      	ldr	r0, [r4, #0]
 8006364:	1d19      	adds	r1, r3, #4
 8006366:	6029      	str	r1, [r5, #0]
 8006368:	0601      	lsls	r1, r0, #24
 800636a:	d501      	bpl.n	8006370 <_printf_i+0xec>
 800636c:	681e      	ldr	r6, [r3, #0]
 800636e:	e002      	b.n	8006376 <_printf_i+0xf2>
 8006370:	0646      	lsls	r6, r0, #25
 8006372:	d5fb      	bpl.n	800636c <_printf_i+0xe8>
 8006374:	881e      	ldrh	r6, [r3, #0]
 8006376:	4854      	ldr	r0, [pc, #336]	; (80064c8 <_printf_i+0x244>)
 8006378:	2f6f      	cmp	r7, #111	; 0x6f
 800637a:	bf0c      	ite	eq
 800637c:	2308      	moveq	r3, #8
 800637e:	230a      	movne	r3, #10
 8006380:	2100      	movs	r1, #0
 8006382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006386:	6865      	ldr	r5, [r4, #4]
 8006388:	60a5      	str	r5, [r4, #8]
 800638a:	2d00      	cmp	r5, #0
 800638c:	bfa2      	ittt	ge
 800638e:	6821      	ldrge	r1, [r4, #0]
 8006390:	f021 0104 	bicge.w	r1, r1, #4
 8006394:	6021      	strge	r1, [r4, #0]
 8006396:	b90e      	cbnz	r6, 800639c <_printf_i+0x118>
 8006398:	2d00      	cmp	r5, #0
 800639a:	d04d      	beq.n	8006438 <_printf_i+0x1b4>
 800639c:	4615      	mov	r5, r2
 800639e:	fbb6 f1f3 	udiv	r1, r6, r3
 80063a2:	fb03 6711 	mls	r7, r3, r1, r6
 80063a6:	5dc7      	ldrb	r7, [r0, r7]
 80063a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063ac:	4637      	mov	r7, r6
 80063ae:	42bb      	cmp	r3, r7
 80063b0:	460e      	mov	r6, r1
 80063b2:	d9f4      	bls.n	800639e <_printf_i+0x11a>
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d10b      	bne.n	80063d0 <_printf_i+0x14c>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	07de      	lsls	r6, r3, #31
 80063bc:	d508      	bpl.n	80063d0 <_printf_i+0x14c>
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	6861      	ldr	r1, [r4, #4]
 80063c2:	4299      	cmp	r1, r3
 80063c4:	bfde      	ittt	le
 80063c6:	2330      	movle	r3, #48	; 0x30
 80063c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063d0:	1b52      	subs	r2, r2, r5
 80063d2:	6122      	str	r2, [r4, #16]
 80063d4:	f8cd a000 	str.w	sl, [sp]
 80063d8:	464b      	mov	r3, r9
 80063da:	aa03      	add	r2, sp, #12
 80063dc:	4621      	mov	r1, r4
 80063de:	4640      	mov	r0, r8
 80063e0:	f7ff fee2 	bl	80061a8 <_printf_common>
 80063e4:	3001      	adds	r0, #1
 80063e6:	d14c      	bne.n	8006482 <_printf_i+0x1fe>
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	b004      	add	sp, #16
 80063ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f2:	4835      	ldr	r0, [pc, #212]	; (80064c8 <_printf_i+0x244>)
 80063f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063f8:	6829      	ldr	r1, [r5, #0]
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006400:	6029      	str	r1, [r5, #0]
 8006402:	061d      	lsls	r5, r3, #24
 8006404:	d514      	bpl.n	8006430 <_printf_i+0x1ac>
 8006406:	07df      	lsls	r7, r3, #31
 8006408:	bf44      	itt	mi
 800640a:	f043 0320 	orrmi.w	r3, r3, #32
 800640e:	6023      	strmi	r3, [r4, #0]
 8006410:	b91e      	cbnz	r6, 800641a <_printf_i+0x196>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	f023 0320 	bic.w	r3, r3, #32
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	2310      	movs	r3, #16
 800641c:	e7b0      	b.n	8006380 <_printf_i+0xfc>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	f043 0320 	orr.w	r3, r3, #32
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	2378      	movs	r3, #120	; 0x78
 8006428:	4828      	ldr	r0, [pc, #160]	; (80064cc <_printf_i+0x248>)
 800642a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800642e:	e7e3      	b.n	80063f8 <_printf_i+0x174>
 8006430:	0659      	lsls	r1, r3, #25
 8006432:	bf48      	it	mi
 8006434:	b2b6      	uxthmi	r6, r6
 8006436:	e7e6      	b.n	8006406 <_printf_i+0x182>
 8006438:	4615      	mov	r5, r2
 800643a:	e7bb      	b.n	80063b4 <_printf_i+0x130>
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	6826      	ldr	r6, [r4, #0]
 8006440:	6961      	ldr	r1, [r4, #20]
 8006442:	1d18      	adds	r0, r3, #4
 8006444:	6028      	str	r0, [r5, #0]
 8006446:	0635      	lsls	r5, r6, #24
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	d501      	bpl.n	8006450 <_printf_i+0x1cc>
 800644c:	6019      	str	r1, [r3, #0]
 800644e:	e002      	b.n	8006456 <_printf_i+0x1d2>
 8006450:	0670      	lsls	r0, r6, #25
 8006452:	d5fb      	bpl.n	800644c <_printf_i+0x1c8>
 8006454:	8019      	strh	r1, [r3, #0]
 8006456:	2300      	movs	r3, #0
 8006458:	6123      	str	r3, [r4, #16]
 800645a:	4615      	mov	r5, r2
 800645c:	e7ba      	b.n	80063d4 <_printf_i+0x150>
 800645e:	682b      	ldr	r3, [r5, #0]
 8006460:	1d1a      	adds	r2, r3, #4
 8006462:	602a      	str	r2, [r5, #0]
 8006464:	681d      	ldr	r5, [r3, #0]
 8006466:	6862      	ldr	r2, [r4, #4]
 8006468:	2100      	movs	r1, #0
 800646a:	4628      	mov	r0, r5
 800646c:	f7f9 feb8 	bl	80001e0 <memchr>
 8006470:	b108      	cbz	r0, 8006476 <_printf_i+0x1f2>
 8006472:	1b40      	subs	r0, r0, r5
 8006474:	6060      	str	r0, [r4, #4]
 8006476:	6863      	ldr	r3, [r4, #4]
 8006478:	6123      	str	r3, [r4, #16]
 800647a:	2300      	movs	r3, #0
 800647c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006480:	e7a8      	b.n	80063d4 <_printf_i+0x150>
 8006482:	6923      	ldr	r3, [r4, #16]
 8006484:	462a      	mov	r2, r5
 8006486:	4649      	mov	r1, r9
 8006488:	4640      	mov	r0, r8
 800648a:	47d0      	blx	sl
 800648c:	3001      	adds	r0, #1
 800648e:	d0ab      	beq.n	80063e8 <_printf_i+0x164>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	079b      	lsls	r3, r3, #30
 8006494:	d413      	bmi.n	80064be <_printf_i+0x23a>
 8006496:	68e0      	ldr	r0, [r4, #12]
 8006498:	9b03      	ldr	r3, [sp, #12]
 800649a:	4298      	cmp	r0, r3
 800649c:	bfb8      	it	lt
 800649e:	4618      	movlt	r0, r3
 80064a0:	e7a4      	b.n	80063ec <_printf_i+0x168>
 80064a2:	2301      	movs	r3, #1
 80064a4:	4632      	mov	r2, r6
 80064a6:	4649      	mov	r1, r9
 80064a8:	4640      	mov	r0, r8
 80064aa:	47d0      	blx	sl
 80064ac:	3001      	adds	r0, #1
 80064ae:	d09b      	beq.n	80063e8 <_printf_i+0x164>
 80064b0:	3501      	adds	r5, #1
 80064b2:	68e3      	ldr	r3, [r4, #12]
 80064b4:	9903      	ldr	r1, [sp, #12]
 80064b6:	1a5b      	subs	r3, r3, r1
 80064b8:	42ab      	cmp	r3, r5
 80064ba:	dcf2      	bgt.n	80064a2 <_printf_i+0x21e>
 80064bc:	e7eb      	b.n	8006496 <_printf_i+0x212>
 80064be:	2500      	movs	r5, #0
 80064c0:	f104 0619 	add.w	r6, r4, #25
 80064c4:	e7f5      	b.n	80064b2 <_printf_i+0x22e>
 80064c6:	bf00      	nop
 80064c8:	0800a36e 	.word	0x0800a36e
 80064cc:	0800a37f 	.word	0x0800a37f

080064d0 <_scanf_float>:
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	b087      	sub	sp, #28
 80064d6:	4617      	mov	r7, r2
 80064d8:	9303      	str	r3, [sp, #12]
 80064da:	688b      	ldr	r3, [r1, #8]
 80064dc:	1e5a      	subs	r2, r3, #1
 80064de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80064e2:	bf83      	ittte	hi
 80064e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80064e8:	195b      	addhi	r3, r3, r5
 80064ea:	9302      	strhi	r3, [sp, #8]
 80064ec:	2300      	movls	r3, #0
 80064ee:	bf86      	itte	hi
 80064f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80064f4:	608b      	strhi	r3, [r1, #8]
 80064f6:	9302      	strls	r3, [sp, #8]
 80064f8:	680b      	ldr	r3, [r1, #0]
 80064fa:	468b      	mov	fp, r1
 80064fc:	2500      	movs	r5, #0
 80064fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006502:	f84b 3b1c 	str.w	r3, [fp], #28
 8006506:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800650a:	4680      	mov	r8, r0
 800650c:	460c      	mov	r4, r1
 800650e:	465e      	mov	r6, fp
 8006510:	46aa      	mov	sl, r5
 8006512:	46a9      	mov	r9, r5
 8006514:	9501      	str	r5, [sp, #4]
 8006516:	68a2      	ldr	r2, [r4, #8]
 8006518:	b152      	cbz	r2, 8006530 <_scanf_float+0x60>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b4e      	cmp	r3, #78	; 0x4e
 8006520:	d864      	bhi.n	80065ec <_scanf_float+0x11c>
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d83c      	bhi.n	80065a0 <_scanf_float+0xd0>
 8006526:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800652a:	b2c8      	uxtb	r0, r1
 800652c:	280e      	cmp	r0, #14
 800652e:	d93a      	bls.n	80065a6 <_scanf_float+0xd6>
 8006530:	f1b9 0f00 	cmp.w	r9, #0
 8006534:	d003      	beq.n	800653e <_scanf_float+0x6e>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006542:	f1ba 0f01 	cmp.w	sl, #1
 8006546:	f200 8113 	bhi.w	8006770 <_scanf_float+0x2a0>
 800654a:	455e      	cmp	r6, fp
 800654c:	f200 8105 	bhi.w	800675a <_scanf_float+0x28a>
 8006550:	2501      	movs	r5, #1
 8006552:	4628      	mov	r0, r5
 8006554:	b007      	add	sp, #28
 8006556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800655e:	2a0d      	cmp	r2, #13
 8006560:	d8e6      	bhi.n	8006530 <_scanf_float+0x60>
 8006562:	a101      	add	r1, pc, #4	; (adr r1, 8006568 <_scanf_float+0x98>)
 8006564:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006568:	080066a7 	.word	0x080066a7
 800656c:	08006531 	.word	0x08006531
 8006570:	08006531 	.word	0x08006531
 8006574:	08006531 	.word	0x08006531
 8006578:	08006707 	.word	0x08006707
 800657c:	080066df 	.word	0x080066df
 8006580:	08006531 	.word	0x08006531
 8006584:	08006531 	.word	0x08006531
 8006588:	080066b5 	.word	0x080066b5
 800658c:	08006531 	.word	0x08006531
 8006590:	08006531 	.word	0x08006531
 8006594:	08006531 	.word	0x08006531
 8006598:	08006531 	.word	0x08006531
 800659c:	0800666d 	.word	0x0800666d
 80065a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80065a4:	e7db      	b.n	800655e <_scanf_float+0x8e>
 80065a6:	290e      	cmp	r1, #14
 80065a8:	d8c2      	bhi.n	8006530 <_scanf_float+0x60>
 80065aa:	a001      	add	r0, pc, #4	; (adr r0, 80065b0 <_scanf_float+0xe0>)
 80065ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80065b0:	0800665f 	.word	0x0800665f
 80065b4:	08006531 	.word	0x08006531
 80065b8:	0800665f 	.word	0x0800665f
 80065bc:	080066f3 	.word	0x080066f3
 80065c0:	08006531 	.word	0x08006531
 80065c4:	0800660d 	.word	0x0800660d
 80065c8:	08006649 	.word	0x08006649
 80065cc:	08006649 	.word	0x08006649
 80065d0:	08006649 	.word	0x08006649
 80065d4:	08006649 	.word	0x08006649
 80065d8:	08006649 	.word	0x08006649
 80065dc:	08006649 	.word	0x08006649
 80065e0:	08006649 	.word	0x08006649
 80065e4:	08006649 	.word	0x08006649
 80065e8:	08006649 	.word	0x08006649
 80065ec:	2b6e      	cmp	r3, #110	; 0x6e
 80065ee:	d809      	bhi.n	8006604 <_scanf_float+0x134>
 80065f0:	2b60      	cmp	r3, #96	; 0x60
 80065f2:	d8b2      	bhi.n	800655a <_scanf_float+0x8a>
 80065f4:	2b54      	cmp	r3, #84	; 0x54
 80065f6:	d077      	beq.n	80066e8 <_scanf_float+0x218>
 80065f8:	2b59      	cmp	r3, #89	; 0x59
 80065fa:	d199      	bne.n	8006530 <_scanf_float+0x60>
 80065fc:	2d07      	cmp	r5, #7
 80065fe:	d197      	bne.n	8006530 <_scanf_float+0x60>
 8006600:	2508      	movs	r5, #8
 8006602:	e029      	b.n	8006658 <_scanf_float+0x188>
 8006604:	2b74      	cmp	r3, #116	; 0x74
 8006606:	d06f      	beq.n	80066e8 <_scanf_float+0x218>
 8006608:	2b79      	cmp	r3, #121	; 0x79
 800660a:	e7f6      	b.n	80065fa <_scanf_float+0x12a>
 800660c:	6821      	ldr	r1, [r4, #0]
 800660e:	05c8      	lsls	r0, r1, #23
 8006610:	d51a      	bpl.n	8006648 <_scanf_float+0x178>
 8006612:	9b02      	ldr	r3, [sp, #8]
 8006614:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006618:	6021      	str	r1, [r4, #0]
 800661a:	f109 0901 	add.w	r9, r9, #1
 800661e:	b11b      	cbz	r3, 8006628 <_scanf_float+0x158>
 8006620:	3b01      	subs	r3, #1
 8006622:	3201      	adds	r2, #1
 8006624:	9302      	str	r3, [sp, #8]
 8006626:	60a2      	str	r2, [r4, #8]
 8006628:	68a3      	ldr	r3, [r4, #8]
 800662a:	3b01      	subs	r3, #1
 800662c:	60a3      	str	r3, [r4, #8]
 800662e:	6923      	ldr	r3, [r4, #16]
 8006630:	3301      	adds	r3, #1
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3b01      	subs	r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	607b      	str	r3, [r7, #4]
 800663c:	f340 8084 	ble.w	8006748 <_scanf_float+0x278>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	603b      	str	r3, [r7, #0]
 8006646:	e766      	b.n	8006516 <_scanf_float+0x46>
 8006648:	eb1a 0f05 	cmn.w	sl, r5
 800664c:	f47f af70 	bne.w	8006530 <_scanf_float+0x60>
 8006650:	6822      	ldr	r2, [r4, #0]
 8006652:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006656:	6022      	str	r2, [r4, #0]
 8006658:	f806 3b01 	strb.w	r3, [r6], #1
 800665c:	e7e4      	b.n	8006628 <_scanf_float+0x158>
 800665e:	6822      	ldr	r2, [r4, #0]
 8006660:	0610      	lsls	r0, r2, #24
 8006662:	f57f af65 	bpl.w	8006530 <_scanf_float+0x60>
 8006666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800666a:	e7f4      	b.n	8006656 <_scanf_float+0x186>
 800666c:	f1ba 0f00 	cmp.w	sl, #0
 8006670:	d10e      	bne.n	8006690 <_scanf_float+0x1c0>
 8006672:	f1b9 0f00 	cmp.w	r9, #0
 8006676:	d10e      	bne.n	8006696 <_scanf_float+0x1c6>
 8006678:	6822      	ldr	r2, [r4, #0]
 800667a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800667e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006682:	d108      	bne.n	8006696 <_scanf_float+0x1c6>
 8006684:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006688:	6022      	str	r2, [r4, #0]
 800668a:	f04f 0a01 	mov.w	sl, #1
 800668e:	e7e3      	b.n	8006658 <_scanf_float+0x188>
 8006690:	f1ba 0f02 	cmp.w	sl, #2
 8006694:	d055      	beq.n	8006742 <_scanf_float+0x272>
 8006696:	2d01      	cmp	r5, #1
 8006698:	d002      	beq.n	80066a0 <_scanf_float+0x1d0>
 800669a:	2d04      	cmp	r5, #4
 800669c:	f47f af48 	bne.w	8006530 <_scanf_float+0x60>
 80066a0:	3501      	adds	r5, #1
 80066a2:	b2ed      	uxtb	r5, r5
 80066a4:	e7d8      	b.n	8006658 <_scanf_float+0x188>
 80066a6:	f1ba 0f01 	cmp.w	sl, #1
 80066aa:	f47f af41 	bne.w	8006530 <_scanf_float+0x60>
 80066ae:	f04f 0a02 	mov.w	sl, #2
 80066b2:	e7d1      	b.n	8006658 <_scanf_float+0x188>
 80066b4:	b97d      	cbnz	r5, 80066d6 <_scanf_float+0x206>
 80066b6:	f1b9 0f00 	cmp.w	r9, #0
 80066ba:	f47f af3c 	bne.w	8006536 <_scanf_float+0x66>
 80066be:	6822      	ldr	r2, [r4, #0]
 80066c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80066c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80066c8:	f47f af39 	bne.w	800653e <_scanf_float+0x6e>
 80066cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80066d0:	6022      	str	r2, [r4, #0]
 80066d2:	2501      	movs	r5, #1
 80066d4:	e7c0      	b.n	8006658 <_scanf_float+0x188>
 80066d6:	2d03      	cmp	r5, #3
 80066d8:	d0e2      	beq.n	80066a0 <_scanf_float+0x1d0>
 80066da:	2d05      	cmp	r5, #5
 80066dc:	e7de      	b.n	800669c <_scanf_float+0x1cc>
 80066de:	2d02      	cmp	r5, #2
 80066e0:	f47f af26 	bne.w	8006530 <_scanf_float+0x60>
 80066e4:	2503      	movs	r5, #3
 80066e6:	e7b7      	b.n	8006658 <_scanf_float+0x188>
 80066e8:	2d06      	cmp	r5, #6
 80066ea:	f47f af21 	bne.w	8006530 <_scanf_float+0x60>
 80066ee:	2507      	movs	r5, #7
 80066f0:	e7b2      	b.n	8006658 <_scanf_float+0x188>
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	0591      	lsls	r1, r2, #22
 80066f6:	f57f af1b 	bpl.w	8006530 <_scanf_float+0x60>
 80066fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80066fe:	6022      	str	r2, [r4, #0]
 8006700:	f8cd 9004 	str.w	r9, [sp, #4]
 8006704:	e7a8      	b.n	8006658 <_scanf_float+0x188>
 8006706:	6822      	ldr	r2, [r4, #0]
 8006708:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800670c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006710:	d006      	beq.n	8006720 <_scanf_float+0x250>
 8006712:	0550      	lsls	r0, r2, #21
 8006714:	f57f af0c 	bpl.w	8006530 <_scanf_float+0x60>
 8006718:	f1b9 0f00 	cmp.w	r9, #0
 800671c:	f43f af0f 	beq.w	800653e <_scanf_float+0x6e>
 8006720:	0591      	lsls	r1, r2, #22
 8006722:	bf58      	it	pl
 8006724:	9901      	ldrpl	r1, [sp, #4]
 8006726:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800672a:	bf58      	it	pl
 800672c:	eba9 0101 	subpl.w	r1, r9, r1
 8006730:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006734:	bf58      	it	pl
 8006736:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800673a:	6022      	str	r2, [r4, #0]
 800673c:	f04f 0900 	mov.w	r9, #0
 8006740:	e78a      	b.n	8006658 <_scanf_float+0x188>
 8006742:	f04f 0a03 	mov.w	sl, #3
 8006746:	e787      	b.n	8006658 <_scanf_float+0x188>
 8006748:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800674c:	4639      	mov	r1, r7
 800674e:	4640      	mov	r0, r8
 8006750:	4798      	blx	r3
 8006752:	2800      	cmp	r0, #0
 8006754:	f43f aedf 	beq.w	8006516 <_scanf_float+0x46>
 8006758:	e6ea      	b.n	8006530 <_scanf_float+0x60>
 800675a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800675e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006762:	463a      	mov	r2, r7
 8006764:	4640      	mov	r0, r8
 8006766:	4798      	blx	r3
 8006768:	6923      	ldr	r3, [r4, #16]
 800676a:	3b01      	subs	r3, #1
 800676c:	6123      	str	r3, [r4, #16]
 800676e:	e6ec      	b.n	800654a <_scanf_float+0x7a>
 8006770:	1e6b      	subs	r3, r5, #1
 8006772:	2b06      	cmp	r3, #6
 8006774:	d825      	bhi.n	80067c2 <_scanf_float+0x2f2>
 8006776:	2d02      	cmp	r5, #2
 8006778:	d836      	bhi.n	80067e8 <_scanf_float+0x318>
 800677a:	455e      	cmp	r6, fp
 800677c:	f67f aee8 	bls.w	8006550 <_scanf_float+0x80>
 8006780:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006784:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006788:	463a      	mov	r2, r7
 800678a:	4640      	mov	r0, r8
 800678c:	4798      	blx	r3
 800678e:	6923      	ldr	r3, [r4, #16]
 8006790:	3b01      	subs	r3, #1
 8006792:	6123      	str	r3, [r4, #16]
 8006794:	e7f1      	b.n	800677a <_scanf_float+0x2aa>
 8006796:	9802      	ldr	r0, [sp, #8]
 8006798:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800679c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80067a0:	9002      	str	r0, [sp, #8]
 80067a2:	463a      	mov	r2, r7
 80067a4:	4640      	mov	r0, r8
 80067a6:	4798      	blx	r3
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	6123      	str	r3, [r4, #16]
 80067ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067b2:	fa5f fa8a 	uxtb.w	sl, sl
 80067b6:	f1ba 0f02 	cmp.w	sl, #2
 80067ba:	d1ec      	bne.n	8006796 <_scanf_float+0x2c6>
 80067bc:	3d03      	subs	r5, #3
 80067be:	b2ed      	uxtb	r5, r5
 80067c0:	1b76      	subs	r6, r6, r5
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	05da      	lsls	r2, r3, #23
 80067c6:	d52f      	bpl.n	8006828 <_scanf_float+0x358>
 80067c8:	055b      	lsls	r3, r3, #21
 80067ca:	d510      	bpl.n	80067ee <_scanf_float+0x31e>
 80067cc:	455e      	cmp	r6, fp
 80067ce:	f67f aebf 	bls.w	8006550 <_scanf_float+0x80>
 80067d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067da:	463a      	mov	r2, r7
 80067dc:	4640      	mov	r0, r8
 80067de:	4798      	blx	r3
 80067e0:	6923      	ldr	r3, [r4, #16]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	e7f1      	b.n	80067cc <_scanf_float+0x2fc>
 80067e8:	46aa      	mov	sl, r5
 80067ea:	9602      	str	r6, [sp, #8]
 80067ec:	e7df      	b.n	80067ae <_scanf_float+0x2de>
 80067ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	2965      	cmp	r1, #101	; 0x65
 80067f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80067fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80067fe:	6123      	str	r3, [r4, #16]
 8006800:	d00c      	beq.n	800681c <_scanf_float+0x34c>
 8006802:	2945      	cmp	r1, #69	; 0x45
 8006804:	d00a      	beq.n	800681c <_scanf_float+0x34c>
 8006806:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800680a:	463a      	mov	r2, r7
 800680c:	4640      	mov	r0, r8
 800680e:	4798      	blx	r3
 8006810:	6923      	ldr	r3, [r4, #16]
 8006812:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006816:	3b01      	subs	r3, #1
 8006818:	1eb5      	subs	r5, r6, #2
 800681a:	6123      	str	r3, [r4, #16]
 800681c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006820:	463a      	mov	r2, r7
 8006822:	4640      	mov	r0, r8
 8006824:	4798      	blx	r3
 8006826:	462e      	mov	r6, r5
 8006828:	6825      	ldr	r5, [r4, #0]
 800682a:	f015 0510 	ands.w	r5, r5, #16
 800682e:	d159      	bne.n	80068e4 <_scanf_float+0x414>
 8006830:	7035      	strb	r5, [r6, #0]
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800683c:	d11b      	bne.n	8006876 <_scanf_float+0x3a6>
 800683e:	9b01      	ldr	r3, [sp, #4]
 8006840:	454b      	cmp	r3, r9
 8006842:	eba3 0209 	sub.w	r2, r3, r9
 8006846:	d123      	bne.n	8006890 <_scanf_float+0x3c0>
 8006848:	2200      	movs	r2, #0
 800684a:	4659      	mov	r1, fp
 800684c:	4640      	mov	r0, r8
 800684e:	f000 feed 	bl	800762c <_strtod_r>
 8006852:	6822      	ldr	r2, [r4, #0]
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	f012 0f02 	tst.w	r2, #2
 800685a:	ec57 6b10 	vmov	r6, r7, d0
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	d021      	beq.n	80068a6 <_scanf_float+0x3d6>
 8006862:	9903      	ldr	r1, [sp, #12]
 8006864:	1d1a      	adds	r2, r3, #4
 8006866:	600a      	str	r2, [r1, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	e9c3 6700 	strd	r6, r7, [r3]
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	3301      	adds	r3, #1
 8006872:	60e3      	str	r3, [r4, #12]
 8006874:	e66d      	b.n	8006552 <_scanf_float+0x82>
 8006876:	9b04      	ldr	r3, [sp, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0e5      	beq.n	8006848 <_scanf_float+0x378>
 800687c:	9905      	ldr	r1, [sp, #20]
 800687e:	230a      	movs	r3, #10
 8006880:	462a      	mov	r2, r5
 8006882:	3101      	adds	r1, #1
 8006884:	4640      	mov	r0, r8
 8006886:	f000 ff59 	bl	800773c <_strtol_r>
 800688a:	9b04      	ldr	r3, [sp, #16]
 800688c:	9e05      	ldr	r6, [sp, #20]
 800688e:	1ac2      	subs	r2, r0, r3
 8006890:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006894:	429e      	cmp	r6, r3
 8006896:	bf28      	it	cs
 8006898:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800689c:	4912      	ldr	r1, [pc, #72]	; (80068e8 <_scanf_float+0x418>)
 800689e:	4630      	mov	r0, r6
 80068a0:	f000 f880 	bl	80069a4 <siprintf>
 80068a4:	e7d0      	b.n	8006848 <_scanf_float+0x378>
 80068a6:	9903      	ldr	r1, [sp, #12]
 80068a8:	f012 0f04 	tst.w	r2, #4
 80068ac:	f103 0204 	add.w	r2, r3, #4
 80068b0:	600a      	str	r2, [r1, #0]
 80068b2:	d1d9      	bne.n	8006868 <_scanf_float+0x398>
 80068b4:	f8d3 8000 	ldr.w	r8, [r3]
 80068b8:	ee10 2a10 	vmov	r2, s0
 80068bc:	ee10 0a10 	vmov	r0, s0
 80068c0:	463b      	mov	r3, r7
 80068c2:	4639      	mov	r1, r7
 80068c4:	f7fa f932 	bl	8000b2c <__aeabi_dcmpun>
 80068c8:	b128      	cbz	r0, 80068d6 <_scanf_float+0x406>
 80068ca:	4808      	ldr	r0, [pc, #32]	; (80068ec <_scanf_float+0x41c>)
 80068cc:	f000 f820 	bl	8006910 <nanf>
 80068d0:	ed88 0a00 	vstr	s0, [r8]
 80068d4:	e7cb      	b.n	800686e <_scanf_float+0x39e>
 80068d6:	4630      	mov	r0, r6
 80068d8:	4639      	mov	r1, r7
 80068da:	f7fa f985 	bl	8000be8 <__aeabi_d2f>
 80068de:	f8c8 0000 	str.w	r0, [r8]
 80068e2:	e7c4      	b.n	800686e <_scanf_float+0x39e>
 80068e4:	2500      	movs	r5, #0
 80068e6:	e634      	b.n	8006552 <_scanf_float+0x82>
 80068e8:	0800a390 	.word	0x0800a390
 80068ec:	0800a798 	.word	0x0800a798

080068f0 <_sbrk_r>:
 80068f0:	b538      	push	{r3, r4, r5, lr}
 80068f2:	4d06      	ldr	r5, [pc, #24]	; (800690c <_sbrk_r+0x1c>)
 80068f4:	2300      	movs	r3, #0
 80068f6:	4604      	mov	r4, r0
 80068f8:	4608      	mov	r0, r1
 80068fa:	602b      	str	r3, [r5, #0]
 80068fc:	f7fa febc 	bl	8001678 <_sbrk>
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d102      	bne.n	800690a <_sbrk_r+0x1a>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	b103      	cbz	r3, 800690a <_sbrk_r+0x1a>
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	bd38      	pop	{r3, r4, r5, pc}
 800690c:	20000438 	.word	0x20000438

08006910 <nanf>:
 8006910:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006918 <nanf+0x8>
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	7fc00000 	.word	0x7fc00000

0800691c <_raise_r>:
 800691c:	291f      	cmp	r1, #31
 800691e:	b538      	push	{r3, r4, r5, lr}
 8006920:	4604      	mov	r4, r0
 8006922:	460d      	mov	r5, r1
 8006924:	d904      	bls.n	8006930 <_raise_r+0x14>
 8006926:	2316      	movs	r3, #22
 8006928:	6003      	str	r3, [r0, #0]
 800692a:	f04f 30ff 	mov.w	r0, #4294967295
 800692e:	bd38      	pop	{r3, r4, r5, pc}
 8006930:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006932:	b112      	cbz	r2, 800693a <_raise_r+0x1e>
 8006934:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006938:	b94b      	cbnz	r3, 800694e <_raise_r+0x32>
 800693a:	4620      	mov	r0, r4
 800693c:	f000 f830 	bl	80069a0 <_getpid_r>
 8006940:	462a      	mov	r2, r5
 8006942:	4601      	mov	r1, r0
 8006944:	4620      	mov	r0, r4
 8006946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800694a:	f000 b817 	b.w	800697c <_kill_r>
 800694e:	2b01      	cmp	r3, #1
 8006950:	d00a      	beq.n	8006968 <_raise_r+0x4c>
 8006952:	1c59      	adds	r1, r3, #1
 8006954:	d103      	bne.n	800695e <_raise_r+0x42>
 8006956:	2316      	movs	r3, #22
 8006958:	6003      	str	r3, [r0, #0]
 800695a:	2001      	movs	r0, #1
 800695c:	e7e7      	b.n	800692e <_raise_r+0x12>
 800695e:	2400      	movs	r4, #0
 8006960:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006964:	4628      	mov	r0, r5
 8006966:	4798      	blx	r3
 8006968:	2000      	movs	r0, #0
 800696a:	e7e0      	b.n	800692e <_raise_r+0x12>

0800696c <raise>:
 800696c:	4b02      	ldr	r3, [pc, #8]	; (8006978 <raise+0xc>)
 800696e:	4601      	mov	r1, r0
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	f7ff bfd3 	b.w	800691c <_raise_r>
 8006976:	bf00      	nop
 8006978:	2000000c 	.word	0x2000000c

0800697c <_kill_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4d07      	ldr	r5, [pc, #28]	; (800699c <_kill_r+0x20>)
 8006980:	2300      	movs	r3, #0
 8006982:	4604      	mov	r4, r0
 8006984:	4608      	mov	r0, r1
 8006986:	4611      	mov	r1, r2
 8006988:	602b      	str	r3, [r5, #0]
 800698a:	f7fa fded 	bl	8001568 <_kill>
 800698e:	1c43      	adds	r3, r0, #1
 8006990:	d102      	bne.n	8006998 <_kill_r+0x1c>
 8006992:	682b      	ldr	r3, [r5, #0]
 8006994:	b103      	cbz	r3, 8006998 <_kill_r+0x1c>
 8006996:	6023      	str	r3, [r4, #0]
 8006998:	bd38      	pop	{r3, r4, r5, pc}
 800699a:	bf00      	nop
 800699c:	20000438 	.word	0x20000438

080069a0 <_getpid_r>:
 80069a0:	f7fa bdda 	b.w	8001558 <_getpid>

080069a4 <siprintf>:
 80069a4:	b40e      	push	{r1, r2, r3}
 80069a6:	b500      	push	{lr}
 80069a8:	b09c      	sub	sp, #112	; 0x70
 80069aa:	ab1d      	add	r3, sp, #116	; 0x74
 80069ac:	9002      	str	r0, [sp, #8]
 80069ae:	9006      	str	r0, [sp, #24]
 80069b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069b4:	4809      	ldr	r0, [pc, #36]	; (80069dc <siprintf+0x38>)
 80069b6:	9107      	str	r1, [sp, #28]
 80069b8:	9104      	str	r1, [sp, #16]
 80069ba:	4909      	ldr	r1, [pc, #36]	; (80069e0 <siprintf+0x3c>)
 80069bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c0:	9105      	str	r1, [sp, #20]
 80069c2:	6800      	ldr	r0, [r0, #0]
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	a902      	add	r1, sp, #8
 80069c8:	f002 fe06 	bl	80095d8 <_svfiprintf_r>
 80069cc:	9b02      	ldr	r3, [sp, #8]
 80069ce:	2200      	movs	r2, #0
 80069d0:	701a      	strb	r2, [r3, #0]
 80069d2:	b01c      	add	sp, #112	; 0x70
 80069d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069d8:	b003      	add	sp, #12
 80069da:	4770      	bx	lr
 80069dc:	2000000c 	.word	0x2000000c
 80069e0:	ffff0208 	.word	0xffff0208

080069e4 <sulp>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	4604      	mov	r4, r0
 80069e8:	460d      	mov	r5, r1
 80069ea:	ec45 4b10 	vmov	d0, r4, r5
 80069ee:	4616      	mov	r6, r2
 80069f0:	f002 fc32 	bl	8009258 <__ulp>
 80069f4:	ec51 0b10 	vmov	r0, r1, d0
 80069f8:	b17e      	cbz	r6, 8006a1a <sulp+0x36>
 80069fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80069fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	dd09      	ble.n	8006a1a <sulp+0x36>
 8006a06:	051b      	lsls	r3, r3, #20
 8006a08:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006a0c:	2400      	movs	r4, #0
 8006a0e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006a12:	4622      	mov	r2, r4
 8006a14:	462b      	mov	r3, r5
 8006a16:	f7f9 fdef 	bl	80005f8 <__aeabi_dmul>
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	0000      	movs	r0, r0
	...

08006a20 <_strtod_l>:
 8006a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a24:	ed2d 8b02 	vpush	{d8}
 8006a28:	b09d      	sub	sp, #116	; 0x74
 8006a2a:	461f      	mov	r7, r3
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	9318      	str	r3, [sp, #96]	; 0x60
 8006a30:	4ba2      	ldr	r3, [pc, #648]	; (8006cbc <_strtod_l+0x29c>)
 8006a32:	9213      	str	r2, [sp, #76]	; 0x4c
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	9305      	str	r3, [sp, #20]
 8006a38:	4604      	mov	r4, r0
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	4688      	mov	r8, r1
 8006a3e:	f7f9 fbc7 	bl	80001d0 <strlen>
 8006a42:	f04f 0a00 	mov.w	sl, #0
 8006a46:	4605      	mov	r5, r0
 8006a48:	f04f 0b00 	mov.w	fp, #0
 8006a4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	2a2b      	cmp	r2, #43	; 0x2b
 8006a56:	d04e      	beq.n	8006af6 <_strtod_l+0xd6>
 8006a58:	d83b      	bhi.n	8006ad2 <_strtod_l+0xb2>
 8006a5a:	2a0d      	cmp	r2, #13
 8006a5c:	d834      	bhi.n	8006ac8 <_strtod_l+0xa8>
 8006a5e:	2a08      	cmp	r2, #8
 8006a60:	d834      	bhi.n	8006acc <_strtod_l+0xac>
 8006a62:	2a00      	cmp	r2, #0
 8006a64:	d03e      	beq.n	8006ae4 <_strtod_l+0xc4>
 8006a66:	2300      	movs	r3, #0
 8006a68:	930a      	str	r3, [sp, #40]	; 0x28
 8006a6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006a6c:	7833      	ldrb	r3, [r6, #0]
 8006a6e:	2b30      	cmp	r3, #48	; 0x30
 8006a70:	f040 80b0 	bne.w	8006bd4 <_strtod_l+0x1b4>
 8006a74:	7873      	ldrb	r3, [r6, #1]
 8006a76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a7a:	2b58      	cmp	r3, #88	; 0x58
 8006a7c:	d168      	bne.n	8006b50 <_strtod_l+0x130>
 8006a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	ab18      	add	r3, sp, #96	; 0x60
 8006a84:	9702      	str	r7, [sp, #8]
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	4a8d      	ldr	r2, [pc, #564]	; (8006cc0 <_strtod_l+0x2a0>)
 8006a8a:	ab19      	add	r3, sp, #100	; 0x64
 8006a8c:	a917      	add	r1, sp, #92	; 0x5c
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f001 fd38 	bl	8008504 <__gethex>
 8006a94:	f010 0707 	ands.w	r7, r0, #7
 8006a98:	4605      	mov	r5, r0
 8006a9a:	d005      	beq.n	8006aa8 <_strtod_l+0x88>
 8006a9c:	2f06      	cmp	r7, #6
 8006a9e:	d12c      	bne.n	8006afa <_strtod_l+0xda>
 8006aa0:	3601      	adds	r6, #1
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	9617      	str	r6, [sp, #92]	; 0x5c
 8006aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8006aa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f040 8590 	bne.w	80075d0 <_strtod_l+0xbb0>
 8006ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab2:	b1eb      	cbz	r3, 8006af0 <_strtod_l+0xd0>
 8006ab4:	4652      	mov	r2, sl
 8006ab6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006aba:	ec43 2b10 	vmov	d0, r2, r3
 8006abe:	b01d      	add	sp, #116	; 0x74
 8006ac0:	ecbd 8b02 	vpop	{d8}
 8006ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac8:	2a20      	cmp	r2, #32
 8006aca:	d1cc      	bne.n	8006a66 <_strtod_l+0x46>
 8006acc:	3301      	adds	r3, #1
 8006ace:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ad0:	e7be      	b.n	8006a50 <_strtod_l+0x30>
 8006ad2:	2a2d      	cmp	r2, #45	; 0x2d
 8006ad4:	d1c7      	bne.n	8006a66 <_strtod_l+0x46>
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	920a      	str	r2, [sp, #40]	; 0x28
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1c2      	bne.n	8006a6a <_strtod_l+0x4a>
 8006ae4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ae6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f040 856e 	bne.w	80075cc <_strtod_l+0xbac>
 8006af0:	4652      	mov	r2, sl
 8006af2:	465b      	mov	r3, fp
 8006af4:	e7e1      	b.n	8006aba <_strtod_l+0x9a>
 8006af6:	2200      	movs	r2, #0
 8006af8:	e7ee      	b.n	8006ad8 <_strtod_l+0xb8>
 8006afa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006afc:	b13a      	cbz	r2, 8006b0e <_strtod_l+0xee>
 8006afe:	2135      	movs	r1, #53	; 0x35
 8006b00:	a81a      	add	r0, sp, #104	; 0x68
 8006b02:	f002 fcb4 	bl	800946e <__copybits>
 8006b06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f002 f873 	bl	8008bf4 <_Bfree>
 8006b0e:	3f01      	subs	r7, #1
 8006b10:	2f04      	cmp	r7, #4
 8006b12:	d806      	bhi.n	8006b22 <_strtod_l+0x102>
 8006b14:	e8df f007 	tbb	[pc, r7]
 8006b18:	1714030a 	.word	0x1714030a
 8006b1c:	0a          	.byte	0x0a
 8006b1d:	00          	.byte	0x00
 8006b1e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006b22:	0728      	lsls	r0, r5, #28
 8006b24:	d5c0      	bpl.n	8006aa8 <_strtod_l+0x88>
 8006b26:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006b2a:	e7bd      	b.n	8006aa8 <_strtod_l+0x88>
 8006b2c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006b30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b3a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006b3e:	e7f0      	b.n	8006b22 <_strtod_l+0x102>
 8006b40:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006cc4 <_strtod_l+0x2a4>
 8006b44:	e7ed      	b.n	8006b22 <_strtod_l+0x102>
 8006b46:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006b4a:	f04f 3aff 	mov.w	sl, #4294967295
 8006b4e:	e7e8      	b.n	8006b22 <_strtod_l+0x102>
 8006b50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b56:	785b      	ldrb	r3, [r3, #1]
 8006b58:	2b30      	cmp	r3, #48	; 0x30
 8006b5a:	d0f9      	beq.n	8006b50 <_strtod_l+0x130>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0a3      	beq.n	8006aa8 <_strtod_l+0x88>
 8006b60:	2301      	movs	r3, #1
 8006b62:	f04f 0900 	mov.w	r9, #0
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b6a:	9308      	str	r3, [sp, #32]
 8006b6c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006b70:	464f      	mov	r7, r9
 8006b72:	220a      	movs	r2, #10
 8006b74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006b76:	7806      	ldrb	r6, [r0, #0]
 8006b78:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006b7c:	b2d9      	uxtb	r1, r3
 8006b7e:	2909      	cmp	r1, #9
 8006b80:	d92a      	bls.n	8006bd8 <_strtod_l+0x1b8>
 8006b82:	9905      	ldr	r1, [sp, #20]
 8006b84:	462a      	mov	r2, r5
 8006b86:	f002 fe2f 	bl	80097e8 <strncmp>
 8006b8a:	b398      	cbz	r0, 8006bf4 <_strtod_l+0x1d4>
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	4632      	mov	r2, r6
 8006b90:	463d      	mov	r5, r7
 8006b92:	9005      	str	r0, [sp, #20]
 8006b94:	4603      	mov	r3, r0
 8006b96:	2a65      	cmp	r2, #101	; 0x65
 8006b98:	d001      	beq.n	8006b9e <_strtod_l+0x17e>
 8006b9a:	2a45      	cmp	r2, #69	; 0x45
 8006b9c:	d118      	bne.n	8006bd0 <_strtod_l+0x1b0>
 8006b9e:	b91d      	cbnz	r5, 8006ba8 <_strtod_l+0x188>
 8006ba0:	9a04      	ldr	r2, [sp, #16]
 8006ba2:	4302      	orrs	r2, r0
 8006ba4:	d09e      	beq.n	8006ae4 <_strtod_l+0xc4>
 8006ba6:	2500      	movs	r5, #0
 8006ba8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006bac:	f108 0201 	add.w	r2, r8, #1
 8006bb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006bb2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006bb6:	2a2b      	cmp	r2, #43	; 0x2b
 8006bb8:	d075      	beq.n	8006ca6 <_strtod_l+0x286>
 8006bba:	2a2d      	cmp	r2, #45	; 0x2d
 8006bbc:	d07b      	beq.n	8006cb6 <_strtod_l+0x296>
 8006bbe:	f04f 0c00 	mov.w	ip, #0
 8006bc2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006bc6:	2909      	cmp	r1, #9
 8006bc8:	f240 8082 	bls.w	8006cd0 <_strtod_l+0x2b0>
 8006bcc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006bd0:	2600      	movs	r6, #0
 8006bd2:	e09d      	b.n	8006d10 <_strtod_l+0x2f0>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	e7c4      	b.n	8006b62 <_strtod_l+0x142>
 8006bd8:	2f08      	cmp	r7, #8
 8006bda:	bfd8      	it	le
 8006bdc:	9907      	ldrle	r1, [sp, #28]
 8006bde:	f100 0001 	add.w	r0, r0, #1
 8006be2:	bfda      	itte	le
 8006be4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006be8:	9307      	strle	r3, [sp, #28]
 8006bea:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006bee:	3701      	adds	r7, #1
 8006bf0:	9017      	str	r0, [sp, #92]	; 0x5c
 8006bf2:	e7bf      	b.n	8006b74 <_strtod_l+0x154>
 8006bf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bf6:	195a      	adds	r2, r3, r5
 8006bf8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006bfa:	5d5a      	ldrb	r2, [r3, r5]
 8006bfc:	2f00      	cmp	r7, #0
 8006bfe:	d037      	beq.n	8006c70 <_strtod_l+0x250>
 8006c00:	9005      	str	r0, [sp, #20]
 8006c02:	463d      	mov	r5, r7
 8006c04:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006c08:	2b09      	cmp	r3, #9
 8006c0a:	d912      	bls.n	8006c32 <_strtod_l+0x212>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e7c2      	b.n	8006b96 <_strtod_l+0x176>
 8006c10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c16:	785a      	ldrb	r2, [r3, #1]
 8006c18:	3001      	adds	r0, #1
 8006c1a:	2a30      	cmp	r2, #48	; 0x30
 8006c1c:	d0f8      	beq.n	8006c10 <_strtod_l+0x1f0>
 8006c1e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006c22:	2b08      	cmp	r3, #8
 8006c24:	f200 84d9 	bhi.w	80075da <_strtod_l+0xbba>
 8006c28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c2a:	9005      	str	r0, [sp, #20]
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	9308      	str	r3, [sp, #32]
 8006c30:	4605      	mov	r5, r0
 8006c32:	3a30      	subs	r2, #48	; 0x30
 8006c34:	f100 0301 	add.w	r3, r0, #1
 8006c38:	d014      	beq.n	8006c64 <_strtod_l+0x244>
 8006c3a:	9905      	ldr	r1, [sp, #20]
 8006c3c:	4419      	add	r1, r3
 8006c3e:	9105      	str	r1, [sp, #20]
 8006c40:	462b      	mov	r3, r5
 8006c42:	eb00 0e05 	add.w	lr, r0, r5
 8006c46:	210a      	movs	r1, #10
 8006c48:	4573      	cmp	r3, lr
 8006c4a:	d113      	bne.n	8006c74 <_strtod_l+0x254>
 8006c4c:	182b      	adds	r3, r5, r0
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	f105 0501 	add.w	r5, r5, #1
 8006c54:	4405      	add	r5, r0
 8006c56:	dc1c      	bgt.n	8006c92 <_strtod_l+0x272>
 8006c58:	9907      	ldr	r1, [sp, #28]
 8006c5a:	230a      	movs	r3, #10
 8006c5c:	fb03 2301 	mla	r3, r3, r1, r2
 8006c60:	9307      	str	r3, [sp, #28]
 8006c62:	2300      	movs	r3, #0
 8006c64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c66:	1c51      	adds	r1, r2, #1
 8006c68:	9117      	str	r1, [sp, #92]	; 0x5c
 8006c6a:	7852      	ldrb	r2, [r2, #1]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	e7c9      	b.n	8006c04 <_strtod_l+0x1e4>
 8006c70:	4638      	mov	r0, r7
 8006c72:	e7d2      	b.n	8006c1a <_strtod_l+0x1fa>
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	dc04      	bgt.n	8006c82 <_strtod_l+0x262>
 8006c78:	9e07      	ldr	r6, [sp, #28]
 8006c7a:	434e      	muls	r6, r1
 8006c7c:	9607      	str	r6, [sp, #28]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	e7e2      	b.n	8006c48 <_strtod_l+0x228>
 8006c82:	f103 0c01 	add.w	ip, r3, #1
 8006c86:	f1bc 0f10 	cmp.w	ip, #16
 8006c8a:	bfd8      	it	le
 8006c8c:	fb01 f909 	mulle.w	r9, r1, r9
 8006c90:	e7f5      	b.n	8006c7e <_strtod_l+0x25e>
 8006c92:	2d10      	cmp	r5, #16
 8006c94:	bfdc      	itt	le
 8006c96:	230a      	movle	r3, #10
 8006c98:	fb03 2909 	mlale	r9, r3, r9, r2
 8006c9c:	e7e1      	b.n	8006c62 <_strtod_l+0x242>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	9305      	str	r3, [sp, #20]
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e77c      	b.n	8006ba0 <_strtod_l+0x180>
 8006ca6:	f04f 0c00 	mov.w	ip, #0
 8006caa:	f108 0202 	add.w	r2, r8, #2
 8006cae:	9217      	str	r2, [sp, #92]	; 0x5c
 8006cb0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006cb4:	e785      	b.n	8006bc2 <_strtod_l+0x1a2>
 8006cb6:	f04f 0c01 	mov.w	ip, #1
 8006cba:	e7f6      	b.n	8006caa <_strtod_l+0x28a>
 8006cbc:	0800a5e0 	.word	0x0800a5e0
 8006cc0:	0800a398 	.word	0x0800a398
 8006cc4:	7ff00000 	.word	0x7ff00000
 8006cc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006cca:	1c51      	adds	r1, r2, #1
 8006ccc:	9117      	str	r1, [sp, #92]	; 0x5c
 8006cce:	7852      	ldrb	r2, [r2, #1]
 8006cd0:	2a30      	cmp	r2, #48	; 0x30
 8006cd2:	d0f9      	beq.n	8006cc8 <_strtod_l+0x2a8>
 8006cd4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006cd8:	2908      	cmp	r1, #8
 8006cda:	f63f af79 	bhi.w	8006bd0 <_strtod_l+0x1b0>
 8006cde:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006ce2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ce4:	9206      	str	r2, [sp, #24]
 8006ce6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ce8:	1c51      	adds	r1, r2, #1
 8006cea:	9117      	str	r1, [sp, #92]	; 0x5c
 8006cec:	7852      	ldrb	r2, [r2, #1]
 8006cee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006cf2:	2e09      	cmp	r6, #9
 8006cf4:	d937      	bls.n	8006d66 <_strtod_l+0x346>
 8006cf6:	9e06      	ldr	r6, [sp, #24]
 8006cf8:	1b89      	subs	r1, r1, r6
 8006cfa:	2908      	cmp	r1, #8
 8006cfc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006d00:	dc02      	bgt.n	8006d08 <_strtod_l+0x2e8>
 8006d02:	4576      	cmp	r6, lr
 8006d04:	bfa8      	it	ge
 8006d06:	4676      	movge	r6, lr
 8006d08:	f1bc 0f00 	cmp.w	ip, #0
 8006d0c:	d000      	beq.n	8006d10 <_strtod_l+0x2f0>
 8006d0e:	4276      	negs	r6, r6
 8006d10:	2d00      	cmp	r5, #0
 8006d12:	d14d      	bne.n	8006db0 <_strtod_l+0x390>
 8006d14:	9904      	ldr	r1, [sp, #16]
 8006d16:	4301      	orrs	r1, r0
 8006d18:	f47f aec6 	bne.w	8006aa8 <_strtod_l+0x88>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f47f aee1 	bne.w	8006ae4 <_strtod_l+0xc4>
 8006d22:	2a69      	cmp	r2, #105	; 0x69
 8006d24:	d027      	beq.n	8006d76 <_strtod_l+0x356>
 8006d26:	dc24      	bgt.n	8006d72 <_strtod_l+0x352>
 8006d28:	2a49      	cmp	r2, #73	; 0x49
 8006d2a:	d024      	beq.n	8006d76 <_strtod_l+0x356>
 8006d2c:	2a4e      	cmp	r2, #78	; 0x4e
 8006d2e:	f47f aed9 	bne.w	8006ae4 <_strtod_l+0xc4>
 8006d32:	499f      	ldr	r1, [pc, #636]	; (8006fb0 <_strtod_l+0x590>)
 8006d34:	a817      	add	r0, sp, #92	; 0x5c
 8006d36:	f001 fe3d 	bl	80089b4 <__match>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	f43f aed2 	beq.w	8006ae4 <_strtod_l+0xc4>
 8006d40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b28      	cmp	r3, #40	; 0x28
 8006d46:	d12d      	bne.n	8006da4 <_strtod_l+0x384>
 8006d48:	499a      	ldr	r1, [pc, #616]	; (8006fb4 <_strtod_l+0x594>)
 8006d4a:	aa1a      	add	r2, sp, #104	; 0x68
 8006d4c:	a817      	add	r0, sp, #92	; 0x5c
 8006d4e:	f001 fe45 	bl	80089dc <__hexnan>
 8006d52:	2805      	cmp	r0, #5
 8006d54:	d126      	bne.n	8006da4 <_strtod_l+0x384>
 8006d56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d58:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006d5c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006d60:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006d64:	e6a0      	b.n	8006aa8 <_strtod_l+0x88>
 8006d66:	210a      	movs	r1, #10
 8006d68:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006d6c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006d70:	e7b9      	b.n	8006ce6 <_strtod_l+0x2c6>
 8006d72:	2a6e      	cmp	r2, #110	; 0x6e
 8006d74:	e7db      	b.n	8006d2e <_strtod_l+0x30e>
 8006d76:	4990      	ldr	r1, [pc, #576]	; (8006fb8 <_strtod_l+0x598>)
 8006d78:	a817      	add	r0, sp, #92	; 0x5c
 8006d7a:	f001 fe1b 	bl	80089b4 <__match>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	f43f aeb0 	beq.w	8006ae4 <_strtod_l+0xc4>
 8006d84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d86:	498d      	ldr	r1, [pc, #564]	; (8006fbc <_strtod_l+0x59c>)
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	a817      	add	r0, sp, #92	; 0x5c
 8006d8c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d8e:	f001 fe11 	bl	80089b4 <__match>
 8006d92:	b910      	cbnz	r0, 8006d9a <_strtod_l+0x37a>
 8006d94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d96:	3301      	adds	r3, #1
 8006d98:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d9a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006fcc <_strtod_l+0x5ac>
 8006d9e:	f04f 0a00 	mov.w	sl, #0
 8006da2:	e681      	b.n	8006aa8 <_strtod_l+0x88>
 8006da4:	4886      	ldr	r0, [pc, #536]	; (8006fc0 <_strtod_l+0x5a0>)
 8006da6:	f002 fd17 	bl	80097d8 <nan>
 8006daa:	ec5b ab10 	vmov	sl, fp, d0
 8006dae:	e67b      	b.n	8006aa8 <_strtod_l+0x88>
 8006db0:	9b05      	ldr	r3, [sp, #20]
 8006db2:	9807      	ldr	r0, [sp, #28]
 8006db4:	1af3      	subs	r3, r6, r3
 8006db6:	2f00      	cmp	r7, #0
 8006db8:	bf08      	it	eq
 8006dba:	462f      	moveq	r7, r5
 8006dbc:	2d10      	cmp	r5, #16
 8006dbe:	9306      	str	r3, [sp, #24]
 8006dc0:	46a8      	mov	r8, r5
 8006dc2:	bfa8      	it	ge
 8006dc4:	f04f 0810 	movge.w	r8, #16
 8006dc8:	f7f9 fb9c 	bl	8000504 <__aeabi_ui2d>
 8006dcc:	2d09      	cmp	r5, #9
 8006dce:	4682      	mov	sl, r0
 8006dd0:	468b      	mov	fp, r1
 8006dd2:	dd13      	ble.n	8006dfc <_strtod_l+0x3dc>
 8006dd4:	4b7b      	ldr	r3, [pc, #492]	; (8006fc4 <_strtod_l+0x5a4>)
 8006dd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006dda:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006dde:	f7f9 fc0b 	bl	80005f8 <__aeabi_dmul>
 8006de2:	4682      	mov	sl, r0
 8006de4:	4648      	mov	r0, r9
 8006de6:	468b      	mov	fp, r1
 8006de8:	f7f9 fb8c 	bl	8000504 <__aeabi_ui2d>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4650      	mov	r0, sl
 8006df2:	4659      	mov	r1, fp
 8006df4:	f7f9 fa4a 	bl	800028c <__adddf3>
 8006df8:	4682      	mov	sl, r0
 8006dfa:	468b      	mov	fp, r1
 8006dfc:	2d0f      	cmp	r5, #15
 8006dfe:	dc38      	bgt.n	8006e72 <_strtod_l+0x452>
 8006e00:	9b06      	ldr	r3, [sp, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f43f ae50 	beq.w	8006aa8 <_strtod_l+0x88>
 8006e08:	dd24      	ble.n	8006e54 <_strtod_l+0x434>
 8006e0a:	2b16      	cmp	r3, #22
 8006e0c:	dc0b      	bgt.n	8006e26 <_strtod_l+0x406>
 8006e0e:	496d      	ldr	r1, [pc, #436]	; (8006fc4 <_strtod_l+0x5a4>)
 8006e10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e18:	4652      	mov	r2, sl
 8006e1a:	465b      	mov	r3, fp
 8006e1c:	f7f9 fbec 	bl	80005f8 <__aeabi_dmul>
 8006e20:	4682      	mov	sl, r0
 8006e22:	468b      	mov	fp, r1
 8006e24:	e640      	b.n	8006aa8 <_strtod_l+0x88>
 8006e26:	9a06      	ldr	r2, [sp, #24]
 8006e28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	db20      	blt.n	8006e72 <_strtod_l+0x452>
 8006e30:	4c64      	ldr	r4, [pc, #400]	; (8006fc4 <_strtod_l+0x5a4>)
 8006e32:	f1c5 050f 	rsb	r5, r5, #15
 8006e36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	465b      	mov	r3, fp
 8006e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e42:	f7f9 fbd9 	bl	80005f8 <__aeabi_dmul>
 8006e46:	9b06      	ldr	r3, [sp, #24]
 8006e48:	1b5d      	subs	r5, r3, r5
 8006e4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006e4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006e52:	e7e3      	b.n	8006e1c <_strtod_l+0x3fc>
 8006e54:	9b06      	ldr	r3, [sp, #24]
 8006e56:	3316      	adds	r3, #22
 8006e58:	db0b      	blt.n	8006e72 <_strtod_l+0x452>
 8006e5a:	9b05      	ldr	r3, [sp, #20]
 8006e5c:	1b9e      	subs	r6, r3, r6
 8006e5e:	4b59      	ldr	r3, [pc, #356]	; (8006fc4 <_strtod_l+0x5a4>)
 8006e60:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006e64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e68:	4650      	mov	r0, sl
 8006e6a:	4659      	mov	r1, fp
 8006e6c:	f7f9 fcee 	bl	800084c <__aeabi_ddiv>
 8006e70:	e7d6      	b.n	8006e20 <_strtod_l+0x400>
 8006e72:	9b06      	ldr	r3, [sp, #24]
 8006e74:	eba5 0808 	sub.w	r8, r5, r8
 8006e78:	4498      	add	r8, r3
 8006e7a:	f1b8 0f00 	cmp.w	r8, #0
 8006e7e:	dd74      	ble.n	8006f6a <_strtod_l+0x54a>
 8006e80:	f018 030f 	ands.w	r3, r8, #15
 8006e84:	d00a      	beq.n	8006e9c <_strtod_l+0x47c>
 8006e86:	494f      	ldr	r1, [pc, #316]	; (8006fc4 <_strtod_l+0x5a4>)
 8006e88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	465b      	mov	r3, fp
 8006e90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e94:	f7f9 fbb0 	bl	80005f8 <__aeabi_dmul>
 8006e98:	4682      	mov	sl, r0
 8006e9a:	468b      	mov	fp, r1
 8006e9c:	f038 080f 	bics.w	r8, r8, #15
 8006ea0:	d04f      	beq.n	8006f42 <_strtod_l+0x522>
 8006ea2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006ea6:	dd22      	ble.n	8006eee <_strtod_l+0x4ce>
 8006ea8:	2500      	movs	r5, #0
 8006eaa:	462e      	mov	r6, r5
 8006eac:	9507      	str	r5, [sp, #28]
 8006eae:	9505      	str	r5, [sp, #20]
 8006eb0:	2322      	movs	r3, #34	; 0x22
 8006eb2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006fcc <_strtod_l+0x5ac>
 8006eb6:	6023      	str	r3, [r4, #0]
 8006eb8:	f04f 0a00 	mov.w	sl, #0
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f43f adf2 	beq.w	8006aa8 <_strtod_l+0x88>
 8006ec4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f001 fe94 	bl	8008bf4 <_Bfree>
 8006ecc:	9905      	ldr	r1, [sp, #20]
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f001 fe90 	bl	8008bf4 <_Bfree>
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f001 fe8c 	bl	8008bf4 <_Bfree>
 8006edc:	9907      	ldr	r1, [sp, #28]
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f001 fe88 	bl	8008bf4 <_Bfree>
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f001 fe84 	bl	8008bf4 <_Bfree>
 8006eec:	e5dc      	b.n	8006aa8 <_strtod_l+0x88>
 8006eee:	4b36      	ldr	r3, [pc, #216]	; (8006fc8 <_strtod_l+0x5a8>)
 8006ef0:	9304      	str	r3, [sp, #16]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006ef8:	4650      	mov	r0, sl
 8006efa:	4659      	mov	r1, fp
 8006efc:	4699      	mov	r9, r3
 8006efe:	f1b8 0f01 	cmp.w	r8, #1
 8006f02:	dc21      	bgt.n	8006f48 <_strtod_l+0x528>
 8006f04:	b10b      	cbz	r3, 8006f0a <_strtod_l+0x4ea>
 8006f06:	4682      	mov	sl, r0
 8006f08:	468b      	mov	fp, r1
 8006f0a:	4b2f      	ldr	r3, [pc, #188]	; (8006fc8 <_strtod_l+0x5a8>)
 8006f0c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006f10:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006f14:	4652      	mov	r2, sl
 8006f16:	465b      	mov	r3, fp
 8006f18:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006f1c:	f7f9 fb6c 	bl	80005f8 <__aeabi_dmul>
 8006f20:	4b2a      	ldr	r3, [pc, #168]	; (8006fcc <_strtod_l+0x5ac>)
 8006f22:	460a      	mov	r2, r1
 8006f24:	400b      	ands	r3, r1
 8006f26:	492a      	ldr	r1, [pc, #168]	; (8006fd0 <_strtod_l+0x5b0>)
 8006f28:	428b      	cmp	r3, r1
 8006f2a:	4682      	mov	sl, r0
 8006f2c:	d8bc      	bhi.n	8006ea8 <_strtod_l+0x488>
 8006f2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006f32:	428b      	cmp	r3, r1
 8006f34:	bf86      	itte	hi
 8006f36:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006fd4 <_strtod_l+0x5b4>
 8006f3a:	f04f 3aff 	movhi.w	sl, #4294967295
 8006f3e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006f42:	2300      	movs	r3, #0
 8006f44:	9304      	str	r3, [sp, #16]
 8006f46:	e084      	b.n	8007052 <_strtod_l+0x632>
 8006f48:	f018 0f01 	tst.w	r8, #1
 8006f4c:	d005      	beq.n	8006f5a <_strtod_l+0x53a>
 8006f4e:	9b04      	ldr	r3, [sp, #16]
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	f7f9 fb50 	bl	80005f8 <__aeabi_dmul>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	9a04      	ldr	r2, [sp, #16]
 8006f5c:	3208      	adds	r2, #8
 8006f5e:	f109 0901 	add.w	r9, r9, #1
 8006f62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f66:	9204      	str	r2, [sp, #16]
 8006f68:	e7c9      	b.n	8006efe <_strtod_l+0x4de>
 8006f6a:	d0ea      	beq.n	8006f42 <_strtod_l+0x522>
 8006f6c:	f1c8 0800 	rsb	r8, r8, #0
 8006f70:	f018 020f 	ands.w	r2, r8, #15
 8006f74:	d00a      	beq.n	8006f8c <_strtod_l+0x56c>
 8006f76:	4b13      	ldr	r3, [pc, #76]	; (8006fc4 <_strtod_l+0x5a4>)
 8006f78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f7c:	4650      	mov	r0, sl
 8006f7e:	4659      	mov	r1, fp
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f7f9 fc62 	bl	800084c <__aeabi_ddiv>
 8006f88:	4682      	mov	sl, r0
 8006f8a:	468b      	mov	fp, r1
 8006f8c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006f90:	d0d7      	beq.n	8006f42 <_strtod_l+0x522>
 8006f92:	f1b8 0f1f 	cmp.w	r8, #31
 8006f96:	dd1f      	ble.n	8006fd8 <_strtod_l+0x5b8>
 8006f98:	2500      	movs	r5, #0
 8006f9a:	462e      	mov	r6, r5
 8006f9c:	9507      	str	r5, [sp, #28]
 8006f9e:	9505      	str	r5, [sp, #20]
 8006fa0:	2322      	movs	r3, #34	; 0x22
 8006fa2:	f04f 0a00 	mov.w	sl, #0
 8006fa6:	f04f 0b00 	mov.w	fp, #0
 8006faa:	6023      	str	r3, [r4, #0]
 8006fac:	e786      	b.n	8006ebc <_strtod_l+0x49c>
 8006fae:	bf00      	nop
 8006fb0:	0800a369 	.word	0x0800a369
 8006fb4:	0800a3ac 	.word	0x0800a3ac
 8006fb8:	0800a361 	.word	0x0800a361
 8006fbc:	0800a4ec 	.word	0x0800a4ec
 8006fc0:	0800a798 	.word	0x0800a798
 8006fc4:	0800a678 	.word	0x0800a678
 8006fc8:	0800a650 	.word	0x0800a650
 8006fcc:	7ff00000 	.word	0x7ff00000
 8006fd0:	7ca00000 	.word	0x7ca00000
 8006fd4:	7fefffff 	.word	0x7fefffff
 8006fd8:	f018 0310 	ands.w	r3, r8, #16
 8006fdc:	bf18      	it	ne
 8006fde:	236a      	movne	r3, #106	; 0x6a
 8006fe0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007390 <_strtod_l+0x970>
 8006fe4:	9304      	str	r3, [sp, #16]
 8006fe6:	4650      	mov	r0, sl
 8006fe8:	4659      	mov	r1, fp
 8006fea:	2300      	movs	r3, #0
 8006fec:	f018 0f01 	tst.w	r8, #1
 8006ff0:	d004      	beq.n	8006ffc <_strtod_l+0x5dc>
 8006ff2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ff6:	f7f9 faff 	bl	80005f8 <__aeabi_dmul>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007000:	f109 0908 	add.w	r9, r9, #8
 8007004:	d1f2      	bne.n	8006fec <_strtod_l+0x5cc>
 8007006:	b10b      	cbz	r3, 800700c <_strtod_l+0x5ec>
 8007008:	4682      	mov	sl, r0
 800700a:	468b      	mov	fp, r1
 800700c:	9b04      	ldr	r3, [sp, #16]
 800700e:	b1c3      	cbz	r3, 8007042 <_strtod_l+0x622>
 8007010:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007014:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007018:	2b00      	cmp	r3, #0
 800701a:	4659      	mov	r1, fp
 800701c:	dd11      	ble.n	8007042 <_strtod_l+0x622>
 800701e:	2b1f      	cmp	r3, #31
 8007020:	f340 8124 	ble.w	800726c <_strtod_l+0x84c>
 8007024:	2b34      	cmp	r3, #52	; 0x34
 8007026:	bfde      	ittt	le
 8007028:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800702c:	f04f 33ff 	movle.w	r3, #4294967295
 8007030:	fa03 f202 	lslle.w	r2, r3, r2
 8007034:	f04f 0a00 	mov.w	sl, #0
 8007038:	bfcc      	ite	gt
 800703a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800703e:	ea02 0b01 	andle.w	fp, r2, r1
 8007042:	2200      	movs	r2, #0
 8007044:	2300      	movs	r3, #0
 8007046:	4650      	mov	r0, sl
 8007048:	4659      	mov	r1, fp
 800704a:	f7f9 fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800704e:	2800      	cmp	r0, #0
 8007050:	d1a2      	bne.n	8006f98 <_strtod_l+0x578>
 8007052:	9b07      	ldr	r3, [sp, #28]
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	9908      	ldr	r1, [sp, #32]
 8007058:	462b      	mov	r3, r5
 800705a:	463a      	mov	r2, r7
 800705c:	4620      	mov	r0, r4
 800705e:	f001 fe31 	bl	8008cc4 <__s2b>
 8007062:	9007      	str	r0, [sp, #28]
 8007064:	2800      	cmp	r0, #0
 8007066:	f43f af1f 	beq.w	8006ea8 <_strtod_l+0x488>
 800706a:	9b05      	ldr	r3, [sp, #20]
 800706c:	1b9e      	subs	r6, r3, r6
 800706e:	9b06      	ldr	r3, [sp, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	bfb4      	ite	lt
 8007074:	4633      	movlt	r3, r6
 8007076:	2300      	movge	r3, #0
 8007078:	930c      	str	r3, [sp, #48]	; 0x30
 800707a:	9b06      	ldr	r3, [sp, #24]
 800707c:	2500      	movs	r5, #0
 800707e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007082:	9312      	str	r3, [sp, #72]	; 0x48
 8007084:	462e      	mov	r6, r5
 8007086:	9b07      	ldr	r3, [sp, #28]
 8007088:	4620      	mov	r0, r4
 800708a:	6859      	ldr	r1, [r3, #4]
 800708c:	f001 fd72 	bl	8008b74 <_Balloc>
 8007090:	9005      	str	r0, [sp, #20]
 8007092:	2800      	cmp	r0, #0
 8007094:	f43f af0c 	beq.w	8006eb0 <_strtod_l+0x490>
 8007098:	9b07      	ldr	r3, [sp, #28]
 800709a:	691a      	ldr	r2, [r3, #16]
 800709c:	3202      	adds	r2, #2
 800709e:	f103 010c 	add.w	r1, r3, #12
 80070a2:	0092      	lsls	r2, r2, #2
 80070a4:	300c      	adds	r0, #12
 80070a6:	f001 fd4b 	bl	8008b40 <memcpy>
 80070aa:	ec4b ab10 	vmov	d0, sl, fp
 80070ae:	aa1a      	add	r2, sp, #104	; 0x68
 80070b0:	a919      	add	r1, sp, #100	; 0x64
 80070b2:	4620      	mov	r0, r4
 80070b4:	f002 f94c 	bl	8009350 <__d2b>
 80070b8:	ec4b ab18 	vmov	d8, sl, fp
 80070bc:	9018      	str	r0, [sp, #96]	; 0x60
 80070be:	2800      	cmp	r0, #0
 80070c0:	f43f aef6 	beq.w	8006eb0 <_strtod_l+0x490>
 80070c4:	2101      	movs	r1, #1
 80070c6:	4620      	mov	r0, r4
 80070c8:	f001 fe96 	bl	8008df8 <__i2b>
 80070cc:	4606      	mov	r6, r0
 80070ce:	2800      	cmp	r0, #0
 80070d0:	f43f aeee 	beq.w	8006eb0 <_strtod_l+0x490>
 80070d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070d6:	9904      	ldr	r1, [sp, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	bfab      	itete	ge
 80070dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80070de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80070e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80070e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80070e6:	bfac      	ite	ge
 80070e8:	eb03 0902 	addge.w	r9, r3, r2
 80070ec:	1ad7      	sublt	r7, r2, r3
 80070ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80070f0:	eba3 0801 	sub.w	r8, r3, r1
 80070f4:	4490      	add	r8, r2
 80070f6:	4ba1      	ldr	r3, [pc, #644]	; (800737c <_strtod_l+0x95c>)
 80070f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80070fc:	4598      	cmp	r8, r3
 80070fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007102:	f280 80c7 	bge.w	8007294 <_strtod_l+0x874>
 8007106:	eba3 0308 	sub.w	r3, r3, r8
 800710a:	2b1f      	cmp	r3, #31
 800710c:	eba2 0203 	sub.w	r2, r2, r3
 8007110:	f04f 0101 	mov.w	r1, #1
 8007114:	f300 80b1 	bgt.w	800727a <_strtod_l+0x85a>
 8007118:	fa01 f303 	lsl.w	r3, r1, r3
 800711c:	930d      	str	r3, [sp, #52]	; 0x34
 800711e:	2300      	movs	r3, #0
 8007120:	9308      	str	r3, [sp, #32]
 8007122:	eb09 0802 	add.w	r8, r9, r2
 8007126:	9b04      	ldr	r3, [sp, #16]
 8007128:	45c1      	cmp	r9, r8
 800712a:	4417      	add	r7, r2
 800712c:	441f      	add	r7, r3
 800712e:	464b      	mov	r3, r9
 8007130:	bfa8      	it	ge
 8007132:	4643      	movge	r3, r8
 8007134:	42bb      	cmp	r3, r7
 8007136:	bfa8      	it	ge
 8007138:	463b      	movge	r3, r7
 800713a:	2b00      	cmp	r3, #0
 800713c:	bfc2      	ittt	gt
 800713e:	eba8 0803 	subgt.w	r8, r8, r3
 8007142:	1aff      	subgt	r7, r7, r3
 8007144:	eba9 0903 	subgt.w	r9, r9, r3
 8007148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800714a:	2b00      	cmp	r3, #0
 800714c:	dd17      	ble.n	800717e <_strtod_l+0x75e>
 800714e:	4631      	mov	r1, r6
 8007150:	461a      	mov	r2, r3
 8007152:	4620      	mov	r0, r4
 8007154:	f001 ff10 	bl	8008f78 <__pow5mult>
 8007158:	4606      	mov	r6, r0
 800715a:	2800      	cmp	r0, #0
 800715c:	f43f aea8 	beq.w	8006eb0 <_strtod_l+0x490>
 8007160:	4601      	mov	r1, r0
 8007162:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007164:	4620      	mov	r0, r4
 8007166:	f001 fe5d 	bl	8008e24 <__multiply>
 800716a:	900b      	str	r0, [sp, #44]	; 0x2c
 800716c:	2800      	cmp	r0, #0
 800716e:	f43f ae9f 	beq.w	8006eb0 <_strtod_l+0x490>
 8007172:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007174:	4620      	mov	r0, r4
 8007176:	f001 fd3d 	bl	8008bf4 <_Bfree>
 800717a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800717c:	9318      	str	r3, [sp, #96]	; 0x60
 800717e:	f1b8 0f00 	cmp.w	r8, #0
 8007182:	f300 808c 	bgt.w	800729e <_strtod_l+0x87e>
 8007186:	9b06      	ldr	r3, [sp, #24]
 8007188:	2b00      	cmp	r3, #0
 800718a:	dd08      	ble.n	800719e <_strtod_l+0x77e>
 800718c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800718e:	9905      	ldr	r1, [sp, #20]
 8007190:	4620      	mov	r0, r4
 8007192:	f001 fef1 	bl	8008f78 <__pow5mult>
 8007196:	9005      	str	r0, [sp, #20]
 8007198:	2800      	cmp	r0, #0
 800719a:	f43f ae89 	beq.w	8006eb0 <_strtod_l+0x490>
 800719e:	2f00      	cmp	r7, #0
 80071a0:	dd08      	ble.n	80071b4 <_strtod_l+0x794>
 80071a2:	9905      	ldr	r1, [sp, #20]
 80071a4:	463a      	mov	r2, r7
 80071a6:	4620      	mov	r0, r4
 80071a8:	f001 ff40 	bl	800902c <__lshift>
 80071ac:	9005      	str	r0, [sp, #20]
 80071ae:	2800      	cmp	r0, #0
 80071b0:	f43f ae7e 	beq.w	8006eb0 <_strtod_l+0x490>
 80071b4:	f1b9 0f00 	cmp.w	r9, #0
 80071b8:	dd08      	ble.n	80071cc <_strtod_l+0x7ac>
 80071ba:	4631      	mov	r1, r6
 80071bc:	464a      	mov	r2, r9
 80071be:	4620      	mov	r0, r4
 80071c0:	f001 ff34 	bl	800902c <__lshift>
 80071c4:	4606      	mov	r6, r0
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f43f ae72 	beq.w	8006eb0 <_strtod_l+0x490>
 80071cc:	9a05      	ldr	r2, [sp, #20]
 80071ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071d0:	4620      	mov	r0, r4
 80071d2:	f001 ffb7 	bl	8009144 <__mdiff>
 80071d6:	4605      	mov	r5, r0
 80071d8:	2800      	cmp	r0, #0
 80071da:	f43f ae69 	beq.w	8006eb0 <_strtod_l+0x490>
 80071de:	68c3      	ldr	r3, [r0, #12]
 80071e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80071e2:	2300      	movs	r3, #0
 80071e4:	60c3      	str	r3, [r0, #12]
 80071e6:	4631      	mov	r1, r6
 80071e8:	f001 ff90 	bl	800910c <__mcmp>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	da60      	bge.n	80072b2 <_strtod_l+0x892>
 80071f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f2:	ea53 030a 	orrs.w	r3, r3, sl
 80071f6:	f040 8082 	bne.w	80072fe <_strtod_l+0x8de>
 80071fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d17d      	bne.n	80072fe <_strtod_l+0x8de>
 8007202:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007206:	0d1b      	lsrs	r3, r3, #20
 8007208:	051b      	lsls	r3, r3, #20
 800720a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800720e:	d976      	bls.n	80072fe <_strtod_l+0x8de>
 8007210:	696b      	ldr	r3, [r5, #20]
 8007212:	b913      	cbnz	r3, 800721a <_strtod_l+0x7fa>
 8007214:	692b      	ldr	r3, [r5, #16]
 8007216:	2b01      	cmp	r3, #1
 8007218:	dd71      	ble.n	80072fe <_strtod_l+0x8de>
 800721a:	4629      	mov	r1, r5
 800721c:	2201      	movs	r2, #1
 800721e:	4620      	mov	r0, r4
 8007220:	f001 ff04 	bl	800902c <__lshift>
 8007224:	4631      	mov	r1, r6
 8007226:	4605      	mov	r5, r0
 8007228:	f001 ff70 	bl	800910c <__mcmp>
 800722c:	2800      	cmp	r0, #0
 800722e:	dd66      	ble.n	80072fe <_strtod_l+0x8de>
 8007230:	9904      	ldr	r1, [sp, #16]
 8007232:	4a53      	ldr	r2, [pc, #332]	; (8007380 <_strtod_l+0x960>)
 8007234:	465b      	mov	r3, fp
 8007236:	2900      	cmp	r1, #0
 8007238:	f000 8081 	beq.w	800733e <_strtod_l+0x91e>
 800723c:	ea02 010b 	and.w	r1, r2, fp
 8007240:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007244:	dc7b      	bgt.n	800733e <_strtod_l+0x91e>
 8007246:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800724a:	f77f aea9 	ble.w	8006fa0 <_strtod_l+0x580>
 800724e:	4b4d      	ldr	r3, [pc, #308]	; (8007384 <_strtod_l+0x964>)
 8007250:	4650      	mov	r0, sl
 8007252:	4659      	mov	r1, fp
 8007254:	2200      	movs	r2, #0
 8007256:	f7f9 f9cf 	bl	80005f8 <__aeabi_dmul>
 800725a:	460b      	mov	r3, r1
 800725c:	4303      	orrs	r3, r0
 800725e:	bf08      	it	eq
 8007260:	2322      	moveq	r3, #34	; 0x22
 8007262:	4682      	mov	sl, r0
 8007264:	468b      	mov	fp, r1
 8007266:	bf08      	it	eq
 8007268:	6023      	streq	r3, [r4, #0]
 800726a:	e62b      	b.n	8006ec4 <_strtod_l+0x4a4>
 800726c:	f04f 32ff 	mov.w	r2, #4294967295
 8007270:	fa02 f303 	lsl.w	r3, r2, r3
 8007274:	ea03 0a0a 	and.w	sl, r3, sl
 8007278:	e6e3      	b.n	8007042 <_strtod_l+0x622>
 800727a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800727e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007282:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007286:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800728a:	fa01 f308 	lsl.w	r3, r1, r8
 800728e:	9308      	str	r3, [sp, #32]
 8007290:	910d      	str	r1, [sp, #52]	; 0x34
 8007292:	e746      	b.n	8007122 <_strtod_l+0x702>
 8007294:	2300      	movs	r3, #0
 8007296:	9308      	str	r3, [sp, #32]
 8007298:	2301      	movs	r3, #1
 800729a:	930d      	str	r3, [sp, #52]	; 0x34
 800729c:	e741      	b.n	8007122 <_strtod_l+0x702>
 800729e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072a0:	4642      	mov	r2, r8
 80072a2:	4620      	mov	r0, r4
 80072a4:	f001 fec2 	bl	800902c <__lshift>
 80072a8:	9018      	str	r0, [sp, #96]	; 0x60
 80072aa:	2800      	cmp	r0, #0
 80072ac:	f47f af6b 	bne.w	8007186 <_strtod_l+0x766>
 80072b0:	e5fe      	b.n	8006eb0 <_strtod_l+0x490>
 80072b2:	465f      	mov	r7, fp
 80072b4:	d16e      	bne.n	8007394 <_strtod_l+0x974>
 80072b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072bc:	b342      	cbz	r2, 8007310 <_strtod_l+0x8f0>
 80072be:	4a32      	ldr	r2, [pc, #200]	; (8007388 <_strtod_l+0x968>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d128      	bne.n	8007316 <_strtod_l+0x8f6>
 80072c4:	9b04      	ldr	r3, [sp, #16]
 80072c6:	4651      	mov	r1, sl
 80072c8:	b1eb      	cbz	r3, 8007306 <_strtod_l+0x8e6>
 80072ca:	4b2d      	ldr	r3, [pc, #180]	; (8007380 <_strtod_l+0x960>)
 80072cc:	403b      	ands	r3, r7
 80072ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80072d2:	f04f 32ff 	mov.w	r2, #4294967295
 80072d6:	d819      	bhi.n	800730c <_strtod_l+0x8ec>
 80072d8:	0d1b      	lsrs	r3, r3, #20
 80072da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072de:	fa02 f303 	lsl.w	r3, r2, r3
 80072e2:	4299      	cmp	r1, r3
 80072e4:	d117      	bne.n	8007316 <_strtod_l+0x8f6>
 80072e6:	4b29      	ldr	r3, [pc, #164]	; (800738c <_strtod_l+0x96c>)
 80072e8:	429f      	cmp	r7, r3
 80072ea:	d102      	bne.n	80072f2 <_strtod_l+0x8d2>
 80072ec:	3101      	adds	r1, #1
 80072ee:	f43f addf 	beq.w	8006eb0 <_strtod_l+0x490>
 80072f2:	4b23      	ldr	r3, [pc, #140]	; (8007380 <_strtod_l+0x960>)
 80072f4:	403b      	ands	r3, r7
 80072f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80072fa:	f04f 0a00 	mov.w	sl, #0
 80072fe:	9b04      	ldr	r3, [sp, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1a4      	bne.n	800724e <_strtod_l+0x82e>
 8007304:	e5de      	b.n	8006ec4 <_strtod_l+0x4a4>
 8007306:	f04f 33ff 	mov.w	r3, #4294967295
 800730a:	e7ea      	b.n	80072e2 <_strtod_l+0x8c2>
 800730c:	4613      	mov	r3, r2
 800730e:	e7e8      	b.n	80072e2 <_strtod_l+0x8c2>
 8007310:	ea53 030a 	orrs.w	r3, r3, sl
 8007314:	d08c      	beq.n	8007230 <_strtod_l+0x810>
 8007316:	9b08      	ldr	r3, [sp, #32]
 8007318:	b1db      	cbz	r3, 8007352 <_strtod_l+0x932>
 800731a:	423b      	tst	r3, r7
 800731c:	d0ef      	beq.n	80072fe <_strtod_l+0x8de>
 800731e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007320:	9a04      	ldr	r2, [sp, #16]
 8007322:	4650      	mov	r0, sl
 8007324:	4659      	mov	r1, fp
 8007326:	b1c3      	cbz	r3, 800735a <_strtod_l+0x93a>
 8007328:	f7ff fb5c 	bl	80069e4 <sulp>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	ec51 0b18 	vmov	r0, r1, d8
 8007334:	f7f8 ffaa 	bl	800028c <__adddf3>
 8007338:	4682      	mov	sl, r0
 800733a:	468b      	mov	fp, r1
 800733c:	e7df      	b.n	80072fe <_strtod_l+0x8de>
 800733e:	4013      	ands	r3, r2
 8007340:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007344:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007348:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800734c:	f04f 3aff 	mov.w	sl, #4294967295
 8007350:	e7d5      	b.n	80072fe <_strtod_l+0x8de>
 8007352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007354:	ea13 0f0a 	tst.w	r3, sl
 8007358:	e7e0      	b.n	800731c <_strtod_l+0x8fc>
 800735a:	f7ff fb43 	bl	80069e4 <sulp>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	ec51 0b18 	vmov	r0, r1, d8
 8007366:	f7f8 ff8f 	bl	8000288 <__aeabi_dsub>
 800736a:	2200      	movs	r2, #0
 800736c:	2300      	movs	r3, #0
 800736e:	4682      	mov	sl, r0
 8007370:	468b      	mov	fp, r1
 8007372:	f7f9 fba9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007376:	2800      	cmp	r0, #0
 8007378:	d0c1      	beq.n	80072fe <_strtod_l+0x8de>
 800737a:	e611      	b.n	8006fa0 <_strtod_l+0x580>
 800737c:	fffffc02 	.word	0xfffffc02
 8007380:	7ff00000 	.word	0x7ff00000
 8007384:	39500000 	.word	0x39500000
 8007388:	000fffff 	.word	0x000fffff
 800738c:	7fefffff 	.word	0x7fefffff
 8007390:	0800a3c0 	.word	0x0800a3c0
 8007394:	4631      	mov	r1, r6
 8007396:	4628      	mov	r0, r5
 8007398:	f002 f836 	bl	8009408 <__ratio>
 800739c:	ec59 8b10 	vmov	r8, r9, d0
 80073a0:	ee10 0a10 	vmov	r0, s0
 80073a4:	2200      	movs	r2, #0
 80073a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073aa:	4649      	mov	r1, r9
 80073ac:	f7f9 fba0 	bl	8000af0 <__aeabi_dcmple>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d07a      	beq.n	80074aa <_strtod_l+0xa8a>
 80073b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d04a      	beq.n	8007450 <_strtod_l+0xa30>
 80073ba:	4b95      	ldr	r3, [pc, #596]	; (8007610 <_strtod_l+0xbf0>)
 80073bc:	2200      	movs	r2, #0
 80073be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80073c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007610 <_strtod_l+0xbf0>
 80073c6:	f04f 0800 	mov.w	r8, #0
 80073ca:	4b92      	ldr	r3, [pc, #584]	; (8007614 <_strtod_l+0xbf4>)
 80073cc:	403b      	ands	r3, r7
 80073ce:	930d      	str	r3, [sp, #52]	; 0x34
 80073d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073d2:	4b91      	ldr	r3, [pc, #580]	; (8007618 <_strtod_l+0xbf8>)
 80073d4:	429a      	cmp	r2, r3
 80073d6:	f040 80b0 	bne.w	800753a <_strtod_l+0xb1a>
 80073da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80073e2:	ec4b ab10 	vmov	d0, sl, fp
 80073e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80073ea:	f001 ff35 	bl	8009258 <__ulp>
 80073ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073f2:	ec53 2b10 	vmov	r2, r3, d0
 80073f6:	f7f9 f8ff 	bl	80005f8 <__aeabi_dmul>
 80073fa:	4652      	mov	r2, sl
 80073fc:	465b      	mov	r3, fp
 80073fe:	f7f8 ff45 	bl	800028c <__adddf3>
 8007402:	460b      	mov	r3, r1
 8007404:	4983      	ldr	r1, [pc, #524]	; (8007614 <_strtod_l+0xbf4>)
 8007406:	4a85      	ldr	r2, [pc, #532]	; (800761c <_strtod_l+0xbfc>)
 8007408:	4019      	ands	r1, r3
 800740a:	4291      	cmp	r1, r2
 800740c:	4682      	mov	sl, r0
 800740e:	d960      	bls.n	80074d2 <_strtod_l+0xab2>
 8007410:	ee18 3a90 	vmov	r3, s17
 8007414:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007418:	4293      	cmp	r3, r2
 800741a:	d104      	bne.n	8007426 <_strtod_l+0xa06>
 800741c:	ee18 3a10 	vmov	r3, s16
 8007420:	3301      	adds	r3, #1
 8007422:	f43f ad45 	beq.w	8006eb0 <_strtod_l+0x490>
 8007426:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007628 <_strtod_l+0xc08>
 800742a:	f04f 3aff 	mov.w	sl, #4294967295
 800742e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007430:	4620      	mov	r0, r4
 8007432:	f001 fbdf 	bl	8008bf4 <_Bfree>
 8007436:	9905      	ldr	r1, [sp, #20]
 8007438:	4620      	mov	r0, r4
 800743a:	f001 fbdb 	bl	8008bf4 <_Bfree>
 800743e:	4631      	mov	r1, r6
 8007440:	4620      	mov	r0, r4
 8007442:	f001 fbd7 	bl	8008bf4 <_Bfree>
 8007446:	4629      	mov	r1, r5
 8007448:	4620      	mov	r0, r4
 800744a:	f001 fbd3 	bl	8008bf4 <_Bfree>
 800744e:	e61a      	b.n	8007086 <_strtod_l+0x666>
 8007450:	f1ba 0f00 	cmp.w	sl, #0
 8007454:	d11b      	bne.n	800748e <_strtod_l+0xa6e>
 8007456:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800745a:	b9f3      	cbnz	r3, 800749a <_strtod_l+0xa7a>
 800745c:	4b6c      	ldr	r3, [pc, #432]	; (8007610 <_strtod_l+0xbf0>)
 800745e:	2200      	movs	r2, #0
 8007460:	4640      	mov	r0, r8
 8007462:	4649      	mov	r1, r9
 8007464:	f7f9 fb3a 	bl	8000adc <__aeabi_dcmplt>
 8007468:	b9d0      	cbnz	r0, 80074a0 <_strtod_l+0xa80>
 800746a:	4640      	mov	r0, r8
 800746c:	4649      	mov	r1, r9
 800746e:	4b6c      	ldr	r3, [pc, #432]	; (8007620 <_strtod_l+0xc00>)
 8007470:	2200      	movs	r2, #0
 8007472:	f7f9 f8c1 	bl	80005f8 <__aeabi_dmul>
 8007476:	4680      	mov	r8, r0
 8007478:	4689      	mov	r9, r1
 800747a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800747e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007482:	9315      	str	r3, [sp, #84]	; 0x54
 8007484:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007488:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800748c:	e79d      	b.n	80073ca <_strtod_l+0x9aa>
 800748e:	f1ba 0f01 	cmp.w	sl, #1
 8007492:	d102      	bne.n	800749a <_strtod_l+0xa7a>
 8007494:	2f00      	cmp	r7, #0
 8007496:	f43f ad83 	beq.w	8006fa0 <_strtod_l+0x580>
 800749a:	4b62      	ldr	r3, [pc, #392]	; (8007624 <_strtod_l+0xc04>)
 800749c:	2200      	movs	r2, #0
 800749e:	e78e      	b.n	80073be <_strtod_l+0x99e>
 80074a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007620 <_strtod_l+0xc00>
 80074a4:	f04f 0800 	mov.w	r8, #0
 80074a8:	e7e7      	b.n	800747a <_strtod_l+0xa5a>
 80074aa:	4b5d      	ldr	r3, [pc, #372]	; (8007620 <_strtod_l+0xc00>)
 80074ac:	4640      	mov	r0, r8
 80074ae:	4649      	mov	r1, r9
 80074b0:	2200      	movs	r2, #0
 80074b2:	f7f9 f8a1 	bl	80005f8 <__aeabi_dmul>
 80074b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074b8:	4680      	mov	r8, r0
 80074ba:	4689      	mov	r9, r1
 80074bc:	b933      	cbnz	r3, 80074cc <_strtod_l+0xaac>
 80074be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074c2:	900e      	str	r0, [sp, #56]	; 0x38
 80074c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80074c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80074ca:	e7dd      	b.n	8007488 <_strtod_l+0xa68>
 80074cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80074d0:	e7f9      	b.n	80074c6 <_strtod_l+0xaa6>
 80074d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80074d6:	9b04      	ldr	r3, [sp, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1a8      	bne.n	800742e <_strtod_l+0xa0e>
 80074dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074e2:	0d1b      	lsrs	r3, r3, #20
 80074e4:	051b      	lsls	r3, r3, #20
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d1a1      	bne.n	800742e <_strtod_l+0xa0e>
 80074ea:	4640      	mov	r0, r8
 80074ec:	4649      	mov	r1, r9
 80074ee:	f7f9 fbe3 	bl	8000cb8 <__aeabi_d2lz>
 80074f2:	f7f9 f853 	bl	800059c <__aeabi_l2d>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4640      	mov	r0, r8
 80074fc:	4649      	mov	r1, r9
 80074fe:	f7f8 fec3 	bl	8000288 <__aeabi_dsub>
 8007502:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007504:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007508:	ea43 030a 	orr.w	r3, r3, sl
 800750c:	4313      	orrs	r3, r2
 800750e:	4680      	mov	r8, r0
 8007510:	4689      	mov	r9, r1
 8007512:	d055      	beq.n	80075c0 <_strtod_l+0xba0>
 8007514:	a336      	add	r3, pc, #216	; (adr r3, 80075f0 <_strtod_l+0xbd0>)
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	f7f9 fadf 	bl	8000adc <__aeabi_dcmplt>
 800751e:	2800      	cmp	r0, #0
 8007520:	f47f acd0 	bne.w	8006ec4 <_strtod_l+0x4a4>
 8007524:	a334      	add	r3, pc, #208	; (adr r3, 80075f8 <_strtod_l+0xbd8>)
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	4640      	mov	r0, r8
 800752c:	4649      	mov	r1, r9
 800752e:	f7f9 faf3 	bl	8000b18 <__aeabi_dcmpgt>
 8007532:	2800      	cmp	r0, #0
 8007534:	f43f af7b 	beq.w	800742e <_strtod_l+0xa0e>
 8007538:	e4c4      	b.n	8006ec4 <_strtod_l+0x4a4>
 800753a:	9b04      	ldr	r3, [sp, #16]
 800753c:	b333      	cbz	r3, 800758c <_strtod_l+0xb6c>
 800753e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007540:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007544:	d822      	bhi.n	800758c <_strtod_l+0xb6c>
 8007546:	a32e      	add	r3, pc, #184	; (adr r3, 8007600 <_strtod_l+0xbe0>)
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	4640      	mov	r0, r8
 800754e:	4649      	mov	r1, r9
 8007550:	f7f9 face 	bl	8000af0 <__aeabi_dcmple>
 8007554:	b1a0      	cbz	r0, 8007580 <_strtod_l+0xb60>
 8007556:	4649      	mov	r1, r9
 8007558:	4640      	mov	r0, r8
 800755a:	f7f9 fb25 	bl	8000ba8 <__aeabi_d2uiz>
 800755e:	2801      	cmp	r0, #1
 8007560:	bf38      	it	cc
 8007562:	2001      	movcc	r0, #1
 8007564:	f7f8 ffce 	bl	8000504 <__aeabi_ui2d>
 8007568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800756a:	4680      	mov	r8, r0
 800756c:	4689      	mov	r9, r1
 800756e:	bb23      	cbnz	r3, 80075ba <_strtod_l+0xb9a>
 8007570:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007574:	9010      	str	r0, [sp, #64]	; 0x40
 8007576:	9311      	str	r3, [sp, #68]	; 0x44
 8007578:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800757c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007582:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007584:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007588:	1a9b      	subs	r3, r3, r2
 800758a:	9309      	str	r3, [sp, #36]	; 0x24
 800758c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007590:	eeb0 0a48 	vmov.f32	s0, s16
 8007594:	eef0 0a68 	vmov.f32	s1, s17
 8007598:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800759c:	f001 fe5c 	bl	8009258 <__ulp>
 80075a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075a4:	ec53 2b10 	vmov	r2, r3, d0
 80075a8:	f7f9 f826 	bl	80005f8 <__aeabi_dmul>
 80075ac:	ec53 2b18 	vmov	r2, r3, d8
 80075b0:	f7f8 fe6c 	bl	800028c <__adddf3>
 80075b4:	4682      	mov	sl, r0
 80075b6:	468b      	mov	fp, r1
 80075b8:	e78d      	b.n	80074d6 <_strtod_l+0xab6>
 80075ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80075be:	e7db      	b.n	8007578 <_strtod_l+0xb58>
 80075c0:	a311      	add	r3, pc, #68	; (adr r3, 8007608 <_strtod_l+0xbe8>)
 80075c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c6:	f7f9 fa89 	bl	8000adc <__aeabi_dcmplt>
 80075ca:	e7b2      	b.n	8007532 <_strtod_l+0xb12>
 80075cc:	2300      	movs	r3, #0
 80075ce:	930a      	str	r3, [sp, #40]	; 0x28
 80075d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	f7ff ba6b 	b.w	8006ab0 <_strtod_l+0x90>
 80075da:	2a65      	cmp	r2, #101	; 0x65
 80075dc:	f43f ab5f 	beq.w	8006c9e <_strtod_l+0x27e>
 80075e0:	2a45      	cmp	r2, #69	; 0x45
 80075e2:	f43f ab5c 	beq.w	8006c9e <_strtod_l+0x27e>
 80075e6:	2301      	movs	r3, #1
 80075e8:	f7ff bb94 	b.w	8006d14 <_strtod_l+0x2f4>
 80075ec:	f3af 8000 	nop.w
 80075f0:	94a03595 	.word	0x94a03595
 80075f4:	3fdfffff 	.word	0x3fdfffff
 80075f8:	35afe535 	.word	0x35afe535
 80075fc:	3fe00000 	.word	0x3fe00000
 8007600:	ffc00000 	.word	0xffc00000
 8007604:	41dfffff 	.word	0x41dfffff
 8007608:	94a03595 	.word	0x94a03595
 800760c:	3fcfffff 	.word	0x3fcfffff
 8007610:	3ff00000 	.word	0x3ff00000
 8007614:	7ff00000 	.word	0x7ff00000
 8007618:	7fe00000 	.word	0x7fe00000
 800761c:	7c9fffff 	.word	0x7c9fffff
 8007620:	3fe00000 	.word	0x3fe00000
 8007624:	bff00000 	.word	0xbff00000
 8007628:	7fefffff 	.word	0x7fefffff

0800762c <_strtod_r>:
 800762c:	4b01      	ldr	r3, [pc, #4]	; (8007634 <_strtod_r+0x8>)
 800762e:	f7ff b9f7 	b.w	8006a20 <_strtod_l>
 8007632:	bf00      	nop
 8007634:	20000074 	.word	0x20000074

08007638 <_strtol_l.constprop.0>:
 8007638:	2b01      	cmp	r3, #1
 800763a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800763e:	d001      	beq.n	8007644 <_strtol_l.constprop.0+0xc>
 8007640:	2b24      	cmp	r3, #36	; 0x24
 8007642:	d906      	bls.n	8007652 <_strtol_l.constprop.0+0x1a>
 8007644:	f7fe f9c0 	bl	80059c8 <__errno>
 8007648:	2316      	movs	r3, #22
 800764a:	6003      	str	r3, [r0, #0]
 800764c:	2000      	movs	r0, #0
 800764e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007652:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007738 <_strtol_l.constprop.0+0x100>
 8007656:	460d      	mov	r5, r1
 8007658:	462e      	mov	r6, r5
 800765a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800765e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007662:	f017 0708 	ands.w	r7, r7, #8
 8007666:	d1f7      	bne.n	8007658 <_strtol_l.constprop.0+0x20>
 8007668:	2c2d      	cmp	r4, #45	; 0x2d
 800766a:	d132      	bne.n	80076d2 <_strtol_l.constprop.0+0x9a>
 800766c:	782c      	ldrb	r4, [r5, #0]
 800766e:	2701      	movs	r7, #1
 8007670:	1cb5      	adds	r5, r6, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d05b      	beq.n	800772e <_strtol_l.constprop.0+0xf6>
 8007676:	2b10      	cmp	r3, #16
 8007678:	d109      	bne.n	800768e <_strtol_l.constprop.0+0x56>
 800767a:	2c30      	cmp	r4, #48	; 0x30
 800767c:	d107      	bne.n	800768e <_strtol_l.constprop.0+0x56>
 800767e:	782c      	ldrb	r4, [r5, #0]
 8007680:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007684:	2c58      	cmp	r4, #88	; 0x58
 8007686:	d14d      	bne.n	8007724 <_strtol_l.constprop.0+0xec>
 8007688:	786c      	ldrb	r4, [r5, #1]
 800768a:	2310      	movs	r3, #16
 800768c:	3502      	adds	r5, #2
 800768e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007692:	f108 38ff 	add.w	r8, r8, #4294967295
 8007696:	f04f 0c00 	mov.w	ip, #0
 800769a:	fbb8 f9f3 	udiv	r9, r8, r3
 800769e:	4666      	mov	r6, ip
 80076a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80076a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80076a8:	f1be 0f09 	cmp.w	lr, #9
 80076ac:	d816      	bhi.n	80076dc <_strtol_l.constprop.0+0xa4>
 80076ae:	4674      	mov	r4, lr
 80076b0:	42a3      	cmp	r3, r4
 80076b2:	dd24      	ble.n	80076fe <_strtol_l.constprop.0+0xc6>
 80076b4:	f1bc 0f00 	cmp.w	ip, #0
 80076b8:	db1e      	blt.n	80076f8 <_strtol_l.constprop.0+0xc0>
 80076ba:	45b1      	cmp	r9, r6
 80076bc:	d31c      	bcc.n	80076f8 <_strtol_l.constprop.0+0xc0>
 80076be:	d101      	bne.n	80076c4 <_strtol_l.constprop.0+0x8c>
 80076c0:	45a2      	cmp	sl, r4
 80076c2:	db19      	blt.n	80076f8 <_strtol_l.constprop.0+0xc0>
 80076c4:	fb06 4603 	mla	r6, r6, r3, r4
 80076c8:	f04f 0c01 	mov.w	ip, #1
 80076cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076d0:	e7e8      	b.n	80076a4 <_strtol_l.constprop.0+0x6c>
 80076d2:	2c2b      	cmp	r4, #43	; 0x2b
 80076d4:	bf04      	itt	eq
 80076d6:	782c      	ldrbeq	r4, [r5, #0]
 80076d8:	1cb5      	addeq	r5, r6, #2
 80076da:	e7ca      	b.n	8007672 <_strtol_l.constprop.0+0x3a>
 80076dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80076e0:	f1be 0f19 	cmp.w	lr, #25
 80076e4:	d801      	bhi.n	80076ea <_strtol_l.constprop.0+0xb2>
 80076e6:	3c37      	subs	r4, #55	; 0x37
 80076e8:	e7e2      	b.n	80076b0 <_strtol_l.constprop.0+0x78>
 80076ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80076ee:	f1be 0f19 	cmp.w	lr, #25
 80076f2:	d804      	bhi.n	80076fe <_strtol_l.constprop.0+0xc6>
 80076f4:	3c57      	subs	r4, #87	; 0x57
 80076f6:	e7db      	b.n	80076b0 <_strtol_l.constprop.0+0x78>
 80076f8:	f04f 3cff 	mov.w	ip, #4294967295
 80076fc:	e7e6      	b.n	80076cc <_strtol_l.constprop.0+0x94>
 80076fe:	f1bc 0f00 	cmp.w	ip, #0
 8007702:	da05      	bge.n	8007710 <_strtol_l.constprop.0+0xd8>
 8007704:	2322      	movs	r3, #34	; 0x22
 8007706:	6003      	str	r3, [r0, #0]
 8007708:	4646      	mov	r6, r8
 800770a:	b942      	cbnz	r2, 800771e <_strtol_l.constprop.0+0xe6>
 800770c:	4630      	mov	r0, r6
 800770e:	e79e      	b.n	800764e <_strtol_l.constprop.0+0x16>
 8007710:	b107      	cbz	r7, 8007714 <_strtol_l.constprop.0+0xdc>
 8007712:	4276      	negs	r6, r6
 8007714:	2a00      	cmp	r2, #0
 8007716:	d0f9      	beq.n	800770c <_strtol_l.constprop.0+0xd4>
 8007718:	f1bc 0f00 	cmp.w	ip, #0
 800771c:	d000      	beq.n	8007720 <_strtol_l.constprop.0+0xe8>
 800771e:	1e69      	subs	r1, r5, #1
 8007720:	6011      	str	r1, [r2, #0]
 8007722:	e7f3      	b.n	800770c <_strtol_l.constprop.0+0xd4>
 8007724:	2430      	movs	r4, #48	; 0x30
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1b1      	bne.n	800768e <_strtol_l.constprop.0+0x56>
 800772a:	2308      	movs	r3, #8
 800772c:	e7af      	b.n	800768e <_strtol_l.constprop.0+0x56>
 800772e:	2c30      	cmp	r4, #48	; 0x30
 8007730:	d0a5      	beq.n	800767e <_strtol_l.constprop.0+0x46>
 8007732:	230a      	movs	r3, #10
 8007734:	e7ab      	b.n	800768e <_strtol_l.constprop.0+0x56>
 8007736:	bf00      	nop
 8007738:	0800a3e9 	.word	0x0800a3e9

0800773c <_strtol_r>:
 800773c:	f7ff bf7c 	b.w	8007638 <_strtol_l.constprop.0>

08007740 <quorem>:
 8007740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007744:	6903      	ldr	r3, [r0, #16]
 8007746:	690c      	ldr	r4, [r1, #16]
 8007748:	42a3      	cmp	r3, r4
 800774a:	4607      	mov	r7, r0
 800774c:	f2c0 8081 	blt.w	8007852 <quorem+0x112>
 8007750:	3c01      	subs	r4, #1
 8007752:	f101 0814 	add.w	r8, r1, #20
 8007756:	f100 0514 	add.w	r5, r0, #20
 800775a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800775e:	9301      	str	r3, [sp, #4]
 8007760:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007768:	3301      	adds	r3, #1
 800776a:	429a      	cmp	r2, r3
 800776c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007770:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007774:	fbb2 f6f3 	udiv	r6, r2, r3
 8007778:	d331      	bcc.n	80077de <quorem+0x9e>
 800777a:	f04f 0e00 	mov.w	lr, #0
 800777e:	4640      	mov	r0, r8
 8007780:	46ac      	mov	ip, r5
 8007782:	46f2      	mov	sl, lr
 8007784:	f850 2b04 	ldr.w	r2, [r0], #4
 8007788:	b293      	uxth	r3, r2
 800778a:	fb06 e303 	mla	r3, r6, r3, lr
 800778e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007792:	b29b      	uxth	r3, r3
 8007794:	ebaa 0303 	sub.w	r3, sl, r3
 8007798:	f8dc a000 	ldr.w	sl, [ip]
 800779c:	0c12      	lsrs	r2, r2, #16
 800779e:	fa13 f38a 	uxtah	r3, r3, sl
 80077a2:	fb06 e202 	mla	r2, r6, r2, lr
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	9b00      	ldr	r3, [sp, #0]
 80077aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077ae:	b292      	uxth	r2, r2
 80077b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80077b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80077bc:	4581      	cmp	r9, r0
 80077be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077c2:	f84c 3b04 	str.w	r3, [ip], #4
 80077c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077ca:	d2db      	bcs.n	8007784 <quorem+0x44>
 80077cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80077d0:	b92b      	cbnz	r3, 80077de <quorem+0x9e>
 80077d2:	9b01      	ldr	r3, [sp, #4]
 80077d4:	3b04      	subs	r3, #4
 80077d6:	429d      	cmp	r5, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	d32e      	bcc.n	800783a <quorem+0xfa>
 80077dc:	613c      	str	r4, [r7, #16]
 80077de:	4638      	mov	r0, r7
 80077e0:	f001 fc94 	bl	800910c <__mcmp>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	db24      	blt.n	8007832 <quorem+0xf2>
 80077e8:	3601      	adds	r6, #1
 80077ea:	4628      	mov	r0, r5
 80077ec:	f04f 0c00 	mov.w	ip, #0
 80077f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80077f4:	f8d0 e000 	ldr.w	lr, [r0]
 80077f8:	b293      	uxth	r3, r2
 80077fa:	ebac 0303 	sub.w	r3, ip, r3
 80077fe:	0c12      	lsrs	r2, r2, #16
 8007800:	fa13 f38e 	uxtah	r3, r3, lr
 8007804:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007808:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800780c:	b29b      	uxth	r3, r3
 800780e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007812:	45c1      	cmp	r9, r8
 8007814:	f840 3b04 	str.w	r3, [r0], #4
 8007818:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800781c:	d2e8      	bcs.n	80077f0 <quorem+0xb0>
 800781e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007822:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007826:	b922      	cbnz	r2, 8007832 <quorem+0xf2>
 8007828:	3b04      	subs	r3, #4
 800782a:	429d      	cmp	r5, r3
 800782c:	461a      	mov	r2, r3
 800782e:	d30a      	bcc.n	8007846 <quorem+0x106>
 8007830:	613c      	str	r4, [r7, #16]
 8007832:	4630      	mov	r0, r6
 8007834:	b003      	add	sp, #12
 8007836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783a:	6812      	ldr	r2, [r2, #0]
 800783c:	3b04      	subs	r3, #4
 800783e:	2a00      	cmp	r2, #0
 8007840:	d1cc      	bne.n	80077dc <quorem+0x9c>
 8007842:	3c01      	subs	r4, #1
 8007844:	e7c7      	b.n	80077d6 <quorem+0x96>
 8007846:	6812      	ldr	r2, [r2, #0]
 8007848:	3b04      	subs	r3, #4
 800784a:	2a00      	cmp	r2, #0
 800784c:	d1f0      	bne.n	8007830 <quorem+0xf0>
 800784e:	3c01      	subs	r4, #1
 8007850:	e7eb      	b.n	800782a <quorem+0xea>
 8007852:	2000      	movs	r0, #0
 8007854:	e7ee      	b.n	8007834 <quorem+0xf4>
	...

08007858 <_dtoa_r>:
 8007858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	ed2d 8b04 	vpush	{d8-d9}
 8007860:	ec57 6b10 	vmov	r6, r7, d0
 8007864:	b093      	sub	sp, #76	; 0x4c
 8007866:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007868:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800786c:	9106      	str	r1, [sp, #24]
 800786e:	ee10 aa10 	vmov	sl, s0
 8007872:	4604      	mov	r4, r0
 8007874:	9209      	str	r2, [sp, #36]	; 0x24
 8007876:	930c      	str	r3, [sp, #48]	; 0x30
 8007878:	46bb      	mov	fp, r7
 800787a:	b975      	cbnz	r5, 800789a <_dtoa_r+0x42>
 800787c:	2010      	movs	r0, #16
 800787e:	f7fe f8cd 	bl	8005a1c <malloc>
 8007882:	4602      	mov	r2, r0
 8007884:	6260      	str	r0, [r4, #36]	; 0x24
 8007886:	b920      	cbnz	r0, 8007892 <_dtoa_r+0x3a>
 8007888:	4ba7      	ldr	r3, [pc, #668]	; (8007b28 <_dtoa_r+0x2d0>)
 800788a:	21ea      	movs	r1, #234	; 0xea
 800788c:	48a7      	ldr	r0, [pc, #668]	; (8007b2c <_dtoa_r+0x2d4>)
 800788e:	f001 ffcd 	bl	800982c <__assert_func>
 8007892:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007896:	6005      	str	r5, [r0, #0]
 8007898:	60c5      	str	r5, [r0, #12]
 800789a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800789c:	6819      	ldr	r1, [r3, #0]
 800789e:	b151      	cbz	r1, 80078b6 <_dtoa_r+0x5e>
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	604a      	str	r2, [r1, #4]
 80078a4:	2301      	movs	r3, #1
 80078a6:	4093      	lsls	r3, r2
 80078a8:	608b      	str	r3, [r1, #8]
 80078aa:	4620      	mov	r0, r4
 80078ac:	f001 f9a2 	bl	8008bf4 <_Bfree>
 80078b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	1e3b      	subs	r3, r7, #0
 80078b8:	bfaa      	itet	ge
 80078ba:	2300      	movge	r3, #0
 80078bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80078c0:	f8c8 3000 	strge.w	r3, [r8]
 80078c4:	4b9a      	ldr	r3, [pc, #616]	; (8007b30 <_dtoa_r+0x2d8>)
 80078c6:	bfbc      	itt	lt
 80078c8:	2201      	movlt	r2, #1
 80078ca:	f8c8 2000 	strlt.w	r2, [r8]
 80078ce:	ea33 030b 	bics.w	r3, r3, fp
 80078d2:	d11b      	bne.n	800790c <_dtoa_r+0xb4>
 80078d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078e0:	4333      	orrs	r3, r6
 80078e2:	f000 8592 	beq.w	800840a <_dtoa_r+0xbb2>
 80078e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078e8:	b963      	cbnz	r3, 8007904 <_dtoa_r+0xac>
 80078ea:	4b92      	ldr	r3, [pc, #584]	; (8007b34 <_dtoa_r+0x2dc>)
 80078ec:	e022      	b.n	8007934 <_dtoa_r+0xdc>
 80078ee:	4b92      	ldr	r3, [pc, #584]	; (8007b38 <_dtoa_r+0x2e0>)
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	3308      	adds	r3, #8
 80078f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	9801      	ldr	r0, [sp, #4]
 80078fa:	b013      	add	sp, #76	; 0x4c
 80078fc:	ecbd 8b04 	vpop	{d8-d9}
 8007900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007904:	4b8b      	ldr	r3, [pc, #556]	; (8007b34 <_dtoa_r+0x2dc>)
 8007906:	9301      	str	r3, [sp, #4]
 8007908:	3303      	adds	r3, #3
 800790a:	e7f3      	b.n	80078f4 <_dtoa_r+0x9c>
 800790c:	2200      	movs	r2, #0
 800790e:	2300      	movs	r3, #0
 8007910:	4650      	mov	r0, sl
 8007912:	4659      	mov	r1, fp
 8007914:	f7f9 f8d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007918:	ec4b ab19 	vmov	d9, sl, fp
 800791c:	4680      	mov	r8, r0
 800791e:	b158      	cbz	r0, 8007938 <_dtoa_r+0xe0>
 8007920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007922:	2301      	movs	r3, #1
 8007924:	6013      	str	r3, [r2, #0]
 8007926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 856b 	beq.w	8008404 <_dtoa_r+0xbac>
 800792e:	4883      	ldr	r0, [pc, #524]	; (8007b3c <_dtoa_r+0x2e4>)
 8007930:	6018      	str	r0, [r3, #0]
 8007932:	1e43      	subs	r3, r0, #1
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	e7df      	b.n	80078f8 <_dtoa_r+0xa0>
 8007938:	ec4b ab10 	vmov	d0, sl, fp
 800793c:	aa10      	add	r2, sp, #64	; 0x40
 800793e:	a911      	add	r1, sp, #68	; 0x44
 8007940:	4620      	mov	r0, r4
 8007942:	f001 fd05 	bl	8009350 <__d2b>
 8007946:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800794a:	ee08 0a10 	vmov	s16, r0
 800794e:	2d00      	cmp	r5, #0
 8007950:	f000 8084 	beq.w	8007a5c <_dtoa_r+0x204>
 8007954:	ee19 3a90 	vmov	r3, s19
 8007958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800795c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007960:	4656      	mov	r6, sl
 8007962:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007966:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800796a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800796e:	4b74      	ldr	r3, [pc, #464]	; (8007b40 <_dtoa_r+0x2e8>)
 8007970:	2200      	movs	r2, #0
 8007972:	4630      	mov	r0, r6
 8007974:	4639      	mov	r1, r7
 8007976:	f7f8 fc87 	bl	8000288 <__aeabi_dsub>
 800797a:	a365      	add	r3, pc, #404	; (adr r3, 8007b10 <_dtoa_r+0x2b8>)
 800797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007980:	f7f8 fe3a 	bl	80005f8 <__aeabi_dmul>
 8007984:	a364      	add	r3, pc, #400	; (adr r3, 8007b18 <_dtoa_r+0x2c0>)
 8007986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798a:	f7f8 fc7f 	bl	800028c <__adddf3>
 800798e:	4606      	mov	r6, r0
 8007990:	4628      	mov	r0, r5
 8007992:	460f      	mov	r7, r1
 8007994:	f7f8 fdc6 	bl	8000524 <__aeabi_i2d>
 8007998:	a361      	add	r3, pc, #388	; (adr r3, 8007b20 <_dtoa_r+0x2c8>)
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	f7f8 fe2b 	bl	80005f8 <__aeabi_dmul>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4630      	mov	r0, r6
 80079a8:	4639      	mov	r1, r7
 80079aa:	f7f8 fc6f 	bl	800028c <__adddf3>
 80079ae:	4606      	mov	r6, r0
 80079b0:	460f      	mov	r7, r1
 80079b2:	f7f9 f8d1 	bl	8000b58 <__aeabi_d2iz>
 80079b6:	2200      	movs	r2, #0
 80079b8:	9000      	str	r0, [sp, #0]
 80079ba:	2300      	movs	r3, #0
 80079bc:	4630      	mov	r0, r6
 80079be:	4639      	mov	r1, r7
 80079c0:	f7f9 f88c 	bl	8000adc <__aeabi_dcmplt>
 80079c4:	b150      	cbz	r0, 80079dc <_dtoa_r+0x184>
 80079c6:	9800      	ldr	r0, [sp, #0]
 80079c8:	f7f8 fdac 	bl	8000524 <__aeabi_i2d>
 80079cc:	4632      	mov	r2, r6
 80079ce:	463b      	mov	r3, r7
 80079d0:	f7f9 f87a 	bl	8000ac8 <__aeabi_dcmpeq>
 80079d4:	b910      	cbnz	r0, 80079dc <_dtoa_r+0x184>
 80079d6:	9b00      	ldr	r3, [sp, #0]
 80079d8:	3b01      	subs	r3, #1
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	9b00      	ldr	r3, [sp, #0]
 80079de:	2b16      	cmp	r3, #22
 80079e0:	d85a      	bhi.n	8007a98 <_dtoa_r+0x240>
 80079e2:	9a00      	ldr	r2, [sp, #0]
 80079e4:	4b57      	ldr	r3, [pc, #348]	; (8007b44 <_dtoa_r+0x2ec>)
 80079e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	ec51 0b19 	vmov	r0, r1, d9
 80079f2:	f7f9 f873 	bl	8000adc <__aeabi_dcmplt>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d050      	beq.n	8007a9c <_dtoa_r+0x244>
 80079fa:	9b00      	ldr	r3, [sp, #0]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	2300      	movs	r3, #0
 8007a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a06:	1b5d      	subs	r5, r3, r5
 8007a08:	1e6b      	subs	r3, r5, #1
 8007a0a:	9305      	str	r3, [sp, #20]
 8007a0c:	bf45      	ittet	mi
 8007a0e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007a12:	9304      	strmi	r3, [sp, #16]
 8007a14:	2300      	movpl	r3, #0
 8007a16:	2300      	movmi	r3, #0
 8007a18:	bf4c      	ite	mi
 8007a1a:	9305      	strmi	r3, [sp, #20]
 8007a1c:	9304      	strpl	r3, [sp, #16]
 8007a1e:	9b00      	ldr	r3, [sp, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	db3d      	blt.n	8007aa0 <_dtoa_r+0x248>
 8007a24:	9b05      	ldr	r3, [sp, #20]
 8007a26:	9a00      	ldr	r2, [sp, #0]
 8007a28:	920a      	str	r2, [sp, #40]	; 0x28
 8007a2a:	4413      	add	r3, r2
 8007a2c:	9305      	str	r3, [sp, #20]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	9307      	str	r3, [sp, #28]
 8007a32:	9b06      	ldr	r3, [sp, #24]
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	f200 8089 	bhi.w	8007b4c <_dtoa_r+0x2f4>
 8007a3a:	2b05      	cmp	r3, #5
 8007a3c:	bfc4      	itt	gt
 8007a3e:	3b04      	subgt	r3, #4
 8007a40:	9306      	strgt	r3, [sp, #24]
 8007a42:	9b06      	ldr	r3, [sp, #24]
 8007a44:	f1a3 0302 	sub.w	r3, r3, #2
 8007a48:	bfcc      	ite	gt
 8007a4a:	2500      	movgt	r5, #0
 8007a4c:	2501      	movle	r5, #1
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	f200 8087 	bhi.w	8007b62 <_dtoa_r+0x30a>
 8007a54:	e8df f003 	tbb	[pc, r3]
 8007a58:	59383a2d 	.word	0x59383a2d
 8007a5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007a60:	441d      	add	r5, r3
 8007a62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a66:	2b20      	cmp	r3, #32
 8007a68:	bfc1      	itttt	gt
 8007a6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a72:	fa0b f303 	lslgt.w	r3, fp, r3
 8007a76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a7a:	bfda      	itte	le
 8007a7c:	f1c3 0320 	rsble	r3, r3, #32
 8007a80:	fa06 f003 	lslle.w	r0, r6, r3
 8007a84:	4318      	orrgt	r0, r3
 8007a86:	f7f8 fd3d 	bl	8000504 <__aeabi_ui2d>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	4606      	mov	r6, r0
 8007a8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a92:	3d01      	subs	r5, #1
 8007a94:	930e      	str	r3, [sp, #56]	; 0x38
 8007a96:	e76a      	b.n	800796e <_dtoa_r+0x116>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e7b2      	b.n	8007a02 <_dtoa_r+0x1aa>
 8007a9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a9e:	e7b1      	b.n	8007a04 <_dtoa_r+0x1ac>
 8007aa0:	9b04      	ldr	r3, [sp, #16]
 8007aa2:	9a00      	ldr	r2, [sp, #0]
 8007aa4:	1a9b      	subs	r3, r3, r2
 8007aa6:	9304      	str	r3, [sp, #16]
 8007aa8:	4253      	negs	r3, r2
 8007aaa:	9307      	str	r3, [sp, #28]
 8007aac:	2300      	movs	r3, #0
 8007aae:	930a      	str	r3, [sp, #40]	; 0x28
 8007ab0:	e7bf      	b.n	8007a32 <_dtoa_r+0x1da>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9308      	str	r3, [sp, #32]
 8007ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	dc55      	bgt.n	8007b68 <_dtoa_r+0x310>
 8007abc:	2301      	movs	r3, #1
 8007abe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ac6:	e00c      	b.n	8007ae2 <_dtoa_r+0x28a>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e7f3      	b.n	8007ab4 <_dtoa_r+0x25c>
 8007acc:	2300      	movs	r3, #0
 8007ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ad0:	9308      	str	r3, [sp, #32]
 8007ad2:	9b00      	ldr	r3, [sp, #0]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	9302      	str	r3, [sp, #8]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	9303      	str	r3, [sp, #12]
 8007ade:	bfb8      	it	lt
 8007ae0:	2301      	movlt	r3, #1
 8007ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	6042      	str	r2, [r0, #4]
 8007ae8:	2204      	movs	r2, #4
 8007aea:	f102 0614 	add.w	r6, r2, #20
 8007aee:	429e      	cmp	r6, r3
 8007af0:	6841      	ldr	r1, [r0, #4]
 8007af2:	d93d      	bls.n	8007b70 <_dtoa_r+0x318>
 8007af4:	4620      	mov	r0, r4
 8007af6:	f001 f83d 	bl	8008b74 <_Balloc>
 8007afa:	9001      	str	r0, [sp, #4]
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d13b      	bne.n	8007b78 <_dtoa_r+0x320>
 8007b00:	4b11      	ldr	r3, [pc, #68]	; (8007b48 <_dtoa_r+0x2f0>)
 8007b02:	4602      	mov	r2, r0
 8007b04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007b08:	e6c0      	b.n	800788c <_dtoa_r+0x34>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e7df      	b.n	8007ace <_dtoa_r+0x276>
 8007b0e:	bf00      	nop
 8007b10:	636f4361 	.word	0x636f4361
 8007b14:	3fd287a7 	.word	0x3fd287a7
 8007b18:	8b60c8b3 	.word	0x8b60c8b3
 8007b1c:	3fc68a28 	.word	0x3fc68a28
 8007b20:	509f79fb 	.word	0x509f79fb
 8007b24:	3fd34413 	.word	0x3fd34413
 8007b28:	0800a4f6 	.word	0x0800a4f6
 8007b2c:	0800a50d 	.word	0x0800a50d
 8007b30:	7ff00000 	.word	0x7ff00000
 8007b34:	0800a4f2 	.word	0x0800a4f2
 8007b38:	0800a4e9 	.word	0x0800a4e9
 8007b3c:	0800a36d 	.word	0x0800a36d
 8007b40:	3ff80000 	.word	0x3ff80000
 8007b44:	0800a678 	.word	0x0800a678
 8007b48:	0800a568 	.word	0x0800a568
 8007b4c:	2501      	movs	r5, #1
 8007b4e:	2300      	movs	r3, #0
 8007b50:	9306      	str	r3, [sp, #24]
 8007b52:	9508      	str	r5, [sp, #32]
 8007b54:	f04f 33ff 	mov.w	r3, #4294967295
 8007b58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2312      	movs	r3, #18
 8007b60:	e7b0      	b.n	8007ac4 <_dtoa_r+0x26c>
 8007b62:	2301      	movs	r3, #1
 8007b64:	9308      	str	r3, [sp, #32]
 8007b66:	e7f5      	b.n	8007b54 <_dtoa_r+0x2fc>
 8007b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b6e:	e7b8      	b.n	8007ae2 <_dtoa_r+0x28a>
 8007b70:	3101      	adds	r1, #1
 8007b72:	6041      	str	r1, [r0, #4]
 8007b74:	0052      	lsls	r2, r2, #1
 8007b76:	e7b8      	b.n	8007aea <_dtoa_r+0x292>
 8007b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b7a:	9a01      	ldr	r2, [sp, #4]
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	2b0e      	cmp	r3, #14
 8007b82:	f200 809d 	bhi.w	8007cc0 <_dtoa_r+0x468>
 8007b86:	2d00      	cmp	r5, #0
 8007b88:	f000 809a 	beq.w	8007cc0 <_dtoa_r+0x468>
 8007b8c:	9b00      	ldr	r3, [sp, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	dd32      	ble.n	8007bf8 <_dtoa_r+0x3a0>
 8007b92:	4ab7      	ldr	r2, [pc, #732]	; (8007e70 <_dtoa_r+0x618>)
 8007b94:	f003 030f 	and.w	r3, r3, #15
 8007b98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ba0:	9b00      	ldr	r3, [sp, #0]
 8007ba2:	05d8      	lsls	r0, r3, #23
 8007ba4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ba8:	d516      	bpl.n	8007bd8 <_dtoa_r+0x380>
 8007baa:	4bb2      	ldr	r3, [pc, #712]	; (8007e74 <_dtoa_r+0x61c>)
 8007bac:	ec51 0b19 	vmov	r0, r1, d9
 8007bb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bb4:	f7f8 fe4a 	bl	800084c <__aeabi_ddiv>
 8007bb8:	f007 070f 	and.w	r7, r7, #15
 8007bbc:	4682      	mov	sl, r0
 8007bbe:	468b      	mov	fp, r1
 8007bc0:	2503      	movs	r5, #3
 8007bc2:	4eac      	ldr	r6, [pc, #688]	; (8007e74 <_dtoa_r+0x61c>)
 8007bc4:	b957      	cbnz	r7, 8007bdc <_dtoa_r+0x384>
 8007bc6:	4642      	mov	r2, r8
 8007bc8:	464b      	mov	r3, r9
 8007bca:	4650      	mov	r0, sl
 8007bcc:	4659      	mov	r1, fp
 8007bce:	f7f8 fe3d 	bl	800084c <__aeabi_ddiv>
 8007bd2:	4682      	mov	sl, r0
 8007bd4:	468b      	mov	fp, r1
 8007bd6:	e028      	b.n	8007c2a <_dtoa_r+0x3d2>
 8007bd8:	2502      	movs	r5, #2
 8007bda:	e7f2      	b.n	8007bc2 <_dtoa_r+0x36a>
 8007bdc:	07f9      	lsls	r1, r7, #31
 8007bde:	d508      	bpl.n	8007bf2 <_dtoa_r+0x39a>
 8007be0:	4640      	mov	r0, r8
 8007be2:	4649      	mov	r1, r9
 8007be4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007be8:	f7f8 fd06 	bl	80005f8 <__aeabi_dmul>
 8007bec:	3501      	adds	r5, #1
 8007bee:	4680      	mov	r8, r0
 8007bf0:	4689      	mov	r9, r1
 8007bf2:	107f      	asrs	r7, r7, #1
 8007bf4:	3608      	adds	r6, #8
 8007bf6:	e7e5      	b.n	8007bc4 <_dtoa_r+0x36c>
 8007bf8:	f000 809b 	beq.w	8007d32 <_dtoa_r+0x4da>
 8007bfc:	9b00      	ldr	r3, [sp, #0]
 8007bfe:	4f9d      	ldr	r7, [pc, #628]	; (8007e74 <_dtoa_r+0x61c>)
 8007c00:	425e      	negs	r6, r3
 8007c02:	4b9b      	ldr	r3, [pc, #620]	; (8007e70 <_dtoa_r+0x618>)
 8007c04:	f006 020f 	and.w	r2, r6, #15
 8007c08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	ec51 0b19 	vmov	r0, r1, d9
 8007c14:	f7f8 fcf0 	bl	80005f8 <__aeabi_dmul>
 8007c18:	1136      	asrs	r6, r6, #4
 8007c1a:	4682      	mov	sl, r0
 8007c1c:	468b      	mov	fp, r1
 8007c1e:	2300      	movs	r3, #0
 8007c20:	2502      	movs	r5, #2
 8007c22:	2e00      	cmp	r6, #0
 8007c24:	d17a      	bne.n	8007d1c <_dtoa_r+0x4c4>
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1d3      	bne.n	8007bd2 <_dtoa_r+0x37a>
 8007c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 8082 	beq.w	8007d36 <_dtoa_r+0x4de>
 8007c32:	4b91      	ldr	r3, [pc, #580]	; (8007e78 <_dtoa_r+0x620>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	4650      	mov	r0, sl
 8007c38:	4659      	mov	r1, fp
 8007c3a:	f7f8 ff4f 	bl	8000adc <__aeabi_dcmplt>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d079      	beq.n	8007d36 <_dtoa_r+0x4de>
 8007c42:	9b03      	ldr	r3, [sp, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d076      	beq.n	8007d36 <_dtoa_r+0x4de>
 8007c48:	9b02      	ldr	r3, [sp, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	dd36      	ble.n	8007cbc <_dtoa_r+0x464>
 8007c4e:	9b00      	ldr	r3, [sp, #0]
 8007c50:	4650      	mov	r0, sl
 8007c52:	4659      	mov	r1, fp
 8007c54:	1e5f      	subs	r7, r3, #1
 8007c56:	2200      	movs	r2, #0
 8007c58:	4b88      	ldr	r3, [pc, #544]	; (8007e7c <_dtoa_r+0x624>)
 8007c5a:	f7f8 fccd 	bl	80005f8 <__aeabi_dmul>
 8007c5e:	9e02      	ldr	r6, [sp, #8]
 8007c60:	4682      	mov	sl, r0
 8007c62:	468b      	mov	fp, r1
 8007c64:	3501      	adds	r5, #1
 8007c66:	4628      	mov	r0, r5
 8007c68:	f7f8 fc5c 	bl	8000524 <__aeabi_i2d>
 8007c6c:	4652      	mov	r2, sl
 8007c6e:	465b      	mov	r3, fp
 8007c70:	f7f8 fcc2 	bl	80005f8 <__aeabi_dmul>
 8007c74:	4b82      	ldr	r3, [pc, #520]	; (8007e80 <_dtoa_r+0x628>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	f7f8 fb08 	bl	800028c <__adddf3>
 8007c7c:	46d0      	mov	r8, sl
 8007c7e:	46d9      	mov	r9, fp
 8007c80:	4682      	mov	sl, r0
 8007c82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007c86:	2e00      	cmp	r6, #0
 8007c88:	d158      	bne.n	8007d3c <_dtoa_r+0x4e4>
 8007c8a:	4b7e      	ldr	r3, [pc, #504]	; (8007e84 <_dtoa_r+0x62c>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	4640      	mov	r0, r8
 8007c90:	4649      	mov	r1, r9
 8007c92:	f7f8 faf9 	bl	8000288 <__aeabi_dsub>
 8007c96:	4652      	mov	r2, sl
 8007c98:	465b      	mov	r3, fp
 8007c9a:	4680      	mov	r8, r0
 8007c9c:	4689      	mov	r9, r1
 8007c9e:	f7f8 ff3b 	bl	8000b18 <__aeabi_dcmpgt>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	f040 8295 	bne.w	80081d2 <_dtoa_r+0x97a>
 8007ca8:	4652      	mov	r2, sl
 8007caa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007cae:	4640      	mov	r0, r8
 8007cb0:	4649      	mov	r1, r9
 8007cb2:	f7f8 ff13 	bl	8000adc <__aeabi_dcmplt>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	f040 8289 	bne.w	80081ce <_dtoa_r+0x976>
 8007cbc:	ec5b ab19 	vmov	sl, fp, d9
 8007cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f2c0 8148 	blt.w	8007f58 <_dtoa_r+0x700>
 8007cc8:	9a00      	ldr	r2, [sp, #0]
 8007cca:	2a0e      	cmp	r2, #14
 8007ccc:	f300 8144 	bgt.w	8007f58 <_dtoa_r+0x700>
 8007cd0:	4b67      	ldr	r3, [pc, #412]	; (8007e70 <_dtoa_r+0x618>)
 8007cd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f280 80d5 	bge.w	8007e8c <_dtoa_r+0x634>
 8007ce2:	9b03      	ldr	r3, [sp, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f300 80d1 	bgt.w	8007e8c <_dtoa_r+0x634>
 8007cea:	f040 826f 	bne.w	80081cc <_dtoa_r+0x974>
 8007cee:	4b65      	ldr	r3, [pc, #404]	; (8007e84 <_dtoa_r+0x62c>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	f7f8 fc7f 	bl	80005f8 <__aeabi_dmul>
 8007cfa:	4652      	mov	r2, sl
 8007cfc:	465b      	mov	r3, fp
 8007cfe:	f7f8 ff01 	bl	8000b04 <__aeabi_dcmpge>
 8007d02:	9e03      	ldr	r6, [sp, #12]
 8007d04:	4637      	mov	r7, r6
 8007d06:	2800      	cmp	r0, #0
 8007d08:	f040 8245 	bne.w	8008196 <_dtoa_r+0x93e>
 8007d0c:	9d01      	ldr	r5, [sp, #4]
 8007d0e:	2331      	movs	r3, #49	; 0x31
 8007d10:	f805 3b01 	strb.w	r3, [r5], #1
 8007d14:	9b00      	ldr	r3, [sp, #0]
 8007d16:	3301      	adds	r3, #1
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	e240      	b.n	800819e <_dtoa_r+0x946>
 8007d1c:	07f2      	lsls	r2, r6, #31
 8007d1e:	d505      	bpl.n	8007d2c <_dtoa_r+0x4d4>
 8007d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d24:	f7f8 fc68 	bl	80005f8 <__aeabi_dmul>
 8007d28:	3501      	adds	r5, #1
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	1076      	asrs	r6, r6, #1
 8007d2e:	3708      	adds	r7, #8
 8007d30:	e777      	b.n	8007c22 <_dtoa_r+0x3ca>
 8007d32:	2502      	movs	r5, #2
 8007d34:	e779      	b.n	8007c2a <_dtoa_r+0x3d2>
 8007d36:	9f00      	ldr	r7, [sp, #0]
 8007d38:	9e03      	ldr	r6, [sp, #12]
 8007d3a:	e794      	b.n	8007c66 <_dtoa_r+0x40e>
 8007d3c:	9901      	ldr	r1, [sp, #4]
 8007d3e:	4b4c      	ldr	r3, [pc, #304]	; (8007e70 <_dtoa_r+0x618>)
 8007d40:	4431      	add	r1, r6
 8007d42:	910d      	str	r1, [sp, #52]	; 0x34
 8007d44:	9908      	ldr	r1, [sp, #32]
 8007d46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d4e:	2900      	cmp	r1, #0
 8007d50:	d043      	beq.n	8007dda <_dtoa_r+0x582>
 8007d52:	494d      	ldr	r1, [pc, #308]	; (8007e88 <_dtoa_r+0x630>)
 8007d54:	2000      	movs	r0, #0
 8007d56:	f7f8 fd79 	bl	800084c <__aeabi_ddiv>
 8007d5a:	4652      	mov	r2, sl
 8007d5c:	465b      	mov	r3, fp
 8007d5e:	f7f8 fa93 	bl	8000288 <__aeabi_dsub>
 8007d62:	9d01      	ldr	r5, [sp, #4]
 8007d64:	4682      	mov	sl, r0
 8007d66:	468b      	mov	fp, r1
 8007d68:	4649      	mov	r1, r9
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	f7f8 fef4 	bl	8000b58 <__aeabi_d2iz>
 8007d70:	4606      	mov	r6, r0
 8007d72:	f7f8 fbd7 	bl	8000524 <__aeabi_i2d>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	4649      	mov	r1, r9
 8007d7e:	f7f8 fa83 	bl	8000288 <__aeabi_dsub>
 8007d82:	3630      	adds	r6, #48	; 0x30
 8007d84:	f805 6b01 	strb.w	r6, [r5], #1
 8007d88:	4652      	mov	r2, sl
 8007d8a:	465b      	mov	r3, fp
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	4689      	mov	r9, r1
 8007d90:	f7f8 fea4 	bl	8000adc <__aeabi_dcmplt>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d163      	bne.n	8007e60 <_dtoa_r+0x608>
 8007d98:	4642      	mov	r2, r8
 8007d9a:	464b      	mov	r3, r9
 8007d9c:	4936      	ldr	r1, [pc, #216]	; (8007e78 <_dtoa_r+0x620>)
 8007d9e:	2000      	movs	r0, #0
 8007da0:	f7f8 fa72 	bl	8000288 <__aeabi_dsub>
 8007da4:	4652      	mov	r2, sl
 8007da6:	465b      	mov	r3, fp
 8007da8:	f7f8 fe98 	bl	8000adc <__aeabi_dcmplt>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	f040 80b5 	bne.w	8007f1c <_dtoa_r+0x6c4>
 8007db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007db4:	429d      	cmp	r5, r3
 8007db6:	d081      	beq.n	8007cbc <_dtoa_r+0x464>
 8007db8:	4b30      	ldr	r3, [pc, #192]	; (8007e7c <_dtoa_r+0x624>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	4650      	mov	r0, sl
 8007dbe:	4659      	mov	r1, fp
 8007dc0:	f7f8 fc1a 	bl	80005f8 <__aeabi_dmul>
 8007dc4:	4b2d      	ldr	r3, [pc, #180]	; (8007e7c <_dtoa_r+0x624>)
 8007dc6:	4682      	mov	sl, r0
 8007dc8:	468b      	mov	fp, r1
 8007dca:	4640      	mov	r0, r8
 8007dcc:	4649      	mov	r1, r9
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f7f8 fc12 	bl	80005f8 <__aeabi_dmul>
 8007dd4:	4680      	mov	r8, r0
 8007dd6:	4689      	mov	r9, r1
 8007dd8:	e7c6      	b.n	8007d68 <_dtoa_r+0x510>
 8007dda:	4650      	mov	r0, sl
 8007ddc:	4659      	mov	r1, fp
 8007dde:	f7f8 fc0b 	bl	80005f8 <__aeabi_dmul>
 8007de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007de4:	9d01      	ldr	r5, [sp, #4]
 8007de6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007de8:	4682      	mov	sl, r0
 8007dea:	468b      	mov	fp, r1
 8007dec:	4649      	mov	r1, r9
 8007dee:	4640      	mov	r0, r8
 8007df0:	f7f8 feb2 	bl	8000b58 <__aeabi_d2iz>
 8007df4:	4606      	mov	r6, r0
 8007df6:	f7f8 fb95 	bl	8000524 <__aeabi_i2d>
 8007dfa:	3630      	adds	r6, #48	; 0x30
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4640      	mov	r0, r8
 8007e02:	4649      	mov	r1, r9
 8007e04:	f7f8 fa40 	bl	8000288 <__aeabi_dsub>
 8007e08:	f805 6b01 	strb.w	r6, [r5], #1
 8007e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e0e:	429d      	cmp	r5, r3
 8007e10:	4680      	mov	r8, r0
 8007e12:	4689      	mov	r9, r1
 8007e14:	f04f 0200 	mov.w	r2, #0
 8007e18:	d124      	bne.n	8007e64 <_dtoa_r+0x60c>
 8007e1a:	4b1b      	ldr	r3, [pc, #108]	; (8007e88 <_dtoa_r+0x630>)
 8007e1c:	4650      	mov	r0, sl
 8007e1e:	4659      	mov	r1, fp
 8007e20:	f7f8 fa34 	bl	800028c <__adddf3>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	4640      	mov	r0, r8
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	f7f8 fe74 	bl	8000b18 <__aeabi_dcmpgt>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d173      	bne.n	8007f1c <_dtoa_r+0x6c4>
 8007e34:	4652      	mov	r2, sl
 8007e36:	465b      	mov	r3, fp
 8007e38:	4913      	ldr	r1, [pc, #76]	; (8007e88 <_dtoa_r+0x630>)
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	f7f8 fa24 	bl	8000288 <__aeabi_dsub>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	4640      	mov	r0, r8
 8007e46:	4649      	mov	r1, r9
 8007e48:	f7f8 fe48 	bl	8000adc <__aeabi_dcmplt>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	f43f af35 	beq.w	8007cbc <_dtoa_r+0x464>
 8007e52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007e54:	1e6b      	subs	r3, r5, #1
 8007e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e5c:	2b30      	cmp	r3, #48	; 0x30
 8007e5e:	d0f8      	beq.n	8007e52 <_dtoa_r+0x5fa>
 8007e60:	9700      	str	r7, [sp, #0]
 8007e62:	e049      	b.n	8007ef8 <_dtoa_r+0x6a0>
 8007e64:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <_dtoa_r+0x624>)
 8007e66:	f7f8 fbc7 	bl	80005f8 <__aeabi_dmul>
 8007e6a:	4680      	mov	r8, r0
 8007e6c:	4689      	mov	r9, r1
 8007e6e:	e7bd      	b.n	8007dec <_dtoa_r+0x594>
 8007e70:	0800a678 	.word	0x0800a678
 8007e74:	0800a650 	.word	0x0800a650
 8007e78:	3ff00000 	.word	0x3ff00000
 8007e7c:	40240000 	.word	0x40240000
 8007e80:	401c0000 	.word	0x401c0000
 8007e84:	40140000 	.word	0x40140000
 8007e88:	3fe00000 	.word	0x3fe00000
 8007e8c:	9d01      	ldr	r5, [sp, #4]
 8007e8e:	4656      	mov	r6, sl
 8007e90:	465f      	mov	r7, fp
 8007e92:	4642      	mov	r2, r8
 8007e94:	464b      	mov	r3, r9
 8007e96:	4630      	mov	r0, r6
 8007e98:	4639      	mov	r1, r7
 8007e9a:	f7f8 fcd7 	bl	800084c <__aeabi_ddiv>
 8007e9e:	f7f8 fe5b 	bl	8000b58 <__aeabi_d2iz>
 8007ea2:	4682      	mov	sl, r0
 8007ea4:	f7f8 fb3e 	bl	8000524 <__aeabi_i2d>
 8007ea8:	4642      	mov	r2, r8
 8007eaa:	464b      	mov	r3, r9
 8007eac:	f7f8 fba4 	bl	80005f8 <__aeabi_dmul>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	4639      	mov	r1, r7
 8007eb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007ebc:	f7f8 f9e4 	bl	8000288 <__aeabi_dsub>
 8007ec0:	f805 6b01 	strb.w	r6, [r5], #1
 8007ec4:	9e01      	ldr	r6, [sp, #4]
 8007ec6:	9f03      	ldr	r7, [sp, #12]
 8007ec8:	1bae      	subs	r6, r5, r6
 8007eca:	42b7      	cmp	r7, r6
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	d135      	bne.n	8007f3e <_dtoa_r+0x6e6>
 8007ed2:	f7f8 f9db 	bl	800028c <__adddf3>
 8007ed6:	4642      	mov	r2, r8
 8007ed8:	464b      	mov	r3, r9
 8007eda:	4606      	mov	r6, r0
 8007edc:	460f      	mov	r7, r1
 8007ede:	f7f8 fe1b 	bl	8000b18 <__aeabi_dcmpgt>
 8007ee2:	b9d0      	cbnz	r0, 8007f1a <_dtoa_r+0x6c2>
 8007ee4:	4642      	mov	r2, r8
 8007ee6:	464b      	mov	r3, r9
 8007ee8:	4630      	mov	r0, r6
 8007eea:	4639      	mov	r1, r7
 8007eec:	f7f8 fdec 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ef0:	b110      	cbz	r0, 8007ef8 <_dtoa_r+0x6a0>
 8007ef2:	f01a 0f01 	tst.w	sl, #1
 8007ef6:	d110      	bne.n	8007f1a <_dtoa_r+0x6c2>
 8007ef8:	4620      	mov	r0, r4
 8007efa:	ee18 1a10 	vmov	r1, s16
 8007efe:	f000 fe79 	bl	8008bf4 <_Bfree>
 8007f02:	2300      	movs	r3, #0
 8007f04:	9800      	ldr	r0, [sp, #0]
 8007f06:	702b      	strb	r3, [r5, #0]
 8007f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	6018      	str	r0, [r3, #0]
 8007f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f43f acf1 	beq.w	80078f8 <_dtoa_r+0xa0>
 8007f16:	601d      	str	r5, [r3, #0]
 8007f18:	e4ee      	b.n	80078f8 <_dtoa_r+0xa0>
 8007f1a:	9f00      	ldr	r7, [sp, #0]
 8007f1c:	462b      	mov	r3, r5
 8007f1e:	461d      	mov	r5, r3
 8007f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f24:	2a39      	cmp	r2, #57	; 0x39
 8007f26:	d106      	bne.n	8007f36 <_dtoa_r+0x6de>
 8007f28:	9a01      	ldr	r2, [sp, #4]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d1f7      	bne.n	8007f1e <_dtoa_r+0x6c6>
 8007f2e:	9901      	ldr	r1, [sp, #4]
 8007f30:	2230      	movs	r2, #48	; 0x30
 8007f32:	3701      	adds	r7, #1
 8007f34:	700a      	strb	r2, [r1, #0]
 8007f36:	781a      	ldrb	r2, [r3, #0]
 8007f38:	3201      	adds	r2, #1
 8007f3a:	701a      	strb	r2, [r3, #0]
 8007f3c:	e790      	b.n	8007e60 <_dtoa_r+0x608>
 8007f3e:	4ba6      	ldr	r3, [pc, #664]	; (80081d8 <_dtoa_r+0x980>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	f7f8 fb59 	bl	80005f8 <__aeabi_dmul>
 8007f46:	2200      	movs	r2, #0
 8007f48:	2300      	movs	r3, #0
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	460f      	mov	r7, r1
 8007f4e:	f7f8 fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d09d      	beq.n	8007e92 <_dtoa_r+0x63a>
 8007f56:	e7cf      	b.n	8007ef8 <_dtoa_r+0x6a0>
 8007f58:	9a08      	ldr	r2, [sp, #32]
 8007f5a:	2a00      	cmp	r2, #0
 8007f5c:	f000 80d7 	beq.w	800810e <_dtoa_r+0x8b6>
 8007f60:	9a06      	ldr	r2, [sp, #24]
 8007f62:	2a01      	cmp	r2, #1
 8007f64:	f300 80ba 	bgt.w	80080dc <_dtoa_r+0x884>
 8007f68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	f000 80b2 	beq.w	80080d4 <_dtoa_r+0x87c>
 8007f70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f74:	9e07      	ldr	r6, [sp, #28]
 8007f76:	9d04      	ldr	r5, [sp, #16]
 8007f78:	9a04      	ldr	r2, [sp, #16]
 8007f7a:	441a      	add	r2, r3
 8007f7c:	9204      	str	r2, [sp, #16]
 8007f7e:	9a05      	ldr	r2, [sp, #20]
 8007f80:	2101      	movs	r1, #1
 8007f82:	441a      	add	r2, r3
 8007f84:	4620      	mov	r0, r4
 8007f86:	9205      	str	r2, [sp, #20]
 8007f88:	f000 ff36 	bl	8008df8 <__i2b>
 8007f8c:	4607      	mov	r7, r0
 8007f8e:	2d00      	cmp	r5, #0
 8007f90:	dd0c      	ble.n	8007fac <_dtoa_r+0x754>
 8007f92:	9b05      	ldr	r3, [sp, #20]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	dd09      	ble.n	8007fac <_dtoa_r+0x754>
 8007f98:	42ab      	cmp	r3, r5
 8007f9a:	9a04      	ldr	r2, [sp, #16]
 8007f9c:	bfa8      	it	ge
 8007f9e:	462b      	movge	r3, r5
 8007fa0:	1ad2      	subs	r2, r2, r3
 8007fa2:	9204      	str	r2, [sp, #16]
 8007fa4:	9a05      	ldr	r2, [sp, #20]
 8007fa6:	1aed      	subs	r5, r5, r3
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	9305      	str	r3, [sp, #20]
 8007fac:	9b07      	ldr	r3, [sp, #28]
 8007fae:	b31b      	cbz	r3, 8007ff8 <_dtoa_r+0x7a0>
 8007fb0:	9b08      	ldr	r3, [sp, #32]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 80af 	beq.w	8008116 <_dtoa_r+0x8be>
 8007fb8:	2e00      	cmp	r6, #0
 8007fba:	dd13      	ble.n	8007fe4 <_dtoa_r+0x78c>
 8007fbc:	4639      	mov	r1, r7
 8007fbe:	4632      	mov	r2, r6
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f000 ffd9 	bl	8008f78 <__pow5mult>
 8007fc6:	ee18 2a10 	vmov	r2, s16
 8007fca:	4601      	mov	r1, r0
 8007fcc:	4607      	mov	r7, r0
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f000 ff28 	bl	8008e24 <__multiply>
 8007fd4:	ee18 1a10 	vmov	r1, s16
 8007fd8:	4680      	mov	r8, r0
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f000 fe0a 	bl	8008bf4 <_Bfree>
 8007fe0:	ee08 8a10 	vmov	s16, r8
 8007fe4:	9b07      	ldr	r3, [sp, #28]
 8007fe6:	1b9a      	subs	r2, r3, r6
 8007fe8:	d006      	beq.n	8007ff8 <_dtoa_r+0x7a0>
 8007fea:	ee18 1a10 	vmov	r1, s16
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f000 ffc2 	bl	8008f78 <__pow5mult>
 8007ff4:	ee08 0a10 	vmov	s16, r0
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f000 fefc 	bl	8008df8 <__i2b>
 8008000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008002:	2b00      	cmp	r3, #0
 8008004:	4606      	mov	r6, r0
 8008006:	f340 8088 	ble.w	800811a <_dtoa_r+0x8c2>
 800800a:	461a      	mov	r2, r3
 800800c:	4601      	mov	r1, r0
 800800e:	4620      	mov	r0, r4
 8008010:	f000 ffb2 	bl	8008f78 <__pow5mult>
 8008014:	9b06      	ldr	r3, [sp, #24]
 8008016:	2b01      	cmp	r3, #1
 8008018:	4606      	mov	r6, r0
 800801a:	f340 8081 	ble.w	8008120 <_dtoa_r+0x8c8>
 800801e:	f04f 0800 	mov.w	r8, #0
 8008022:	6933      	ldr	r3, [r6, #16]
 8008024:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008028:	6918      	ldr	r0, [r3, #16]
 800802a:	f000 fe95 	bl	8008d58 <__hi0bits>
 800802e:	f1c0 0020 	rsb	r0, r0, #32
 8008032:	9b05      	ldr	r3, [sp, #20]
 8008034:	4418      	add	r0, r3
 8008036:	f010 001f 	ands.w	r0, r0, #31
 800803a:	f000 8092 	beq.w	8008162 <_dtoa_r+0x90a>
 800803e:	f1c0 0320 	rsb	r3, r0, #32
 8008042:	2b04      	cmp	r3, #4
 8008044:	f340 808a 	ble.w	800815c <_dtoa_r+0x904>
 8008048:	f1c0 001c 	rsb	r0, r0, #28
 800804c:	9b04      	ldr	r3, [sp, #16]
 800804e:	4403      	add	r3, r0
 8008050:	9304      	str	r3, [sp, #16]
 8008052:	9b05      	ldr	r3, [sp, #20]
 8008054:	4403      	add	r3, r0
 8008056:	4405      	add	r5, r0
 8008058:	9305      	str	r3, [sp, #20]
 800805a:	9b04      	ldr	r3, [sp, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	dd07      	ble.n	8008070 <_dtoa_r+0x818>
 8008060:	ee18 1a10 	vmov	r1, s16
 8008064:	461a      	mov	r2, r3
 8008066:	4620      	mov	r0, r4
 8008068:	f000 ffe0 	bl	800902c <__lshift>
 800806c:	ee08 0a10 	vmov	s16, r0
 8008070:	9b05      	ldr	r3, [sp, #20]
 8008072:	2b00      	cmp	r3, #0
 8008074:	dd05      	ble.n	8008082 <_dtoa_r+0x82a>
 8008076:	4631      	mov	r1, r6
 8008078:	461a      	mov	r2, r3
 800807a:	4620      	mov	r0, r4
 800807c:	f000 ffd6 	bl	800902c <__lshift>
 8008080:	4606      	mov	r6, r0
 8008082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008084:	2b00      	cmp	r3, #0
 8008086:	d06e      	beq.n	8008166 <_dtoa_r+0x90e>
 8008088:	ee18 0a10 	vmov	r0, s16
 800808c:	4631      	mov	r1, r6
 800808e:	f001 f83d 	bl	800910c <__mcmp>
 8008092:	2800      	cmp	r0, #0
 8008094:	da67      	bge.n	8008166 <_dtoa_r+0x90e>
 8008096:	9b00      	ldr	r3, [sp, #0]
 8008098:	3b01      	subs	r3, #1
 800809a:	ee18 1a10 	vmov	r1, s16
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	220a      	movs	r2, #10
 80080a2:	2300      	movs	r3, #0
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 fdc7 	bl	8008c38 <__multadd>
 80080aa:	9b08      	ldr	r3, [sp, #32]
 80080ac:	ee08 0a10 	vmov	s16, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 81b1 	beq.w	8008418 <_dtoa_r+0xbc0>
 80080b6:	2300      	movs	r3, #0
 80080b8:	4639      	mov	r1, r7
 80080ba:	220a      	movs	r2, #10
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 fdbb 	bl	8008c38 <__multadd>
 80080c2:	9b02      	ldr	r3, [sp, #8]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	4607      	mov	r7, r0
 80080c8:	f300 808e 	bgt.w	80081e8 <_dtoa_r+0x990>
 80080cc:	9b06      	ldr	r3, [sp, #24]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	dc51      	bgt.n	8008176 <_dtoa_r+0x91e>
 80080d2:	e089      	b.n	80081e8 <_dtoa_r+0x990>
 80080d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080da:	e74b      	b.n	8007f74 <_dtoa_r+0x71c>
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	1e5e      	subs	r6, r3, #1
 80080e0:	9b07      	ldr	r3, [sp, #28]
 80080e2:	42b3      	cmp	r3, r6
 80080e4:	bfbf      	itttt	lt
 80080e6:	9b07      	ldrlt	r3, [sp, #28]
 80080e8:	9607      	strlt	r6, [sp, #28]
 80080ea:	1af2      	sublt	r2, r6, r3
 80080ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80080ee:	bfb6      	itet	lt
 80080f0:	189b      	addlt	r3, r3, r2
 80080f2:	1b9e      	subge	r6, r3, r6
 80080f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80080f6:	9b03      	ldr	r3, [sp, #12]
 80080f8:	bfb8      	it	lt
 80080fa:	2600      	movlt	r6, #0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	bfb7      	itett	lt
 8008100:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008104:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008108:	1a9d      	sublt	r5, r3, r2
 800810a:	2300      	movlt	r3, #0
 800810c:	e734      	b.n	8007f78 <_dtoa_r+0x720>
 800810e:	9e07      	ldr	r6, [sp, #28]
 8008110:	9d04      	ldr	r5, [sp, #16]
 8008112:	9f08      	ldr	r7, [sp, #32]
 8008114:	e73b      	b.n	8007f8e <_dtoa_r+0x736>
 8008116:	9a07      	ldr	r2, [sp, #28]
 8008118:	e767      	b.n	8007fea <_dtoa_r+0x792>
 800811a:	9b06      	ldr	r3, [sp, #24]
 800811c:	2b01      	cmp	r3, #1
 800811e:	dc18      	bgt.n	8008152 <_dtoa_r+0x8fa>
 8008120:	f1ba 0f00 	cmp.w	sl, #0
 8008124:	d115      	bne.n	8008152 <_dtoa_r+0x8fa>
 8008126:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800812a:	b993      	cbnz	r3, 8008152 <_dtoa_r+0x8fa>
 800812c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008130:	0d1b      	lsrs	r3, r3, #20
 8008132:	051b      	lsls	r3, r3, #20
 8008134:	b183      	cbz	r3, 8008158 <_dtoa_r+0x900>
 8008136:	9b04      	ldr	r3, [sp, #16]
 8008138:	3301      	adds	r3, #1
 800813a:	9304      	str	r3, [sp, #16]
 800813c:	9b05      	ldr	r3, [sp, #20]
 800813e:	3301      	adds	r3, #1
 8008140:	9305      	str	r3, [sp, #20]
 8008142:	f04f 0801 	mov.w	r8, #1
 8008146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008148:	2b00      	cmp	r3, #0
 800814a:	f47f af6a 	bne.w	8008022 <_dtoa_r+0x7ca>
 800814e:	2001      	movs	r0, #1
 8008150:	e76f      	b.n	8008032 <_dtoa_r+0x7da>
 8008152:	f04f 0800 	mov.w	r8, #0
 8008156:	e7f6      	b.n	8008146 <_dtoa_r+0x8ee>
 8008158:	4698      	mov	r8, r3
 800815a:	e7f4      	b.n	8008146 <_dtoa_r+0x8ee>
 800815c:	f43f af7d 	beq.w	800805a <_dtoa_r+0x802>
 8008160:	4618      	mov	r0, r3
 8008162:	301c      	adds	r0, #28
 8008164:	e772      	b.n	800804c <_dtoa_r+0x7f4>
 8008166:	9b03      	ldr	r3, [sp, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	dc37      	bgt.n	80081dc <_dtoa_r+0x984>
 800816c:	9b06      	ldr	r3, [sp, #24]
 800816e:	2b02      	cmp	r3, #2
 8008170:	dd34      	ble.n	80081dc <_dtoa_r+0x984>
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	9302      	str	r3, [sp, #8]
 8008176:	9b02      	ldr	r3, [sp, #8]
 8008178:	b96b      	cbnz	r3, 8008196 <_dtoa_r+0x93e>
 800817a:	4631      	mov	r1, r6
 800817c:	2205      	movs	r2, #5
 800817e:	4620      	mov	r0, r4
 8008180:	f000 fd5a 	bl	8008c38 <__multadd>
 8008184:	4601      	mov	r1, r0
 8008186:	4606      	mov	r6, r0
 8008188:	ee18 0a10 	vmov	r0, s16
 800818c:	f000 ffbe 	bl	800910c <__mcmp>
 8008190:	2800      	cmp	r0, #0
 8008192:	f73f adbb 	bgt.w	8007d0c <_dtoa_r+0x4b4>
 8008196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008198:	9d01      	ldr	r5, [sp, #4]
 800819a:	43db      	mvns	r3, r3
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	f04f 0800 	mov.w	r8, #0
 80081a2:	4631      	mov	r1, r6
 80081a4:	4620      	mov	r0, r4
 80081a6:	f000 fd25 	bl	8008bf4 <_Bfree>
 80081aa:	2f00      	cmp	r7, #0
 80081ac:	f43f aea4 	beq.w	8007ef8 <_dtoa_r+0x6a0>
 80081b0:	f1b8 0f00 	cmp.w	r8, #0
 80081b4:	d005      	beq.n	80081c2 <_dtoa_r+0x96a>
 80081b6:	45b8      	cmp	r8, r7
 80081b8:	d003      	beq.n	80081c2 <_dtoa_r+0x96a>
 80081ba:	4641      	mov	r1, r8
 80081bc:	4620      	mov	r0, r4
 80081be:	f000 fd19 	bl	8008bf4 <_Bfree>
 80081c2:	4639      	mov	r1, r7
 80081c4:	4620      	mov	r0, r4
 80081c6:	f000 fd15 	bl	8008bf4 <_Bfree>
 80081ca:	e695      	b.n	8007ef8 <_dtoa_r+0x6a0>
 80081cc:	2600      	movs	r6, #0
 80081ce:	4637      	mov	r7, r6
 80081d0:	e7e1      	b.n	8008196 <_dtoa_r+0x93e>
 80081d2:	9700      	str	r7, [sp, #0]
 80081d4:	4637      	mov	r7, r6
 80081d6:	e599      	b.n	8007d0c <_dtoa_r+0x4b4>
 80081d8:	40240000 	.word	0x40240000
 80081dc:	9b08      	ldr	r3, [sp, #32]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 80ca 	beq.w	8008378 <_dtoa_r+0xb20>
 80081e4:	9b03      	ldr	r3, [sp, #12]
 80081e6:	9302      	str	r3, [sp, #8]
 80081e8:	2d00      	cmp	r5, #0
 80081ea:	dd05      	ble.n	80081f8 <_dtoa_r+0x9a0>
 80081ec:	4639      	mov	r1, r7
 80081ee:	462a      	mov	r2, r5
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 ff1b 	bl	800902c <__lshift>
 80081f6:	4607      	mov	r7, r0
 80081f8:	f1b8 0f00 	cmp.w	r8, #0
 80081fc:	d05b      	beq.n	80082b6 <_dtoa_r+0xa5e>
 80081fe:	6879      	ldr	r1, [r7, #4]
 8008200:	4620      	mov	r0, r4
 8008202:	f000 fcb7 	bl	8008b74 <_Balloc>
 8008206:	4605      	mov	r5, r0
 8008208:	b928      	cbnz	r0, 8008216 <_dtoa_r+0x9be>
 800820a:	4b87      	ldr	r3, [pc, #540]	; (8008428 <_dtoa_r+0xbd0>)
 800820c:	4602      	mov	r2, r0
 800820e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008212:	f7ff bb3b 	b.w	800788c <_dtoa_r+0x34>
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	3202      	adds	r2, #2
 800821a:	0092      	lsls	r2, r2, #2
 800821c:	f107 010c 	add.w	r1, r7, #12
 8008220:	300c      	adds	r0, #12
 8008222:	f000 fc8d 	bl	8008b40 <memcpy>
 8008226:	2201      	movs	r2, #1
 8008228:	4629      	mov	r1, r5
 800822a:	4620      	mov	r0, r4
 800822c:	f000 fefe 	bl	800902c <__lshift>
 8008230:	9b01      	ldr	r3, [sp, #4]
 8008232:	f103 0901 	add.w	r9, r3, #1
 8008236:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800823a:	4413      	add	r3, r2
 800823c:	9305      	str	r3, [sp, #20]
 800823e:	f00a 0301 	and.w	r3, sl, #1
 8008242:	46b8      	mov	r8, r7
 8008244:	9304      	str	r3, [sp, #16]
 8008246:	4607      	mov	r7, r0
 8008248:	4631      	mov	r1, r6
 800824a:	ee18 0a10 	vmov	r0, s16
 800824e:	f7ff fa77 	bl	8007740 <quorem>
 8008252:	4641      	mov	r1, r8
 8008254:	9002      	str	r0, [sp, #8]
 8008256:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800825a:	ee18 0a10 	vmov	r0, s16
 800825e:	f000 ff55 	bl	800910c <__mcmp>
 8008262:	463a      	mov	r2, r7
 8008264:	9003      	str	r0, [sp, #12]
 8008266:	4631      	mov	r1, r6
 8008268:	4620      	mov	r0, r4
 800826a:	f000 ff6b 	bl	8009144 <__mdiff>
 800826e:	68c2      	ldr	r2, [r0, #12]
 8008270:	f109 3bff 	add.w	fp, r9, #4294967295
 8008274:	4605      	mov	r5, r0
 8008276:	bb02      	cbnz	r2, 80082ba <_dtoa_r+0xa62>
 8008278:	4601      	mov	r1, r0
 800827a:	ee18 0a10 	vmov	r0, s16
 800827e:	f000 ff45 	bl	800910c <__mcmp>
 8008282:	4602      	mov	r2, r0
 8008284:	4629      	mov	r1, r5
 8008286:	4620      	mov	r0, r4
 8008288:	9207      	str	r2, [sp, #28]
 800828a:	f000 fcb3 	bl	8008bf4 <_Bfree>
 800828e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008292:	ea43 0102 	orr.w	r1, r3, r2
 8008296:	9b04      	ldr	r3, [sp, #16]
 8008298:	430b      	orrs	r3, r1
 800829a:	464d      	mov	r5, r9
 800829c:	d10f      	bne.n	80082be <_dtoa_r+0xa66>
 800829e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082a2:	d02a      	beq.n	80082fa <_dtoa_r+0xaa2>
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	dd02      	ble.n	80082b0 <_dtoa_r+0xa58>
 80082aa:	9b02      	ldr	r3, [sp, #8]
 80082ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80082b0:	f88b a000 	strb.w	sl, [fp]
 80082b4:	e775      	b.n	80081a2 <_dtoa_r+0x94a>
 80082b6:	4638      	mov	r0, r7
 80082b8:	e7ba      	b.n	8008230 <_dtoa_r+0x9d8>
 80082ba:	2201      	movs	r2, #1
 80082bc:	e7e2      	b.n	8008284 <_dtoa_r+0xa2c>
 80082be:	9b03      	ldr	r3, [sp, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	db04      	blt.n	80082ce <_dtoa_r+0xa76>
 80082c4:	9906      	ldr	r1, [sp, #24]
 80082c6:	430b      	orrs	r3, r1
 80082c8:	9904      	ldr	r1, [sp, #16]
 80082ca:	430b      	orrs	r3, r1
 80082cc:	d122      	bne.n	8008314 <_dtoa_r+0xabc>
 80082ce:	2a00      	cmp	r2, #0
 80082d0:	ddee      	ble.n	80082b0 <_dtoa_r+0xa58>
 80082d2:	ee18 1a10 	vmov	r1, s16
 80082d6:	2201      	movs	r2, #1
 80082d8:	4620      	mov	r0, r4
 80082da:	f000 fea7 	bl	800902c <__lshift>
 80082de:	4631      	mov	r1, r6
 80082e0:	ee08 0a10 	vmov	s16, r0
 80082e4:	f000 ff12 	bl	800910c <__mcmp>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	dc03      	bgt.n	80082f4 <_dtoa_r+0xa9c>
 80082ec:	d1e0      	bne.n	80082b0 <_dtoa_r+0xa58>
 80082ee:	f01a 0f01 	tst.w	sl, #1
 80082f2:	d0dd      	beq.n	80082b0 <_dtoa_r+0xa58>
 80082f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082f8:	d1d7      	bne.n	80082aa <_dtoa_r+0xa52>
 80082fa:	2339      	movs	r3, #57	; 0x39
 80082fc:	f88b 3000 	strb.w	r3, [fp]
 8008300:	462b      	mov	r3, r5
 8008302:	461d      	mov	r5, r3
 8008304:	3b01      	subs	r3, #1
 8008306:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800830a:	2a39      	cmp	r2, #57	; 0x39
 800830c:	d071      	beq.n	80083f2 <_dtoa_r+0xb9a>
 800830e:	3201      	adds	r2, #1
 8008310:	701a      	strb	r2, [r3, #0]
 8008312:	e746      	b.n	80081a2 <_dtoa_r+0x94a>
 8008314:	2a00      	cmp	r2, #0
 8008316:	dd07      	ble.n	8008328 <_dtoa_r+0xad0>
 8008318:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800831c:	d0ed      	beq.n	80082fa <_dtoa_r+0xaa2>
 800831e:	f10a 0301 	add.w	r3, sl, #1
 8008322:	f88b 3000 	strb.w	r3, [fp]
 8008326:	e73c      	b.n	80081a2 <_dtoa_r+0x94a>
 8008328:	9b05      	ldr	r3, [sp, #20]
 800832a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800832e:	4599      	cmp	r9, r3
 8008330:	d047      	beq.n	80083c2 <_dtoa_r+0xb6a>
 8008332:	ee18 1a10 	vmov	r1, s16
 8008336:	2300      	movs	r3, #0
 8008338:	220a      	movs	r2, #10
 800833a:	4620      	mov	r0, r4
 800833c:	f000 fc7c 	bl	8008c38 <__multadd>
 8008340:	45b8      	cmp	r8, r7
 8008342:	ee08 0a10 	vmov	s16, r0
 8008346:	f04f 0300 	mov.w	r3, #0
 800834a:	f04f 020a 	mov.w	r2, #10
 800834e:	4641      	mov	r1, r8
 8008350:	4620      	mov	r0, r4
 8008352:	d106      	bne.n	8008362 <_dtoa_r+0xb0a>
 8008354:	f000 fc70 	bl	8008c38 <__multadd>
 8008358:	4680      	mov	r8, r0
 800835a:	4607      	mov	r7, r0
 800835c:	f109 0901 	add.w	r9, r9, #1
 8008360:	e772      	b.n	8008248 <_dtoa_r+0x9f0>
 8008362:	f000 fc69 	bl	8008c38 <__multadd>
 8008366:	4639      	mov	r1, r7
 8008368:	4680      	mov	r8, r0
 800836a:	2300      	movs	r3, #0
 800836c:	220a      	movs	r2, #10
 800836e:	4620      	mov	r0, r4
 8008370:	f000 fc62 	bl	8008c38 <__multadd>
 8008374:	4607      	mov	r7, r0
 8008376:	e7f1      	b.n	800835c <_dtoa_r+0xb04>
 8008378:	9b03      	ldr	r3, [sp, #12]
 800837a:	9302      	str	r3, [sp, #8]
 800837c:	9d01      	ldr	r5, [sp, #4]
 800837e:	ee18 0a10 	vmov	r0, s16
 8008382:	4631      	mov	r1, r6
 8008384:	f7ff f9dc 	bl	8007740 <quorem>
 8008388:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800838c:	9b01      	ldr	r3, [sp, #4]
 800838e:	f805 ab01 	strb.w	sl, [r5], #1
 8008392:	1aea      	subs	r2, r5, r3
 8008394:	9b02      	ldr	r3, [sp, #8]
 8008396:	4293      	cmp	r3, r2
 8008398:	dd09      	ble.n	80083ae <_dtoa_r+0xb56>
 800839a:	ee18 1a10 	vmov	r1, s16
 800839e:	2300      	movs	r3, #0
 80083a0:	220a      	movs	r2, #10
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 fc48 	bl	8008c38 <__multadd>
 80083a8:	ee08 0a10 	vmov	s16, r0
 80083ac:	e7e7      	b.n	800837e <_dtoa_r+0xb26>
 80083ae:	9b02      	ldr	r3, [sp, #8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	bfc8      	it	gt
 80083b4:	461d      	movgt	r5, r3
 80083b6:	9b01      	ldr	r3, [sp, #4]
 80083b8:	bfd8      	it	le
 80083ba:	2501      	movle	r5, #1
 80083bc:	441d      	add	r5, r3
 80083be:	f04f 0800 	mov.w	r8, #0
 80083c2:	ee18 1a10 	vmov	r1, s16
 80083c6:	2201      	movs	r2, #1
 80083c8:	4620      	mov	r0, r4
 80083ca:	f000 fe2f 	bl	800902c <__lshift>
 80083ce:	4631      	mov	r1, r6
 80083d0:	ee08 0a10 	vmov	s16, r0
 80083d4:	f000 fe9a 	bl	800910c <__mcmp>
 80083d8:	2800      	cmp	r0, #0
 80083da:	dc91      	bgt.n	8008300 <_dtoa_r+0xaa8>
 80083dc:	d102      	bne.n	80083e4 <_dtoa_r+0xb8c>
 80083de:	f01a 0f01 	tst.w	sl, #1
 80083e2:	d18d      	bne.n	8008300 <_dtoa_r+0xaa8>
 80083e4:	462b      	mov	r3, r5
 80083e6:	461d      	mov	r5, r3
 80083e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083ec:	2a30      	cmp	r2, #48	; 0x30
 80083ee:	d0fa      	beq.n	80083e6 <_dtoa_r+0xb8e>
 80083f0:	e6d7      	b.n	80081a2 <_dtoa_r+0x94a>
 80083f2:	9a01      	ldr	r2, [sp, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d184      	bne.n	8008302 <_dtoa_r+0xaaa>
 80083f8:	9b00      	ldr	r3, [sp, #0]
 80083fa:	3301      	adds	r3, #1
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	2331      	movs	r3, #49	; 0x31
 8008400:	7013      	strb	r3, [r2, #0]
 8008402:	e6ce      	b.n	80081a2 <_dtoa_r+0x94a>
 8008404:	4b09      	ldr	r3, [pc, #36]	; (800842c <_dtoa_r+0xbd4>)
 8008406:	f7ff ba95 	b.w	8007934 <_dtoa_r+0xdc>
 800840a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800840c:	2b00      	cmp	r3, #0
 800840e:	f47f aa6e 	bne.w	80078ee <_dtoa_r+0x96>
 8008412:	4b07      	ldr	r3, [pc, #28]	; (8008430 <_dtoa_r+0xbd8>)
 8008414:	f7ff ba8e 	b.w	8007934 <_dtoa_r+0xdc>
 8008418:	9b02      	ldr	r3, [sp, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	dcae      	bgt.n	800837c <_dtoa_r+0xb24>
 800841e:	9b06      	ldr	r3, [sp, #24]
 8008420:	2b02      	cmp	r3, #2
 8008422:	f73f aea8 	bgt.w	8008176 <_dtoa_r+0x91e>
 8008426:	e7a9      	b.n	800837c <_dtoa_r+0xb24>
 8008428:	0800a568 	.word	0x0800a568
 800842c:	0800a36c 	.word	0x0800a36c
 8008430:	0800a4e9 	.word	0x0800a4e9

08008434 <rshift>:
 8008434:	6903      	ldr	r3, [r0, #16]
 8008436:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800843a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800843e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008442:	f100 0414 	add.w	r4, r0, #20
 8008446:	dd45      	ble.n	80084d4 <rshift+0xa0>
 8008448:	f011 011f 	ands.w	r1, r1, #31
 800844c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008450:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008454:	d10c      	bne.n	8008470 <rshift+0x3c>
 8008456:	f100 0710 	add.w	r7, r0, #16
 800845a:	4629      	mov	r1, r5
 800845c:	42b1      	cmp	r1, r6
 800845e:	d334      	bcc.n	80084ca <rshift+0x96>
 8008460:	1a9b      	subs	r3, r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	1eea      	subs	r2, r5, #3
 8008466:	4296      	cmp	r6, r2
 8008468:	bf38      	it	cc
 800846a:	2300      	movcc	r3, #0
 800846c:	4423      	add	r3, r4
 800846e:	e015      	b.n	800849c <rshift+0x68>
 8008470:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008474:	f1c1 0820 	rsb	r8, r1, #32
 8008478:	40cf      	lsrs	r7, r1
 800847a:	f105 0e04 	add.w	lr, r5, #4
 800847e:	46a1      	mov	r9, r4
 8008480:	4576      	cmp	r6, lr
 8008482:	46f4      	mov	ip, lr
 8008484:	d815      	bhi.n	80084b2 <rshift+0x7e>
 8008486:	1a9a      	subs	r2, r3, r2
 8008488:	0092      	lsls	r2, r2, #2
 800848a:	3a04      	subs	r2, #4
 800848c:	3501      	adds	r5, #1
 800848e:	42ae      	cmp	r6, r5
 8008490:	bf38      	it	cc
 8008492:	2200      	movcc	r2, #0
 8008494:	18a3      	adds	r3, r4, r2
 8008496:	50a7      	str	r7, [r4, r2]
 8008498:	b107      	cbz	r7, 800849c <rshift+0x68>
 800849a:	3304      	adds	r3, #4
 800849c:	1b1a      	subs	r2, r3, r4
 800849e:	42a3      	cmp	r3, r4
 80084a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80084a4:	bf08      	it	eq
 80084a6:	2300      	moveq	r3, #0
 80084a8:	6102      	str	r2, [r0, #16]
 80084aa:	bf08      	it	eq
 80084ac:	6143      	streq	r3, [r0, #20]
 80084ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084b2:	f8dc c000 	ldr.w	ip, [ip]
 80084b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80084ba:	ea4c 0707 	orr.w	r7, ip, r7
 80084be:	f849 7b04 	str.w	r7, [r9], #4
 80084c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084c6:	40cf      	lsrs	r7, r1
 80084c8:	e7da      	b.n	8008480 <rshift+0x4c>
 80084ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80084ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80084d2:	e7c3      	b.n	800845c <rshift+0x28>
 80084d4:	4623      	mov	r3, r4
 80084d6:	e7e1      	b.n	800849c <rshift+0x68>

080084d8 <__hexdig_fun>:
 80084d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80084dc:	2b09      	cmp	r3, #9
 80084de:	d802      	bhi.n	80084e6 <__hexdig_fun+0xe>
 80084e0:	3820      	subs	r0, #32
 80084e2:	b2c0      	uxtb	r0, r0
 80084e4:	4770      	bx	lr
 80084e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80084ea:	2b05      	cmp	r3, #5
 80084ec:	d801      	bhi.n	80084f2 <__hexdig_fun+0x1a>
 80084ee:	3847      	subs	r0, #71	; 0x47
 80084f0:	e7f7      	b.n	80084e2 <__hexdig_fun+0xa>
 80084f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80084f6:	2b05      	cmp	r3, #5
 80084f8:	d801      	bhi.n	80084fe <__hexdig_fun+0x26>
 80084fa:	3827      	subs	r0, #39	; 0x27
 80084fc:	e7f1      	b.n	80084e2 <__hexdig_fun+0xa>
 80084fe:	2000      	movs	r0, #0
 8008500:	4770      	bx	lr
	...

08008504 <__gethex>:
 8008504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008508:	ed2d 8b02 	vpush	{d8}
 800850c:	b089      	sub	sp, #36	; 0x24
 800850e:	ee08 0a10 	vmov	s16, r0
 8008512:	9304      	str	r3, [sp, #16]
 8008514:	4bb4      	ldr	r3, [pc, #720]	; (80087e8 <__gethex+0x2e4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	9301      	str	r3, [sp, #4]
 800851a:	4618      	mov	r0, r3
 800851c:	468b      	mov	fp, r1
 800851e:	4690      	mov	r8, r2
 8008520:	f7f7 fe56 	bl	80001d0 <strlen>
 8008524:	9b01      	ldr	r3, [sp, #4]
 8008526:	f8db 2000 	ldr.w	r2, [fp]
 800852a:	4403      	add	r3, r0
 800852c:	4682      	mov	sl, r0
 800852e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008532:	9305      	str	r3, [sp, #20]
 8008534:	1c93      	adds	r3, r2, #2
 8008536:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800853a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800853e:	32fe      	adds	r2, #254	; 0xfe
 8008540:	18d1      	adds	r1, r2, r3
 8008542:	461f      	mov	r7, r3
 8008544:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008548:	9100      	str	r1, [sp, #0]
 800854a:	2830      	cmp	r0, #48	; 0x30
 800854c:	d0f8      	beq.n	8008540 <__gethex+0x3c>
 800854e:	f7ff ffc3 	bl	80084d8 <__hexdig_fun>
 8008552:	4604      	mov	r4, r0
 8008554:	2800      	cmp	r0, #0
 8008556:	d13a      	bne.n	80085ce <__gethex+0xca>
 8008558:	9901      	ldr	r1, [sp, #4]
 800855a:	4652      	mov	r2, sl
 800855c:	4638      	mov	r0, r7
 800855e:	f001 f943 	bl	80097e8 <strncmp>
 8008562:	4605      	mov	r5, r0
 8008564:	2800      	cmp	r0, #0
 8008566:	d168      	bne.n	800863a <__gethex+0x136>
 8008568:	f817 000a 	ldrb.w	r0, [r7, sl]
 800856c:	eb07 060a 	add.w	r6, r7, sl
 8008570:	f7ff ffb2 	bl	80084d8 <__hexdig_fun>
 8008574:	2800      	cmp	r0, #0
 8008576:	d062      	beq.n	800863e <__gethex+0x13a>
 8008578:	4633      	mov	r3, r6
 800857a:	7818      	ldrb	r0, [r3, #0]
 800857c:	2830      	cmp	r0, #48	; 0x30
 800857e:	461f      	mov	r7, r3
 8008580:	f103 0301 	add.w	r3, r3, #1
 8008584:	d0f9      	beq.n	800857a <__gethex+0x76>
 8008586:	f7ff ffa7 	bl	80084d8 <__hexdig_fun>
 800858a:	2301      	movs	r3, #1
 800858c:	fab0 f480 	clz	r4, r0
 8008590:	0964      	lsrs	r4, r4, #5
 8008592:	4635      	mov	r5, r6
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	463a      	mov	r2, r7
 8008598:	4616      	mov	r6, r2
 800859a:	3201      	adds	r2, #1
 800859c:	7830      	ldrb	r0, [r6, #0]
 800859e:	f7ff ff9b 	bl	80084d8 <__hexdig_fun>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d1f8      	bne.n	8008598 <__gethex+0x94>
 80085a6:	9901      	ldr	r1, [sp, #4]
 80085a8:	4652      	mov	r2, sl
 80085aa:	4630      	mov	r0, r6
 80085ac:	f001 f91c 	bl	80097e8 <strncmp>
 80085b0:	b980      	cbnz	r0, 80085d4 <__gethex+0xd0>
 80085b2:	b94d      	cbnz	r5, 80085c8 <__gethex+0xc4>
 80085b4:	eb06 050a 	add.w	r5, r6, sl
 80085b8:	462a      	mov	r2, r5
 80085ba:	4616      	mov	r6, r2
 80085bc:	3201      	adds	r2, #1
 80085be:	7830      	ldrb	r0, [r6, #0]
 80085c0:	f7ff ff8a 	bl	80084d8 <__hexdig_fun>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d1f8      	bne.n	80085ba <__gethex+0xb6>
 80085c8:	1bad      	subs	r5, r5, r6
 80085ca:	00ad      	lsls	r5, r5, #2
 80085cc:	e004      	b.n	80085d8 <__gethex+0xd4>
 80085ce:	2400      	movs	r4, #0
 80085d0:	4625      	mov	r5, r4
 80085d2:	e7e0      	b.n	8008596 <__gethex+0x92>
 80085d4:	2d00      	cmp	r5, #0
 80085d6:	d1f7      	bne.n	80085c8 <__gethex+0xc4>
 80085d8:	7833      	ldrb	r3, [r6, #0]
 80085da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085de:	2b50      	cmp	r3, #80	; 0x50
 80085e0:	d13b      	bne.n	800865a <__gethex+0x156>
 80085e2:	7873      	ldrb	r3, [r6, #1]
 80085e4:	2b2b      	cmp	r3, #43	; 0x2b
 80085e6:	d02c      	beq.n	8008642 <__gethex+0x13e>
 80085e8:	2b2d      	cmp	r3, #45	; 0x2d
 80085ea:	d02e      	beq.n	800864a <__gethex+0x146>
 80085ec:	1c71      	adds	r1, r6, #1
 80085ee:	f04f 0900 	mov.w	r9, #0
 80085f2:	7808      	ldrb	r0, [r1, #0]
 80085f4:	f7ff ff70 	bl	80084d8 <__hexdig_fun>
 80085f8:	1e43      	subs	r3, r0, #1
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b18      	cmp	r3, #24
 80085fe:	d82c      	bhi.n	800865a <__gethex+0x156>
 8008600:	f1a0 0210 	sub.w	r2, r0, #16
 8008604:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008608:	f7ff ff66 	bl	80084d8 <__hexdig_fun>
 800860c:	1e43      	subs	r3, r0, #1
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b18      	cmp	r3, #24
 8008612:	d91d      	bls.n	8008650 <__gethex+0x14c>
 8008614:	f1b9 0f00 	cmp.w	r9, #0
 8008618:	d000      	beq.n	800861c <__gethex+0x118>
 800861a:	4252      	negs	r2, r2
 800861c:	4415      	add	r5, r2
 800861e:	f8cb 1000 	str.w	r1, [fp]
 8008622:	b1e4      	cbz	r4, 800865e <__gethex+0x15a>
 8008624:	9b00      	ldr	r3, [sp, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	bf14      	ite	ne
 800862a:	2700      	movne	r7, #0
 800862c:	2706      	moveq	r7, #6
 800862e:	4638      	mov	r0, r7
 8008630:	b009      	add	sp, #36	; 0x24
 8008632:	ecbd 8b02 	vpop	{d8}
 8008636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863a:	463e      	mov	r6, r7
 800863c:	4625      	mov	r5, r4
 800863e:	2401      	movs	r4, #1
 8008640:	e7ca      	b.n	80085d8 <__gethex+0xd4>
 8008642:	f04f 0900 	mov.w	r9, #0
 8008646:	1cb1      	adds	r1, r6, #2
 8008648:	e7d3      	b.n	80085f2 <__gethex+0xee>
 800864a:	f04f 0901 	mov.w	r9, #1
 800864e:	e7fa      	b.n	8008646 <__gethex+0x142>
 8008650:	230a      	movs	r3, #10
 8008652:	fb03 0202 	mla	r2, r3, r2, r0
 8008656:	3a10      	subs	r2, #16
 8008658:	e7d4      	b.n	8008604 <__gethex+0x100>
 800865a:	4631      	mov	r1, r6
 800865c:	e7df      	b.n	800861e <__gethex+0x11a>
 800865e:	1bf3      	subs	r3, r6, r7
 8008660:	3b01      	subs	r3, #1
 8008662:	4621      	mov	r1, r4
 8008664:	2b07      	cmp	r3, #7
 8008666:	dc0b      	bgt.n	8008680 <__gethex+0x17c>
 8008668:	ee18 0a10 	vmov	r0, s16
 800866c:	f000 fa82 	bl	8008b74 <_Balloc>
 8008670:	4604      	mov	r4, r0
 8008672:	b940      	cbnz	r0, 8008686 <__gethex+0x182>
 8008674:	4b5d      	ldr	r3, [pc, #372]	; (80087ec <__gethex+0x2e8>)
 8008676:	4602      	mov	r2, r0
 8008678:	21de      	movs	r1, #222	; 0xde
 800867a:	485d      	ldr	r0, [pc, #372]	; (80087f0 <__gethex+0x2ec>)
 800867c:	f001 f8d6 	bl	800982c <__assert_func>
 8008680:	3101      	adds	r1, #1
 8008682:	105b      	asrs	r3, r3, #1
 8008684:	e7ee      	b.n	8008664 <__gethex+0x160>
 8008686:	f100 0914 	add.w	r9, r0, #20
 800868a:	f04f 0b00 	mov.w	fp, #0
 800868e:	f1ca 0301 	rsb	r3, sl, #1
 8008692:	f8cd 9008 	str.w	r9, [sp, #8]
 8008696:	f8cd b000 	str.w	fp, [sp]
 800869a:	9306      	str	r3, [sp, #24]
 800869c:	42b7      	cmp	r7, r6
 800869e:	d340      	bcc.n	8008722 <__gethex+0x21e>
 80086a0:	9802      	ldr	r0, [sp, #8]
 80086a2:	9b00      	ldr	r3, [sp, #0]
 80086a4:	f840 3b04 	str.w	r3, [r0], #4
 80086a8:	eba0 0009 	sub.w	r0, r0, r9
 80086ac:	1080      	asrs	r0, r0, #2
 80086ae:	0146      	lsls	r6, r0, #5
 80086b0:	6120      	str	r0, [r4, #16]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fb50 	bl	8008d58 <__hi0bits>
 80086b8:	1a30      	subs	r0, r6, r0
 80086ba:	f8d8 6000 	ldr.w	r6, [r8]
 80086be:	42b0      	cmp	r0, r6
 80086c0:	dd63      	ble.n	800878a <__gethex+0x286>
 80086c2:	1b87      	subs	r7, r0, r6
 80086c4:	4639      	mov	r1, r7
 80086c6:	4620      	mov	r0, r4
 80086c8:	f000 fef4 	bl	80094b4 <__any_on>
 80086cc:	4682      	mov	sl, r0
 80086ce:	b1a8      	cbz	r0, 80086fc <__gethex+0x1f8>
 80086d0:	1e7b      	subs	r3, r7, #1
 80086d2:	1159      	asrs	r1, r3, #5
 80086d4:	f003 021f 	and.w	r2, r3, #31
 80086d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80086dc:	f04f 0a01 	mov.w	sl, #1
 80086e0:	fa0a f202 	lsl.w	r2, sl, r2
 80086e4:	420a      	tst	r2, r1
 80086e6:	d009      	beq.n	80086fc <__gethex+0x1f8>
 80086e8:	4553      	cmp	r3, sl
 80086ea:	dd05      	ble.n	80086f8 <__gethex+0x1f4>
 80086ec:	1eb9      	subs	r1, r7, #2
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 fee0 	bl	80094b4 <__any_on>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d145      	bne.n	8008784 <__gethex+0x280>
 80086f8:	f04f 0a02 	mov.w	sl, #2
 80086fc:	4639      	mov	r1, r7
 80086fe:	4620      	mov	r0, r4
 8008700:	f7ff fe98 	bl	8008434 <rshift>
 8008704:	443d      	add	r5, r7
 8008706:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800870a:	42ab      	cmp	r3, r5
 800870c:	da4c      	bge.n	80087a8 <__gethex+0x2a4>
 800870e:	ee18 0a10 	vmov	r0, s16
 8008712:	4621      	mov	r1, r4
 8008714:	f000 fa6e 	bl	8008bf4 <_Bfree>
 8008718:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800871a:	2300      	movs	r3, #0
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	27a3      	movs	r7, #163	; 0xa3
 8008720:	e785      	b.n	800862e <__gethex+0x12a>
 8008722:	1e73      	subs	r3, r6, #1
 8008724:	9a05      	ldr	r2, [sp, #20]
 8008726:	9303      	str	r3, [sp, #12]
 8008728:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800872c:	4293      	cmp	r3, r2
 800872e:	d019      	beq.n	8008764 <__gethex+0x260>
 8008730:	f1bb 0f20 	cmp.w	fp, #32
 8008734:	d107      	bne.n	8008746 <__gethex+0x242>
 8008736:	9b02      	ldr	r3, [sp, #8]
 8008738:	9a00      	ldr	r2, [sp, #0]
 800873a:	f843 2b04 	str.w	r2, [r3], #4
 800873e:	9302      	str	r3, [sp, #8]
 8008740:	2300      	movs	r3, #0
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	469b      	mov	fp, r3
 8008746:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800874a:	f7ff fec5 	bl	80084d8 <__hexdig_fun>
 800874e:	9b00      	ldr	r3, [sp, #0]
 8008750:	f000 000f 	and.w	r0, r0, #15
 8008754:	fa00 f00b 	lsl.w	r0, r0, fp
 8008758:	4303      	orrs	r3, r0
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	f10b 0b04 	add.w	fp, fp, #4
 8008760:	9b03      	ldr	r3, [sp, #12]
 8008762:	e00d      	b.n	8008780 <__gethex+0x27c>
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	9a06      	ldr	r2, [sp, #24]
 8008768:	4413      	add	r3, r2
 800876a:	42bb      	cmp	r3, r7
 800876c:	d3e0      	bcc.n	8008730 <__gethex+0x22c>
 800876e:	4618      	mov	r0, r3
 8008770:	9901      	ldr	r1, [sp, #4]
 8008772:	9307      	str	r3, [sp, #28]
 8008774:	4652      	mov	r2, sl
 8008776:	f001 f837 	bl	80097e8 <strncmp>
 800877a:	9b07      	ldr	r3, [sp, #28]
 800877c:	2800      	cmp	r0, #0
 800877e:	d1d7      	bne.n	8008730 <__gethex+0x22c>
 8008780:	461e      	mov	r6, r3
 8008782:	e78b      	b.n	800869c <__gethex+0x198>
 8008784:	f04f 0a03 	mov.w	sl, #3
 8008788:	e7b8      	b.n	80086fc <__gethex+0x1f8>
 800878a:	da0a      	bge.n	80087a2 <__gethex+0x29e>
 800878c:	1a37      	subs	r7, r6, r0
 800878e:	4621      	mov	r1, r4
 8008790:	ee18 0a10 	vmov	r0, s16
 8008794:	463a      	mov	r2, r7
 8008796:	f000 fc49 	bl	800902c <__lshift>
 800879a:	1bed      	subs	r5, r5, r7
 800879c:	4604      	mov	r4, r0
 800879e:	f100 0914 	add.w	r9, r0, #20
 80087a2:	f04f 0a00 	mov.w	sl, #0
 80087a6:	e7ae      	b.n	8008706 <__gethex+0x202>
 80087a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80087ac:	42a8      	cmp	r0, r5
 80087ae:	dd72      	ble.n	8008896 <__gethex+0x392>
 80087b0:	1b45      	subs	r5, r0, r5
 80087b2:	42ae      	cmp	r6, r5
 80087b4:	dc36      	bgt.n	8008824 <__gethex+0x320>
 80087b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d02a      	beq.n	8008814 <__gethex+0x310>
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d02c      	beq.n	800881c <__gethex+0x318>
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d11c      	bne.n	8008800 <__gethex+0x2fc>
 80087c6:	42ae      	cmp	r6, r5
 80087c8:	d11a      	bne.n	8008800 <__gethex+0x2fc>
 80087ca:	2e01      	cmp	r6, #1
 80087cc:	d112      	bne.n	80087f4 <__gethex+0x2f0>
 80087ce:	9a04      	ldr	r2, [sp, #16]
 80087d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	2301      	movs	r3, #1
 80087d8:	6123      	str	r3, [r4, #16]
 80087da:	f8c9 3000 	str.w	r3, [r9]
 80087de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087e0:	2762      	movs	r7, #98	; 0x62
 80087e2:	601c      	str	r4, [r3, #0]
 80087e4:	e723      	b.n	800862e <__gethex+0x12a>
 80087e6:	bf00      	nop
 80087e8:	0800a5e0 	.word	0x0800a5e0
 80087ec:	0800a568 	.word	0x0800a568
 80087f0:	0800a579 	.word	0x0800a579
 80087f4:	1e71      	subs	r1, r6, #1
 80087f6:	4620      	mov	r0, r4
 80087f8:	f000 fe5c 	bl	80094b4 <__any_on>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d1e6      	bne.n	80087ce <__gethex+0x2ca>
 8008800:	ee18 0a10 	vmov	r0, s16
 8008804:	4621      	mov	r1, r4
 8008806:	f000 f9f5 	bl	8008bf4 <_Bfree>
 800880a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800880c:	2300      	movs	r3, #0
 800880e:	6013      	str	r3, [r2, #0]
 8008810:	2750      	movs	r7, #80	; 0x50
 8008812:	e70c      	b.n	800862e <__gethex+0x12a>
 8008814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1f2      	bne.n	8008800 <__gethex+0x2fc>
 800881a:	e7d8      	b.n	80087ce <__gethex+0x2ca>
 800881c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1d5      	bne.n	80087ce <__gethex+0x2ca>
 8008822:	e7ed      	b.n	8008800 <__gethex+0x2fc>
 8008824:	1e6f      	subs	r7, r5, #1
 8008826:	f1ba 0f00 	cmp.w	sl, #0
 800882a:	d131      	bne.n	8008890 <__gethex+0x38c>
 800882c:	b127      	cbz	r7, 8008838 <__gethex+0x334>
 800882e:	4639      	mov	r1, r7
 8008830:	4620      	mov	r0, r4
 8008832:	f000 fe3f 	bl	80094b4 <__any_on>
 8008836:	4682      	mov	sl, r0
 8008838:	117b      	asrs	r3, r7, #5
 800883a:	2101      	movs	r1, #1
 800883c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008840:	f007 071f 	and.w	r7, r7, #31
 8008844:	fa01 f707 	lsl.w	r7, r1, r7
 8008848:	421f      	tst	r7, r3
 800884a:	4629      	mov	r1, r5
 800884c:	4620      	mov	r0, r4
 800884e:	bf18      	it	ne
 8008850:	f04a 0a02 	orrne.w	sl, sl, #2
 8008854:	1b76      	subs	r6, r6, r5
 8008856:	f7ff fded 	bl	8008434 <rshift>
 800885a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800885e:	2702      	movs	r7, #2
 8008860:	f1ba 0f00 	cmp.w	sl, #0
 8008864:	d048      	beq.n	80088f8 <__gethex+0x3f4>
 8008866:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800886a:	2b02      	cmp	r3, #2
 800886c:	d015      	beq.n	800889a <__gethex+0x396>
 800886e:	2b03      	cmp	r3, #3
 8008870:	d017      	beq.n	80088a2 <__gethex+0x39e>
 8008872:	2b01      	cmp	r3, #1
 8008874:	d109      	bne.n	800888a <__gethex+0x386>
 8008876:	f01a 0f02 	tst.w	sl, #2
 800887a:	d006      	beq.n	800888a <__gethex+0x386>
 800887c:	f8d9 0000 	ldr.w	r0, [r9]
 8008880:	ea4a 0a00 	orr.w	sl, sl, r0
 8008884:	f01a 0f01 	tst.w	sl, #1
 8008888:	d10e      	bne.n	80088a8 <__gethex+0x3a4>
 800888a:	f047 0710 	orr.w	r7, r7, #16
 800888e:	e033      	b.n	80088f8 <__gethex+0x3f4>
 8008890:	f04f 0a01 	mov.w	sl, #1
 8008894:	e7d0      	b.n	8008838 <__gethex+0x334>
 8008896:	2701      	movs	r7, #1
 8008898:	e7e2      	b.n	8008860 <__gethex+0x35c>
 800889a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800889c:	f1c3 0301 	rsb	r3, r3, #1
 80088a0:	9315      	str	r3, [sp, #84]	; 0x54
 80088a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d0f0      	beq.n	800888a <__gethex+0x386>
 80088a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80088ac:	f104 0314 	add.w	r3, r4, #20
 80088b0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80088b4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80088b8:	f04f 0c00 	mov.w	ip, #0
 80088bc:	4618      	mov	r0, r3
 80088be:	f853 2b04 	ldr.w	r2, [r3], #4
 80088c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088c6:	d01c      	beq.n	8008902 <__gethex+0x3fe>
 80088c8:	3201      	adds	r2, #1
 80088ca:	6002      	str	r2, [r0, #0]
 80088cc:	2f02      	cmp	r7, #2
 80088ce:	f104 0314 	add.w	r3, r4, #20
 80088d2:	d13f      	bne.n	8008954 <__gethex+0x450>
 80088d4:	f8d8 2000 	ldr.w	r2, [r8]
 80088d8:	3a01      	subs	r2, #1
 80088da:	42b2      	cmp	r2, r6
 80088dc:	d10a      	bne.n	80088f4 <__gethex+0x3f0>
 80088de:	1171      	asrs	r1, r6, #5
 80088e0:	2201      	movs	r2, #1
 80088e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088e6:	f006 061f 	and.w	r6, r6, #31
 80088ea:	fa02 f606 	lsl.w	r6, r2, r6
 80088ee:	421e      	tst	r6, r3
 80088f0:	bf18      	it	ne
 80088f2:	4617      	movne	r7, r2
 80088f4:	f047 0720 	orr.w	r7, r7, #32
 80088f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088fa:	601c      	str	r4, [r3, #0]
 80088fc:	9b04      	ldr	r3, [sp, #16]
 80088fe:	601d      	str	r5, [r3, #0]
 8008900:	e695      	b.n	800862e <__gethex+0x12a>
 8008902:	4299      	cmp	r1, r3
 8008904:	f843 cc04 	str.w	ip, [r3, #-4]
 8008908:	d8d8      	bhi.n	80088bc <__gethex+0x3b8>
 800890a:	68a3      	ldr	r3, [r4, #8]
 800890c:	459b      	cmp	fp, r3
 800890e:	db19      	blt.n	8008944 <__gethex+0x440>
 8008910:	6861      	ldr	r1, [r4, #4]
 8008912:	ee18 0a10 	vmov	r0, s16
 8008916:	3101      	adds	r1, #1
 8008918:	f000 f92c 	bl	8008b74 <_Balloc>
 800891c:	4681      	mov	r9, r0
 800891e:	b918      	cbnz	r0, 8008928 <__gethex+0x424>
 8008920:	4b1a      	ldr	r3, [pc, #104]	; (800898c <__gethex+0x488>)
 8008922:	4602      	mov	r2, r0
 8008924:	2184      	movs	r1, #132	; 0x84
 8008926:	e6a8      	b.n	800867a <__gethex+0x176>
 8008928:	6922      	ldr	r2, [r4, #16]
 800892a:	3202      	adds	r2, #2
 800892c:	f104 010c 	add.w	r1, r4, #12
 8008930:	0092      	lsls	r2, r2, #2
 8008932:	300c      	adds	r0, #12
 8008934:	f000 f904 	bl	8008b40 <memcpy>
 8008938:	4621      	mov	r1, r4
 800893a:	ee18 0a10 	vmov	r0, s16
 800893e:	f000 f959 	bl	8008bf4 <_Bfree>
 8008942:	464c      	mov	r4, r9
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800894c:	6122      	str	r2, [r4, #16]
 800894e:	2201      	movs	r2, #1
 8008950:	615a      	str	r2, [r3, #20]
 8008952:	e7bb      	b.n	80088cc <__gethex+0x3c8>
 8008954:	6922      	ldr	r2, [r4, #16]
 8008956:	455a      	cmp	r2, fp
 8008958:	dd0b      	ble.n	8008972 <__gethex+0x46e>
 800895a:	2101      	movs	r1, #1
 800895c:	4620      	mov	r0, r4
 800895e:	f7ff fd69 	bl	8008434 <rshift>
 8008962:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008966:	3501      	adds	r5, #1
 8008968:	42ab      	cmp	r3, r5
 800896a:	f6ff aed0 	blt.w	800870e <__gethex+0x20a>
 800896e:	2701      	movs	r7, #1
 8008970:	e7c0      	b.n	80088f4 <__gethex+0x3f0>
 8008972:	f016 061f 	ands.w	r6, r6, #31
 8008976:	d0fa      	beq.n	800896e <__gethex+0x46a>
 8008978:	4453      	add	r3, sl
 800897a:	f1c6 0620 	rsb	r6, r6, #32
 800897e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008982:	f000 f9e9 	bl	8008d58 <__hi0bits>
 8008986:	42b0      	cmp	r0, r6
 8008988:	dbe7      	blt.n	800895a <__gethex+0x456>
 800898a:	e7f0      	b.n	800896e <__gethex+0x46a>
 800898c:	0800a568 	.word	0x0800a568

08008990 <L_shift>:
 8008990:	f1c2 0208 	rsb	r2, r2, #8
 8008994:	0092      	lsls	r2, r2, #2
 8008996:	b570      	push	{r4, r5, r6, lr}
 8008998:	f1c2 0620 	rsb	r6, r2, #32
 800899c:	6843      	ldr	r3, [r0, #4]
 800899e:	6804      	ldr	r4, [r0, #0]
 80089a0:	fa03 f506 	lsl.w	r5, r3, r6
 80089a4:	432c      	orrs	r4, r5
 80089a6:	40d3      	lsrs	r3, r2
 80089a8:	6004      	str	r4, [r0, #0]
 80089aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80089ae:	4288      	cmp	r0, r1
 80089b0:	d3f4      	bcc.n	800899c <L_shift+0xc>
 80089b2:	bd70      	pop	{r4, r5, r6, pc}

080089b4 <__match>:
 80089b4:	b530      	push	{r4, r5, lr}
 80089b6:	6803      	ldr	r3, [r0, #0]
 80089b8:	3301      	adds	r3, #1
 80089ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089be:	b914      	cbnz	r4, 80089c6 <__match+0x12>
 80089c0:	6003      	str	r3, [r0, #0]
 80089c2:	2001      	movs	r0, #1
 80089c4:	bd30      	pop	{r4, r5, pc}
 80089c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80089ce:	2d19      	cmp	r5, #25
 80089d0:	bf98      	it	ls
 80089d2:	3220      	addls	r2, #32
 80089d4:	42a2      	cmp	r2, r4
 80089d6:	d0f0      	beq.n	80089ba <__match+0x6>
 80089d8:	2000      	movs	r0, #0
 80089da:	e7f3      	b.n	80089c4 <__match+0x10>

080089dc <__hexnan>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	680b      	ldr	r3, [r1, #0]
 80089e2:	115e      	asrs	r6, r3, #5
 80089e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089e8:	f013 031f 	ands.w	r3, r3, #31
 80089ec:	b087      	sub	sp, #28
 80089ee:	bf18      	it	ne
 80089f0:	3604      	addne	r6, #4
 80089f2:	2500      	movs	r5, #0
 80089f4:	1f37      	subs	r7, r6, #4
 80089f6:	4690      	mov	r8, r2
 80089f8:	6802      	ldr	r2, [r0, #0]
 80089fa:	9301      	str	r3, [sp, #4]
 80089fc:	4682      	mov	sl, r0
 80089fe:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a02:	46b9      	mov	r9, r7
 8008a04:	463c      	mov	r4, r7
 8008a06:	9502      	str	r5, [sp, #8]
 8008a08:	46ab      	mov	fp, r5
 8008a0a:	7851      	ldrb	r1, [r2, #1]
 8008a0c:	1c53      	adds	r3, r2, #1
 8008a0e:	9303      	str	r3, [sp, #12]
 8008a10:	b341      	cbz	r1, 8008a64 <__hexnan+0x88>
 8008a12:	4608      	mov	r0, r1
 8008a14:	9205      	str	r2, [sp, #20]
 8008a16:	9104      	str	r1, [sp, #16]
 8008a18:	f7ff fd5e 	bl	80084d8 <__hexdig_fun>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d14f      	bne.n	8008ac0 <__hexnan+0xe4>
 8008a20:	9904      	ldr	r1, [sp, #16]
 8008a22:	9a05      	ldr	r2, [sp, #20]
 8008a24:	2920      	cmp	r1, #32
 8008a26:	d818      	bhi.n	8008a5a <__hexnan+0x7e>
 8008a28:	9b02      	ldr	r3, [sp, #8]
 8008a2a:	459b      	cmp	fp, r3
 8008a2c:	dd13      	ble.n	8008a56 <__hexnan+0x7a>
 8008a2e:	454c      	cmp	r4, r9
 8008a30:	d206      	bcs.n	8008a40 <__hexnan+0x64>
 8008a32:	2d07      	cmp	r5, #7
 8008a34:	dc04      	bgt.n	8008a40 <__hexnan+0x64>
 8008a36:	462a      	mov	r2, r5
 8008a38:	4649      	mov	r1, r9
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f7ff ffa8 	bl	8008990 <L_shift>
 8008a40:	4544      	cmp	r4, r8
 8008a42:	d950      	bls.n	8008ae6 <__hexnan+0x10a>
 8008a44:	2300      	movs	r3, #0
 8008a46:	f1a4 0904 	sub.w	r9, r4, #4
 8008a4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a4e:	f8cd b008 	str.w	fp, [sp, #8]
 8008a52:	464c      	mov	r4, r9
 8008a54:	461d      	mov	r5, r3
 8008a56:	9a03      	ldr	r2, [sp, #12]
 8008a58:	e7d7      	b.n	8008a0a <__hexnan+0x2e>
 8008a5a:	2929      	cmp	r1, #41	; 0x29
 8008a5c:	d156      	bne.n	8008b0c <__hexnan+0x130>
 8008a5e:	3202      	adds	r2, #2
 8008a60:	f8ca 2000 	str.w	r2, [sl]
 8008a64:	f1bb 0f00 	cmp.w	fp, #0
 8008a68:	d050      	beq.n	8008b0c <__hexnan+0x130>
 8008a6a:	454c      	cmp	r4, r9
 8008a6c:	d206      	bcs.n	8008a7c <__hexnan+0xa0>
 8008a6e:	2d07      	cmp	r5, #7
 8008a70:	dc04      	bgt.n	8008a7c <__hexnan+0xa0>
 8008a72:	462a      	mov	r2, r5
 8008a74:	4649      	mov	r1, r9
 8008a76:	4620      	mov	r0, r4
 8008a78:	f7ff ff8a 	bl	8008990 <L_shift>
 8008a7c:	4544      	cmp	r4, r8
 8008a7e:	d934      	bls.n	8008aea <__hexnan+0x10e>
 8008a80:	f1a8 0204 	sub.w	r2, r8, #4
 8008a84:	4623      	mov	r3, r4
 8008a86:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a8a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a8e:	429f      	cmp	r7, r3
 8008a90:	d2f9      	bcs.n	8008a86 <__hexnan+0xaa>
 8008a92:	1b3b      	subs	r3, r7, r4
 8008a94:	f023 0303 	bic.w	r3, r3, #3
 8008a98:	3304      	adds	r3, #4
 8008a9a:	3401      	adds	r4, #1
 8008a9c:	3e03      	subs	r6, #3
 8008a9e:	42b4      	cmp	r4, r6
 8008aa0:	bf88      	it	hi
 8008aa2:	2304      	movhi	r3, #4
 8008aa4:	4443      	add	r3, r8
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f843 2b04 	str.w	r2, [r3], #4
 8008aac:	429f      	cmp	r7, r3
 8008aae:	d2fb      	bcs.n	8008aa8 <__hexnan+0xcc>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	b91b      	cbnz	r3, 8008abc <__hexnan+0xe0>
 8008ab4:	4547      	cmp	r7, r8
 8008ab6:	d127      	bne.n	8008b08 <__hexnan+0x12c>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	2005      	movs	r0, #5
 8008abe:	e026      	b.n	8008b0e <__hexnan+0x132>
 8008ac0:	3501      	adds	r5, #1
 8008ac2:	2d08      	cmp	r5, #8
 8008ac4:	f10b 0b01 	add.w	fp, fp, #1
 8008ac8:	dd06      	ble.n	8008ad8 <__hexnan+0xfc>
 8008aca:	4544      	cmp	r4, r8
 8008acc:	d9c3      	bls.n	8008a56 <__hexnan+0x7a>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ad4:	2501      	movs	r5, #1
 8008ad6:	3c04      	subs	r4, #4
 8008ad8:	6822      	ldr	r2, [r4, #0]
 8008ada:	f000 000f 	and.w	r0, r0, #15
 8008ade:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008ae2:	6022      	str	r2, [r4, #0]
 8008ae4:	e7b7      	b.n	8008a56 <__hexnan+0x7a>
 8008ae6:	2508      	movs	r5, #8
 8008ae8:	e7b5      	b.n	8008a56 <__hexnan+0x7a>
 8008aea:	9b01      	ldr	r3, [sp, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0df      	beq.n	8008ab0 <__hexnan+0xd4>
 8008af0:	f04f 32ff 	mov.w	r2, #4294967295
 8008af4:	f1c3 0320 	rsb	r3, r3, #32
 8008af8:	fa22 f303 	lsr.w	r3, r2, r3
 8008afc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008b00:	401a      	ands	r2, r3
 8008b02:	f846 2c04 	str.w	r2, [r6, #-4]
 8008b06:	e7d3      	b.n	8008ab0 <__hexnan+0xd4>
 8008b08:	3f04      	subs	r7, #4
 8008b0a:	e7d1      	b.n	8008ab0 <__hexnan+0xd4>
 8008b0c:	2004      	movs	r0, #4
 8008b0e:	b007      	add	sp, #28
 8008b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b14 <_localeconv_r>:
 8008b14:	4800      	ldr	r0, [pc, #0]	; (8008b18 <_localeconv_r+0x4>)
 8008b16:	4770      	bx	lr
 8008b18:	20000164 	.word	0x20000164

08008b1c <__ascii_mbtowc>:
 8008b1c:	b082      	sub	sp, #8
 8008b1e:	b901      	cbnz	r1, 8008b22 <__ascii_mbtowc+0x6>
 8008b20:	a901      	add	r1, sp, #4
 8008b22:	b142      	cbz	r2, 8008b36 <__ascii_mbtowc+0x1a>
 8008b24:	b14b      	cbz	r3, 8008b3a <__ascii_mbtowc+0x1e>
 8008b26:	7813      	ldrb	r3, [r2, #0]
 8008b28:	600b      	str	r3, [r1, #0]
 8008b2a:	7812      	ldrb	r2, [r2, #0]
 8008b2c:	1e10      	subs	r0, r2, #0
 8008b2e:	bf18      	it	ne
 8008b30:	2001      	movne	r0, #1
 8008b32:	b002      	add	sp, #8
 8008b34:	4770      	bx	lr
 8008b36:	4610      	mov	r0, r2
 8008b38:	e7fb      	b.n	8008b32 <__ascii_mbtowc+0x16>
 8008b3a:	f06f 0001 	mvn.w	r0, #1
 8008b3e:	e7f8      	b.n	8008b32 <__ascii_mbtowc+0x16>

08008b40 <memcpy>:
 8008b40:	440a      	add	r2, r1
 8008b42:	4291      	cmp	r1, r2
 8008b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b48:	d100      	bne.n	8008b4c <memcpy+0xc>
 8008b4a:	4770      	bx	lr
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b56:	4291      	cmp	r1, r2
 8008b58:	d1f9      	bne.n	8008b4e <memcpy+0xe>
 8008b5a:	bd10      	pop	{r4, pc}

08008b5c <__malloc_lock>:
 8008b5c:	4801      	ldr	r0, [pc, #4]	; (8008b64 <__malloc_lock+0x8>)
 8008b5e:	f000 be96 	b.w	800988e <__retarget_lock_acquire_recursive>
 8008b62:	bf00      	nop
 8008b64:	2000043c 	.word	0x2000043c

08008b68 <__malloc_unlock>:
 8008b68:	4801      	ldr	r0, [pc, #4]	; (8008b70 <__malloc_unlock+0x8>)
 8008b6a:	f000 be91 	b.w	8009890 <__retarget_lock_release_recursive>
 8008b6e:	bf00      	nop
 8008b70:	2000043c 	.word	0x2000043c

08008b74 <_Balloc>:
 8008b74:	b570      	push	{r4, r5, r6, lr}
 8008b76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b78:	4604      	mov	r4, r0
 8008b7a:	460d      	mov	r5, r1
 8008b7c:	b976      	cbnz	r6, 8008b9c <_Balloc+0x28>
 8008b7e:	2010      	movs	r0, #16
 8008b80:	f7fc ff4c 	bl	8005a1c <malloc>
 8008b84:	4602      	mov	r2, r0
 8008b86:	6260      	str	r0, [r4, #36]	; 0x24
 8008b88:	b920      	cbnz	r0, 8008b94 <_Balloc+0x20>
 8008b8a:	4b18      	ldr	r3, [pc, #96]	; (8008bec <_Balloc+0x78>)
 8008b8c:	4818      	ldr	r0, [pc, #96]	; (8008bf0 <_Balloc+0x7c>)
 8008b8e:	2166      	movs	r1, #102	; 0x66
 8008b90:	f000 fe4c 	bl	800982c <__assert_func>
 8008b94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b98:	6006      	str	r6, [r0, #0]
 8008b9a:	60c6      	str	r6, [r0, #12]
 8008b9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b9e:	68f3      	ldr	r3, [r6, #12]
 8008ba0:	b183      	cbz	r3, 8008bc4 <_Balloc+0x50>
 8008ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008baa:	b9b8      	cbnz	r0, 8008bdc <_Balloc+0x68>
 8008bac:	2101      	movs	r1, #1
 8008bae:	fa01 f605 	lsl.w	r6, r1, r5
 8008bb2:	1d72      	adds	r2, r6, #5
 8008bb4:	0092      	lsls	r2, r2, #2
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f000 fc9d 	bl	80094f6 <_calloc_r>
 8008bbc:	b160      	cbz	r0, 8008bd8 <_Balloc+0x64>
 8008bbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bc2:	e00e      	b.n	8008be2 <_Balloc+0x6e>
 8008bc4:	2221      	movs	r2, #33	; 0x21
 8008bc6:	2104      	movs	r1, #4
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 fc94 	bl	80094f6 <_calloc_r>
 8008bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bd0:	60f0      	str	r0, [r6, #12]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1e4      	bne.n	8008ba2 <_Balloc+0x2e>
 8008bd8:	2000      	movs	r0, #0
 8008bda:	bd70      	pop	{r4, r5, r6, pc}
 8008bdc:	6802      	ldr	r2, [r0, #0]
 8008bde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008be2:	2300      	movs	r3, #0
 8008be4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008be8:	e7f7      	b.n	8008bda <_Balloc+0x66>
 8008bea:	bf00      	nop
 8008bec:	0800a4f6 	.word	0x0800a4f6
 8008bf0:	0800a5f4 	.word	0x0800a5f4

08008bf4 <_Bfree>:
 8008bf4:	b570      	push	{r4, r5, r6, lr}
 8008bf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	b976      	cbnz	r6, 8008c1c <_Bfree+0x28>
 8008bfe:	2010      	movs	r0, #16
 8008c00:	f7fc ff0c 	bl	8005a1c <malloc>
 8008c04:	4602      	mov	r2, r0
 8008c06:	6268      	str	r0, [r5, #36]	; 0x24
 8008c08:	b920      	cbnz	r0, 8008c14 <_Bfree+0x20>
 8008c0a:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <_Bfree+0x3c>)
 8008c0c:	4809      	ldr	r0, [pc, #36]	; (8008c34 <_Bfree+0x40>)
 8008c0e:	218a      	movs	r1, #138	; 0x8a
 8008c10:	f000 fe0c 	bl	800982c <__assert_func>
 8008c14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c18:	6006      	str	r6, [r0, #0]
 8008c1a:	60c6      	str	r6, [r0, #12]
 8008c1c:	b13c      	cbz	r4, 8008c2e <_Bfree+0x3a>
 8008c1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c20:	6862      	ldr	r2, [r4, #4]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c28:	6021      	str	r1, [r4, #0]
 8008c2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c2e:	bd70      	pop	{r4, r5, r6, pc}
 8008c30:	0800a4f6 	.word	0x0800a4f6
 8008c34:	0800a5f4 	.word	0x0800a5f4

08008c38 <__multadd>:
 8008c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3c:	690d      	ldr	r5, [r1, #16]
 8008c3e:	4607      	mov	r7, r0
 8008c40:	460c      	mov	r4, r1
 8008c42:	461e      	mov	r6, r3
 8008c44:	f101 0c14 	add.w	ip, r1, #20
 8008c48:	2000      	movs	r0, #0
 8008c4a:	f8dc 3000 	ldr.w	r3, [ip]
 8008c4e:	b299      	uxth	r1, r3
 8008c50:	fb02 6101 	mla	r1, r2, r1, r6
 8008c54:	0c1e      	lsrs	r6, r3, #16
 8008c56:	0c0b      	lsrs	r3, r1, #16
 8008c58:	fb02 3306 	mla	r3, r2, r6, r3
 8008c5c:	b289      	uxth	r1, r1
 8008c5e:	3001      	adds	r0, #1
 8008c60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c64:	4285      	cmp	r5, r0
 8008c66:	f84c 1b04 	str.w	r1, [ip], #4
 8008c6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c6e:	dcec      	bgt.n	8008c4a <__multadd+0x12>
 8008c70:	b30e      	cbz	r6, 8008cb6 <__multadd+0x7e>
 8008c72:	68a3      	ldr	r3, [r4, #8]
 8008c74:	42ab      	cmp	r3, r5
 8008c76:	dc19      	bgt.n	8008cac <__multadd+0x74>
 8008c78:	6861      	ldr	r1, [r4, #4]
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	3101      	adds	r1, #1
 8008c7e:	f7ff ff79 	bl	8008b74 <_Balloc>
 8008c82:	4680      	mov	r8, r0
 8008c84:	b928      	cbnz	r0, 8008c92 <__multadd+0x5a>
 8008c86:	4602      	mov	r2, r0
 8008c88:	4b0c      	ldr	r3, [pc, #48]	; (8008cbc <__multadd+0x84>)
 8008c8a:	480d      	ldr	r0, [pc, #52]	; (8008cc0 <__multadd+0x88>)
 8008c8c:	21b5      	movs	r1, #181	; 0xb5
 8008c8e:	f000 fdcd 	bl	800982c <__assert_func>
 8008c92:	6922      	ldr	r2, [r4, #16]
 8008c94:	3202      	adds	r2, #2
 8008c96:	f104 010c 	add.w	r1, r4, #12
 8008c9a:	0092      	lsls	r2, r2, #2
 8008c9c:	300c      	adds	r0, #12
 8008c9e:	f7ff ff4f 	bl	8008b40 <memcpy>
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	f7ff ffa5 	bl	8008bf4 <_Bfree>
 8008caa:	4644      	mov	r4, r8
 8008cac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cb0:	3501      	adds	r5, #1
 8008cb2:	615e      	str	r6, [r3, #20]
 8008cb4:	6125      	str	r5, [r4, #16]
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cbc:	0800a568 	.word	0x0800a568
 8008cc0:	0800a5f4 	.word	0x0800a5f4

08008cc4 <__s2b>:
 8008cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cc8:	460c      	mov	r4, r1
 8008cca:	4615      	mov	r5, r2
 8008ccc:	461f      	mov	r7, r3
 8008cce:	2209      	movs	r2, #9
 8008cd0:	3308      	adds	r3, #8
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cd8:	2100      	movs	r1, #0
 8008cda:	2201      	movs	r2, #1
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	db09      	blt.n	8008cf4 <__s2b+0x30>
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f7ff ff47 	bl	8008b74 <_Balloc>
 8008ce6:	b940      	cbnz	r0, 8008cfa <__s2b+0x36>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	4b19      	ldr	r3, [pc, #100]	; (8008d50 <__s2b+0x8c>)
 8008cec:	4819      	ldr	r0, [pc, #100]	; (8008d54 <__s2b+0x90>)
 8008cee:	21ce      	movs	r1, #206	; 0xce
 8008cf0:	f000 fd9c 	bl	800982c <__assert_func>
 8008cf4:	0052      	lsls	r2, r2, #1
 8008cf6:	3101      	adds	r1, #1
 8008cf8:	e7f0      	b.n	8008cdc <__s2b+0x18>
 8008cfa:	9b08      	ldr	r3, [sp, #32]
 8008cfc:	6143      	str	r3, [r0, #20]
 8008cfe:	2d09      	cmp	r5, #9
 8008d00:	f04f 0301 	mov.w	r3, #1
 8008d04:	6103      	str	r3, [r0, #16]
 8008d06:	dd16      	ble.n	8008d36 <__s2b+0x72>
 8008d08:	f104 0909 	add.w	r9, r4, #9
 8008d0c:	46c8      	mov	r8, r9
 8008d0e:	442c      	add	r4, r5
 8008d10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d14:	4601      	mov	r1, r0
 8008d16:	3b30      	subs	r3, #48	; 0x30
 8008d18:	220a      	movs	r2, #10
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f7ff ff8c 	bl	8008c38 <__multadd>
 8008d20:	45a0      	cmp	r8, r4
 8008d22:	d1f5      	bne.n	8008d10 <__s2b+0x4c>
 8008d24:	f1a5 0408 	sub.w	r4, r5, #8
 8008d28:	444c      	add	r4, r9
 8008d2a:	1b2d      	subs	r5, r5, r4
 8008d2c:	1963      	adds	r3, r4, r5
 8008d2e:	42bb      	cmp	r3, r7
 8008d30:	db04      	blt.n	8008d3c <__s2b+0x78>
 8008d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d36:	340a      	adds	r4, #10
 8008d38:	2509      	movs	r5, #9
 8008d3a:	e7f6      	b.n	8008d2a <__s2b+0x66>
 8008d3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d40:	4601      	mov	r1, r0
 8008d42:	3b30      	subs	r3, #48	; 0x30
 8008d44:	220a      	movs	r2, #10
 8008d46:	4630      	mov	r0, r6
 8008d48:	f7ff ff76 	bl	8008c38 <__multadd>
 8008d4c:	e7ee      	b.n	8008d2c <__s2b+0x68>
 8008d4e:	bf00      	nop
 8008d50:	0800a568 	.word	0x0800a568
 8008d54:	0800a5f4 	.word	0x0800a5f4

08008d58 <__hi0bits>:
 8008d58:	0c03      	lsrs	r3, r0, #16
 8008d5a:	041b      	lsls	r3, r3, #16
 8008d5c:	b9d3      	cbnz	r3, 8008d94 <__hi0bits+0x3c>
 8008d5e:	0400      	lsls	r0, r0, #16
 8008d60:	2310      	movs	r3, #16
 8008d62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d66:	bf04      	itt	eq
 8008d68:	0200      	lsleq	r0, r0, #8
 8008d6a:	3308      	addeq	r3, #8
 8008d6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d70:	bf04      	itt	eq
 8008d72:	0100      	lsleq	r0, r0, #4
 8008d74:	3304      	addeq	r3, #4
 8008d76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d7a:	bf04      	itt	eq
 8008d7c:	0080      	lsleq	r0, r0, #2
 8008d7e:	3302      	addeq	r3, #2
 8008d80:	2800      	cmp	r0, #0
 8008d82:	db05      	blt.n	8008d90 <__hi0bits+0x38>
 8008d84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d88:	f103 0301 	add.w	r3, r3, #1
 8008d8c:	bf08      	it	eq
 8008d8e:	2320      	moveq	r3, #32
 8008d90:	4618      	mov	r0, r3
 8008d92:	4770      	bx	lr
 8008d94:	2300      	movs	r3, #0
 8008d96:	e7e4      	b.n	8008d62 <__hi0bits+0xa>

08008d98 <__lo0bits>:
 8008d98:	6803      	ldr	r3, [r0, #0]
 8008d9a:	f013 0207 	ands.w	r2, r3, #7
 8008d9e:	4601      	mov	r1, r0
 8008da0:	d00b      	beq.n	8008dba <__lo0bits+0x22>
 8008da2:	07da      	lsls	r2, r3, #31
 8008da4:	d423      	bmi.n	8008dee <__lo0bits+0x56>
 8008da6:	0798      	lsls	r0, r3, #30
 8008da8:	bf49      	itett	mi
 8008daa:	085b      	lsrmi	r3, r3, #1
 8008dac:	089b      	lsrpl	r3, r3, #2
 8008dae:	2001      	movmi	r0, #1
 8008db0:	600b      	strmi	r3, [r1, #0]
 8008db2:	bf5c      	itt	pl
 8008db4:	600b      	strpl	r3, [r1, #0]
 8008db6:	2002      	movpl	r0, #2
 8008db8:	4770      	bx	lr
 8008dba:	b298      	uxth	r0, r3
 8008dbc:	b9a8      	cbnz	r0, 8008dea <__lo0bits+0x52>
 8008dbe:	0c1b      	lsrs	r3, r3, #16
 8008dc0:	2010      	movs	r0, #16
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	b90a      	cbnz	r2, 8008dca <__lo0bits+0x32>
 8008dc6:	3008      	adds	r0, #8
 8008dc8:	0a1b      	lsrs	r3, r3, #8
 8008dca:	071a      	lsls	r2, r3, #28
 8008dcc:	bf04      	itt	eq
 8008dce:	091b      	lsreq	r3, r3, #4
 8008dd0:	3004      	addeq	r0, #4
 8008dd2:	079a      	lsls	r2, r3, #30
 8008dd4:	bf04      	itt	eq
 8008dd6:	089b      	lsreq	r3, r3, #2
 8008dd8:	3002      	addeq	r0, #2
 8008dda:	07da      	lsls	r2, r3, #31
 8008ddc:	d403      	bmi.n	8008de6 <__lo0bits+0x4e>
 8008dde:	085b      	lsrs	r3, r3, #1
 8008de0:	f100 0001 	add.w	r0, r0, #1
 8008de4:	d005      	beq.n	8008df2 <__lo0bits+0x5a>
 8008de6:	600b      	str	r3, [r1, #0]
 8008de8:	4770      	bx	lr
 8008dea:	4610      	mov	r0, r2
 8008dec:	e7e9      	b.n	8008dc2 <__lo0bits+0x2a>
 8008dee:	2000      	movs	r0, #0
 8008df0:	4770      	bx	lr
 8008df2:	2020      	movs	r0, #32
 8008df4:	4770      	bx	lr
	...

08008df8 <__i2b>:
 8008df8:	b510      	push	{r4, lr}
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	f7ff feb9 	bl	8008b74 <_Balloc>
 8008e02:	4602      	mov	r2, r0
 8008e04:	b928      	cbnz	r0, 8008e12 <__i2b+0x1a>
 8008e06:	4b05      	ldr	r3, [pc, #20]	; (8008e1c <__i2b+0x24>)
 8008e08:	4805      	ldr	r0, [pc, #20]	; (8008e20 <__i2b+0x28>)
 8008e0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e0e:	f000 fd0d 	bl	800982c <__assert_func>
 8008e12:	2301      	movs	r3, #1
 8008e14:	6144      	str	r4, [r0, #20]
 8008e16:	6103      	str	r3, [r0, #16]
 8008e18:	bd10      	pop	{r4, pc}
 8008e1a:	bf00      	nop
 8008e1c:	0800a568 	.word	0x0800a568
 8008e20:	0800a5f4 	.word	0x0800a5f4

08008e24 <__multiply>:
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	4691      	mov	r9, r2
 8008e2a:	690a      	ldr	r2, [r1, #16]
 8008e2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	bfb8      	it	lt
 8008e34:	460b      	movlt	r3, r1
 8008e36:	460c      	mov	r4, r1
 8008e38:	bfbc      	itt	lt
 8008e3a:	464c      	movlt	r4, r9
 8008e3c:	4699      	movlt	r9, r3
 8008e3e:	6927      	ldr	r7, [r4, #16]
 8008e40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e44:	68a3      	ldr	r3, [r4, #8]
 8008e46:	6861      	ldr	r1, [r4, #4]
 8008e48:	eb07 060a 	add.w	r6, r7, sl
 8008e4c:	42b3      	cmp	r3, r6
 8008e4e:	b085      	sub	sp, #20
 8008e50:	bfb8      	it	lt
 8008e52:	3101      	addlt	r1, #1
 8008e54:	f7ff fe8e 	bl	8008b74 <_Balloc>
 8008e58:	b930      	cbnz	r0, 8008e68 <__multiply+0x44>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	4b44      	ldr	r3, [pc, #272]	; (8008f70 <__multiply+0x14c>)
 8008e5e:	4845      	ldr	r0, [pc, #276]	; (8008f74 <__multiply+0x150>)
 8008e60:	f240 115d 	movw	r1, #349	; 0x15d
 8008e64:	f000 fce2 	bl	800982c <__assert_func>
 8008e68:	f100 0514 	add.w	r5, r0, #20
 8008e6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e70:	462b      	mov	r3, r5
 8008e72:	2200      	movs	r2, #0
 8008e74:	4543      	cmp	r3, r8
 8008e76:	d321      	bcc.n	8008ebc <__multiply+0x98>
 8008e78:	f104 0314 	add.w	r3, r4, #20
 8008e7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e80:	f109 0314 	add.w	r3, r9, #20
 8008e84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008e88:	9202      	str	r2, [sp, #8]
 8008e8a:	1b3a      	subs	r2, r7, r4
 8008e8c:	3a15      	subs	r2, #21
 8008e8e:	f022 0203 	bic.w	r2, r2, #3
 8008e92:	3204      	adds	r2, #4
 8008e94:	f104 0115 	add.w	r1, r4, #21
 8008e98:	428f      	cmp	r7, r1
 8008e9a:	bf38      	it	cc
 8008e9c:	2204      	movcc	r2, #4
 8008e9e:	9201      	str	r2, [sp, #4]
 8008ea0:	9a02      	ldr	r2, [sp, #8]
 8008ea2:	9303      	str	r3, [sp, #12]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d80c      	bhi.n	8008ec2 <__multiply+0x9e>
 8008ea8:	2e00      	cmp	r6, #0
 8008eaa:	dd03      	ble.n	8008eb4 <__multiply+0x90>
 8008eac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d05a      	beq.n	8008f6a <__multiply+0x146>
 8008eb4:	6106      	str	r6, [r0, #16]
 8008eb6:	b005      	add	sp, #20
 8008eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebc:	f843 2b04 	str.w	r2, [r3], #4
 8008ec0:	e7d8      	b.n	8008e74 <__multiply+0x50>
 8008ec2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ec6:	f1ba 0f00 	cmp.w	sl, #0
 8008eca:	d024      	beq.n	8008f16 <__multiply+0xf2>
 8008ecc:	f104 0e14 	add.w	lr, r4, #20
 8008ed0:	46a9      	mov	r9, r5
 8008ed2:	f04f 0c00 	mov.w	ip, #0
 8008ed6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008eda:	f8d9 1000 	ldr.w	r1, [r9]
 8008ede:	fa1f fb82 	uxth.w	fp, r2
 8008ee2:	b289      	uxth	r1, r1
 8008ee4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008ee8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008eec:	f8d9 2000 	ldr.w	r2, [r9]
 8008ef0:	4461      	add	r1, ip
 8008ef2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ef6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008efa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008efe:	b289      	uxth	r1, r1
 8008f00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f04:	4577      	cmp	r7, lr
 8008f06:	f849 1b04 	str.w	r1, [r9], #4
 8008f0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f0e:	d8e2      	bhi.n	8008ed6 <__multiply+0xb2>
 8008f10:	9a01      	ldr	r2, [sp, #4]
 8008f12:	f845 c002 	str.w	ip, [r5, r2]
 8008f16:	9a03      	ldr	r2, [sp, #12]
 8008f18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	f1b9 0f00 	cmp.w	r9, #0
 8008f22:	d020      	beq.n	8008f66 <__multiply+0x142>
 8008f24:	6829      	ldr	r1, [r5, #0]
 8008f26:	f104 0c14 	add.w	ip, r4, #20
 8008f2a:	46ae      	mov	lr, r5
 8008f2c:	f04f 0a00 	mov.w	sl, #0
 8008f30:	f8bc b000 	ldrh.w	fp, [ip]
 8008f34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f38:	fb09 220b 	mla	r2, r9, fp, r2
 8008f3c:	4492      	add	sl, r2
 8008f3e:	b289      	uxth	r1, r1
 8008f40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008f44:	f84e 1b04 	str.w	r1, [lr], #4
 8008f48:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f4c:	f8be 1000 	ldrh.w	r1, [lr]
 8008f50:	0c12      	lsrs	r2, r2, #16
 8008f52:	fb09 1102 	mla	r1, r9, r2, r1
 8008f56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008f5a:	4567      	cmp	r7, ip
 8008f5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f60:	d8e6      	bhi.n	8008f30 <__multiply+0x10c>
 8008f62:	9a01      	ldr	r2, [sp, #4]
 8008f64:	50a9      	str	r1, [r5, r2]
 8008f66:	3504      	adds	r5, #4
 8008f68:	e79a      	b.n	8008ea0 <__multiply+0x7c>
 8008f6a:	3e01      	subs	r6, #1
 8008f6c:	e79c      	b.n	8008ea8 <__multiply+0x84>
 8008f6e:	bf00      	nop
 8008f70:	0800a568 	.word	0x0800a568
 8008f74:	0800a5f4 	.word	0x0800a5f4

08008f78 <__pow5mult>:
 8008f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f7c:	4615      	mov	r5, r2
 8008f7e:	f012 0203 	ands.w	r2, r2, #3
 8008f82:	4606      	mov	r6, r0
 8008f84:	460f      	mov	r7, r1
 8008f86:	d007      	beq.n	8008f98 <__pow5mult+0x20>
 8008f88:	4c25      	ldr	r4, [pc, #148]	; (8009020 <__pow5mult+0xa8>)
 8008f8a:	3a01      	subs	r2, #1
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f92:	f7ff fe51 	bl	8008c38 <__multadd>
 8008f96:	4607      	mov	r7, r0
 8008f98:	10ad      	asrs	r5, r5, #2
 8008f9a:	d03d      	beq.n	8009018 <__pow5mult+0xa0>
 8008f9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f9e:	b97c      	cbnz	r4, 8008fc0 <__pow5mult+0x48>
 8008fa0:	2010      	movs	r0, #16
 8008fa2:	f7fc fd3b 	bl	8005a1c <malloc>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	6270      	str	r0, [r6, #36]	; 0x24
 8008faa:	b928      	cbnz	r0, 8008fb8 <__pow5mult+0x40>
 8008fac:	4b1d      	ldr	r3, [pc, #116]	; (8009024 <__pow5mult+0xac>)
 8008fae:	481e      	ldr	r0, [pc, #120]	; (8009028 <__pow5mult+0xb0>)
 8008fb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008fb4:	f000 fc3a 	bl	800982c <__assert_func>
 8008fb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fbc:	6004      	str	r4, [r0, #0]
 8008fbe:	60c4      	str	r4, [r0, #12]
 8008fc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008fc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fc8:	b94c      	cbnz	r4, 8008fde <__pow5mult+0x66>
 8008fca:	f240 2171 	movw	r1, #625	; 0x271
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f7ff ff12 	bl	8008df8 <__i2b>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fda:	4604      	mov	r4, r0
 8008fdc:	6003      	str	r3, [r0, #0]
 8008fde:	f04f 0900 	mov.w	r9, #0
 8008fe2:	07eb      	lsls	r3, r5, #31
 8008fe4:	d50a      	bpl.n	8008ffc <__pow5mult+0x84>
 8008fe6:	4639      	mov	r1, r7
 8008fe8:	4622      	mov	r2, r4
 8008fea:	4630      	mov	r0, r6
 8008fec:	f7ff ff1a 	bl	8008e24 <__multiply>
 8008ff0:	4639      	mov	r1, r7
 8008ff2:	4680      	mov	r8, r0
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	f7ff fdfd 	bl	8008bf4 <_Bfree>
 8008ffa:	4647      	mov	r7, r8
 8008ffc:	106d      	asrs	r5, r5, #1
 8008ffe:	d00b      	beq.n	8009018 <__pow5mult+0xa0>
 8009000:	6820      	ldr	r0, [r4, #0]
 8009002:	b938      	cbnz	r0, 8009014 <__pow5mult+0x9c>
 8009004:	4622      	mov	r2, r4
 8009006:	4621      	mov	r1, r4
 8009008:	4630      	mov	r0, r6
 800900a:	f7ff ff0b 	bl	8008e24 <__multiply>
 800900e:	6020      	str	r0, [r4, #0]
 8009010:	f8c0 9000 	str.w	r9, [r0]
 8009014:	4604      	mov	r4, r0
 8009016:	e7e4      	b.n	8008fe2 <__pow5mult+0x6a>
 8009018:	4638      	mov	r0, r7
 800901a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800901e:	bf00      	nop
 8009020:	0800a740 	.word	0x0800a740
 8009024:	0800a4f6 	.word	0x0800a4f6
 8009028:	0800a5f4 	.word	0x0800a5f4

0800902c <__lshift>:
 800902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009030:	460c      	mov	r4, r1
 8009032:	6849      	ldr	r1, [r1, #4]
 8009034:	6923      	ldr	r3, [r4, #16]
 8009036:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800903a:	68a3      	ldr	r3, [r4, #8]
 800903c:	4607      	mov	r7, r0
 800903e:	4691      	mov	r9, r2
 8009040:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009044:	f108 0601 	add.w	r6, r8, #1
 8009048:	42b3      	cmp	r3, r6
 800904a:	db0b      	blt.n	8009064 <__lshift+0x38>
 800904c:	4638      	mov	r0, r7
 800904e:	f7ff fd91 	bl	8008b74 <_Balloc>
 8009052:	4605      	mov	r5, r0
 8009054:	b948      	cbnz	r0, 800906a <__lshift+0x3e>
 8009056:	4602      	mov	r2, r0
 8009058:	4b2a      	ldr	r3, [pc, #168]	; (8009104 <__lshift+0xd8>)
 800905a:	482b      	ldr	r0, [pc, #172]	; (8009108 <__lshift+0xdc>)
 800905c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009060:	f000 fbe4 	bl	800982c <__assert_func>
 8009064:	3101      	adds	r1, #1
 8009066:	005b      	lsls	r3, r3, #1
 8009068:	e7ee      	b.n	8009048 <__lshift+0x1c>
 800906a:	2300      	movs	r3, #0
 800906c:	f100 0114 	add.w	r1, r0, #20
 8009070:	f100 0210 	add.w	r2, r0, #16
 8009074:	4618      	mov	r0, r3
 8009076:	4553      	cmp	r3, sl
 8009078:	db37      	blt.n	80090ea <__lshift+0xbe>
 800907a:	6920      	ldr	r0, [r4, #16]
 800907c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009080:	f104 0314 	add.w	r3, r4, #20
 8009084:	f019 091f 	ands.w	r9, r9, #31
 8009088:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800908c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009090:	d02f      	beq.n	80090f2 <__lshift+0xc6>
 8009092:	f1c9 0e20 	rsb	lr, r9, #32
 8009096:	468a      	mov	sl, r1
 8009098:	f04f 0c00 	mov.w	ip, #0
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	fa02 f209 	lsl.w	r2, r2, r9
 80090a2:	ea42 020c 	orr.w	r2, r2, ip
 80090a6:	f84a 2b04 	str.w	r2, [sl], #4
 80090aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ae:	4298      	cmp	r0, r3
 80090b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80090b4:	d8f2      	bhi.n	800909c <__lshift+0x70>
 80090b6:	1b03      	subs	r3, r0, r4
 80090b8:	3b15      	subs	r3, #21
 80090ba:	f023 0303 	bic.w	r3, r3, #3
 80090be:	3304      	adds	r3, #4
 80090c0:	f104 0215 	add.w	r2, r4, #21
 80090c4:	4290      	cmp	r0, r2
 80090c6:	bf38      	it	cc
 80090c8:	2304      	movcc	r3, #4
 80090ca:	f841 c003 	str.w	ip, [r1, r3]
 80090ce:	f1bc 0f00 	cmp.w	ip, #0
 80090d2:	d001      	beq.n	80090d8 <__lshift+0xac>
 80090d4:	f108 0602 	add.w	r6, r8, #2
 80090d8:	3e01      	subs	r6, #1
 80090da:	4638      	mov	r0, r7
 80090dc:	612e      	str	r6, [r5, #16]
 80090de:	4621      	mov	r1, r4
 80090e0:	f7ff fd88 	bl	8008bf4 <_Bfree>
 80090e4:	4628      	mov	r0, r5
 80090e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80090ee:	3301      	adds	r3, #1
 80090f0:	e7c1      	b.n	8009076 <__lshift+0x4a>
 80090f2:	3904      	subs	r1, #4
 80090f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80090fc:	4298      	cmp	r0, r3
 80090fe:	d8f9      	bhi.n	80090f4 <__lshift+0xc8>
 8009100:	e7ea      	b.n	80090d8 <__lshift+0xac>
 8009102:	bf00      	nop
 8009104:	0800a568 	.word	0x0800a568
 8009108:	0800a5f4 	.word	0x0800a5f4

0800910c <__mcmp>:
 800910c:	b530      	push	{r4, r5, lr}
 800910e:	6902      	ldr	r2, [r0, #16]
 8009110:	690c      	ldr	r4, [r1, #16]
 8009112:	1b12      	subs	r2, r2, r4
 8009114:	d10e      	bne.n	8009134 <__mcmp+0x28>
 8009116:	f100 0314 	add.w	r3, r0, #20
 800911a:	3114      	adds	r1, #20
 800911c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009120:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009124:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009128:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800912c:	42a5      	cmp	r5, r4
 800912e:	d003      	beq.n	8009138 <__mcmp+0x2c>
 8009130:	d305      	bcc.n	800913e <__mcmp+0x32>
 8009132:	2201      	movs	r2, #1
 8009134:	4610      	mov	r0, r2
 8009136:	bd30      	pop	{r4, r5, pc}
 8009138:	4283      	cmp	r3, r0
 800913a:	d3f3      	bcc.n	8009124 <__mcmp+0x18>
 800913c:	e7fa      	b.n	8009134 <__mcmp+0x28>
 800913e:	f04f 32ff 	mov.w	r2, #4294967295
 8009142:	e7f7      	b.n	8009134 <__mcmp+0x28>

08009144 <__mdiff>:
 8009144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	460c      	mov	r4, r1
 800914a:	4606      	mov	r6, r0
 800914c:	4611      	mov	r1, r2
 800914e:	4620      	mov	r0, r4
 8009150:	4690      	mov	r8, r2
 8009152:	f7ff ffdb 	bl	800910c <__mcmp>
 8009156:	1e05      	subs	r5, r0, #0
 8009158:	d110      	bne.n	800917c <__mdiff+0x38>
 800915a:	4629      	mov	r1, r5
 800915c:	4630      	mov	r0, r6
 800915e:	f7ff fd09 	bl	8008b74 <_Balloc>
 8009162:	b930      	cbnz	r0, 8009172 <__mdiff+0x2e>
 8009164:	4b3a      	ldr	r3, [pc, #232]	; (8009250 <__mdiff+0x10c>)
 8009166:	4602      	mov	r2, r0
 8009168:	f240 2132 	movw	r1, #562	; 0x232
 800916c:	4839      	ldr	r0, [pc, #228]	; (8009254 <__mdiff+0x110>)
 800916e:	f000 fb5d 	bl	800982c <__assert_func>
 8009172:	2301      	movs	r3, #1
 8009174:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917c:	bfa4      	itt	ge
 800917e:	4643      	movge	r3, r8
 8009180:	46a0      	movge	r8, r4
 8009182:	4630      	mov	r0, r6
 8009184:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009188:	bfa6      	itte	ge
 800918a:	461c      	movge	r4, r3
 800918c:	2500      	movge	r5, #0
 800918e:	2501      	movlt	r5, #1
 8009190:	f7ff fcf0 	bl	8008b74 <_Balloc>
 8009194:	b920      	cbnz	r0, 80091a0 <__mdiff+0x5c>
 8009196:	4b2e      	ldr	r3, [pc, #184]	; (8009250 <__mdiff+0x10c>)
 8009198:	4602      	mov	r2, r0
 800919a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800919e:	e7e5      	b.n	800916c <__mdiff+0x28>
 80091a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80091a4:	6926      	ldr	r6, [r4, #16]
 80091a6:	60c5      	str	r5, [r0, #12]
 80091a8:	f104 0914 	add.w	r9, r4, #20
 80091ac:	f108 0514 	add.w	r5, r8, #20
 80091b0:	f100 0e14 	add.w	lr, r0, #20
 80091b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80091b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80091bc:	f108 0210 	add.w	r2, r8, #16
 80091c0:	46f2      	mov	sl, lr
 80091c2:	2100      	movs	r1, #0
 80091c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80091c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80091cc:	fa1f f883 	uxth.w	r8, r3
 80091d0:	fa11 f18b 	uxtah	r1, r1, fp
 80091d4:	0c1b      	lsrs	r3, r3, #16
 80091d6:	eba1 0808 	sub.w	r8, r1, r8
 80091da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80091de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80091e2:	fa1f f888 	uxth.w	r8, r8
 80091e6:	1419      	asrs	r1, r3, #16
 80091e8:	454e      	cmp	r6, r9
 80091ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80091ee:	f84a 3b04 	str.w	r3, [sl], #4
 80091f2:	d8e7      	bhi.n	80091c4 <__mdiff+0x80>
 80091f4:	1b33      	subs	r3, r6, r4
 80091f6:	3b15      	subs	r3, #21
 80091f8:	f023 0303 	bic.w	r3, r3, #3
 80091fc:	3304      	adds	r3, #4
 80091fe:	3415      	adds	r4, #21
 8009200:	42a6      	cmp	r6, r4
 8009202:	bf38      	it	cc
 8009204:	2304      	movcc	r3, #4
 8009206:	441d      	add	r5, r3
 8009208:	4473      	add	r3, lr
 800920a:	469e      	mov	lr, r3
 800920c:	462e      	mov	r6, r5
 800920e:	4566      	cmp	r6, ip
 8009210:	d30e      	bcc.n	8009230 <__mdiff+0xec>
 8009212:	f10c 0203 	add.w	r2, ip, #3
 8009216:	1b52      	subs	r2, r2, r5
 8009218:	f022 0203 	bic.w	r2, r2, #3
 800921c:	3d03      	subs	r5, #3
 800921e:	45ac      	cmp	ip, r5
 8009220:	bf38      	it	cc
 8009222:	2200      	movcc	r2, #0
 8009224:	441a      	add	r2, r3
 8009226:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800922a:	b17b      	cbz	r3, 800924c <__mdiff+0x108>
 800922c:	6107      	str	r7, [r0, #16]
 800922e:	e7a3      	b.n	8009178 <__mdiff+0x34>
 8009230:	f856 8b04 	ldr.w	r8, [r6], #4
 8009234:	fa11 f288 	uxtah	r2, r1, r8
 8009238:	1414      	asrs	r4, r2, #16
 800923a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800923e:	b292      	uxth	r2, r2
 8009240:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009244:	f84e 2b04 	str.w	r2, [lr], #4
 8009248:	1421      	asrs	r1, r4, #16
 800924a:	e7e0      	b.n	800920e <__mdiff+0xca>
 800924c:	3f01      	subs	r7, #1
 800924e:	e7ea      	b.n	8009226 <__mdiff+0xe2>
 8009250:	0800a568 	.word	0x0800a568
 8009254:	0800a5f4 	.word	0x0800a5f4

08009258 <__ulp>:
 8009258:	b082      	sub	sp, #8
 800925a:	ed8d 0b00 	vstr	d0, [sp]
 800925e:	9b01      	ldr	r3, [sp, #4]
 8009260:	4912      	ldr	r1, [pc, #72]	; (80092ac <__ulp+0x54>)
 8009262:	4019      	ands	r1, r3
 8009264:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009268:	2900      	cmp	r1, #0
 800926a:	dd05      	ble.n	8009278 <__ulp+0x20>
 800926c:	2200      	movs	r2, #0
 800926e:	460b      	mov	r3, r1
 8009270:	ec43 2b10 	vmov	d0, r2, r3
 8009274:	b002      	add	sp, #8
 8009276:	4770      	bx	lr
 8009278:	4249      	negs	r1, r1
 800927a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800927e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009282:	f04f 0200 	mov.w	r2, #0
 8009286:	f04f 0300 	mov.w	r3, #0
 800928a:	da04      	bge.n	8009296 <__ulp+0x3e>
 800928c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009290:	fa41 f300 	asr.w	r3, r1, r0
 8009294:	e7ec      	b.n	8009270 <__ulp+0x18>
 8009296:	f1a0 0114 	sub.w	r1, r0, #20
 800929a:	291e      	cmp	r1, #30
 800929c:	bfda      	itte	le
 800929e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80092a2:	fa20 f101 	lsrle.w	r1, r0, r1
 80092a6:	2101      	movgt	r1, #1
 80092a8:	460a      	mov	r2, r1
 80092aa:	e7e1      	b.n	8009270 <__ulp+0x18>
 80092ac:	7ff00000 	.word	0x7ff00000

080092b0 <__b2d>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	6905      	ldr	r5, [r0, #16]
 80092b4:	f100 0714 	add.w	r7, r0, #20
 80092b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80092bc:	1f2e      	subs	r6, r5, #4
 80092be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80092c2:	4620      	mov	r0, r4
 80092c4:	f7ff fd48 	bl	8008d58 <__hi0bits>
 80092c8:	f1c0 0320 	rsb	r3, r0, #32
 80092cc:	280a      	cmp	r0, #10
 80092ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800934c <__b2d+0x9c>
 80092d2:	600b      	str	r3, [r1, #0]
 80092d4:	dc14      	bgt.n	8009300 <__b2d+0x50>
 80092d6:	f1c0 0e0b 	rsb	lr, r0, #11
 80092da:	fa24 f10e 	lsr.w	r1, r4, lr
 80092de:	42b7      	cmp	r7, r6
 80092e0:	ea41 030c 	orr.w	r3, r1, ip
 80092e4:	bf34      	ite	cc
 80092e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80092ea:	2100      	movcs	r1, #0
 80092ec:	3015      	adds	r0, #21
 80092ee:	fa04 f000 	lsl.w	r0, r4, r0
 80092f2:	fa21 f10e 	lsr.w	r1, r1, lr
 80092f6:	ea40 0201 	orr.w	r2, r0, r1
 80092fa:	ec43 2b10 	vmov	d0, r2, r3
 80092fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009300:	42b7      	cmp	r7, r6
 8009302:	bf3a      	itte	cc
 8009304:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009308:	f1a5 0608 	subcc.w	r6, r5, #8
 800930c:	2100      	movcs	r1, #0
 800930e:	380b      	subs	r0, #11
 8009310:	d017      	beq.n	8009342 <__b2d+0x92>
 8009312:	f1c0 0c20 	rsb	ip, r0, #32
 8009316:	fa04 f500 	lsl.w	r5, r4, r0
 800931a:	42be      	cmp	r6, r7
 800931c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009320:	ea45 0504 	orr.w	r5, r5, r4
 8009324:	bf8c      	ite	hi
 8009326:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800932a:	2400      	movls	r4, #0
 800932c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009330:	fa01 f000 	lsl.w	r0, r1, r0
 8009334:	fa24 f40c 	lsr.w	r4, r4, ip
 8009338:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800933c:	ea40 0204 	orr.w	r2, r0, r4
 8009340:	e7db      	b.n	80092fa <__b2d+0x4a>
 8009342:	ea44 030c 	orr.w	r3, r4, ip
 8009346:	460a      	mov	r2, r1
 8009348:	e7d7      	b.n	80092fa <__b2d+0x4a>
 800934a:	bf00      	nop
 800934c:	3ff00000 	.word	0x3ff00000

08009350 <__d2b>:
 8009350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009354:	4689      	mov	r9, r1
 8009356:	2101      	movs	r1, #1
 8009358:	ec57 6b10 	vmov	r6, r7, d0
 800935c:	4690      	mov	r8, r2
 800935e:	f7ff fc09 	bl	8008b74 <_Balloc>
 8009362:	4604      	mov	r4, r0
 8009364:	b930      	cbnz	r0, 8009374 <__d2b+0x24>
 8009366:	4602      	mov	r2, r0
 8009368:	4b25      	ldr	r3, [pc, #148]	; (8009400 <__d2b+0xb0>)
 800936a:	4826      	ldr	r0, [pc, #152]	; (8009404 <__d2b+0xb4>)
 800936c:	f240 310a 	movw	r1, #778	; 0x30a
 8009370:	f000 fa5c 	bl	800982c <__assert_func>
 8009374:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009378:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800937c:	bb35      	cbnz	r5, 80093cc <__d2b+0x7c>
 800937e:	2e00      	cmp	r6, #0
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	d028      	beq.n	80093d6 <__d2b+0x86>
 8009384:	4668      	mov	r0, sp
 8009386:	9600      	str	r6, [sp, #0]
 8009388:	f7ff fd06 	bl	8008d98 <__lo0bits>
 800938c:	9900      	ldr	r1, [sp, #0]
 800938e:	b300      	cbz	r0, 80093d2 <__d2b+0x82>
 8009390:	9a01      	ldr	r2, [sp, #4]
 8009392:	f1c0 0320 	rsb	r3, r0, #32
 8009396:	fa02 f303 	lsl.w	r3, r2, r3
 800939a:	430b      	orrs	r3, r1
 800939c:	40c2      	lsrs	r2, r0
 800939e:	6163      	str	r3, [r4, #20]
 80093a0:	9201      	str	r2, [sp, #4]
 80093a2:	9b01      	ldr	r3, [sp, #4]
 80093a4:	61a3      	str	r3, [r4, #24]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	bf14      	ite	ne
 80093aa:	2202      	movne	r2, #2
 80093ac:	2201      	moveq	r2, #1
 80093ae:	6122      	str	r2, [r4, #16]
 80093b0:	b1d5      	cbz	r5, 80093e8 <__d2b+0x98>
 80093b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093b6:	4405      	add	r5, r0
 80093b8:	f8c9 5000 	str.w	r5, [r9]
 80093bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093c0:	f8c8 0000 	str.w	r0, [r8]
 80093c4:	4620      	mov	r0, r4
 80093c6:	b003      	add	sp, #12
 80093c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093d0:	e7d5      	b.n	800937e <__d2b+0x2e>
 80093d2:	6161      	str	r1, [r4, #20]
 80093d4:	e7e5      	b.n	80093a2 <__d2b+0x52>
 80093d6:	a801      	add	r0, sp, #4
 80093d8:	f7ff fcde 	bl	8008d98 <__lo0bits>
 80093dc:	9b01      	ldr	r3, [sp, #4]
 80093de:	6163      	str	r3, [r4, #20]
 80093e0:	2201      	movs	r2, #1
 80093e2:	6122      	str	r2, [r4, #16]
 80093e4:	3020      	adds	r0, #32
 80093e6:	e7e3      	b.n	80093b0 <__d2b+0x60>
 80093e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093f0:	f8c9 0000 	str.w	r0, [r9]
 80093f4:	6918      	ldr	r0, [r3, #16]
 80093f6:	f7ff fcaf 	bl	8008d58 <__hi0bits>
 80093fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093fe:	e7df      	b.n	80093c0 <__d2b+0x70>
 8009400:	0800a568 	.word	0x0800a568
 8009404:	0800a5f4 	.word	0x0800a5f4

08009408 <__ratio>:
 8009408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	4688      	mov	r8, r1
 800940e:	4669      	mov	r1, sp
 8009410:	4681      	mov	r9, r0
 8009412:	f7ff ff4d 	bl	80092b0 <__b2d>
 8009416:	a901      	add	r1, sp, #4
 8009418:	4640      	mov	r0, r8
 800941a:	ec55 4b10 	vmov	r4, r5, d0
 800941e:	f7ff ff47 	bl	80092b0 <__b2d>
 8009422:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009426:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800942a:	eba3 0c02 	sub.w	ip, r3, r2
 800942e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009432:	1a9b      	subs	r3, r3, r2
 8009434:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009438:	ec51 0b10 	vmov	r0, r1, d0
 800943c:	2b00      	cmp	r3, #0
 800943e:	bfd6      	itet	le
 8009440:	460a      	movle	r2, r1
 8009442:	462a      	movgt	r2, r5
 8009444:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009448:	468b      	mov	fp, r1
 800944a:	462f      	mov	r7, r5
 800944c:	bfd4      	ite	le
 800944e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009452:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009456:	4620      	mov	r0, r4
 8009458:	ee10 2a10 	vmov	r2, s0
 800945c:	465b      	mov	r3, fp
 800945e:	4639      	mov	r1, r7
 8009460:	f7f7 f9f4 	bl	800084c <__aeabi_ddiv>
 8009464:	ec41 0b10 	vmov	d0, r0, r1
 8009468:	b003      	add	sp, #12
 800946a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800946e <__copybits>:
 800946e:	3901      	subs	r1, #1
 8009470:	b570      	push	{r4, r5, r6, lr}
 8009472:	1149      	asrs	r1, r1, #5
 8009474:	6914      	ldr	r4, [r2, #16]
 8009476:	3101      	adds	r1, #1
 8009478:	f102 0314 	add.w	r3, r2, #20
 800947c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009480:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009484:	1f05      	subs	r5, r0, #4
 8009486:	42a3      	cmp	r3, r4
 8009488:	d30c      	bcc.n	80094a4 <__copybits+0x36>
 800948a:	1aa3      	subs	r3, r4, r2
 800948c:	3b11      	subs	r3, #17
 800948e:	f023 0303 	bic.w	r3, r3, #3
 8009492:	3211      	adds	r2, #17
 8009494:	42a2      	cmp	r2, r4
 8009496:	bf88      	it	hi
 8009498:	2300      	movhi	r3, #0
 800949a:	4418      	add	r0, r3
 800949c:	2300      	movs	r3, #0
 800949e:	4288      	cmp	r0, r1
 80094a0:	d305      	bcc.n	80094ae <__copybits+0x40>
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
 80094a4:	f853 6b04 	ldr.w	r6, [r3], #4
 80094a8:	f845 6f04 	str.w	r6, [r5, #4]!
 80094ac:	e7eb      	b.n	8009486 <__copybits+0x18>
 80094ae:	f840 3b04 	str.w	r3, [r0], #4
 80094b2:	e7f4      	b.n	800949e <__copybits+0x30>

080094b4 <__any_on>:
 80094b4:	f100 0214 	add.w	r2, r0, #20
 80094b8:	6900      	ldr	r0, [r0, #16]
 80094ba:	114b      	asrs	r3, r1, #5
 80094bc:	4298      	cmp	r0, r3
 80094be:	b510      	push	{r4, lr}
 80094c0:	db11      	blt.n	80094e6 <__any_on+0x32>
 80094c2:	dd0a      	ble.n	80094da <__any_on+0x26>
 80094c4:	f011 011f 	ands.w	r1, r1, #31
 80094c8:	d007      	beq.n	80094da <__any_on+0x26>
 80094ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094ce:	fa24 f001 	lsr.w	r0, r4, r1
 80094d2:	fa00 f101 	lsl.w	r1, r0, r1
 80094d6:	428c      	cmp	r4, r1
 80094d8:	d10b      	bne.n	80094f2 <__any_on+0x3e>
 80094da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094de:	4293      	cmp	r3, r2
 80094e0:	d803      	bhi.n	80094ea <__any_on+0x36>
 80094e2:	2000      	movs	r0, #0
 80094e4:	bd10      	pop	{r4, pc}
 80094e6:	4603      	mov	r3, r0
 80094e8:	e7f7      	b.n	80094da <__any_on+0x26>
 80094ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094ee:	2900      	cmp	r1, #0
 80094f0:	d0f5      	beq.n	80094de <__any_on+0x2a>
 80094f2:	2001      	movs	r0, #1
 80094f4:	e7f6      	b.n	80094e4 <__any_on+0x30>

080094f6 <_calloc_r>:
 80094f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094f8:	fba1 2402 	umull	r2, r4, r1, r2
 80094fc:	b94c      	cbnz	r4, 8009512 <_calloc_r+0x1c>
 80094fe:	4611      	mov	r1, r2
 8009500:	9201      	str	r2, [sp, #4]
 8009502:	f7fc fb07 	bl	8005b14 <_malloc_r>
 8009506:	9a01      	ldr	r2, [sp, #4]
 8009508:	4605      	mov	r5, r0
 800950a:	b930      	cbnz	r0, 800951a <_calloc_r+0x24>
 800950c:	4628      	mov	r0, r5
 800950e:	b003      	add	sp, #12
 8009510:	bd30      	pop	{r4, r5, pc}
 8009512:	220c      	movs	r2, #12
 8009514:	6002      	str	r2, [r0, #0]
 8009516:	2500      	movs	r5, #0
 8009518:	e7f8      	b.n	800950c <_calloc_r+0x16>
 800951a:	4621      	mov	r1, r4
 800951c:	f7fc fa86 	bl	8005a2c <memset>
 8009520:	e7f4      	b.n	800950c <_calloc_r+0x16>

08009522 <__ssputs_r>:
 8009522:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009526:	688e      	ldr	r6, [r1, #8]
 8009528:	429e      	cmp	r6, r3
 800952a:	4682      	mov	sl, r0
 800952c:	460c      	mov	r4, r1
 800952e:	4690      	mov	r8, r2
 8009530:	461f      	mov	r7, r3
 8009532:	d838      	bhi.n	80095a6 <__ssputs_r+0x84>
 8009534:	898a      	ldrh	r2, [r1, #12]
 8009536:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800953a:	d032      	beq.n	80095a2 <__ssputs_r+0x80>
 800953c:	6825      	ldr	r5, [r4, #0]
 800953e:	6909      	ldr	r1, [r1, #16]
 8009540:	eba5 0901 	sub.w	r9, r5, r1
 8009544:	6965      	ldr	r5, [r4, #20]
 8009546:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800954a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800954e:	3301      	adds	r3, #1
 8009550:	444b      	add	r3, r9
 8009552:	106d      	asrs	r5, r5, #1
 8009554:	429d      	cmp	r5, r3
 8009556:	bf38      	it	cc
 8009558:	461d      	movcc	r5, r3
 800955a:	0553      	lsls	r3, r2, #21
 800955c:	d531      	bpl.n	80095c2 <__ssputs_r+0xa0>
 800955e:	4629      	mov	r1, r5
 8009560:	f7fc fad8 	bl	8005b14 <_malloc_r>
 8009564:	4606      	mov	r6, r0
 8009566:	b950      	cbnz	r0, 800957e <__ssputs_r+0x5c>
 8009568:	230c      	movs	r3, #12
 800956a:	f8ca 3000 	str.w	r3, [sl]
 800956e:	89a3      	ldrh	r3, [r4, #12]
 8009570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009574:	81a3      	strh	r3, [r4, #12]
 8009576:	f04f 30ff 	mov.w	r0, #4294967295
 800957a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957e:	6921      	ldr	r1, [r4, #16]
 8009580:	464a      	mov	r2, r9
 8009582:	f7ff fadd 	bl	8008b40 <memcpy>
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800958c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009590:	81a3      	strh	r3, [r4, #12]
 8009592:	6126      	str	r6, [r4, #16]
 8009594:	6165      	str	r5, [r4, #20]
 8009596:	444e      	add	r6, r9
 8009598:	eba5 0509 	sub.w	r5, r5, r9
 800959c:	6026      	str	r6, [r4, #0]
 800959e:	60a5      	str	r5, [r4, #8]
 80095a0:	463e      	mov	r6, r7
 80095a2:	42be      	cmp	r6, r7
 80095a4:	d900      	bls.n	80095a8 <__ssputs_r+0x86>
 80095a6:	463e      	mov	r6, r7
 80095a8:	6820      	ldr	r0, [r4, #0]
 80095aa:	4632      	mov	r2, r6
 80095ac:	4641      	mov	r1, r8
 80095ae:	f000 f970 	bl	8009892 <memmove>
 80095b2:	68a3      	ldr	r3, [r4, #8]
 80095b4:	1b9b      	subs	r3, r3, r6
 80095b6:	60a3      	str	r3, [r4, #8]
 80095b8:	6823      	ldr	r3, [r4, #0]
 80095ba:	4433      	add	r3, r6
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	2000      	movs	r0, #0
 80095c0:	e7db      	b.n	800957a <__ssputs_r+0x58>
 80095c2:	462a      	mov	r2, r5
 80095c4:	f000 f97f 	bl	80098c6 <_realloc_r>
 80095c8:	4606      	mov	r6, r0
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d1e1      	bne.n	8009592 <__ssputs_r+0x70>
 80095ce:	6921      	ldr	r1, [r4, #16]
 80095d0:	4650      	mov	r0, sl
 80095d2:	f7fc fa33 	bl	8005a3c <_free_r>
 80095d6:	e7c7      	b.n	8009568 <__ssputs_r+0x46>

080095d8 <_svfiprintf_r>:
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	4698      	mov	r8, r3
 80095de:	898b      	ldrh	r3, [r1, #12]
 80095e0:	061b      	lsls	r3, r3, #24
 80095e2:	b09d      	sub	sp, #116	; 0x74
 80095e4:	4607      	mov	r7, r0
 80095e6:	460d      	mov	r5, r1
 80095e8:	4614      	mov	r4, r2
 80095ea:	d50e      	bpl.n	800960a <_svfiprintf_r+0x32>
 80095ec:	690b      	ldr	r3, [r1, #16]
 80095ee:	b963      	cbnz	r3, 800960a <_svfiprintf_r+0x32>
 80095f0:	2140      	movs	r1, #64	; 0x40
 80095f2:	f7fc fa8f 	bl	8005b14 <_malloc_r>
 80095f6:	6028      	str	r0, [r5, #0]
 80095f8:	6128      	str	r0, [r5, #16]
 80095fa:	b920      	cbnz	r0, 8009606 <_svfiprintf_r+0x2e>
 80095fc:	230c      	movs	r3, #12
 80095fe:	603b      	str	r3, [r7, #0]
 8009600:	f04f 30ff 	mov.w	r0, #4294967295
 8009604:	e0d1      	b.n	80097aa <_svfiprintf_r+0x1d2>
 8009606:	2340      	movs	r3, #64	; 0x40
 8009608:	616b      	str	r3, [r5, #20]
 800960a:	2300      	movs	r3, #0
 800960c:	9309      	str	r3, [sp, #36]	; 0x24
 800960e:	2320      	movs	r3, #32
 8009610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009614:	f8cd 800c 	str.w	r8, [sp, #12]
 8009618:	2330      	movs	r3, #48	; 0x30
 800961a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80097c4 <_svfiprintf_r+0x1ec>
 800961e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009622:	f04f 0901 	mov.w	r9, #1
 8009626:	4623      	mov	r3, r4
 8009628:	469a      	mov	sl, r3
 800962a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800962e:	b10a      	cbz	r2, 8009634 <_svfiprintf_r+0x5c>
 8009630:	2a25      	cmp	r2, #37	; 0x25
 8009632:	d1f9      	bne.n	8009628 <_svfiprintf_r+0x50>
 8009634:	ebba 0b04 	subs.w	fp, sl, r4
 8009638:	d00b      	beq.n	8009652 <_svfiprintf_r+0x7a>
 800963a:	465b      	mov	r3, fp
 800963c:	4622      	mov	r2, r4
 800963e:	4629      	mov	r1, r5
 8009640:	4638      	mov	r0, r7
 8009642:	f7ff ff6e 	bl	8009522 <__ssputs_r>
 8009646:	3001      	adds	r0, #1
 8009648:	f000 80aa 	beq.w	80097a0 <_svfiprintf_r+0x1c8>
 800964c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800964e:	445a      	add	r2, fp
 8009650:	9209      	str	r2, [sp, #36]	; 0x24
 8009652:	f89a 3000 	ldrb.w	r3, [sl]
 8009656:	2b00      	cmp	r3, #0
 8009658:	f000 80a2 	beq.w	80097a0 <_svfiprintf_r+0x1c8>
 800965c:	2300      	movs	r3, #0
 800965e:	f04f 32ff 	mov.w	r2, #4294967295
 8009662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009666:	f10a 0a01 	add.w	sl, sl, #1
 800966a:	9304      	str	r3, [sp, #16]
 800966c:	9307      	str	r3, [sp, #28]
 800966e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009672:	931a      	str	r3, [sp, #104]	; 0x68
 8009674:	4654      	mov	r4, sl
 8009676:	2205      	movs	r2, #5
 8009678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800967c:	4851      	ldr	r0, [pc, #324]	; (80097c4 <_svfiprintf_r+0x1ec>)
 800967e:	f7f6 fdaf 	bl	80001e0 <memchr>
 8009682:	9a04      	ldr	r2, [sp, #16]
 8009684:	b9d8      	cbnz	r0, 80096be <_svfiprintf_r+0xe6>
 8009686:	06d0      	lsls	r0, r2, #27
 8009688:	bf44      	itt	mi
 800968a:	2320      	movmi	r3, #32
 800968c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009690:	0711      	lsls	r1, r2, #28
 8009692:	bf44      	itt	mi
 8009694:	232b      	movmi	r3, #43	; 0x2b
 8009696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800969a:	f89a 3000 	ldrb.w	r3, [sl]
 800969e:	2b2a      	cmp	r3, #42	; 0x2a
 80096a0:	d015      	beq.n	80096ce <_svfiprintf_r+0xf6>
 80096a2:	9a07      	ldr	r2, [sp, #28]
 80096a4:	4654      	mov	r4, sl
 80096a6:	2000      	movs	r0, #0
 80096a8:	f04f 0c0a 	mov.w	ip, #10
 80096ac:	4621      	mov	r1, r4
 80096ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096b2:	3b30      	subs	r3, #48	; 0x30
 80096b4:	2b09      	cmp	r3, #9
 80096b6:	d94e      	bls.n	8009756 <_svfiprintf_r+0x17e>
 80096b8:	b1b0      	cbz	r0, 80096e8 <_svfiprintf_r+0x110>
 80096ba:	9207      	str	r2, [sp, #28]
 80096bc:	e014      	b.n	80096e8 <_svfiprintf_r+0x110>
 80096be:	eba0 0308 	sub.w	r3, r0, r8
 80096c2:	fa09 f303 	lsl.w	r3, r9, r3
 80096c6:	4313      	orrs	r3, r2
 80096c8:	9304      	str	r3, [sp, #16]
 80096ca:	46a2      	mov	sl, r4
 80096cc:	e7d2      	b.n	8009674 <_svfiprintf_r+0x9c>
 80096ce:	9b03      	ldr	r3, [sp, #12]
 80096d0:	1d19      	adds	r1, r3, #4
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	9103      	str	r1, [sp, #12]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	bfbb      	ittet	lt
 80096da:	425b      	neglt	r3, r3
 80096dc:	f042 0202 	orrlt.w	r2, r2, #2
 80096e0:	9307      	strge	r3, [sp, #28]
 80096e2:	9307      	strlt	r3, [sp, #28]
 80096e4:	bfb8      	it	lt
 80096e6:	9204      	strlt	r2, [sp, #16]
 80096e8:	7823      	ldrb	r3, [r4, #0]
 80096ea:	2b2e      	cmp	r3, #46	; 0x2e
 80096ec:	d10c      	bne.n	8009708 <_svfiprintf_r+0x130>
 80096ee:	7863      	ldrb	r3, [r4, #1]
 80096f0:	2b2a      	cmp	r3, #42	; 0x2a
 80096f2:	d135      	bne.n	8009760 <_svfiprintf_r+0x188>
 80096f4:	9b03      	ldr	r3, [sp, #12]
 80096f6:	1d1a      	adds	r2, r3, #4
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	9203      	str	r2, [sp, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	bfb8      	it	lt
 8009700:	f04f 33ff 	movlt.w	r3, #4294967295
 8009704:	3402      	adds	r4, #2
 8009706:	9305      	str	r3, [sp, #20]
 8009708:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097d4 <_svfiprintf_r+0x1fc>
 800970c:	7821      	ldrb	r1, [r4, #0]
 800970e:	2203      	movs	r2, #3
 8009710:	4650      	mov	r0, sl
 8009712:	f7f6 fd65 	bl	80001e0 <memchr>
 8009716:	b140      	cbz	r0, 800972a <_svfiprintf_r+0x152>
 8009718:	2340      	movs	r3, #64	; 0x40
 800971a:	eba0 000a 	sub.w	r0, r0, sl
 800971e:	fa03 f000 	lsl.w	r0, r3, r0
 8009722:	9b04      	ldr	r3, [sp, #16]
 8009724:	4303      	orrs	r3, r0
 8009726:	3401      	adds	r4, #1
 8009728:	9304      	str	r3, [sp, #16]
 800972a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800972e:	4826      	ldr	r0, [pc, #152]	; (80097c8 <_svfiprintf_r+0x1f0>)
 8009730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009734:	2206      	movs	r2, #6
 8009736:	f7f6 fd53 	bl	80001e0 <memchr>
 800973a:	2800      	cmp	r0, #0
 800973c:	d038      	beq.n	80097b0 <_svfiprintf_r+0x1d8>
 800973e:	4b23      	ldr	r3, [pc, #140]	; (80097cc <_svfiprintf_r+0x1f4>)
 8009740:	bb1b      	cbnz	r3, 800978a <_svfiprintf_r+0x1b2>
 8009742:	9b03      	ldr	r3, [sp, #12]
 8009744:	3307      	adds	r3, #7
 8009746:	f023 0307 	bic.w	r3, r3, #7
 800974a:	3308      	adds	r3, #8
 800974c:	9303      	str	r3, [sp, #12]
 800974e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009750:	4433      	add	r3, r6
 8009752:	9309      	str	r3, [sp, #36]	; 0x24
 8009754:	e767      	b.n	8009626 <_svfiprintf_r+0x4e>
 8009756:	fb0c 3202 	mla	r2, ip, r2, r3
 800975a:	460c      	mov	r4, r1
 800975c:	2001      	movs	r0, #1
 800975e:	e7a5      	b.n	80096ac <_svfiprintf_r+0xd4>
 8009760:	2300      	movs	r3, #0
 8009762:	3401      	adds	r4, #1
 8009764:	9305      	str	r3, [sp, #20]
 8009766:	4619      	mov	r1, r3
 8009768:	f04f 0c0a 	mov.w	ip, #10
 800976c:	4620      	mov	r0, r4
 800976e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009772:	3a30      	subs	r2, #48	; 0x30
 8009774:	2a09      	cmp	r2, #9
 8009776:	d903      	bls.n	8009780 <_svfiprintf_r+0x1a8>
 8009778:	2b00      	cmp	r3, #0
 800977a:	d0c5      	beq.n	8009708 <_svfiprintf_r+0x130>
 800977c:	9105      	str	r1, [sp, #20]
 800977e:	e7c3      	b.n	8009708 <_svfiprintf_r+0x130>
 8009780:	fb0c 2101 	mla	r1, ip, r1, r2
 8009784:	4604      	mov	r4, r0
 8009786:	2301      	movs	r3, #1
 8009788:	e7f0      	b.n	800976c <_svfiprintf_r+0x194>
 800978a:	ab03      	add	r3, sp, #12
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	462a      	mov	r2, r5
 8009790:	4b0f      	ldr	r3, [pc, #60]	; (80097d0 <_svfiprintf_r+0x1f8>)
 8009792:	a904      	add	r1, sp, #16
 8009794:	4638      	mov	r0, r7
 8009796:	f7fc fad1 	bl	8005d3c <_printf_float>
 800979a:	1c42      	adds	r2, r0, #1
 800979c:	4606      	mov	r6, r0
 800979e:	d1d6      	bne.n	800974e <_svfiprintf_r+0x176>
 80097a0:	89ab      	ldrh	r3, [r5, #12]
 80097a2:	065b      	lsls	r3, r3, #25
 80097a4:	f53f af2c 	bmi.w	8009600 <_svfiprintf_r+0x28>
 80097a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097aa:	b01d      	add	sp, #116	; 0x74
 80097ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b0:	ab03      	add	r3, sp, #12
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	462a      	mov	r2, r5
 80097b6:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <_svfiprintf_r+0x1f8>)
 80097b8:	a904      	add	r1, sp, #16
 80097ba:	4638      	mov	r0, r7
 80097bc:	f7fc fd62 	bl	8006284 <_printf_i>
 80097c0:	e7eb      	b.n	800979a <_svfiprintf_r+0x1c2>
 80097c2:	bf00      	nop
 80097c4:	0800a74c 	.word	0x0800a74c
 80097c8:	0800a756 	.word	0x0800a756
 80097cc:	08005d3d 	.word	0x08005d3d
 80097d0:	08009523 	.word	0x08009523
 80097d4:	0800a752 	.word	0x0800a752

080097d8 <nan>:
 80097d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80097e0 <nan+0x8>
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	00000000 	.word	0x00000000
 80097e4:	7ff80000 	.word	0x7ff80000

080097e8 <strncmp>:
 80097e8:	b510      	push	{r4, lr}
 80097ea:	b17a      	cbz	r2, 800980c <strncmp+0x24>
 80097ec:	4603      	mov	r3, r0
 80097ee:	3901      	subs	r1, #1
 80097f0:	1884      	adds	r4, r0, r2
 80097f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80097f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80097fa:	4290      	cmp	r0, r2
 80097fc:	d101      	bne.n	8009802 <strncmp+0x1a>
 80097fe:	42a3      	cmp	r3, r4
 8009800:	d101      	bne.n	8009806 <strncmp+0x1e>
 8009802:	1a80      	subs	r0, r0, r2
 8009804:	bd10      	pop	{r4, pc}
 8009806:	2800      	cmp	r0, #0
 8009808:	d1f3      	bne.n	80097f2 <strncmp+0xa>
 800980a:	e7fa      	b.n	8009802 <strncmp+0x1a>
 800980c:	4610      	mov	r0, r2
 800980e:	e7f9      	b.n	8009804 <strncmp+0x1c>

08009810 <__ascii_wctomb>:
 8009810:	b149      	cbz	r1, 8009826 <__ascii_wctomb+0x16>
 8009812:	2aff      	cmp	r2, #255	; 0xff
 8009814:	bf85      	ittet	hi
 8009816:	238a      	movhi	r3, #138	; 0x8a
 8009818:	6003      	strhi	r3, [r0, #0]
 800981a:	700a      	strbls	r2, [r1, #0]
 800981c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009820:	bf98      	it	ls
 8009822:	2001      	movls	r0, #1
 8009824:	4770      	bx	lr
 8009826:	4608      	mov	r0, r1
 8009828:	4770      	bx	lr
	...

0800982c <__assert_func>:
 800982c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800982e:	4614      	mov	r4, r2
 8009830:	461a      	mov	r2, r3
 8009832:	4b09      	ldr	r3, [pc, #36]	; (8009858 <__assert_func+0x2c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4605      	mov	r5, r0
 8009838:	68d8      	ldr	r0, [r3, #12]
 800983a:	b14c      	cbz	r4, 8009850 <__assert_func+0x24>
 800983c:	4b07      	ldr	r3, [pc, #28]	; (800985c <__assert_func+0x30>)
 800983e:	9100      	str	r1, [sp, #0]
 8009840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009844:	4906      	ldr	r1, [pc, #24]	; (8009860 <__assert_func+0x34>)
 8009846:	462b      	mov	r3, r5
 8009848:	f000 f80e 	bl	8009868 <fiprintf>
 800984c:	f7fc f8b4 	bl	80059b8 <abort>
 8009850:	4b04      	ldr	r3, [pc, #16]	; (8009864 <__assert_func+0x38>)
 8009852:	461c      	mov	r4, r3
 8009854:	e7f3      	b.n	800983e <__assert_func+0x12>
 8009856:	bf00      	nop
 8009858:	2000000c 	.word	0x2000000c
 800985c:	0800a75d 	.word	0x0800a75d
 8009860:	0800a76a 	.word	0x0800a76a
 8009864:	0800a798 	.word	0x0800a798

08009868 <fiprintf>:
 8009868:	b40e      	push	{r1, r2, r3}
 800986a:	b503      	push	{r0, r1, lr}
 800986c:	4601      	mov	r1, r0
 800986e:	ab03      	add	r3, sp, #12
 8009870:	4805      	ldr	r0, [pc, #20]	; (8009888 <fiprintf+0x20>)
 8009872:	f853 2b04 	ldr.w	r2, [r3], #4
 8009876:	6800      	ldr	r0, [r0, #0]
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	f000 f87d 	bl	8009978 <_vfiprintf_r>
 800987e:	b002      	add	sp, #8
 8009880:	f85d eb04 	ldr.w	lr, [sp], #4
 8009884:	b003      	add	sp, #12
 8009886:	4770      	bx	lr
 8009888:	2000000c 	.word	0x2000000c

0800988c <__retarget_lock_init_recursive>:
 800988c:	4770      	bx	lr

0800988e <__retarget_lock_acquire_recursive>:
 800988e:	4770      	bx	lr

08009890 <__retarget_lock_release_recursive>:
 8009890:	4770      	bx	lr

08009892 <memmove>:
 8009892:	4288      	cmp	r0, r1
 8009894:	b510      	push	{r4, lr}
 8009896:	eb01 0402 	add.w	r4, r1, r2
 800989a:	d902      	bls.n	80098a2 <memmove+0x10>
 800989c:	4284      	cmp	r4, r0
 800989e:	4623      	mov	r3, r4
 80098a0:	d807      	bhi.n	80098b2 <memmove+0x20>
 80098a2:	1e43      	subs	r3, r0, #1
 80098a4:	42a1      	cmp	r1, r4
 80098a6:	d008      	beq.n	80098ba <memmove+0x28>
 80098a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098b0:	e7f8      	b.n	80098a4 <memmove+0x12>
 80098b2:	4402      	add	r2, r0
 80098b4:	4601      	mov	r1, r0
 80098b6:	428a      	cmp	r2, r1
 80098b8:	d100      	bne.n	80098bc <memmove+0x2a>
 80098ba:	bd10      	pop	{r4, pc}
 80098bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098c4:	e7f7      	b.n	80098b6 <memmove+0x24>

080098c6 <_realloc_r>:
 80098c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ca:	4680      	mov	r8, r0
 80098cc:	4614      	mov	r4, r2
 80098ce:	460e      	mov	r6, r1
 80098d0:	b921      	cbnz	r1, 80098dc <_realloc_r+0x16>
 80098d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098d6:	4611      	mov	r1, r2
 80098d8:	f7fc b91c 	b.w	8005b14 <_malloc_r>
 80098dc:	b92a      	cbnz	r2, 80098ea <_realloc_r+0x24>
 80098de:	f7fc f8ad 	bl	8005a3c <_free_r>
 80098e2:	4625      	mov	r5, r4
 80098e4:	4628      	mov	r0, r5
 80098e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ea:	f000 fc51 	bl	800a190 <_malloc_usable_size_r>
 80098ee:	4284      	cmp	r4, r0
 80098f0:	4607      	mov	r7, r0
 80098f2:	d802      	bhi.n	80098fa <_realloc_r+0x34>
 80098f4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098f8:	d812      	bhi.n	8009920 <_realloc_r+0x5a>
 80098fa:	4621      	mov	r1, r4
 80098fc:	4640      	mov	r0, r8
 80098fe:	f7fc f909 	bl	8005b14 <_malloc_r>
 8009902:	4605      	mov	r5, r0
 8009904:	2800      	cmp	r0, #0
 8009906:	d0ed      	beq.n	80098e4 <_realloc_r+0x1e>
 8009908:	42bc      	cmp	r4, r7
 800990a:	4622      	mov	r2, r4
 800990c:	4631      	mov	r1, r6
 800990e:	bf28      	it	cs
 8009910:	463a      	movcs	r2, r7
 8009912:	f7ff f915 	bl	8008b40 <memcpy>
 8009916:	4631      	mov	r1, r6
 8009918:	4640      	mov	r0, r8
 800991a:	f7fc f88f 	bl	8005a3c <_free_r>
 800991e:	e7e1      	b.n	80098e4 <_realloc_r+0x1e>
 8009920:	4635      	mov	r5, r6
 8009922:	e7df      	b.n	80098e4 <_realloc_r+0x1e>

08009924 <__sfputc_r>:
 8009924:	6893      	ldr	r3, [r2, #8]
 8009926:	3b01      	subs	r3, #1
 8009928:	2b00      	cmp	r3, #0
 800992a:	b410      	push	{r4}
 800992c:	6093      	str	r3, [r2, #8]
 800992e:	da08      	bge.n	8009942 <__sfputc_r+0x1e>
 8009930:	6994      	ldr	r4, [r2, #24]
 8009932:	42a3      	cmp	r3, r4
 8009934:	db01      	blt.n	800993a <__sfputc_r+0x16>
 8009936:	290a      	cmp	r1, #10
 8009938:	d103      	bne.n	8009942 <__sfputc_r+0x1e>
 800993a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800993e:	f000 b94b 	b.w	8009bd8 <__swbuf_r>
 8009942:	6813      	ldr	r3, [r2, #0]
 8009944:	1c58      	adds	r0, r3, #1
 8009946:	6010      	str	r0, [r2, #0]
 8009948:	7019      	strb	r1, [r3, #0]
 800994a:	4608      	mov	r0, r1
 800994c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009950:	4770      	bx	lr

08009952 <__sfputs_r>:
 8009952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009954:	4606      	mov	r6, r0
 8009956:	460f      	mov	r7, r1
 8009958:	4614      	mov	r4, r2
 800995a:	18d5      	adds	r5, r2, r3
 800995c:	42ac      	cmp	r4, r5
 800995e:	d101      	bne.n	8009964 <__sfputs_r+0x12>
 8009960:	2000      	movs	r0, #0
 8009962:	e007      	b.n	8009974 <__sfputs_r+0x22>
 8009964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009968:	463a      	mov	r2, r7
 800996a:	4630      	mov	r0, r6
 800996c:	f7ff ffda 	bl	8009924 <__sfputc_r>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d1f3      	bne.n	800995c <__sfputs_r+0xa>
 8009974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009978 <_vfiprintf_r>:
 8009978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997c:	460d      	mov	r5, r1
 800997e:	b09d      	sub	sp, #116	; 0x74
 8009980:	4614      	mov	r4, r2
 8009982:	4698      	mov	r8, r3
 8009984:	4606      	mov	r6, r0
 8009986:	b118      	cbz	r0, 8009990 <_vfiprintf_r+0x18>
 8009988:	6983      	ldr	r3, [r0, #24]
 800998a:	b90b      	cbnz	r3, 8009990 <_vfiprintf_r+0x18>
 800998c:	f000 fafe 	bl	8009f8c <__sinit>
 8009990:	4b89      	ldr	r3, [pc, #548]	; (8009bb8 <_vfiprintf_r+0x240>)
 8009992:	429d      	cmp	r5, r3
 8009994:	d11b      	bne.n	80099ce <_vfiprintf_r+0x56>
 8009996:	6875      	ldr	r5, [r6, #4]
 8009998:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800999a:	07d9      	lsls	r1, r3, #31
 800999c:	d405      	bmi.n	80099aa <_vfiprintf_r+0x32>
 800999e:	89ab      	ldrh	r3, [r5, #12]
 80099a0:	059a      	lsls	r2, r3, #22
 80099a2:	d402      	bmi.n	80099aa <_vfiprintf_r+0x32>
 80099a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099a6:	f7ff ff72 	bl	800988e <__retarget_lock_acquire_recursive>
 80099aa:	89ab      	ldrh	r3, [r5, #12]
 80099ac:	071b      	lsls	r3, r3, #28
 80099ae:	d501      	bpl.n	80099b4 <_vfiprintf_r+0x3c>
 80099b0:	692b      	ldr	r3, [r5, #16]
 80099b2:	b9eb      	cbnz	r3, 80099f0 <_vfiprintf_r+0x78>
 80099b4:	4629      	mov	r1, r5
 80099b6:	4630      	mov	r0, r6
 80099b8:	f000 f960 	bl	8009c7c <__swsetup_r>
 80099bc:	b1c0      	cbz	r0, 80099f0 <_vfiprintf_r+0x78>
 80099be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099c0:	07dc      	lsls	r4, r3, #31
 80099c2:	d50e      	bpl.n	80099e2 <_vfiprintf_r+0x6a>
 80099c4:	f04f 30ff 	mov.w	r0, #4294967295
 80099c8:	b01d      	add	sp, #116	; 0x74
 80099ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ce:	4b7b      	ldr	r3, [pc, #492]	; (8009bbc <_vfiprintf_r+0x244>)
 80099d0:	429d      	cmp	r5, r3
 80099d2:	d101      	bne.n	80099d8 <_vfiprintf_r+0x60>
 80099d4:	68b5      	ldr	r5, [r6, #8]
 80099d6:	e7df      	b.n	8009998 <_vfiprintf_r+0x20>
 80099d8:	4b79      	ldr	r3, [pc, #484]	; (8009bc0 <_vfiprintf_r+0x248>)
 80099da:	429d      	cmp	r5, r3
 80099dc:	bf08      	it	eq
 80099de:	68f5      	ldreq	r5, [r6, #12]
 80099e0:	e7da      	b.n	8009998 <_vfiprintf_r+0x20>
 80099e2:	89ab      	ldrh	r3, [r5, #12]
 80099e4:	0598      	lsls	r0, r3, #22
 80099e6:	d4ed      	bmi.n	80099c4 <_vfiprintf_r+0x4c>
 80099e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099ea:	f7ff ff51 	bl	8009890 <__retarget_lock_release_recursive>
 80099ee:	e7e9      	b.n	80099c4 <_vfiprintf_r+0x4c>
 80099f0:	2300      	movs	r3, #0
 80099f2:	9309      	str	r3, [sp, #36]	; 0x24
 80099f4:	2320      	movs	r3, #32
 80099f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80099fe:	2330      	movs	r3, #48	; 0x30
 8009a00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009bc4 <_vfiprintf_r+0x24c>
 8009a04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a08:	f04f 0901 	mov.w	r9, #1
 8009a0c:	4623      	mov	r3, r4
 8009a0e:	469a      	mov	sl, r3
 8009a10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a14:	b10a      	cbz	r2, 8009a1a <_vfiprintf_r+0xa2>
 8009a16:	2a25      	cmp	r2, #37	; 0x25
 8009a18:	d1f9      	bne.n	8009a0e <_vfiprintf_r+0x96>
 8009a1a:	ebba 0b04 	subs.w	fp, sl, r4
 8009a1e:	d00b      	beq.n	8009a38 <_vfiprintf_r+0xc0>
 8009a20:	465b      	mov	r3, fp
 8009a22:	4622      	mov	r2, r4
 8009a24:	4629      	mov	r1, r5
 8009a26:	4630      	mov	r0, r6
 8009a28:	f7ff ff93 	bl	8009952 <__sfputs_r>
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	f000 80aa 	beq.w	8009b86 <_vfiprintf_r+0x20e>
 8009a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a34:	445a      	add	r2, fp
 8009a36:	9209      	str	r2, [sp, #36]	; 0x24
 8009a38:	f89a 3000 	ldrb.w	r3, [sl]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 80a2 	beq.w	8009b86 <_vfiprintf_r+0x20e>
 8009a42:	2300      	movs	r3, #0
 8009a44:	f04f 32ff 	mov.w	r2, #4294967295
 8009a48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a4c:	f10a 0a01 	add.w	sl, sl, #1
 8009a50:	9304      	str	r3, [sp, #16]
 8009a52:	9307      	str	r3, [sp, #28]
 8009a54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a58:	931a      	str	r3, [sp, #104]	; 0x68
 8009a5a:	4654      	mov	r4, sl
 8009a5c:	2205      	movs	r2, #5
 8009a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a62:	4858      	ldr	r0, [pc, #352]	; (8009bc4 <_vfiprintf_r+0x24c>)
 8009a64:	f7f6 fbbc 	bl	80001e0 <memchr>
 8009a68:	9a04      	ldr	r2, [sp, #16]
 8009a6a:	b9d8      	cbnz	r0, 8009aa4 <_vfiprintf_r+0x12c>
 8009a6c:	06d1      	lsls	r1, r2, #27
 8009a6e:	bf44      	itt	mi
 8009a70:	2320      	movmi	r3, #32
 8009a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a76:	0713      	lsls	r3, r2, #28
 8009a78:	bf44      	itt	mi
 8009a7a:	232b      	movmi	r3, #43	; 0x2b
 8009a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a80:	f89a 3000 	ldrb.w	r3, [sl]
 8009a84:	2b2a      	cmp	r3, #42	; 0x2a
 8009a86:	d015      	beq.n	8009ab4 <_vfiprintf_r+0x13c>
 8009a88:	9a07      	ldr	r2, [sp, #28]
 8009a8a:	4654      	mov	r4, sl
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	f04f 0c0a 	mov.w	ip, #10
 8009a92:	4621      	mov	r1, r4
 8009a94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a98:	3b30      	subs	r3, #48	; 0x30
 8009a9a:	2b09      	cmp	r3, #9
 8009a9c:	d94e      	bls.n	8009b3c <_vfiprintf_r+0x1c4>
 8009a9e:	b1b0      	cbz	r0, 8009ace <_vfiprintf_r+0x156>
 8009aa0:	9207      	str	r2, [sp, #28]
 8009aa2:	e014      	b.n	8009ace <_vfiprintf_r+0x156>
 8009aa4:	eba0 0308 	sub.w	r3, r0, r8
 8009aa8:	fa09 f303 	lsl.w	r3, r9, r3
 8009aac:	4313      	orrs	r3, r2
 8009aae:	9304      	str	r3, [sp, #16]
 8009ab0:	46a2      	mov	sl, r4
 8009ab2:	e7d2      	b.n	8009a5a <_vfiprintf_r+0xe2>
 8009ab4:	9b03      	ldr	r3, [sp, #12]
 8009ab6:	1d19      	adds	r1, r3, #4
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	9103      	str	r1, [sp, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	bfbb      	ittet	lt
 8009ac0:	425b      	neglt	r3, r3
 8009ac2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ac6:	9307      	strge	r3, [sp, #28]
 8009ac8:	9307      	strlt	r3, [sp, #28]
 8009aca:	bfb8      	it	lt
 8009acc:	9204      	strlt	r2, [sp, #16]
 8009ace:	7823      	ldrb	r3, [r4, #0]
 8009ad0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ad2:	d10c      	bne.n	8009aee <_vfiprintf_r+0x176>
 8009ad4:	7863      	ldrb	r3, [r4, #1]
 8009ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ad8:	d135      	bne.n	8009b46 <_vfiprintf_r+0x1ce>
 8009ada:	9b03      	ldr	r3, [sp, #12]
 8009adc:	1d1a      	adds	r2, r3, #4
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	9203      	str	r2, [sp, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	bfb8      	it	lt
 8009ae6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009aea:	3402      	adds	r4, #2
 8009aec:	9305      	str	r3, [sp, #20]
 8009aee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009bd4 <_vfiprintf_r+0x25c>
 8009af2:	7821      	ldrb	r1, [r4, #0]
 8009af4:	2203      	movs	r2, #3
 8009af6:	4650      	mov	r0, sl
 8009af8:	f7f6 fb72 	bl	80001e0 <memchr>
 8009afc:	b140      	cbz	r0, 8009b10 <_vfiprintf_r+0x198>
 8009afe:	2340      	movs	r3, #64	; 0x40
 8009b00:	eba0 000a 	sub.w	r0, r0, sl
 8009b04:	fa03 f000 	lsl.w	r0, r3, r0
 8009b08:	9b04      	ldr	r3, [sp, #16]
 8009b0a:	4303      	orrs	r3, r0
 8009b0c:	3401      	adds	r4, #1
 8009b0e:	9304      	str	r3, [sp, #16]
 8009b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b14:	482c      	ldr	r0, [pc, #176]	; (8009bc8 <_vfiprintf_r+0x250>)
 8009b16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b1a:	2206      	movs	r2, #6
 8009b1c:	f7f6 fb60 	bl	80001e0 <memchr>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d03f      	beq.n	8009ba4 <_vfiprintf_r+0x22c>
 8009b24:	4b29      	ldr	r3, [pc, #164]	; (8009bcc <_vfiprintf_r+0x254>)
 8009b26:	bb1b      	cbnz	r3, 8009b70 <_vfiprintf_r+0x1f8>
 8009b28:	9b03      	ldr	r3, [sp, #12]
 8009b2a:	3307      	adds	r3, #7
 8009b2c:	f023 0307 	bic.w	r3, r3, #7
 8009b30:	3308      	adds	r3, #8
 8009b32:	9303      	str	r3, [sp, #12]
 8009b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b36:	443b      	add	r3, r7
 8009b38:	9309      	str	r3, [sp, #36]	; 0x24
 8009b3a:	e767      	b.n	8009a0c <_vfiprintf_r+0x94>
 8009b3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b40:	460c      	mov	r4, r1
 8009b42:	2001      	movs	r0, #1
 8009b44:	e7a5      	b.n	8009a92 <_vfiprintf_r+0x11a>
 8009b46:	2300      	movs	r3, #0
 8009b48:	3401      	adds	r4, #1
 8009b4a:	9305      	str	r3, [sp, #20]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	f04f 0c0a 	mov.w	ip, #10
 8009b52:	4620      	mov	r0, r4
 8009b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b58:	3a30      	subs	r2, #48	; 0x30
 8009b5a:	2a09      	cmp	r2, #9
 8009b5c:	d903      	bls.n	8009b66 <_vfiprintf_r+0x1ee>
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d0c5      	beq.n	8009aee <_vfiprintf_r+0x176>
 8009b62:	9105      	str	r1, [sp, #20]
 8009b64:	e7c3      	b.n	8009aee <_vfiprintf_r+0x176>
 8009b66:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e7f0      	b.n	8009b52 <_vfiprintf_r+0x1da>
 8009b70:	ab03      	add	r3, sp, #12
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	462a      	mov	r2, r5
 8009b76:	4b16      	ldr	r3, [pc, #88]	; (8009bd0 <_vfiprintf_r+0x258>)
 8009b78:	a904      	add	r1, sp, #16
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	f7fc f8de 	bl	8005d3c <_printf_float>
 8009b80:	4607      	mov	r7, r0
 8009b82:	1c78      	adds	r0, r7, #1
 8009b84:	d1d6      	bne.n	8009b34 <_vfiprintf_r+0x1bc>
 8009b86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b88:	07d9      	lsls	r1, r3, #31
 8009b8a:	d405      	bmi.n	8009b98 <_vfiprintf_r+0x220>
 8009b8c:	89ab      	ldrh	r3, [r5, #12]
 8009b8e:	059a      	lsls	r2, r3, #22
 8009b90:	d402      	bmi.n	8009b98 <_vfiprintf_r+0x220>
 8009b92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b94:	f7ff fe7c 	bl	8009890 <__retarget_lock_release_recursive>
 8009b98:	89ab      	ldrh	r3, [r5, #12]
 8009b9a:	065b      	lsls	r3, r3, #25
 8009b9c:	f53f af12 	bmi.w	80099c4 <_vfiprintf_r+0x4c>
 8009ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ba2:	e711      	b.n	80099c8 <_vfiprintf_r+0x50>
 8009ba4:	ab03      	add	r3, sp, #12
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	462a      	mov	r2, r5
 8009baa:	4b09      	ldr	r3, [pc, #36]	; (8009bd0 <_vfiprintf_r+0x258>)
 8009bac:	a904      	add	r1, sp, #16
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f7fc fb68 	bl	8006284 <_printf_i>
 8009bb4:	e7e4      	b.n	8009b80 <_vfiprintf_r+0x208>
 8009bb6:	bf00      	nop
 8009bb8:	0800a7bc 	.word	0x0800a7bc
 8009bbc:	0800a7dc 	.word	0x0800a7dc
 8009bc0:	0800a79c 	.word	0x0800a79c
 8009bc4:	0800a74c 	.word	0x0800a74c
 8009bc8:	0800a756 	.word	0x0800a756
 8009bcc:	08005d3d 	.word	0x08005d3d
 8009bd0:	08009953 	.word	0x08009953
 8009bd4:	0800a752 	.word	0x0800a752

08009bd8 <__swbuf_r>:
 8009bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bda:	460e      	mov	r6, r1
 8009bdc:	4614      	mov	r4, r2
 8009bde:	4605      	mov	r5, r0
 8009be0:	b118      	cbz	r0, 8009bea <__swbuf_r+0x12>
 8009be2:	6983      	ldr	r3, [r0, #24]
 8009be4:	b90b      	cbnz	r3, 8009bea <__swbuf_r+0x12>
 8009be6:	f000 f9d1 	bl	8009f8c <__sinit>
 8009bea:	4b21      	ldr	r3, [pc, #132]	; (8009c70 <__swbuf_r+0x98>)
 8009bec:	429c      	cmp	r4, r3
 8009bee:	d12b      	bne.n	8009c48 <__swbuf_r+0x70>
 8009bf0:	686c      	ldr	r4, [r5, #4]
 8009bf2:	69a3      	ldr	r3, [r4, #24]
 8009bf4:	60a3      	str	r3, [r4, #8]
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	071a      	lsls	r2, r3, #28
 8009bfa:	d52f      	bpl.n	8009c5c <__swbuf_r+0x84>
 8009bfc:	6923      	ldr	r3, [r4, #16]
 8009bfe:	b36b      	cbz	r3, 8009c5c <__swbuf_r+0x84>
 8009c00:	6923      	ldr	r3, [r4, #16]
 8009c02:	6820      	ldr	r0, [r4, #0]
 8009c04:	1ac0      	subs	r0, r0, r3
 8009c06:	6963      	ldr	r3, [r4, #20]
 8009c08:	b2f6      	uxtb	r6, r6
 8009c0a:	4283      	cmp	r3, r0
 8009c0c:	4637      	mov	r7, r6
 8009c0e:	dc04      	bgt.n	8009c1a <__swbuf_r+0x42>
 8009c10:	4621      	mov	r1, r4
 8009c12:	4628      	mov	r0, r5
 8009c14:	f000 f926 	bl	8009e64 <_fflush_r>
 8009c18:	bb30      	cbnz	r0, 8009c68 <__swbuf_r+0x90>
 8009c1a:	68a3      	ldr	r3, [r4, #8]
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	60a3      	str	r3, [r4, #8]
 8009c20:	6823      	ldr	r3, [r4, #0]
 8009c22:	1c5a      	adds	r2, r3, #1
 8009c24:	6022      	str	r2, [r4, #0]
 8009c26:	701e      	strb	r6, [r3, #0]
 8009c28:	6963      	ldr	r3, [r4, #20]
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	4283      	cmp	r3, r0
 8009c2e:	d004      	beq.n	8009c3a <__swbuf_r+0x62>
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	07db      	lsls	r3, r3, #31
 8009c34:	d506      	bpl.n	8009c44 <__swbuf_r+0x6c>
 8009c36:	2e0a      	cmp	r6, #10
 8009c38:	d104      	bne.n	8009c44 <__swbuf_r+0x6c>
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f000 f911 	bl	8009e64 <_fflush_r>
 8009c42:	b988      	cbnz	r0, 8009c68 <__swbuf_r+0x90>
 8009c44:	4638      	mov	r0, r7
 8009c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c48:	4b0a      	ldr	r3, [pc, #40]	; (8009c74 <__swbuf_r+0x9c>)
 8009c4a:	429c      	cmp	r4, r3
 8009c4c:	d101      	bne.n	8009c52 <__swbuf_r+0x7a>
 8009c4e:	68ac      	ldr	r4, [r5, #8]
 8009c50:	e7cf      	b.n	8009bf2 <__swbuf_r+0x1a>
 8009c52:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <__swbuf_r+0xa0>)
 8009c54:	429c      	cmp	r4, r3
 8009c56:	bf08      	it	eq
 8009c58:	68ec      	ldreq	r4, [r5, #12]
 8009c5a:	e7ca      	b.n	8009bf2 <__swbuf_r+0x1a>
 8009c5c:	4621      	mov	r1, r4
 8009c5e:	4628      	mov	r0, r5
 8009c60:	f000 f80c 	bl	8009c7c <__swsetup_r>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d0cb      	beq.n	8009c00 <__swbuf_r+0x28>
 8009c68:	f04f 37ff 	mov.w	r7, #4294967295
 8009c6c:	e7ea      	b.n	8009c44 <__swbuf_r+0x6c>
 8009c6e:	bf00      	nop
 8009c70:	0800a7bc 	.word	0x0800a7bc
 8009c74:	0800a7dc 	.word	0x0800a7dc
 8009c78:	0800a79c 	.word	0x0800a79c

08009c7c <__swsetup_r>:
 8009c7c:	4b32      	ldr	r3, [pc, #200]	; (8009d48 <__swsetup_r+0xcc>)
 8009c7e:	b570      	push	{r4, r5, r6, lr}
 8009c80:	681d      	ldr	r5, [r3, #0]
 8009c82:	4606      	mov	r6, r0
 8009c84:	460c      	mov	r4, r1
 8009c86:	b125      	cbz	r5, 8009c92 <__swsetup_r+0x16>
 8009c88:	69ab      	ldr	r3, [r5, #24]
 8009c8a:	b913      	cbnz	r3, 8009c92 <__swsetup_r+0x16>
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f000 f97d 	bl	8009f8c <__sinit>
 8009c92:	4b2e      	ldr	r3, [pc, #184]	; (8009d4c <__swsetup_r+0xd0>)
 8009c94:	429c      	cmp	r4, r3
 8009c96:	d10f      	bne.n	8009cb8 <__swsetup_r+0x3c>
 8009c98:	686c      	ldr	r4, [r5, #4]
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ca0:	0719      	lsls	r1, r3, #28
 8009ca2:	d42c      	bmi.n	8009cfe <__swsetup_r+0x82>
 8009ca4:	06dd      	lsls	r5, r3, #27
 8009ca6:	d411      	bmi.n	8009ccc <__swsetup_r+0x50>
 8009ca8:	2309      	movs	r3, #9
 8009caa:	6033      	str	r3, [r6, #0]
 8009cac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cb0:	81a3      	strh	r3, [r4, #12]
 8009cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb6:	e03e      	b.n	8009d36 <__swsetup_r+0xba>
 8009cb8:	4b25      	ldr	r3, [pc, #148]	; (8009d50 <__swsetup_r+0xd4>)
 8009cba:	429c      	cmp	r4, r3
 8009cbc:	d101      	bne.n	8009cc2 <__swsetup_r+0x46>
 8009cbe:	68ac      	ldr	r4, [r5, #8]
 8009cc0:	e7eb      	b.n	8009c9a <__swsetup_r+0x1e>
 8009cc2:	4b24      	ldr	r3, [pc, #144]	; (8009d54 <__swsetup_r+0xd8>)
 8009cc4:	429c      	cmp	r4, r3
 8009cc6:	bf08      	it	eq
 8009cc8:	68ec      	ldreq	r4, [r5, #12]
 8009cca:	e7e6      	b.n	8009c9a <__swsetup_r+0x1e>
 8009ccc:	0758      	lsls	r0, r3, #29
 8009cce:	d512      	bpl.n	8009cf6 <__swsetup_r+0x7a>
 8009cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cd2:	b141      	cbz	r1, 8009ce6 <__swsetup_r+0x6a>
 8009cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cd8:	4299      	cmp	r1, r3
 8009cda:	d002      	beq.n	8009ce2 <__swsetup_r+0x66>
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f7fb fead 	bl	8005a3c <_free_r>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	6363      	str	r3, [r4, #52]	; 0x34
 8009ce6:	89a3      	ldrh	r3, [r4, #12]
 8009ce8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cec:	81a3      	strh	r3, [r4, #12]
 8009cee:	2300      	movs	r3, #0
 8009cf0:	6063      	str	r3, [r4, #4]
 8009cf2:	6923      	ldr	r3, [r4, #16]
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	89a3      	ldrh	r3, [r4, #12]
 8009cf8:	f043 0308 	orr.w	r3, r3, #8
 8009cfc:	81a3      	strh	r3, [r4, #12]
 8009cfe:	6923      	ldr	r3, [r4, #16]
 8009d00:	b94b      	cbnz	r3, 8009d16 <__swsetup_r+0x9a>
 8009d02:	89a3      	ldrh	r3, [r4, #12]
 8009d04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d0c:	d003      	beq.n	8009d16 <__swsetup_r+0x9a>
 8009d0e:	4621      	mov	r1, r4
 8009d10:	4630      	mov	r0, r6
 8009d12:	f000 f9fd 	bl	800a110 <__smakebuf_r>
 8009d16:	89a0      	ldrh	r0, [r4, #12]
 8009d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d1c:	f010 0301 	ands.w	r3, r0, #1
 8009d20:	d00a      	beq.n	8009d38 <__swsetup_r+0xbc>
 8009d22:	2300      	movs	r3, #0
 8009d24:	60a3      	str	r3, [r4, #8]
 8009d26:	6963      	ldr	r3, [r4, #20]
 8009d28:	425b      	negs	r3, r3
 8009d2a:	61a3      	str	r3, [r4, #24]
 8009d2c:	6923      	ldr	r3, [r4, #16]
 8009d2e:	b943      	cbnz	r3, 8009d42 <__swsetup_r+0xc6>
 8009d30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d34:	d1ba      	bne.n	8009cac <__swsetup_r+0x30>
 8009d36:	bd70      	pop	{r4, r5, r6, pc}
 8009d38:	0781      	lsls	r1, r0, #30
 8009d3a:	bf58      	it	pl
 8009d3c:	6963      	ldrpl	r3, [r4, #20]
 8009d3e:	60a3      	str	r3, [r4, #8]
 8009d40:	e7f4      	b.n	8009d2c <__swsetup_r+0xb0>
 8009d42:	2000      	movs	r0, #0
 8009d44:	e7f7      	b.n	8009d36 <__swsetup_r+0xba>
 8009d46:	bf00      	nop
 8009d48:	2000000c 	.word	0x2000000c
 8009d4c:	0800a7bc 	.word	0x0800a7bc
 8009d50:	0800a7dc 	.word	0x0800a7dc
 8009d54:	0800a79c 	.word	0x0800a79c

08009d58 <__sflush_r>:
 8009d58:	898a      	ldrh	r2, [r1, #12]
 8009d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5e:	4605      	mov	r5, r0
 8009d60:	0710      	lsls	r0, r2, #28
 8009d62:	460c      	mov	r4, r1
 8009d64:	d458      	bmi.n	8009e18 <__sflush_r+0xc0>
 8009d66:	684b      	ldr	r3, [r1, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	dc05      	bgt.n	8009d78 <__sflush_r+0x20>
 8009d6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	dc02      	bgt.n	8009d78 <__sflush_r+0x20>
 8009d72:	2000      	movs	r0, #0
 8009d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d7a:	2e00      	cmp	r6, #0
 8009d7c:	d0f9      	beq.n	8009d72 <__sflush_r+0x1a>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d84:	682f      	ldr	r7, [r5, #0]
 8009d86:	602b      	str	r3, [r5, #0]
 8009d88:	d032      	beq.n	8009df0 <__sflush_r+0x98>
 8009d8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	075a      	lsls	r2, r3, #29
 8009d90:	d505      	bpl.n	8009d9e <__sflush_r+0x46>
 8009d92:	6863      	ldr	r3, [r4, #4]
 8009d94:	1ac0      	subs	r0, r0, r3
 8009d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d98:	b10b      	cbz	r3, 8009d9e <__sflush_r+0x46>
 8009d9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d9c:	1ac0      	subs	r0, r0, r3
 8009d9e:	2300      	movs	r3, #0
 8009da0:	4602      	mov	r2, r0
 8009da2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009da4:	6a21      	ldr	r1, [r4, #32]
 8009da6:	4628      	mov	r0, r5
 8009da8:	47b0      	blx	r6
 8009daa:	1c43      	adds	r3, r0, #1
 8009dac:	89a3      	ldrh	r3, [r4, #12]
 8009dae:	d106      	bne.n	8009dbe <__sflush_r+0x66>
 8009db0:	6829      	ldr	r1, [r5, #0]
 8009db2:	291d      	cmp	r1, #29
 8009db4:	d82c      	bhi.n	8009e10 <__sflush_r+0xb8>
 8009db6:	4a2a      	ldr	r2, [pc, #168]	; (8009e60 <__sflush_r+0x108>)
 8009db8:	40ca      	lsrs	r2, r1
 8009dba:	07d6      	lsls	r6, r2, #31
 8009dbc:	d528      	bpl.n	8009e10 <__sflush_r+0xb8>
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	6062      	str	r2, [r4, #4]
 8009dc2:	04d9      	lsls	r1, r3, #19
 8009dc4:	6922      	ldr	r2, [r4, #16]
 8009dc6:	6022      	str	r2, [r4, #0]
 8009dc8:	d504      	bpl.n	8009dd4 <__sflush_r+0x7c>
 8009dca:	1c42      	adds	r2, r0, #1
 8009dcc:	d101      	bne.n	8009dd2 <__sflush_r+0x7a>
 8009dce:	682b      	ldr	r3, [r5, #0]
 8009dd0:	b903      	cbnz	r3, 8009dd4 <__sflush_r+0x7c>
 8009dd2:	6560      	str	r0, [r4, #84]	; 0x54
 8009dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dd6:	602f      	str	r7, [r5, #0]
 8009dd8:	2900      	cmp	r1, #0
 8009dda:	d0ca      	beq.n	8009d72 <__sflush_r+0x1a>
 8009ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009de0:	4299      	cmp	r1, r3
 8009de2:	d002      	beq.n	8009dea <__sflush_r+0x92>
 8009de4:	4628      	mov	r0, r5
 8009de6:	f7fb fe29 	bl	8005a3c <_free_r>
 8009dea:	2000      	movs	r0, #0
 8009dec:	6360      	str	r0, [r4, #52]	; 0x34
 8009dee:	e7c1      	b.n	8009d74 <__sflush_r+0x1c>
 8009df0:	6a21      	ldr	r1, [r4, #32]
 8009df2:	2301      	movs	r3, #1
 8009df4:	4628      	mov	r0, r5
 8009df6:	47b0      	blx	r6
 8009df8:	1c41      	adds	r1, r0, #1
 8009dfa:	d1c7      	bne.n	8009d8c <__sflush_r+0x34>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0c4      	beq.n	8009d8c <__sflush_r+0x34>
 8009e02:	2b1d      	cmp	r3, #29
 8009e04:	d001      	beq.n	8009e0a <__sflush_r+0xb2>
 8009e06:	2b16      	cmp	r3, #22
 8009e08:	d101      	bne.n	8009e0e <__sflush_r+0xb6>
 8009e0a:	602f      	str	r7, [r5, #0]
 8009e0c:	e7b1      	b.n	8009d72 <__sflush_r+0x1a>
 8009e0e:	89a3      	ldrh	r3, [r4, #12]
 8009e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e14:	81a3      	strh	r3, [r4, #12]
 8009e16:	e7ad      	b.n	8009d74 <__sflush_r+0x1c>
 8009e18:	690f      	ldr	r7, [r1, #16]
 8009e1a:	2f00      	cmp	r7, #0
 8009e1c:	d0a9      	beq.n	8009d72 <__sflush_r+0x1a>
 8009e1e:	0793      	lsls	r3, r2, #30
 8009e20:	680e      	ldr	r6, [r1, #0]
 8009e22:	bf08      	it	eq
 8009e24:	694b      	ldreq	r3, [r1, #20]
 8009e26:	600f      	str	r7, [r1, #0]
 8009e28:	bf18      	it	ne
 8009e2a:	2300      	movne	r3, #0
 8009e2c:	eba6 0807 	sub.w	r8, r6, r7
 8009e30:	608b      	str	r3, [r1, #8]
 8009e32:	f1b8 0f00 	cmp.w	r8, #0
 8009e36:	dd9c      	ble.n	8009d72 <__sflush_r+0x1a>
 8009e38:	6a21      	ldr	r1, [r4, #32]
 8009e3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e3c:	4643      	mov	r3, r8
 8009e3e:	463a      	mov	r2, r7
 8009e40:	4628      	mov	r0, r5
 8009e42:	47b0      	blx	r6
 8009e44:	2800      	cmp	r0, #0
 8009e46:	dc06      	bgt.n	8009e56 <__sflush_r+0xfe>
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	f04f 30ff 	mov.w	r0, #4294967295
 8009e54:	e78e      	b.n	8009d74 <__sflush_r+0x1c>
 8009e56:	4407      	add	r7, r0
 8009e58:	eba8 0800 	sub.w	r8, r8, r0
 8009e5c:	e7e9      	b.n	8009e32 <__sflush_r+0xda>
 8009e5e:	bf00      	nop
 8009e60:	20400001 	.word	0x20400001

08009e64 <_fflush_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	690b      	ldr	r3, [r1, #16]
 8009e68:	4605      	mov	r5, r0
 8009e6a:	460c      	mov	r4, r1
 8009e6c:	b913      	cbnz	r3, 8009e74 <_fflush_r+0x10>
 8009e6e:	2500      	movs	r5, #0
 8009e70:	4628      	mov	r0, r5
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	b118      	cbz	r0, 8009e7e <_fflush_r+0x1a>
 8009e76:	6983      	ldr	r3, [r0, #24]
 8009e78:	b90b      	cbnz	r3, 8009e7e <_fflush_r+0x1a>
 8009e7a:	f000 f887 	bl	8009f8c <__sinit>
 8009e7e:	4b14      	ldr	r3, [pc, #80]	; (8009ed0 <_fflush_r+0x6c>)
 8009e80:	429c      	cmp	r4, r3
 8009e82:	d11b      	bne.n	8009ebc <_fflush_r+0x58>
 8009e84:	686c      	ldr	r4, [r5, #4]
 8009e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d0ef      	beq.n	8009e6e <_fflush_r+0xa>
 8009e8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e90:	07d0      	lsls	r0, r2, #31
 8009e92:	d404      	bmi.n	8009e9e <_fflush_r+0x3a>
 8009e94:	0599      	lsls	r1, r3, #22
 8009e96:	d402      	bmi.n	8009e9e <_fflush_r+0x3a>
 8009e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e9a:	f7ff fcf8 	bl	800988e <__retarget_lock_acquire_recursive>
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	f7ff ff59 	bl	8009d58 <__sflush_r>
 8009ea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ea8:	07da      	lsls	r2, r3, #31
 8009eaa:	4605      	mov	r5, r0
 8009eac:	d4e0      	bmi.n	8009e70 <_fflush_r+0xc>
 8009eae:	89a3      	ldrh	r3, [r4, #12]
 8009eb0:	059b      	lsls	r3, r3, #22
 8009eb2:	d4dd      	bmi.n	8009e70 <_fflush_r+0xc>
 8009eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eb6:	f7ff fceb 	bl	8009890 <__retarget_lock_release_recursive>
 8009eba:	e7d9      	b.n	8009e70 <_fflush_r+0xc>
 8009ebc:	4b05      	ldr	r3, [pc, #20]	; (8009ed4 <_fflush_r+0x70>)
 8009ebe:	429c      	cmp	r4, r3
 8009ec0:	d101      	bne.n	8009ec6 <_fflush_r+0x62>
 8009ec2:	68ac      	ldr	r4, [r5, #8]
 8009ec4:	e7df      	b.n	8009e86 <_fflush_r+0x22>
 8009ec6:	4b04      	ldr	r3, [pc, #16]	; (8009ed8 <_fflush_r+0x74>)
 8009ec8:	429c      	cmp	r4, r3
 8009eca:	bf08      	it	eq
 8009ecc:	68ec      	ldreq	r4, [r5, #12]
 8009ece:	e7da      	b.n	8009e86 <_fflush_r+0x22>
 8009ed0:	0800a7bc 	.word	0x0800a7bc
 8009ed4:	0800a7dc 	.word	0x0800a7dc
 8009ed8:	0800a79c 	.word	0x0800a79c

08009edc <std>:
 8009edc:	2300      	movs	r3, #0
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8009ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009eea:	6083      	str	r3, [r0, #8]
 8009eec:	8181      	strh	r1, [r0, #12]
 8009eee:	6643      	str	r3, [r0, #100]	; 0x64
 8009ef0:	81c2      	strh	r2, [r0, #14]
 8009ef2:	6183      	str	r3, [r0, #24]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	2208      	movs	r2, #8
 8009ef8:	305c      	adds	r0, #92	; 0x5c
 8009efa:	f7fb fd97 	bl	8005a2c <memset>
 8009efe:	4b05      	ldr	r3, [pc, #20]	; (8009f14 <std+0x38>)
 8009f00:	6263      	str	r3, [r4, #36]	; 0x24
 8009f02:	4b05      	ldr	r3, [pc, #20]	; (8009f18 <std+0x3c>)
 8009f04:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f06:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <std+0x40>)
 8009f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f0a:	4b05      	ldr	r3, [pc, #20]	; (8009f20 <std+0x44>)
 8009f0c:	6224      	str	r4, [r4, #32]
 8009f0e:	6323      	str	r3, [r4, #48]	; 0x30
 8009f10:	bd10      	pop	{r4, pc}
 8009f12:	bf00      	nop
 8009f14:	0800a1a1 	.word	0x0800a1a1
 8009f18:	0800a1c3 	.word	0x0800a1c3
 8009f1c:	0800a1fb 	.word	0x0800a1fb
 8009f20:	0800a21f 	.word	0x0800a21f

08009f24 <_cleanup_r>:
 8009f24:	4901      	ldr	r1, [pc, #4]	; (8009f2c <_cleanup_r+0x8>)
 8009f26:	f000 b8af 	b.w	800a088 <_fwalk_reent>
 8009f2a:	bf00      	nop
 8009f2c:	08009e65 	.word	0x08009e65

08009f30 <__sfmoreglue>:
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	2268      	movs	r2, #104	; 0x68
 8009f34:	1e4d      	subs	r5, r1, #1
 8009f36:	4355      	muls	r5, r2
 8009f38:	460e      	mov	r6, r1
 8009f3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f3e:	f7fb fde9 	bl	8005b14 <_malloc_r>
 8009f42:	4604      	mov	r4, r0
 8009f44:	b140      	cbz	r0, 8009f58 <__sfmoreglue+0x28>
 8009f46:	2100      	movs	r1, #0
 8009f48:	e9c0 1600 	strd	r1, r6, [r0]
 8009f4c:	300c      	adds	r0, #12
 8009f4e:	60a0      	str	r0, [r4, #8]
 8009f50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f54:	f7fb fd6a 	bl	8005a2c <memset>
 8009f58:	4620      	mov	r0, r4
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}

08009f5c <__sfp_lock_acquire>:
 8009f5c:	4801      	ldr	r0, [pc, #4]	; (8009f64 <__sfp_lock_acquire+0x8>)
 8009f5e:	f7ff bc96 	b.w	800988e <__retarget_lock_acquire_recursive>
 8009f62:	bf00      	nop
 8009f64:	2000043d 	.word	0x2000043d

08009f68 <__sfp_lock_release>:
 8009f68:	4801      	ldr	r0, [pc, #4]	; (8009f70 <__sfp_lock_release+0x8>)
 8009f6a:	f7ff bc91 	b.w	8009890 <__retarget_lock_release_recursive>
 8009f6e:	bf00      	nop
 8009f70:	2000043d 	.word	0x2000043d

08009f74 <__sinit_lock_acquire>:
 8009f74:	4801      	ldr	r0, [pc, #4]	; (8009f7c <__sinit_lock_acquire+0x8>)
 8009f76:	f7ff bc8a 	b.w	800988e <__retarget_lock_acquire_recursive>
 8009f7a:	bf00      	nop
 8009f7c:	2000043e 	.word	0x2000043e

08009f80 <__sinit_lock_release>:
 8009f80:	4801      	ldr	r0, [pc, #4]	; (8009f88 <__sinit_lock_release+0x8>)
 8009f82:	f7ff bc85 	b.w	8009890 <__retarget_lock_release_recursive>
 8009f86:	bf00      	nop
 8009f88:	2000043e 	.word	0x2000043e

08009f8c <__sinit>:
 8009f8c:	b510      	push	{r4, lr}
 8009f8e:	4604      	mov	r4, r0
 8009f90:	f7ff fff0 	bl	8009f74 <__sinit_lock_acquire>
 8009f94:	69a3      	ldr	r3, [r4, #24]
 8009f96:	b11b      	cbz	r3, 8009fa0 <__sinit+0x14>
 8009f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f9c:	f7ff bff0 	b.w	8009f80 <__sinit_lock_release>
 8009fa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009fa4:	6523      	str	r3, [r4, #80]	; 0x50
 8009fa6:	4b13      	ldr	r3, [pc, #76]	; (8009ff4 <__sinit+0x68>)
 8009fa8:	4a13      	ldr	r2, [pc, #76]	; (8009ff8 <__sinit+0x6c>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	62a2      	str	r2, [r4, #40]	; 0x28
 8009fae:	42a3      	cmp	r3, r4
 8009fb0:	bf04      	itt	eq
 8009fb2:	2301      	moveq	r3, #1
 8009fb4:	61a3      	streq	r3, [r4, #24]
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f000 f820 	bl	8009ffc <__sfp>
 8009fbc:	6060      	str	r0, [r4, #4]
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 f81c 	bl	8009ffc <__sfp>
 8009fc4:	60a0      	str	r0, [r4, #8]
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f000 f818 	bl	8009ffc <__sfp>
 8009fcc:	2200      	movs	r2, #0
 8009fce:	60e0      	str	r0, [r4, #12]
 8009fd0:	2104      	movs	r1, #4
 8009fd2:	6860      	ldr	r0, [r4, #4]
 8009fd4:	f7ff ff82 	bl	8009edc <std>
 8009fd8:	68a0      	ldr	r0, [r4, #8]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	2109      	movs	r1, #9
 8009fde:	f7ff ff7d 	bl	8009edc <std>
 8009fe2:	68e0      	ldr	r0, [r4, #12]
 8009fe4:	2202      	movs	r2, #2
 8009fe6:	2112      	movs	r1, #18
 8009fe8:	f7ff ff78 	bl	8009edc <std>
 8009fec:	2301      	movs	r3, #1
 8009fee:	61a3      	str	r3, [r4, #24]
 8009ff0:	e7d2      	b.n	8009f98 <__sinit+0xc>
 8009ff2:	bf00      	nop
 8009ff4:	0800a358 	.word	0x0800a358
 8009ff8:	08009f25 	.word	0x08009f25

08009ffc <__sfp>:
 8009ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffe:	4607      	mov	r7, r0
 800a000:	f7ff ffac 	bl	8009f5c <__sfp_lock_acquire>
 800a004:	4b1e      	ldr	r3, [pc, #120]	; (800a080 <__sfp+0x84>)
 800a006:	681e      	ldr	r6, [r3, #0]
 800a008:	69b3      	ldr	r3, [r6, #24]
 800a00a:	b913      	cbnz	r3, 800a012 <__sfp+0x16>
 800a00c:	4630      	mov	r0, r6
 800a00e:	f7ff ffbd 	bl	8009f8c <__sinit>
 800a012:	3648      	adds	r6, #72	; 0x48
 800a014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a018:	3b01      	subs	r3, #1
 800a01a:	d503      	bpl.n	800a024 <__sfp+0x28>
 800a01c:	6833      	ldr	r3, [r6, #0]
 800a01e:	b30b      	cbz	r3, 800a064 <__sfp+0x68>
 800a020:	6836      	ldr	r6, [r6, #0]
 800a022:	e7f7      	b.n	800a014 <__sfp+0x18>
 800a024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a028:	b9d5      	cbnz	r5, 800a060 <__sfp+0x64>
 800a02a:	4b16      	ldr	r3, [pc, #88]	; (800a084 <__sfp+0x88>)
 800a02c:	60e3      	str	r3, [r4, #12]
 800a02e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a032:	6665      	str	r5, [r4, #100]	; 0x64
 800a034:	f7ff fc2a 	bl	800988c <__retarget_lock_init_recursive>
 800a038:	f7ff ff96 	bl	8009f68 <__sfp_lock_release>
 800a03c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a044:	6025      	str	r5, [r4, #0]
 800a046:	61a5      	str	r5, [r4, #24]
 800a048:	2208      	movs	r2, #8
 800a04a:	4629      	mov	r1, r5
 800a04c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a050:	f7fb fcec 	bl	8005a2c <memset>
 800a054:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a058:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a05c:	4620      	mov	r0, r4
 800a05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a060:	3468      	adds	r4, #104	; 0x68
 800a062:	e7d9      	b.n	800a018 <__sfp+0x1c>
 800a064:	2104      	movs	r1, #4
 800a066:	4638      	mov	r0, r7
 800a068:	f7ff ff62 	bl	8009f30 <__sfmoreglue>
 800a06c:	4604      	mov	r4, r0
 800a06e:	6030      	str	r0, [r6, #0]
 800a070:	2800      	cmp	r0, #0
 800a072:	d1d5      	bne.n	800a020 <__sfp+0x24>
 800a074:	f7ff ff78 	bl	8009f68 <__sfp_lock_release>
 800a078:	230c      	movs	r3, #12
 800a07a:	603b      	str	r3, [r7, #0]
 800a07c:	e7ee      	b.n	800a05c <__sfp+0x60>
 800a07e:	bf00      	nop
 800a080:	0800a358 	.word	0x0800a358
 800a084:	ffff0001 	.word	0xffff0001

0800a088 <_fwalk_reent>:
 800a088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a08c:	4606      	mov	r6, r0
 800a08e:	4688      	mov	r8, r1
 800a090:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a094:	2700      	movs	r7, #0
 800a096:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a09a:	f1b9 0901 	subs.w	r9, r9, #1
 800a09e:	d505      	bpl.n	800a0ac <_fwalk_reent+0x24>
 800a0a0:	6824      	ldr	r4, [r4, #0]
 800a0a2:	2c00      	cmp	r4, #0
 800a0a4:	d1f7      	bne.n	800a096 <_fwalk_reent+0xe>
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ac:	89ab      	ldrh	r3, [r5, #12]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d907      	bls.n	800a0c2 <_fwalk_reent+0x3a>
 800a0b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	d003      	beq.n	800a0c2 <_fwalk_reent+0x3a>
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	4630      	mov	r0, r6
 800a0be:	47c0      	blx	r8
 800a0c0:	4307      	orrs	r7, r0
 800a0c2:	3568      	adds	r5, #104	; 0x68
 800a0c4:	e7e9      	b.n	800a09a <_fwalk_reent+0x12>

0800a0c6 <__swhatbuf_r>:
 800a0c6:	b570      	push	{r4, r5, r6, lr}
 800a0c8:	460e      	mov	r6, r1
 800a0ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	b096      	sub	sp, #88	; 0x58
 800a0d2:	4614      	mov	r4, r2
 800a0d4:	461d      	mov	r5, r3
 800a0d6:	da08      	bge.n	800a0ea <__swhatbuf_r+0x24>
 800a0d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	602a      	str	r2, [r5, #0]
 800a0e0:	061a      	lsls	r2, r3, #24
 800a0e2:	d410      	bmi.n	800a106 <__swhatbuf_r+0x40>
 800a0e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0e8:	e00e      	b.n	800a108 <__swhatbuf_r+0x42>
 800a0ea:	466a      	mov	r2, sp
 800a0ec:	f000 f8be 	bl	800a26c <_fstat_r>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	dbf1      	blt.n	800a0d8 <__swhatbuf_r+0x12>
 800a0f4:	9a01      	ldr	r2, [sp, #4]
 800a0f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0fe:	425a      	negs	r2, r3
 800a100:	415a      	adcs	r2, r3
 800a102:	602a      	str	r2, [r5, #0]
 800a104:	e7ee      	b.n	800a0e4 <__swhatbuf_r+0x1e>
 800a106:	2340      	movs	r3, #64	; 0x40
 800a108:	2000      	movs	r0, #0
 800a10a:	6023      	str	r3, [r4, #0]
 800a10c:	b016      	add	sp, #88	; 0x58
 800a10e:	bd70      	pop	{r4, r5, r6, pc}

0800a110 <__smakebuf_r>:
 800a110:	898b      	ldrh	r3, [r1, #12]
 800a112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a114:	079d      	lsls	r5, r3, #30
 800a116:	4606      	mov	r6, r0
 800a118:	460c      	mov	r4, r1
 800a11a:	d507      	bpl.n	800a12c <__smakebuf_r+0x1c>
 800a11c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	6123      	str	r3, [r4, #16]
 800a124:	2301      	movs	r3, #1
 800a126:	6163      	str	r3, [r4, #20]
 800a128:	b002      	add	sp, #8
 800a12a:	bd70      	pop	{r4, r5, r6, pc}
 800a12c:	ab01      	add	r3, sp, #4
 800a12e:	466a      	mov	r2, sp
 800a130:	f7ff ffc9 	bl	800a0c6 <__swhatbuf_r>
 800a134:	9900      	ldr	r1, [sp, #0]
 800a136:	4605      	mov	r5, r0
 800a138:	4630      	mov	r0, r6
 800a13a:	f7fb fceb 	bl	8005b14 <_malloc_r>
 800a13e:	b948      	cbnz	r0, 800a154 <__smakebuf_r+0x44>
 800a140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a144:	059a      	lsls	r2, r3, #22
 800a146:	d4ef      	bmi.n	800a128 <__smakebuf_r+0x18>
 800a148:	f023 0303 	bic.w	r3, r3, #3
 800a14c:	f043 0302 	orr.w	r3, r3, #2
 800a150:	81a3      	strh	r3, [r4, #12]
 800a152:	e7e3      	b.n	800a11c <__smakebuf_r+0xc>
 800a154:	4b0d      	ldr	r3, [pc, #52]	; (800a18c <__smakebuf_r+0x7c>)
 800a156:	62b3      	str	r3, [r6, #40]	; 0x28
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	6020      	str	r0, [r4, #0]
 800a15c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a160:	81a3      	strh	r3, [r4, #12]
 800a162:	9b00      	ldr	r3, [sp, #0]
 800a164:	6163      	str	r3, [r4, #20]
 800a166:	9b01      	ldr	r3, [sp, #4]
 800a168:	6120      	str	r0, [r4, #16]
 800a16a:	b15b      	cbz	r3, 800a184 <__smakebuf_r+0x74>
 800a16c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a170:	4630      	mov	r0, r6
 800a172:	f000 f88d 	bl	800a290 <_isatty_r>
 800a176:	b128      	cbz	r0, 800a184 <__smakebuf_r+0x74>
 800a178:	89a3      	ldrh	r3, [r4, #12]
 800a17a:	f023 0303 	bic.w	r3, r3, #3
 800a17e:	f043 0301 	orr.w	r3, r3, #1
 800a182:	81a3      	strh	r3, [r4, #12]
 800a184:	89a0      	ldrh	r0, [r4, #12]
 800a186:	4305      	orrs	r5, r0
 800a188:	81a5      	strh	r5, [r4, #12]
 800a18a:	e7cd      	b.n	800a128 <__smakebuf_r+0x18>
 800a18c:	08009f25 	.word	0x08009f25

0800a190 <_malloc_usable_size_r>:
 800a190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a194:	1f18      	subs	r0, r3, #4
 800a196:	2b00      	cmp	r3, #0
 800a198:	bfbc      	itt	lt
 800a19a:	580b      	ldrlt	r3, [r1, r0]
 800a19c:	18c0      	addlt	r0, r0, r3
 800a19e:	4770      	bx	lr

0800a1a0 <__sread>:
 800a1a0:	b510      	push	{r4, lr}
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a8:	f000 f894 	bl	800a2d4 <_read_r>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	bfab      	itete	ge
 800a1b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1b2:	89a3      	ldrhlt	r3, [r4, #12]
 800a1b4:	181b      	addge	r3, r3, r0
 800a1b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1ba:	bfac      	ite	ge
 800a1bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1be:	81a3      	strhlt	r3, [r4, #12]
 800a1c0:	bd10      	pop	{r4, pc}

0800a1c2 <__swrite>:
 800a1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c6:	461f      	mov	r7, r3
 800a1c8:	898b      	ldrh	r3, [r1, #12]
 800a1ca:	05db      	lsls	r3, r3, #23
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	4616      	mov	r6, r2
 800a1d2:	d505      	bpl.n	800a1e0 <__swrite+0x1e>
 800a1d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d8:	2302      	movs	r3, #2
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f000 f868 	bl	800a2b0 <_lseek_r>
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1ea:	81a3      	strh	r3, [r4, #12]
 800a1ec:	4632      	mov	r2, r6
 800a1ee:	463b      	mov	r3, r7
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f6:	f000 b817 	b.w	800a228 <_write_r>

0800a1fa <__sseek>:
 800a1fa:	b510      	push	{r4, lr}
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a202:	f000 f855 	bl	800a2b0 <_lseek_r>
 800a206:	1c43      	adds	r3, r0, #1
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	bf15      	itete	ne
 800a20c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a20e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a212:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a216:	81a3      	strheq	r3, [r4, #12]
 800a218:	bf18      	it	ne
 800a21a:	81a3      	strhne	r3, [r4, #12]
 800a21c:	bd10      	pop	{r4, pc}

0800a21e <__sclose>:
 800a21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a222:	f000 b813 	b.w	800a24c <_close_r>
	...

0800a228 <_write_r>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	4d07      	ldr	r5, [pc, #28]	; (800a248 <_write_r+0x20>)
 800a22c:	4604      	mov	r4, r0
 800a22e:	4608      	mov	r0, r1
 800a230:	4611      	mov	r1, r2
 800a232:	2200      	movs	r2, #0
 800a234:	602a      	str	r2, [r5, #0]
 800a236:	461a      	mov	r2, r3
 800a238:	f7f7 f9cd 	bl	80015d6 <_write>
 800a23c:	1c43      	adds	r3, r0, #1
 800a23e:	d102      	bne.n	800a246 <_write_r+0x1e>
 800a240:	682b      	ldr	r3, [r5, #0]
 800a242:	b103      	cbz	r3, 800a246 <_write_r+0x1e>
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	bd38      	pop	{r3, r4, r5, pc}
 800a248:	20000438 	.word	0x20000438

0800a24c <_close_r>:
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	4d06      	ldr	r5, [pc, #24]	; (800a268 <_close_r+0x1c>)
 800a250:	2300      	movs	r3, #0
 800a252:	4604      	mov	r4, r0
 800a254:	4608      	mov	r0, r1
 800a256:	602b      	str	r3, [r5, #0]
 800a258:	f7f7 f9d9 	bl	800160e <_close>
 800a25c:	1c43      	adds	r3, r0, #1
 800a25e:	d102      	bne.n	800a266 <_close_r+0x1a>
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	b103      	cbz	r3, 800a266 <_close_r+0x1a>
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	bd38      	pop	{r3, r4, r5, pc}
 800a268:	20000438 	.word	0x20000438

0800a26c <_fstat_r>:
 800a26c:	b538      	push	{r3, r4, r5, lr}
 800a26e:	4d07      	ldr	r5, [pc, #28]	; (800a28c <_fstat_r+0x20>)
 800a270:	2300      	movs	r3, #0
 800a272:	4604      	mov	r4, r0
 800a274:	4608      	mov	r0, r1
 800a276:	4611      	mov	r1, r2
 800a278:	602b      	str	r3, [r5, #0]
 800a27a:	f7f7 f9d4 	bl	8001626 <_fstat>
 800a27e:	1c43      	adds	r3, r0, #1
 800a280:	d102      	bne.n	800a288 <_fstat_r+0x1c>
 800a282:	682b      	ldr	r3, [r5, #0]
 800a284:	b103      	cbz	r3, 800a288 <_fstat_r+0x1c>
 800a286:	6023      	str	r3, [r4, #0]
 800a288:	bd38      	pop	{r3, r4, r5, pc}
 800a28a:	bf00      	nop
 800a28c:	20000438 	.word	0x20000438

0800a290 <_isatty_r>:
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	4d06      	ldr	r5, [pc, #24]	; (800a2ac <_isatty_r+0x1c>)
 800a294:	2300      	movs	r3, #0
 800a296:	4604      	mov	r4, r0
 800a298:	4608      	mov	r0, r1
 800a29a:	602b      	str	r3, [r5, #0]
 800a29c:	f7f7 f9d3 	bl	8001646 <_isatty>
 800a2a0:	1c43      	adds	r3, r0, #1
 800a2a2:	d102      	bne.n	800a2aa <_isatty_r+0x1a>
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	b103      	cbz	r3, 800a2aa <_isatty_r+0x1a>
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}
 800a2ac:	20000438 	.word	0x20000438

0800a2b0 <_lseek_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	4d07      	ldr	r5, [pc, #28]	; (800a2d0 <_lseek_r+0x20>)
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	4608      	mov	r0, r1
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	602a      	str	r2, [r5, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	f7f7 f9cc 	bl	800165c <_lseek>
 800a2c4:	1c43      	adds	r3, r0, #1
 800a2c6:	d102      	bne.n	800a2ce <_lseek_r+0x1e>
 800a2c8:	682b      	ldr	r3, [r5, #0]
 800a2ca:	b103      	cbz	r3, 800a2ce <_lseek_r+0x1e>
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	bd38      	pop	{r3, r4, r5, pc}
 800a2d0:	20000438 	.word	0x20000438

0800a2d4 <_read_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4d07      	ldr	r5, [pc, #28]	; (800a2f4 <_read_r+0x20>)
 800a2d8:	4604      	mov	r4, r0
 800a2da:	4608      	mov	r0, r1
 800a2dc:	4611      	mov	r1, r2
 800a2de:	2200      	movs	r2, #0
 800a2e0:	602a      	str	r2, [r5, #0]
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f7f7 f95a 	bl	800159c <_read>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d102      	bne.n	800a2f2 <_read_r+0x1e>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	b103      	cbz	r3, 800a2f2 <_read_r+0x1e>
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	bd38      	pop	{r3, r4, r5, pc}
 800a2f4:	20000438 	.word	0x20000438

0800a2f8 <_init>:
 800a2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fa:	bf00      	nop
 800a2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2fe:	bc08      	pop	{r3}
 800a300:	469e      	mov	lr, r3
 800a302:	4770      	bx	lr

0800a304 <_fini>:
 800a304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a306:	bf00      	nop
 800a308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a30a:	bc08      	pop	{r3}
 800a30c:	469e      	mov	lr, r3
 800a30e:	4770      	bx	lr
