
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  08007358  08007358  00017358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aec  08007aec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007aec  08007aec  00017aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007af4  08007af4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007af4  08007af4  00017af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007af8  08007af8  00017af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000070  08007b6c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08007b6c  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001783b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003247  00000000  00000000  000378db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  0003ab28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  0003be28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027949  00000000  00000000  0003cfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f53  00000000  00000000  00064929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddc1c  00000000  00000000  0007b87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00159498  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058c8  00000000  00000000  001594e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007340 	.word	0x08007340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007340 	.word	0x08007340

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b974 	b.w	8000e2c <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	468e      	mov	lr, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14d      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4694      	mov	ip, r2
 8000b6e:	d969      	bls.n	8000c44 <__udivmoddi4+0xe8>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b152      	cbz	r2, 8000b8c <__udivmoddi4+0x30>
 8000b76:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7a:	f1c2 0120 	rsb	r1, r2, #32
 8000b7e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b82:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b86:	ea41 0e03 	orr.w	lr, r1, r3
 8000b8a:	4094      	lsls	r4, r2
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	0c21      	lsrs	r1, r4, #16
 8000b92:	fbbe f6f8 	udiv	r6, lr, r8
 8000b96:	fa1f f78c 	uxth.w	r7, ip
 8000b9a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ba2:	fb06 f107 	mul.w	r1, r6, r7
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bb2:	f080 811f 	bcs.w	8000df4 <__udivmoddi4+0x298>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 811c 	bls.w	8000df4 <__udivmoddi4+0x298>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb00 f707 	mul.w	r7, r0, r7
 8000bd4:	42a7      	cmp	r7, r4
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x92>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be0:	f080 810a 	bcs.w	8000df8 <__udivmoddi4+0x29c>
 8000be4:	42a7      	cmp	r7, r4
 8000be6:	f240 8107 	bls.w	8000df8 <__udivmoddi4+0x29c>
 8000bea:	4464      	add	r4, ip
 8000bec:	3802      	subs	r0, #2
 8000bee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bf2:	1be4      	subs	r4, r4, r7
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	b11d      	cbz	r5, 8000c00 <__udivmoddi4+0xa4>
 8000bf8:	40d4      	lsrs	r4, r2
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e9c5 4300 	strd	r4, r3, [r5]
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0xc2>
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	f000 80ef 	beq.w	8000dee <__udivmoddi4+0x292>
 8000c10:	2600      	movs	r6, #0
 8000c12:	e9c5 0100 	strd	r0, r1, [r5]
 8000c16:	4630      	mov	r0, r6
 8000c18:	4631      	mov	r1, r6
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fab3 f683 	clz	r6, r3
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d14a      	bne.n	8000cbc <__udivmoddi4+0x160>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d302      	bcc.n	8000c30 <__udivmoddi4+0xd4>
 8000c2a:	4282      	cmp	r2, r0
 8000c2c:	f200 80f9 	bhi.w	8000e22 <__udivmoddi4+0x2c6>
 8000c30:	1a84      	subs	r4, r0, r2
 8000c32:	eb61 0303 	sbc.w	r3, r1, r3
 8000c36:	2001      	movs	r0, #1
 8000c38:	469e      	mov	lr, r3
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	d0e0      	beq.n	8000c00 <__udivmoddi4+0xa4>
 8000c3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c42:	e7dd      	b.n	8000c00 <__udivmoddi4+0xa4>
 8000c44:	b902      	cbnz	r2, 8000c48 <__udivmoddi4+0xec>
 8000c46:	deff      	udf	#255	; 0xff
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	f040 8092 	bne.w	8000d76 <__udivmoddi4+0x21a>
 8000c52:	eba1 010c 	sub.w	r1, r1, ip
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f fe8c 	uxth.w	lr, ip
 8000c5e:	2601      	movs	r6, #1
 8000c60:	0c20      	lsrs	r0, r4, #16
 8000c62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c66:	fb07 1113 	mls	r1, r7, r3, r1
 8000c6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c6e:	fb0e f003 	mul.w	r0, lr, r3
 8000c72:	4288      	cmp	r0, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x12c>
 8000c76:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x12a>
 8000c80:	4288      	cmp	r0, r1
 8000c82:	f200 80cb 	bhi.w	8000e1c <__udivmoddi4+0x2c0>
 8000c86:	4643      	mov	r3, r8
 8000c88:	1a09      	subs	r1, r1, r0
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c90:	fb07 1110 	mls	r1, r7, r0, r1
 8000c94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c98:	fb0e fe00 	mul.w	lr, lr, r0
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x156>
 8000ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x154>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f200 80bb 	bhi.w	8000e26 <__udivmoddi4+0x2ca>
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	eba4 040e 	sub.w	r4, r4, lr
 8000cb6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cba:	e79c      	b.n	8000bf6 <__udivmoddi4+0x9a>
 8000cbc:	f1c6 0720 	rsb	r7, r6, #32
 8000cc0:	40b3      	lsls	r3, r6
 8000cc2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cc6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cca:	fa20 f407 	lsr.w	r4, r0, r7
 8000cce:	fa01 f306 	lsl.w	r3, r1, r6
 8000cd2:	431c      	orrs	r4, r3
 8000cd4:	40f9      	lsrs	r1, r7
 8000cd6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cda:	fa00 f306 	lsl.w	r3, r0, r6
 8000cde:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ce2:	0c20      	lsrs	r0, r4, #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cfa:	d90b      	bls.n	8000d14 <__udivmoddi4+0x1b8>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d04:	f080 8088 	bcs.w	8000e18 <__udivmoddi4+0x2bc>
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	f240 8085 	bls.w	8000e18 <__udivmoddi4+0x2bc>
 8000d0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d12:	4461      	add	r1, ip
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d28:	458e      	cmp	lr, r1
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x1e2>
 8000d2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d30:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d34:	d26c      	bcs.n	8000e10 <__udivmoddi4+0x2b4>
 8000d36:	458e      	cmp	lr, r1
 8000d38:	d96a      	bls.n	8000e10 <__udivmoddi4+0x2b4>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	4461      	add	r1, ip
 8000d3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d42:	fba0 9402 	umull	r9, r4, r0, r2
 8000d46:	eba1 010e 	sub.w	r1, r1, lr
 8000d4a:	42a1      	cmp	r1, r4
 8000d4c:	46c8      	mov	r8, r9
 8000d4e:	46a6      	mov	lr, r4
 8000d50:	d356      	bcc.n	8000e00 <__udivmoddi4+0x2a4>
 8000d52:	d053      	beq.n	8000dfc <__udivmoddi4+0x2a0>
 8000d54:	b15d      	cbz	r5, 8000d6e <__udivmoddi4+0x212>
 8000d56:	ebb3 0208 	subs.w	r2, r3, r8
 8000d5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d62:	fa22 f306 	lsr.w	r3, r2, r6
 8000d66:	40f1      	lsrs	r1, r6
 8000d68:	431f      	orrs	r7, r3
 8000d6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d6e:	2600      	movs	r6, #0
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	f1c2 0320 	rsb	r3, r2, #32
 8000d7a:	40d8      	lsrs	r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa21 f303 	lsr.w	r3, r1, r3
 8000d84:	4091      	lsls	r1, r2
 8000d86:	4301      	orrs	r1, r0
 8000d88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8c:	fa1f fe8c 	uxth.w	lr, ip
 8000d90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d94:	fb07 3610 	mls	r6, r7, r0, r3
 8000d98:	0c0b      	lsrs	r3, r1, #16
 8000d9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000da2:	429e      	cmp	r6, r3
 8000da4:	fa04 f402 	lsl.w	r4, r4, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x260>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000db2:	d22f      	bcs.n	8000e14 <__udivmoddi4+0x2b8>
 8000db4:	429e      	cmp	r6, r3
 8000db6:	d92d      	bls.n	8000e14 <__udivmoddi4+0x2b8>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	b289      	uxth	r1, r1
 8000dc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000dc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x28a>
 8000dd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ddc:	d216      	bcs.n	8000e0c <__udivmoddi4+0x2b0>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d914      	bls.n	8000e0c <__udivmoddi4+0x2b0>
 8000de2:	3e02      	subs	r6, #2
 8000de4:	4461      	add	r1, ip
 8000de6:	1ac9      	subs	r1, r1, r3
 8000de8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dec:	e738      	b.n	8000c60 <__udivmoddi4+0x104>
 8000dee:	462e      	mov	r6, r5
 8000df0:	4628      	mov	r0, r5
 8000df2:	e705      	b.n	8000c00 <__udivmoddi4+0xa4>
 8000df4:	4606      	mov	r6, r0
 8000df6:	e6e3      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000df8:	4618      	mov	r0, r3
 8000dfa:	e6f8      	b.n	8000bee <__udivmoddi4+0x92>
 8000dfc:	454b      	cmp	r3, r9
 8000dfe:	d2a9      	bcs.n	8000d54 <__udivmoddi4+0x1f8>
 8000e00:	ebb9 0802 	subs.w	r8, r9, r2
 8000e04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e08:	3801      	subs	r0, #1
 8000e0a:	e7a3      	b.n	8000d54 <__udivmoddi4+0x1f8>
 8000e0c:	4646      	mov	r6, r8
 8000e0e:	e7ea      	b.n	8000de6 <__udivmoddi4+0x28a>
 8000e10:	4620      	mov	r0, r4
 8000e12:	e794      	b.n	8000d3e <__udivmoddi4+0x1e2>
 8000e14:	4640      	mov	r0, r8
 8000e16:	e7d1      	b.n	8000dbc <__udivmoddi4+0x260>
 8000e18:	46d0      	mov	r8, sl
 8000e1a:	e77b      	b.n	8000d14 <__udivmoddi4+0x1b8>
 8000e1c:	3b02      	subs	r3, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	e732      	b.n	8000c88 <__udivmoddi4+0x12c>
 8000e22:	4630      	mov	r0, r6
 8000e24:	e709      	b.n	8000c3a <__udivmoddi4+0xde>
 8000e26:	4464      	add	r4, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e742      	b.n	8000cb2 <__udivmoddi4+0x156>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB8   ------> S_TIM16_CH1
*/
void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	4b4e      	ldr	r3, [pc, #312]	; (8000f80 <MX_GPIO_Init+0x150>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a4d      	ldr	r2, [pc, #308]	; (8000f80 <MX_GPIO_Init+0x150>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b4b      	ldr	r3, [pc, #300]	; (8000f80 <MX_GPIO_Init+0x150>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5e:	4b48      	ldr	r3, [pc, #288]	; (8000f80 <MX_GPIO_Init+0x150>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a47      	ldr	r2, [pc, #284]	; (8000f80 <MX_GPIO_Init+0x150>)
 8000e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b45      	ldr	r3, [pc, #276]	; (8000f80 <MX_GPIO_Init+0x150>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b42      	ldr	r3, [pc, #264]	; (8000f80 <MX_GPIO_Init+0x150>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	4a41      	ldr	r2, [pc, #260]	; (8000f80 <MX_GPIO_Init+0x150>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b3f      	ldr	r3, [pc, #252]	; (8000f80 <MX_GPIO_Init+0x150>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <MX_GPIO_Init+0x150>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	4a3b      	ldr	r2, [pc, #236]	; (8000f80 <MX_GPIO_Init+0x150>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9a:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <MX_GPIO_Init+0x150>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f248 11b0 	movw	r1, #33200	; 0x81b0
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f001 fc54 	bl	800275c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	4832      	ldr	r0, [pc, #200]	; (8000f84 <MX_GPIO_Init+0x154>)
 8000eba:	f001 fc4f 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2160      	movs	r1, #96	; 0x60
 8000ec2:	4831      	ldr	r0, [pc, #196]	; (8000f88 <MX_GPIO_Init+0x158>)
 8000ec4:	f001 fc4a 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ece:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4829      	ldr	r0, [pc, #164]	; (8000f84 <MX_GPIO_Init+0x154>)
 8000ee0:	f001 fac2 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000ee4:	f248 13b0 	movw	r3, #33200	; 0x81b0
 8000ee8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f001 fab2 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000f04:	2340      	movs	r3, #64	; 0x40
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	f001 faa5 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	4813      	ldr	r0, [pc, #76]	; (8000f84 <MX_GPIO_Init+0x154>)
 8000f36:	f001 fa97 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 8000f3a:	2360      	movs	r3, #96	; 0x60
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <MX_GPIO_Init+0x158>)
 8000f52:	f001 fa89 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000f68:	230e      	movs	r3, #14
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_GPIO_Init+0x158>)
 8000f74:	f001 fa78 	bl	8002468 <HAL_GPIO_Init>

}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48000800 	.word	0x48000800
 8000f88:	48000400 	.word	0x48000400

08000f8c <_ZN3PinC1Ev>:
struct Pin {
  GPIO_TypeDef* port;
  uint16_t pin;
  bool valid;

  Pin() : port(nullptr), pin(0), valid(false) {}
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	809a      	strh	r2, [r3, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	719a      	strb	r2, [r3, #6]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <_ZN3PinC1EP12GPIO_TypeDeft>:
  Pin(GPIO_TypeDef* p, uint16_t pn) : port(p), pin(pn), valid(true) {}
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	80fb      	strh	r3, [r7, #6]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	88fa      	ldrh	r2, [r7, #6]
 8000fcc:	809a      	strh	r2, [r3, #4]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	719a      	strb	r2, [r3, #6]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <_Z5printPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff f8ef 	bl	80001d0 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <_Z5printPKc+0x2c>)
 8000ffe:	f004 fa47 	bl	8005490 <HAL_UART_Transmit>
 8001002:	4603      	mov	r3, r0
 8001004:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000254 	.word	0x20000254

08001014 <printf>:
int printf(const char* s, ...){
 8001014:	b40f      	push	{r0, r1, r2, r3}
 8001016:	b580      	push	{r7, lr}
 8001018:	b0c2      	sub	sp, #264	; 0x108
 800101a:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 800101c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001028:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 800102a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800102e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001032:	f107 0008 	add.w	r0, r7, #8
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800103c:	f005 fb98 	bl	8006770 <vsiprintf>
	perror(buffer);
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	4618      	mov	r0, r3
 8001046:	f005 f97d 	bl	8006344 <perror>
	print(buffer);
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ffc8 	bl	8000fe4 <_Z5printPKc>
	va_end(args);
//	#endif
	return strlen(buffer);
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff f8b9 	bl	80001d0 <strlen>
 800105e:	4603      	mov	r3, r0
}
 8001060:	4618      	mov	r0, r3
 8001062:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001066:	46bd      	mov	sp, r7
 8001068:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800106c:	b004      	add	sp, #16
 800106e:	4770      	bx	lr

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b0e3      	sub	sp, #396	; 0x18c
 8001074:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f001 f871 	bl	800215c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f8cd 	bl	8001218 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f7ff fed7 	bl	8000e30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001082:	f000 fd4f 	bl	8001b24 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001086:	f000 f92d 	bl	80012e4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800108a:	f000 f969 	bl	8001360 <MX_SPI2_Init>
  MX_SPI3_Init();
 800108e:	f000 f9a5 	bl	80013dc <MX_SPI3_Init>
  MX_TIM1_Init();
 8001092:	f000 fb73 	bl	800177c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001096:	f000 fc1d 	bl	80018d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderData_1 = 99;
 800109a:	2363      	movs	r3, #99	; 0x63
 800109c:	f8a7 3166 	strh.w	r3, [r7, #358]	; 0x166
  uint16_t encoderData_2 = 99;
 80010a0:	2363      	movs	r3, #99	; 0x63
 80010a2:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
  uint16_t encoderData_3 = 99;
 80010a6:	2363      	movs	r3, #99	; 0x63
 80010a8:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
  uint16_t encoder_max = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160
  uint16_t encoder_min = 4100;
 80010b2:	f241 0304 	movw	r3, #4100	; 0x1004
 80010b6:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
  HAL_TIM_Base_Start(&htim1);
 80010ba:	4851      	ldr	r0, [pc, #324]	; (8001200 <main+0x190>)
 80010bc:	f003 f9b0 	bl	8004420 <HAL_TIM_Base_Start>


  /*---CYTRON setup---*/
  Pin CYTRON_DIR_1(CYTRON_DIR_1_GPIO_Port, CYTRON_DIR_1_Pin);
 80010c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80010c4:	2220      	movs	r2, #32
 80010c6:	494f      	ldr	r1, [pc, #316]	; (8001204 <main+0x194>)
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff73 	bl	8000fb4 <_ZN3PinC1EP12GPIO_TypeDeft>
  Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin);
 80010ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010d2:	2208      	movs	r2, #8
 80010d4:	494b      	ldr	r1, [pc, #300]	; (8001204 <main+0x194>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff6c 	bl	8000fb4 <_ZN3PinC1EP12GPIO_TypeDeft>
  Pin AMT22_1(GPIOC, GPIO_PIN_7);
 80010dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	4949      	ldr	r1, [pc, #292]	; (8001208 <main+0x198>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff65 	bl	8000fb4 <_ZN3PinC1EP12GPIO_TypeDeft>

  int32_t  CH2_DC = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80010f0:	2104      	movs	r1, #4
 80010f2:	4846      	ldr	r0, [pc, #280]	; (800120c <main+0x19c>)
 80010f4:	f003 fa42 	bl	800457c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80010f8:	4b44      	ldr	r3, [pc, #272]	; (800120c <main+0x19c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2200      	movs	r2, #0
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(10);
 8001100:	200a      	movs	r0, #10
 8001102:	f001 f8a7 	bl	8002254 <HAL_Delay>
  RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);
 8001106:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff3e 	bl	8000f8c <_ZN3PinC1Ev>
 8001110:	463c      	mov	r4, r7
 8001112:	aa05      	add	r2, sp, #20
 8001114:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001118:	e893 0003 	ldmia.w	r3, {r0, r1}
 800111c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001120:	2300      	movs	r3, #0
 8001122:	9304      	str	r3, [sp, #16]
 8001124:	aa02      	add	r2, sp, #8
 8001126:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800112a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800112e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001132:	466a      	mov	r2, sp
 8001134:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001138:	e893 0003 	ldmia.w	r3, {r0, r1}
 800113c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001140:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 80011f0 <main+0x180>
 8001144:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 80011f8 <main+0x188>
 8001148:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800114c:	cb0c      	ldmia	r3, {r2, r3}
 800114e:	4930      	ldr	r1, [pc, #192]	; (8001210 <main+0x1a0>)
 8001150:	4620      	mov	r0, r4
 8001152:	f000 fdb2 	bl	8001cba <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>
    
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 70);
 8001156:	4b2d      	ldr	r3, [pc, #180]	; (800120c <main+0x19c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2246      	movs	r2, #70	; 0x46
 800115c:	639a      	str	r2, [r3, #56]	; 0x38



  /*---AMT22 setup---*/
  resetAMT22(&hspi1, GPIOC, GPIO_PIN_7, &htim1);
 800115e:	4b28      	ldr	r3, [pc, #160]	; (8001200 <main+0x190>)
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	4929      	ldr	r1, [pc, #164]	; (8001208 <main+0x198>)
 8001164:	482a      	ldr	r0, [pc, #168]	; (8001210 <main+0x1a0>)
 8001166:	f004 fefe 	bl	8005f66 <resetAMT22>

  /*---ESC setup---*/
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800116a:	2104      	movs	r1, #4
 800116c:	4824      	ldr	r0, [pc, #144]	; (8001200 <main+0x190>)
 800116e:	f003 fa05 	bl	800457c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500-1);
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <main+0x190>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f240 52db 	movw	r2, #1499	; 0x5db
 800117a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    //AMT22 test
	  encoderData_1 = getPositionSPI(&hspi1, GPIOC, GPIO_PIN_7, 12, &htim1);
 800117c:	4b20      	ldr	r3, [pc, #128]	; (8001200 <main+0x190>)
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	230c      	movs	r3, #12
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	4920      	ldr	r1, [pc, #128]	; (8001208 <main+0x198>)
 8001186:	4822      	ldr	r0, [pc, #136]	; (8001210 <main+0x1a0>)
 8001188:	f004 fe5d 	bl	8005e46 <getPositionSPI>
 800118c:	4603      	mov	r3, r0
 800118e:	f8a7 3166 	strh.w	r3, [r7, #358]	; 0x166
	  // encoderData_2 = getPositionSPI(&hspi2, GPIOB, GPIO_PIN_6, 12, &htim1);
	  // encoderData_3 = getPositionSPI(&hspi3, GPIOA, GPIO_PIN_8, 12, &htim1);
	  printf("encoder 1 gives %d\r\n", encoderData_1);
 8001192:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 8001196:	4619      	mov	r1, r3
 8001198:	481e      	ldr	r0, [pc, #120]	; (8001214 <main+0x1a4>)
 800119a:	f7ff ff3b 	bl	8001014 <printf>
    // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 60);
    // HAL_Delay(1000);


    /*---ESC test---*/
    HAL_Delay(1000);
 800119e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a2:	f001 f857 	bl	8002254 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500-1);
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <main+0x190>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f240 52db 	movw	r2, #1499	; 0x5db
 80011ae:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(1000);
 80011b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b4:	f001 f84e 	bl	8002254 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1600-1);
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <main+0x190>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f240 623f 	movw	r2, #1599	; 0x63f
 80011c0:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(1000);
 80011c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c6:	f001 f845 	bl	8002254 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500-1);
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <main+0x190>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f240 52db 	movw	r2, #1499	; 0x5db
 80011d2:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(1000);
 80011d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d8:	f001 f83c 	bl	8002254 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1400-1);
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <main+0x190>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f240 5277 	movw	r2, #1399	; 0x577
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38





	  HAL_Delay(10);
 80011e6:	200a      	movs	r0, #10
 80011e8:	f001 f834 	bl	8002254 <HAL_Delay>
	  encoderData_1 = getPositionSPI(&hspi1, GPIOC, GPIO_PIN_7, 12, &htim1);
 80011ec:	e7c6      	b.n	800117c <main+0x10c>
 80011ee:	bf00      	nop
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40767000 	.word	0x40767000
	...
 8001200:	200001bc 	.word	0x200001bc
 8001204:	48000400 	.word	0x48000400
 8001208:	48000800 	.word	0x48000800
 800120c:	20000208 	.word	0x20000208
 8001210:	2000008c 	.word	0x2000008c
 8001214:	08007358 	.word	0x08007358

08001218 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b096      	sub	sp, #88	; 0x58
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2244      	movs	r2, #68	; 0x44
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f004 ff0a 	bl	8006040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	463b      	mov	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800123a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800123e:	f001 fab3 	bl	80027a8 <HAL_PWREx_ControlVoltageScaling>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001252:	f000 f841 	bl	80012d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001256:	2302      	movs	r3, #2
 8001258:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800125e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001260:	2310      	movs	r3, #16
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001264:	2302      	movs	r3, #2
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001268:	2302      	movs	r3, #2
 800126a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800126c:	2301      	movs	r3, #1
 800126e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001270:	230a      	movs	r3, #10
 8001272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001274:	2307      	movs	r3, #7
 8001276:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001278:	2302      	movs	r3, #2
 800127a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800127c:	2302      	movs	r3, #2
 800127e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4618      	mov	r0, r3
 8001286:	f001 fae5 	bl	8002854 <HAL_RCC_OscConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 800129a:	f000 f81d 	bl	80012d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129e:	230f      	movs	r3, #15
 80012a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a2:	2303      	movs	r3, #3
 80012a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012b2:	463b      	mov	r3, r7
 80012b4:	2104      	movs	r1, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fee0 	bl	800307c <HAL_RCC_ClockConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bf14      	ite	ne
 80012c2:	2301      	movne	r3, #1
 80012c4:	2300      	moveq	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 80012cc:	f000 f804 	bl	80012d8 <Error_Handler>
  }
}
 80012d0:	bf00      	nop
 80012d2:	3758      	adds	r7, #88	; 0x58
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012dc:	b672      	cpsid	i
}
 80012de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <Error_Handler+0x8>
	...

080012e4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <MX_SPI1_Init+0x74>)
 80012ea:	4a1c      	ldr	r2, [pc, #112]	; (800135c <MX_SPI1_Init+0x78>)
 80012ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_SPI1_Init+0x74>)
 80012f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <MX_SPI1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_SPI1_Init+0x74>)
 80012fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001302:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_SPI1_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_SPI1_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_SPI1_Init+0x74>)
 8001312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001316:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_SPI1_Init+0x74>)
 800131a:	2220      	movs	r2, #32
 800131c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_SPI1_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_SPI1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_SPI1_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_SPI1_Init+0x74>)
 8001332:	2207      	movs	r2, #7
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_SPI1_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_SPI1_Init+0x74>)
 800133e:	2208      	movs	r2, #8
 8001340:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_SPI1_Init+0x74>)
 8001344:	f002 fbfa 	bl	8003b3c <HAL_SPI_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800134e:	f7ff ffc3 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000008c 	.word	0x2000008c
 800135c:	40013000 	.word	0x40013000

08001360 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_SPI2_Init+0x74>)
 8001366:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <MX_SPI2_Init+0x78>)
 8001368:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_SPI2_Init+0x74>)
 800136c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001370:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_SPI2_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_SPI2_Init+0x74>)
 800137a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800137e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_SPI2_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_SPI2_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_SPI2_Init+0x74>)
 800138e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001392:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_SPI2_Init+0x74>)
 8001396:	2220      	movs	r2, #32
 8001398:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_SPI2_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_SPI2_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_SPI2_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_SPI2_Init+0x74>)
 80013ae:	2207      	movs	r2, #7
 80013b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_SPI2_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_SPI2_Init+0x74>)
 80013ba:	2208      	movs	r2, #8
 80013bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_SPI2_Init+0x74>)
 80013c0:	f002 fbbc 	bl	8003b3c <HAL_SPI_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80013ca:	f7ff ff85 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000f0 	.word	0x200000f0
 80013d8:	40003800 	.word	0x40003800

080013dc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_SPI3_Init+0x74>)
 80013e2:	4a1c      	ldr	r2, [pc, #112]	; (8001454 <MX_SPI3_Init+0x78>)
 80013e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <MX_SPI3_Init+0x74>)
 80013e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_SPI3_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <MX_SPI3_Init+0x74>)
 80013f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013fa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <MX_SPI3_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <MX_SPI3_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_SPI3_Init+0x74>)
 800140a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800140e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_SPI3_Init+0x74>)
 8001412:	2220      	movs	r2, #32
 8001414:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_SPI3_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_SPI3_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_SPI3_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_SPI3_Init+0x74>)
 800142a:	2207      	movs	r2, #7
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_SPI3_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_SPI3_Init+0x74>)
 8001436:	2208      	movs	r2, #8
 8001438:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_SPI3_Init+0x74>)
 800143c:	f002 fb7e 	bl	8003b3c <HAL_SPI_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001446:	f7ff ff47 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000154 	.word	0x20000154
 8001454:	40003c00 	.word	0x40003c00

08001458 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a47      	ldr	r2, [pc, #284]	; (8001594 <HAL_SPI_MspInit+0x13c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12a      	bne.n	80014d0 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800147a:	4b47      	ldr	r3, [pc, #284]	; (8001598 <HAL_SPI_MspInit+0x140>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147e:	4a46      	ldr	r2, [pc, #280]	; (8001598 <HAL_SPI_MspInit+0x140>)
 8001480:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001484:	6613      	str	r3, [r2, #96]	; 0x60
 8001486:	4b44      	ldr	r3, [pc, #272]	; (8001598 <HAL_SPI_MspInit+0x140>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148e:	623b      	str	r3, [r7, #32]
 8001490:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <HAL_SPI_MspInit+0x140>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	4a40      	ldr	r2, [pc, #256]	; (8001598 <HAL_SPI_MspInit+0x140>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149e:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <HAL_SPI_MspInit+0x140>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80014aa:	f641 0302 	movw	r3, #6146	; 0x1802
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014bc:	2305      	movs	r3, #5
 80014be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	4619      	mov	r1, r3
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ca:	f000 ffcd 	bl	8002468 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80014ce:	e05c      	b.n	800158a <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a31      	ldr	r2, [pc, #196]	; (800159c <HAL_SPI_MspInit+0x144>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d129      	bne.n	800152e <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <HAL_SPI_MspInit+0x140>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014de:	4a2e      	ldr	r2, [pc, #184]	; (8001598 <HAL_SPI_MspInit+0x140>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e4:	6593      	str	r3, [r2, #88]	; 0x58
 80014e6:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <HAL_SPI_MspInit+0x140>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ee:	61bb      	str	r3, [r7, #24]
 80014f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_SPI_MspInit+0x140>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	4a28      	ldr	r2, [pc, #160]	; (8001598 <HAL_SPI_MspInit+0x140>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <HAL_SPI_MspInit+0x140>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800150a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800151c:	2305      	movs	r3, #5
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	4619      	mov	r1, r3
 8001526:	481e      	ldr	r0, [pc, #120]	; (80015a0 <HAL_SPI_MspInit+0x148>)
 8001528:	f000 ff9e 	bl	8002468 <HAL_GPIO_Init>
}
 800152c:	e02d      	b.n	800158a <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI3)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <HAL_SPI_MspInit+0x14c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d128      	bne.n	800158a <HAL_SPI_MspInit+0x132>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_SPI_MspInit+0x140>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	4a16      	ldr	r2, [pc, #88]	; (8001598 <HAL_SPI_MspInit+0x140>)
 800153e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001542:	6593      	str	r3, [r2, #88]	; 0x58
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_SPI_MspInit+0x140>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_SPI_MspInit+0x140>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001554:	4a10      	ldr	r2, [pc, #64]	; (8001598 <HAL_SPI_MspInit+0x140>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_SPI_MspInit+0x140>)
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001568:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800157a:	2306      	movs	r3, #6
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	4808      	ldr	r0, [pc, #32]	; (80015a8 <HAL_SPI_MspInit+0x150>)
 8001586:	f000 ff6f 	bl	8002468 <HAL_GPIO_Init>
}
 800158a:	bf00      	nop
 800158c:	3738      	adds	r7, #56	; 0x38
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40013000 	.word	0x40013000
 8001598:	40021000 	.word	0x40021000
 800159c:	40003800 	.word	0x40003800
 80015a0:	48000400 	.word	0x48000400
 80015a4:	40003c00 	.word	0x40003c00
 80015a8:	48000800 	.word	0x48000800

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_MspInit+0x44>)
 80015b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <HAL_MspInit+0x44>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6613      	str	r3, [r2, #96]	; 0x60
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_MspInit+0x44>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_MspInit+0x44>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_MspInit+0x44>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	6593      	str	r3, [r2, #88]	; 0x58
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_MspInit+0x44>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001640:	f000 fde8 	bl	8002214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	e00a      	b.n	8001670 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800165a:	f3af 8000 	nop.w
 800165e:	4601      	mov	r1, r0
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	60ba      	str	r2, [r7, #8]
 8001666:	b2ca      	uxtb	r2, r1
 8001668:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf0      	blt.n	800165a <_read+0x12>
  }

  return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e009      	b.n	80016a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	dbf1      	blt.n	8001694 <_write+0x12>
  }
  return len;
 80016b0:	687b      	ldr	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_close>:

int _close(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f004 fc66 	bl	8005fec <__errno>
 8001720:	4603      	mov	r3, r0
 8001722:	220c      	movs	r2, #12
 8001724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <_sbrk+0x64>)
 800173c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20010000 	.word	0x20010000
 800174c:	00000400 	.word	0x00000400
 8001750:	200001b8 	.word	0x200001b8
 8001754:	200002f0 	.word	0x200002f0

08001758 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <SystemInit+0x20>)
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <SystemInit+0x20>)
 8001764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b09a      	sub	sp, #104	; 0x68
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001782:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	615a      	str	r2, [r3, #20]
 80017ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	222c      	movs	r2, #44	; 0x2c
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 fc42 	bl	8006040 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017bc:	4b43      	ldr	r3, [pc, #268]	; (80018cc <MX_TIM1_Init+0x150>)
 80017be:	4a44      	ldr	r2, [pc, #272]	; (80018d0 <MX_TIM1_Init+0x154>)
 80017c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80017c2:	4b42      	ldr	r3, [pc, #264]	; (80018cc <MX_TIM1_Init+0x150>)
 80017c4:	224f      	movs	r2, #79	; 0x4f
 80017c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b40      	ldr	r3, [pc, #256]	; (80018cc <MX_TIM1_Init+0x150>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500-1;
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <MX_TIM1_Init+0x150>)
 80017d0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80017d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <MX_TIM1_Init+0x150>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017dc:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <MX_TIM1_Init+0x150>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e2:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <MX_TIM1_Init+0x150>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017e8:	4838      	ldr	r0, [pc, #224]	; (80018cc <MX_TIM1_Init+0x150>)
 80017ea:	f002 fdc1 	bl	8004370 <HAL_TIM_Base_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80017f4:	f7ff fd70 	bl	80012d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001802:	4619      	mov	r1, r3
 8001804:	4831      	ldr	r0, [pc, #196]	; (80018cc <MX_TIM1_Init+0x150>)
 8001806:	f003 f8ab 	bl	8004960 <HAL_TIM_ConfigClockSource>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001810:	f7ff fd62 	bl	80012d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001814:	482d      	ldr	r0, [pc, #180]	; (80018cc <MX_TIM1_Init+0x150>)
 8001816:	f002 fe4f 	bl	80044b8 <HAL_TIM_PWM_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001820:	f7ff fd5a 	bl	80012d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001830:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001834:	4619      	mov	r1, r3
 8001836:	4825      	ldr	r0, [pc, #148]	; (80018cc <MX_TIM1_Init+0x150>)
 8001838:	f003 fcfe 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001842:	f7ff fd49 	bl	80012d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001846:	2360      	movs	r3, #96	; 0x60
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800184e:	2300      	movs	r3, #0
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001852:	2300      	movs	r3, #0
 8001854:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001862:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001866:	2204      	movs	r2, #4
 8001868:	4619      	mov	r1, r3
 800186a:	4818      	ldr	r0, [pc, #96]	; (80018cc <MX_TIM1_Init+0x150>)
 800186c:	f002 ff64 	bl	8004738 <HAL_TIM_PWM_ConfigChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001876:	f7ff fd2f 	bl	80012d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800188e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001892:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800189c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4807      	ldr	r0, [pc, #28]	; (80018cc <MX_TIM1_Init+0x150>)
 80018b0:	f003 fd28 	bl	8005304 <HAL_TIMEx_ConfigBreakDeadTime>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80018ba:	f7ff fd0d 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018be:	4803      	ldr	r0, [pc, #12]	; (80018cc <MX_TIM1_Init+0x150>)
 80018c0:	f000 f8d4 	bl	8001a6c <HAL_TIM_MspPostInit>

}
 80018c4:	bf00      	nop
 80018c6:	3768      	adds	r7, #104	; 0x68
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200001bc 	.word	0x200001bc
 80018d0:	40012c00 	.word	0x40012c00

080018d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08e      	sub	sp, #56	; 0x38
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f4:	463b      	mov	r3, r7
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]
 8001902:	615a      	str	r2, [r3, #20]
 8001904:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001906:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <MX_TIM2_Init+0xe8>)
 8001908:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <MX_TIM2_Init+0xe8>)
 8001910:	224f      	movs	r2, #79	; 0x4f
 8001912:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b29      	ldr	r3, [pc, #164]	; (80019bc <MX_TIM2_Init+0xe8>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800191a:	4b28      	ldr	r3, [pc, #160]	; (80019bc <MX_TIM2_Init+0xe8>)
 800191c:	2263      	movs	r2, #99	; 0x63
 800191e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b26      	ldr	r3, [pc, #152]	; (80019bc <MX_TIM2_Init+0xe8>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001926:	4b25      	ldr	r3, [pc, #148]	; (80019bc <MX_TIM2_Init+0xe8>)
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800192c:	4823      	ldr	r0, [pc, #140]	; (80019bc <MX_TIM2_Init+0xe8>)
 800192e:	f002 fd1f 	bl	8004370 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001938:	f7ff fcce 	bl	80012d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001946:	4619      	mov	r1, r3
 8001948:	481c      	ldr	r0, [pc, #112]	; (80019bc <MX_TIM2_Init+0xe8>)
 800194a:	f003 f809 	bl	8004960 <HAL_TIM_ConfigClockSource>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001954:	f7ff fcc0 	bl	80012d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001958:	4818      	ldr	r0, [pc, #96]	; (80019bc <MX_TIM2_Init+0xe8>)
 800195a:	f002 fdad 	bl	80044b8 <HAL_TIM_PWM_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001964:	f7ff fcb8 	bl	80012d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	4811      	ldr	r0, [pc, #68]	; (80019bc <MX_TIM2_Init+0xe8>)
 8001978:	f003 fc5e 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001982:	f7ff fca9 	bl	80012d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001986:	2360      	movs	r3, #96	; 0x60
 8001988:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001996:	463b      	mov	r3, r7
 8001998:	2204      	movs	r2, #4
 800199a:	4619      	mov	r1, r3
 800199c:	4807      	ldr	r0, [pc, #28]	; (80019bc <MX_TIM2_Init+0xe8>)
 800199e:	f002 fecb 	bl	8004738 <HAL_TIM_PWM_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019a8:	f7ff fc96 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <MX_TIM2_Init+0xe8>)
 80019ae:	f000 f85d 	bl	8001a6c <HAL_TIM_MspPostInit>

}
 80019b2:	bf00      	nop
 80019b4:	3738      	adds	r7, #56	; 0x38
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000208 	.word	0x20000208

080019c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <HAL_TIM_Base_MspInit+0xa0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10c      	bne.n	80019fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_TIM_Base_MspInit+0xa4>)
 80019e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e6:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <HAL_TIM_Base_MspInit+0xa4>)
 80019e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019ec:	6613      	str	r3, [r2, #96]	; 0x60
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_TIM_Base_MspInit+0xa4>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80019fa:	e02d      	b.n	8001a58 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a04:	d128      	bne.n	8001a58 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_TIM_Base_MspInit+0xa4>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	4a16      	ldr	r2, [pc, #88]	; (8001a64 <HAL_TIM_Base_MspInit+0xa4>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6593      	str	r3, [r2, #88]	; 0x58
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_TIM_Base_MspInit+0xa4>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_TIM_Base_MspInit+0xa4>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	4a10      	ldr	r2, [pc, #64]	; (8001a64 <HAL_TIM_Base_MspInit+0xa4>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_TIM_Base_MspInit+0xa4>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <HAL_TIM_Base_MspInit+0xa8>)
 8001a54:	f000 fd08 	bl	8002468 <HAL_GPIO_Init>
}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40012c00 	.word	0x40012c00
 8001a64:	40021000 	.word	0x40021000
 8001a68:	48000400 	.word	0x48000400

08001a6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a23      	ldr	r2, [pc, #140]	; (8001b18 <HAL_TIM_MspPostInit+0xac>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d11e      	bne.n	8001acc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <HAL_TIM_MspPostInit+0xb0>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	4a22      	ldr	r2, [pc, #136]	; (8001b1c <HAL_TIM_MspPostInit+0xb0>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_TIM_MspPostInit+0xb0>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 8001aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac6:	f000 fccf 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001aca:	e020      	b.n	8001b0e <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad4:	d11b      	bne.n	8001b0e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_TIM_MspPostInit+0xb0>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <HAL_TIM_MspPostInit+0xb0>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_TIM_MspPostInit+0xb0>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 8001aee:	2308      	movs	r3, #8
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001afe:	2301      	movs	r3, #1
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_TIM_MspPostInit+0xb4>)
 8001b0a:	f000 fcad 	bl	8002468 <HAL_GPIO_Init>
}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40012c00 	.word	0x40012c00
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	48000400 	.word	0x48000400

08001b24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b2a:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <MX_USART2_UART_Init+0x5c>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b68:	f003 fc44 	bl	80053f4 <HAL_UART_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b72:	f7ff fbb1 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000254 	.word	0x20000254
 8001b80:	40004400 	.word	0x40004400

08001b84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b0a2      	sub	sp, #136	; 0x88
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2260      	movs	r2, #96	; 0x60
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f004 fa4b 	bl	8006040 <memset>
  if(uartHandle->Instance==USART2)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a20      	ldr	r2, [pc, #128]	; (8001c30 <HAL_UART_MspInit+0xac>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d138      	bne.n	8001c26 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f001 fc7f 	bl	80034c4 <HAL_RCCEx_PeriphCLKConfig>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bcc:	f7ff fb84 	bl	80012d8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_UART_MspInit+0xb0>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_UART_MspInit+0xb0>)
 8001bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bda:	6593      	str	r3, [r2, #88]	; 0x58
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_UART_MspInit+0xb0>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_UART_MspInit+0xb0>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	4a11      	ldr	r2, [pc, #68]	; (8001c34 <HAL_UART_MspInit+0xb0>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_UART_MspInit+0xb0>)
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c00:	230c      	movs	r3, #12
 8001c02:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c12:	2307      	movs	r3, #7
 8001c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c22:	f000 fc21 	bl	8002468 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c26:	bf00      	nop
 8001c28:	3788      	adds	r7, #136	; 0x88
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40004400 	.word	0x40004400
 8001c34:	40021000 	.word	0x40021000

08001c38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c3c:	f7ff fd8c 	bl	8001758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c40:	480c      	ldr	r0, [pc, #48]	; (8001c74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c42:	490d      	ldr	r1, [pc, #52]	; (8001c78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c44:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <LoopForever+0xe>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c48:	e002      	b.n	8001c50 <LoopCopyDataInit>

08001c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c4e:	3304      	adds	r3, #4

08001c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c54:	d3f9      	bcc.n	8001c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c58:	4c0a      	ldr	r4, [pc, #40]	; (8001c84 <LoopForever+0x16>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c5c:	e001      	b.n	8001c62 <LoopFillZerobss>

08001c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c60:	3204      	adds	r2, #4

08001c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c64:	d3fb      	bcc.n	8001c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c66:	f004 f9c7 	bl	8005ff8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c6a:	f7ff fa01 	bl	8001070 <main>

08001c6e <LoopForever>:

LoopForever:
    b LoopForever
 8001c6e:	e7fe      	b.n	8001c6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c70:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c7c:	08007afc 	.word	0x08007afc
  ldr r2, =_sbss
 8001c80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c84:	200002ec 	.word	0x200002ec

08001c88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC1_IRQHandler>

08001c8a <_ZN9movingAvgC1Ei>:
#define MOVINGAVG_H_INCLUDED

class movingAvg
{
    public:
        movingAvg(int interval)
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
            : m_interval{interval}, m_nbrReadings{0}, m_sum{0}, m_next{0} {}
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>:

// TODO: Test this class with the old code, remember to create backup beforehand!
// I'm very suspicious of the way I handled user defined pointers...

// The motor will not move until begin() is called!
RoverArmMotor::RoverArmMotor(SPI_HandleTypeDef* spi_handle, Pin pwm_pin, Pin dir_pin, Pin encoder_pin, int esc_type, double minimum_angle, double maximum_angle, Pin brake_pin)
 8001cba:	b590      	push	{r4, r7, lr}
 8001cbc:	b08b      	sub	sp, #44	; 0x2c
 8001cbe:	af02      	add	r7, sp, #8
 8001cc0:	61f8      	str	r0, [r7, #28]
 8001cc2:	61b9      	str	r1, [r7, #24]
 8001cc4:	f107 0110 	add.w	r1, r7, #16
 8001cc8:	e881 000c 	stmia.w	r1, {r2, r3}
 8001ccc:	ed87 0b02 	vstr	d0, [r7, #8]
 8001cd0:	ed87 1b00 	vstr	d1, [r7]
                :internalPIDInstance(&input, &output, &setpoint, regularKp, regularKi, regularKd, _PID_CD_DIRECT)
                ,internalAveragerInstance(15){
 8001cd4:	69f8      	ldr	r0, [r7, #28]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f503 7188 	add.w	r1, r3, #272	; 0x110
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	eeb0 2a45 	vmov.f32	s4, s10
 8001d02:	eef0 2a65 	vmov.f32	s5, s11
 8001d06:	eeb0 1a46 	vmov.f32	s2, s12
 8001d0a:	eef0 1a66 	vmov.f32	s3, s13
 8001d0e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d12:	eef0 0a67 	vmov.f32	s1, s15
 8001d16:	4623      	mov	r3, r4
 8001d18:	f000 f8a6 	bl	8001e68 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	3370      	adds	r3, #112	; 0x70
 8001d20:	210f      	movs	r1, #15
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ffb1 	bl	8001c8a <_ZN9movingAvgC1Ei>
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	33b8      	adds	r3, #184	; 0xb8
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff f92d 	bl	8000f8c <_ZN3PinC1Ev>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	33c0      	adds	r3, #192	; 0xc0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f928 	bl	8000f8c <_ZN3PinC1Ev>
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	33c8      	adds	r3, #200	; 0xc8
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff f923 	bl	8000f8c <_ZN3PinC1Ev>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	33d0      	adds	r3, #208	; 0xd0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f91e 	bl	8000f8c <_ZN3PinC1Ev>

    //constructor
    spi = spi_handle;
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    pwm = pwm_pin;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	33b8      	adds	r3, #184	; 0xb8
 8001d5c:	f107 0210 	add.w	r2, r7, #16
 8001d60:	6810      	ldr	r0, [r2, #0]
 8001d62:	6018      	str	r0, [r3, #0]
 8001d64:	8891      	ldrh	r1, [r2, #4]
 8001d66:	7992      	ldrb	r2, [r2, #6]
 8001d68:	8099      	strh	r1, [r3, #4]
 8001d6a:	719a      	strb	r2, [r3, #6]
    dir = dir_pin;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	33c0      	adds	r3, #192	; 0xc0
 8001d70:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d74:	6810      	ldr	r0, [r2, #0]
 8001d76:	6018      	str	r0, [r3, #0]
 8001d78:	8891      	ldrh	r1, [r2, #4]
 8001d7a:	7992      	ldrb	r2, [r2, #6]
 8001d7c:	8099      	strh	r1, [r3, #4]
 8001d7e:	719a      	strb	r2, [r3, #6]
    encoder = encoder_pin;
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	33c8      	adds	r3, #200	; 0xc8
 8001d84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d88:	6810      	ldr	r0, [r2, #0]
 8001d8a:	6018      	str	r0, [r3, #0]
 8001d8c:	8891      	ldrh	r1, [r2, #4]
 8001d8e:	7992      	ldrb	r2, [r2, #6]
 8001d90:	8099      	strh	r1, [r3, #4]
 8001d92:	719a      	strb	r2, [r3, #6]
    brake = brake_pin;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	33d0      	adds	r3, #208	; 0xd0
 8001d98:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001d9c:	6810      	ldr	r0, [r2, #0]
 8001d9e:	6018      	str	r0, [r3, #0]
 8001da0:	8891      	ldrh	r1, [r2, #4]
 8001da2:	7992      	ldrb	r2, [r2, #6]
 8001da4:	8099      	strh	r1, [r3, #4]
 8001da6:	719a      	strb	r2, [r3, #6]
    escType = esc_type;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001dac:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    lowestAngle = minimum_angle;
 8001db0:	69f9      	ldr	r1, [r7, #28]
 8001db2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001db6:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
    highestAngle = maximum_angle;
 8001dba:	69f9      	ldr	r1, [r7, #28]
 8001dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dc0:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    
}
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	; 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd90      	pop	{r4, r7, pc}
	...

08001dd0 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~ Constructor ~~~~~~~~~~~~~~~~ */
PID::PID() { }

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8001dd8:	6239      	str	r1, [r7, #32]
 8001dda:	61fa      	str	r2, [r7, #28]
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	ed87 0b04 	vstr	d0, [r7, #16]
 8001de2:	ed87 1b02 	vstr	d1, [r7, #8]
 8001de6:	ed87 2b00 	vstr	d2, [r7]
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_myOutput   = Output;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	645a      	str	r2, [r3, #68]	; 0x44
	_myInput    = Input;
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	6a3a      	ldr	r2, [r7, #32]
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40
	_mySetpoint = Setpoint;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	649a      	str	r2, [r3, #72]	; 0x48
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	2200      	movs	r2, #0
 8001e00:	705a      	strb	r2, [r3, #1]
	
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8001e02:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001e58 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x88>
 8001e06:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001e60 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x90>
 8001e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e0c:	f000 f84f 	bl	8001eae <_ZN3PID15SetOutputLimitsEdd>
	
	_sampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	2264      	movs	r2, #100	; 0x64
 8001e14:	609a      	str	r2, [r3, #8]
	
	PID::SetControllerDirection(ControllerDirection);
 8001e16:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e1e:	f000 f95d 	bl	80020dc <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>
	PID::SetTunings(Kp, Ki, Kd, POn);
 8001e22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e26:	4619      	mov	r1, r3
 8001e28:	ed97 2b00 	vldr	d2, [r7]
 8001e2c:	ed97 1b02 	vldr	d1, [r7, #8]
 8001e30:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e36:	f000 f8a9 	bl	8001f8c <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
	
	_lastTime = GetTime() - _sampleTime;
 8001e3a:	f000 f9ff 	bl	800223c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	1ad2      	subs	r2, r2, r3
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	605a      	str	r2, [r3, #4]
	
}
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3728      	adds	r7, #40	; 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	f3af 8000 	nop.w
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	406fe000 	.word	0x406fe000
	...

08001e68 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>:

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection) : PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection){ }
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	6278      	str	r0, [r7, #36]	; 0x24
 8001e70:	6239      	str	r1, [r7, #32]
 8001e72:	61fa      	str	r2, [r7, #28]
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	ed87 0b04 	vstr	d0, [r7, #16]
 8001e7a:	ed87 1b02 	vstr	d1, [r7, #8]
 8001e7e:	ed87 2b00 	vstr	d2, [r7]
 8001e82:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	ed97 2b00 	vldr	d2, [r7]
 8001e90:	ed97 1b02 	vldr	d1, [r7, #8]
 8001e94:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	6a39      	ldr	r1, [r7, #32]
 8001e9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ea0:	f7ff ff96 	bl	8001dd0 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3728      	adds	r7, #40	; 0x28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <_ZN3PID15SetOutputLimitsEdd>:
	return _inAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(double Min, double Max)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6178      	str	r0, [r7, #20]
 8001eb6:	ed87 0b02 	vstr	d0, [r7, #8]
 8001eba:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ec2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ec6:	f7fe fe1d 	bl	8000b04 <__aeabi_dcmpge>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d158      	bne.n	8001f82 <_ZN3PID15SetOutputLimitsEdd+0xd4>
	{
		return;
	}
	
	_outMin = Min;
 8001ed0:	6979      	ldr	r1, [r7, #20]
 8001ed2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ed6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	_outMax = Max;
 8001eda:	6979      	ldr	r1, [r7, #20]
 8001edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ee0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	785b      	ldrb	r3, [r3, #1]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d04b      	beq.n	8001f84 <_ZN3PID15SetOutputLimitsEdd+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001efa:	f7fe fe0d 	bl	8000b18 <__aeabi_dcmpgt>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <_ZN3PID15SetOutputLimitsEdd+0x66>
		{
			*_myOutput = _outMax;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001f0e:	e9c1 2300 	strd	r2, r3, [r1]
 8001f12:	e012      	b.n	8001f3a <_ZN3PID15SetOutputLimitsEdd+0x8c>
		}
		else if (*_myOutput < _outMin)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001f22:	f7fe fddb 	bl	8000adc <__aeabi_dcmplt>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <_ZN3PID15SetOutputLimitsEdd+0x8c>
		{
			*_myOutput = _outMin;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001f36:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001f46:	f7fe fde7 	bl	8000b18 <__aeabi_dcmpgt>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <_ZN3PID15SetOutputLimitsEdd+0xb0>
		{
			_outputSum = _outMax;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001f56:	6979      	ldr	r1, [r7, #20]
 8001f58:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001f5c:	e012      	b.n	8001f84 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		}
		else if (_outputSum < _outMin)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001f6a:	f7fe fdb7 	bl	8000adc <__aeabi_dcmplt>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		{
			_outputSum = _outMin;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001f7a:	6979      	ldr	r1, [r7, #20]
 8001f7c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001f80:	e000      	b.n	8001f84 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		return;
 8001f82:	bf00      	nop
		}
		else { }
		
	}
	
}
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>:
void PID::SetTunings(double Kp, double Ki, double Kd)
{
	PID::SetTunings(Kp, Ki, Kd, _pOn);
}
void PID::SetTunings(double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	61f8      	str	r0, [r7, #28]
 8001f94:	ed87 0b04 	vstr	d0, [r7, #16]
 8001f98:	ed87 1b02 	vstr	d1, [r7, #8]
 8001f9c:	ed87 2b00 	vstr	d2, [r7]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fb0:	f7fe fd94 	bl	8000adc <__aeabi_dcmplt>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f040 8089 	bne.w	80020ce <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fc8:	f7fe fd88 	bl	8000adc <__aeabi_dcmplt>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d17d      	bne.n	80020ce <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fde:	f7fe fd7d 	bl	8000adc <__aeabi_dcmplt>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d172      	bne.n	80020ce <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	_pOn    = POn;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	7efa      	ldrb	r2, [r7, #27]
 8001fec:	709a      	strb	r2, [r3, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001fee:	7efb      	ldrb	r3, [r7, #27]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	bf0c      	ite	eq
 8001ff4:	2301      	moveq	r3, #1
 8001ff6:	2300      	movne	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	701a      	strb	r2, [r3, #0]

	_dispKp = Kp;
 8002000:	69f9      	ldr	r1, [r7, #28]
 8002002:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002006:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_dispKi = Ki;
 800200a:	69f9      	ldr	r1, [r7, #28]
 800200c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002010:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_dispKd = Kd;
 8002014:	69f9      	ldr	r1, [r7, #28]
 8002016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800201a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)_sampleTime) / 1000;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fa6e 	bl	8000504 <__aeabi_ui2d>
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x14c>)
 800202e:	f7fe fc0d 	bl	800084c <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	_kp = Kp;
 800203a:	69f9      	ldr	r1, [r7, #28]
 800203c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002040:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	_ki = Ki * SampleTimeInSec;
 8002044:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002048:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800204c:	f7fe fad4 	bl	80005f8 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	69f9      	ldr	r1, [r7, #28]
 8002056:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	_kd = Kd / SampleTimeInSec;
 800205a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800205e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002062:	f7fe fbf3 	bl	800084c <__aeabi_ddiv>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	69f9      	ldr	r1, [r7, #28]
 800206c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (_controllerDirection == _PID_CD_REVERSE)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	78db      	ldrb	r3, [r3, #3]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d12b      	bne.n	80020d0 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
	{
		
		_kp = (0 - _kp);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800207e:	f04f 0000 	mov.w	r0, #0
 8002082:	f04f 0100 	mov.w	r1, #0
 8002086:	f7fe f8ff 	bl	8000288 <__aeabi_dsub>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	69f9      	ldr	r1, [r7, #28]
 8002090:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800209a:	f04f 0000 	mov.w	r0, #0
 800209e:	f04f 0100 	mov.w	r1, #0
 80020a2:	f7fe f8f1 	bl	8000288 <__aeabi_dsub>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	69f9      	ldr	r1, [r7, #28]
 80020ac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80020b6:	f04f 0000 	mov.w	r0, #0
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	f7fe f8e3 	bl	8000288 <__aeabi_dsub>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	69f9      	ldr	r1, [r7, #28]
 80020c8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80020cc:	e000      	b.n	80020d0 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
		return;
 80020ce:	bf00      	nop
		
	}
	
}
 80020d0:	3728      	adds	r7, #40	; 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	408f4000 	.word	0x408f4000

080020dc <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	785b      	ldrb	r3, [r3, #1]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d02e      	beq.n	800214e <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	78db      	ldrb	r3, [r3, #3]
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d029      	beq.n	800214e <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
	{
		
		_kp = (0 - _kp);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002100:	f04f 0000 	mov.w	r0, #0
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	f7fe f8be 	bl	8000288 <__aeabi_dsub>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800211c:	f04f 0000 	mov.w	r0, #0
 8002120:	f04f 0100 	mov.w	r1, #0
 8002124:	f7fe f8b0 	bl	8000288 <__aeabi_dsub>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002138:	f04f 0000 	mov.w	r0, #0
 800213c:	f04f 0100 	mov.w	r1, #0
 8002140:	f7fe f8a2 	bl	8000288 <__aeabi_dsub>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	_controllerDirection = Direction;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	70da      	strb	r2, [r3, #3]
	
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_Init+0x3c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <HAL_Init+0x3c>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002170:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002172:	2003      	movs	r0, #3
 8002174:	f000 f944 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002178:	2000      	movs	r0, #0
 800217a:	f000 f80f 	bl	800219c <HAL_InitTick>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	71fb      	strb	r3, [r7, #7]
 8002188:	e001      	b.n	800218e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800218a:	f7ff fa0f 	bl	80015ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800218e:	79fb      	ldrb	r3, [r7, #7]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40022000 	.word	0x40022000

0800219c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_InitTick+0x6c>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d023      	beq.n	80021f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_InitTick+0x70>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_InitTick+0x6c>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021be:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f941 	bl	800244e <HAL_SYSTICK_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10f      	bne.n	80021f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d809      	bhi.n	80021ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d8:	2200      	movs	r2, #0
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	f000 f919 	bl	8002416 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <HAL_InitTick+0x74>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e007      	b.n	80021fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e004      	b.n	80021fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	e001      	b.n	80021fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000008 	.word	0x20000008
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_IncTick+0x20>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_IncTick+0x24>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <HAL_IncTick+0x24>)
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000008 	.word	0x20000008
 8002238:	200002d8 	.word	0x200002d8

0800223c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <HAL_GetTick+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	200002d8 	.word	0x200002d8

08002254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff ffee 	bl	800223c <HAL_GetTick>
 8002260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d005      	beq.n	800227a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_Delay+0x44>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800227a:	bf00      	nop
 800227c:	f7ff ffde 	bl	800223c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d8f7      	bhi.n	800227c <HAL_Delay+0x28>
  {
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000008 	.word	0x20000008

0800229c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	60d3      	str	r3, [r2, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <__NVIC_GetPriorityGrouping+0x18>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 0307 	and.w	r3, r3, #7
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	; (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	; 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f7ff ff8e 	bl	8002300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff47 	bl	800229c <__NVIC_SetPriorityGrouping>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002428:	f7ff ff5c 	bl	80022e4 <__NVIC_GetPriorityGrouping>
 800242c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff ff8e 	bl	8002354 <NVIC_EncodePriority>
 8002438:	4602      	mov	r2, r0
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff5d 	bl	8002300 <__NVIC_SetPriority>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffb0 	bl	80023bc <SysTick_Config>
 800245c:	4603      	mov	r3, r0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002476:	e154      	b.n	8002722 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8146 	beq.w	800271c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b01      	cmp	r3, #1
 800249a:	d005      	beq.n	80024a8 <HAL_GPIO_Init+0x40>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d130      	bne.n	800250a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024de:	2201      	movs	r2, #1
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	f003 0201 	and.w	r2, r3, #1
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b03      	cmp	r3, #3
 8002514:	d017      	beq.n	8002546 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d123      	bne.n	800259a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800255e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	220f      	movs	r2, #15
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	6939      	ldr	r1, [r7, #16]
 8002596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0203 	and.w	r2, r3, #3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80a0 	beq.w	800271c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025dc:	4b58      	ldr	r3, [pc, #352]	; (8002740 <HAL_GPIO_Init+0x2d8>)
 80025de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e0:	4a57      	ldr	r2, [pc, #348]	; (8002740 <HAL_GPIO_Init+0x2d8>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6613      	str	r3, [r2, #96]	; 0x60
 80025e8:	4b55      	ldr	r3, [pc, #340]	; (8002740 <HAL_GPIO_Init+0x2d8>)
 80025ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025f4:	4a53      	ldr	r2, [pc, #332]	; (8002744 <HAL_GPIO_Init+0x2dc>)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	3302      	adds	r3, #2
 80025fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	220f      	movs	r2, #15
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800261e:	d019      	beq.n	8002654 <HAL_GPIO_Init+0x1ec>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a49      	ldr	r2, [pc, #292]	; (8002748 <HAL_GPIO_Init+0x2e0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d013      	beq.n	8002650 <HAL_GPIO_Init+0x1e8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a48      	ldr	r2, [pc, #288]	; (800274c <HAL_GPIO_Init+0x2e4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d00d      	beq.n	800264c <HAL_GPIO_Init+0x1e4>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a47      	ldr	r2, [pc, #284]	; (8002750 <HAL_GPIO_Init+0x2e8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d007      	beq.n	8002648 <HAL_GPIO_Init+0x1e0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a46      	ldr	r2, [pc, #280]	; (8002754 <HAL_GPIO_Init+0x2ec>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d101      	bne.n	8002644 <HAL_GPIO_Init+0x1dc>
 8002640:	2304      	movs	r3, #4
 8002642:	e008      	b.n	8002656 <HAL_GPIO_Init+0x1ee>
 8002644:	2307      	movs	r3, #7
 8002646:	e006      	b.n	8002656 <HAL_GPIO_Init+0x1ee>
 8002648:	2303      	movs	r3, #3
 800264a:	e004      	b.n	8002656 <HAL_GPIO_Init+0x1ee>
 800264c:	2302      	movs	r3, #2
 800264e:	e002      	b.n	8002656 <HAL_GPIO_Init+0x1ee>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_GPIO_Init+0x1ee>
 8002654:	2300      	movs	r3, #0
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	f002 0203 	and.w	r2, r2, #3
 800265c:	0092      	lsls	r2, r2, #2
 800265e:	4093      	lsls	r3, r2
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002666:	4937      	ldr	r1, [pc, #220]	; (8002744 <HAL_GPIO_Init+0x2dc>)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002674:	4b38      	ldr	r3, [pc, #224]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002698:	4a2f      	ldr	r2, [pc, #188]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800269e:	4b2e      	ldr	r3, [pc, #184]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026c2:	4a25      	ldr	r2, [pc, #148]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026c8:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026ec:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026f2:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002716:	4a10      	ldr	r2, [pc, #64]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	3301      	adds	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	f47f aea3 	bne.w	8002478 <HAL_GPIO_Init+0x10>
  }
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40021000 	.word	0x40021000
 8002744:	40010000 	.word	0x40010000
 8002748:	48000400 	.word	0x48000400
 800274c:	48000800 	.word	0x48000800
 8002750:	48000c00 	.word	0x48000c00
 8002754:	48001000 	.word	0x48001000
 8002758:	40010400 	.word	0x40010400

0800275c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	807b      	strh	r3, [r7, #2]
 8002768:	4613      	mov	r3, r2
 800276a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800276c:	787b      	ldrb	r3, [r7, #1]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002778:	e002      	b.n	8002780 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800277a:	887a      	ldrh	r2, [r7, #2]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40007000 	.word	0x40007000

080027a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b6:	d130      	bne.n	800281a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027b8:	4b23      	ldr	r3, [pc, #140]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c4:	d038      	beq.n	8002838 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ce:	4a1e      	ldr	r2, [pc, #120]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2232      	movs	r2, #50	; 0x32
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	0c9b      	lsrs	r3, r3, #18
 80027e8:	3301      	adds	r3, #1
 80027ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ec:	e002      	b.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002800:	d102      	bne.n	8002808 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f2      	bne.n	80027ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002814:	d110      	bne.n	8002838 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e00f      	b.n	800283a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002826:	d007      	beq.n	8002838 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002830:	4a05      	ldr	r2, [pc, #20]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002836:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40007000 	.word	0x40007000
 800284c:	20000000 	.word	0x20000000
 8002850:	431bde83 	.word	0x431bde83

08002854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d102      	bne.n	8002868 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	f000 bc02 	b.w	800306c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002868:	4b96      	ldr	r3, [pc, #600]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002872:	4b94      	ldr	r3, [pc, #592]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 80e4 	beq.w	8002a52 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_RCC_OscConfig+0x4c>
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2b0c      	cmp	r3, #12
 8002894:	f040 808b 	bne.w	80029ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b01      	cmp	r3, #1
 800289c:	f040 8087 	bne.w	80029ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028a0:	4b88      	ldr	r3, [pc, #544]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_OscConfig+0x64>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e3d9      	b.n	800306c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1a      	ldr	r2, [r3, #32]
 80028bc:	4b81      	ldr	r3, [pc, #516]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d004      	beq.n	80028d2 <HAL_RCC_OscConfig+0x7e>
 80028c8:	4b7e      	ldr	r3, [pc, #504]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d0:	e005      	b.n	80028de <HAL_RCC_OscConfig+0x8a>
 80028d2:	4b7c      	ldr	r3, [pc, #496]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80028d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028de:	4293      	cmp	r3, r2
 80028e0:	d223      	bcs.n	800292a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 fd8c 	bl	8003404 <RCC_SetFlashLatencyFromMSIRange>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e3ba      	b.n	800306c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028f6:	4b73      	ldr	r3, [pc, #460]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a72      	ldr	r2, [pc, #456]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80028fc:	f043 0308 	orr.w	r3, r3, #8
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4b70      	ldr	r3, [pc, #448]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	496d      	ldr	r1, [pc, #436]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002910:	4313      	orrs	r3, r2
 8002912:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002914:	4b6b      	ldr	r3, [pc, #428]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	4968      	ldr	r1, [pc, #416]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
 8002928:	e025      	b.n	8002976 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800292a:	4b66      	ldr	r3, [pc, #408]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a65      	ldr	r2, [pc, #404]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002930:	f043 0308 	orr.w	r3, r3, #8
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4960      	ldr	r1, [pc, #384]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002948:	4b5e      	ldr	r3, [pc, #376]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	495b      	ldr	r1, [pc, #364]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fd4c 	bl	8003404 <RCC_SetFlashLatencyFromMSIRange>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e37a      	b.n	800306c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002976:	f000 fc81 	bl	800327c <HAL_RCC_GetSysClockFreq>
 800297a:	4602      	mov	r2, r0
 800297c:	4b51      	ldr	r3, [pc, #324]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	4950      	ldr	r1, [pc, #320]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002988:	5ccb      	ldrb	r3, [r1, r3]
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	fa22 f303 	lsr.w	r3, r2, r3
 8002992:	4a4e      	ldr	r2, [pc, #312]	; (8002acc <HAL_RCC_OscConfig+0x278>)
 8002994:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002996:	4b4e      	ldr	r3, [pc, #312]	; (8002ad0 <HAL_RCC_OscConfig+0x27c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fbfe 	bl	800219c <HAL_InitTick>
 80029a0:	4603      	mov	r3, r0
 80029a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d052      	beq.n	8002a50 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	e35e      	b.n	800306c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d032      	beq.n	8002a1c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029b6:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a42      	ldr	r2, [pc, #264]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029c2:	f7ff fc3b 	bl	800223c <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029ca:	f7ff fc37 	bl	800223c <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e347      	b.n	800306c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029dc:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e8:	4b36      	ldr	r3, [pc, #216]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a35      	ldr	r2, [pc, #212]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80029ee:	f043 0308 	orr.w	r3, r3, #8
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b33      	ldr	r3, [pc, #204]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4930      	ldr	r1, [pc, #192]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a06:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	492b      	ldr	r1, [pc, #172]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
 8002a1a:	e01a      	b.n	8002a52 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a1c:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a28      	ldr	r2, [pc, #160]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a28:	f7ff fc08 	bl	800223c <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a30:	f7ff fc04 	bl	800223c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e314      	b.n	800306c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x1dc>
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d073      	beq.n	8002b46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_OscConfig+0x21c>
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b0c      	cmp	r3, #12
 8002a68:	d10e      	bne.n	8002a88 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d10b      	bne.n	8002a88 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d063      	beq.n	8002b44 <HAL_RCC_OscConfig+0x2f0>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d15f      	bne.n	8002b44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e2f1      	b.n	800306c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a90:	d106      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x24c>
 8002a92:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e025      	b.n	8002aec <HAL_RCC_OscConfig+0x298>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa8:	d114      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x280>
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a05      	ldr	r2, [pc, #20]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a02      	ldr	r2, [pc, #8]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e013      	b.n	8002aec <HAL_RCC_OscConfig+0x298>
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	08007370 	.word	0x08007370
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	20000004 	.word	0x20000004
 8002ad4:	4ba0      	ldr	r3, [pc, #640]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a9f      	ldr	r2, [pc, #636]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b9d      	ldr	r3, [pc, #628]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a9c      	ldr	r2, [pc, #624]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d013      	beq.n	8002b1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af4:	f7ff fba2 	bl	800223c <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002afc:	f7ff fb9e 	bl	800223c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e2ae      	b.n	800306c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0e:	4b92      	ldr	r3, [pc, #584]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x2a8>
 8002b1a:	e014      	b.n	8002b46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7ff fb8e 	bl	800223c <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b24:	f7ff fb8a 	bl	800223c <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e29a      	b.n	800306c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b36:	4b88      	ldr	r3, [pc, #544]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x2d0>
 8002b42:	e000      	b.n	8002b46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d060      	beq.n	8002c14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_OscConfig+0x310>
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b0c      	cmp	r3, #12
 8002b5c:	d119      	bne.n	8002b92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d116      	bne.n	8002b92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b64:	4b7c      	ldr	r3, [pc, #496]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_OscConfig+0x328>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e277      	b.n	800306c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7c:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	4973      	ldr	r1, [pc, #460]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b90:	e040      	b.n	8002c14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d023      	beq.n	8002be2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9a:	4b6f      	ldr	r3, [pc, #444]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a6e      	ldr	r2, [pc, #440]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba6:	f7ff fb49 	bl	800223c <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bae:	f7ff fb45 	bl	800223c <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e255      	b.n	800306c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc0:	4b65      	ldr	r3, [pc, #404]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bcc:	4b62      	ldr	r3, [pc, #392]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	495f      	ldr	r1, [pc, #380]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
 8002be0:	e018      	b.n	8002c14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be2:	4b5d      	ldr	r3, [pc, #372]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a5c      	ldr	r2, [pc, #368]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7ff fb25 	bl	800223c <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf6:	f7ff fb21 	bl	800223c <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e231      	b.n	800306c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c08:	4b53      	ldr	r3, [pc, #332]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d03c      	beq.n	8002c9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01c      	beq.n	8002c62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c28:	4b4b      	ldr	r3, [pc, #300]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2e:	4a4a      	ldr	r2, [pc, #296]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7ff fb00 	bl	800223c <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c40:	f7ff fafc 	bl	800223c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e20c      	b.n	800306c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c52:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ef      	beq.n	8002c40 <HAL_RCC_OscConfig+0x3ec>
 8002c60:	e01b      	b.n	8002c9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c62:	4b3d      	ldr	r3, [pc, #244]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c68:	4a3b      	ldr	r2, [pc, #236]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7ff fae3 	bl	800223c <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7a:	f7ff fadf 	bl	800223c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e1ef      	b.n	800306c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c8c:	4b32      	ldr	r3, [pc, #200]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1ef      	bne.n	8002c7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 80a6 	beq.w	8002df4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cac:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10d      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc4:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd4:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <HAL_RCC_OscConfig+0x508>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d118      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <HAL_RCC_OscConfig+0x508>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <HAL_RCC_OscConfig+0x508>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cec:	f7ff faa6 	bl	800223c <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf4:	f7ff faa2 	bl	800223c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e1b2      	b.n	800306c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <HAL_RCC_OscConfig+0x508>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d108      	bne.n	8002d2c <HAL_RCC_OscConfig+0x4d8>
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	4a0d      	ldr	r2, [pc, #52]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d2a:	e029      	b.n	8002d80 <HAL_RCC_OscConfig+0x52c>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d115      	bne.n	8002d60 <HAL_RCC_OscConfig+0x50c>
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3a:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002d3c:	f043 0304 	orr.w	r3, r3, #4
 8002d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	4a03      	ldr	r2, [pc, #12]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d54:	e014      	b.n	8002d80 <HAL_RCC_OscConfig+0x52c>
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	4b9a      	ldr	r3, [pc, #616]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	4a99      	ldr	r2, [pc, #612]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d70:	4b96      	ldr	r3, [pc, #600]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	4a95      	ldr	r2, [pc, #596]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002d78:	f023 0304 	bic.w	r3, r3, #4
 8002d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d016      	beq.n	8002db6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7ff fa58 	bl	800223c <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d90:	f7ff fa54 	bl	800223c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e162      	b.n	800306c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da6:	4b89      	ldr	r3, [pc, #548]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ed      	beq.n	8002d90 <HAL_RCC_OscConfig+0x53c>
 8002db4:	e015      	b.n	8002de2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7ff fa41 	bl	800223c <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7ff fa3d 	bl	800223c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e14b      	b.n	800306c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dd4:	4b7d      	ldr	r3, [pc, #500]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1ed      	bne.n	8002dbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002de2:	7ffb      	ldrb	r3, [r7, #31]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de8:	4b78      	ldr	r3, [pc, #480]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dec:	4a77      	ldr	r2, [pc, #476]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d03c      	beq.n	8002e7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01c      	beq.n	8002e42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e08:	4b70      	ldr	r3, [pc, #448]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e0e:	4a6f      	ldr	r2, [pc, #444]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7ff fa10 	bl	800223c <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e20:	f7ff fa0c 	bl	800223c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e11c      	b.n	800306c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e32:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002e34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ef      	beq.n	8002e20 <HAL_RCC_OscConfig+0x5cc>
 8002e40:	e01b      	b.n	8002e7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e42:	4b62      	ldr	r3, [pc, #392]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e48:	4a60      	ldr	r2, [pc, #384]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e52:	f7ff f9f3 	bl	800223c <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e5a:	f7ff f9ef 	bl	800223c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e0ff      	b.n	800306c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e6c:	4b57      	ldr	r3, [pc, #348]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1ef      	bne.n	8002e5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80f3 	beq.w	800306a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	f040 80c9 	bne.w	8003020 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e8e:	4b4f      	ldr	r3, [pc, #316]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f003 0203 	and.w	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d12c      	bne.n	8002efc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	3b01      	subs	r3, #1
 8002eae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d123      	bne.n	8002efc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d11b      	bne.n	8002efc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d113      	bne.n	8002efc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d109      	bne.n	8002efc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	085b      	lsrs	r3, r3, #1
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d06b      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d062      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f02:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e0ac      	b.n	800306c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f12:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2d      	ldr	r2, [pc, #180]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002f18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f1e:	f7ff f98d 	bl	800223c <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f26:	f7ff f989 	bl	800223c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e099      	b.n	800306c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f38:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f44:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <HAL_RCC_OscConfig+0x77c>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f54:	3a01      	subs	r2, #1
 8002f56:	0112      	lsls	r2, r2, #4
 8002f58:	4311      	orrs	r1, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f5e:	0212      	lsls	r2, r2, #8
 8002f60:	4311      	orrs	r1, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f66:	0852      	lsrs	r2, r2, #1
 8002f68:	3a01      	subs	r2, #1
 8002f6a:	0552      	lsls	r2, r2, #21
 8002f6c:	4311      	orrs	r1, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f72:	0852      	lsrs	r2, r2, #1
 8002f74:	3a01      	subs	r2, #1
 8002f76:	0652      	lsls	r2, r2, #25
 8002f78:	4311      	orrs	r1, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f7e:	06d2      	lsls	r2, r2, #27
 8002f80:	430a      	orrs	r2, r1
 8002f82:	4912      	ldr	r1, [pc, #72]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f88:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0f      	ldr	r2, [pc, #60]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f94:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4a0c      	ldr	r2, [pc, #48]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fa0:	f7ff f94c 	bl	800223c <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7ff f948 	bl	800223c <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e058      	b.n	800306c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fba:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fc6:	e050      	b.n	800306a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e04f      	b.n	800306c <HAL_RCC_OscConfig+0x818>
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd4:	4b27      	ldr	r3, [pc, #156]	; (8003074 <HAL_RCC_OscConfig+0x820>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d144      	bne.n	800306a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b24      	ldr	r3, [pc, #144]	; (8003074 <HAL_RCC_OscConfig+0x820>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a23      	ldr	r2, [pc, #140]	; (8003074 <HAL_RCC_OscConfig+0x820>)
 8002fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fec:	4b21      	ldr	r3, [pc, #132]	; (8003074 <HAL_RCC_OscConfig+0x820>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a20      	ldr	r2, [pc, #128]	; (8003074 <HAL_RCC_OscConfig+0x820>)
 8002ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ff8:	f7ff f920 	bl	800223c <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003000:	f7ff f91c 	bl	800223c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e02c      	b.n	800306c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <HAL_RCC_OscConfig+0x820>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x7ac>
 800301e:	e024      	b.n	800306a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b0c      	cmp	r3, #12
 8003024:	d01f      	beq.n	8003066 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	4b13      	ldr	r3, [pc, #76]	; (8003074 <HAL_RCC_OscConfig+0x820>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a12      	ldr	r2, [pc, #72]	; (8003074 <HAL_RCC_OscConfig+0x820>)
 800302c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7ff f903 	bl	800223c <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303a:	f7ff f8ff 	bl	800223c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e00f      	b.n	800306c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304c:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_RCC_OscConfig+0x820>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_RCC_OscConfig+0x820>)
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	4905      	ldr	r1, [pc, #20]	; (8003074 <HAL_RCC_OscConfig+0x820>)
 800305e:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_RCC_OscConfig+0x824>)
 8003060:	4013      	ands	r3, r2
 8003062:	60cb      	str	r3, [r1, #12]
 8003064:	e001      	b.n	800306a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3720      	adds	r7, #32
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	feeefffc 	.word	0xfeeefffc

0800307c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0e7      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003090:	4b75      	ldr	r3, [pc, #468]	; (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d910      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b72      	ldr	r3, [pc, #456]	; (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 0207 	bic.w	r2, r3, #7
 80030a6:	4970      	ldr	r1, [pc, #448]	; (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b6e      	ldr	r3, [pc, #440]	; (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0cf      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d010      	beq.n	80030ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	4b66      	ldr	r3, [pc, #408]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d8:	429a      	cmp	r2, r3
 80030da:	d908      	bls.n	80030ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030dc:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4960      	ldr	r1, [pc, #384]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d04c      	beq.n	8003194 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003102:	4b5a      	ldr	r3, [pc, #360]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d121      	bne.n	8003152 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0a6      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800311a:	4b54      	ldr	r3, [pc, #336]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d115      	bne.n	8003152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e09a      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003132:	4b4e      	ldr	r3, [pc, #312]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e08e      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003142:	4b4a      	ldr	r3, [pc, #296]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e086      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003152:	4b46      	ldr	r3, [pc, #280]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 0203 	bic.w	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4943      	ldr	r1, [pc, #268]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7ff f86a 	bl	800223c <HAL_GetTick>
 8003168:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	e00a      	b.n	8003182 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316c:	f7ff f866 	bl	800223c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e06e      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 020c 	and.w	r2, r3, #12
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	429a      	cmp	r2, r3
 8003192:	d1eb      	bne.n	800316c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d010      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	4b31      	ldr	r3, [pc, #196]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d208      	bcs.n	80031c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b2e      	ldr	r3, [pc, #184]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	492b      	ldr	r1, [pc, #172]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c2:	4b29      	ldr	r3, [pc, #164]	; (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d210      	bcs.n	80031f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d0:	4b25      	ldr	r3, [pc, #148]	; (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f023 0207 	bic.w	r2, r3, #7
 80031d8:	4923      	ldr	r1, [pc, #140]	; (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_RCC_ClockConfig+0x1ec>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e036      	b.n	8003260 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031fe:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	4918      	ldr	r1, [pc, #96]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 800320c:	4313      	orrs	r3, r2
 800320e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d009      	beq.n	8003230 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4910      	ldr	r1, [pc, #64]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 800322c:	4313      	orrs	r3, r2
 800322e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003230:	f000 f824 	bl	800327c <HAL_RCC_GetSysClockFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <HAL_RCC_ClockConfig+0x1f0>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	490b      	ldr	r1, [pc, #44]	; (8003270 <HAL_RCC_ClockConfig+0x1f4>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
 800324c:	4a09      	ldr	r2, [pc, #36]	; (8003274 <HAL_RCC_ClockConfig+0x1f8>)
 800324e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1fc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe ffa1 	bl	800219c <HAL_InitTick>
 800325a:	4603      	mov	r3, r0
 800325c:	72fb      	strb	r3, [r7, #11]

  return status;
 800325e:	7afb      	ldrb	r3, [r7, #11]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40022000 	.word	0x40022000
 800326c:	40021000 	.word	0x40021000
 8003270:	08007370 	.word	0x08007370
 8003274:	20000000 	.word	0x20000000
 8003278:	20000004 	.word	0x20000004

0800327c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800327c:	b480      	push	{r7}
 800327e:	b089      	sub	sp, #36	; 0x24
 8003280:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800328a:	4b3e      	ldr	r3, [pc, #248]	; (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003294:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x34>
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b0c      	cmp	r3, #12
 80032a8:	d121      	bne.n	80032ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d11e      	bne.n	80032ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032b0:	4b34      	ldr	r3, [pc, #208]	; (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d107      	bne.n	80032cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032bc:	4b31      	ldr	r3, [pc, #196]	; (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 80032be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	e005      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032cc:	4b2d      	ldr	r3, [pc, #180]	; (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032d8:	4a2b      	ldr	r2, [pc, #172]	; (8003388 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10d      	bne.n	8003304 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ec:	e00a      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d102      	bne.n	80032fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032f4:	4b25      	ldr	r3, [pc, #148]	; (800338c <HAL_RCC_GetSysClockFreq+0x110>)
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	e004      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003300:	4b23      	ldr	r3, [pc, #140]	; (8003390 <HAL_RCC_GetSysClockFreq+0x114>)
 8003302:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b0c      	cmp	r3, #12
 8003308:	d134      	bne.n	8003374 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800330a:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d003      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0xa6>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b03      	cmp	r3, #3
 800331e:	d003      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0xac>
 8003320:	e005      	b.n	800332e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HAL_RCC_GetSysClockFreq+0x110>)
 8003324:	617b      	str	r3, [r7, #20]
      break;
 8003326:	e005      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_RCC_GetSysClockFreq+0x114>)
 800332a:	617b      	str	r3, [r7, #20]
      break;
 800332c:	e002      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	617b      	str	r3, [r7, #20]
      break;
 8003332:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	3301      	adds	r3, #1
 8003340:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	fb03 f202 	mul.w	r2, r3, r2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_RCC_GetSysClockFreq+0x108>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	0e5b      	lsrs	r3, r3, #25
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	3301      	adds	r3, #1
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003374:	69bb      	ldr	r3, [r7, #24]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3724      	adds	r7, #36	; 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
 8003388:	08007388 	.word	0x08007388
 800338c:	00f42400 	.word	0x00f42400
 8003390:	007a1200 	.word	0x007a1200

08003394 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000000 	.word	0x20000000

080033ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033b0:	f7ff fff0 	bl	8003394 <HAL_RCC_GetHCLKFreq>
 80033b4:	4602      	mov	r2, r0
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	0a1b      	lsrs	r3, r3, #8
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	4904      	ldr	r1, [pc, #16]	; (80033d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033c2:	5ccb      	ldrb	r3, [r1, r3]
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	08007380 	.word	0x08007380

080033d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033dc:	f7ff ffda 	bl	8003394 <HAL_RCC_GetHCLKFreq>
 80033e0:	4602      	mov	r2, r0
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	0adb      	lsrs	r3, r3, #11
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	4904      	ldr	r1, [pc, #16]	; (8003400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	08007380 	.word	0x08007380

08003404 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800340c:	2300      	movs	r3, #0
 800340e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003410:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800341c:	f7ff f9b6 	bl	800278c <HAL_PWREx_GetVoltageRange>
 8003420:	6178      	str	r0, [r7, #20]
 8003422:	e014      	b.n	800344e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003424:	4b25      	ldr	r3, [pc, #148]	; (80034bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	4a24      	ldr	r2, [pc, #144]	; (80034bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342e:	6593      	str	r3, [r2, #88]	; 0x58
 8003430:	4b22      	ldr	r3, [pc, #136]	; (80034bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800343c:	f7ff f9a6 	bl	800278c <HAL_PWREx_GetVoltageRange>
 8003440:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003442:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800344c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003454:	d10b      	bne.n	800346e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b80      	cmp	r3, #128	; 0x80
 800345a:	d919      	bls.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2ba0      	cmp	r3, #160	; 0xa0
 8003460:	d902      	bls.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003462:	2302      	movs	r3, #2
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	e013      	b.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003468:	2301      	movs	r3, #1
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e010      	b.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b80      	cmp	r3, #128	; 0x80
 8003472:	d902      	bls.n	800347a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003474:	2303      	movs	r3, #3
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e00a      	b.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b80      	cmp	r3, #128	; 0x80
 800347e:	d102      	bne.n	8003486 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003480:	2302      	movs	r3, #2
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	e004      	b.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b70      	cmp	r3, #112	; 0x70
 800348a:	d101      	bne.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800348c:	2301      	movs	r3, #1
 800348e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 0207 	bic.w	r2, r3, #7
 8003498:	4909      	ldr	r1, [pc, #36]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034a0:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d001      	beq.n	80034b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40022000 	.word	0x40022000

080034c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034cc:	2300      	movs	r3, #0
 80034ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034d0:	2300      	movs	r3, #0
 80034d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d031      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034e8:	d01a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80034ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034ee:	d814      	bhi.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d009      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034f8:	d10f      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80034fa:	4b5d      	ldr	r3, [pc, #372]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	4a5c      	ldr	r2, [pc, #368]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003504:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003506:	e00c      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fa22 	bl	8003958 <RCCEx_PLLSAI1_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003518:	e003      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	74fb      	strb	r3, [r7, #19]
      break;
 800351e:	e000      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003522:	7cfb      	ldrb	r3, [r7, #19]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003528:	4b51      	ldr	r3, [pc, #324]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	494e      	ldr	r1, [pc, #312]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800353e:	e001      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 809e 	beq.w	800368e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003552:	2300      	movs	r3, #0
 8003554:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003556:	4b46      	ldr	r3, [pc, #280]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003566:	2300      	movs	r3, #0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00d      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356c:	4b40      	ldr	r3, [pc, #256]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	4a3f      	ldr	r2, [pc, #252]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003576:	6593      	str	r3, [r2, #88]	; 0x58
 8003578:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003584:	2301      	movs	r3, #1
 8003586:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003588:	4b3a      	ldr	r3, [pc, #232]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a39      	ldr	r2, [pc, #228]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800358e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003592:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003594:	f7fe fe52 	bl	800223c <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800359a:	e009      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359c:	f7fe fe4e 	bl	800223c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d902      	bls.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	74fb      	strb	r3, [r7, #19]
        break;
 80035ae:	e005      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035b0:	4b30      	ldr	r3, [pc, #192]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0ef      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d15a      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035c2:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01e      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d019      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035ea:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f0:	4a1f      	ldr	r2, [pc, #124]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035fa:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003600:	4a1b      	ldr	r2, [pc, #108]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800360a:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d016      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fe fe0e 	bl	800223c <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003622:	e00b      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fe fe0a 	bl	800223c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d902      	bls.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	74fb      	strb	r3, [r7, #19]
            break;
 800363a:	e006      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363c:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0ec      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003650:	4b07      	ldr	r3, [pc, #28]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365e:	4904      	ldr	r1, [pc, #16]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003666:	e009      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	74bb      	strb	r3, [r7, #18]
 800366c:	e006      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000
 8003674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367c:	7c7b      	ldrb	r3, [r7, #17]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d105      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003682:	4b8d      	ldr	r3, [pc, #564]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	4a8c      	ldr	r2, [pc, #560]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800369a:	4b87      	ldr	r3, [pc, #540]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a0:	f023 0203 	bic.w	r2, r3, #3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4983      	ldr	r1, [pc, #524]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036bc:	4b7e      	ldr	r3, [pc, #504]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f023 020c 	bic.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	497b      	ldr	r1, [pc, #492]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036de:	4b76      	ldr	r3, [pc, #472]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	4972      	ldr	r1, [pc, #456]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003700:	4b6d      	ldr	r3, [pc, #436]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	496a      	ldr	r1, [pc, #424]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003722:	4b65      	ldr	r3, [pc, #404]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003728:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003730:	4961      	ldr	r1, [pc, #388]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003744:	4b5c      	ldr	r3, [pc, #368]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	4959      	ldr	r1, [pc, #356]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003766:	4b54      	ldr	r3, [pc, #336]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	4950      	ldr	r1, [pc, #320]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003788:	4b4b      	ldr	r3, [pc, #300]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003796:	4948      	ldr	r1, [pc, #288]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037aa:	4b43      	ldr	r3, [pc, #268]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	493f      	ldr	r1, [pc, #252]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d028      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037cc:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037da:	4937      	ldr	r1, [pc, #220]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ea:	d106      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ec:	4b32      	ldr	r3, [pc, #200]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a31      	ldr	r2, [pc, #196]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f6:	60d3      	str	r3, [r2, #12]
 80037f8:	e011      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003802:	d10c      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	2101      	movs	r1, #1
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f8a4 	bl	8003958 <RCCEx_PLLSAI1_Config>
 8003810:	4603      	mov	r3, r0
 8003812:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003814:	7cfb      	ldrb	r3, [r7, #19]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d028      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800382a:	4b23      	ldr	r3, [pc, #140]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003838:	491f      	ldr	r1, [pc, #124]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003848:	d106      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800384a:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003854:	60d3      	str	r3, [r2, #12]
 8003856:	e011      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003860:	d10c      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3304      	adds	r3, #4
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f000 f875 	bl	8003958 <RCCEx_PLLSAI1_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003872:	7cfb      	ldrb	r3, [r7, #19]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d02b      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003896:	4908      	ldr	r1, [pc, #32]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a6:	d109      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a02      	ldr	r2, [pc, #8]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038b2:	60d3      	str	r3, [r2, #12]
 80038b4:	e014      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3304      	adds	r3, #4
 80038ca:	2101      	movs	r1, #1
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 f843 	bl	8003958 <RCCEx_PLLSAI1_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01c      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	4916      	ldr	r1, [pc, #88]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800390a:	d10c      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	2102      	movs	r1, #2
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f820 	bl	8003958 <RCCEx_PLLSAI1_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003922:	7cfb      	ldrb	r3, [r7, #19]
 8003924:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	4904      	ldr	r1, [pc, #16]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003948:	7cbb      	ldrb	r3, [r7, #18]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000

08003958 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003966:	4b74      	ldr	r3, [pc, #464]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d018      	beq.n	80039a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003972:	4b71      	ldr	r3, [pc, #452]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0203 	and.w	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d10d      	bne.n	800399e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
       ||
 8003986:	2b00      	cmp	r3, #0
 8003988:	d009      	beq.n	800399e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800398a:	4b6b      	ldr	r3, [pc, #428]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	091b      	lsrs	r3, r3, #4
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
       ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d047      	beq.n	8003a2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
 80039a2:	e044      	b.n	8003a2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d018      	beq.n	80039de <RCCEx_PLLSAI1_Config+0x86>
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d825      	bhi.n	80039fc <RCCEx_PLLSAI1_Config+0xa4>
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d002      	beq.n	80039ba <RCCEx_PLLSAI1_Config+0x62>
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d009      	beq.n	80039cc <RCCEx_PLLSAI1_Config+0x74>
 80039b8:	e020      	b.n	80039fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039ba:	4b5f      	ldr	r3, [pc, #380]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d11d      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ca:	e01a      	b.n	8003a02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039cc:	4b5a      	ldr	r3, [pc, #360]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d116      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039dc:	e013      	b.n	8003a06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039de:	4b56      	ldr	r3, [pc, #344]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039ea:	4b53      	ldr	r3, [pc, #332]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039fa:	e006      	b.n	8003a0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003a00:	e004      	b.n	8003a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a02:	bf00      	nop
 8003a04:	e002      	b.n	8003a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a06:	bf00      	nop
 8003a08:	e000      	b.n	8003a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10d      	bne.n	8003a2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a12:	4b49      	ldr	r3, [pc, #292]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6819      	ldr	r1, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	430b      	orrs	r3, r1
 8003a28:	4943      	ldr	r1, [pc, #268]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d17c      	bne.n	8003b2e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a34:	4b40      	ldr	r3, [pc, #256]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a3f      	ldr	r2, [pc, #252]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a40:	f7fe fbfc 	bl	800223c <HAL_GetTick>
 8003a44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a46:	e009      	b.n	8003a5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a48:	f7fe fbf8 	bl	800223c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d902      	bls.n	8003a5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	73fb      	strb	r3, [r7, #15]
        break;
 8003a5a:	e005      	b.n	8003a68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a5c:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1ef      	bne.n	8003a48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d15f      	bne.n	8003b2e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d110      	bne.n	8003a96 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a74:	4b30      	ldr	r3, [pc, #192]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6892      	ldr	r2, [r2, #8]
 8003a84:	0211      	lsls	r1, r2, #8
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68d2      	ldr	r2, [r2, #12]
 8003a8a:	06d2      	lsls	r2, r2, #27
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	492a      	ldr	r1, [pc, #168]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	610b      	str	r3, [r1, #16]
 8003a94:	e027      	b.n	8003ae6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d112      	bne.n	8003ac2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a9c:	4b26      	ldr	r3, [pc, #152]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003aa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6892      	ldr	r2, [r2, #8]
 8003aac:	0211      	lsls	r1, r2, #8
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6912      	ldr	r2, [r2, #16]
 8003ab2:	0852      	lsrs	r2, r2, #1
 8003ab4:	3a01      	subs	r2, #1
 8003ab6:	0552      	lsls	r2, r2, #21
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	491f      	ldr	r1, [pc, #124]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	610b      	str	r3, [r1, #16]
 8003ac0:	e011      	b.n	8003ae6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003aca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6892      	ldr	r2, [r2, #8]
 8003ad2:	0211      	lsls	r1, r2, #8
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6952      	ldr	r2, [r2, #20]
 8003ad8:	0852      	lsrs	r2, r2, #1
 8003ada:	3a01      	subs	r2, #1
 8003adc:	0652      	lsls	r2, r2, #25
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	4915      	ldr	r1, [pc, #84]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ae6:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003af0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af2:	f7fe fba3 	bl	800223c <HAL_GetTick>
 8003af6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003af8:	e009      	b.n	8003b0e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003afa:	f7fe fb9f 	bl	800223c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d902      	bls.n	8003b0e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	73fb      	strb	r3, [r7, #15]
          break;
 8003b0c:	e005      	b.n	8003b1a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0ef      	beq.n	8003afa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	4903      	ldr	r1, [pc, #12]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000

08003b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e095      	b.n	8003c7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d108      	bne.n	8003b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b5e:	d009      	beq.n	8003b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	61da      	str	r2, [r3, #28]
 8003b66:	e005      	b.n	8003b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd fc62 	bl	8001458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003baa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bb4:	d902      	bls.n	8003bbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	e002      	b.n	8003bc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bca:	d007      	beq.n	8003bdc <HAL_SPI_Init+0xa0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bd4:	d002      	beq.n	8003bdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1e:	ea42 0103 	orr.w	r1, r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	0c1b      	lsrs	r3, r3, #16
 8003c38:	f003 0204 	and.w	r2, r3, #4
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c58:	ea42 0103 	orr.w	r1, r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b08a      	sub	sp, #40	; 0x28
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c90:	2301      	movs	r3, #1
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_SPI_TransmitReceive+0x26>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e1fb      	b.n	80040a0 <HAL_SPI_TransmitReceive+0x41e>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cb0:	f7fe fac4 	bl	800223c <HAL_GetTick>
 8003cb4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cbc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003cc4:	887b      	ldrh	r3, [r7, #2]
 8003cc6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003cc8:	887b      	ldrh	r3, [r7, #2]
 8003cca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ccc:	7efb      	ldrb	r3, [r7, #27]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_SPI_TransmitReceive+0x6e>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd8:	d106      	bne.n	8003ce8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d102      	bne.n	8003ce8 <HAL_SPI_TransmitReceive+0x66>
 8003ce2:	7efb      	ldrb	r3, [r7, #27]
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d003      	beq.n	8003cf0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003cee:	e1cd      	b.n	800408c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_SPI_TransmitReceive+0x80>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <HAL_SPI_TransmitReceive+0x80>
 8003cfc:	887b      	ldrh	r3, [r7, #2]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d103      	bne.n	8003d0a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d08:	e1c0      	b.n	800408c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d003      	beq.n	8003d1e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2205      	movs	r2, #5
 8003d1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	887a      	ldrh	r2, [r7, #2]
 8003d2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	887a      	ldrh	r2, [r7, #2]
 8003d36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	887a      	ldrh	r2, [r7, #2]
 8003d44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	887a      	ldrh	r2, [r7, #2]
 8003d4a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d60:	d802      	bhi.n	8003d68 <HAL_SPI_TransmitReceive+0xe6>
 8003d62:	8a3b      	ldrh	r3, [r7, #16]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d908      	bls.n	8003d7a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	e007      	b.n	8003d8a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d88:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d007      	beq.n	8003da8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003db0:	d97c      	bls.n	8003eac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_SPI_TransmitReceive+0x13e>
 8003dba:	8a7b      	ldrh	r3, [r7, #18]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d169      	bne.n	8003e94 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	881a      	ldrh	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	1c9a      	adds	r2, r3, #2
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003de4:	e056      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d11b      	bne.n	8003e2c <HAL_SPI_TransmitReceive+0x1aa>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d016      	beq.n	8003e2c <HAL_SPI_TransmitReceive+0x1aa>
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d113      	bne.n	8003e2c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	881a      	ldrh	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	1c9a      	adds	r2, r3, #2
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d11c      	bne.n	8003e74 <HAL_SPI_TransmitReceive+0x1f2>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d016      	beq.n	8003e74 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	b292      	uxth	r2, r2
 8003e52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	1c9a      	adds	r2, r3, #2
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e70:	2301      	movs	r3, #1
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e74:	f7fe f9e2 	bl	800223c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d807      	bhi.n	8003e94 <HAL_SPI_TransmitReceive+0x212>
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8a:	d003      	beq.n	8003e94 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e92:	e0fb      	b.n	800408c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1a3      	bne.n	8003de6 <HAL_SPI_TransmitReceive+0x164>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d19d      	bne.n	8003de6 <HAL_SPI_TransmitReceive+0x164>
 8003eaa:	e0df      	b.n	800406c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_SPI_TransmitReceive+0x23a>
 8003eb4:	8a7b      	ldrh	r3, [r7, #18]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	f040 80cb 	bne.w	8004052 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d912      	bls.n	8003eec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	881a      	ldrh	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	1c9a      	adds	r2, r3, #2
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b02      	subs	r3, #2
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eea:	e0b2      	b.n	8004052 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	7812      	ldrb	r2, [r2, #0]
 8003ef8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f12:	e09e      	b.n	8004052 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d134      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x30a>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d02f      	beq.n	8003f8c <HAL_SPI_TransmitReceive+0x30a>
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d12c      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d912      	bls.n	8003f62 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	881a      	ldrh	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	1c9a      	adds	r2, r3, #2
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b02      	subs	r3, #2
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f60:	e012      	b.n	8003f88 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	330c      	adds	r3, #12
 8003f6c:	7812      	ldrb	r2, [r2, #0]
 8003f6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d148      	bne.n	800402c <HAL_SPI_TransmitReceive+0x3aa>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d042      	beq.n	800402c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d923      	bls.n	8003ffa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	b292      	uxth	r2, r2
 8003fbe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	1c9a      	adds	r2, r3, #2
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b02      	subs	r3, #2
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d81f      	bhi.n	8004028 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	e016      	b.n	8004028 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f103 020c 	add.w	r2, r3, #12
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	7812      	ldrb	r2, [r2, #0]
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004028:	2301      	movs	r3, #1
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800402c:	f7fe f906 	bl	800223c <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004038:	429a      	cmp	r2, r3
 800403a:	d803      	bhi.n	8004044 <HAL_SPI_TransmitReceive+0x3c2>
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d102      	bne.n	800404a <HAL_SPI_TransmitReceive+0x3c8>
 8004044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004050:	e01c      	b.n	800408c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	f47f af5b 	bne.w	8003f14 <HAL_SPI_TransmitReceive+0x292>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	f47f af54 	bne.w	8003f14 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f937 	bl	80042e4 <SPI_EndRxTxTransaction>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d006      	beq.n	800408a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	661a      	str	r2, [r3, #96]	; 0x60
 8004088:	e000      	b.n	800408c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800408a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800409c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3728      	adds	r7, #40	; 0x28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040b8:	f7fe f8c0 	bl	800223c <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	4413      	add	r3, r2
 80040c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040c8:	f7fe f8b8 	bl	800223c <HAL_GetTick>
 80040cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040ce:	4b39      	ldr	r3, [pc, #228]	; (80041b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	015b      	lsls	r3, r3, #5
 80040d4:	0d1b      	lsrs	r3, r3, #20
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	fb02 f303 	mul.w	r3, r2, r3
 80040dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040de:	e054      	b.n	800418a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d050      	beq.n	800418a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040e8:	f7fe f8a8 	bl	800223c <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d902      	bls.n	80040fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d13d      	bne.n	800417a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800410c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004116:	d111      	bne.n	800413c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004120:	d004      	beq.n	800412c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412a:	d107      	bne.n	800413c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800413a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004144:	d10f      	bne.n	8004166 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004164:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e017      	b.n	80041aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	3b01      	subs	r3, #1
 8004188:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4013      	ands	r3, r2
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	429a      	cmp	r2, r3
 8004198:	bf0c      	ite	eq
 800419a:	2301      	moveq	r3, #1
 800419c:	2300      	movne	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d19b      	bne.n	80040e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3720      	adds	r7, #32
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000000 	.word	0x20000000

080041b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08a      	sub	sp, #40	; 0x28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80041ca:	f7fe f837 	bl	800223c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	4413      	add	r3, r2
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80041da:	f7fe f82f 	bl	800223c <HAL_GetTick>
 80041de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	330c      	adds	r3, #12
 80041e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80041e8:	4b3d      	ldr	r3, [pc, #244]	; (80042e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	00da      	lsls	r2, r3, #3
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	0d1b      	lsrs	r3, r3, #20
 80041f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004200:	e060      	b.n	80042c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004208:	d107      	bne.n	800421a <SPI_WaitFifoStateUntilTimeout+0x62>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004218:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004220:	d050      	beq.n	80042c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004222:	f7fe f80b 	bl	800223c <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422e:	429a      	cmp	r2, r3
 8004230:	d902      	bls.n	8004238 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d13d      	bne.n	80042b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004246:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004250:	d111      	bne.n	8004276 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425a:	d004      	beq.n	8004266 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004264:	d107      	bne.n	8004276 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004274:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427e:	d10f      	bne.n	80042a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800429e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e010      	b.n	80042d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4013      	ands	r3, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d196      	bne.n	8004202 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3728      	adds	r7, #40	; 0x28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000000 	.word	0x20000000

080042e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f7ff ff5b 	bl	80041b8 <SPI_WaitFifoStateUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d007      	beq.n	8004318 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430c:	f043 0220 	orr.w	r2, r3, #32
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e027      	b.n	8004368 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2200      	movs	r2, #0
 8004320:	2180      	movs	r1, #128	; 0x80
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7ff fec0 	bl	80040a8 <SPI_WaitFlagStateUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004332:	f043 0220 	orr.w	r2, r3, #32
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e014      	b.n	8004368 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2200      	movs	r2, #0
 8004346:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f7ff ff34 	bl	80041b8 <SPI_WaitFifoStateUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435a:	f043 0220 	orr.w	r2, r3, #32
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e000      	b.n	8004368 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e049      	b.n	8004416 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fd fb12 	bl	80019c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4619      	mov	r1, r3
 80043ae:	4610      	mov	r0, r2
 80043b0:	f000 fba0 	bl	8004af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d001      	beq.n	8004438 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e033      	b.n	80044a0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a19      	ldr	r2, [pc, #100]	; (80044ac <HAL_TIM_Base_Start+0x8c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d009      	beq.n	800445e <HAL_TIM_Base_Start+0x3e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004452:	d004      	beq.n	800445e <HAL_TIM_Base_Start+0x3e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <HAL_TIM_Base_Start+0x90>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d115      	bne.n	800448a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <HAL_TIM_Base_Start+0x94>)
 8004466:	4013      	ands	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b06      	cmp	r3, #6
 800446e:	d015      	beq.n	800449c <HAL_TIM_Base_Start+0x7c>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004476:	d011      	beq.n	800449c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004488:	e008      	b.n	800449c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0201 	orr.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e000      	b.n	800449e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40014000 	.word	0x40014000
 80044b4:	00010007 	.word	0x00010007

080044b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e049      	b.n	800455e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f841 	bl	8004566 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f000 fafc 	bl	8004af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
	...

0800457c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <HAL_TIM_PWM_Start+0x24>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	bf14      	ite	ne
 8004598:	2301      	movne	r3, #1
 800459a:	2300      	moveq	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e03c      	b.n	800461a <HAL_TIM_PWM_Start+0x9e>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d109      	bne.n	80045ba <HAL_TIM_PWM_Start+0x3e>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	bf14      	ite	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	2300      	moveq	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	e02f      	b.n	800461a <HAL_TIM_PWM_Start+0x9e>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d109      	bne.n	80045d4 <HAL_TIM_PWM_Start+0x58>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	e022      	b.n	800461a <HAL_TIM_PWM_Start+0x9e>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	d109      	bne.n	80045ee <HAL_TIM_PWM_Start+0x72>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	bf14      	ite	ne
 80045e6:	2301      	movne	r3, #1
 80045e8:	2300      	moveq	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	e015      	b.n	800461a <HAL_TIM_PWM_Start+0x9e>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d109      	bne.n	8004608 <HAL_TIM_PWM_Start+0x8c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	bf14      	ite	ne
 8004600:	2301      	movne	r3, #1
 8004602:	2300      	moveq	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	e008      	b.n	800461a <HAL_TIM_PWM_Start+0x9e>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e07e      	b.n	8004720 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Start+0xb6>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004630:	e023      	b.n	800467a <HAL_TIM_PWM_Start+0xfe>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b04      	cmp	r3, #4
 8004636:	d104      	bne.n	8004642 <HAL_TIM_PWM_Start+0xc6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004640:	e01b      	b.n	800467a <HAL_TIM_PWM_Start+0xfe>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b08      	cmp	r3, #8
 8004646:	d104      	bne.n	8004652 <HAL_TIM_PWM_Start+0xd6>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004650:	e013      	b.n	800467a <HAL_TIM_PWM_Start+0xfe>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b0c      	cmp	r3, #12
 8004656:	d104      	bne.n	8004662 <HAL_TIM_PWM_Start+0xe6>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004660:	e00b      	b.n	800467a <HAL_TIM_PWM_Start+0xfe>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b10      	cmp	r3, #16
 8004666:	d104      	bne.n	8004672 <HAL_TIM_PWM_Start+0xf6>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004670:	e003      	b.n	800467a <HAL_TIM_PWM_Start+0xfe>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2201      	movs	r2, #1
 8004680:	6839      	ldr	r1, [r7, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fdb2 	bl	80051ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a26      	ldr	r2, [pc, #152]	; (8004728 <HAL_TIM_PWM_Start+0x1ac>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d009      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x12a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a25      	ldr	r2, [pc, #148]	; (800472c <HAL_TIM_PWM_Start+0x1b0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d004      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x12a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a23      	ldr	r2, [pc, #140]	; (8004730 <HAL_TIM_PWM_Start+0x1b4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d101      	bne.n	80046aa <HAL_TIM_PWM_Start+0x12e>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <HAL_TIM_PWM_Start+0x130>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a18      	ldr	r2, [pc, #96]	; (8004728 <HAL_TIM_PWM_Start+0x1ac>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d009      	beq.n	80046de <HAL_TIM_PWM_Start+0x162>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d2:	d004      	beq.n	80046de <HAL_TIM_PWM_Start+0x162>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a14      	ldr	r2, [pc, #80]	; (800472c <HAL_TIM_PWM_Start+0x1b0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d115      	bne.n	800470a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	4b13      	ldr	r3, [pc, #76]	; (8004734 <HAL_TIM_PWM_Start+0x1b8>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b06      	cmp	r3, #6
 80046ee:	d015      	beq.n	800471c <HAL_TIM_PWM_Start+0x1a0>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f6:	d011      	beq.n	800471c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004708:	e008      	b.n	800471c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	e000      	b.n	800471e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40014000 	.word	0x40014000
 8004730:	40014400 	.word	0x40014400
 8004734:	00010007 	.word	0x00010007

08004738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004752:	2302      	movs	r3, #2
 8004754:	e0ff      	b.n	8004956 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b14      	cmp	r3, #20
 8004762:	f200 80f0 	bhi.w	8004946 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004766:	a201      	add	r2, pc, #4	; (adr r2, 800476c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	080047c1 	.word	0x080047c1
 8004770:	08004947 	.word	0x08004947
 8004774:	08004947 	.word	0x08004947
 8004778:	08004947 	.word	0x08004947
 800477c:	08004801 	.word	0x08004801
 8004780:	08004947 	.word	0x08004947
 8004784:	08004947 	.word	0x08004947
 8004788:	08004947 	.word	0x08004947
 800478c:	08004843 	.word	0x08004843
 8004790:	08004947 	.word	0x08004947
 8004794:	08004947 	.word	0x08004947
 8004798:	08004947 	.word	0x08004947
 800479c:	08004883 	.word	0x08004883
 80047a0:	08004947 	.word	0x08004947
 80047a4:	08004947 	.word	0x08004947
 80047a8:	08004947 	.word	0x08004947
 80047ac:	080048c5 	.word	0x080048c5
 80047b0:	08004947 	.word	0x08004947
 80047b4:	08004947 	.word	0x08004947
 80047b8:	08004947 	.word	0x08004947
 80047bc:	08004905 	.word	0x08004905
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f9f8 	bl	8004bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0208 	orr.w	r2, r2, #8
 80047da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0204 	bic.w	r2, r2, #4
 80047ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6999      	ldr	r1, [r3, #24]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	619a      	str	r2, [r3, #24]
      break;
 80047fe:	e0a5      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fa54 	bl	8004cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800481a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800482a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6999      	ldr	r1, [r3, #24]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	021a      	lsls	r2, r3, #8
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	619a      	str	r2, [r3, #24]
      break;
 8004840:	e084      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	4618      	mov	r0, r3
 800484a:	f000 faad 	bl	8004da8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0208 	orr.w	r2, r2, #8
 800485c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0204 	bic.w	r2, r2, #4
 800486c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69d9      	ldr	r1, [r3, #28]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	61da      	str	r2, [r3, #28]
      break;
 8004880:	e064      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fb05 	bl	8004e98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800489c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69d9      	ldr	r1, [r3, #28]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	021a      	lsls	r2, r3, #8
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	61da      	str	r2, [r3, #28]
      break;
 80048c2:	e043      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fb42 	bl	8004f54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0208 	orr.w	r2, r2, #8
 80048de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0204 	bic.w	r2, r2, #4
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004902:	e023      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fb7a 	bl	8005004 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800491e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	021a      	lsls	r2, r3, #8
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004944:	e002      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	75fb      	strb	r3, [r7, #23]
      break;
 800494a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004954:	7dfb      	ldrb	r3, [r7, #23]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop

08004960 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_TIM_ConfigClockSource+0x1c>
 8004978:	2302      	movs	r3, #2
 800497a:	e0b6      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x18a>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800499a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800499e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b8:	d03e      	beq.n	8004a38 <HAL_TIM_ConfigClockSource+0xd8>
 80049ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049be:	f200 8087 	bhi.w	8004ad0 <HAL_TIM_ConfigClockSource+0x170>
 80049c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c6:	f000 8086 	beq.w	8004ad6 <HAL_TIM_ConfigClockSource+0x176>
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ce:	d87f      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x170>
 80049d0:	2b70      	cmp	r3, #112	; 0x70
 80049d2:	d01a      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0xaa>
 80049d4:	2b70      	cmp	r3, #112	; 0x70
 80049d6:	d87b      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x170>
 80049d8:	2b60      	cmp	r3, #96	; 0x60
 80049da:	d050      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x11e>
 80049dc:	2b60      	cmp	r3, #96	; 0x60
 80049de:	d877      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x170>
 80049e0:	2b50      	cmp	r3, #80	; 0x50
 80049e2:	d03c      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0xfe>
 80049e4:	2b50      	cmp	r3, #80	; 0x50
 80049e6:	d873      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x170>
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d058      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x13e>
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d86f      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x170>
 80049f0:	2b30      	cmp	r3, #48	; 0x30
 80049f2:	d064      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0x15e>
 80049f4:	2b30      	cmp	r3, #48	; 0x30
 80049f6:	d86b      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x170>
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d060      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0x15e>
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d867      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x170>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d05c      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0x15e>
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d05a      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0x15e>
 8004a08:	e062      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6899      	ldr	r1, [r3, #8]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f000 fbc7 	bl	80051ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	609a      	str	r2, [r3, #8]
      break;
 8004a36:	e04f      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	6899      	ldr	r1, [r3, #8]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f000 fbb0 	bl	80051ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a5a:	609a      	str	r2, [r3, #8]
      break;
 8004a5c:	e03c      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6859      	ldr	r1, [r3, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f000 fb24 	bl	80050b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2150      	movs	r1, #80	; 0x50
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fb7d 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 8004a7c:	e02c      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6859      	ldr	r1, [r3, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f000 fb43 	bl	8005116 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2160      	movs	r1, #96	; 0x60
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fb6d 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 8004a9c:	e01c      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6818      	ldr	r0, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	6859      	ldr	r1, [r3, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f000 fb04 	bl	80050b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2140      	movs	r1, #64	; 0x40
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fb5d 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 8004abc:	e00c      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f000 fb54 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 8004ace:	e003      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ad4:	e000      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ad6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a2a      	ldr	r2, [pc, #168]	; (8004bb0 <TIM_Base_SetConfig+0xbc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d003      	beq.n	8004b14 <TIM_Base_SetConfig+0x20>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b12:	d108      	bne.n	8004b26 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a21      	ldr	r2, [pc, #132]	; (8004bb0 <TIM_Base_SetConfig+0xbc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00b      	beq.n	8004b46 <TIM_Base_SetConfig+0x52>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b34:	d007      	beq.n	8004b46 <TIM_Base_SetConfig+0x52>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <TIM_Base_SetConfig+0xc0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d003      	beq.n	8004b46 <TIM_Base_SetConfig+0x52>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a1d      	ldr	r2, [pc, #116]	; (8004bb8 <TIM_Base_SetConfig+0xc4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d108      	bne.n	8004b58 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a0c      	ldr	r2, [pc, #48]	; (8004bb0 <TIM_Base_SetConfig+0xbc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d007      	beq.n	8004b94 <TIM_Base_SetConfig+0xa0>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a0b      	ldr	r2, [pc, #44]	; (8004bb4 <TIM_Base_SetConfig+0xc0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_Base_SetConfig+0xa0>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <TIM_Base_SetConfig+0xc4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d103      	bne.n	8004b9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	615a      	str	r2, [r3, #20]
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40012c00 	.word	0x40012c00
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40014400 	.word	0x40014400

08004bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f023 0201 	bic.w	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f023 0302 	bic.w	r3, r3, #2
 8004c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a24      	ldr	r2, [pc, #144]	; (8004ca8 <TIM_OC1_SetConfig+0xec>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <TIM_OC1_SetConfig+0x70>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a23      	ldr	r2, [pc, #140]	; (8004cac <TIM_OC1_SetConfig+0xf0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_OC1_SetConfig+0x70>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a22      	ldr	r2, [pc, #136]	; (8004cb0 <TIM_OC1_SetConfig+0xf4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d10c      	bne.n	8004c46 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0308 	bic.w	r3, r3, #8
 8004c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f023 0304 	bic.w	r3, r3, #4
 8004c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <TIM_OC1_SetConfig+0xec>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d007      	beq.n	8004c5e <TIM_OC1_SetConfig+0xa2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a16      	ldr	r2, [pc, #88]	; (8004cac <TIM_OC1_SetConfig+0xf0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d003      	beq.n	8004c5e <TIM_OC1_SetConfig+0xa2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a15      	ldr	r2, [pc, #84]	; (8004cb0 <TIM_OC1_SetConfig+0xf4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d111      	bne.n	8004c82 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	621a      	str	r2, [r3, #32]
}
 8004c9c:	bf00      	nop
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	40012c00 	.word	0x40012c00
 8004cac:	40014000 	.word	0x40014000
 8004cb0:	40014400 	.word	0x40014400

08004cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f023 0210 	bic.w	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	021b      	lsls	r3, r3, #8
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f023 0320 	bic.w	r3, r3, #32
 8004d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a22      	ldr	r2, [pc, #136]	; (8004d9c <TIM_OC2_SetConfig+0xe8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d10d      	bne.n	8004d34 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <TIM_OC2_SetConfig+0xe8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d007      	beq.n	8004d4c <TIM_OC2_SetConfig+0x98>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a18      	ldr	r2, [pc, #96]	; (8004da0 <TIM_OC2_SetConfig+0xec>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d003      	beq.n	8004d4c <TIM_OC2_SetConfig+0x98>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a17      	ldr	r2, [pc, #92]	; (8004da4 <TIM_OC2_SetConfig+0xf0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d113      	bne.n	8004d74 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	621a      	str	r2, [r3, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	40014000 	.word	0x40014000
 8004da4:	40014400 	.word	0x40014400

08004da8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a21      	ldr	r2, [pc, #132]	; (8004e8c <TIM_OC3_SetConfig+0xe4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d10d      	bne.n	8004e26 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <TIM_OC3_SetConfig+0xe4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d007      	beq.n	8004e3e <TIM_OC3_SetConfig+0x96>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a17      	ldr	r2, [pc, #92]	; (8004e90 <TIM_OC3_SetConfig+0xe8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d003      	beq.n	8004e3e <TIM_OC3_SetConfig+0x96>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a16      	ldr	r2, [pc, #88]	; (8004e94 <TIM_OC3_SetConfig+0xec>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d113      	bne.n	8004e66 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	621a      	str	r2, [r3, #32]
}
 8004e80:	bf00      	nop
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	40012c00 	.word	0x40012c00
 8004e90:	40014000 	.word	0x40014000
 8004e94:	40014400 	.word	0x40014400

08004e98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	021b      	lsls	r3, r3, #8
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	031b      	lsls	r3, r3, #12
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a14      	ldr	r2, [pc, #80]	; (8004f48 <TIM_OC4_SetConfig+0xb0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d007      	beq.n	8004f0c <TIM_OC4_SetConfig+0x74>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <TIM_OC4_SetConfig+0xb4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d003      	beq.n	8004f0c <TIM_OC4_SetConfig+0x74>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a12      	ldr	r2, [pc, #72]	; (8004f50 <TIM_OC4_SetConfig+0xb8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d109      	bne.n	8004f20 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	019b      	lsls	r3, r3, #6
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40012c00 	.word	0x40012c00
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40014400 	.word	0x40014400

08004f54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	041b      	lsls	r3, r3, #16
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a13      	ldr	r2, [pc, #76]	; (8004ff8 <TIM_OC5_SetConfig+0xa4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d007      	beq.n	8004fbe <TIM_OC5_SetConfig+0x6a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a12      	ldr	r2, [pc, #72]	; (8004ffc <TIM_OC5_SetConfig+0xa8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d003      	beq.n	8004fbe <TIM_OC5_SetConfig+0x6a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a11      	ldr	r2, [pc, #68]	; (8005000 <TIM_OC5_SetConfig+0xac>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d109      	bne.n	8004fd2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	621a      	str	r2, [r3, #32]
}
 8004fec:	bf00      	nop
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40012c00 	.word	0x40012c00
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40014400 	.word	0x40014400

08005004 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800504a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	051b      	lsls	r3, r3, #20
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a14      	ldr	r2, [pc, #80]	; (80050ac <TIM_OC6_SetConfig+0xa8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_OC6_SetConfig+0x6c>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a13      	ldr	r2, [pc, #76]	; (80050b0 <TIM_OC6_SetConfig+0xac>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_OC6_SetConfig+0x6c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a12      	ldr	r2, [pc, #72]	; (80050b4 <TIM_OC6_SetConfig+0xb0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d109      	bne.n	8005084 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005076:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	029b      	lsls	r3, r3, #10
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40012c00 	.word	0x40012c00
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40014400 	.word	0x40014400

080050b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f023 0201 	bic.w	r2, r3, #1
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f023 030a 	bic.w	r3, r3, #10
 80050f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005116:	b480      	push	{r7}
 8005118:	b087      	sub	sp, #28
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f023 0210 	bic.w	r2, r3, #16
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005140:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	031b      	lsls	r3, r3, #12
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005152:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	621a      	str	r2, [r3, #32]
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	f043 0307 	orr.w	r3, r3, #7
 8005198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	609a      	str	r2, [r3, #8]
}
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	021a      	lsls	r2, r3, #8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	609a      	str	r2, [r3, #8]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	2201      	movs	r2, #1
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a1a      	ldr	r2, [r3, #32]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	43db      	mvns	r3, r3
 800520e:	401a      	ands	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	fa01 f303 	lsl.w	r3, r1, r3
 8005224:	431a      	orrs	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800524c:	2302      	movs	r3, #2
 800524e:	e04f      	b.n	80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a21      	ldr	r2, [pc, #132]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d108      	bne.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005280:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a14      	ldr	r2, [pc, #80]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b8:	d004      	beq.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a10      	ldr	r2, [pc, #64]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d10c      	bne.n	80052de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40014000 	.word	0x40014000

08005304 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800531c:	2302      	movs	r3, #2
 800531e:	e060      	b.n	80053e2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	041b      	lsls	r3, r3, #16
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a14      	ldr	r2, [pc, #80]	; (80053f0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d115      	bne.n	80053d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	051b      	lsls	r3, r3, #20
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40012c00 	.word	0x40012c00

080053f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e040      	b.n	8005488 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fc fbb4 	bl	8001b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2224      	movs	r2, #36	; 0x24
 8005420:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f8c0 	bl	80055b8 <UART_SetConfig>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e022      	b.n	8005488 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fb0e 	bl	8005a6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800545e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800546e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fb95 	bl	8005bb0 <UART_CheckIdleState>
 8005486:	4603      	mov	r3, r0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	; 0x28
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	f040 8082 	bne.w	80055ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <HAL_UART_Transmit+0x26>
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e07a      	b.n	80055b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_UART_Transmit+0x38>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e073      	b.n	80055b0 <HAL_UART_Transmit+0x120>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2221      	movs	r2, #33	; 0x21
 80054dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054de:	f7fc fead 	bl	800223c <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fc:	d108      	bne.n	8005510 <HAL_UART_Transmit+0x80>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d104      	bne.n	8005510 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	61bb      	str	r3, [r7, #24]
 800550e:	e003      	b.n	8005518 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005514:	2300      	movs	r3, #0
 8005516:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005520:	e02d      	b.n	800557e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2200      	movs	r2, #0
 800552a:	2180      	movs	r1, #128	; 0x80
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fb88 	bl	8005c42 <UART_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e039      	b.n	80055b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10b      	bne.n	800555a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	881a      	ldrh	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800554e:	b292      	uxth	r2, r2
 8005550:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	3302      	adds	r3, #2
 8005556:	61bb      	str	r3, [r7, #24]
 8005558:	e008      	b.n	800556c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	781a      	ldrb	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	b292      	uxth	r2, r2
 8005564:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	3301      	adds	r3, #1
 800556a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1cb      	bne.n	8005522 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2200      	movs	r2, #0
 8005592:	2140      	movs	r1, #64	; 0x40
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fb54 	bl	8005c42 <UART_WaitOnFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e005      	b.n	80055b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2220      	movs	r2, #32
 80055a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	e000      	b.n	80055b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80055ae:	2302      	movs	r3, #2
  }
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3720      	adds	r7, #32
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055bc:	b08a      	sub	sp, #40	; 0x28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	431a      	orrs	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	4313      	orrs	r3, r2
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	4b9e      	ldr	r3, [pc, #632]	; (8005860 <UART_SetConfig+0x2a8>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055f0:	430b      	orrs	r3, r1
 80055f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a93      	ldr	r2, [pc, #588]	; (8005864 <UART_SetConfig+0x2ac>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d004      	beq.n	8005624 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005620:	4313      	orrs	r3, r2
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005634:	430a      	orrs	r2, r1
 8005636:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a8a      	ldr	r2, [pc, #552]	; (8005868 <UART_SetConfig+0x2b0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d126      	bne.n	8005690 <UART_SetConfig+0xd8>
 8005642:	4b8a      	ldr	r3, [pc, #552]	; (800586c <UART_SetConfig+0x2b4>)
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	2b03      	cmp	r3, #3
 800564e:	d81b      	bhi.n	8005688 <UART_SetConfig+0xd0>
 8005650:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <UART_SetConfig+0xa0>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	08005669 	.word	0x08005669
 800565c:	08005679 	.word	0x08005679
 8005660:	08005671 	.word	0x08005671
 8005664:	08005681 	.word	0x08005681
 8005668:	2301      	movs	r3, #1
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566e:	e0ab      	b.n	80057c8 <UART_SetConfig+0x210>
 8005670:	2302      	movs	r3, #2
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005676:	e0a7      	b.n	80057c8 <UART_SetConfig+0x210>
 8005678:	2304      	movs	r3, #4
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567e:	e0a3      	b.n	80057c8 <UART_SetConfig+0x210>
 8005680:	2308      	movs	r3, #8
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005686:	e09f      	b.n	80057c8 <UART_SetConfig+0x210>
 8005688:	2310      	movs	r3, #16
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800568e:	e09b      	b.n	80057c8 <UART_SetConfig+0x210>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a76      	ldr	r2, [pc, #472]	; (8005870 <UART_SetConfig+0x2b8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d138      	bne.n	800570c <UART_SetConfig+0x154>
 800569a:	4b74      	ldr	r3, [pc, #464]	; (800586c <UART_SetConfig+0x2b4>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	f003 030c 	and.w	r3, r3, #12
 80056a4:	2b0c      	cmp	r3, #12
 80056a6:	d82d      	bhi.n	8005704 <UART_SetConfig+0x14c>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <UART_SetConfig+0xf8>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056e5 	.word	0x080056e5
 80056b4:	08005705 	.word	0x08005705
 80056b8:	08005705 	.word	0x08005705
 80056bc:	08005705 	.word	0x08005705
 80056c0:	080056f5 	.word	0x080056f5
 80056c4:	08005705 	.word	0x08005705
 80056c8:	08005705 	.word	0x08005705
 80056cc:	08005705 	.word	0x08005705
 80056d0:	080056ed 	.word	0x080056ed
 80056d4:	08005705 	.word	0x08005705
 80056d8:	08005705 	.word	0x08005705
 80056dc:	08005705 	.word	0x08005705
 80056e0:	080056fd 	.word	0x080056fd
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ea:	e06d      	b.n	80057c8 <UART_SetConfig+0x210>
 80056ec:	2302      	movs	r3, #2
 80056ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056f2:	e069      	b.n	80057c8 <UART_SetConfig+0x210>
 80056f4:	2304      	movs	r3, #4
 80056f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056fa:	e065      	b.n	80057c8 <UART_SetConfig+0x210>
 80056fc:	2308      	movs	r3, #8
 80056fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005702:	e061      	b.n	80057c8 <UART_SetConfig+0x210>
 8005704:	2310      	movs	r3, #16
 8005706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800570a:	e05d      	b.n	80057c8 <UART_SetConfig+0x210>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a58      	ldr	r2, [pc, #352]	; (8005874 <UART_SetConfig+0x2bc>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d125      	bne.n	8005762 <UART_SetConfig+0x1aa>
 8005716:	4b55      	ldr	r3, [pc, #340]	; (800586c <UART_SetConfig+0x2b4>)
 8005718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005720:	2b30      	cmp	r3, #48	; 0x30
 8005722:	d016      	beq.n	8005752 <UART_SetConfig+0x19a>
 8005724:	2b30      	cmp	r3, #48	; 0x30
 8005726:	d818      	bhi.n	800575a <UART_SetConfig+0x1a2>
 8005728:	2b20      	cmp	r3, #32
 800572a:	d00a      	beq.n	8005742 <UART_SetConfig+0x18a>
 800572c:	2b20      	cmp	r3, #32
 800572e:	d814      	bhi.n	800575a <UART_SetConfig+0x1a2>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <UART_SetConfig+0x182>
 8005734:	2b10      	cmp	r3, #16
 8005736:	d008      	beq.n	800574a <UART_SetConfig+0x192>
 8005738:	e00f      	b.n	800575a <UART_SetConfig+0x1a2>
 800573a:	2300      	movs	r3, #0
 800573c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005740:	e042      	b.n	80057c8 <UART_SetConfig+0x210>
 8005742:	2302      	movs	r3, #2
 8005744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005748:	e03e      	b.n	80057c8 <UART_SetConfig+0x210>
 800574a:	2304      	movs	r3, #4
 800574c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005750:	e03a      	b.n	80057c8 <UART_SetConfig+0x210>
 8005752:	2308      	movs	r3, #8
 8005754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005758:	e036      	b.n	80057c8 <UART_SetConfig+0x210>
 800575a:	2310      	movs	r3, #16
 800575c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005760:	e032      	b.n	80057c8 <UART_SetConfig+0x210>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a3f      	ldr	r2, [pc, #252]	; (8005864 <UART_SetConfig+0x2ac>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d12a      	bne.n	80057c2 <UART_SetConfig+0x20a>
 800576c:	4b3f      	ldr	r3, [pc, #252]	; (800586c <UART_SetConfig+0x2b4>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005776:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800577a:	d01a      	beq.n	80057b2 <UART_SetConfig+0x1fa>
 800577c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005780:	d81b      	bhi.n	80057ba <UART_SetConfig+0x202>
 8005782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005786:	d00c      	beq.n	80057a2 <UART_SetConfig+0x1ea>
 8005788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578c:	d815      	bhi.n	80057ba <UART_SetConfig+0x202>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <UART_SetConfig+0x1e2>
 8005792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005796:	d008      	beq.n	80057aa <UART_SetConfig+0x1f2>
 8005798:	e00f      	b.n	80057ba <UART_SetConfig+0x202>
 800579a:	2300      	movs	r3, #0
 800579c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a0:	e012      	b.n	80057c8 <UART_SetConfig+0x210>
 80057a2:	2302      	movs	r3, #2
 80057a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a8:	e00e      	b.n	80057c8 <UART_SetConfig+0x210>
 80057aa:	2304      	movs	r3, #4
 80057ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b0:	e00a      	b.n	80057c8 <UART_SetConfig+0x210>
 80057b2:	2308      	movs	r3, #8
 80057b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b8:	e006      	b.n	80057c8 <UART_SetConfig+0x210>
 80057ba:	2310      	movs	r3, #16
 80057bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c0:	e002      	b.n	80057c8 <UART_SetConfig+0x210>
 80057c2:	2310      	movs	r3, #16
 80057c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a25      	ldr	r2, [pc, #148]	; (8005864 <UART_SetConfig+0x2ac>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	f040 808a 	bne.w	80058e8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d824      	bhi.n	8005826 <UART_SetConfig+0x26e>
 80057dc:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <UART_SetConfig+0x22c>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	08005809 	.word	0x08005809
 80057e8:	08005827 	.word	0x08005827
 80057ec:	08005811 	.word	0x08005811
 80057f0:	08005827 	.word	0x08005827
 80057f4:	08005817 	.word	0x08005817
 80057f8:	08005827 	.word	0x08005827
 80057fc:	08005827 	.word	0x08005827
 8005800:	08005827 	.word	0x08005827
 8005804:	0800581f 	.word	0x0800581f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005808:	f7fd fdd0 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 800580c:	61f8      	str	r0, [r7, #28]
        break;
 800580e:	e010      	b.n	8005832 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005810:	4b19      	ldr	r3, [pc, #100]	; (8005878 <UART_SetConfig+0x2c0>)
 8005812:	61fb      	str	r3, [r7, #28]
        break;
 8005814:	e00d      	b.n	8005832 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005816:	f7fd fd31 	bl	800327c <HAL_RCC_GetSysClockFreq>
 800581a:	61f8      	str	r0, [r7, #28]
        break;
 800581c:	e009      	b.n	8005832 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800581e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005822:	61fb      	str	r3, [r7, #28]
        break;
 8005824:	e005      	b.n	8005832 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005830:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8109 	beq.w	8005a4c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	4413      	add	r3, r2
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	429a      	cmp	r2, r3
 8005848:	d305      	bcc.n	8005856 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	429a      	cmp	r2, r3
 8005854:	d912      	bls.n	800587c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800585c:	e0f6      	b.n	8005a4c <UART_SetConfig+0x494>
 800585e:	bf00      	nop
 8005860:	efff69f3 	.word	0xefff69f3
 8005864:	40008000 	.word	0x40008000
 8005868:	40013800 	.word	0x40013800
 800586c:	40021000 	.word	0x40021000
 8005870:	40004400 	.word	0x40004400
 8005874:	40004800 	.word	0x40004800
 8005878:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	2200      	movs	r2, #0
 8005880:	461c      	mov	r4, r3
 8005882:	4615      	mov	r5, r2
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	022b      	lsls	r3, r5, #8
 800588e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005892:	0222      	lsls	r2, r4, #8
 8005894:	68f9      	ldr	r1, [r7, #12]
 8005896:	6849      	ldr	r1, [r1, #4]
 8005898:	0849      	lsrs	r1, r1, #1
 800589a:	2000      	movs	r0, #0
 800589c:	4688      	mov	r8, r1
 800589e:	4681      	mov	r9, r0
 80058a0:	eb12 0a08 	adds.w	sl, r2, r8
 80058a4:	eb43 0b09 	adc.w	fp, r3, r9
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	607a      	str	r2, [r7, #4]
 80058b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058b6:	4650      	mov	r0, sl
 80058b8:	4659      	mov	r1, fp
 80058ba:	f7fb f937 	bl	8000b2c <__aeabi_uldivmod>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4613      	mov	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058cc:	d308      	bcc.n	80058e0 <UART_SetConfig+0x328>
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d4:	d204      	bcs.n	80058e0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	60da      	str	r2, [r3, #12]
 80058de:	e0b5      	b.n	8005a4c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058e6:	e0b1      	b.n	8005a4c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f0:	d15d      	bne.n	80059ae <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80058f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d827      	bhi.n	800594a <UART_SetConfig+0x392>
 80058fa:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <UART_SetConfig+0x348>)
 80058fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005900:	08005925 	.word	0x08005925
 8005904:	0800592d 	.word	0x0800592d
 8005908:	08005935 	.word	0x08005935
 800590c:	0800594b 	.word	0x0800594b
 8005910:	0800593b 	.word	0x0800593b
 8005914:	0800594b 	.word	0x0800594b
 8005918:	0800594b 	.word	0x0800594b
 800591c:	0800594b 	.word	0x0800594b
 8005920:	08005943 	.word	0x08005943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005924:	f7fd fd42 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8005928:	61f8      	str	r0, [r7, #28]
        break;
 800592a:	e014      	b.n	8005956 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800592c:	f7fd fd54 	bl	80033d8 <HAL_RCC_GetPCLK2Freq>
 8005930:	61f8      	str	r0, [r7, #28]
        break;
 8005932:	e010      	b.n	8005956 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005934:	4b4c      	ldr	r3, [pc, #304]	; (8005a68 <UART_SetConfig+0x4b0>)
 8005936:	61fb      	str	r3, [r7, #28]
        break;
 8005938:	e00d      	b.n	8005956 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800593a:	f7fd fc9f 	bl	800327c <HAL_RCC_GetSysClockFreq>
 800593e:	61f8      	str	r0, [r7, #28]
        break;
 8005940:	e009      	b.n	8005956 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005946:	61fb      	str	r3, [r7, #28]
        break;
 8005948:	e005      	b.n	8005956 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005954:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d077      	beq.n	8005a4c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	005a      	lsls	r2, r3, #1
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	441a      	add	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b0f      	cmp	r3, #15
 8005976:	d916      	bls.n	80059a6 <UART_SetConfig+0x3ee>
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597e:	d212      	bcs.n	80059a6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	b29b      	uxth	r3, r3
 8005984:	f023 030f 	bic.w	r3, r3, #15
 8005988:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	b29b      	uxth	r3, r3
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	b29a      	uxth	r2, r3
 8005996:	8afb      	ldrh	r3, [r7, #22]
 8005998:	4313      	orrs	r3, r2
 800599a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	8afa      	ldrh	r2, [r7, #22]
 80059a2:	60da      	str	r2, [r3, #12]
 80059a4:	e052      	b.n	8005a4c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059ac:	e04e      	b.n	8005a4c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	d827      	bhi.n	8005a06 <UART_SetConfig+0x44e>
 80059b6:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <UART_SetConfig+0x404>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059e1 	.word	0x080059e1
 80059c0:	080059e9 	.word	0x080059e9
 80059c4:	080059f1 	.word	0x080059f1
 80059c8:	08005a07 	.word	0x08005a07
 80059cc:	080059f7 	.word	0x080059f7
 80059d0:	08005a07 	.word	0x08005a07
 80059d4:	08005a07 	.word	0x08005a07
 80059d8:	08005a07 	.word	0x08005a07
 80059dc:	080059ff 	.word	0x080059ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e0:	f7fd fce4 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 80059e4:	61f8      	str	r0, [r7, #28]
        break;
 80059e6:	e014      	b.n	8005a12 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059e8:	f7fd fcf6 	bl	80033d8 <HAL_RCC_GetPCLK2Freq>
 80059ec:	61f8      	str	r0, [r7, #28]
        break;
 80059ee:	e010      	b.n	8005a12 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f0:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <UART_SetConfig+0x4b0>)
 80059f2:	61fb      	str	r3, [r7, #28]
        break;
 80059f4:	e00d      	b.n	8005a12 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059f6:	f7fd fc41 	bl	800327c <HAL_RCC_GetSysClockFreq>
 80059fa:	61f8      	str	r0, [r7, #28]
        break;
 80059fc:	e009      	b.n	8005a12 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a02:	61fb      	str	r3, [r7, #28]
        break;
 8005a04:	e005      	b.n	8005a12 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a10:	bf00      	nop
    }

    if (pclk != 0U)
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d019      	beq.n	8005a4c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	085a      	lsrs	r2, r3, #1
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	441a      	add	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	2b0f      	cmp	r3, #15
 8005a30:	d909      	bls.n	8005a46 <UART_SetConfig+0x48e>
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a38:	d205      	bcs.n	8005a46 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60da      	str	r2, [r3, #12]
 8005a44:	e002      	b.n	8005a4c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3728      	adds	r7, #40	; 0x28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a66:	bf00      	nop
 8005a68:	00f42400 	.word	0x00f42400

08005a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01a      	beq.n	8005b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b6a:	d10a      	bne.n	8005b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	605a      	str	r2, [r3, #4]
  }
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bc0:	f7fc fb3c 	bl	800223c <HAL_GetTick>
 8005bc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d10e      	bne.n	8005bf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f82d 	bl	8005c42 <UART_WaitOnFlagUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e023      	b.n	8005c3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d10e      	bne.n	8005c1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f817 	bl	8005c42 <UART_WaitOnFlagUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e00d      	b.n	8005c3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b09c      	sub	sp, #112	; 0x70
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	603b      	str	r3, [r7, #0]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c52:	e0a5      	b.n	8005da0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5a:	f000 80a1 	beq.w	8005da0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c5e:	f7fc faed 	bl	800223c <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d302      	bcc.n	8005c74 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d13e      	bne.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c88:	667b      	str	r3, [r7, #100]	; 0x64
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e6      	bne.n	8005c74 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3308      	adds	r3, #8
 8005cac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e5      	bne.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e067      	b.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d04f      	beq.n	8005da0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d0e:	d147      	bne.n	8005da0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d18:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d38:	637b      	str	r3, [r7, #52]	; 0x34
 8005d3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e6      	bne.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3308      	adds	r3, #8
 8005d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f023 0301 	bic.w	r3, r3, #1
 8005d62:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3308      	adds	r3, #8
 8005d6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d6c:	623a      	str	r2, [r7, #32]
 8005d6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	69f9      	ldr	r1, [r7, #28]
 8005d72:	6a3a      	ldr	r2, [r7, #32]
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e5      	bne.n	8005d4c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e010      	b.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69da      	ldr	r2, [r3, #28]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4013      	ands	r3, r2
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	bf0c      	ite	eq
 8005db0:	2301      	moveq	r3, #1
 8005db2:	2300      	movne	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	f43f af4a 	beq.w	8005c54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3770      	adds	r7, #112	; 0x70
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <setCSLine>:
#define RES14           14

#define AMT22_DELAY     10

void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	807b      	strh	r3, [r7, #2]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8005dda:	787a      	ldrb	r2, [r7, #1]
 8005ddc:	887b      	ldrh	r3, [r7, #2]
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7fc fcbb 	bl	800275c <HAL_GPIO_WritePin>
}
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b088      	sub	sp, #32
 8005df2:	af02      	add	r7, sp, #8
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	72fb      	strb	r3, [r7, #11]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 8005e02:	893b      	ldrh	r3, [r7, #8]
 8005e04:	2200      	movs	r2, #0
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff ffde 	bl	8005dca <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8005e0e:	200a      	movs	r0, #10
 8005e10:	f000 f8d2 	bl	8005fb8 <delay_us_AMT22>

  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8005e14:	f107 0217 	add.w	r2, r7, #23
 8005e18:	f107 010b 	add.w	r1, r7, #11
 8005e1c:	230a      	movs	r3, #10
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	2301      	movs	r3, #1
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f7fd ff2d 	bl	8003c82 <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  //  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8005e28:	200a      	movs	r0, #10
 8005e2a:	f000 f8c5 	bl	8005fb8 <delay_us_AMT22>

  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 8005e2e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005e32:	893b      	ldrh	r3, [r7, #8]
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff ffc7 	bl	8005dca <setCSLine>

  return data;
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b08c      	sub	sp, #48	; 0x30
 8005e4a:	af02      	add	r7, sp, #8
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	4611      	mov	r1, r2
 8005e52:	461a      	mov	r2, r3
 8005e54:	460b      	mov	r3, r1
 8005e56:	80fb      	strh	r3, [r7, #6]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8;
 8005e5c:	88fa      	ldrh	r2, [r7, #6]
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	2300      	movs	r3, #0
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	4613      	mov	r3, r2
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7ff ffbe 	bl	8005dee <spiWriteRead>
 8005e72:	4603      	mov	r3, r0
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8005e7a:	200a      	movs	r0, #10
 8005e7c:	f000 f89c 	bl	8005fb8 <delay_us_AMT22>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer);
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	2301      	movs	r3, #1
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	2100      	movs	r1, #0
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7ff ffac 	bl	8005dee <spiWriteRead>
 8005e96:	4603      	mov	r3, r0
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	623b      	str	r3, [r7, #32]
 8005ea4:	e010      	b.n	8005ec8 <getPositionSPI+0x82>
 8005ea6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	fa42 f303 	asr.w	r3, r2, r3
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	b2d9      	uxtb	r1, r3
 8005eb6:	f107 0210 	add.w	r2, r7, #16
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	460a      	mov	r2, r1
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	623b      	str	r3, [r7, #32]
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	2b0f      	cmp	r3, #15
 8005ecc:	ddeb      	ble.n	8005ea6 <getPositionSPI+0x60>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
 if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8005ece:	7ffb      	ldrb	r3, [r7, #31]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	7f7a      	ldrb	r2, [r7, #29]
 8005ed4:	7efb      	ldrb	r3, [r7, #27]
 8005ed6:	4053      	eors	r3, r2
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	7e7b      	ldrb	r3, [r7, #25]
 8005edc:	4053      	eors	r3, r2
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
 8005ee2:	4053      	eors	r3, r2
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	7d7b      	ldrb	r3, [r7, #21]
 8005ee8:	4053      	eors	r3, r2
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	7cfb      	ldrb	r3, [r7, #19]
 8005eee:	4053      	eors	r3, r2
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	7c7b      	ldrb	r3, [r7, #17]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	bf0c      	ite	eq
 8005ef8:	2301      	moveq	r3, #1
 8005efa:	2300      	movne	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	4299      	cmp	r1, r3
 8005f00:	d11e      	bne.n	8005f40 <getPositionSPI+0xfa>
         && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8005f02:	7fbb      	ldrb	r3, [r7, #30]
 8005f04:	4619      	mov	r1, r3
 8005f06:	7f3a      	ldrb	r2, [r7, #28]
 8005f08:	7ebb      	ldrb	r3, [r7, #26]
 8005f0a:	4053      	eors	r3, r2
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	7e3b      	ldrb	r3, [r7, #24]
 8005f10:	4053      	eors	r3, r2
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	7dbb      	ldrb	r3, [r7, #22]
 8005f16:	4053      	eors	r3, r2
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	7d3b      	ldrb	r3, [r7, #20]
 8005f1c:	4053      	eors	r3, r2
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	7cbb      	ldrb	r3, [r7, #18]
 8005f22:	4053      	eors	r3, r2
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	7c3b      	ldrb	r3, [r7, #16]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	bf0c      	ite	eq
 8005f2c:	2301      	moveq	r3, #1
 8005f2e:	2300      	movne	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	4299      	cmp	r1, r3
 8005f34:	d104      	bne.n	8005f40 <getPositionSPI+0xfa>
   {
     //we got back a good position, so just mask away the checkbits
     currentPosition &= 0x3FFF;
 8005f36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f38:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005f3c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005f3e:	e002      	b.n	8005f46 <getPositionSPI+0x100>
   }
 else
 {
   currentPosition = 0xFFFF; //bad position
 8005f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f44:	84fb      	strh	r3, [r7, #38]	; 0x26
 }
  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 8005f46:	797b      	ldrb	r3, [r7, #5]
 8005f48:	2b0c      	cmp	r3, #12
 8005f4a:	d107      	bne.n	8005f5c <getPositionSPI+0x116>
 8005f4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d002      	beq.n	8005f5c <getPositionSPI+0x116>
 8005f56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f58:	089b      	lsrs	r3, r3, #2
 8005f5a:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 8005f5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3728      	adds	r7, #40	; 0x28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <resetAMT22>:
//  delay(timer, 250);
  delay_us_AMT22(250);
}

void resetAMT22(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, TIM_HandleTypeDef *timer)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b086      	sub	sp, #24
 8005f6a:	af02      	add	r7, sp, #8
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	4613      	mov	r3, r2
 8005f74:	80fb      	strh	r3, [r7, #6]
  spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer);
 8005f76:	88fa      	ldrh	r2, [r7, #6]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	9301      	str	r3, [sp, #4]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	2100      	movs	r1, #0
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff ff31 	bl	8005dee <spiWriteRead>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8005f8c:	200a      	movs	r0, #10
 8005f8e:	f000 f813 	bl	8005fb8 <delay_us_AMT22>

  spiWriteRead(hspi, AMT22_RESET, encoderPort, encoderPin, 1, timer);
 8005f92:	88fa      	ldrh	r2, [r7, #6]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	9301      	str	r3, [sp, #4]
 8005f98:	2301      	movs	r3, #1
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	2160      	movs	r1, #96	; 0x60
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f7ff ff23 	bl	8005dee <spiWriteRead>

//  delay(timer, 250);
  delay_us_AMT22(250);
 8005fa8:	20fa      	movs	r0, #250	; 0xfa
 8005faa:	f000 f805 	bl	8005fb8 <delay_us_AMT22>
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <delay_us_AMT22>:
			passedTime +=timer->Init.Period;
		}
	}
}
void delay_us_AMT22 (uint16_t us)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <delay_us_AMT22+0x30>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8005fca:	bf00      	nop
 8005fcc:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <delay_us_AMT22+0x30>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d3f9      	bcc.n	8005fcc <delay_us_AMT22+0x14>
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	200001bc 	.word	0x200001bc

08005fec <__errno>:
 8005fec:	4b01      	ldr	r3, [pc, #4]	; (8005ff4 <__errno+0x8>)
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	2000000c 	.word	0x2000000c

08005ff8 <__libc_init_array>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	4d0d      	ldr	r5, [pc, #52]	; (8006030 <__libc_init_array+0x38>)
 8005ffc:	4c0d      	ldr	r4, [pc, #52]	; (8006034 <__libc_init_array+0x3c>)
 8005ffe:	1b64      	subs	r4, r4, r5
 8006000:	10a4      	asrs	r4, r4, #2
 8006002:	2600      	movs	r6, #0
 8006004:	42a6      	cmp	r6, r4
 8006006:	d109      	bne.n	800601c <__libc_init_array+0x24>
 8006008:	4d0b      	ldr	r5, [pc, #44]	; (8006038 <__libc_init_array+0x40>)
 800600a:	4c0c      	ldr	r4, [pc, #48]	; (800603c <__libc_init_array+0x44>)
 800600c:	f001 f998 	bl	8007340 <_init>
 8006010:	1b64      	subs	r4, r4, r5
 8006012:	10a4      	asrs	r4, r4, #2
 8006014:	2600      	movs	r6, #0
 8006016:	42a6      	cmp	r6, r4
 8006018:	d105      	bne.n	8006026 <__libc_init_array+0x2e>
 800601a:	bd70      	pop	{r4, r5, r6, pc}
 800601c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006020:	4798      	blx	r3
 8006022:	3601      	adds	r6, #1
 8006024:	e7ee      	b.n	8006004 <__libc_init_array+0xc>
 8006026:	f855 3b04 	ldr.w	r3, [r5], #4
 800602a:	4798      	blx	r3
 800602c:	3601      	adds	r6, #1
 800602e:	e7f2      	b.n	8006016 <__libc_init_array+0x1e>
 8006030:	08007af4 	.word	0x08007af4
 8006034:	08007af4 	.word	0x08007af4
 8006038:	08007af4 	.word	0x08007af4
 800603c:	08007af8 	.word	0x08007af8

08006040 <memset>:
 8006040:	4402      	add	r2, r0
 8006042:	4603      	mov	r3, r0
 8006044:	4293      	cmp	r3, r2
 8006046:	d100      	bne.n	800604a <memset+0xa>
 8006048:	4770      	bx	lr
 800604a:	f803 1b01 	strb.w	r1, [r3], #1
 800604e:	e7f9      	b.n	8006044 <memset+0x4>

08006050 <_free_r>:
 8006050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006052:	2900      	cmp	r1, #0
 8006054:	d044      	beq.n	80060e0 <_free_r+0x90>
 8006056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800605a:	9001      	str	r0, [sp, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f1a1 0404 	sub.w	r4, r1, #4
 8006062:	bfb8      	it	lt
 8006064:	18e4      	addlt	r4, r4, r3
 8006066:	f000 fd97 	bl	8006b98 <__malloc_lock>
 800606a:	4a1e      	ldr	r2, [pc, #120]	; (80060e4 <_free_r+0x94>)
 800606c:	9801      	ldr	r0, [sp, #4]
 800606e:	6813      	ldr	r3, [r2, #0]
 8006070:	b933      	cbnz	r3, 8006080 <_free_r+0x30>
 8006072:	6063      	str	r3, [r4, #4]
 8006074:	6014      	str	r4, [r2, #0]
 8006076:	b003      	add	sp, #12
 8006078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800607c:	f000 bd92 	b.w	8006ba4 <__malloc_unlock>
 8006080:	42a3      	cmp	r3, r4
 8006082:	d908      	bls.n	8006096 <_free_r+0x46>
 8006084:	6825      	ldr	r5, [r4, #0]
 8006086:	1961      	adds	r1, r4, r5
 8006088:	428b      	cmp	r3, r1
 800608a:	bf01      	itttt	eq
 800608c:	6819      	ldreq	r1, [r3, #0]
 800608e:	685b      	ldreq	r3, [r3, #4]
 8006090:	1949      	addeq	r1, r1, r5
 8006092:	6021      	streq	r1, [r4, #0]
 8006094:	e7ed      	b.n	8006072 <_free_r+0x22>
 8006096:	461a      	mov	r2, r3
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	b10b      	cbz	r3, 80060a0 <_free_r+0x50>
 800609c:	42a3      	cmp	r3, r4
 800609e:	d9fa      	bls.n	8006096 <_free_r+0x46>
 80060a0:	6811      	ldr	r1, [r2, #0]
 80060a2:	1855      	adds	r5, r2, r1
 80060a4:	42a5      	cmp	r5, r4
 80060a6:	d10b      	bne.n	80060c0 <_free_r+0x70>
 80060a8:	6824      	ldr	r4, [r4, #0]
 80060aa:	4421      	add	r1, r4
 80060ac:	1854      	adds	r4, r2, r1
 80060ae:	42a3      	cmp	r3, r4
 80060b0:	6011      	str	r1, [r2, #0]
 80060b2:	d1e0      	bne.n	8006076 <_free_r+0x26>
 80060b4:	681c      	ldr	r4, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	6053      	str	r3, [r2, #4]
 80060ba:	4421      	add	r1, r4
 80060bc:	6011      	str	r1, [r2, #0]
 80060be:	e7da      	b.n	8006076 <_free_r+0x26>
 80060c0:	d902      	bls.n	80060c8 <_free_r+0x78>
 80060c2:	230c      	movs	r3, #12
 80060c4:	6003      	str	r3, [r0, #0]
 80060c6:	e7d6      	b.n	8006076 <_free_r+0x26>
 80060c8:	6825      	ldr	r5, [r4, #0]
 80060ca:	1961      	adds	r1, r4, r5
 80060cc:	428b      	cmp	r3, r1
 80060ce:	bf04      	itt	eq
 80060d0:	6819      	ldreq	r1, [r3, #0]
 80060d2:	685b      	ldreq	r3, [r3, #4]
 80060d4:	6063      	str	r3, [r4, #4]
 80060d6:	bf04      	itt	eq
 80060d8:	1949      	addeq	r1, r1, r5
 80060da:	6021      	streq	r1, [r4, #0]
 80060dc:	6054      	str	r4, [r2, #4]
 80060de:	e7ca      	b.n	8006076 <_free_r+0x26>
 80060e0:	b003      	add	sp, #12
 80060e2:	bd30      	pop	{r4, r5, pc}
 80060e4:	200002dc 	.word	0x200002dc

080060e8 <sbrk_aligned>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	4e0e      	ldr	r6, [pc, #56]	; (8006124 <sbrk_aligned+0x3c>)
 80060ec:	460c      	mov	r4, r1
 80060ee:	6831      	ldr	r1, [r6, #0]
 80060f0:	4605      	mov	r5, r0
 80060f2:	b911      	cbnz	r1, 80060fa <sbrk_aligned+0x12>
 80060f4:	f000 f92e 	bl	8006354 <_sbrk_r>
 80060f8:	6030      	str	r0, [r6, #0]
 80060fa:	4621      	mov	r1, r4
 80060fc:	4628      	mov	r0, r5
 80060fe:	f000 f929 	bl	8006354 <_sbrk_r>
 8006102:	1c43      	adds	r3, r0, #1
 8006104:	d00a      	beq.n	800611c <sbrk_aligned+0x34>
 8006106:	1cc4      	adds	r4, r0, #3
 8006108:	f024 0403 	bic.w	r4, r4, #3
 800610c:	42a0      	cmp	r0, r4
 800610e:	d007      	beq.n	8006120 <sbrk_aligned+0x38>
 8006110:	1a21      	subs	r1, r4, r0
 8006112:	4628      	mov	r0, r5
 8006114:	f000 f91e 	bl	8006354 <_sbrk_r>
 8006118:	3001      	adds	r0, #1
 800611a:	d101      	bne.n	8006120 <sbrk_aligned+0x38>
 800611c:	f04f 34ff 	mov.w	r4, #4294967295
 8006120:	4620      	mov	r0, r4
 8006122:	bd70      	pop	{r4, r5, r6, pc}
 8006124:	200002e0 	.word	0x200002e0

08006128 <_malloc_r>:
 8006128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612c:	1ccd      	adds	r5, r1, #3
 800612e:	f025 0503 	bic.w	r5, r5, #3
 8006132:	3508      	adds	r5, #8
 8006134:	2d0c      	cmp	r5, #12
 8006136:	bf38      	it	cc
 8006138:	250c      	movcc	r5, #12
 800613a:	2d00      	cmp	r5, #0
 800613c:	4607      	mov	r7, r0
 800613e:	db01      	blt.n	8006144 <_malloc_r+0x1c>
 8006140:	42a9      	cmp	r1, r5
 8006142:	d905      	bls.n	8006150 <_malloc_r+0x28>
 8006144:	230c      	movs	r3, #12
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	2600      	movs	r6, #0
 800614a:	4630      	mov	r0, r6
 800614c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006150:	4e2e      	ldr	r6, [pc, #184]	; (800620c <_malloc_r+0xe4>)
 8006152:	f000 fd21 	bl	8006b98 <__malloc_lock>
 8006156:	6833      	ldr	r3, [r6, #0]
 8006158:	461c      	mov	r4, r3
 800615a:	bb34      	cbnz	r4, 80061aa <_malloc_r+0x82>
 800615c:	4629      	mov	r1, r5
 800615e:	4638      	mov	r0, r7
 8006160:	f7ff ffc2 	bl	80060e8 <sbrk_aligned>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	4604      	mov	r4, r0
 8006168:	d14d      	bne.n	8006206 <_malloc_r+0xde>
 800616a:	6834      	ldr	r4, [r6, #0]
 800616c:	4626      	mov	r6, r4
 800616e:	2e00      	cmp	r6, #0
 8006170:	d140      	bne.n	80061f4 <_malloc_r+0xcc>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	4631      	mov	r1, r6
 8006176:	4638      	mov	r0, r7
 8006178:	eb04 0803 	add.w	r8, r4, r3
 800617c:	f000 f8ea 	bl	8006354 <_sbrk_r>
 8006180:	4580      	cmp	r8, r0
 8006182:	d13a      	bne.n	80061fa <_malloc_r+0xd2>
 8006184:	6821      	ldr	r1, [r4, #0]
 8006186:	3503      	adds	r5, #3
 8006188:	1a6d      	subs	r5, r5, r1
 800618a:	f025 0503 	bic.w	r5, r5, #3
 800618e:	3508      	adds	r5, #8
 8006190:	2d0c      	cmp	r5, #12
 8006192:	bf38      	it	cc
 8006194:	250c      	movcc	r5, #12
 8006196:	4629      	mov	r1, r5
 8006198:	4638      	mov	r0, r7
 800619a:	f7ff ffa5 	bl	80060e8 <sbrk_aligned>
 800619e:	3001      	adds	r0, #1
 80061a0:	d02b      	beq.n	80061fa <_malloc_r+0xd2>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	442b      	add	r3, r5
 80061a6:	6023      	str	r3, [r4, #0]
 80061a8:	e00e      	b.n	80061c8 <_malloc_r+0xa0>
 80061aa:	6822      	ldr	r2, [r4, #0]
 80061ac:	1b52      	subs	r2, r2, r5
 80061ae:	d41e      	bmi.n	80061ee <_malloc_r+0xc6>
 80061b0:	2a0b      	cmp	r2, #11
 80061b2:	d916      	bls.n	80061e2 <_malloc_r+0xba>
 80061b4:	1961      	adds	r1, r4, r5
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	6025      	str	r5, [r4, #0]
 80061ba:	bf18      	it	ne
 80061bc:	6059      	strne	r1, [r3, #4]
 80061be:	6863      	ldr	r3, [r4, #4]
 80061c0:	bf08      	it	eq
 80061c2:	6031      	streq	r1, [r6, #0]
 80061c4:	5162      	str	r2, [r4, r5]
 80061c6:	604b      	str	r3, [r1, #4]
 80061c8:	4638      	mov	r0, r7
 80061ca:	f104 060b 	add.w	r6, r4, #11
 80061ce:	f000 fce9 	bl	8006ba4 <__malloc_unlock>
 80061d2:	f026 0607 	bic.w	r6, r6, #7
 80061d6:	1d23      	adds	r3, r4, #4
 80061d8:	1af2      	subs	r2, r6, r3
 80061da:	d0b6      	beq.n	800614a <_malloc_r+0x22>
 80061dc:	1b9b      	subs	r3, r3, r6
 80061de:	50a3      	str	r3, [r4, r2]
 80061e0:	e7b3      	b.n	800614a <_malloc_r+0x22>
 80061e2:	6862      	ldr	r2, [r4, #4]
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	bf0c      	ite	eq
 80061e8:	6032      	streq	r2, [r6, #0]
 80061ea:	605a      	strne	r2, [r3, #4]
 80061ec:	e7ec      	b.n	80061c8 <_malloc_r+0xa0>
 80061ee:	4623      	mov	r3, r4
 80061f0:	6864      	ldr	r4, [r4, #4]
 80061f2:	e7b2      	b.n	800615a <_malloc_r+0x32>
 80061f4:	4634      	mov	r4, r6
 80061f6:	6876      	ldr	r6, [r6, #4]
 80061f8:	e7b9      	b.n	800616e <_malloc_r+0x46>
 80061fa:	230c      	movs	r3, #12
 80061fc:	603b      	str	r3, [r7, #0]
 80061fe:	4638      	mov	r0, r7
 8006200:	f000 fcd0 	bl	8006ba4 <__malloc_unlock>
 8006204:	e7a1      	b.n	800614a <_malloc_r+0x22>
 8006206:	6025      	str	r5, [r4, #0]
 8006208:	e7de      	b.n	80061c8 <_malloc_r+0xa0>
 800620a:	bf00      	nop
 800620c:	200002dc 	.word	0x200002dc

08006210 <_perror_r>:
 8006210:	6983      	ldr	r3, [r0, #24]
 8006212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006214:	68c4      	ldr	r4, [r0, #12]
 8006216:	4605      	mov	r5, r0
 8006218:	460e      	mov	r6, r1
 800621a:	b90b      	cbnz	r3, 8006220 <_perror_r+0x10>
 800621c:	f000 fc1c 	bl	8006a58 <__sinit>
 8006220:	4b43      	ldr	r3, [pc, #268]	; (8006330 <_perror_r+0x120>)
 8006222:	429c      	cmp	r4, r3
 8006224:	d132      	bne.n	800628c <_perror_r+0x7c>
 8006226:	686c      	ldr	r4, [r5, #4]
 8006228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800622a:	07d8      	lsls	r0, r3, #31
 800622c:	d405      	bmi.n	800623a <_perror_r+0x2a>
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	0599      	lsls	r1, r3, #22
 8006232:	d402      	bmi.n	800623a <_perror_r+0x2a>
 8006234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006236:	f000 fcad 	bl	8006b94 <__retarget_lock_acquire_recursive>
 800623a:	4621      	mov	r1, r4
 800623c:	4628      	mov	r0, r5
 800623e:	f000 fb39 	bl	80068b4 <_fflush_r>
 8006242:	bb6e      	cbnz	r6, 80062a0 <_perror_r+0x90>
 8006244:	6829      	ldr	r1, [r5, #0]
 8006246:	ab01      	add	r3, sp, #4
 8006248:	2201      	movs	r2, #1
 800624a:	4628      	mov	r0, r5
 800624c:	f000 f892 	bl	8006374 <_strerror_r>
 8006250:	4607      	mov	r7, r0
 8006252:	2800      	cmp	r0, #0
 8006254:	d14f      	bne.n	80062f6 <_perror_r+0xe6>
 8006256:	4837      	ldr	r0, [pc, #220]	; (8006334 <_perror_r+0x124>)
 8006258:	4f36      	ldr	r7, [pc, #216]	; (8006334 <_perror_r+0x124>)
 800625a:	f7f9 ffb9 	bl	80001d0 <strlen>
 800625e:	4606      	mov	r6, r0
 8006260:	b156      	cbz	r6, 8006278 <_perror_r+0x68>
 8006262:	4620      	mov	r0, r4
 8006264:	f000 fb62 	bl	800692c <fileno>
 8006268:	4633      	mov	r3, r6
 800626a:	4601      	mov	r1, r0
 800626c:	463a      	mov	r2, r7
 800626e:	4628      	mov	r0, r5
 8006270:	f000 fa88 	bl	8006784 <_write_r>
 8006274:	2800      	cmp	r0, #0
 8006276:	da51      	bge.n	800631c <_perror_r+0x10c>
 8006278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800627c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800627e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006282:	07d2      	lsls	r2, r2, #31
 8006284:	81a3      	strh	r3, [r4, #12]
 8006286:	d54c      	bpl.n	8006322 <_perror_r+0x112>
 8006288:	b003      	add	sp, #12
 800628a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800628c:	4b2a      	ldr	r3, [pc, #168]	; (8006338 <_perror_r+0x128>)
 800628e:	429c      	cmp	r4, r3
 8006290:	d101      	bne.n	8006296 <_perror_r+0x86>
 8006292:	68ac      	ldr	r4, [r5, #8]
 8006294:	e7c8      	b.n	8006228 <_perror_r+0x18>
 8006296:	4b29      	ldr	r3, [pc, #164]	; (800633c <_perror_r+0x12c>)
 8006298:	429c      	cmp	r4, r3
 800629a:	bf08      	it	eq
 800629c:	68ec      	ldreq	r4, [r5, #12]
 800629e:	e7c3      	b.n	8006228 <_perror_r+0x18>
 80062a0:	7833      	ldrb	r3, [r6, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0ce      	beq.n	8006244 <_perror_r+0x34>
 80062a6:	4630      	mov	r0, r6
 80062a8:	f7f9 ff92 	bl	80001d0 <strlen>
 80062ac:	4607      	mov	r7, r0
 80062ae:	b157      	cbz	r7, 80062c6 <_perror_r+0xb6>
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 fb3b 	bl	800692c <fileno>
 80062b6:	463b      	mov	r3, r7
 80062b8:	4601      	mov	r1, r0
 80062ba:	4632      	mov	r2, r6
 80062bc:	4628      	mov	r0, r5
 80062be:	f000 fa61 	bl	8006784 <_write_r>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	da14      	bge.n	80062f0 <_perror_r+0xe0>
 80062c6:	481e      	ldr	r0, [pc, #120]	; (8006340 <_perror_r+0x130>)
 80062c8:	4f1d      	ldr	r7, [pc, #116]	; (8006340 <_perror_r+0x130>)
 80062ca:	f7f9 ff81 	bl	80001d0 <strlen>
 80062ce:	4606      	mov	r6, r0
 80062d0:	2e00      	cmp	r6, #0
 80062d2:	d0b7      	beq.n	8006244 <_perror_r+0x34>
 80062d4:	4620      	mov	r0, r4
 80062d6:	f000 fb29 	bl	800692c <fileno>
 80062da:	4633      	mov	r3, r6
 80062dc:	4601      	mov	r1, r0
 80062de:	463a      	mov	r2, r7
 80062e0:	4628      	mov	r0, r5
 80062e2:	f000 fa4f 	bl	8006784 <_write_r>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	dbac      	blt.n	8006244 <_perror_r+0x34>
 80062ea:	1a36      	subs	r6, r6, r0
 80062ec:	4407      	add	r7, r0
 80062ee:	e7ef      	b.n	80062d0 <_perror_r+0xc0>
 80062f0:	1a3f      	subs	r7, r7, r0
 80062f2:	4406      	add	r6, r0
 80062f4:	e7db      	b.n	80062ae <_perror_r+0x9e>
 80062f6:	f7f9 ff6b 	bl	80001d0 <strlen>
 80062fa:	4606      	mov	r6, r0
 80062fc:	2e00      	cmp	r6, #0
 80062fe:	d0aa      	beq.n	8006256 <_perror_r+0x46>
 8006300:	4620      	mov	r0, r4
 8006302:	f000 fb13 	bl	800692c <fileno>
 8006306:	4633      	mov	r3, r6
 8006308:	4601      	mov	r1, r0
 800630a:	463a      	mov	r2, r7
 800630c:	4628      	mov	r0, r5
 800630e:	f000 fa39 	bl	8006784 <_write_r>
 8006312:	2800      	cmp	r0, #0
 8006314:	db9f      	blt.n	8006256 <_perror_r+0x46>
 8006316:	1a36      	subs	r6, r6, r0
 8006318:	4407      	add	r7, r0
 800631a:	e7ef      	b.n	80062fc <_perror_r+0xec>
 800631c:	1a36      	subs	r6, r6, r0
 800631e:	4407      	add	r7, r0
 8006320:	e79e      	b.n	8006260 <_perror_r+0x50>
 8006322:	059b      	lsls	r3, r3, #22
 8006324:	d4b0      	bmi.n	8006288 <_perror_r+0x78>
 8006326:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006328:	f000 fc35 	bl	8006b96 <__retarget_lock_release_recursive>
 800632c:	e7ac      	b.n	8006288 <_perror_r+0x78>
 800632e:	bf00      	nop
 8006330:	08007a78 	.word	0x08007a78
 8006334:	080073bf 	.word	0x080073bf
 8006338:	08007a98 	.word	0x08007a98
 800633c:	08007a58 	.word	0x08007a58
 8006340:	080073bc 	.word	0x080073bc

08006344 <perror>:
 8006344:	4b02      	ldr	r3, [pc, #8]	; (8006350 <perror+0xc>)
 8006346:	4601      	mov	r1, r0
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	f7ff bf61 	b.w	8006210 <_perror_r>
 800634e:	bf00      	nop
 8006350:	2000000c 	.word	0x2000000c

08006354 <_sbrk_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	4d06      	ldr	r5, [pc, #24]	; (8006370 <_sbrk_r+0x1c>)
 8006358:	2300      	movs	r3, #0
 800635a:	4604      	mov	r4, r0
 800635c:	4608      	mov	r0, r1
 800635e:	602b      	str	r3, [r5, #0]
 8006360:	f7fb f9c4 	bl	80016ec <_sbrk>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d102      	bne.n	800636e <_sbrk_r+0x1a>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	b103      	cbz	r3, 800636e <_sbrk_r+0x1a>
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	200002e8 	.word	0x200002e8

08006374 <_strerror_r>:
 8006374:	b510      	push	{r4, lr}
 8006376:	4604      	mov	r4, r0
 8006378:	4608      	mov	r0, r1
 800637a:	4611      	mov	r1, r2
 800637c:	288e      	cmp	r0, #142	; 0x8e
 800637e:	f200 8130 	bhi.w	80065e2 <_strerror_r+0x26e>
 8006382:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006386:	0139      	.short	0x0139
 8006388:	0092008f 	.word	0x0092008f
 800638c:	00960094 	.word	0x00960094
 8006390:	009a0098 	.word	0x009a0098
 8006394:	009e009c 	.word	0x009e009c
 8006398:	00a400a2 	.word	0x00a400a2
 800639c:	00aa00a8 	.word	0x00aa00a8
 80063a0:	00ae00ac 	.word	0x00ae00ac
 80063a4:	00b0012e 	.word	0x00b0012e
 80063a8:	00b400b2 	.word	0x00b400b2
 80063ac:	00b800b6 	.word	0x00b800b6
 80063b0:	00c000be 	.word	0x00c000be
 80063b4:	00c800c6 	.word	0x00c800c6
 80063b8:	00cc00ca 	.word	0x00cc00ca
 80063bc:	00d200ce 	.word	0x00d200ce
 80063c0:	00d800d6 	.word	0x00d800d6
 80063c4:	00dc00da 	.word	0x00dc00da
 80063c8:	00e000de 	.word	0x00e000de
 80063cc:	00e400e2 	.word	0x00e400e2
 80063d0:	012e012e 	.word	0x012e012e
 80063d4:	012e012e 	.word	0x012e012e
 80063d8:	012e012e 	.word	0x012e012e
 80063dc:	012e012e 	.word	0x012e012e
 80063e0:	00ec00e8 	.word	0x00ec00e8
 80063e4:	012e012e 	.word	0x012e012e
 80063e8:	012e012e 	.word	0x012e012e
 80063ec:	012e012e 	.word	0x012e012e
 80063f0:	012e012e 	.word	0x012e012e
 80063f4:	012e012e 	.word	0x012e012e
 80063f8:	012e012e 	.word	0x012e012e
 80063fc:	00ee012e 	.word	0x00ee012e
 8006400:	00f00108 	.word	0x00f00108
 8006404:	012e00f2 	.word	0x012e00f2
 8006408:	012e012e 	.word	0x012e012e
 800640c:	012e00f4 	.word	0x012e00f4
 8006410:	012e012e 	.word	0x012e012e
 8006414:	012e00f6 	.word	0x012e00f6
 8006418:	00fa012e 	.word	0x00fa012e
 800641c:	012e012e 	.word	0x012e012e
 8006420:	012e00fc 	.word	0x012e00fc
 8006424:	012e012e 	.word	0x012e012e
 8006428:	012e012e 	.word	0x012e012e
 800642c:	012e012e 	.word	0x012e012e
 8006430:	012e012e 	.word	0x012e012e
 8006434:	00fe012e 	.word	0x00fe012e
 8006438:	0100012e 	.word	0x0100012e
 800643c:	01040102 	.word	0x01040102
 8006440:	012e012e 	.word	0x012e012e
 8006444:	012e0126 	.word	0x012e0126
 8006448:	012e012e 	.word	0x012e012e
 800644c:	012e012e 	.word	0x012e012e
 8006450:	012e012e 	.word	0x012e012e
 8006454:	0114012e 	.word	0x0114012e
 8006458:	010a0106 	.word	0x010a0106
 800645c:	010e010c 	.word	0x010e010c
 8006460:	012e0110 	.word	0x012e0110
 8006464:	01160112 	.word	0x01160112
 8006468:	00ea011a 	.word	0x00ea011a
 800646c:	012c00c2 	.word	0x012c00c2
 8006470:	00d000ba 	.word	0x00d000ba
 8006474:	00a000bc 	.word	0x00a000bc
 8006478:	012a00a6 	.word	0x012a00a6
 800647c:	012e00f8 	.word	0x012e00f8
 8006480:	00c40118 	.word	0x00c40118
 8006484:	011c011e 	.word	0x011c011e
 8006488:	012e012e 	.word	0x012e012e
 800648c:	012e012e 	.word	0x012e012e
 8006490:	00d4012e 	.word	0x00d4012e
 8006494:	012e012e 	.word	0x012e012e
 8006498:	00e6012e 	.word	0x00e6012e
 800649c:	01200128 	.word	0x01200128
 80064a0:	01240122 	.word	0x01240122
 80064a4:	4b55      	ldr	r3, [pc, #340]	; (80065fc <_strerror_r+0x288>)
 80064a6:	4618      	mov	r0, r3
 80064a8:	bd10      	pop	{r4, pc}
 80064aa:	4b55      	ldr	r3, [pc, #340]	; (8006600 <_strerror_r+0x28c>)
 80064ac:	e7fb      	b.n	80064a6 <_strerror_r+0x132>
 80064ae:	4b55      	ldr	r3, [pc, #340]	; (8006604 <_strerror_r+0x290>)
 80064b0:	e7f9      	b.n	80064a6 <_strerror_r+0x132>
 80064b2:	4b55      	ldr	r3, [pc, #340]	; (8006608 <_strerror_r+0x294>)
 80064b4:	e7f7      	b.n	80064a6 <_strerror_r+0x132>
 80064b6:	4b55      	ldr	r3, [pc, #340]	; (800660c <_strerror_r+0x298>)
 80064b8:	e7f5      	b.n	80064a6 <_strerror_r+0x132>
 80064ba:	4b55      	ldr	r3, [pc, #340]	; (8006610 <_strerror_r+0x29c>)
 80064bc:	e7f3      	b.n	80064a6 <_strerror_r+0x132>
 80064be:	4b55      	ldr	r3, [pc, #340]	; (8006614 <_strerror_r+0x2a0>)
 80064c0:	e7f1      	b.n	80064a6 <_strerror_r+0x132>
 80064c2:	4b55      	ldr	r3, [pc, #340]	; (8006618 <_strerror_r+0x2a4>)
 80064c4:	e7ef      	b.n	80064a6 <_strerror_r+0x132>
 80064c6:	4b55      	ldr	r3, [pc, #340]	; (800661c <_strerror_r+0x2a8>)
 80064c8:	e7ed      	b.n	80064a6 <_strerror_r+0x132>
 80064ca:	4b55      	ldr	r3, [pc, #340]	; (8006620 <_strerror_r+0x2ac>)
 80064cc:	e7eb      	b.n	80064a6 <_strerror_r+0x132>
 80064ce:	4b55      	ldr	r3, [pc, #340]	; (8006624 <_strerror_r+0x2b0>)
 80064d0:	e7e9      	b.n	80064a6 <_strerror_r+0x132>
 80064d2:	4b55      	ldr	r3, [pc, #340]	; (8006628 <_strerror_r+0x2b4>)
 80064d4:	e7e7      	b.n	80064a6 <_strerror_r+0x132>
 80064d6:	4b55      	ldr	r3, [pc, #340]	; (800662c <_strerror_r+0x2b8>)
 80064d8:	e7e5      	b.n	80064a6 <_strerror_r+0x132>
 80064da:	4b55      	ldr	r3, [pc, #340]	; (8006630 <_strerror_r+0x2bc>)
 80064dc:	e7e3      	b.n	80064a6 <_strerror_r+0x132>
 80064de:	4b55      	ldr	r3, [pc, #340]	; (8006634 <_strerror_r+0x2c0>)
 80064e0:	e7e1      	b.n	80064a6 <_strerror_r+0x132>
 80064e2:	4b55      	ldr	r3, [pc, #340]	; (8006638 <_strerror_r+0x2c4>)
 80064e4:	e7df      	b.n	80064a6 <_strerror_r+0x132>
 80064e6:	4b55      	ldr	r3, [pc, #340]	; (800663c <_strerror_r+0x2c8>)
 80064e8:	e7dd      	b.n	80064a6 <_strerror_r+0x132>
 80064ea:	4b55      	ldr	r3, [pc, #340]	; (8006640 <_strerror_r+0x2cc>)
 80064ec:	e7db      	b.n	80064a6 <_strerror_r+0x132>
 80064ee:	4b55      	ldr	r3, [pc, #340]	; (8006644 <_strerror_r+0x2d0>)
 80064f0:	e7d9      	b.n	80064a6 <_strerror_r+0x132>
 80064f2:	4b55      	ldr	r3, [pc, #340]	; (8006648 <_strerror_r+0x2d4>)
 80064f4:	e7d7      	b.n	80064a6 <_strerror_r+0x132>
 80064f6:	4b55      	ldr	r3, [pc, #340]	; (800664c <_strerror_r+0x2d8>)
 80064f8:	e7d5      	b.n	80064a6 <_strerror_r+0x132>
 80064fa:	4b55      	ldr	r3, [pc, #340]	; (8006650 <_strerror_r+0x2dc>)
 80064fc:	e7d3      	b.n	80064a6 <_strerror_r+0x132>
 80064fe:	4b55      	ldr	r3, [pc, #340]	; (8006654 <_strerror_r+0x2e0>)
 8006500:	e7d1      	b.n	80064a6 <_strerror_r+0x132>
 8006502:	4b55      	ldr	r3, [pc, #340]	; (8006658 <_strerror_r+0x2e4>)
 8006504:	e7cf      	b.n	80064a6 <_strerror_r+0x132>
 8006506:	4b55      	ldr	r3, [pc, #340]	; (800665c <_strerror_r+0x2e8>)
 8006508:	e7cd      	b.n	80064a6 <_strerror_r+0x132>
 800650a:	4b55      	ldr	r3, [pc, #340]	; (8006660 <_strerror_r+0x2ec>)
 800650c:	e7cb      	b.n	80064a6 <_strerror_r+0x132>
 800650e:	4b55      	ldr	r3, [pc, #340]	; (8006664 <_strerror_r+0x2f0>)
 8006510:	e7c9      	b.n	80064a6 <_strerror_r+0x132>
 8006512:	4b55      	ldr	r3, [pc, #340]	; (8006668 <_strerror_r+0x2f4>)
 8006514:	e7c7      	b.n	80064a6 <_strerror_r+0x132>
 8006516:	4b55      	ldr	r3, [pc, #340]	; (800666c <_strerror_r+0x2f8>)
 8006518:	e7c5      	b.n	80064a6 <_strerror_r+0x132>
 800651a:	4b55      	ldr	r3, [pc, #340]	; (8006670 <_strerror_r+0x2fc>)
 800651c:	e7c3      	b.n	80064a6 <_strerror_r+0x132>
 800651e:	4b55      	ldr	r3, [pc, #340]	; (8006674 <_strerror_r+0x300>)
 8006520:	e7c1      	b.n	80064a6 <_strerror_r+0x132>
 8006522:	4b55      	ldr	r3, [pc, #340]	; (8006678 <_strerror_r+0x304>)
 8006524:	e7bf      	b.n	80064a6 <_strerror_r+0x132>
 8006526:	4b55      	ldr	r3, [pc, #340]	; (800667c <_strerror_r+0x308>)
 8006528:	e7bd      	b.n	80064a6 <_strerror_r+0x132>
 800652a:	4b55      	ldr	r3, [pc, #340]	; (8006680 <_strerror_r+0x30c>)
 800652c:	e7bb      	b.n	80064a6 <_strerror_r+0x132>
 800652e:	4b55      	ldr	r3, [pc, #340]	; (8006684 <_strerror_r+0x310>)
 8006530:	e7b9      	b.n	80064a6 <_strerror_r+0x132>
 8006532:	4b55      	ldr	r3, [pc, #340]	; (8006688 <_strerror_r+0x314>)
 8006534:	e7b7      	b.n	80064a6 <_strerror_r+0x132>
 8006536:	4b55      	ldr	r3, [pc, #340]	; (800668c <_strerror_r+0x318>)
 8006538:	e7b5      	b.n	80064a6 <_strerror_r+0x132>
 800653a:	4b55      	ldr	r3, [pc, #340]	; (8006690 <_strerror_r+0x31c>)
 800653c:	e7b3      	b.n	80064a6 <_strerror_r+0x132>
 800653e:	4b55      	ldr	r3, [pc, #340]	; (8006694 <_strerror_r+0x320>)
 8006540:	e7b1      	b.n	80064a6 <_strerror_r+0x132>
 8006542:	4b55      	ldr	r3, [pc, #340]	; (8006698 <_strerror_r+0x324>)
 8006544:	e7af      	b.n	80064a6 <_strerror_r+0x132>
 8006546:	4b55      	ldr	r3, [pc, #340]	; (800669c <_strerror_r+0x328>)
 8006548:	e7ad      	b.n	80064a6 <_strerror_r+0x132>
 800654a:	4b55      	ldr	r3, [pc, #340]	; (80066a0 <_strerror_r+0x32c>)
 800654c:	e7ab      	b.n	80064a6 <_strerror_r+0x132>
 800654e:	4b55      	ldr	r3, [pc, #340]	; (80066a4 <_strerror_r+0x330>)
 8006550:	e7a9      	b.n	80064a6 <_strerror_r+0x132>
 8006552:	4b55      	ldr	r3, [pc, #340]	; (80066a8 <_strerror_r+0x334>)
 8006554:	e7a7      	b.n	80064a6 <_strerror_r+0x132>
 8006556:	4b55      	ldr	r3, [pc, #340]	; (80066ac <_strerror_r+0x338>)
 8006558:	e7a5      	b.n	80064a6 <_strerror_r+0x132>
 800655a:	4b55      	ldr	r3, [pc, #340]	; (80066b0 <_strerror_r+0x33c>)
 800655c:	e7a3      	b.n	80064a6 <_strerror_r+0x132>
 800655e:	4b55      	ldr	r3, [pc, #340]	; (80066b4 <_strerror_r+0x340>)
 8006560:	e7a1      	b.n	80064a6 <_strerror_r+0x132>
 8006562:	4b55      	ldr	r3, [pc, #340]	; (80066b8 <_strerror_r+0x344>)
 8006564:	e79f      	b.n	80064a6 <_strerror_r+0x132>
 8006566:	4b55      	ldr	r3, [pc, #340]	; (80066bc <_strerror_r+0x348>)
 8006568:	e79d      	b.n	80064a6 <_strerror_r+0x132>
 800656a:	4b55      	ldr	r3, [pc, #340]	; (80066c0 <_strerror_r+0x34c>)
 800656c:	e79b      	b.n	80064a6 <_strerror_r+0x132>
 800656e:	4b55      	ldr	r3, [pc, #340]	; (80066c4 <_strerror_r+0x350>)
 8006570:	e799      	b.n	80064a6 <_strerror_r+0x132>
 8006572:	4b55      	ldr	r3, [pc, #340]	; (80066c8 <_strerror_r+0x354>)
 8006574:	e797      	b.n	80064a6 <_strerror_r+0x132>
 8006576:	4b55      	ldr	r3, [pc, #340]	; (80066cc <_strerror_r+0x358>)
 8006578:	e795      	b.n	80064a6 <_strerror_r+0x132>
 800657a:	4b55      	ldr	r3, [pc, #340]	; (80066d0 <_strerror_r+0x35c>)
 800657c:	e793      	b.n	80064a6 <_strerror_r+0x132>
 800657e:	4b55      	ldr	r3, [pc, #340]	; (80066d4 <_strerror_r+0x360>)
 8006580:	e791      	b.n	80064a6 <_strerror_r+0x132>
 8006582:	4b55      	ldr	r3, [pc, #340]	; (80066d8 <_strerror_r+0x364>)
 8006584:	e78f      	b.n	80064a6 <_strerror_r+0x132>
 8006586:	4b55      	ldr	r3, [pc, #340]	; (80066dc <_strerror_r+0x368>)
 8006588:	e78d      	b.n	80064a6 <_strerror_r+0x132>
 800658a:	4b55      	ldr	r3, [pc, #340]	; (80066e0 <_strerror_r+0x36c>)
 800658c:	e78b      	b.n	80064a6 <_strerror_r+0x132>
 800658e:	4b55      	ldr	r3, [pc, #340]	; (80066e4 <_strerror_r+0x370>)
 8006590:	e789      	b.n	80064a6 <_strerror_r+0x132>
 8006592:	4b55      	ldr	r3, [pc, #340]	; (80066e8 <_strerror_r+0x374>)
 8006594:	e787      	b.n	80064a6 <_strerror_r+0x132>
 8006596:	4b55      	ldr	r3, [pc, #340]	; (80066ec <_strerror_r+0x378>)
 8006598:	e785      	b.n	80064a6 <_strerror_r+0x132>
 800659a:	4b55      	ldr	r3, [pc, #340]	; (80066f0 <_strerror_r+0x37c>)
 800659c:	e783      	b.n	80064a6 <_strerror_r+0x132>
 800659e:	4b55      	ldr	r3, [pc, #340]	; (80066f4 <_strerror_r+0x380>)
 80065a0:	e781      	b.n	80064a6 <_strerror_r+0x132>
 80065a2:	4b55      	ldr	r3, [pc, #340]	; (80066f8 <_strerror_r+0x384>)
 80065a4:	e77f      	b.n	80064a6 <_strerror_r+0x132>
 80065a6:	4b55      	ldr	r3, [pc, #340]	; (80066fc <_strerror_r+0x388>)
 80065a8:	e77d      	b.n	80064a6 <_strerror_r+0x132>
 80065aa:	4b55      	ldr	r3, [pc, #340]	; (8006700 <_strerror_r+0x38c>)
 80065ac:	e77b      	b.n	80064a6 <_strerror_r+0x132>
 80065ae:	4b55      	ldr	r3, [pc, #340]	; (8006704 <_strerror_r+0x390>)
 80065b0:	e779      	b.n	80064a6 <_strerror_r+0x132>
 80065b2:	4b55      	ldr	r3, [pc, #340]	; (8006708 <_strerror_r+0x394>)
 80065b4:	e777      	b.n	80064a6 <_strerror_r+0x132>
 80065b6:	4b55      	ldr	r3, [pc, #340]	; (800670c <_strerror_r+0x398>)
 80065b8:	e775      	b.n	80064a6 <_strerror_r+0x132>
 80065ba:	4b55      	ldr	r3, [pc, #340]	; (8006710 <_strerror_r+0x39c>)
 80065bc:	e773      	b.n	80064a6 <_strerror_r+0x132>
 80065be:	4b55      	ldr	r3, [pc, #340]	; (8006714 <_strerror_r+0x3a0>)
 80065c0:	e771      	b.n	80064a6 <_strerror_r+0x132>
 80065c2:	4b55      	ldr	r3, [pc, #340]	; (8006718 <_strerror_r+0x3a4>)
 80065c4:	e76f      	b.n	80064a6 <_strerror_r+0x132>
 80065c6:	4b55      	ldr	r3, [pc, #340]	; (800671c <_strerror_r+0x3a8>)
 80065c8:	e76d      	b.n	80064a6 <_strerror_r+0x132>
 80065ca:	4b55      	ldr	r3, [pc, #340]	; (8006720 <_strerror_r+0x3ac>)
 80065cc:	e76b      	b.n	80064a6 <_strerror_r+0x132>
 80065ce:	4b55      	ldr	r3, [pc, #340]	; (8006724 <_strerror_r+0x3b0>)
 80065d0:	e769      	b.n	80064a6 <_strerror_r+0x132>
 80065d2:	4b55      	ldr	r3, [pc, #340]	; (8006728 <_strerror_r+0x3b4>)
 80065d4:	e767      	b.n	80064a6 <_strerror_r+0x132>
 80065d6:	4b55      	ldr	r3, [pc, #340]	; (800672c <_strerror_r+0x3b8>)
 80065d8:	e765      	b.n	80064a6 <_strerror_r+0x132>
 80065da:	4b55      	ldr	r3, [pc, #340]	; (8006730 <_strerror_r+0x3bc>)
 80065dc:	e763      	b.n	80064a6 <_strerror_r+0x132>
 80065de:	4b55      	ldr	r3, [pc, #340]	; (8006734 <_strerror_r+0x3c0>)
 80065e0:	e761      	b.n	80064a6 <_strerror_r+0x132>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bf14      	ite	ne
 80065e6:	461a      	movne	r2, r3
 80065e8:	4622      	moveq	r2, r4
 80065ea:	f000 f8a9 	bl	8006740 <_user_strerror>
 80065ee:	4b52      	ldr	r3, [pc, #328]	; (8006738 <_strerror_r+0x3c4>)
 80065f0:	2800      	cmp	r0, #0
 80065f2:	bf18      	it	ne
 80065f4:	4603      	movne	r3, r0
 80065f6:	e756      	b.n	80064a6 <_strerror_r+0x132>
 80065f8:	4b50      	ldr	r3, [pc, #320]	; (800673c <_strerror_r+0x3c8>)
 80065fa:	e754      	b.n	80064a6 <_strerror_r+0x132>
 80065fc:	080073c1 	.word	0x080073c1
 8006600:	080073cb 	.word	0x080073cb
 8006604:	080073e5 	.word	0x080073e5
 8006608:	080073f5 	.word	0x080073f5
 800660c:	0800740d 	.word	0x0800740d
 8006610:	08007417 	.word	0x08007417
 8006614:	08007431 	.word	0x08007431
 8006618:	08007443 	.word	0x08007443
 800661c:	08007455 	.word	0x08007455
 8006620:	0800746e 	.word	0x0800746e
 8006624:	0800747e 	.word	0x0800747e
 8006628:	0800748a 	.word	0x0800748a
 800662c:	080074a7 	.word	0x080074a7
 8006630:	080074b9 	.word	0x080074b9
 8006634:	080074ca 	.word	0x080074ca
 8006638:	080074dc 	.word	0x080074dc
 800663c:	080074e8 	.word	0x080074e8
 8006640:	08007500 	.word	0x08007500
 8006644:	0800750c 	.word	0x0800750c
 8006648:	0800751e 	.word	0x0800751e
 800664c:	0800752d 	.word	0x0800752d
 8006650:	0800753d 	.word	0x0800753d
 8006654:	0800754a 	.word	0x0800754a
 8006658:	08007569 	.word	0x08007569
 800665c:	08007578 	.word	0x08007578
 8006660:	08007589 	.word	0x08007589
 8006664:	080075ad 	.word	0x080075ad
 8006668:	080075cb 	.word	0x080075cb
 800666c:	080075e9 	.word	0x080075e9
 8006670:	08007609 	.word	0x08007609
 8006674:	08007620 	.word	0x08007620
 8006678:	0800762f 	.word	0x0800762f
 800667c:	0800763e 	.word	0x0800763e
 8006680:	08007652 	.word	0x08007652
 8006684:	0800766a 	.word	0x0800766a
 8006688:	08007678 	.word	0x08007678
 800668c:	08007685 	.word	0x08007685
 8006690:	0800769b 	.word	0x0800769b
 8006694:	080076aa 	.word	0x080076aa
 8006698:	080076b6 	.word	0x080076b6
 800669c:	080076e5 	.word	0x080076e5
 80066a0:	080076f6 	.word	0x080076f6
 80066a4:	08007711 	.word	0x08007711
 80066a8:	08007724 	.word	0x08007724
 80066ac:	0800773a 	.word	0x0800773a
 80066b0:	08007743 	.word	0x08007743
 80066b4:	0800775a 	.word	0x0800775a
 80066b8:	08007762 	.word	0x08007762
 80066bc:	0800776f 	.word	0x0800776f
 80066c0:	08007784 	.word	0x08007784
 80066c4:	08007798 	.word	0x08007798
 80066c8:	080077b0 	.word	0x080077b0
 80066cc:	080077bf 	.word	0x080077bf
 80066d0:	080077d0 	.word	0x080077d0
 80066d4:	080077e3 	.word	0x080077e3
 80066d8:	080077ef 	.word	0x080077ef
 80066dc:	08007808 	.word	0x08007808
 80066e0:	0800781c 	.word	0x0800781c
 80066e4:	08007837 	.word	0x08007837
 80066e8:	0800784f 	.word	0x0800784f
 80066ec:	08007869 	.word	0x08007869
 80066f0:	08007871 	.word	0x08007871
 80066f4:	080078a1 	.word	0x080078a1
 80066f8:	080078c0 	.word	0x080078c0
 80066fc:	080078df 	.word	0x080078df
 8006700:	080078f6 	.word	0x080078f6
 8006704:	08007909 	.word	0x08007909
 8006708:	08007922 	.word	0x08007922
 800670c:	08007939 	.word	0x08007939
 8006710:	0800794f 	.word	0x0800794f
 8006714:	08007970 	.word	0x08007970
 8006718:	08007988 	.word	0x08007988
 800671c:	080079a4 	.word	0x080079a4
 8006720:	080079b7 	.word	0x080079b7
 8006724:	080079cd 	.word	0x080079cd
 8006728:	080079e1 	.word	0x080079e1
 800672c:	08007a03 	.word	0x08007a03
 8006730:	08007a29 	.word	0x08007a29
 8006734:	08007a3a 	.word	0x08007a3a
 8006738:	080073c0 	.word	0x080073c0
 800673c:	08007a4f 	.word	0x08007a4f

08006740 <_user_strerror>:
 8006740:	2000      	movs	r0, #0
 8006742:	4770      	bx	lr

08006744 <_vsiprintf_r>:
 8006744:	b500      	push	{lr}
 8006746:	b09b      	sub	sp, #108	; 0x6c
 8006748:	9100      	str	r1, [sp, #0]
 800674a:	9104      	str	r1, [sp, #16]
 800674c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006750:	9105      	str	r1, [sp, #20]
 8006752:	9102      	str	r1, [sp, #8]
 8006754:	4905      	ldr	r1, [pc, #20]	; (800676c <_vsiprintf_r+0x28>)
 8006756:	9103      	str	r1, [sp, #12]
 8006758:	4669      	mov	r1, sp
 800675a:	f000 fa85 	bl	8006c68 <_svfiprintf_r>
 800675e:	9b00      	ldr	r3, [sp, #0]
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	b01b      	add	sp, #108	; 0x6c
 8006766:	f85d fb04 	ldr.w	pc, [sp], #4
 800676a:	bf00      	nop
 800676c:	ffff0208 	.word	0xffff0208

08006770 <vsiprintf>:
 8006770:	4613      	mov	r3, r2
 8006772:	460a      	mov	r2, r1
 8006774:	4601      	mov	r1, r0
 8006776:	4802      	ldr	r0, [pc, #8]	; (8006780 <vsiprintf+0x10>)
 8006778:	6800      	ldr	r0, [r0, #0]
 800677a:	f7ff bfe3 	b.w	8006744 <_vsiprintf_r>
 800677e:	bf00      	nop
 8006780:	2000000c 	.word	0x2000000c

08006784 <_write_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4d07      	ldr	r5, [pc, #28]	; (80067a4 <_write_r+0x20>)
 8006788:	4604      	mov	r4, r0
 800678a:	4608      	mov	r0, r1
 800678c:	4611      	mov	r1, r2
 800678e:	2200      	movs	r2, #0
 8006790:	602a      	str	r2, [r5, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	f7fa ff75 	bl	8001682 <_write>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d102      	bne.n	80067a2 <_write_r+0x1e>
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	b103      	cbz	r3, 80067a2 <_write_r+0x1e>
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	200002e8 	.word	0x200002e8

080067a8 <__sflush_r>:
 80067a8:	898a      	ldrh	r2, [r1, #12]
 80067aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ae:	4605      	mov	r5, r0
 80067b0:	0710      	lsls	r0, r2, #28
 80067b2:	460c      	mov	r4, r1
 80067b4:	d458      	bmi.n	8006868 <__sflush_r+0xc0>
 80067b6:	684b      	ldr	r3, [r1, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	dc05      	bgt.n	80067c8 <__sflush_r+0x20>
 80067bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	dc02      	bgt.n	80067c8 <__sflush_r+0x20>
 80067c2:	2000      	movs	r0, #0
 80067c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067ca:	2e00      	cmp	r6, #0
 80067cc:	d0f9      	beq.n	80067c2 <__sflush_r+0x1a>
 80067ce:	2300      	movs	r3, #0
 80067d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067d4:	682f      	ldr	r7, [r5, #0]
 80067d6:	602b      	str	r3, [r5, #0]
 80067d8:	d032      	beq.n	8006840 <__sflush_r+0x98>
 80067da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	075a      	lsls	r2, r3, #29
 80067e0:	d505      	bpl.n	80067ee <__sflush_r+0x46>
 80067e2:	6863      	ldr	r3, [r4, #4]
 80067e4:	1ac0      	subs	r0, r0, r3
 80067e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067e8:	b10b      	cbz	r3, 80067ee <__sflush_r+0x46>
 80067ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067ec:	1ac0      	subs	r0, r0, r3
 80067ee:	2300      	movs	r3, #0
 80067f0:	4602      	mov	r2, r0
 80067f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067f4:	6a21      	ldr	r1, [r4, #32]
 80067f6:	4628      	mov	r0, r5
 80067f8:	47b0      	blx	r6
 80067fa:	1c43      	adds	r3, r0, #1
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	d106      	bne.n	800680e <__sflush_r+0x66>
 8006800:	6829      	ldr	r1, [r5, #0]
 8006802:	291d      	cmp	r1, #29
 8006804:	d82c      	bhi.n	8006860 <__sflush_r+0xb8>
 8006806:	4a2a      	ldr	r2, [pc, #168]	; (80068b0 <__sflush_r+0x108>)
 8006808:	40ca      	lsrs	r2, r1
 800680a:	07d6      	lsls	r6, r2, #31
 800680c:	d528      	bpl.n	8006860 <__sflush_r+0xb8>
 800680e:	2200      	movs	r2, #0
 8006810:	6062      	str	r2, [r4, #4]
 8006812:	04d9      	lsls	r1, r3, #19
 8006814:	6922      	ldr	r2, [r4, #16]
 8006816:	6022      	str	r2, [r4, #0]
 8006818:	d504      	bpl.n	8006824 <__sflush_r+0x7c>
 800681a:	1c42      	adds	r2, r0, #1
 800681c:	d101      	bne.n	8006822 <__sflush_r+0x7a>
 800681e:	682b      	ldr	r3, [r5, #0]
 8006820:	b903      	cbnz	r3, 8006824 <__sflush_r+0x7c>
 8006822:	6560      	str	r0, [r4, #84]	; 0x54
 8006824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006826:	602f      	str	r7, [r5, #0]
 8006828:	2900      	cmp	r1, #0
 800682a:	d0ca      	beq.n	80067c2 <__sflush_r+0x1a>
 800682c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006830:	4299      	cmp	r1, r3
 8006832:	d002      	beq.n	800683a <__sflush_r+0x92>
 8006834:	4628      	mov	r0, r5
 8006836:	f7ff fc0b 	bl	8006050 <_free_r>
 800683a:	2000      	movs	r0, #0
 800683c:	6360      	str	r0, [r4, #52]	; 0x34
 800683e:	e7c1      	b.n	80067c4 <__sflush_r+0x1c>
 8006840:	6a21      	ldr	r1, [r4, #32]
 8006842:	2301      	movs	r3, #1
 8006844:	4628      	mov	r0, r5
 8006846:	47b0      	blx	r6
 8006848:	1c41      	adds	r1, r0, #1
 800684a:	d1c7      	bne.n	80067dc <__sflush_r+0x34>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0c4      	beq.n	80067dc <__sflush_r+0x34>
 8006852:	2b1d      	cmp	r3, #29
 8006854:	d001      	beq.n	800685a <__sflush_r+0xb2>
 8006856:	2b16      	cmp	r3, #22
 8006858:	d101      	bne.n	800685e <__sflush_r+0xb6>
 800685a:	602f      	str	r7, [r5, #0]
 800685c:	e7b1      	b.n	80067c2 <__sflush_r+0x1a>
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006864:	81a3      	strh	r3, [r4, #12]
 8006866:	e7ad      	b.n	80067c4 <__sflush_r+0x1c>
 8006868:	690f      	ldr	r7, [r1, #16]
 800686a:	2f00      	cmp	r7, #0
 800686c:	d0a9      	beq.n	80067c2 <__sflush_r+0x1a>
 800686e:	0793      	lsls	r3, r2, #30
 8006870:	680e      	ldr	r6, [r1, #0]
 8006872:	bf08      	it	eq
 8006874:	694b      	ldreq	r3, [r1, #20]
 8006876:	600f      	str	r7, [r1, #0]
 8006878:	bf18      	it	ne
 800687a:	2300      	movne	r3, #0
 800687c:	eba6 0807 	sub.w	r8, r6, r7
 8006880:	608b      	str	r3, [r1, #8]
 8006882:	f1b8 0f00 	cmp.w	r8, #0
 8006886:	dd9c      	ble.n	80067c2 <__sflush_r+0x1a>
 8006888:	6a21      	ldr	r1, [r4, #32]
 800688a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800688c:	4643      	mov	r3, r8
 800688e:	463a      	mov	r2, r7
 8006890:	4628      	mov	r0, r5
 8006892:	47b0      	blx	r6
 8006894:	2800      	cmp	r0, #0
 8006896:	dc06      	bgt.n	80068a6 <__sflush_r+0xfe>
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800689e:	81a3      	strh	r3, [r4, #12]
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	e78e      	b.n	80067c4 <__sflush_r+0x1c>
 80068a6:	4407      	add	r7, r0
 80068a8:	eba8 0800 	sub.w	r8, r8, r0
 80068ac:	e7e9      	b.n	8006882 <__sflush_r+0xda>
 80068ae:	bf00      	nop
 80068b0:	20400001 	.word	0x20400001

080068b4 <_fflush_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	690b      	ldr	r3, [r1, #16]
 80068b8:	4605      	mov	r5, r0
 80068ba:	460c      	mov	r4, r1
 80068bc:	b913      	cbnz	r3, 80068c4 <_fflush_r+0x10>
 80068be:	2500      	movs	r5, #0
 80068c0:	4628      	mov	r0, r5
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
 80068c4:	b118      	cbz	r0, 80068ce <_fflush_r+0x1a>
 80068c6:	6983      	ldr	r3, [r0, #24]
 80068c8:	b90b      	cbnz	r3, 80068ce <_fflush_r+0x1a>
 80068ca:	f000 f8c5 	bl	8006a58 <__sinit>
 80068ce:	4b14      	ldr	r3, [pc, #80]	; (8006920 <_fflush_r+0x6c>)
 80068d0:	429c      	cmp	r4, r3
 80068d2:	d11b      	bne.n	800690c <_fflush_r+0x58>
 80068d4:	686c      	ldr	r4, [r5, #4]
 80068d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0ef      	beq.n	80068be <_fflush_r+0xa>
 80068de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068e0:	07d0      	lsls	r0, r2, #31
 80068e2:	d404      	bmi.n	80068ee <_fflush_r+0x3a>
 80068e4:	0599      	lsls	r1, r3, #22
 80068e6:	d402      	bmi.n	80068ee <_fflush_r+0x3a>
 80068e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ea:	f000 f953 	bl	8006b94 <__retarget_lock_acquire_recursive>
 80068ee:	4628      	mov	r0, r5
 80068f0:	4621      	mov	r1, r4
 80068f2:	f7ff ff59 	bl	80067a8 <__sflush_r>
 80068f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068f8:	07da      	lsls	r2, r3, #31
 80068fa:	4605      	mov	r5, r0
 80068fc:	d4e0      	bmi.n	80068c0 <_fflush_r+0xc>
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	059b      	lsls	r3, r3, #22
 8006902:	d4dd      	bmi.n	80068c0 <_fflush_r+0xc>
 8006904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006906:	f000 f946 	bl	8006b96 <__retarget_lock_release_recursive>
 800690a:	e7d9      	b.n	80068c0 <_fflush_r+0xc>
 800690c:	4b05      	ldr	r3, [pc, #20]	; (8006924 <_fflush_r+0x70>)
 800690e:	429c      	cmp	r4, r3
 8006910:	d101      	bne.n	8006916 <_fflush_r+0x62>
 8006912:	68ac      	ldr	r4, [r5, #8]
 8006914:	e7df      	b.n	80068d6 <_fflush_r+0x22>
 8006916:	4b04      	ldr	r3, [pc, #16]	; (8006928 <_fflush_r+0x74>)
 8006918:	429c      	cmp	r4, r3
 800691a:	bf08      	it	eq
 800691c:	68ec      	ldreq	r4, [r5, #12]
 800691e:	e7da      	b.n	80068d6 <_fflush_r+0x22>
 8006920:	08007a78 	.word	0x08007a78
 8006924:	08007a98 	.word	0x08007a98
 8006928:	08007a58 	.word	0x08007a58

0800692c <fileno>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	4e1a      	ldr	r6, [pc, #104]	; (8006998 <fileno+0x6c>)
 8006930:	6835      	ldr	r5, [r6, #0]
 8006932:	4604      	mov	r4, r0
 8006934:	b125      	cbz	r5, 8006940 <fileno+0x14>
 8006936:	69ab      	ldr	r3, [r5, #24]
 8006938:	b913      	cbnz	r3, 8006940 <fileno+0x14>
 800693a:	4628      	mov	r0, r5
 800693c:	f000 f88c 	bl	8006a58 <__sinit>
 8006940:	4b16      	ldr	r3, [pc, #88]	; (800699c <fileno+0x70>)
 8006942:	429c      	cmp	r4, r3
 8006944:	d118      	bne.n	8006978 <fileno+0x4c>
 8006946:	686c      	ldr	r4, [r5, #4]
 8006948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800694a:	07d8      	lsls	r0, r3, #31
 800694c:	d405      	bmi.n	800695a <fileno+0x2e>
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	0599      	lsls	r1, r3, #22
 8006952:	d402      	bmi.n	800695a <fileno+0x2e>
 8006954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006956:	f000 f91d 	bl	8006b94 <__retarget_lock_acquire_recursive>
 800695a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800695e:	b1ab      	cbz	r3, 800698c <fileno+0x60>
 8006960:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8006964:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006966:	07d2      	lsls	r2, r2, #31
 8006968:	d404      	bmi.n	8006974 <fileno+0x48>
 800696a:	059b      	lsls	r3, r3, #22
 800696c:	d402      	bmi.n	8006974 <fileno+0x48>
 800696e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006970:	f000 f911 	bl	8006b96 <__retarget_lock_release_recursive>
 8006974:	4628      	mov	r0, r5
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <fileno+0x74>)
 800697a:	429c      	cmp	r4, r3
 800697c:	d101      	bne.n	8006982 <fileno+0x56>
 800697e:	68ac      	ldr	r4, [r5, #8]
 8006980:	e7e2      	b.n	8006948 <fileno+0x1c>
 8006982:	4b08      	ldr	r3, [pc, #32]	; (80069a4 <fileno+0x78>)
 8006984:	429c      	cmp	r4, r3
 8006986:	bf08      	it	eq
 8006988:	68ec      	ldreq	r4, [r5, #12]
 800698a:	e7dd      	b.n	8006948 <fileno+0x1c>
 800698c:	6832      	ldr	r2, [r6, #0]
 800698e:	2109      	movs	r1, #9
 8006990:	6011      	str	r1, [r2, #0]
 8006992:	f04f 35ff 	mov.w	r5, #4294967295
 8006996:	e7e5      	b.n	8006964 <fileno+0x38>
 8006998:	2000000c 	.word	0x2000000c
 800699c:	08007a78 	.word	0x08007a78
 80069a0:	08007a98 	.word	0x08007a98
 80069a4:	08007a58 	.word	0x08007a58

080069a8 <std>:
 80069a8:	2300      	movs	r3, #0
 80069aa:	b510      	push	{r4, lr}
 80069ac:	4604      	mov	r4, r0
 80069ae:	e9c0 3300 	strd	r3, r3, [r0]
 80069b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069b6:	6083      	str	r3, [r0, #8]
 80069b8:	8181      	strh	r1, [r0, #12]
 80069ba:	6643      	str	r3, [r0, #100]	; 0x64
 80069bc:	81c2      	strh	r2, [r0, #14]
 80069be:	6183      	str	r3, [r0, #24]
 80069c0:	4619      	mov	r1, r3
 80069c2:	2208      	movs	r2, #8
 80069c4:	305c      	adds	r0, #92	; 0x5c
 80069c6:	f7ff fb3b 	bl	8006040 <memset>
 80069ca:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <std+0x38>)
 80069cc:	6263      	str	r3, [r4, #36]	; 0x24
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <std+0x3c>)
 80069d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80069d2:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <std+0x40>)
 80069d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069d6:	4b05      	ldr	r3, [pc, #20]	; (80069ec <std+0x44>)
 80069d8:	6224      	str	r4, [r4, #32]
 80069da:	6323      	str	r3, [r4, #48]	; 0x30
 80069dc:	bd10      	pop	{r4, pc}
 80069de:	bf00      	nop
 80069e0:	08007191 	.word	0x08007191
 80069e4:	080071b3 	.word	0x080071b3
 80069e8:	080071eb 	.word	0x080071eb
 80069ec:	0800720f 	.word	0x0800720f

080069f0 <_cleanup_r>:
 80069f0:	4901      	ldr	r1, [pc, #4]	; (80069f8 <_cleanup_r+0x8>)
 80069f2:	f000 b8af 	b.w	8006b54 <_fwalk_reent>
 80069f6:	bf00      	nop
 80069f8:	080068b5 	.word	0x080068b5

080069fc <__sfmoreglue>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	2268      	movs	r2, #104	; 0x68
 8006a00:	1e4d      	subs	r5, r1, #1
 8006a02:	4355      	muls	r5, r2
 8006a04:	460e      	mov	r6, r1
 8006a06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a0a:	f7ff fb8d 	bl	8006128 <_malloc_r>
 8006a0e:	4604      	mov	r4, r0
 8006a10:	b140      	cbz	r0, 8006a24 <__sfmoreglue+0x28>
 8006a12:	2100      	movs	r1, #0
 8006a14:	e9c0 1600 	strd	r1, r6, [r0]
 8006a18:	300c      	adds	r0, #12
 8006a1a:	60a0      	str	r0, [r4, #8]
 8006a1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a20:	f7ff fb0e 	bl	8006040 <memset>
 8006a24:	4620      	mov	r0, r4
 8006a26:	bd70      	pop	{r4, r5, r6, pc}

08006a28 <__sfp_lock_acquire>:
 8006a28:	4801      	ldr	r0, [pc, #4]	; (8006a30 <__sfp_lock_acquire+0x8>)
 8006a2a:	f000 b8b3 	b.w	8006b94 <__retarget_lock_acquire_recursive>
 8006a2e:	bf00      	nop
 8006a30:	200002e5 	.word	0x200002e5

08006a34 <__sfp_lock_release>:
 8006a34:	4801      	ldr	r0, [pc, #4]	; (8006a3c <__sfp_lock_release+0x8>)
 8006a36:	f000 b8ae 	b.w	8006b96 <__retarget_lock_release_recursive>
 8006a3a:	bf00      	nop
 8006a3c:	200002e5 	.word	0x200002e5

08006a40 <__sinit_lock_acquire>:
 8006a40:	4801      	ldr	r0, [pc, #4]	; (8006a48 <__sinit_lock_acquire+0x8>)
 8006a42:	f000 b8a7 	b.w	8006b94 <__retarget_lock_acquire_recursive>
 8006a46:	bf00      	nop
 8006a48:	200002e6 	.word	0x200002e6

08006a4c <__sinit_lock_release>:
 8006a4c:	4801      	ldr	r0, [pc, #4]	; (8006a54 <__sinit_lock_release+0x8>)
 8006a4e:	f000 b8a2 	b.w	8006b96 <__retarget_lock_release_recursive>
 8006a52:	bf00      	nop
 8006a54:	200002e6 	.word	0x200002e6

08006a58 <__sinit>:
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	f7ff fff0 	bl	8006a40 <__sinit_lock_acquire>
 8006a60:	69a3      	ldr	r3, [r4, #24]
 8006a62:	b11b      	cbz	r3, 8006a6c <__sinit+0x14>
 8006a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a68:	f7ff bff0 	b.w	8006a4c <__sinit_lock_release>
 8006a6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a70:	6523      	str	r3, [r4, #80]	; 0x50
 8006a72:	4b13      	ldr	r3, [pc, #76]	; (8006ac0 <__sinit+0x68>)
 8006a74:	4a13      	ldr	r2, [pc, #76]	; (8006ac4 <__sinit+0x6c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a7a:	42a3      	cmp	r3, r4
 8006a7c:	bf04      	itt	eq
 8006a7e:	2301      	moveq	r3, #1
 8006a80:	61a3      	streq	r3, [r4, #24]
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 f820 	bl	8006ac8 <__sfp>
 8006a88:	6060      	str	r0, [r4, #4]
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f000 f81c 	bl	8006ac8 <__sfp>
 8006a90:	60a0      	str	r0, [r4, #8]
 8006a92:	4620      	mov	r0, r4
 8006a94:	f000 f818 	bl	8006ac8 <__sfp>
 8006a98:	2200      	movs	r2, #0
 8006a9a:	60e0      	str	r0, [r4, #12]
 8006a9c:	2104      	movs	r1, #4
 8006a9e:	6860      	ldr	r0, [r4, #4]
 8006aa0:	f7ff ff82 	bl	80069a8 <std>
 8006aa4:	68a0      	ldr	r0, [r4, #8]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	2109      	movs	r1, #9
 8006aaa:	f7ff ff7d 	bl	80069a8 <std>
 8006aae:	68e0      	ldr	r0, [r4, #12]
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	2112      	movs	r1, #18
 8006ab4:	f7ff ff78 	bl	80069a8 <std>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	61a3      	str	r3, [r4, #24]
 8006abc:	e7d2      	b.n	8006a64 <__sinit+0xc>
 8006abe:	bf00      	nop
 8006ac0:	080073b8 	.word	0x080073b8
 8006ac4:	080069f1 	.word	0x080069f1

08006ac8 <__sfp>:
 8006ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aca:	4607      	mov	r7, r0
 8006acc:	f7ff ffac 	bl	8006a28 <__sfp_lock_acquire>
 8006ad0:	4b1e      	ldr	r3, [pc, #120]	; (8006b4c <__sfp+0x84>)
 8006ad2:	681e      	ldr	r6, [r3, #0]
 8006ad4:	69b3      	ldr	r3, [r6, #24]
 8006ad6:	b913      	cbnz	r3, 8006ade <__sfp+0x16>
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f7ff ffbd 	bl	8006a58 <__sinit>
 8006ade:	3648      	adds	r6, #72	; 0x48
 8006ae0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	d503      	bpl.n	8006af0 <__sfp+0x28>
 8006ae8:	6833      	ldr	r3, [r6, #0]
 8006aea:	b30b      	cbz	r3, 8006b30 <__sfp+0x68>
 8006aec:	6836      	ldr	r6, [r6, #0]
 8006aee:	e7f7      	b.n	8006ae0 <__sfp+0x18>
 8006af0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006af4:	b9d5      	cbnz	r5, 8006b2c <__sfp+0x64>
 8006af6:	4b16      	ldr	r3, [pc, #88]	; (8006b50 <__sfp+0x88>)
 8006af8:	60e3      	str	r3, [r4, #12]
 8006afa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006afe:	6665      	str	r5, [r4, #100]	; 0x64
 8006b00:	f000 f847 	bl	8006b92 <__retarget_lock_init_recursive>
 8006b04:	f7ff ff96 	bl	8006a34 <__sfp_lock_release>
 8006b08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b10:	6025      	str	r5, [r4, #0]
 8006b12:	61a5      	str	r5, [r4, #24]
 8006b14:	2208      	movs	r2, #8
 8006b16:	4629      	mov	r1, r5
 8006b18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b1c:	f7ff fa90 	bl	8006040 <memset>
 8006b20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b28:	4620      	mov	r0, r4
 8006b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b2c:	3468      	adds	r4, #104	; 0x68
 8006b2e:	e7d9      	b.n	8006ae4 <__sfp+0x1c>
 8006b30:	2104      	movs	r1, #4
 8006b32:	4638      	mov	r0, r7
 8006b34:	f7ff ff62 	bl	80069fc <__sfmoreglue>
 8006b38:	4604      	mov	r4, r0
 8006b3a:	6030      	str	r0, [r6, #0]
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d1d5      	bne.n	8006aec <__sfp+0x24>
 8006b40:	f7ff ff78 	bl	8006a34 <__sfp_lock_release>
 8006b44:	230c      	movs	r3, #12
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	e7ee      	b.n	8006b28 <__sfp+0x60>
 8006b4a:	bf00      	nop
 8006b4c:	080073b8 	.word	0x080073b8
 8006b50:	ffff0001 	.word	0xffff0001

08006b54 <_fwalk_reent>:
 8006b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b58:	4606      	mov	r6, r0
 8006b5a:	4688      	mov	r8, r1
 8006b5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b60:	2700      	movs	r7, #0
 8006b62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b66:	f1b9 0901 	subs.w	r9, r9, #1
 8006b6a:	d505      	bpl.n	8006b78 <_fwalk_reent+0x24>
 8006b6c:	6824      	ldr	r4, [r4, #0]
 8006b6e:	2c00      	cmp	r4, #0
 8006b70:	d1f7      	bne.n	8006b62 <_fwalk_reent+0xe>
 8006b72:	4638      	mov	r0, r7
 8006b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b78:	89ab      	ldrh	r3, [r5, #12]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d907      	bls.n	8006b8e <_fwalk_reent+0x3a>
 8006b7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b82:	3301      	adds	r3, #1
 8006b84:	d003      	beq.n	8006b8e <_fwalk_reent+0x3a>
 8006b86:	4629      	mov	r1, r5
 8006b88:	4630      	mov	r0, r6
 8006b8a:	47c0      	blx	r8
 8006b8c:	4307      	orrs	r7, r0
 8006b8e:	3568      	adds	r5, #104	; 0x68
 8006b90:	e7e9      	b.n	8006b66 <_fwalk_reent+0x12>

08006b92 <__retarget_lock_init_recursive>:
 8006b92:	4770      	bx	lr

08006b94 <__retarget_lock_acquire_recursive>:
 8006b94:	4770      	bx	lr

08006b96 <__retarget_lock_release_recursive>:
 8006b96:	4770      	bx	lr

08006b98 <__malloc_lock>:
 8006b98:	4801      	ldr	r0, [pc, #4]	; (8006ba0 <__malloc_lock+0x8>)
 8006b9a:	f7ff bffb 	b.w	8006b94 <__retarget_lock_acquire_recursive>
 8006b9e:	bf00      	nop
 8006ba0:	200002e4 	.word	0x200002e4

08006ba4 <__malloc_unlock>:
 8006ba4:	4801      	ldr	r0, [pc, #4]	; (8006bac <__malloc_unlock+0x8>)
 8006ba6:	f7ff bff6 	b.w	8006b96 <__retarget_lock_release_recursive>
 8006baa:	bf00      	nop
 8006bac:	200002e4 	.word	0x200002e4

08006bb0 <__ssputs_r>:
 8006bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb4:	688e      	ldr	r6, [r1, #8]
 8006bb6:	429e      	cmp	r6, r3
 8006bb8:	4682      	mov	sl, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	4690      	mov	r8, r2
 8006bbe:	461f      	mov	r7, r3
 8006bc0:	d838      	bhi.n	8006c34 <__ssputs_r+0x84>
 8006bc2:	898a      	ldrh	r2, [r1, #12]
 8006bc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bc8:	d032      	beq.n	8006c30 <__ssputs_r+0x80>
 8006bca:	6825      	ldr	r5, [r4, #0]
 8006bcc:	6909      	ldr	r1, [r1, #16]
 8006bce:	eba5 0901 	sub.w	r9, r5, r1
 8006bd2:	6965      	ldr	r5, [r4, #20]
 8006bd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bdc:	3301      	adds	r3, #1
 8006bde:	444b      	add	r3, r9
 8006be0:	106d      	asrs	r5, r5, #1
 8006be2:	429d      	cmp	r5, r3
 8006be4:	bf38      	it	cc
 8006be6:	461d      	movcc	r5, r3
 8006be8:	0553      	lsls	r3, r2, #21
 8006bea:	d531      	bpl.n	8006c50 <__ssputs_r+0xa0>
 8006bec:	4629      	mov	r1, r5
 8006bee:	f7ff fa9b 	bl	8006128 <_malloc_r>
 8006bf2:	4606      	mov	r6, r0
 8006bf4:	b950      	cbnz	r0, 8006c0c <__ssputs_r+0x5c>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	f8ca 3000 	str.w	r3, [sl]
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c02:	81a3      	strh	r3, [r4, #12]
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295
 8006c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0c:	6921      	ldr	r1, [r4, #16]
 8006c0e:	464a      	mov	r2, r9
 8006c10:	f000 fb24 	bl	800725c <memcpy>
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1e:	81a3      	strh	r3, [r4, #12]
 8006c20:	6126      	str	r6, [r4, #16]
 8006c22:	6165      	str	r5, [r4, #20]
 8006c24:	444e      	add	r6, r9
 8006c26:	eba5 0509 	sub.w	r5, r5, r9
 8006c2a:	6026      	str	r6, [r4, #0]
 8006c2c:	60a5      	str	r5, [r4, #8]
 8006c2e:	463e      	mov	r6, r7
 8006c30:	42be      	cmp	r6, r7
 8006c32:	d900      	bls.n	8006c36 <__ssputs_r+0x86>
 8006c34:	463e      	mov	r6, r7
 8006c36:	6820      	ldr	r0, [r4, #0]
 8006c38:	4632      	mov	r2, r6
 8006c3a:	4641      	mov	r1, r8
 8006c3c:	f000 fb1c 	bl	8007278 <memmove>
 8006c40:	68a3      	ldr	r3, [r4, #8]
 8006c42:	1b9b      	subs	r3, r3, r6
 8006c44:	60a3      	str	r3, [r4, #8]
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	4433      	add	r3, r6
 8006c4a:	6023      	str	r3, [r4, #0]
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	e7db      	b.n	8006c08 <__ssputs_r+0x58>
 8006c50:	462a      	mov	r2, r5
 8006c52:	f000 fb2b 	bl	80072ac <_realloc_r>
 8006c56:	4606      	mov	r6, r0
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d1e1      	bne.n	8006c20 <__ssputs_r+0x70>
 8006c5c:	6921      	ldr	r1, [r4, #16]
 8006c5e:	4650      	mov	r0, sl
 8006c60:	f7ff f9f6 	bl	8006050 <_free_r>
 8006c64:	e7c7      	b.n	8006bf6 <__ssputs_r+0x46>
	...

08006c68 <_svfiprintf_r>:
 8006c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	4698      	mov	r8, r3
 8006c6e:	898b      	ldrh	r3, [r1, #12]
 8006c70:	061b      	lsls	r3, r3, #24
 8006c72:	b09d      	sub	sp, #116	; 0x74
 8006c74:	4607      	mov	r7, r0
 8006c76:	460d      	mov	r5, r1
 8006c78:	4614      	mov	r4, r2
 8006c7a:	d50e      	bpl.n	8006c9a <_svfiprintf_r+0x32>
 8006c7c:	690b      	ldr	r3, [r1, #16]
 8006c7e:	b963      	cbnz	r3, 8006c9a <_svfiprintf_r+0x32>
 8006c80:	2140      	movs	r1, #64	; 0x40
 8006c82:	f7ff fa51 	bl	8006128 <_malloc_r>
 8006c86:	6028      	str	r0, [r5, #0]
 8006c88:	6128      	str	r0, [r5, #16]
 8006c8a:	b920      	cbnz	r0, 8006c96 <_svfiprintf_r+0x2e>
 8006c8c:	230c      	movs	r3, #12
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295
 8006c94:	e0d1      	b.n	8006e3a <_svfiprintf_r+0x1d2>
 8006c96:	2340      	movs	r3, #64	; 0x40
 8006c98:	616b      	str	r3, [r5, #20]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c9e:	2320      	movs	r3, #32
 8006ca0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ca4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ca8:	2330      	movs	r3, #48	; 0x30
 8006caa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e54 <_svfiprintf_r+0x1ec>
 8006cae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cb2:	f04f 0901 	mov.w	r9, #1
 8006cb6:	4623      	mov	r3, r4
 8006cb8:	469a      	mov	sl, r3
 8006cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cbe:	b10a      	cbz	r2, 8006cc4 <_svfiprintf_r+0x5c>
 8006cc0:	2a25      	cmp	r2, #37	; 0x25
 8006cc2:	d1f9      	bne.n	8006cb8 <_svfiprintf_r+0x50>
 8006cc4:	ebba 0b04 	subs.w	fp, sl, r4
 8006cc8:	d00b      	beq.n	8006ce2 <_svfiprintf_r+0x7a>
 8006cca:	465b      	mov	r3, fp
 8006ccc:	4622      	mov	r2, r4
 8006cce:	4629      	mov	r1, r5
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	f7ff ff6d 	bl	8006bb0 <__ssputs_r>
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	f000 80aa 	beq.w	8006e30 <_svfiprintf_r+0x1c8>
 8006cdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cde:	445a      	add	r2, fp
 8006ce0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 80a2 	beq.w	8006e30 <_svfiprintf_r+0x1c8>
 8006cec:	2300      	movs	r3, #0
 8006cee:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cf6:	f10a 0a01 	add.w	sl, sl, #1
 8006cfa:	9304      	str	r3, [sp, #16]
 8006cfc:	9307      	str	r3, [sp, #28]
 8006cfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d02:	931a      	str	r3, [sp, #104]	; 0x68
 8006d04:	4654      	mov	r4, sl
 8006d06:	2205      	movs	r2, #5
 8006d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0c:	4851      	ldr	r0, [pc, #324]	; (8006e54 <_svfiprintf_r+0x1ec>)
 8006d0e:	f7f9 fa67 	bl	80001e0 <memchr>
 8006d12:	9a04      	ldr	r2, [sp, #16]
 8006d14:	b9d8      	cbnz	r0, 8006d4e <_svfiprintf_r+0xe6>
 8006d16:	06d0      	lsls	r0, r2, #27
 8006d18:	bf44      	itt	mi
 8006d1a:	2320      	movmi	r3, #32
 8006d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d20:	0711      	lsls	r1, r2, #28
 8006d22:	bf44      	itt	mi
 8006d24:	232b      	movmi	r3, #43	; 0x2b
 8006d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d30:	d015      	beq.n	8006d5e <_svfiprintf_r+0xf6>
 8006d32:	9a07      	ldr	r2, [sp, #28]
 8006d34:	4654      	mov	r4, sl
 8006d36:	2000      	movs	r0, #0
 8006d38:	f04f 0c0a 	mov.w	ip, #10
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d42:	3b30      	subs	r3, #48	; 0x30
 8006d44:	2b09      	cmp	r3, #9
 8006d46:	d94e      	bls.n	8006de6 <_svfiprintf_r+0x17e>
 8006d48:	b1b0      	cbz	r0, 8006d78 <_svfiprintf_r+0x110>
 8006d4a:	9207      	str	r2, [sp, #28]
 8006d4c:	e014      	b.n	8006d78 <_svfiprintf_r+0x110>
 8006d4e:	eba0 0308 	sub.w	r3, r0, r8
 8006d52:	fa09 f303 	lsl.w	r3, r9, r3
 8006d56:	4313      	orrs	r3, r2
 8006d58:	9304      	str	r3, [sp, #16]
 8006d5a:	46a2      	mov	sl, r4
 8006d5c:	e7d2      	b.n	8006d04 <_svfiprintf_r+0x9c>
 8006d5e:	9b03      	ldr	r3, [sp, #12]
 8006d60:	1d19      	adds	r1, r3, #4
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	9103      	str	r1, [sp, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	bfbb      	ittet	lt
 8006d6a:	425b      	neglt	r3, r3
 8006d6c:	f042 0202 	orrlt.w	r2, r2, #2
 8006d70:	9307      	strge	r3, [sp, #28]
 8006d72:	9307      	strlt	r3, [sp, #28]
 8006d74:	bfb8      	it	lt
 8006d76:	9204      	strlt	r2, [sp, #16]
 8006d78:	7823      	ldrb	r3, [r4, #0]
 8006d7a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d7c:	d10c      	bne.n	8006d98 <_svfiprintf_r+0x130>
 8006d7e:	7863      	ldrb	r3, [r4, #1]
 8006d80:	2b2a      	cmp	r3, #42	; 0x2a
 8006d82:	d135      	bne.n	8006df0 <_svfiprintf_r+0x188>
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	1d1a      	adds	r2, r3, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	9203      	str	r2, [sp, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bfb8      	it	lt
 8006d90:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d94:	3402      	adds	r4, #2
 8006d96:	9305      	str	r3, [sp, #20]
 8006d98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e64 <_svfiprintf_r+0x1fc>
 8006d9c:	7821      	ldrb	r1, [r4, #0]
 8006d9e:	2203      	movs	r2, #3
 8006da0:	4650      	mov	r0, sl
 8006da2:	f7f9 fa1d 	bl	80001e0 <memchr>
 8006da6:	b140      	cbz	r0, 8006dba <_svfiprintf_r+0x152>
 8006da8:	2340      	movs	r3, #64	; 0x40
 8006daa:	eba0 000a 	sub.w	r0, r0, sl
 8006dae:	fa03 f000 	lsl.w	r0, r3, r0
 8006db2:	9b04      	ldr	r3, [sp, #16]
 8006db4:	4303      	orrs	r3, r0
 8006db6:	3401      	adds	r4, #1
 8006db8:	9304      	str	r3, [sp, #16]
 8006dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dbe:	4826      	ldr	r0, [pc, #152]	; (8006e58 <_svfiprintf_r+0x1f0>)
 8006dc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dc4:	2206      	movs	r2, #6
 8006dc6:	f7f9 fa0b 	bl	80001e0 <memchr>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d038      	beq.n	8006e40 <_svfiprintf_r+0x1d8>
 8006dce:	4b23      	ldr	r3, [pc, #140]	; (8006e5c <_svfiprintf_r+0x1f4>)
 8006dd0:	bb1b      	cbnz	r3, 8006e1a <_svfiprintf_r+0x1b2>
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	3307      	adds	r3, #7
 8006dd6:	f023 0307 	bic.w	r3, r3, #7
 8006dda:	3308      	adds	r3, #8
 8006ddc:	9303      	str	r3, [sp, #12]
 8006dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de0:	4433      	add	r3, r6
 8006de2:	9309      	str	r3, [sp, #36]	; 0x24
 8006de4:	e767      	b.n	8006cb6 <_svfiprintf_r+0x4e>
 8006de6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dea:	460c      	mov	r4, r1
 8006dec:	2001      	movs	r0, #1
 8006dee:	e7a5      	b.n	8006d3c <_svfiprintf_r+0xd4>
 8006df0:	2300      	movs	r3, #0
 8006df2:	3401      	adds	r4, #1
 8006df4:	9305      	str	r3, [sp, #20]
 8006df6:	4619      	mov	r1, r3
 8006df8:	f04f 0c0a 	mov.w	ip, #10
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e02:	3a30      	subs	r2, #48	; 0x30
 8006e04:	2a09      	cmp	r2, #9
 8006e06:	d903      	bls.n	8006e10 <_svfiprintf_r+0x1a8>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0c5      	beq.n	8006d98 <_svfiprintf_r+0x130>
 8006e0c:	9105      	str	r1, [sp, #20]
 8006e0e:	e7c3      	b.n	8006d98 <_svfiprintf_r+0x130>
 8006e10:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e14:	4604      	mov	r4, r0
 8006e16:	2301      	movs	r3, #1
 8006e18:	e7f0      	b.n	8006dfc <_svfiprintf_r+0x194>
 8006e1a:	ab03      	add	r3, sp, #12
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	462a      	mov	r2, r5
 8006e20:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <_svfiprintf_r+0x1f8>)
 8006e22:	a904      	add	r1, sp, #16
 8006e24:	4638      	mov	r0, r7
 8006e26:	f3af 8000 	nop.w
 8006e2a:	1c42      	adds	r2, r0, #1
 8006e2c:	4606      	mov	r6, r0
 8006e2e:	d1d6      	bne.n	8006dde <_svfiprintf_r+0x176>
 8006e30:	89ab      	ldrh	r3, [r5, #12]
 8006e32:	065b      	lsls	r3, r3, #25
 8006e34:	f53f af2c 	bmi.w	8006c90 <_svfiprintf_r+0x28>
 8006e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e3a:	b01d      	add	sp, #116	; 0x74
 8006e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e40:	ab03      	add	r3, sp, #12
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	462a      	mov	r2, r5
 8006e46:	4b06      	ldr	r3, [pc, #24]	; (8006e60 <_svfiprintf_r+0x1f8>)
 8006e48:	a904      	add	r1, sp, #16
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	f000 f87a 	bl	8006f44 <_printf_i>
 8006e50:	e7eb      	b.n	8006e2a <_svfiprintf_r+0x1c2>
 8006e52:	bf00      	nop
 8006e54:	08007ab8 	.word	0x08007ab8
 8006e58:	08007ac2 	.word	0x08007ac2
 8006e5c:	00000000 	.word	0x00000000
 8006e60:	08006bb1 	.word	0x08006bb1
 8006e64:	08007abe 	.word	0x08007abe

08006e68 <_printf_common>:
 8006e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	4699      	mov	r9, r3
 8006e70:	688a      	ldr	r2, [r1, #8]
 8006e72:	690b      	ldr	r3, [r1, #16]
 8006e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	bfb8      	it	lt
 8006e7c:	4613      	movlt	r3, r2
 8006e7e:	6033      	str	r3, [r6, #0]
 8006e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e84:	4607      	mov	r7, r0
 8006e86:	460c      	mov	r4, r1
 8006e88:	b10a      	cbz	r2, 8006e8e <_printf_common+0x26>
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	6033      	str	r3, [r6, #0]
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	0699      	lsls	r1, r3, #26
 8006e92:	bf42      	ittt	mi
 8006e94:	6833      	ldrmi	r3, [r6, #0]
 8006e96:	3302      	addmi	r3, #2
 8006e98:	6033      	strmi	r3, [r6, #0]
 8006e9a:	6825      	ldr	r5, [r4, #0]
 8006e9c:	f015 0506 	ands.w	r5, r5, #6
 8006ea0:	d106      	bne.n	8006eb0 <_printf_common+0x48>
 8006ea2:	f104 0a19 	add.w	sl, r4, #25
 8006ea6:	68e3      	ldr	r3, [r4, #12]
 8006ea8:	6832      	ldr	r2, [r6, #0]
 8006eaa:	1a9b      	subs	r3, r3, r2
 8006eac:	42ab      	cmp	r3, r5
 8006eae:	dc26      	bgt.n	8006efe <_printf_common+0x96>
 8006eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006eb4:	1e13      	subs	r3, r2, #0
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	bf18      	it	ne
 8006eba:	2301      	movne	r3, #1
 8006ebc:	0692      	lsls	r2, r2, #26
 8006ebe:	d42b      	bmi.n	8006f18 <_printf_common+0xb0>
 8006ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	47c0      	blx	r8
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d01e      	beq.n	8006f0c <_printf_common+0xa4>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	68e5      	ldr	r5, [r4, #12]
 8006ed2:	6832      	ldr	r2, [r6, #0]
 8006ed4:	f003 0306 	and.w	r3, r3, #6
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	bf08      	it	eq
 8006edc:	1aad      	subeq	r5, r5, r2
 8006ede:	68a3      	ldr	r3, [r4, #8]
 8006ee0:	6922      	ldr	r2, [r4, #16]
 8006ee2:	bf0c      	ite	eq
 8006ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ee8:	2500      	movne	r5, #0
 8006eea:	4293      	cmp	r3, r2
 8006eec:	bfc4      	itt	gt
 8006eee:	1a9b      	subgt	r3, r3, r2
 8006ef0:	18ed      	addgt	r5, r5, r3
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	341a      	adds	r4, #26
 8006ef6:	42b5      	cmp	r5, r6
 8006ef8:	d11a      	bne.n	8006f30 <_printf_common+0xc8>
 8006efa:	2000      	movs	r0, #0
 8006efc:	e008      	b.n	8006f10 <_printf_common+0xa8>
 8006efe:	2301      	movs	r3, #1
 8006f00:	4652      	mov	r2, sl
 8006f02:	4649      	mov	r1, r9
 8006f04:	4638      	mov	r0, r7
 8006f06:	47c0      	blx	r8
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d103      	bne.n	8006f14 <_printf_common+0xac>
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f14:	3501      	adds	r5, #1
 8006f16:	e7c6      	b.n	8006ea6 <_printf_common+0x3e>
 8006f18:	18e1      	adds	r1, r4, r3
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	2030      	movs	r0, #48	; 0x30
 8006f1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f22:	4422      	add	r2, r4
 8006f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f2c:	3302      	adds	r3, #2
 8006f2e:	e7c7      	b.n	8006ec0 <_printf_common+0x58>
 8006f30:	2301      	movs	r3, #1
 8006f32:	4622      	mov	r2, r4
 8006f34:	4649      	mov	r1, r9
 8006f36:	4638      	mov	r0, r7
 8006f38:	47c0      	blx	r8
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d0e6      	beq.n	8006f0c <_printf_common+0xa4>
 8006f3e:	3601      	adds	r6, #1
 8006f40:	e7d9      	b.n	8006ef6 <_printf_common+0x8e>
	...

08006f44 <_printf_i>:
 8006f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f48:	7e0f      	ldrb	r7, [r1, #24]
 8006f4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f4c:	2f78      	cmp	r7, #120	; 0x78
 8006f4e:	4691      	mov	r9, r2
 8006f50:	4680      	mov	r8, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	469a      	mov	sl, r3
 8006f56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f5a:	d807      	bhi.n	8006f6c <_printf_i+0x28>
 8006f5c:	2f62      	cmp	r7, #98	; 0x62
 8006f5e:	d80a      	bhi.n	8006f76 <_printf_i+0x32>
 8006f60:	2f00      	cmp	r7, #0
 8006f62:	f000 80d8 	beq.w	8007116 <_printf_i+0x1d2>
 8006f66:	2f58      	cmp	r7, #88	; 0x58
 8006f68:	f000 80a3 	beq.w	80070b2 <_printf_i+0x16e>
 8006f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f74:	e03a      	b.n	8006fec <_printf_i+0xa8>
 8006f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f7a:	2b15      	cmp	r3, #21
 8006f7c:	d8f6      	bhi.n	8006f6c <_printf_i+0x28>
 8006f7e:	a101      	add	r1, pc, #4	; (adr r1, 8006f84 <_printf_i+0x40>)
 8006f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f84:	08006fdd 	.word	0x08006fdd
 8006f88:	08006ff1 	.word	0x08006ff1
 8006f8c:	08006f6d 	.word	0x08006f6d
 8006f90:	08006f6d 	.word	0x08006f6d
 8006f94:	08006f6d 	.word	0x08006f6d
 8006f98:	08006f6d 	.word	0x08006f6d
 8006f9c:	08006ff1 	.word	0x08006ff1
 8006fa0:	08006f6d 	.word	0x08006f6d
 8006fa4:	08006f6d 	.word	0x08006f6d
 8006fa8:	08006f6d 	.word	0x08006f6d
 8006fac:	08006f6d 	.word	0x08006f6d
 8006fb0:	080070fd 	.word	0x080070fd
 8006fb4:	08007021 	.word	0x08007021
 8006fb8:	080070df 	.word	0x080070df
 8006fbc:	08006f6d 	.word	0x08006f6d
 8006fc0:	08006f6d 	.word	0x08006f6d
 8006fc4:	0800711f 	.word	0x0800711f
 8006fc8:	08006f6d 	.word	0x08006f6d
 8006fcc:	08007021 	.word	0x08007021
 8006fd0:	08006f6d 	.word	0x08006f6d
 8006fd4:	08006f6d 	.word	0x08006f6d
 8006fd8:	080070e7 	.word	0x080070e7
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	1d1a      	adds	r2, r3, #4
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	602a      	str	r2, [r5, #0]
 8006fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fec:	2301      	movs	r3, #1
 8006fee:	e0a3      	b.n	8007138 <_printf_i+0x1f4>
 8006ff0:	6820      	ldr	r0, [r4, #0]
 8006ff2:	6829      	ldr	r1, [r5, #0]
 8006ff4:	0606      	lsls	r6, r0, #24
 8006ff6:	f101 0304 	add.w	r3, r1, #4
 8006ffa:	d50a      	bpl.n	8007012 <_printf_i+0xce>
 8006ffc:	680e      	ldr	r6, [r1, #0]
 8006ffe:	602b      	str	r3, [r5, #0]
 8007000:	2e00      	cmp	r6, #0
 8007002:	da03      	bge.n	800700c <_printf_i+0xc8>
 8007004:	232d      	movs	r3, #45	; 0x2d
 8007006:	4276      	negs	r6, r6
 8007008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800700c:	485e      	ldr	r0, [pc, #376]	; (8007188 <_printf_i+0x244>)
 800700e:	230a      	movs	r3, #10
 8007010:	e019      	b.n	8007046 <_printf_i+0x102>
 8007012:	680e      	ldr	r6, [r1, #0]
 8007014:	602b      	str	r3, [r5, #0]
 8007016:	f010 0f40 	tst.w	r0, #64	; 0x40
 800701a:	bf18      	it	ne
 800701c:	b236      	sxthne	r6, r6
 800701e:	e7ef      	b.n	8007000 <_printf_i+0xbc>
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	6820      	ldr	r0, [r4, #0]
 8007024:	1d19      	adds	r1, r3, #4
 8007026:	6029      	str	r1, [r5, #0]
 8007028:	0601      	lsls	r1, r0, #24
 800702a:	d501      	bpl.n	8007030 <_printf_i+0xec>
 800702c:	681e      	ldr	r6, [r3, #0]
 800702e:	e002      	b.n	8007036 <_printf_i+0xf2>
 8007030:	0646      	lsls	r6, r0, #25
 8007032:	d5fb      	bpl.n	800702c <_printf_i+0xe8>
 8007034:	881e      	ldrh	r6, [r3, #0]
 8007036:	4854      	ldr	r0, [pc, #336]	; (8007188 <_printf_i+0x244>)
 8007038:	2f6f      	cmp	r7, #111	; 0x6f
 800703a:	bf0c      	ite	eq
 800703c:	2308      	moveq	r3, #8
 800703e:	230a      	movne	r3, #10
 8007040:	2100      	movs	r1, #0
 8007042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007046:	6865      	ldr	r5, [r4, #4]
 8007048:	60a5      	str	r5, [r4, #8]
 800704a:	2d00      	cmp	r5, #0
 800704c:	bfa2      	ittt	ge
 800704e:	6821      	ldrge	r1, [r4, #0]
 8007050:	f021 0104 	bicge.w	r1, r1, #4
 8007054:	6021      	strge	r1, [r4, #0]
 8007056:	b90e      	cbnz	r6, 800705c <_printf_i+0x118>
 8007058:	2d00      	cmp	r5, #0
 800705a:	d04d      	beq.n	80070f8 <_printf_i+0x1b4>
 800705c:	4615      	mov	r5, r2
 800705e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007062:	fb03 6711 	mls	r7, r3, r1, r6
 8007066:	5dc7      	ldrb	r7, [r0, r7]
 8007068:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800706c:	4637      	mov	r7, r6
 800706e:	42bb      	cmp	r3, r7
 8007070:	460e      	mov	r6, r1
 8007072:	d9f4      	bls.n	800705e <_printf_i+0x11a>
 8007074:	2b08      	cmp	r3, #8
 8007076:	d10b      	bne.n	8007090 <_printf_i+0x14c>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	07de      	lsls	r6, r3, #31
 800707c:	d508      	bpl.n	8007090 <_printf_i+0x14c>
 800707e:	6923      	ldr	r3, [r4, #16]
 8007080:	6861      	ldr	r1, [r4, #4]
 8007082:	4299      	cmp	r1, r3
 8007084:	bfde      	ittt	le
 8007086:	2330      	movle	r3, #48	; 0x30
 8007088:	f805 3c01 	strble.w	r3, [r5, #-1]
 800708c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007090:	1b52      	subs	r2, r2, r5
 8007092:	6122      	str	r2, [r4, #16]
 8007094:	f8cd a000 	str.w	sl, [sp]
 8007098:	464b      	mov	r3, r9
 800709a:	aa03      	add	r2, sp, #12
 800709c:	4621      	mov	r1, r4
 800709e:	4640      	mov	r0, r8
 80070a0:	f7ff fee2 	bl	8006e68 <_printf_common>
 80070a4:	3001      	adds	r0, #1
 80070a6:	d14c      	bne.n	8007142 <_printf_i+0x1fe>
 80070a8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ac:	b004      	add	sp, #16
 80070ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b2:	4835      	ldr	r0, [pc, #212]	; (8007188 <_printf_i+0x244>)
 80070b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070b8:	6829      	ldr	r1, [r5, #0]
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80070c0:	6029      	str	r1, [r5, #0]
 80070c2:	061d      	lsls	r5, r3, #24
 80070c4:	d514      	bpl.n	80070f0 <_printf_i+0x1ac>
 80070c6:	07df      	lsls	r7, r3, #31
 80070c8:	bf44      	itt	mi
 80070ca:	f043 0320 	orrmi.w	r3, r3, #32
 80070ce:	6023      	strmi	r3, [r4, #0]
 80070d0:	b91e      	cbnz	r6, 80070da <_printf_i+0x196>
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	f023 0320 	bic.w	r3, r3, #32
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	2310      	movs	r3, #16
 80070dc:	e7b0      	b.n	8007040 <_printf_i+0xfc>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	f043 0320 	orr.w	r3, r3, #32
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	2378      	movs	r3, #120	; 0x78
 80070e8:	4828      	ldr	r0, [pc, #160]	; (800718c <_printf_i+0x248>)
 80070ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070ee:	e7e3      	b.n	80070b8 <_printf_i+0x174>
 80070f0:	0659      	lsls	r1, r3, #25
 80070f2:	bf48      	it	mi
 80070f4:	b2b6      	uxthmi	r6, r6
 80070f6:	e7e6      	b.n	80070c6 <_printf_i+0x182>
 80070f8:	4615      	mov	r5, r2
 80070fa:	e7bb      	b.n	8007074 <_printf_i+0x130>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	6826      	ldr	r6, [r4, #0]
 8007100:	6961      	ldr	r1, [r4, #20]
 8007102:	1d18      	adds	r0, r3, #4
 8007104:	6028      	str	r0, [r5, #0]
 8007106:	0635      	lsls	r5, r6, #24
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	d501      	bpl.n	8007110 <_printf_i+0x1cc>
 800710c:	6019      	str	r1, [r3, #0]
 800710e:	e002      	b.n	8007116 <_printf_i+0x1d2>
 8007110:	0670      	lsls	r0, r6, #25
 8007112:	d5fb      	bpl.n	800710c <_printf_i+0x1c8>
 8007114:	8019      	strh	r1, [r3, #0]
 8007116:	2300      	movs	r3, #0
 8007118:	6123      	str	r3, [r4, #16]
 800711a:	4615      	mov	r5, r2
 800711c:	e7ba      	b.n	8007094 <_printf_i+0x150>
 800711e:	682b      	ldr	r3, [r5, #0]
 8007120:	1d1a      	adds	r2, r3, #4
 8007122:	602a      	str	r2, [r5, #0]
 8007124:	681d      	ldr	r5, [r3, #0]
 8007126:	6862      	ldr	r2, [r4, #4]
 8007128:	2100      	movs	r1, #0
 800712a:	4628      	mov	r0, r5
 800712c:	f7f9 f858 	bl	80001e0 <memchr>
 8007130:	b108      	cbz	r0, 8007136 <_printf_i+0x1f2>
 8007132:	1b40      	subs	r0, r0, r5
 8007134:	6060      	str	r0, [r4, #4]
 8007136:	6863      	ldr	r3, [r4, #4]
 8007138:	6123      	str	r3, [r4, #16]
 800713a:	2300      	movs	r3, #0
 800713c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007140:	e7a8      	b.n	8007094 <_printf_i+0x150>
 8007142:	6923      	ldr	r3, [r4, #16]
 8007144:	462a      	mov	r2, r5
 8007146:	4649      	mov	r1, r9
 8007148:	4640      	mov	r0, r8
 800714a:	47d0      	blx	sl
 800714c:	3001      	adds	r0, #1
 800714e:	d0ab      	beq.n	80070a8 <_printf_i+0x164>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	079b      	lsls	r3, r3, #30
 8007154:	d413      	bmi.n	800717e <_printf_i+0x23a>
 8007156:	68e0      	ldr	r0, [r4, #12]
 8007158:	9b03      	ldr	r3, [sp, #12]
 800715a:	4298      	cmp	r0, r3
 800715c:	bfb8      	it	lt
 800715e:	4618      	movlt	r0, r3
 8007160:	e7a4      	b.n	80070ac <_printf_i+0x168>
 8007162:	2301      	movs	r3, #1
 8007164:	4632      	mov	r2, r6
 8007166:	4649      	mov	r1, r9
 8007168:	4640      	mov	r0, r8
 800716a:	47d0      	blx	sl
 800716c:	3001      	adds	r0, #1
 800716e:	d09b      	beq.n	80070a8 <_printf_i+0x164>
 8007170:	3501      	adds	r5, #1
 8007172:	68e3      	ldr	r3, [r4, #12]
 8007174:	9903      	ldr	r1, [sp, #12]
 8007176:	1a5b      	subs	r3, r3, r1
 8007178:	42ab      	cmp	r3, r5
 800717a:	dcf2      	bgt.n	8007162 <_printf_i+0x21e>
 800717c:	e7eb      	b.n	8007156 <_printf_i+0x212>
 800717e:	2500      	movs	r5, #0
 8007180:	f104 0619 	add.w	r6, r4, #25
 8007184:	e7f5      	b.n	8007172 <_printf_i+0x22e>
 8007186:	bf00      	nop
 8007188:	08007ac9 	.word	0x08007ac9
 800718c:	08007ada 	.word	0x08007ada

08007190 <__sread>:
 8007190:	b510      	push	{r4, lr}
 8007192:	460c      	mov	r4, r1
 8007194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007198:	f000 f8b8 	bl	800730c <_read_r>
 800719c:	2800      	cmp	r0, #0
 800719e:	bfab      	itete	ge
 80071a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071a2:	89a3      	ldrhlt	r3, [r4, #12]
 80071a4:	181b      	addge	r3, r3, r0
 80071a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071aa:	bfac      	ite	ge
 80071ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80071ae:	81a3      	strhlt	r3, [r4, #12]
 80071b0:	bd10      	pop	{r4, pc}

080071b2 <__swrite>:
 80071b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b6:	461f      	mov	r7, r3
 80071b8:	898b      	ldrh	r3, [r1, #12]
 80071ba:	05db      	lsls	r3, r3, #23
 80071bc:	4605      	mov	r5, r0
 80071be:	460c      	mov	r4, r1
 80071c0:	4616      	mov	r6, r2
 80071c2:	d505      	bpl.n	80071d0 <__swrite+0x1e>
 80071c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c8:	2302      	movs	r3, #2
 80071ca:	2200      	movs	r2, #0
 80071cc:	f000 f834 	bl	8007238 <_lseek_r>
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071da:	81a3      	strh	r3, [r4, #12]
 80071dc:	4632      	mov	r2, r6
 80071de:	463b      	mov	r3, r7
 80071e0:	4628      	mov	r0, r5
 80071e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071e6:	f7ff bacd 	b.w	8006784 <_write_r>

080071ea <__sseek>:
 80071ea:	b510      	push	{r4, lr}
 80071ec:	460c      	mov	r4, r1
 80071ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f2:	f000 f821 	bl	8007238 <_lseek_r>
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	bf15      	itete	ne
 80071fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80071fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007206:	81a3      	strheq	r3, [r4, #12]
 8007208:	bf18      	it	ne
 800720a:	81a3      	strhne	r3, [r4, #12]
 800720c:	bd10      	pop	{r4, pc}

0800720e <__sclose>:
 800720e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007212:	f000 b801 	b.w	8007218 <_close_r>
	...

08007218 <_close_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4d06      	ldr	r5, [pc, #24]	; (8007234 <_close_r+0x1c>)
 800721c:	2300      	movs	r3, #0
 800721e:	4604      	mov	r4, r0
 8007220:	4608      	mov	r0, r1
 8007222:	602b      	str	r3, [r5, #0]
 8007224:	f7fa fa49 	bl	80016ba <_close>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_close_r+0x1a>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	b103      	cbz	r3, 8007232 <_close_r+0x1a>
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	200002e8 	.word	0x200002e8

08007238 <_lseek_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4d07      	ldr	r5, [pc, #28]	; (8007258 <_lseek_r+0x20>)
 800723c:	4604      	mov	r4, r0
 800723e:	4608      	mov	r0, r1
 8007240:	4611      	mov	r1, r2
 8007242:	2200      	movs	r2, #0
 8007244:	602a      	str	r2, [r5, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	f7fa fa43 	bl	80016d2 <_lseek>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_lseek_r+0x1e>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	b103      	cbz	r3, 8007256 <_lseek_r+0x1e>
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	200002e8 	.word	0x200002e8

0800725c <memcpy>:
 800725c:	440a      	add	r2, r1
 800725e:	4291      	cmp	r1, r2
 8007260:	f100 33ff 	add.w	r3, r0, #4294967295
 8007264:	d100      	bne.n	8007268 <memcpy+0xc>
 8007266:	4770      	bx	lr
 8007268:	b510      	push	{r4, lr}
 800726a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800726e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007272:	4291      	cmp	r1, r2
 8007274:	d1f9      	bne.n	800726a <memcpy+0xe>
 8007276:	bd10      	pop	{r4, pc}

08007278 <memmove>:
 8007278:	4288      	cmp	r0, r1
 800727a:	b510      	push	{r4, lr}
 800727c:	eb01 0402 	add.w	r4, r1, r2
 8007280:	d902      	bls.n	8007288 <memmove+0x10>
 8007282:	4284      	cmp	r4, r0
 8007284:	4623      	mov	r3, r4
 8007286:	d807      	bhi.n	8007298 <memmove+0x20>
 8007288:	1e43      	subs	r3, r0, #1
 800728a:	42a1      	cmp	r1, r4
 800728c:	d008      	beq.n	80072a0 <memmove+0x28>
 800728e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007292:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007296:	e7f8      	b.n	800728a <memmove+0x12>
 8007298:	4402      	add	r2, r0
 800729a:	4601      	mov	r1, r0
 800729c:	428a      	cmp	r2, r1
 800729e:	d100      	bne.n	80072a2 <memmove+0x2a>
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072aa:	e7f7      	b.n	800729c <memmove+0x24>

080072ac <_realloc_r>:
 80072ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b0:	4680      	mov	r8, r0
 80072b2:	4614      	mov	r4, r2
 80072b4:	460e      	mov	r6, r1
 80072b6:	b921      	cbnz	r1, 80072c2 <_realloc_r+0x16>
 80072b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072bc:	4611      	mov	r1, r2
 80072be:	f7fe bf33 	b.w	8006128 <_malloc_r>
 80072c2:	b92a      	cbnz	r2, 80072d0 <_realloc_r+0x24>
 80072c4:	f7fe fec4 	bl	8006050 <_free_r>
 80072c8:	4625      	mov	r5, r4
 80072ca:	4628      	mov	r0, r5
 80072cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072d0:	f000 f82e 	bl	8007330 <_malloc_usable_size_r>
 80072d4:	4284      	cmp	r4, r0
 80072d6:	4607      	mov	r7, r0
 80072d8:	d802      	bhi.n	80072e0 <_realloc_r+0x34>
 80072da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80072de:	d812      	bhi.n	8007306 <_realloc_r+0x5a>
 80072e0:	4621      	mov	r1, r4
 80072e2:	4640      	mov	r0, r8
 80072e4:	f7fe ff20 	bl	8006128 <_malloc_r>
 80072e8:	4605      	mov	r5, r0
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d0ed      	beq.n	80072ca <_realloc_r+0x1e>
 80072ee:	42bc      	cmp	r4, r7
 80072f0:	4622      	mov	r2, r4
 80072f2:	4631      	mov	r1, r6
 80072f4:	bf28      	it	cs
 80072f6:	463a      	movcs	r2, r7
 80072f8:	f7ff ffb0 	bl	800725c <memcpy>
 80072fc:	4631      	mov	r1, r6
 80072fe:	4640      	mov	r0, r8
 8007300:	f7fe fea6 	bl	8006050 <_free_r>
 8007304:	e7e1      	b.n	80072ca <_realloc_r+0x1e>
 8007306:	4635      	mov	r5, r6
 8007308:	e7df      	b.n	80072ca <_realloc_r+0x1e>
	...

0800730c <_read_r>:
 800730c:	b538      	push	{r3, r4, r5, lr}
 800730e:	4d07      	ldr	r5, [pc, #28]	; (800732c <_read_r+0x20>)
 8007310:	4604      	mov	r4, r0
 8007312:	4608      	mov	r0, r1
 8007314:	4611      	mov	r1, r2
 8007316:	2200      	movs	r2, #0
 8007318:	602a      	str	r2, [r5, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	f7fa f994 	bl	8001648 <_read>
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	d102      	bne.n	800732a <_read_r+0x1e>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	b103      	cbz	r3, 800732a <_read_r+0x1e>
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	bd38      	pop	{r3, r4, r5, pc}
 800732c:	200002e8 	.word	0x200002e8

08007330 <_malloc_usable_size_r>:
 8007330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007334:	1f18      	subs	r0, r3, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	bfbc      	itt	lt
 800733a:	580b      	ldrlt	r3, [r1, r0]
 800733c:	18c0      	addlt	r0, r0, r3
 800733e:	4770      	bx	lr

08007340 <_init>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	bf00      	nop
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr

0800734c <_fini>:
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734e:	bf00      	nop
 8007350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007352:	bc08      	pop	{r3}
 8007354:	469e      	mov	lr, r3
 8007356:	4770      	bx	lr
