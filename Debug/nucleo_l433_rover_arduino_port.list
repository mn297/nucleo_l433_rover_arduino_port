
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b5c  0800a290  0800a290  0001a290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adec  0800adec  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800adec  0800adec  0001adec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adf4  0800adf4  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800adf4  0800adf4  0001adf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adfc  0800adfc  0001adfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800ae00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  20000210  0800b00c  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  0800b00c  00020650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a06  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003584  00000000  00000000  00038c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  0003c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003d568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279f8  00000000  00000000  0003e7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017692  00000000  00000000  000661a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddf65  00000000  00000000  0007d83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b79f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064a8  00000000  00000000  0015b7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a274 	.word	0x0800a274

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800a274 	.word	0x0800a274

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB8   ------> S_TIM16_CH1
*/
void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b52      	ldr	r3, [pc, #328]	; (800100c <MX_GPIO_Init+0x160>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a51      	ldr	r2, [pc, #324]	; (800100c <MX_GPIO_Init+0x160>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b4f      	ldr	r3, [pc, #316]	; (800100c <MX_GPIO_Init+0x160>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	4b4c      	ldr	r3, [pc, #304]	; (800100c <MX_GPIO_Init+0x160>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a4b      	ldr	r2, [pc, #300]	; (800100c <MX_GPIO_Init+0x160>)
 8000ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b49      	ldr	r3, [pc, #292]	; (800100c <MX_GPIO_Init+0x160>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b46      	ldr	r3, [pc, #280]	; (800100c <MX_GPIO_Init+0x160>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a45      	ldr	r2, [pc, #276]	; (800100c <MX_GPIO_Init+0x160>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b43      	ldr	r3, [pc, #268]	; (800100c <MX_GPIO_Init+0x160>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b40      	ldr	r3, [pc, #256]	; (800100c <MX_GPIO_Init+0x160>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a3f      	ldr	r2, [pc, #252]	; (800100c <MX_GPIO_Init+0x160>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b3d      	ldr	r3, [pc, #244]	; (800100c <MX_GPIO_Init+0x160>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000f22:	2200      	movs	r2, #0
 8000f24:	f248 11b0 	movw	r1, #33200	; 0x81b0
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f002 fb48 	bl	80035c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	4836      	ldr	r0, [pc, #216]	; (8001010 <MX_GPIO_Init+0x164>)
 8000f36:	f002 fb43 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2160      	movs	r1, #96	; 0x60
 8000f3e:	4835      	ldr	r0, [pc, #212]	; (8001014 <MX_GPIO_Init+0x168>)
 8000f40:	f002 fb3e 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	482d      	ldr	r0, [pc, #180]	; (8001010 <MX_GPIO_Init+0x164>)
 8000f5c:	f002 f9b6 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000f60:	f248 13b0 	movw	r3, #33200	; 0x81b0
 8000f64:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f002 f9a6 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000f80:	2340      	movs	r3, #64	; 0x40
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f002 f999 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4817      	ldr	r0, [pc, #92]	; (8001010 <MX_GPIO_Init+0x164>)
 8000fb2:	f002 f98b 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 8000fb6:	2360      	movs	r3, #96	; 0x60
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4811      	ldr	r0, [pc, #68]	; (8001014 <MX_GPIO_Init+0x168>)
 8000fce:	f002 f97d 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000fe4:	230e      	movs	r3, #14
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <MX_GPIO_Init+0x168>)
 8000ff0:	f002 f96c 	bl	80032cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2028      	movs	r0, #40	; 0x28
 8000ffa:	f002 f930 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ffe:	2028      	movs	r0, #40	; 0x28
 8001000:	f002 f949 	bl	8003296 <HAL_NVIC_EnableIRQ>

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	48000800 	.word	0x48000800
 8001014:	48000400 	.word	0x48000400

08001018 <_ZN3PinC1Ev>:
    uint16_t pin;
    bool valid;
    TIM_HandleTypeDef* p_tim;
    unsigned int channel;

    Pin() : port(nullptr), pin(0), valid(false), p_tim(nullptr), channel(0) {}
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	809a      	strh	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	719a      	strb	r2, [r3, #6]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_ZN3PinC1EP12GPIO_TypeDeft>:
    Pin(GPIO_TypeDef* p, uint16_t pn) : port(p), pin(pn), valid(true), p_tim(nullptr), channel(0) {} // no timer
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	4613      	mov	r3, r2
 8001058:	80fb      	strh	r3, [r7, #6]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	88fa      	ldrh	r2, [r7, #6]
 8001064:	809a      	strh	r2, [r3, #4]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2201      	movs	r2, #1
 800106a:	719a      	strb	r2, [r3, #6]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>:
    Pin(GPIO_TypeDef* p, uint16_t pn, TIM_HandleTypeDef* t, unsigned int c) : port(p), pin(pn), valid(true), p_tim(t), channel(c) {}
 8001086:	b480      	push	{r7}
 8001088:	b085      	sub	sp, #20
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4613      	mov	r3, r2
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	809a      	strh	r2, [r3, #4]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2201      	movs	r2, #1
 80010a6:	719a      	strb	r2, [r3, #6]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <_Z5printPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff f87f 	bl	80001d0 <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <_Z5printPKc+0x2c>)
 80010de:	f005 f921 	bl	8006324 <HAL_UART_Transmit>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200005b4 	.word	0x200005b4

080010f4 <printf>:
int printf(const char* s, ...){
 80010f4:	b40f      	push	{r0, r1, r2, r3}
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b0c2      	sub	sp, #264	; 0x108
 80010fa:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 80010fc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001104:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001108:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 800110a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800110e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001112:	f107 0008 	add.w	r0, r7, #8
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800111c:	f006 ff4c 	bl	8007fb8 <vsiprintf>
	perror(buffer);
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	4618      	mov	r0, r3
 8001126:	f006 fced 	bl	8007b04 <perror>
	print(buffer);
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ffc8 	bl	80010c4 <_Z5printPKc>
	va_end(args);
//	#endif
	return strlen(buffer);
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f849 	bl	80001d0 <strlen>
 800113e:	4603      	mov	r3, r0
}
 8001140:	4618      	mov	r0, r3
 8001142:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001146:	46bd      	mov	sp, r7
 8001148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800114c:	b004      	add	sp, #16
 800114e:	4770      	bx	lr

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f001 ff07 	bl	8002f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115a:	f000 f977 	bl	800144c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115e:	f7ff fea5 	bl	8000eac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001162:	f000 fed7 	bl	8001f14 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001166:	f000 fa6f 	bl	8001648 <MX_SPI1_Init>
  MX_SPI2_Init();
 800116a:	f000 faab 	bl	80016c4 <MX_SPI2_Init>
  MX_SPI3_Init();
 800116e:	f000 fae7 	bl	8001740 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001172:	f000 fcfb 	bl	8001b6c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001176:	f000 fda5 	bl	8001cc4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderData_1 = 99;
 800117a:	2363      	movs	r3, #99	; 0x63
 800117c:	82fb      	strh	r3, [r7, #22]
  uint16_t encoderData_2 = 99;
 800117e:	2363      	movs	r3, #99	; 0x63
 8001180:	82bb      	strh	r3, [r7, #20]
  uint16_t encoderData_3 = 99;
 8001182:	2363      	movs	r3, #99	; 0x63
 8001184:	827b      	strh	r3, [r7, #18]
  uint16_t encoder_max = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	823b      	strh	r3, [r7, #16]
  uint16_t encoder_min = 4100;
 800118a:	f241 0304 	movw	r3, #4100	; 0x1004
 800118e:	81fb      	strh	r3, [r7, #14]
  HAL_TIM_Base_Start(&htim1);
 8001190:	489d      	ldr	r0, [pc, #628]	; (8001408 <main+0x2b8>)
 8001192:	f004 f88f 	bl	80052b4 <HAL_TIM_Base_Start>

  /*---AMT22 setup---*/
  // resetAMT22(&hspi1, GPIOC, GPIO_PIN_7, &htim1);

  /*---ESC setup---*/
  int32_t  CH2_ESC = 1500-1;
 8001196:	f240 53db 	movw	r3, #1499	; 0x5db
 800119a:	60bb      	str	r3, [r7, #8]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800119c:	2104      	movs	r1, #4
 800119e:	489a      	ldr	r0, [pc, #616]	; (8001408 <main+0x2b8>)
 80011a0:	f004 f936 	bl	8005410 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 80011a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a8:	f001 ff5a 	bl	8003060 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500-1);
 80011ac:	4b96      	ldr	r3, [pc, #600]	; (8001408 <main+0x2b8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f240 52db 	movw	r2, #1499	; 0x5db
 80011b4:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(500);
 80011b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ba:	f001 ff51 	bl	8003060 <HAL_Delay>




  /*---CYTRON setup---*/
  int32_t  CH2_DC = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011c2:	2104      	movs	r1, #4
 80011c4:	4891      	ldr	r0, [pc, #580]	; (800140c <main+0x2bc>)
 80011c6:	f004 f923 	bl	8005410 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80011ca:	4b90      	ldr	r3, [pc, #576]	; (800140c <main+0x2bc>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(10);
 80011d2:	200a      	movs	r0, #10
 80011d4:	f001 ff44 	bl	8003060 <HAL_Delay>
  Wrist_Roll.wrist_waist = 1;
 80011d8:	4b8d      	ldr	r3, [pc, #564]	; (8001410 <main+0x2c0>)
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
  Wrist_Roll.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
 80011e0:	4b8c      	ldr	r3, [pc, #560]	; (8001414 <main+0x2c4>)
 80011e2:	ed93 7b00 	vldr	d7, [r3]
 80011e6:	4b8c      	ldr	r3, [pc, #560]	; (8001418 <main+0x2c8>)
 80011e8:	ed93 6b00 	vldr	d6, [r3]
 80011ec:	4b8b      	ldr	r3, [pc, #556]	; (800141c <main+0x2cc>)
 80011ee:	ed93 2b00 	vldr	d2, [r3]
 80011f2:	4b8b      	ldr	r3, [pc, #556]	; (8001420 <main+0x2d0>)
 80011f4:	ed93 3b00 	vldr	d3, [r3]
 80011f8:	4b8a      	ldr	r3, [pc, #552]	; (8001424 <main+0x2d4>)
 80011fa:	ed93 4b00 	vldr	d4, [r3]
 80011fe:	4b8a      	ldr	r3, [pc, #552]	; (8001428 <main+0x2d8>)
 8001200:	ed93 5b00 	vldr	d5, [r3]
 8001204:	eeb0 1a46 	vmov.f32	s2, s12
 8001208:	eef0 1a66 	vmov.f32	s3, s13
 800120c:	eeb0 0a47 	vmov.f32	s0, s14
 8001210:	eef0 0a67 	vmov.f32	s1, s15
 8001214:	487e      	ldr	r0, [pc, #504]	; (8001410 <main+0x2c0>)
 8001216:	f000 ffef 	bl	80021f8 <_ZN13RoverArmMotor5beginEdddddd>
  Wrist_Roll.setAngleLimits(2, 120.0f); //for angle limits test
 800121a:	ed9f 1b77 	vldr	d1, [pc, #476]	; 80013f8 <main+0x2a8>
 800121e:	ed9f 0b78 	vldr	d0, [pc, #480]	; 8001400 <main+0x2b0>
 8001222:	487b      	ldr	r0, [pc, #492]	; (8001410 <main+0x2c0>)
 8001224:	f001 f9fe 	bl	8002624 <_ZN13RoverArmMotor14setAngleLimitsEdd>
  Wrist_Roll.reset_encoder();
 8001228:	4879      	ldr	r0, [pc, #484]	; (8001410 <main+0x2c0>)
 800122a:	f001 fa1f 	bl	800266c <_ZN13RoverArmMotor13reset_encoderEv>
  // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 70);
  // current_angle = Wrist_Roll.get_current_angle();
  // printf("current angle is %f\r\n, current_angle");
  // Wrist_Roll.newSetpoint(current_angle + 150);

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 30);
 800122e:	4b77      	ldr	r3, [pc, #476]	; (800140c <main+0x2bc>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	221e      	movs	r2, #30
 8001234:	639a      	str	r2, [r3, #56]	; 0x38
  while(!brakeSet){
 8001236:	4b7d      	ldr	r3, [pc, #500]	; (800142c <main+0x2dc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d130      	bne.n	80012a0 <main+0x150>
    // printf("waiting for brake set, current %f\r\n", Wrist_Roll.get_current_angle());
    current_angle = Wrist_Roll.get_current_angle();
 800123e:	4874      	ldr	r0, [pc, #464]	; (8001410 <main+0x2c0>)
 8001240:	f001 fa52 	bl	80026e8 <_ZN13RoverArmMotor17get_current_angleEv>
 8001244:	eeb0 7a40 	vmov.f32	s14, s0
 8001248:	eef0 7a60 	vmov.f32	s15, s1
 800124c:	4b78      	ldr	r3, [pc, #480]	; (8001430 <main+0x2e0>)
 800124e:	ed83 7b00 	vstr	d7, [r3]
    current_angle_sw = Wrist_Roll.get_current_angle_sw();
 8001252:	486f      	ldr	r0, [pc, #444]	; (8001410 <main+0x2c0>)
 8001254:	f001 fa8e 	bl	8002774 <_ZN13RoverArmMotor20get_current_angle_swEv>
 8001258:	eeb0 7a40 	vmov.f32	s14, s0
 800125c:	eef0 7a60 	vmov.f32	s15, s1
 8001260:	4b74      	ldr	r3, [pc, #464]	; (8001434 <main+0x2e4>)
 8001262:	ed83 7b00 	vstr	d7, [r3]
    setpoint = Wrist_Roll.getSetpoint();
 8001266:	486a      	ldr	r0, [pc, #424]	; (8001410 <main+0x2c0>)
 8001268:	f001 f994 	bl	8002594 <_ZN13RoverArmMotor11getSetpointEv>
 800126c:	eeb0 7a40 	vmov.f32	s14, s0
 8001270:	eef0 7a60 	vmov.f32	s15, s1
 8001274:	4b70      	ldr	r3, [pc, #448]	; (8001438 <main+0x2e8>)
 8001276:	ed83 7b00 	vstr	d7, [r3]
    printf("BRAKE, current angle: %f, setpoint: %f, current_angle_sw: %f\r\n", current_angle, setpoint, current_angle_sw);
 800127a:	4b6d      	ldr	r3, [pc, #436]	; (8001430 <main+0x2e0>)
 800127c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001280:	4b6d      	ldr	r3, [pc, #436]	; (8001438 <main+0x2e8>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	496b      	ldr	r1, [pc, #428]	; (8001434 <main+0x2e4>)
 8001288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800128c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001290:	e9cd 2300 	strd	r2, r3, [sp]
 8001294:	4622      	mov	r2, r4
 8001296:	462b      	mov	r3, r5
 8001298:	4868      	ldr	r0, [pc, #416]	; (800143c <main+0x2ec>)
 800129a:	f7ff ff2b 	bl	80010f4 <printf>
  while(!brakeSet){
 800129e:	e7ca      	b.n	8001236 <main+0xe6>
    // printf("waiting for brake set\r\n");
  }
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80012a0:	4b5a      	ldr	r3, [pc, #360]	; (800140c <main+0x2bc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	639a      	str	r2, [r3, #56]	; 0x38
    // printf("current angle: %f, setpoint: %f, current_angle_sw: %f\r\n", current_angle, setpoint, current_angle_sw);


    /*--------------------------------------CYTRON angle limit test--------------------------------------*/
    // high first because we just set zero 
    Wrist_Roll.newSetpoint(Wrist_Roll.highestAngle);
 80012a8:	4b59      	ldr	r3, [pc, #356]	; (8001410 <main+0x2c0>)
 80012aa:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 80012ae:	eeb0 0a47 	vmov.f32	s0, s14
 80012b2:	eef0 0a67 	vmov.f32	s1, s15
 80012b6:	4856      	ldr	r0, [pc, #344]	; (8001410 <main+0x2c0>)
 80012b8:	f001 f983 	bl	80025c2 <_ZN13RoverArmMotor11newSetpointEd>
    while(true) {
      current_angle = Wrist_Roll.get_current_angle();
 80012bc:	4854      	ldr	r0, [pc, #336]	; (8001410 <main+0x2c0>)
 80012be:	f001 fa13 	bl	80026e8 <_ZN13RoverArmMotor17get_current_angleEv>
 80012c2:	eeb0 7a40 	vmov.f32	s14, s0
 80012c6:	eef0 7a60 	vmov.f32	s15, s1
 80012ca:	4b59      	ldr	r3, [pc, #356]	; (8001430 <main+0x2e0>)
 80012cc:	ed83 7b00 	vstr	d7, [r3]
      current_angle_sw = Wrist_Roll.get_current_angle_sw();
 80012d0:	484f      	ldr	r0, [pc, #316]	; (8001410 <main+0x2c0>)
 80012d2:	f001 fa4f 	bl	8002774 <_ZN13RoverArmMotor20get_current_angle_swEv>
 80012d6:	eeb0 7a40 	vmov.f32	s14, s0
 80012da:	eef0 7a60 	vmov.f32	s15, s1
 80012de:	4b55      	ldr	r3, [pc, #340]	; (8001434 <main+0x2e4>)
 80012e0:	ed83 7b00 	vstr	d7, [r3]
      if (!(current_angle_sw >= Wrist_Roll.highestAngle - 1.0)) {
 80012e4:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <main+0x2c0>)
 80012e6:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	; 0x108
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4b54      	ldr	r3, [pc, #336]	; (8001440 <main+0x2f0>)
 80012f0:	f7fe ffca 	bl	8000288 <__aeabi_dsub>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	4b4d      	ldr	r3, [pc, #308]	; (8001434 <main+0x2e4>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	2401      	movs	r4, #1
 8001304:	f7ff fbf4 	bl	8000af0 <__aeabi_dcmple>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <main+0x1c2>
 800130e:	2300      	movs	r3, #0
 8001310:	461c      	mov	r4, r3
 8001312:	b2e3      	uxtb	r3, r4
 8001314:	f083 0301 	eor.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d015      	beq.n	800134a <main+0x1fa>
        printf("UP current angle: %f, setpoint: %f, sw: %f\r\n", current_angle, Wrist_Roll.setpoint, current_angle_sw);
 800131e:	4b44      	ldr	r3, [pc, #272]	; (8001430 <main+0x2e0>)
 8001320:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001324:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <main+0x2c0>)
 8001326:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 800132a:	4942      	ldr	r1, [pc, #264]	; (8001434 <main+0x2e4>)
 800132c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001334:	e9cd 2300 	strd	r2, r3, [sp]
 8001338:	4622      	mov	r2, r4
 800133a:	462b      	mov	r3, r5
 800133c:	4841      	ldr	r0, [pc, #260]	; (8001444 <main+0x2f4>)
 800133e:	f7ff fed9 	bl	80010f4 <printf>
        Wrist_Roll.tick();
 8001342:	4833      	ldr	r0, [pc, #204]	; (8001410 <main+0x2c0>)
 8001344:	f000 ffea 	bl	800231c <_ZN13RoverArmMotor4tickEv>
      current_angle = Wrist_Roll.get_current_angle();
 8001348:	e7b8      	b.n	80012bc <main+0x16c>
      }
      else {
        break;
 800134a:	bf00      	nop
      }
    }
    Wrist_Roll.newSetpoint(Wrist_Roll.lowestAngle);
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <main+0x2c0>)
 800134e:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8001352:	eeb0 0a47 	vmov.f32	s0, s14
 8001356:	eef0 0a67 	vmov.f32	s1, s15
 800135a:	482d      	ldr	r0, [pc, #180]	; (8001410 <main+0x2c0>)
 800135c:	f001 f931 	bl	80025c2 <_ZN13RoverArmMotor11newSetpointEd>
    while(true) {
      current_angle = Wrist_Roll.get_current_angle();
 8001360:	482b      	ldr	r0, [pc, #172]	; (8001410 <main+0x2c0>)
 8001362:	f001 f9c1 	bl	80026e8 <_ZN13RoverArmMotor17get_current_angleEv>
 8001366:	eeb0 7a40 	vmov.f32	s14, s0
 800136a:	eef0 7a60 	vmov.f32	s15, s1
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <main+0x2e0>)
 8001370:	ed83 7b00 	vstr	d7, [r3]
      current_angle_sw = Wrist_Roll.get_current_angle_sw();
 8001374:	4826      	ldr	r0, [pc, #152]	; (8001410 <main+0x2c0>)
 8001376:	f001 f9fd 	bl	8002774 <_ZN13RoverArmMotor20get_current_angle_swEv>
 800137a:	eeb0 7a40 	vmov.f32	s14, s0
 800137e:	eef0 7a60 	vmov.f32	s15, s1
 8001382:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <main+0x2e4>)
 8001384:	ed83 7b00 	vstr	d7, [r3]
      if (!(current_angle_sw <= Wrist_Roll.lowestAngle + 1.0)) {
 8001388:	4b21      	ldr	r3, [pc, #132]	; (8001410 <main+0x2c0>)
 800138a:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	; 0x100
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <main+0x2f0>)
 8001394:	f7fe ff7a 	bl	800028c <__adddf3>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <main+0x2e4>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	2401      	movs	r4, #1
 80013a8:	f7ff fbac 	bl	8000b04 <__aeabi_dcmpge>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <main+0x266>
 80013b2:	2300      	movs	r3, #0
 80013b4:	461c      	mov	r4, r3
 80013b6:	b2e3      	uxtb	r3, r4
 80013b8:	f083 0301 	eor.w	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d015      	beq.n	80013ee <main+0x29e>
        printf("DOWN current angle: %f, setpoint: %f, sw: %f\r\n", current_angle, Wrist_Roll.setpoint, current_angle_sw);
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <main+0x2e0>)
 80013c4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <main+0x2c0>)
 80013ca:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 80013ce:	4919      	ldr	r1, [pc, #100]	; (8001434 <main+0x2e4>)
 80013d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013d8:	e9cd 2300 	strd	r2, r3, [sp]
 80013dc:	4622      	mov	r2, r4
 80013de:	462b      	mov	r3, r5
 80013e0:	4819      	ldr	r0, [pc, #100]	; (8001448 <main+0x2f8>)
 80013e2:	f7ff fe87 	bl	80010f4 <printf>
        Wrist_Roll.tick();
 80013e6:	480a      	ldr	r0, [pc, #40]	; (8001410 <main+0x2c0>)
 80013e8:	f000 ff98 	bl	800231c <_ZN13RoverArmMotor4tickEv>
      current_angle = Wrist_Roll.get_current_angle();
 80013ec:	e7b8      	b.n	8001360 <main+0x210>
      }
      else {
        break;
 80013ee:	bf00      	nop
    Wrist_Roll.newSetpoint(Wrist_Roll.highestAngle);
 80013f0:	e75a      	b.n	80012a8 <main+0x158>
 80013f2:	bf00      	nop
 80013f4:	f3af 8000 	nop.w
 80013f8:	00000000 	.word	0x00000000
 80013fc:	405e0000 	.word	0x405e0000
 8001400:	00000000 	.word	0x00000000
 8001404:	40000000 	.word	0x40000000
 8001408:	2000051c 	.word	0x2000051c
 800140c:	20000568 	.word	0x20000568
 8001410:	20000280 	.word	0x20000280
 8001414:	20000000 	.word	0x20000000
 8001418:	20000008 	.word	0x20000008
 800141c:	20000010 	.word	0x20000010
 8001420:	20000018 	.word	0x20000018
 8001424:	20000020 	.word	0x20000020
 8001428:	20000028 	.word	0x20000028
 800142c:	20000248 	.word	0x20000248
 8001430:	20000230 	.word	0x20000230
 8001434:	20000238 	.word	0x20000238
 8001438:	20000240 	.word	0x20000240
 800143c:	0800a290 	.word	0x0800a290
 8001440:	3ff00000 	.word	0x3ff00000
 8001444:	0800a2d0 	.word	0x0800a2d0
 8001448:	0800a300 	.word	0x0800a300

0800144c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b096      	sub	sp, #88	; 0x58
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	2244      	movs	r2, #68	; 0x44
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f005 fd66 	bl	8006f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	463b      	mov	r3, r7
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800146e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001472:	f002 f8e3 	bl	800363c <HAL_PWREx_ControlVoltageScaling>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf14      	ite	ne
 800147c:	2301      	movne	r3, #1
 800147e:	2300      	moveq	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001486:	f000 f86b 	bl	8001560 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800148a:	2302      	movs	r3, #2
 800148c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001494:	2310      	movs	r3, #16
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001498:	2302      	movs	r3, #2
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800149c:	2302      	movs	r3, #2
 800149e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014a4:	230a      	movs	r3, #10
 80014a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014a8:	2307      	movs	r3, #7
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ac:	2302      	movs	r3, #2
 80014ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 f915 	bl	80036e8 <HAL_RCC_OscConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf14      	ite	ne
 80014c4:	2301      	movne	r3, #1
 80014c6:	2300      	moveq	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 80014ce:	f000 f847 	bl	8001560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d2:	230f      	movs	r3, #15
 80014d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d6:	2303      	movs	r3, #3
 80014d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014e6:	463b      	mov	r3, r7
 80014e8:	2104      	movs	r1, #4
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 fd10 	bl	8003f10 <HAL_RCC_ClockConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	bf14      	ite	ne
 80014f6:	2301      	movne	r3, #1
 80014f8:	2300      	moveq	r3, #0
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8001500:	f000 f82e 	bl	8001560 <Error_Handler>
  }
}
 8001504:	bf00      	nop
 8001506:	3758      	adds	r7, #88	; 0x58
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	80fb      	strh	r3, [r7, #6]
  // if(!brakeSet) {
    if(GPIO_Pin == B1_Pin) // INT Source is pin A9
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800151c:	d115      	bne.n	800154a <HAL_GPIO_EXTI_Callback+0x3e>
    {
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);  // set encoder stationary
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_GPIO_EXTI_Callback+0x44>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2200      	movs	r2, #0
 8001524:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_Delay(100);  
 8001526:	2064      	movs	r0, #100	; 0x64
 8001528:	f001 fd9a 	bl	8003060 <HAL_Delay>
      button_counter++;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_GPIO_EXTI_Callback+0x48>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_GPIO_EXTI_Callback+0x48>)
 8001534:	6013      	str	r3, [r2, #0]
      Wrist_Roll.set_zero_angle_sw();
 8001536:	4808      	ldr	r0, [pc, #32]	; (8001558 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001538:	f001 f8ac 	bl	8002694 <_ZN13RoverArmMotor17set_zero_angle_swEv>
      brakeSet = 1;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <HAL_GPIO_EXTI_Callback+0x50>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]
      HAL_Delay(100);
 8001542:	2064      	movs	r0, #100	; 0x64
 8001544:	f001 fd8c 	bl	8003060 <HAL_Delay>
      return;
 8001548:	bf00      	nop
    }
  // }
}
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000568 	.word	0x20000568
 8001554:	200003e8 	.word	0x200003e8
 8001558:	20000280 	.word	0x20000280
 800155c:	20000248 	.word	0x20000248

08001560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001568:	e7fe      	b.n	8001568 <Error_Handler+0x8>
 800156a:	0000      	movs	r0, r0
 800156c:	0000      	movs	r0, r0
	...

08001570 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	b096      	sub	sp, #88	; 0x58
 8001574:	af10      	add	r7, sp, #64	; 0x40
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d13f      	bne.n	8001600 <_Z41__static_initialization_and_destruction_0ii+0x90>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001586:	4293      	cmp	r3, r2
 8001588:	d13a      	bne.n	8001600 <_Z41__static_initialization_and_destruction_0ii+0x90>
Pin CYTRON_DIR_1(CYTRON_DIR_1_GPIO_Port, CYTRON_DIR_1_Pin);
 800158a:	2220      	movs	r2, #32
 800158c:	4922      	ldr	r1, [pc, #136]	; (8001618 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800158e:	4823      	ldr	r0, [pc, #140]	; (800161c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001590:	f7ff fd5c 	bl	800104c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin, &htim2, TIM_CHANNEL_2);
 8001594:	2304      	movs	r3, #4
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800159a:	2208      	movs	r2, #8
 800159c:	491e      	ldr	r1, [pc, #120]	; (8001618 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800159e:	4821      	ldr	r0, [pc, #132]	; (8001624 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80015a0:	f7ff fd71 	bl	8001086 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>
Pin AMT22_1(GPIOC, GPIO_PIN_7);
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	4920      	ldr	r1, [pc, #128]	; (8001628 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80015a8:	4820      	ldr	r0, [pc, #128]	; (800162c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80015aa:	f7ff fd4f 	bl	800104c <_ZN3PinC1EP12GPIO_TypeDeft>
RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fd30 	bl	8001018 <_ZN3PinC1Ev>
 80015b8:	4c1a      	ldr	r4, [pc, #104]	; (8001624 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80015ba:	ad0b      	add	r5, sp, #44	; 0x2c
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015c6:	2300      	movs	r3, #0
 80015c8:	930a      	str	r3, [sp, #40]	; 0x28
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80015cc:	ad06      	add	r5, sp, #24
 80015ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80015d6:	ad02      	add	r5, sp, #8
 80015d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015de:	466a      	mov	r2, sp
 80015e0:	f104 0308 	add.w	r3, r4, #8
 80015e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80015ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015f0:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8001608 <_Z41__static_initialization_and_destruction_0ii+0x98>
 80015f4:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8001610 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80015f8:	490d      	ldr	r1, [pc, #52]	; (8001630 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80015fa:	480e      	ldr	r0, [pc, #56]	; (8001634 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80015fc:	f000 fd55 	bl	80020aa <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>
}
 8001600:	bf00      	nop
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bdb0      	pop	{r4, r5, r7, pc}
 8001608:	00000000 	.word	0x00000000
 800160c:	40767000 	.word	0x40767000
	...
 8001618:	48000400 	.word	0x48000400
 800161c:	2000024c 	.word	0x2000024c
 8001620:	20000568 	.word	0x20000568
 8001624:	2000025c 	.word	0x2000025c
 8001628:	48000800 	.word	0x48000800
 800162c:	2000026c 	.word	0x2000026c
 8001630:	200003ec 	.word	0x200003ec
 8001634:	20000280 	.word	0x20000280

08001638 <_GLOBAL__sub_I_aggKp>:
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
 800163c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001640:	2001      	movs	r0, #1
 8001642:	f7ff ff95 	bl	8001570 <_Z41__static_initialization_and_destruction_0ii>
 8001646:	bd80      	pop	{r7, pc}

08001648 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <MX_SPI1_Init+0x74>)
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <MX_SPI1_Init+0x78>)
 8001650:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_SPI1_Init+0x74>)
 8001654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001658:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <MX_SPI1_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <MX_SPI1_Init+0x74>)
 8001662:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001666:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_SPI1_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <MX_SPI1_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_SPI1_Init+0x74>)
 8001676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_SPI1_Init+0x74>)
 800167e:	2228      	movs	r2, #40	; 0x28
 8001680:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_SPI1_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_SPI1_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_SPI1_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_SPI1_Init+0x74>)
 8001696:	2207      	movs	r2, #7
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_SPI1_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_SPI1_Init+0x74>)
 80016a2:	2208      	movs	r2, #8
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_SPI1_Init+0x74>)
 80016a8:	f003 f992 	bl	80049d0 <HAL_SPI_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016b2:	f7ff ff55 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200003ec 	.word	0x200003ec
 80016c0:	40013000 	.word	0x40013000

080016c4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <MX_SPI2_Init+0x74>)
 80016ca:	4a1c      	ldr	r2, [pc, #112]	; (800173c <MX_SPI2_Init+0x78>)
 80016cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_SPI2_Init+0x74>)
 80016d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <MX_SPI2_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <MX_SPI2_Init+0x74>)
 80016de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_SPI2_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MX_SPI2_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_SPI2_Init+0x74>)
 80016f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_SPI2_Init+0x74>)
 80016fa:	2220      	movs	r2, #32
 80016fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_SPI2_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_SPI2_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_SPI2_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_SPI2_Init+0x74>)
 8001712:	2207      	movs	r2, #7
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_SPI2_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_SPI2_Init+0x74>)
 800171e:	2208      	movs	r2, #8
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_SPI2_Init+0x74>)
 8001724:	f003 f954 	bl	80049d0 <HAL_SPI_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800172e:	f7ff ff17 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000450 	.word	0x20000450
 800173c:	40003800 	.word	0x40003800

08001740 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <MX_SPI3_Init+0x74>)
 8001746:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <MX_SPI3_Init+0x78>)
 8001748:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_SPI3_Init+0x74>)
 800174c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001750:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <MX_SPI3_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_SPI3_Init+0x74>)
 800175a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800175e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_SPI3_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <MX_SPI3_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_SPI3_Init+0x74>)
 800176e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001772:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_SPI3_Init+0x74>)
 8001776:	2220      	movs	r2, #32
 8001778:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_SPI3_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_SPI3_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_SPI3_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_SPI3_Init+0x74>)
 800178e:	2207      	movs	r2, #7
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_SPI3_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_SPI3_Init+0x74>)
 800179a:	2208      	movs	r2, #8
 800179c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_SPI3_Init+0x74>)
 80017a0:	f003 f916 	bl	80049d0 <HAL_SPI_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80017aa:	f7ff fed9 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200004b4 	.word	0x200004b4
 80017b8:	40003c00 	.word	0x40003c00

080017bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08e      	sub	sp, #56	; 0x38
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a47      	ldr	r2, [pc, #284]	; (80018f8 <HAL_SPI_MspInit+0x13c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d12a      	bne.n	8001834 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_SPI_MspInit+0x140>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	4a46      	ldr	r2, [pc, #280]	; (80018fc <HAL_SPI_MspInit+0x140>)
 80017e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <HAL_SPI_MspInit+0x140>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f2:	623b      	str	r3, [r7, #32]
 80017f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	4b41      	ldr	r3, [pc, #260]	; (80018fc <HAL_SPI_MspInit+0x140>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	4a40      	ldr	r2, [pc, #256]	; (80018fc <HAL_SPI_MspInit+0x140>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001802:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <HAL_SPI_MspInit+0x140>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800180e:	f641 0302 	movw	r3, #6146	; 0x1802
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001820:	2305      	movs	r3, #5
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001828:	4619      	mov	r1, r3
 800182a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182e:	f001 fd4d 	bl	80032cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001832:	e05c      	b.n	80018ee <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a31      	ldr	r2, [pc, #196]	; (8001900 <HAL_SPI_MspInit+0x144>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d129      	bne.n	8001892 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <HAL_SPI_MspInit+0x140>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	4a2e      	ldr	r2, [pc, #184]	; (80018fc <HAL_SPI_MspInit+0x140>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001848:	6593      	str	r3, [r2, #88]	; 0x58
 800184a:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <HAL_SPI_MspInit+0x140>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_SPI_MspInit+0x140>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4a28      	ldr	r2, [pc, #160]	; (80018fc <HAL_SPI_MspInit+0x140>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_SPI_MspInit+0x140>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800186e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001880:	2305      	movs	r3, #5
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	4619      	mov	r1, r3
 800188a:	481e      	ldr	r0, [pc, #120]	; (8001904 <HAL_SPI_MspInit+0x148>)
 800188c:	f001 fd1e 	bl	80032cc <HAL_GPIO_Init>
}
 8001890:	e02d      	b.n	80018ee <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI3)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <HAL_SPI_MspInit+0x14c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d128      	bne.n	80018ee <HAL_SPI_MspInit+0x132>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_SPI_MspInit+0x140>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	4a16      	ldr	r2, [pc, #88]	; (80018fc <HAL_SPI_MspInit+0x140>)
 80018a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a6:	6593      	str	r3, [r2, #88]	; 0x58
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_SPI_MspInit+0x140>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_SPI_MspInit+0x140>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	4a10      	ldr	r2, [pc, #64]	; (80018fc <HAL_SPI_MspInit+0x140>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_SPI_MspInit+0x140>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80018cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018de:	2306      	movs	r3, #6
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	4808      	ldr	r0, [pc, #32]	; (800190c <HAL_SPI_MspInit+0x150>)
 80018ea:	f001 fcef 	bl	80032cc <HAL_GPIO_Init>
}
 80018ee:	bf00      	nop
 80018f0:	3738      	adds	r7, #56	; 0x38
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40013000 	.word	0x40013000
 80018fc:	40021000 	.word	0x40021000
 8001900:	40003800 	.word	0x40003800
 8001904:	48000400 	.word	0x48000400
 8001908:	40003c00 	.word	0x40003c00
 800190c:	48000800 	.word	0x48000800

08001910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_MspInit+0x44>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191a:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <HAL_MspInit+0x44>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6613      	str	r3, [r2, #96]	; 0x60
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_MspInit+0x44>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_MspInit+0x44>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_MspInit+0x44>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	6593      	str	r3, [r2, #88]	; 0x58
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_MspInit+0x44>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800195c:	e7fe      	b.n	800195c <NMI_Handler+0x4>

0800195e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <HardFault_Handler+0x4>

08001964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <MemManage_Handler+0x4>

0800196a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <BusFault_Handler+0x4>

08001970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <UsageFault_Handler+0x4>

08001976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a4:	f001 fb3c 	bl	8003020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019b4:	f001 fe1c 	bl	80035f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return 1;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_kill>:

int _kill(int pid, int sig)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019d6:	f005 fa77 	bl	8006ec8 <__errno>
 80019da:	4603      	mov	r3, r0
 80019dc:	2216      	movs	r2, #22
 80019de:	601a      	str	r2, [r3, #0]
  return -1;
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_exit>:

void _exit (int status)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ffe7 	bl	80019cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80019fe:	e7fe      	b.n	80019fe <_exit+0x12>

08001a00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e00a      	b.n	8001a28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a12:	f3af 8000 	nop.w
 8001a16:	4601      	mov	r1, r0
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	60ba      	str	r2, [r7, #8]
 8001a1e:	b2ca      	uxtb	r2, r1
 8001a20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbf0      	blt.n	8001a12 <_read+0x12>
  }

  return len;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e009      	b.n	8001a60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	60ba      	str	r2, [r7, #8]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dbf1      	blt.n	8001a4c <_write+0x12>
  }
  return len;
 8001a68:	687b      	ldr	r3, [r7, #4]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_close>:

int _close(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a9a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <_isatty>:

int _isatty(int file)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <_sbrk+0x5c>)
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <_sbrk+0x60>)
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <_sbrk+0x64>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <_sbrk+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d207      	bcs.n	8001b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b0c:	f005 f9dc 	bl	8006ec8 <__errno>
 8001b10:	4603      	mov	r3, r0
 8001b12:	220c      	movs	r2, #12
 8001b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	e009      	b.n	8001b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <_sbrk+0x64>)
 8001b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20010000 	.word	0x20010000
 8001b3c:	00000400 	.word	0x00000400
 8001b40:	20000518 	.word	0x20000518
 8001b44:	20000650 	.word	0x20000650

08001b48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <SystemInit+0x20>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <SystemInit+0x20>)
 8001b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b09a      	sub	sp, #104	; 0x68
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
 8001b9c:	615a      	str	r2, [r3, #20]
 8001b9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	222c      	movs	r2, #44	; 0x2c
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f005 f9c0 	bl	8006f2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bac:	4b43      	ldr	r3, [pc, #268]	; (8001cbc <MX_TIM1_Init+0x150>)
 8001bae:	4a44      	ldr	r2, [pc, #272]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001bb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001bb2:	4b42      	ldr	r3, [pc, #264]	; (8001cbc <MX_TIM1_Init+0x150>)
 8001bb4:	224f      	movs	r2, #79	; 0x4f
 8001bb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb8:	4b40      	ldr	r3, [pc, #256]	; (8001cbc <MX_TIM1_Init+0x150>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500-1;
 8001bbe:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <MX_TIM1_Init+0x150>)
 8001bc0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001bc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <MX_TIM1_Init+0x150>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bcc:	4b3b      	ldr	r3, [pc, #236]	; (8001cbc <MX_TIM1_Init+0x150>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <MX_TIM1_Init+0x150>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bd8:	4838      	ldr	r0, [pc, #224]	; (8001cbc <MX_TIM1_Init+0x150>)
 8001bda:	f003 fb13 	bl	8005204 <HAL_TIM_Base_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001be4:	f7ff fcbc 	bl	8001560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bec:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4831      	ldr	r0, [pc, #196]	; (8001cbc <MX_TIM1_Init+0x150>)
 8001bf6:	f003 fdfd 	bl	80057f4 <HAL_TIM_ConfigClockSource>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c00:	f7ff fcae 	bl	8001560 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c04:	482d      	ldr	r0, [pc, #180]	; (8001cbc <MX_TIM1_Init+0x150>)
 8001c06:	f003 fba1 	bl	800534c <HAL_TIM_PWM_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c10:	f7ff fca6 	bl	8001560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c24:	4619      	mov	r1, r3
 8001c26:	4825      	ldr	r0, [pc, #148]	; (8001cbc <MX_TIM1_Init+0x150>)
 8001c28:	f004 fa50 	bl	80060cc <HAL_TIMEx_MasterConfigSynchronization>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001c32:	f7ff fc95 	bl	8001560 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c36:	2360      	movs	r3, #96	; 0x60
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c42:	2300      	movs	r3, #0
 8001c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c56:	2204      	movs	r2, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4818      	ldr	r0, [pc, #96]	; (8001cbc <MX_TIM1_Init+0x150>)
 8001c5c:	f003 fcb6 	bl	80055cc <HAL_TIM_PWM_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001c66:	f7ff fc7b 	bl	8001560 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4807      	ldr	r0, [pc, #28]	; (8001cbc <MX_TIM1_Init+0x150>)
 8001ca0:	f004 fa7a 	bl	8006198 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001caa:	f7ff fc59 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cae:	4803      	ldr	r0, [pc, #12]	; (8001cbc <MX_TIM1_Init+0x150>)
 8001cb0:	f000 f8d4 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 8001cb4:	bf00      	nop
 8001cb6:	3768      	adds	r7, #104	; 0x68
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	2000051c 	.word	0x2000051c
 8001cc0:	40012c00 	.word	0x40012c00

08001cc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08e      	sub	sp, #56	; 0x38
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]
 8001cf2:	615a      	str	r2, [r3, #20]
 8001cf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <MX_TIM2_Init+0xe8>)
 8001cf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <MX_TIM2_Init+0xe8>)
 8001d00:	224f      	movs	r2, #79	; 0x4f
 8001d02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d04:	4b29      	ldr	r3, [pc, #164]	; (8001dac <MX_TIM2_Init+0xe8>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001d0a:	4b28      	ldr	r3, [pc, #160]	; (8001dac <MX_TIM2_Init+0xe8>)
 8001d0c:	2263      	movs	r2, #99	; 0x63
 8001d0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d10:	4b26      	ldr	r3, [pc, #152]	; (8001dac <MX_TIM2_Init+0xe8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d16:	4b25      	ldr	r3, [pc, #148]	; (8001dac <MX_TIM2_Init+0xe8>)
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d1c:	4823      	ldr	r0, [pc, #140]	; (8001dac <MX_TIM2_Init+0xe8>)
 8001d1e:	f003 fa71 	bl	8005204 <HAL_TIM_Base_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d28:	f7ff fc1a 	bl	8001560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d36:	4619      	mov	r1, r3
 8001d38:	481c      	ldr	r0, [pc, #112]	; (8001dac <MX_TIM2_Init+0xe8>)
 8001d3a:	f003 fd5b 	bl	80057f4 <HAL_TIM_ConfigClockSource>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d44:	f7ff fc0c 	bl	8001560 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d48:	4818      	ldr	r0, [pc, #96]	; (8001dac <MX_TIM2_Init+0xe8>)
 8001d4a:	f003 faff 	bl	800534c <HAL_TIM_PWM_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d54:	f7ff fc04 	bl	8001560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4619      	mov	r1, r3
 8001d66:	4811      	ldr	r0, [pc, #68]	; (8001dac <MX_TIM2_Init+0xe8>)
 8001d68:	f004 f9b0 	bl	80060cc <HAL_TIMEx_MasterConfigSynchronization>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d72:	f7ff fbf5 	bl	8001560 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d76:	2360      	movs	r3, #96	; 0x60
 8001d78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d86:	463b      	mov	r3, r7
 8001d88:	2204      	movs	r2, #4
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4807      	ldr	r0, [pc, #28]	; (8001dac <MX_TIM2_Init+0xe8>)
 8001d8e:	f003 fc1d 	bl	80055cc <HAL_TIM_PWM_ConfigChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001d98:	f7ff fbe2 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d9c:	4803      	ldr	r0, [pc, #12]	; (8001dac <MX_TIM2_Init+0xe8>)
 8001d9e:	f000 f85d 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 8001da2:	bf00      	nop
 8001da4:	3738      	adds	r7, #56	; 0x38
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000568 	.word	0x20000568

08001db0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a20      	ldr	r2, [pc, #128]	; (8001e50 <HAL_TIM_Base_MspInit+0xa0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d10c      	bne.n	8001dec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_TIM_Base_MspInit+0xa4>)
 8001dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd6:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <HAL_TIM_Base_MspInit+0xa4>)
 8001dd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ddc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_TIM_Base_MspInit+0xa4>)
 8001de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001dea:	e02d      	b.n	8001e48 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df4:	d128      	bne.n	8001e48 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_TIM_Base_MspInit+0xa4>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	4a16      	ldr	r2, [pc, #88]	; (8001e54 <HAL_TIM_Base_MspInit+0xa4>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6593      	str	r3, [r2, #88]	; 0x58
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_TIM_Base_MspInit+0xa4>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_TIM_Base_MspInit+0xa4>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <HAL_TIM_Base_MspInit+0xa4>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_TIM_Base_MspInit+0xa4>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <HAL_TIM_Base_MspInit+0xa8>)
 8001e44:	f001 fa42 	bl	80032cc <HAL_GPIO_Init>
}
 8001e48:	bf00      	nop
 8001e4a:	3728      	adds	r7, #40	; 0x28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40012c00 	.word	0x40012c00
 8001e54:	40021000 	.word	0x40021000
 8001e58:	48000400 	.word	0x48000400

08001e5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a23      	ldr	r2, [pc, #140]	; (8001f08 <HAL_TIM_MspPostInit+0xac>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d11e      	bne.n	8001ebc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <HAL_TIM_MspPostInit+0xb0>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <HAL_TIM_MspPostInit+0xb0>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <HAL_TIM_MspPostInit+0xb0>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 8001e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb6:	f001 fa09 	bl	80032cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001eba:	e020      	b.n	8001efe <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec4:	d11b      	bne.n	8001efe <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_TIM_MspPostInit+0xb0>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <HAL_TIM_MspPostInit+0xb0>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_TIM_MspPostInit+0xb0>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 8001ede:	2308      	movs	r3, #8
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <HAL_TIM_MspPostInit+0xb4>)
 8001efa:	f001 f9e7 	bl	80032cc <HAL_GPIO_Init>
}
 8001efe:	bf00      	nop
 8001f00:	3728      	adds	r7, #40	; 0x28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40012c00 	.word	0x40012c00
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	48000400 	.word	0x48000400

08001f14 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f18:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f1a:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <MX_USART2_UART_Init+0x5c>)
 8001f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f56:	4805      	ldr	r0, [pc, #20]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f58:	f004 f996 	bl	8006288 <HAL_UART_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f62:	f7ff fafd 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200005b4 	.word	0x200005b4
 8001f70:	40004400 	.word	0x40004400

08001f74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0a2      	sub	sp, #136	; 0x88
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2260      	movs	r2, #96	; 0x60
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f004 ffc9 	bl	8006f2c <memset>
  if(uartHandle->Instance==USART2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a20      	ldr	r2, [pc, #128]	; (8002020 <HAL_UART_MspInit+0xac>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d138      	bne.n	8002016 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 f9d1 	bl	8004358 <HAL_RCCEx_PeriphCLKConfig>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fbc:	f7ff fad0 	bl	8001560 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_UART_MspInit+0xb0>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	4a17      	ldr	r2, [pc, #92]	; (8002024 <HAL_UART_MspInit+0xb0>)
 8001fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fca:	6593      	str	r3, [r2, #88]	; 0x58
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_UART_MspInit+0xb0>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_UART_MspInit+0xb0>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fdc:	4a11      	ldr	r2, [pc, #68]	; (8002024 <HAL_UART_MspInit+0xb0>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_UART_MspInit+0xb0>)
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ff0:	230c      	movs	r3, #12
 8001ff2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002002:	2307      	movs	r3, #7
 8002004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800200c:	4619      	mov	r1, r3
 800200e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002012:	f001 f95b 	bl	80032cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002016:	bf00      	nop
 8002018:	3788      	adds	r7, #136	; 0x88
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40004400 	.word	0x40004400
 8002024:	40021000 	.word	0x40021000

08002028 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002060 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800202c:	f7ff fd8c 	bl	8001b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002030:	480c      	ldr	r0, [pc, #48]	; (8002064 <LoopForever+0x6>)
  ldr r1, =_edata
 8002032:	490d      	ldr	r1, [pc, #52]	; (8002068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002034:	4a0d      	ldr	r2, [pc, #52]	; (800206c <LoopForever+0xe>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002038:	e002      	b.n	8002040 <LoopCopyDataInit>

0800203a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800203c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203e:	3304      	adds	r3, #4

08002040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002044:	d3f9      	bcc.n	800203a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002048:	4c0a      	ldr	r4, [pc, #40]	; (8002074 <LoopForever+0x16>)
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800204c:	e001      	b.n	8002052 <LoopFillZerobss>

0800204e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002050:	3204      	adds	r2, #4

08002052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002054:	d3fb      	bcc.n	800204e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002056:	f004 ff3d 	bl	8006ed4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800205a:	f7ff f879 	bl	8001150 <main>

0800205e <LoopForever>:

LoopForever:
    b LoopForever
 800205e:	e7fe      	b.n	800205e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002060:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002068:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800206c:	0800ae00 	.word	0x0800ae00
  ldr r2, =_sbss
 8002070:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002074:	20000650 	.word	0x20000650

08002078 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC1_IRQHandler>

0800207a <_ZN9movingAvgC1Ei>:
#define MOVINGAVG_H_INCLUDED

class movingAvg
{
    public:
        movingAvg(int interval)
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
            : m_interval{interval}, m_nbrReadings{0}, m_sum{0}, m_next{0} {}
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>:

// TODO: Test this class with the old code, remember to create backup beforehand!
// I'm very suspicious of the way I handled user defined pointers...

// The motor will not move until begin() is called!
RoverArmMotor::RoverArmMotor(SPI_HandleTypeDef* spi_handle, Pin pwm_pin, Pin dir_pin, Pin encoder_pin, int esc_type, double minimum_angle, double maximum_angle, Pin brake_pin)
 80020aa:	b082      	sub	sp, #8
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	6178      	str	r0, [r7, #20]
 80020b4:	6139      	str	r1, [r7, #16]
 80020b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80020ba:	e881 000c 	stmia.w	r1, {r2, r3}
 80020be:	ed87 0b02 	vstr	d0, [r7, #8]
 80020c2:	ed87 1b00 	vstr	d1, [r7]
                :internalPIDInstance(&input, &output, &setpoint, regularKp, regularKi, regularKd, _PID_CD_DIRECT)
                ,internalAveragerInstance(15){
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f503 7198 	add.w	r1, r3, #304	; 0x130
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f503 729c 	add.w	r2, r3, #312	; 0x138
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 80020ec:	2300      	movs	r3, #0
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	eeb0 2a45 	vmov.f32	s4, s10
 80020f4:	eef0 2a65 	vmov.f32	s5, s11
 80020f8:	eeb0 1a46 	vmov.f32	s2, s12
 80020fc:	eef0 1a66 	vmov.f32	s3, s13
 8002100:	eeb0 0a47 	vmov.f32	s0, s14
 8002104:	eef0 0a67 	vmov.f32	s1, s15
 8002108:	4623      	mov	r3, r4
 800210a:	f000 fc3d 	bl	8002988 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3370      	adds	r3, #112	; 0x70
 8002112:	210f      	movs	r1, #15
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ffb0 	bl	800207a <_ZN9movingAvgC1Ei>
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	33b8      	adds	r3, #184	; 0xb8
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe ff7a 	bl	8001018 <_ZN3PinC1Ev>
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	33c8      	adds	r3, #200	; 0xc8
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe ff75 	bl	8001018 <_ZN3PinC1Ev>
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	33d8      	adds	r3, #216	; 0xd8
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe ff70 	bl	8001018 <_ZN3PinC1Ev>
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	33e8      	adds	r3, #232	; 0xe8
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe ff6b 	bl	8001018 <_ZN3PinC1Ev>

    //constructor
    spi = spi_handle;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    pwm = pwm_pin;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8002150:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002154:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002156:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    dir = dir_pin;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8002160:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002166:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    encoder = encoder_pin;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8002170:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    brake = brake_pin;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8002180:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    escType = esc_type;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800218e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    lowestAngle = minimum_angle;
 8002192:	6979      	ldr	r1, [r7, #20]
 8002194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002198:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = maximum_angle;
 800219c:	6979      	ldr	r1, [r7, #20]
 800219e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021a2:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108

    //clean up variables
    input = 0;
 80021a6:	6979      	ldr	r1, [r7, #20]
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
    output = 0;
 80021b4:	6979      	ldr	r1, [r7, #20]
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
    lastAngle = 0;
 80021c2:	6979      	ldr	r1, [r7, #20]
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    sw_angle = 1;  //use software angle
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    zero_angle_sw = 0;  //mn297
 80021d8:	6979      	ldr	r1, [r7, #20]
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
    
}
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	4618      	mov	r0, r3
 80021ea:	371c      	adds	r7, #28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021f2:	b002      	add	sp, #8
 80021f4:	4770      	bx	lr
	...

080021f8 <_ZN13RoverArmMotor5beginEdddddd>:

void RoverArmMotor::begin(double aggP, double aggI, double aggD, double regP, double regI, double regD){
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08e      	sub	sp, #56	; 0x38
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6378      	str	r0, [r7, #52]	; 0x34
 8002200:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8002204:	ed87 1b08 	vstr	d1, [r7, #32]
 8002208:	ed87 2b06 	vstr	d2, [r7, #24]
 800220c:	ed87 3b04 	vstr	d3, [r7, #16]
 8002210:	ed87 4b02 	vstr	d4, [r7, #8]
 8002214:	ed87 5b00 	vstr	d5, [r7]
    /*------------------Initialize pins------------------*/ 
    // Initialize given pins
    // pinMode(encoder, INPUT); // not needed since we use HAL library
    // pinMode(pwm, OUTPUT);

    if(escType == CYTRON){
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800221e:	2b00      	cmp	r3, #0
 8002220:	d107      	bne.n	8002232 <_ZN13RoverArmMotor5beginEdddddd+0x3a>
        // pinMode(dir, OUTPUT); // not needed since we use HAL library

        // Allow negative outputs, the sign will be interpreted as
        // the direction pin
        internalPIDInstance.SetOutputLimits(5, 99); // PWM duty cycle mn297 TOOD: check this
 8002222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002224:	ed9f 1b38 	vldr	d1, [pc, #224]	; 8002308 <_ZN13RoverArmMotor5beginEdddddd+0x110>
 8002228:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8002310 <_ZN13RoverArmMotor5beginEdddddd+0x118>
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fd2a 	bl	8002c86 <_ZN3PID15SetOutputLimitsEdd>
    //     // internalServoInstance.attach(pwm);
    //     internalServoInstance.attach(pwm, 1100, 1900, 1500); // mn297
    // }
    
    /*------------------Initialize moving average------------------*/
    internalAveragerInstance.begin();
 8002232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002234:	3370      	adds	r3, #112	; 0x70
 8002236:	4618      	mov	r0, r3
 8002238:	f000 fb41 	bl	80028be <_ZN9movingAvg5beginEv>

    /*------------------Initialize PID------------------*/
    internalPIDInstance.Init();
 800223c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223e:	4618      	mov	r0, r3
 8002240:	f000 fbc5 	bl	80029ce <_ZN3PID4InitEv>
    internalPIDInstance.SetMode(_PID_MODE_AUTOMATIC);
 8002244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002246:	2101      	movs	r1, #1
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fcfe 	bl	8002c4a <_ZN3PID7SetModeE15PIDMode_TypeDef>
    /*------------------Get setpoint------------------*/
    // Get current location and set it as setpoint. Essential to prevent jerkiness
    // as the microcontroller initializes.
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    //after setup, currentAngle is same as setpoint
    currentAngle = get_current_angle();    // fix setpoint not equal to current angle
 800224e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002250:	f000 fa4a 	bl	80026e8 <_ZN13RoverArmMotor17get_current_angleEv>
 8002254:	eeb0 7a40 	vmov.f32	s14, s0
 8002258:	eef0 7a60 	vmov.f32	s15, s1
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225e:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    setpoint = currentAngle;
 8002262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002264:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8002268:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800226a:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140



    /*------------------Set PID parameters------------------*/
    regularKp = regP;
 800226e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002270:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002274:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    regularKi = regI;
 8002278:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800227a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800227e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    regularKd = regD;
 8002282:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002288:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    aggressiveKp = aggP;
 800228c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800228e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002292:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    aggressiveKi = aggI;
 8002296:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002298:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800229c:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    aggressiveKd = aggD;
 80022a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80022a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022a6:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

    internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 80022aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ae:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80022b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b4:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ba:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 80022be:	eeb0 2a45 	vmov.f32	s4, s10
 80022c2:	eef0 2a65 	vmov.f32	s5, s11
 80022c6:	eeb0 1a46 	vmov.f32	s2, s12
 80022ca:	eef0 1a66 	vmov.f32	s3, s13
 80022ce:	eeb0 0a47 	vmov.f32	s0, s14
 80022d2:	eef0 0a67 	vmov.f32	s1, s15
 80022d6:	4610      	mov	r0, r2
 80022d8:	f000 fd43 	bl	8002d62 <_ZN3PID10SetTuningsEddd>
    // if(brake)  engageBrake(); //use brake if there is one
    if (brake.valid != 0)  engageBrake(); //use brake if there is one
 80022dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022de:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <_ZN13RoverArmMotor5beginEdddddd+0xf4>
 80022e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022e8:	f000 f9e6 	bl	80026b8 <_ZN13RoverArmMotor11engageBrakeEv>

    //initialize the multiplier bool to false and the multiplier to 1. 
    wrist_waist = false; 
 80022ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    //multiplier = 1;
    gearRatio = 1;  //TODO check if this is correct
 80022f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <_ZN13RoverArmMotor5beginEdddddd+0x120>)
 80022fc:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150

}
 8002300:	bf00      	nop
 8002302:	3738      	adds	r7, #56	; 0x38
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	00000000 	.word	0x00000000
 800230c:	4058c000 	.word	0x4058c000
 8002310:	00000000 	.word	0x00000000
 8002314:	40140000 	.word	0x40140000
 8002318:	3ff00000 	.word	0x3ff00000

0800231c <_ZN13RoverArmMotor4tickEv>:

int positive_rezeros = 0;
double real_angle = 0;

// Needs to be called in each loop
void RoverArmMotor::tick(){ // worry about currentAngle and setpoint
 800231c:	b5b0      	push	{r4, r5, r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

    /*------------------Get current angle------------------*/
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    if (sw_angle) {
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <_ZN13RoverArmMotor4tickEv+0x28>
        currentAngle = get_current_angle_sw(); 
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fa20 	bl	8002774 <_ZN13RoverArmMotor20get_current_angle_swEv>
 8002334:	eeb0 7a40 	vmov.f32	s14, s0
 8002338:	eef0 7a60 	vmov.f32	s15, s1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
 8002342:	e009      	b.n	8002358 <_ZN13RoverArmMotor4tickEv+0x3c>
    }   else {
        currentAngle = get_current_angle(); 
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f9cf 	bl	80026e8 <_ZN13RoverArmMotor17get_current_angleEv>
 800234a:	eeb0 7a40 	vmov.f32	s14, s0
 800234e:	eef0 7a60 	vmov.f32	s15, s1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    }

      // Measurement deadband - ignore sub-degree noise
    if(abs(currentAngle - lastAngle) < 1.0){
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 8002364:	f7fd ff90 	bl	8000288 <__aeabi_dsub>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe fbf2 	bl	8000b58 <__aeabi_d2iz>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	bfb8      	it	lt
 800237a:	425b      	neglt	r3, r3
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8d1 	bl	8000524 <__aeabi_i2d>
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	4b80      	ldr	r3, [pc, #512]	; (8002588 <_ZN13RoverArmMotor4tickEv+0x26c>)
 8002388:	f7fe fba8 	bl	8000adc <__aeabi_dcmplt>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <_ZN13RoverArmMotor4tickEv+0x82>
        currentAngle = lastAngle;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
    }
    input = currentAngle; // range [0,359]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
   //------------------Compute PID------------------//
    // Compute distance, retune PID if necessary. Less aggressive tuning params for small errors
    // Find the shortest from the current position to the set point
    double gap; //mn297 could be negative

    if(wrist_waist){
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d052      	beq.n	800245a <_ZN13RoverArmMotor4tickEv+0x13e>
        // if(abs(setpoint-input) < abs((setpoint + 360.0f)-input)) { 
        //     gap = setpoint - input; 
        // } else {
        //     gap = (setpoint + 360.0f) - input; 
        // }
        if(abs(setpoint-input) > abs((setpoint + 360.0f)-input)) { 
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80023c0:	f7fd ff62 	bl	8000288 <__aeabi_dsub>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fbc4 	bl	8000b58 <__aeabi_d2iz>
 80023d0:	4603      	mov	r3, r0
 80023d2:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80023d6:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	4b69      	ldr	r3, [pc, #420]	; (800258c <_ZN13RoverArmMotor4tickEv+0x270>)
 80023e6:	f7fd ff51 	bl	800028c <__adddf3>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80023f8:	f7fd ff46 	bl	8000288 <__aeabi_dsub>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fba8 	bl	8000b58 <__aeabi_d2iz>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	bfb8      	it	lt
 800240e:	425b      	neglt	r3, r3
 8002410:	429c      	cmp	r4, r3
 8002412:	dd15      	ble.n	8002440 <_ZN13RoverArmMotor4tickEv+0x124>
            gap = input - (setpoint + 360.0f); 
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	e9d3 454c 	ldrd	r4, r5, [r3, #304]	; 0x130
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	4b59      	ldr	r3, [pc, #356]	; (800258c <_ZN13RoverArmMotor4tickEv+0x270>)
 8002426:	f7fd ff31 	bl	800028c <__adddf3>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4620      	mov	r0, r4
 8002430:	4629      	mov	r1, r5
 8002432:	f7fd ff29 	bl	8000288 <__aeabi_dsub>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800243e:	e018      	b.n	8002472 <_ZN13RoverArmMotor4tickEv+0x156>
        } else {
            gap = setpoint - input; 
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800244c:	f7fd ff1c 	bl	8000288 <__aeabi_dsub>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002458:	e00b      	b.n	8002472 <_ZN13RoverArmMotor4tickEv+0x156>
        }
        
    }
    else{
        gap = setpoint - input;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8002466:	f7fd ff0f 	bl	8000288 <__aeabi_dsub>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    // if(input <= lowestAngle || input >= highestAngle){
    //     setpoint = gearRatio * (lowestAngle + highestAngle) / 2 ;
    // }

    // Tone down P and I as the motor hones onto position
    if (abs(gap) < 10){
 8002472:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002476:	f7fe fb6f 	bl	8000b58 <__aeabi_d2iz>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	bfb8      	it	lt
 8002480:	425b      	neglt	r3, r3
 8002482:	2b09      	cmp	r3, #9
 8002484:	dc19      	bgt.n	80024ba <_ZN13RoverArmMotor4tickEv+0x19e>
        internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 800249a:	eeb0 2a45 	vmov.f32	s4, s10
 800249e:	eef0 2a65 	vmov.f32	s5, s11
 80024a2:	eeb0 1a46 	vmov.f32	s2, s12
 80024a6:	eef0 1a66 	vmov.f32	s3, s13
 80024aa:	eeb0 0a47 	vmov.f32	s0, s14
 80024ae:	eef0 0a67 	vmov.f32	s1, s15
 80024b2:	4610      	mov	r0, r2
 80024b4:	f000 fc55 	bl	8002d62 <_ZN3PID10SetTuningsEddd>
 80024b8:	e018      	b.n	80024ec <_ZN13RoverArmMotor4tickEv+0x1d0>
    }else{
        internalPIDInstance.SetTunings(aggressiveKp, aggressiveKi, aggressiveKd);
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	ed93 5b26 	vldr	d5, [r3, #152]	; 0x98
 80024ce:	eeb0 2a45 	vmov.f32	s4, s10
 80024d2:	eef0 2a65 	vmov.f32	s5, s11
 80024d6:	eeb0 1a46 	vmov.f32	s2, s12
 80024da:	eef0 1a66 	vmov.f32	s3, s13
 80024de:	eeb0 0a47 	vmov.f32	s0, s14
 80024e2:	eef0 0a67 	vmov.f32	s1, s15
 80024e6:	4610      	mov	r0, r2
 80024e8:	f000 fc3b 	bl	8002d62 <_ZN3PID10SetTuningsEddd>
    }
    internalPIDInstance.Compute(); // return value stored in output
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 faa7 	bl	8002a42 <_ZN3PID7ComputeEv>
    // Make sure we aren't snapping our tendons - move back a little bit if we are
    // if(currentAngle >= (highestAngle - 2) && currentAngle <= (lowestAngle + 2)) output = 0.0;


    //------------------Write to motor------------------//
    if(escType == CYTRON){
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d139      	bne.n	8002572 <_ZN13RoverArmMotor4tickEv+0x256>

        // Interpret sign of the error signal as the direction pin value
        // (gap > 0) ? digitalWrite(dir, HIGH) : digitalWrite(dir, LOW); // invert if needed mn297
        if (gap > 0) {
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800250a:	f7fe fb05 	bl	8000b18 <__aeabi_dcmpgt>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <_ZN13RoverArmMotor4tickEv+0x20e>
            HAL_GPIO_WritePin(dir.port, dir.pin, GPIO_PIN_SET); //mn297
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002520:	2201      	movs	r2, #1
 8002522:	4619      	mov	r1, r3
 8002524:	f001 f84c 	bl	80035c0 <HAL_GPIO_WritePin>
 8002528:	e009      	b.n	800253e <_ZN13RoverArmMotor4tickEv+0x222>
        }
        else {
            HAL_GPIO_WritePin(dir.port, dir.pin, GPIO_PIN_RESET); //mn297
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002536:	2200      	movs	r2, #0
 8002538:	4619      	mov	r1, r3
 800253a:	f001 f841 	bl	80035c0 <HAL_GPIO_WritePin>
        }
        // Write to PWM pin
        //TODO port to HAL
        // analogWrite(pwm, abs(output)); //mn297 function execute quickly and jumps to next tick()
        double test_output = abs(output);     //smoothing
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f7fe fb06 	bl	8000b58 <__aeabi_d2iz>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	bfb8      	it	lt
 8002552:	425b      	neglt	r3, r3
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd ffe5 	bl	8000524 <__aeabi_i2d>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (int) test_output);
 8002562:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002566:	f7fe faf7 	bl	8000b58 <__aeabi_d2iz>
 800256a:	4602      	mov	r2, r0
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <_ZN13RoverArmMotor4tickEv+0x274>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
    //     internalServoInstance.writeMicroseconds(output);
    // }


    //------------------Update angle------------------//
    lastAngle = currentAngle;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bdb0      	pop	{r4, r5, r7, pc}
 8002586:	bf00      	nop
 8002588:	3ff00000 	.word	0x3ff00000
 800258c:	40768000 	.word	0x40768000
 8002590:	20000568 	.word	0x20000568

08002594 <_ZN13RoverArmMotor11getSetpointEv>:
    if(getRatio() == ratio) return true; 
    return false; 
}

// For display purposes
double RoverArmMotor::getSetpoint(){
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
    return setpoint / gearRatio;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80025a8:	f7fe f950 	bl	800084c <__aeabi_ddiv>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80025b4:	eeb0 0a47 	vmov.f32	s0, s14
 80025b8:	eef0 0a67 	vmov.f32	s1, s15
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <_ZN13RoverArmMotor11newSetpointEd>:

bool RoverArmMotor::newSetpoint(double angl){
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	ed87 0b00 	vstr	d0, [r7]
    double setpoint_test = angl * gearRatio;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80025d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025d8:	f7fe f80e 	bl	80005f8 <__aeabi_dmul>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if(setpoint_test >= lowestAngle && setpoint_test <= highestAngle){
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 80025ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025ee:	f7fe fa89 	bl	8000b04 <__aeabi_dcmpge>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d010      	beq.n	800261a <_ZN13RoverArmMotor11newSetpointEd+0x58>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 80025fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002602:	f7fe fa75 	bl	8000af0 <__aeabi_dcmple>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <_ZN13RoverArmMotor11newSetpointEd+0x58>
        setpoint = setpoint_test;
 800260c:	68f9      	ldr	r1, [r7, #12]
 800260e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002612:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
        return true;
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <_ZN13RoverArmMotor11newSetpointEd+0x5a>
    }else{
        return false;
 800261a:	2300      	movs	r3, #0
    }
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <_ZN13RoverArmMotor14setAngleLimitsEdd>:

// void RoverArmMotor::setGearRatio(double ratio){
//     gearRatio = ratio;
// }

void RoverArmMotor::setAngleLimits(double lowest, double highest){
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6178      	str	r0, [r7, #20]
 800262c:	ed87 0b02 	vstr	d0, [r7, #8]
 8002630:	ed87 1b00 	vstr	d1, [r7]
    lowestAngle = lowest * gearRatio;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 800263a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800263e:	f7fd ffdb 	bl	80005f8 <__aeabi_dmul>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	6979      	ldr	r1, [r7, #20]
 8002648:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = highest * gearRatio;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 8002652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002656:	f7fd ffcf 	bl	80005f8 <__aeabi_dmul>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	6979      	ldr	r1, [r7, #20]
 8002660:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
}
 8002664:	bf00      	nop
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_ZN13RoverArmMotor13reset_encoderEv>:

void RoverArmMotor::set_zero_angle(){
    setZeroSPI(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
}
void RoverArmMotor::reset_encoder(){
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
    resetAMT22(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 8002686:	2300      	movs	r3, #0
 8002688:	f004 fbb7 	bl	8006dfa <resetAMT22>
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <_ZN13RoverArmMotor17set_zero_angle_swEv>:
void RoverArmMotor::set_zero_angle_sw(){
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    zero_angle_sw = this->get_current_angle();
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f823 	bl	80026e8 <_ZN13RoverArmMotor17get_current_angleEv>
 80026a2:	eeb0 7a40 	vmov.f32	s14, s0
 80026a6:	eef0 7a60 	vmov.f32	s15, s1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160
}  //mn297 software zero angle
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_ZN13RoverArmMotor11engageBrakeEv>:
    //   digitalWrite(brake, LOW);  
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_RESET); //mn297
    }
}

void RoverArmMotor::engageBrake(){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
    if(brake.valid != 0){
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <_ZN13RoverArmMotor11engageBrakeEv+0x26>
    //    digitalWrite(brake, HIGH); 
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_SET); //mn297
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80026d6:	2201      	movs	r2, #1
 80026d8:	4619      	mov	r1, r3
 80026da:	f000 ff71 	bl	80035c0 <HAL_GPIO_WritePin>
    }
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <_ZN13RoverArmMotor17get_current_angleEv>:
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
    adcResult = internalAveragerInstance.reading(encoderData);  // implicit cast to int
    currentAngle = mapFloat((float) adcResult, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
    return currentAngle / gearRatio;
}
double RoverArmMotor::get_current_angle(){    //mn297
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 8002702:	2300      	movs	r3, #0
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	230c      	movs	r3, #12
 8002708:	f004 fae7 	bl	8006cda <getPositionSPI>
 800270c:	4603      	mov	r3, r0
 800270e:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 8002710:	89fb      	ldrh	r3, [r7, #14]
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271a:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8002768 <_ZN13RoverArmMotor17get_current_angleEv+0x80>
 800271e:	eddf 1a13 	vldr	s3, [pc, #76]	; 800276c <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 8002722:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8002770 <_ZN13RoverArmMotor17get_current_angleEv+0x88>
 8002726:	eddf 0a11 	vldr	s1, [pc, #68]	; 800276c <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 800272a:	eeb0 0a67 	vmov.f32	s0, s15
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f88a 	bl	8002848 <_ZN13RoverArmMotor8mapFloatEfffff>
 8002734:	eeb0 7a40 	vmov.f32	s14, s0
 8002738:	eef0 7a60 	vmov.f32	s15, s1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    return currentAngle / gearRatio;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800274e:	f7fe f87d 	bl	800084c <__aeabi_ddiv>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	ec43 2b17 	vmov	d7, r2, r3
}
 800275a:	eeb0 0a47 	vmov.f32	s0, s14
 800275e:	eef0 0a67 	vmov.f32	s1, s15
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	43b38000 	.word	0x43b38000
 800276c:	00000000 	.word	0x00000000
 8002770:	457ff000 	.word	0x457ff000

08002774 <_ZN13RoverArmMotor20get_current_angle_swEv>:
double RoverArmMotor::get_current_angle_sw(){    //TODO mn297
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af02      	add	r7, sp, #8
 800277a:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 800278e:	2300      	movs	r3, #0
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	230c      	movs	r3, #12
 8002794:	f004 faa1 	bl	8006cda <getPositionSPI>
 8002798:	4603      	mov	r3, r0
 800279a:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 800279c:	89fb      	ldrh	r3, [r7, #14]
 800279e:	ee07 3a90 	vmov	s15, r3
 80027a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a6:	ed9f 2a24 	vldr	s4, [pc, #144]	; 8002838 <_ZN13RoverArmMotor20get_current_angle_swEv+0xc4>
 80027aa:	eddf 1a24 	vldr	s3, [pc, #144]	; 800283c <_ZN13RoverArmMotor20get_current_angle_swEv+0xc8>
 80027ae:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8002840 <_ZN13RoverArmMotor20get_current_angle_swEv+0xcc>
 80027b2:	eddf 0a22 	vldr	s1, [pc, #136]	; 800283c <_ZN13RoverArmMotor20get_current_angle_swEv+0xc8>
 80027b6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f844 	bl	8002848 <_ZN13RoverArmMotor8mapFloatEfffff>
 80027c0:	eeb0 7a40 	vmov.f32	s14, s0
 80027c4:	eef0 7a60 	vmov.f32	s15, s1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    
    double diff = currentAngle - zero_angle_sw;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 80027da:	f7fd fd55 	bl	8000288 <__aeabi_dsub>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if(diff < 0) diff += 360;
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027f2:	f7fe f973 	bl	8000adc <__aeabi_dcmplt>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <_ZN13RoverArmMotor20get_current_angle_swEv+0x9e>
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <_ZN13RoverArmMotor20get_current_angle_swEv+0xd0>)
 8002802:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002806:	f7fd fd41 	bl	800028c <__adddf3>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return diff / gearRatio;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8002818:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800281c:	f7fe f816 	bl	800084c <__aeabi_ddiv>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	ec43 2b17 	vmov	d7, r2, r3
}
 8002828:	eeb0 0a47 	vmov.f32	s0, s14
 800282c:	eef0 0a67 	vmov.f32	s1, s15
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	43b38000 	.word	0x43b38000
 800283c:	00000000 	.word	0x00000000
 8002840:	457ff000 	.word	0x457ff000
 8002844:	40768000 	.word	0x40768000

08002848 <_ZN13RoverArmMotor8mapFloatEfffff>:

double RoverArmMotor::getCurrentOutput(){
    return output;
}

double RoverArmMotor::mapFloat(float x, float in_min, float in_max, float out_min, float out_max){
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6178      	str	r0, [r7, #20]
 8002850:	ed87 0a04 	vstr	s0, [r7, #16]
 8002854:	edc7 0a03 	vstr	s1, [r7, #12]
 8002858:	ed87 1a02 	vstr	s2, [r7, #8]
 800285c:	edc7 1a01 	vstr	s3, [r7, #4]
 8002860:	ed87 2a00 	vstr	s4, [r7]
    double result = ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8002864:	ed97 7a04 	vldr	s14, [r7, #16]
 8002868:	edd7 7a03 	vldr	s15, [r7, #12]
 800286c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002870:	edd7 6a00 	vldr	s13, [r7]
 8002874:	edd7 7a01 	vldr	s15, [r7, #4]
 8002878:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800287c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002880:	ed97 7a02 	vldr	s14, [r7, #8]
 8002884:	edd7 7a03 	vldr	s15, [r7, #12]
 8002888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002890:	edd7 7a01 	vldr	s15, [r7, #4]
 8002894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002898:	ee17 0a90 	vmov	r0, s15
 800289c:	f7fd fe54 	bl	8000548 <__aeabi_f2d>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result; 
 80028a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ac:	ec43 2b17 	vmov	d7, r2, r3
    }
 80028b0:	eeb0 0a47 	vmov.f32	s0, s14
 80028b4:	eef0 0a67 	vmov.f32	s1, s15
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <_ZN9movingAvg5beginEv>:

#include <movingAvg.h>

// initialize - allocate the interval array
void movingAvg::begin()
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
    m_readings = new int[m_interval];
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d201      	bcs.n	80028d6 <_ZN9movingAvg5beginEv+0x18>
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	e001      	b.n	80028da <_ZN9movingAvg5beginEv+0x1c>
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	4618      	mov	r0, r3
 80028dc:	f004 fad0 	bl	8006e80 <_Znaj>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	611a      	str	r2, [r3, #16]
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~ Constructor ~~~~~~~~~~~~~~~~ */
PID::PID() { }

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6278      	str	r0, [r7, #36]	; 0x24
 80028f8:	6239      	str	r1, [r7, #32]
 80028fa:	61fa      	str	r2, [r7, #28]
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8002902:	ed87 1b02 	vstr	d1, [r7, #8]
 8002906:	ed87 2b00 	vstr	d2, [r7]
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_myOutput   = Output;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	645a      	str	r2, [r3, #68]	; 0x44
	_myInput    = Input;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	6a3a      	ldr	r2, [r7, #32]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
	_mySetpoint = Setpoint;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	649a      	str	r2, [r3, #72]	; 0x48
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	2200      	movs	r2, #0
 8002920:	705a      	strb	r2, [r3, #1]
	
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8002922:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002978 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x88>
 8002926:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002980 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x90>
 800292a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800292c:	f000 f9ab 	bl	8002c86 <_ZN3PID15SetOutputLimitsEdd>
	
	_sampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	2264      	movs	r2, #100	; 0x64
 8002934:	609a      	str	r2, [r3, #8]
	
	PID::SetControllerDirection(ControllerDirection);
 8002936:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800293a:	4619      	mov	r1, r3
 800293c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800293e:	f000 fad3 	bl	8002ee8 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>
	PID::SetTunings(Kp, Ki, Kd, POn);
 8002942:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002946:	4619      	mov	r1, r3
 8002948:	ed97 2b00 	vldr	d2, [r7]
 800294c:	ed97 1b02 	vldr	d1, [r7, #8]
 8002950:	ed97 0b04 	vldr	d0, [r7, #16]
 8002954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002956:	f000 fa1f 	bl	8002d98 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
	
	_lastTime = GetTime() - _sampleTime;
 800295a:	f000 fb75 	bl	8003048 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	1ad2      	subs	r2, r2, r3
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	605a      	str	r2, [r3, #4]
	
}
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	4618      	mov	r0, r3
 800296e:	3728      	adds	r7, #40	; 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	f3af 8000 	nop.w
 8002978:	00000000 	.word	0x00000000
 800297c:	406fe000 	.word	0x406fe000
	...

08002988 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>:

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection) : PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection)
 8002988:	b580      	push	{r7, lr}
 800298a:	b08c      	sub	sp, #48	; 0x30
 800298c:	af02      	add	r7, sp, #8
 800298e:	6278      	str	r0, [r7, #36]	; 0x24
 8002990:	6239      	str	r1, [r7, #32]
 8002992:	61fa      	str	r2, [r7, #28]
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	ed87 0b04 	vstr	d0, [r7, #16]
 800299a:	ed87 1b02 	vstr	d1, [r7, #8]
 800299e:	ed87 2b00 	vstr	d2, [r7]
 80029a2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	2301      	movs	r3, #1
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	ed97 2b00 	vldr	d2, [r7]
 80029b0:	ed97 1b02 	vldr	d1, [r7, #8]
 80029b4:	ed97 0b04 	vldr	d0, [r7, #16]
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	6a39      	ldr	r1, [r7, #32]
 80029be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029c0:	f7ff ff96 	bl	80028f0 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>
{ }
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	4618      	mov	r0, r3
 80029c8:	3728      	adds	r7, #40	; 0x28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <_ZN3PID4InitEv>:



/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	_lastInput = *_myInput;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (_outputSum > _outMax)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80029fe:	f7fe f88b 	bl	8000b18 <__aeabi_dcmpgt>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d006      	beq.n	8002a16 <_ZN3PID4InitEv+0x48>
	{
		_outputSum = _outMax;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		_outputSum = _outMin;
	}
	else { }	
	
}
 8002a14:	e011      	b.n	8002a3a <_ZN3PID4InitEv+0x6c>
	else if (_outputSum < _outMin)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a22:	f7fe f85b 	bl	8000adc <__aeabi_dcmplt>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d100      	bne.n	8002a2e <_ZN3PID4InitEv+0x60>
}
 8002a2c:	e005      	b.n	8002a3a <_ZN3PID4InitEv+0x6c>
		_outputSum = _outMin;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <_ZN3PID7ComputeEv>:
	PID::Init(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID::Compute(void)
{
 8002a42:	b5b0      	push	{r4, r5, r7, lr}
 8002a44:	b08c      	sub	sp, #48	; 0x30
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!_inAuto)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	785b      	ldrb	r3, [r3, #1]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <_ZN3PID7ComputeEv+0x14>
	{
		return _FALSE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	e0f5      	b.n	8002c42 <_ZN3PID7ComputeEv+0x200>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002a56:	f000 faf7 	bl	8003048 <HAL_GetTick>
 8002a5a:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - _lastTime);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= _sampleTime)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	6a3a      	ldr	r2, [r7, #32]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	f0c0 80e7 	bcc.w	8002c40 <_ZN3PID7ComputeEv+0x1fe>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *_myInput;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = abs(*_mySetpoint - input);	//mn297 fix
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a8a:	f7fd fbfd 	bl	8000288 <__aeabi_dsub>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	f7fe f85f 	bl	8000b58 <__aeabi_d2iz>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bfb8      	it	lt
 8002aa0:	425b      	neglt	r3, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fd fd3e 	bl	8000524 <__aeabi_i2d>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = abs(input - _lastInput);		//mn297 fix TODO: check if this is correct
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002ab6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002aba:	f7fd fbe5 	bl	8000288 <__aeabi_dsub>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f7fe f847 	bl	8000b58 <__aeabi_d2iz>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bfb8      	it	lt
 8002ad0:	425b      	neglt	r3, r3
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fd26 	bl	8000524 <__aeabi_i2d>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		_outputSum += (_ki * error);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002aec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002af0:	f7fd fd82 	bl	80005f8 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fd fbc6 	bl	800028c <__adddf3>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!_pOnE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d114      	bne.n	8002b3c <_ZN3PID7ComputeEv+0xfa>
		{
			_outputSum -= _kp * dInput;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b22:	f7fd fd69 	bl	80005f8 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	f7fd fbab 	bl	8000288 <__aeabi_dsub>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (_outputSum > _outMax)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002b48:	f7fd ffe6 	bl	8000b18 <__aeabi_dcmpgt>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d006      	beq.n	8002b60 <_ZN3PID7ComputeEv+0x11e>
		{
			_outputSum = _outMax;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002b5e:	e010      	b.n	8002b82 <_ZN3PID7ComputeEv+0x140>
		}
		else if (_outputSum < _outMin)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002b6c:	f7fd ffb6 	bl	8000adc <__aeabi_dcmplt>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <_ZN3PID7ComputeEv+0x140>
		{
			_outputSum = _outMin;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (_pOnE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <_ZN3PID7ComputeEv+0x160>
		{
			output = _kp * error;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002b90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b94:	f7fd fd30 	bl	80005f8 <__aeabi_dmul>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002ba0:	e005      	b.n	8002bae <_ZN3PID7ComputeEv+0x16c>
		}
		else
		{
			output = 0;
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += _outputSum - _kd * dInput;		//TODO check if this is correct mn297
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002bba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bbe:	f7fd fd1b 	bl	80005f8 <__aeabi_dmul>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	4629      	mov	r1, r5
 8002bca:	f7fd fb5d 	bl	8000288 <__aeabi_dsub>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bd6:	f7fd fb59 	bl	800028c <__adddf3>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > _outMax)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002be8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bec:	f7fd ff94 	bl	8000b18 <__aeabi_dcmpgt>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <_ZN3PID7ComputeEv+0x1c0>
		{
			output = _outMax;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002bfc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002c00:	e00e      	b.n	8002c20 <_ZN3PID7ComputeEv+0x1de>
		}
		else if (output < _outMin)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002c08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c0c:	f7fd ff66 	bl	8000adc <__aeabi_dcmplt>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d004      	beq.n	8002c20 <_ZN3PID7ComputeEv+0x1de>
		{
			output = _outMin;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002c1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*_myOutput = output;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c28:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		_lastInput = input;
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c32:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		_lastTime  = now;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3a:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <_ZN3PID7ComputeEv+0x200>
		
	}
	else
	{
		return _FALSE;
 8002c40:	2300      	movs	r3, #0
	}
	
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3730      	adds	r7, #48	; 0x30
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bdb0      	pop	{r4, r5, r7, pc}

08002c4a <_ZN3PID7SetModeE15PIDMode_TypeDef>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID::SetMode(PIDMode_TypeDef Mode)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	bf0c      	ite	eq
 8002c5c:	2301      	moveq	r3, #1
 8002c5e:	2300      	movne	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !_inAuto)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	785b      	ldrb	r3, [r3, #1]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
	{
		Init();
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff feab 	bl	80029ce <_ZN3PID4InitEv>
	}
	
	_inAuto = (PIDMode_TypeDef)newAuto;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	705a      	strb	r2, [r3, #1]
	
}
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_ZN3PID15SetOutputLimitsEdd>:
	return _inAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(double Min, double Max)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6178      	str	r0, [r7, #20]
 8002c8e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002c92:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002c96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c9e:	f7fd ff31 	bl	8000b04 <__aeabi_dcmpge>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d158      	bne.n	8002d5a <_ZN3PID15SetOutputLimitsEdd+0xd4>
	{
		return;
	}
	
	_outMin = Min;
 8002ca8:	6979      	ldr	r1, [r7, #20]
 8002caa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cae:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	_outMax = Max;
 8002cb2:	6979      	ldr	r1, [r7, #20]
 8002cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cb8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	785b      	ldrb	r3, [r3, #1]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d04b      	beq.n	8002d5c <_ZN3PID15SetOutputLimitsEdd+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002cd2:	f7fd ff21 	bl	8000b18 <__aeabi_dcmpgt>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <_ZN3PID15SetOutputLimitsEdd+0x66>
		{
			*_myOutput = _outMax;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002ce6:	e9c1 2300 	strd	r2, r3, [r1]
 8002cea:	e012      	b.n	8002d12 <_ZN3PID15SetOutputLimitsEdd+0x8c>
		}
		else if (*_myOutput < _outMin)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002cfa:	f7fd feef 	bl	8000adc <__aeabi_dcmplt>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d006      	beq.n	8002d12 <_ZN3PID15SetOutputLimitsEdd+0x8c>
		{
			*_myOutput = _outMin;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d0e:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d1e:	f7fd fefb 	bl	8000b18 <__aeabi_dcmpgt>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <_ZN3PID15SetOutputLimitsEdd+0xb0>
		{
			_outputSum = _outMax;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d2e:	6979      	ldr	r1, [r7, #20]
 8002d30:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002d34:	e012      	b.n	8002d5c <_ZN3PID15SetOutputLimitsEdd+0xd6>
		}
		else if (_outputSum < _outMin)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d42:	f7fd fecb 	bl	8000adc <__aeabi_dcmplt>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <_ZN3PID15SetOutputLimitsEdd+0xd6>
		{
			_outputSum = _outMin;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d52:	6979      	ldr	r1, [r7, #20]
 8002d54:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002d58:	e000      	b.n	8002d5c <_ZN3PID15SetOutputLimitsEdd+0xd6>
		return;
 8002d5a:	bf00      	nop
		}
		else { }
		
	}
	
}
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <_ZN3PID10SetTuningsEddd>:

/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID::SetTunings(double Kp, double Ki, double Kd)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b088      	sub	sp, #32
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	61f8      	str	r0, [r7, #28]
 8002d6a:	ed87 0b04 	vstr	d0, [r7, #16]
 8002d6e:	ed87 1b02 	vstr	d1, [r7, #8]
 8002d72:	ed87 2b00 	vstr	d2, [r7]
	PID::SetTunings(Kp, Ki, Kd, _pOn);
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	789b      	ldrb	r3, [r3, #2]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	ed97 2b00 	vldr	d2, [r7]
 8002d80:	ed97 1b02 	vldr	d1, [r7, #8]
 8002d84:	ed97 0b04 	vldr	d0, [r7, #16]
 8002d88:	69f8      	ldr	r0, [r7, #28]
 8002d8a:	f000 f805 	bl	8002d98 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
}
 8002d8e:	bf00      	nop
 8002d90:	3720      	adds	r7, #32
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>:
void PID::SetTunings(double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	61f8      	str	r0, [r7, #28]
 8002da0:	ed87 0b04 	vstr	d0, [r7, #16]
 8002da4:	ed87 1b02 	vstr	d1, [r7, #8]
 8002da8:	ed87 2b00 	vstr	d2, [r7]
 8002dac:	460b      	mov	r3, r1
 8002dae:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dbc:	f7fd fe8e 	bl	8000adc <__aeabi_dcmplt>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 8089 	bne.w	8002eda <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dd4:	f7fd fe82 	bl	8000adc <__aeabi_dcmplt>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d17d      	bne.n	8002eda <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dea:	f7fd fe77 	bl	8000adc <__aeabi_dcmplt>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d172      	bne.n	8002eda <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	_pOn    = POn;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	7efa      	ldrb	r2, [r7, #27]
 8002df8:	709a      	strb	r2, [r3, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002dfa:	7efb      	ldrb	r3, [r7, #27]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	701a      	strb	r2, [r3, #0]

	_dispKp = Kp;
 8002e0c:	69f9      	ldr	r1, [r7, #28]
 8002e0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e12:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_dispKi = Ki;
 8002e16:	69f9      	ldr	r1, [r7, #28]
 8002e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e1c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_dispKd = Kd;
 8002e20:	69f9      	ldr	r1, [r7, #28]
 8002e22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e26:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)_sampleTime) / 1000;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fb68 	bl	8000504 <__aeabi_ui2d>
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x14c>)
 8002e3a:	f7fd fd07 	bl	800084c <__aeabi_ddiv>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	_kp = Kp;
 8002e46:	69f9      	ldr	r1, [r7, #28]
 8002e48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e4c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	_ki = Ki * SampleTimeInSec;
 8002e50:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e58:	f7fd fbce 	bl	80005f8 <__aeabi_dmul>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	69f9      	ldr	r1, [r7, #28]
 8002e62:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	_kd = Kd / SampleTimeInSec;
 8002e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e6e:	f7fd fced 	bl	800084c <__aeabi_ddiv>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	69f9      	ldr	r1, [r7, #28]
 8002e78:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (_controllerDirection == _PID_CD_REVERSE)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	78db      	ldrb	r3, [r3, #3]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d12b      	bne.n	8002edc <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
	{
		
		_kp = (0 - _kp);
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e8a:	f04f 0000 	mov.w	r0, #0
 8002e8e:	f04f 0100 	mov.w	r1, #0
 8002e92:	f7fd f9f9 	bl	8000288 <__aeabi_dsub>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	69f9      	ldr	r1, [r7, #28]
 8002e9c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ea6:	f04f 0000 	mov.w	r0, #0
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	f7fd f9eb 	bl	8000288 <__aeabi_dsub>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	69f9      	ldr	r1, [r7, #28]
 8002eb8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002ec2:	f04f 0000 	mov.w	r0, #0
 8002ec6:	f04f 0100 	mov.w	r1, #0
 8002eca:	f7fd f9dd 	bl	8000288 <__aeabi_dsub>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	69f9      	ldr	r1, [r7, #28]
 8002ed4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002ed8:	e000      	b.n	8002edc <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
		return;
 8002eda:	bf00      	nop
		
	}
	
}
 8002edc:	3728      	adds	r7, #40	; 0x28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	408f4000 	.word	0x408f4000

08002ee8 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	785b      	ldrb	r3, [r3, #1]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d02e      	beq.n	8002f5a <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	78db      	ldrb	r3, [r3, #3]
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d029      	beq.n	8002f5a <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
	{
		
		_kp = (0 - _kp);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002f0c:	f04f 0000 	mov.w	r0, #0
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	f7fd f9b8 	bl	8000288 <__aeabi_dsub>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002f28:	f04f 0000 	mov.w	r0, #0
 8002f2c:	f04f 0100 	mov.w	r1, #0
 8002f30:	f7fd f9aa 	bl	8000288 <__aeabi_dsub>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f44:	f04f 0000 	mov.w	r0, #0
 8002f48:	f04f 0100 	mov.w	r1, #0
 8002f4c:	f7fd f99c 	bl	8000288 <__aeabi_dsub>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	_controllerDirection = Direction;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	70da      	strb	r2, [r3, #3]
	
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <HAL_Init+0x3c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <HAL_Init+0x3c>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f7e:	2003      	movs	r0, #3
 8002f80:	f000 f962 	bl	8003248 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f84:	2000      	movs	r0, #0
 8002f86:	f000 f80f 	bl	8002fa8 <HAL_InitTick>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	71fb      	strb	r3, [r7, #7]
 8002f94:	e001      	b.n	8002f9a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f96:	f7fe fcbb 	bl	8001910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40022000 	.word	0x40022000

08002fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002fb4:	4b17      	ldr	r3, [pc, #92]	; (8003014 <HAL_InitTick+0x6c>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d023      	beq.n	8003004 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002fbc:	4b16      	ldr	r3, [pc, #88]	; (8003018 <HAL_InitTick+0x70>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b14      	ldr	r3, [pc, #80]	; (8003014 <HAL_InitTick+0x6c>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f96d 	bl	80032b2 <HAL_SYSTICK_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10f      	bne.n	8002ffe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b0f      	cmp	r3, #15
 8002fe2:	d809      	bhi.n	8002ff8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	f000 f937 	bl	800325e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	; (800301c <HAL_InitTick+0x74>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e007      	b.n	8003008 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	e004      	b.n	8003008 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
 8003002:	e001      	b.n	8003008 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003008:	7bfb      	ldrb	r3, [r7, #15]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000038 	.word	0x20000038
 8003018:	20000030 	.word	0x20000030
 800301c:	20000034 	.word	0x20000034

08003020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_IncTick+0x20>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_IncTick+0x24>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4413      	add	r3, r2
 8003030:	4a04      	ldr	r2, [pc, #16]	; (8003044 <HAL_IncTick+0x24>)
 8003032:	6013      	str	r3, [r2, #0]
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000038 	.word	0x20000038
 8003044:	20000638 	.word	0x20000638

08003048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return uwTick;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_GetTick+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000638 	.word	0x20000638

08003060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003068:	f7ff ffee 	bl	8003048 <HAL_GetTick>
 800306c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d005      	beq.n	8003086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800307a:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <HAL_Delay+0x44>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003086:	bf00      	nop
 8003088:	f7ff ffde 	bl	8003048 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	429a      	cmp	r2, r3
 8003096:	d8f7      	bhi.n	8003088 <HAL_Delay+0x28>
  {
  }
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000038 	.word	0x20000038

080030a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c4:	4013      	ands	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030da:	4a04      	ldr	r2, [pc, #16]	; (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	60d3      	str	r3, [r2, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <__NVIC_GetPriorityGrouping+0x18>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	0a1b      	lsrs	r3, r3, #8
 80030fa:	f003 0307 	and.w	r3, r3, #7
}
 80030fe:	4618      	mov	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db0b      	blt.n	8003136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	4907      	ldr	r1, [pc, #28]	; (8003144 <__NVIC_EnableIRQ+0x38>)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2001      	movs	r0, #1
 800312e:	fa00 f202 	lsl.w	r2, r0, r2
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e000e100 	.word	0xe000e100

08003148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	6039      	str	r1, [r7, #0]
 8003152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	2b00      	cmp	r3, #0
 800315a:	db0a      	blt.n	8003172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	490c      	ldr	r1, [pc, #48]	; (8003194 <__NVIC_SetPriority+0x4c>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	440b      	add	r3, r1
 800316c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003170:	e00a      	b.n	8003188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4908      	ldr	r1, [pc, #32]	; (8003198 <__NVIC_SetPriority+0x50>)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	3b04      	subs	r3, #4
 8003180:	0112      	lsls	r2, r2, #4
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	440b      	add	r3, r1
 8003186:	761a      	strb	r2, [r3, #24]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000e100 	.word	0xe000e100
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f1c3 0307 	rsb	r3, r3, #7
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	bf28      	it	cs
 80031ba:	2304      	movcs	r3, #4
 80031bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d902      	bls.n	80031cc <NVIC_EncodePriority+0x30>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3b03      	subs	r3, #3
 80031ca:	e000      	b.n	80031ce <NVIC_EncodePriority+0x32>
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	f04f 32ff 	mov.w	r2, #4294967295
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	401a      	ands	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e4:	f04f 31ff 	mov.w	r1, #4294967295
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	43d9      	mvns	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	4313      	orrs	r3, r2
         );
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003214:	d301      	bcc.n	800321a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003216:	2301      	movs	r3, #1
 8003218:	e00f      	b.n	800323a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <SysTick_Config+0x40>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003222:	210f      	movs	r1, #15
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	f7ff ff8e 	bl	8003148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <SysTick_Config+0x40>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003232:	4b04      	ldr	r3, [pc, #16]	; (8003244 <SysTick_Config+0x40>)
 8003234:	2207      	movs	r2, #7
 8003236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	e000e010 	.word	0xe000e010

08003248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff29 	bl	80030a8 <__NVIC_SetPriorityGrouping>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003270:	f7ff ff3e 	bl	80030f0 <__NVIC_GetPriorityGrouping>
 8003274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f7ff ff8e 	bl	800319c <NVIC_EncodePriority>
 8003280:	4602      	mov	r2, r0
 8003282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff5d 	bl	8003148 <__NVIC_SetPriority>
}
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff31 	bl	800310c <__NVIC_EnableIRQ>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ffa2 	bl	8003204 <SysTick_Config>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032da:	e154      	b.n	8003586 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2101      	movs	r1, #1
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	4013      	ands	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8146 	beq.w	8003580 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d005      	beq.n	800330c <HAL_GPIO_Init+0x40>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d130      	bne.n	800336e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	2203      	movs	r2, #3
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4013      	ands	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003342:	2201      	movs	r2, #1
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	f003 0201 	and.w	r2, r3, #1
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b03      	cmp	r3, #3
 8003378:	d017      	beq.n	80033aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	2203      	movs	r2, #3
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4013      	ands	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d123      	bne.n	80033fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	08da      	lsrs	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3208      	adds	r2, #8
 80033be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	220f      	movs	r2, #15
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	08da      	lsrs	r2, r3, #3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3208      	adds	r2, #8
 80033f8:	6939      	ldr	r1, [r7, #16]
 80033fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	2203      	movs	r2, #3
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4013      	ands	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 0203 	and.w	r2, r3, #3
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80a0 	beq.w	8003580 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003440:	4b58      	ldr	r3, [pc, #352]	; (80035a4 <HAL_GPIO_Init+0x2d8>)
 8003442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003444:	4a57      	ldr	r2, [pc, #348]	; (80035a4 <HAL_GPIO_Init+0x2d8>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	6613      	str	r3, [r2, #96]	; 0x60
 800344c:	4b55      	ldr	r3, [pc, #340]	; (80035a4 <HAL_GPIO_Init+0x2d8>)
 800344e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003458:	4a53      	ldr	r2, [pc, #332]	; (80035a8 <HAL_GPIO_Init+0x2dc>)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	089b      	lsrs	r3, r3, #2
 800345e:	3302      	adds	r3, #2
 8003460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003464:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	220f      	movs	r2, #15
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4013      	ands	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003482:	d019      	beq.n	80034b8 <HAL_GPIO_Init+0x1ec>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a49      	ldr	r2, [pc, #292]	; (80035ac <HAL_GPIO_Init+0x2e0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d013      	beq.n	80034b4 <HAL_GPIO_Init+0x1e8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a48      	ldr	r2, [pc, #288]	; (80035b0 <HAL_GPIO_Init+0x2e4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00d      	beq.n	80034b0 <HAL_GPIO_Init+0x1e4>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a47      	ldr	r2, [pc, #284]	; (80035b4 <HAL_GPIO_Init+0x2e8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <HAL_GPIO_Init+0x1e0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a46      	ldr	r2, [pc, #280]	; (80035b8 <HAL_GPIO_Init+0x2ec>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_GPIO_Init+0x1dc>
 80034a4:	2304      	movs	r3, #4
 80034a6:	e008      	b.n	80034ba <HAL_GPIO_Init+0x1ee>
 80034a8:	2307      	movs	r3, #7
 80034aa:	e006      	b.n	80034ba <HAL_GPIO_Init+0x1ee>
 80034ac:	2303      	movs	r3, #3
 80034ae:	e004      	b.n	80034ba <HAL_GPIO_Init+0x1ee>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e002      	b.n	80034ba <HAL_GPIO_Init+0x1ee>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_GPIO_Init+0x1ee>
 80034b8:	2300      	movs	r3, #0
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	f002 0203 	and.w	r2, r2, #3
 80034c0:	0092      	lsls	r2, r2, #2
 80034c2:	4093      	lsls	r3, r2
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034ca:	4937      	ldr	r1, [pc, #220]	; (80035a8 <HAL_GPIO_Init+0x2dc>)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	089b      	lsrs	r3, r3, #2
 80034d0:	3302      	adds	r3, #2
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034d8:	4b38      	ldr	r3, [pc, #224]	; (80035bc <HAL_GPIO_Init+0x2f0>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034fc:	4a2f      	ldr	r2, [pc, #188]	; (80035bc <HAL_GPIO_Init+0x2f0>)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003502:	4b2e      	ldr	r3, [pc, #184]	; (80035bc <HAL_GPIO_Init+0x2f0>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	43db      	mvns	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003526:	4a25      	ldr	r2, [pc, #148]	; (80035bc <HAL_GPIO_Init+0x2f0>)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800352c:	4b23      	ldr	r3, [pc, #140]	; (80035bc <HAL_GPIO_Init+0x2f0>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	43db      	mvns	r3, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003550:	4a1a      	ldr	r2, [pc, #104]	; (80035bc <HAL_GPIO_Init+0x2f0>)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003556:	4b19      	ldr	r3, [pc, #100]	; (80035bc <HAL_GPIO_Init+0x2f0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	43db      	mvns	r3, r3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800357a:	4a10      	ldr	r2, [pc, #64]	; (80035bc <HAL_GPIO_Init+0x2f0>)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	3301      	adds	r3, #1
 8003584:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	f47f aea3 	bne.w	80032dc <HAL_GPIO_Init+0x10>
  }
}
 8003596:	bf00      	nop
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40010000 	.word	0x40010000
 80035ac:	48000400 	.word	0x48000400
 80035b0:	48000800 	.word	0x48000800
 80035b4:	48000c00 	.word	0x48000c00
 80035b8:	48001000 	.word	0x48001000
 80035bc:	40010400 	.word	0x40010400

080035c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
 80035cc:	4613      	mov	r3, r2
 80035ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d0:	787b      	ldrb	r3, [r7, #1]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035dc:	e002      	b.n	80035e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003606:	4a05      	ldr	r2, [pc, #20]	; (800361c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd ff7c 	bl	800150c <HAL_GPIO_EXTI_Callback>
  }
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40010400 	.word	0x40010400

08003620 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <HAL_PWREx_GetVoltageRange+0x18>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800362c:	4618      	mov	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40007000 	.word	0x40007000

0800363c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364a:	d130      	bne.n	80036ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800364c:	4b23      	ldr	r3, [pc, #140]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003658:	d038      	beq.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800365a:	4b20      	ldr	r3, [pc, #128]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003662:	4a1e      	ldr	r2, [pc, #120]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003664:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003668:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800366a:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2232      	movs	r2, #50	; 0x32
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	0c9b      	lsrs	r3, r3, #18
 800367c:	3301      	adds	r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003680:	e002      	b.n	8003688 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3b01      	subs	r3, #1
 8003686:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003688:	4b14      	ldr	r3, [pc, #80]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003694:	d102      	bne.n	800369c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f2      	bne.n	8003682 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a8:	d110      	bne.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e00f      	b.n	80036ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	d007      	beq.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036c4:	4a05      	ldr	r2, [pc, #20]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40007000 	.word	0x40007000
 80036e0:	20000030 	.word	0x20000030
 80036e4:	431bde83 	.word	0x431bde83

080036e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f000 bc02 	b.w	8003f00 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036fc:	4b96      	ldr	r3, [pc, #600]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003706:	4b94      	ldr	r3, [pc, #592]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80e4 	beq.w	80038e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d007      	beq.n	8003734 <HAL_RCC_OscConfig+0x4c>
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b0c      	cmp	r3, #12
 8003728:	f040 808b 	bne.w	8003842 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b01      	cmp	r3, #1
 8003730:	f040 8087 	bne.w	8003842 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003734:	4b88      	ldr	r3, [pc, #544]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_OscConfig+0x64>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e3d9      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1a      	ldr	r2, [r3, #32]
 8003750:	4b81      	ldr	r3, [pc, #516]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d004      	beq.n	8003766 <HAL_RCC_OscConfig+0x7e>
 800375c:	4b7e      	ldr	r3, [pc, #504]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003764:	e005      	b.n	8003772 <HAL_RCC_OscConfig+0x8a>
 8003766:	4b7c      	ldr	r3, [pc, #496]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003772:	4293      	cmp	r3, r2
 8003774:	d223      	bcs.n	80037be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fd8c 	bl	8004298 <RCC_SetFlashLatencyFromMSIRange>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e3ba      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800378a:	4b73      	ldr	r3, [pc, #460]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a72      	ldr	r2, [pc, #456]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003790:	f043 0308 	orr.w	r3, r3, #8
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b70      	ldr	r3, [pc, #448]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	496d      	ldr	r1, [pc, #436]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037a8:	4b6b      	ldr	r3, [pc, #428]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	4968      	ldr	r1, [pc, #416]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
 80037bc:	e025      	b.n	800380a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037be:	4b66      	ldr	r3, [pc, #408]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a65      	ldr	r2, [pc, #404]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 80037c4:	f043 0308 	orr.w	r3, r3, #8
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4b63      	ldr	r3, [pc, #396]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	4960      	ldr	r1, [pc, #384]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037dc:	4b5e      	ldr	r3, [pc, #376]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	495b      	ldr	r1, [pc, #364]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fd4c 	bl	8004298 <RCC_SetFlashLatencyFromMSIRange>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e37a      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800380a:	f000 fc81 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 800380e:	4602      	mov	r2, r0
 8003810:	4b51      	ldr	r3, [pc, #324]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	4950      	ldr	r1, [pc, #320]	; (800395c <HAL_RCC_OscConfig+0x274>)
 800381c:	5ccb      	ldrb	r3, [r1, r3]
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	fa22 f303 	lsr.w	r3, r2, r3
 8003826:	4a4e      	ldr	r2, [pc, #312]	; (8003960 <HAL_RCC_OscConfig+0x278>)
 8003828:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800382a:	4b4e      	ldr	r3, [pc, #312]	; (8003964 <HAL_RCC_OscConfig+0x27c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff fbba 	bl	8002fa8 <HAL_InitTick>
 8003834:	4603      	mov	r3, r0
 8003836:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d052      	beq.n	80038e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	e35e      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d032      	beq.n	80038b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800384a:	4b43      	ldr	r3, [pc, #268]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a42      	ldr	r2, [pc, #264]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003856:	f7ff fbf7 	bl	8003048 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800385e:	f7ff fbf3 	bl	8003048 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e347      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003870:	4b39      	ldr	r3, [pc, #228]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800387c:	4b36      	ldr	r3, [pc, #216]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a35      	ldr	r2, [pc, #212]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003882:	f043 0308 	orr.w	r3, r3, #8
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b33      	ldr	r3, [pc, #204]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	4930      	ldr	r1, [pc, #192]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800389a:	4b2f      	ldr	r3, [pc, #188]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	492b      	ldr	r1, [pc, #172]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	604b      	str	r3, [r1, #4]
 80038ae:	e01a      	b.n	80038e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038b0:	4b29      	ldr	r3, [pc, #164]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a28      	ldr	r2, [pc, #160]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038bc:	f7ff fbc4 	bl	8003048 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038c4:	f7ff fbc0 	bl	8003048 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e314      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038d6:	4b20      	ldr	r3, [pc, #128]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x1dc>
 80038e2:	e000      	b.n	80038e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d073      	beq.n	80039da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_OscConfig+0x21c>
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d10e      	bne.n	800391c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d10b      	bne.n	800391c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003904:	4b14      	ldr	r3, [pc, #80]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d063      	beq.n	80039d8 <HAL_RCC_OscConfig+0x2f0>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d15f      	bne.n	80039d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e2f1      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003924:	d106      	bne.n	8003934 <HAL_RCC_OscConfig+0x24c>
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e025      	b.n	8003980 <HAL_RCC_OscConfig+0x298>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800393c:	d114      	bne.n	8003968 <HAL_RCC_OscConfig+0x280>
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a05      	ldr	r2, [pc, #20]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b03      	ldr	r3, [pc, #12]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a02      	ldr	r2, [pc, #8]	; (8003958 <HAL_RCC_OscConfig+0x270>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e013      	b.n	8003980 <HAL_RCC_OscConfig+0x298>
 8003958:	40021000 	.word	0x40021000
 800395c:	0800a330 	.word	0x0800a330
 8003960:	20000030 	.word	0x20000030
 8003964:	20000034 	.word	0x20000034
 8003968:	4ba0      	ldr	r3, [pc, #640]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a9f      	ldr	r2, [pc, #636]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 800396e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b9d      	ldr	r3, [pc, #628]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a9c      	ldr	r2, [pc, #624]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 800397a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7ff fb5e 	bl	8003048 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003990:	f7ff fb5a 	bl	8003048 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e2ae      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a2:	4b92      	ldr	r3, [pc, #584]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x2a8>
 80039ae:	e014      	b.n	80039da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7ff fb4a 	bl	8003048 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7ff fb46 	bl	8003048 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e29a      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ca:	4b88      	ldr	r3, [pc, #544]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x2d0>
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d060      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_OscConfig+0x310>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	d119      	bne.n	8003a26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d116      	bne.n	8003a26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039f8:	4b7c      	ldr	r3, [pc, #496]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_OscConfig+0x328>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e277      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a10:	4b76      	ldr	r3, [pc, #472]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	4973      	ldr	r1, [pc, #460]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a24:	e040      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d023      	beq.n	8003a76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a2e:	4b6f      	ldr	r3, [pc, #444]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6e      	ldr	r2, [pc, #440]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3a:	f7ff fb05 	bl	8003048 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a42:	f7ff fb01 	bl	8003048 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e255      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a54:	4b65      	ldr	r3, [pc, #404]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b62      	ldr	r3, [pc, #392]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	061b      	lsls	r3, r3, #24
 8003a6e:	495f      	ldr	r1, [pc, #380]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
 8003a74:	e018      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a76:	4b5d      	ldr	r3, [pc, #372]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a5c      	ldr	r2, [pc, #368]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7ff fae1 	bl	8003048 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8a:	f7ff fadd 	bl	8003048 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e231      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a9c:	4b53      	ldr	r3, [pc, #332]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f0      	bne.n	8003a8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d03c      	beq.n	8003b2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01c      	beq.n	8003af6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abc:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac2:	4a4a      	ldr	r2, [pc, #296]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7ff fabc 	bl	8003048 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad4:	f7ff fab8 	bl	8003048 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e20c      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ae6:	4b41      	ldr	r3, [pc, #260]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ef      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x3ec>
 8003af4:	e01b      	b.n	8003b2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af6:	4b3d      	ldr	r3, [pc, #244]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003afc:	4a3b      	ldr	r2, [pc, #236]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b06:	f7ff fa9f 	bl	8003048 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b0e:	f7ff fa9b 	bl	8003048 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e1ef      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b20:	4b32      	ldr	r3, [pc, #200]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1ef      	bne.n	8003b0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80a6 	beq.w	8003c88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b40:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10d      	bne.n	8003b68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4c:	4b27      	ldr	r3, [pc, #156]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b50:	4a26      	ldr	r2, [pc, #152]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b56:	6593      	str	r3, [r2, #88]	; 0x58
 8003b58:	4b24      	ldr	r3, [pc, #144]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b64:	2301      	movs	r3, #1
 8003b66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b68:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <HAL_RCC_OscConfig+0x508>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d118      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b74:	4b1e      	ldr	r3, [pc, #120]	; (8003bf0 <HAL_RCC_OscConfig+0x508>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1d      	ldr	r2, [pc, #116]	; (8003bf0 <HAL_RCC_OscConfig+0x508>)
 8003b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b80:	f7ff fa62 	bl	8003048 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b88:	f7ff fa5e 	bl	8003048 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e1b2      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <HAL_RCC_OscConfig+0x508>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d108      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4d8>
 8003bae:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	4a0d      	ldr	r2, [pc, #52]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bbe:	e029      	b.n	8003c14 <HAL_RCC_OscConfig+0x52c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d115      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x50c>
 8003bc8:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	4a07      	ldr	r2, [pc, #28]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bd8:	4b04      	ldr	r3, [pc, #16]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	4a03      	ldr	r2, [pc, #12]	; (8003bec <HAL_RCC_OscConfig+0x504>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003be8:	e014      	b.n	8003c14 <HAL_RCC_OscConfig+0x52c>
 8003bea:	bf00      	nop
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	4b9a      	ldr	r3, [pc, #616]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	4a99      	ldr	r2, [pc, #612]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c04:	4b96      	ldr	r3, [pc, #600]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	4a95      	ldr	r2, [pc, #596]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003c0c:	f023 0304 	bic.w	r3, r3, #4
 8003c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d016      	beq.n	8003c4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1c:	f7ff fa14 	bl	8003048 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c24:	f7ff fa10 	bl	8003048 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e162      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c3a:	4b89      	ldr	r3, [pc, #548]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0ed      	beq.n	8003c24 <HAL_RCC_OscConfig+0x53c>
 8003c48:	e015      	b.n	8003c76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4a:	f7ff f9fd 	bl	8003048 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7ff f9f9 	bl	8003048 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e14b      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c68:	4b7d      	ldr	r3, [pc, #500]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1ed      	bne.n	8003c52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c76:	7ffb      	ldrb	r3, [r7, #31]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7c:	4b78      	ldr	r3, [pc, #480]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	4a77      	ldr	r2, [pc, #476]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d03c      	beq.n	8003d0e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01c      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c9c:	4b70      	ldr	r3, [pc, #448]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ca2:	4a6f      	ldr	r2, [pc, #444]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7ff f9cc 	bl	8003048 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cb4:	f7ff f9c8 	bl	8003048 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e11c      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cc6:	4b66      	ldr	r3, [pc, #408]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0ef      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x5cc>
 8003cd4:	e01b      	b.n	8003d0e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cd6:	4b62      	ldr	r3, [pc, #392]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cdc:	4a60      	ldr	r2, [pc, #384]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce6:	f7ff f9af 	bl	8003048 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cee:	f7ff f9ab 	bl	8003048 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e0ff      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d00:	4b57      	ldr	r3, [pc, #348]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1ef      	bne.n	8003cee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 80f3 	beq.w	8003efe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	f040 80c9 	bne.w	8003eb4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d22:	4b4f      	ldr	r3, [pc, #316]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f003 0203 	and.w	r2, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d12c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	3b01      	subs	r3, #1
 8003d42:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d123      	bne.n	8003d90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d52:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d11b      	bne.n	8003d90 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d113      	bne.n	8003d90 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d72:	085b      	lsrs	r3, r3, #1
 8003d74:	3b01      	subs	r3, #1
 8003d76:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d109      	bne.n	8003d90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	085b      	lsrs	r3, r3, #1
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d06b      	beq.n	8003e68 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d062      	beq.n	8003e5c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d96:	4b32      	ldr	r3, [pc, #200]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e0ac      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003da6:	4b2e      	ldr	r3, [pc, #184]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2d      	ldr	r2, [pc, #180]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003db2:	f7ff f949 	bl	8003048 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dba:	f7ff f945 	bl	8003048 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e099      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dcc:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd8:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	4b21      	ldr	r3, [pc, #132]	; (8003e64 <HAL_RCC_OscConfig+0x77c>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003de8:	3a01      	subs	r2, #1
 8003dea:	0112      	lsls	r2, r2, #4
 8003dec:	4311      	orrs	r1, r2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003df2:	0212      	lsls	r2, r2, #8
 8003df4:	4311      	orrs	r1, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dfa:	0852      	lsrs	r2, r2, #1
 8003dfc:	3a01      	subs	r2, #1
 8003dfe:	0552      	lsls	r2, r2, #21
 8003e00:	4311      	orrs	r1, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e06:	0852      	lsrs	r2, r2, #1
 8003e08:	3a01      	subs	r2, #1
 8003e0a:	0652      	lsls	r2, r2, #25
 8003e0c:	4311      	orrs	r1, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e12:	06d2      	lsls	r2, r2, #27
 8003e14:	430a      	orrs	r2, r1
 8003e16:	4912      	ldr	r1, [pc, #72]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e1c:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a0f      	ldr	r2, [pc, #60]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e28:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4a0c      	ldr	r2, [pc, #48]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e34:	f7ff f908 	bl	8003048 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7ff f904 	bl	8003048 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e058      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4e:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <HAL_RCC_OscConfig+0x778>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e5a:	e050      	b.n	8003efe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e04f      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
 8003e60:	40021000 	.word	0x40021000
 8003e64:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e68:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <HAL_RCC_OscConfig+0x820>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d144      	bne.n	8003efe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e74:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <HAL_RCC_OscConfig+0x820>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a23      	ldr	r2, [pc, #140]	; (8003f08 <HAL_RCC_OscConfig+0x820>)
 8003e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e80:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <HAL_RCC_OscConfig+0x820>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a20      	ldr	r2, [pc, #128]	; (8003f08 <HAL_RCC_OscConfig+0x820>)
 8003e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e8c:	f7ff f8dc 	bl	8003048 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e94:	f7ff f8d8 	bl	8003048 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e02c      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea6:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <HAL_RCC_OscConfig+0x820>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x7ac>
 8003eb2:	e024      	b.n	8003efe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d01f      	beq.n	8003efa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eba:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <HAL_RCC_OscConfig+0x820>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <HAL_RCC_OscConfig+0x820>)
 8003ec0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec6:	f7ff f8bf 	bl	8003048 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ece:	f7ff f8bb 	bl	8003048 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e00f      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee0:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <HAL_RCC_OscConfig+0x820>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1f0      	bne.n	8003ece <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <HAL_RCC_OscConfig+0x820>)
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	4905      	ldr	r1, [pc, #20]	; (8003f08 <HAL_RCC_OscConfig+0x820>)
 8003ef2:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <HAL_RCC_OscConfig+0x824>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60cb      	str	r3, [r1, #12]
 8003ef8:	e001      	b.n	8003efe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3720      	adds	r7, #32
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	feeefffc 	.word	0xfeeefffc

08003f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0e7      	b.n	80040f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f24:	4b75      	ldr	r3, [pc, #468]	; (80040fc <HAL_RCC_ClockConfig+0x1ec>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d910      	bls.n	8003f54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b72      	ldr	r3, [pc, #456]	; (80040fc <HAL_RCC_ClockConfig+0x1ec>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 0207 	bic.w	r2, r3, #7
 8003f3a:	4970      	ldr	r1, [pc, #448]	; (80040fc <HAL_RCC_ClockConfig+0x1ec>)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f42:	4b6e      	ldr	r3, [pc, #440]	; (80040fc <HAL_RCC_ClockConfig+0x1ec>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0cf      	b.n	80040f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d010      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	4b66      	ldr	r3, [pc, #408]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d908      	bls.n	8003f82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f70:	4b63      	ldr	r3, [pc, #396]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4960      	ldr	r1, [pc, #384]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d04c      	beq.n	8004028 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d107      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f96:	4b5a      	ldr	r3, [pc, #360]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d121      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e0a6      	b.n	80040f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d107      	bne.n	8003fbe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fae:	4b54      	ldr	r3, [pc, #336]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d115      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e09a      	b.n	80040f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d107      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fc6:	4b4e      	ldr	r3, [pc, #312]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d109      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e08e      	b.n	80040f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fd6:	4b4a      	ldr	r3, [pc, #296]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e086      	b.n	80040f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fe6:	4b46      	ldr	r3, [pc, #280]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f023 0203 	bic.w	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	4943      	ldr	r1, [pc, #268]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff8:	f7ff f826 	bl	8003048 <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffe:	e00a      	b.n	8004016 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004000:	f7ff f822 	bl	8003048 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	; 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e06e      	b.n	80040f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004016:	4b3a      	ldr	r3, [pc, #232]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 020c 	and.w	r2, r3, #12
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	429a      	cmp	r2, r3
 8004026:	d1eb      	bne.n	8004000 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d010      	beq.n	8004056 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	4b31      	ldr	r3, [pc, #196]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004040:	429a      	cmp	r2, r3
 8004042:	d208      	bcs.n	8004056 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004044:	4b2e      	ldr	r3, [pc, #184]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	492b      	ldr	r1, [pc, #172]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 8004052:	4313      	orrs	r3, r2
 8004054:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004056:	4b29      	ldr	r3, [pc, #164]	; (80040fc <HAL_RCC_ClockConfig+0x1ec>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d210      	bcs.n	8004086 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004064:	4b25      	ldr	r3, [pc, #148]	; (80040fc <HAL_RCC_ClockConfig+0x1ec>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 0207 	bic.w	r2, r3, #7
 800406c:	4923      	ldr	r1, [pc, #140]	; (80040fc <HAL_RCC_ClockConfig+0x1ec>)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	4313      	orrs	r3, r2
 8004072:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004074:	4b21      	ldr	r3, [pc, #132]	; (80040fc <HAL_RCC_ClockConfig+0x1ec>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d001      	beq.n	8004086 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e036      	b.n	80040f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004092:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	4918      	ldr	r1, [pc, #96]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d009      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040b0:	4b13      	ldr	r3, [pc, #76]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4910      	ldr	r1, [pc, #64]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040c4:	f000 f824 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <HAL_RCC_ClockConfig+0x1f0>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	490b      	ldr	r1, [pc, #44]	; (8004104 <HAL_RCC_ClockConfig+0x1f4>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
 80040e0:	4a09      	ldr	r2, [pc, #36]	; (8004108 <HAL_RCC_ClockConfig+0x1f8>)
 80040e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040e4:	4b09      	ldr	r3, [pc, #36]	; (800410c <HAL_RCC_ClockConfig+0x1fc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe ff5d 	bl	8002fa8 <HAL_InitTick>
 80040ee:	4603      	mov	r3, r0
 80040f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80040f2:	7afb      	ldrb	r3, [r7, #11]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40022000 	.word	0x40022000
 8004100:	40021000 	.word	0x40021000
 8004104:	0800a330 	.word	0x0800a330
 8004108:	20000030 	.word	0x20000030
 800410c:	20000034 	.word	0x20000034

08004110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800411e:	4b3e      	ldr	r3, [pc, #248]	; (8004218 <HAL_RCC_GetSysClockFreq+0x108>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
 8004126:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004128:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <HAL_RCC_GetSysClockFreq+0x108>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0x34>
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d121      	bne.n	8004182 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d11e      	bne.n	8004182 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004144:	4b34      	ldr	r3, [pc, #208]	; (8004218 <HAL_RCC_GetSysClockFreq+0x108>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d107      	bne.n	8004160 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004150:	4b31      	ldr	r3, [pc, #196]	; (8004218 <HAL_RCC_GetSysClockFreq+0x108>)
 8004152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	e005      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004160:	4b2d      	ldr	r3, [pc, #180]	; (8004218 <HAL_RCC_GetSysClockFreq+0x108>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	091b      	lsrs	r3, r3, #4
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800416c:	4a2b      	ldr	r2, [pc, #172]	; (800421c <HAL_RCC_GetSysClockFreq+0x10c>)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004174:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10d      	bne.n	8004198 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004180:	e00a      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b04      	cmp	r3, #4
 8004186:	d102      	bne.n	800418e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004188:	4b25      	ldr	r3, [pc, #148]	; (8004220 <HAL_RCC_GetSysClockFreq+0x110>)
 800418a:	61bb      	str	r3, [r7, #24]
 800418c:	e004      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d101      	bne.n	8004198 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004194:	4b23      	ldr	r3, [pc, #140]	; (8004224 <HAL_RCC_GetSysClockFreq+0x114>)
 8004196:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b0c      	cmp	r3, #12
 800419c:	d134      	bne.n	8004208 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800419e:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d003      	beq.n	80041b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d003      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0xac>
 80041b4:	e005      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041b6:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <HAL_RCC_GetSysClockFreq+0x110>)
 80041b8:	617b      	str	r3, [r7, #20]
      break;
 80041ba:	e005      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041bc:	4b19      	ldr	r3, [pc, #100]	; (8004224 <HAL_RCC_GetSysClockFreq+0x114>)
 80041be:	617b      	str	r3, [r7, #20]
      break;
 80041c0:	e002      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	617b      	str	r3, [r7, #20]
      break;
 80041c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041c8:	4b13      	ldr	r3, [pc, #76]	; (8004218 <HAL_RCC_GetSysClockFreq+0x108>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	3301      	adds	r3, #1
 80041d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041d6:	4b10      	ldr	r3, [pc, #64]	; (8004218 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	0a1b      	lsrs	r3, r3, #8
 80041dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	fb03 f202 	mul.w	r2, r3, r2
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	0e5b      	lsrs	r3, r3, #25
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	3301      	adds	r3, #1
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	fbb2 f3f3 	udiv	r3, r2, r3
 8004206:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004208:	69bb      	ldr	r3, [r7, #24]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3724      	adds	r7, #36	; 0x24
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000
 800421c:	0800a348 	.word	0x0800a348
 8004220:	00f42400 	.word	0x00f42400
 8004224:	007a1200 	.word	0x007a1200

08004228 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <HAL_RCC_GetHCLKFreq+0x14>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000030 	.word	0x20000030

08004240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004244:	f7ff fff0 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004248:	4602      	mov	r2, r0
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_RCC_GetPCLK1Freq+0x24>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	0a1b      	lsrs	r3, r3, #8
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	4904      	ldr	r1, [pc, #16]	; (8004268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004256:	5ccb      	ldrb	r3, [r1, r3]
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004260:	4618      	mov	r0, r3
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40021000 	.word	0x40021000
 8004268:	0800a340 	.word	0x0800a340

0800426c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004270:	f7ff ffda 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004274:	4602      	mov	r2, r0
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	0adb      	lsrs	r3, r3, #11
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4904      	ldr	r1, [pc, #16]	; (8004294 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004282:	5ccb      	ldrb	r3, [r1, r3]
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40021000 	.word	0x40021000
 8004294:	0800a340 	.word	0x0800a340

08004298 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042a0:	2300      	movs	r3, #0
 80042a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042a4:	4b2a      	ldr	r3, [pc, #168]	; (8004350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042b0:	f7ff f9b6 	bl	8003620 <HAL_PWREx_GetVoltageRange>
 80042b4:	6178      	str	r0, [r7, #20]
 80042b6:	e014      	b.n	80042e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042b8:	4b25      	ldr	r3, [pc, #148]	; (8004350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042bc:	4a24      	ldr	r2, [pc, #144]	; (8004350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c2:	6593      	str	r3, [r2, #88]	; 0x58
 80042c4:	4b22      	ldr	r3, [pc, #136]	; (8004350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042d0:	f7ff f9a6 	bl	8003620 <HAL_PWREx_GetVoltageRange>
 80042d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042d6:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042da:	4a1d      	ldr	r2, [pc, #116]	; (8004350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e8:	d10b      	bne.n	8004302 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b80      	cmp	r3, #128	; 0x80
 80042ee:	d919      	bls.n	8004324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2ba0      	cmp	r3, #160	; 0xa0
 80042f4:	d902      	bls.n	80042fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042f6:	2302      	movs	r3, #2
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	e013      	b.n	8004324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042fc:	2301      	movs	r3, #1
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	e010      	b.n	8004324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b80      	cmp	r3, #128	; 0x80
 8004306:	d902      	bls.n	800430e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004308:	2303      	movs	r3, #3
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	e00a      	b.n	8004324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b80      	cmp	r3, #128	; 0x80
 8004312:	d102      	bne.n	800431a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004314:	2302      	movs	r3, #2
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	e004      	b.n	8004324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b70      	cmp	r3, #112	; 0x70
 800431e:	d101      	bne.n	8004324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004320:	2301      	movs	r3, #1
 8004322:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f023 0207 	bic.w	r2, r3, #7
 800432c:	4909      	ldr	r1, [pc, #36]	; (8004354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	429a      	cmp	r2, r3
 8004340:	d001      	beq.n	8004346 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40021000 	.word	0x40021000
 8004354:	40022000 	.word	0x40022000

08004358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004360:	2300      	movs	r3, #0
 8004362:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004364:	2300      	movs	r3, #0
 8004366:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004370:	2b00      	cmp	r3, #0
 8004372:	d031      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800437c:	d01a      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800437e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004382:	d814      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d009      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004388:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800438c:	d10f      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800438e:	4b5d      	ldr	r3, [pc, #372]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	4a5c      	ldr	r2, [pc, #368]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004398:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800439a:	e00c      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fa22 	bl	80047ec <RCCEx_PLLSAI1_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043ac:	e003      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	74fb      	strb	r3, [r7, #19]
      break;
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80043b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b6:	7cfb      	ldrb	r3, [r7, #19]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10b      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043bc:	4b51      	ldr	r3, [pc, #324]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	494e      	ldr	r1, [pc, #312]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043d2:	e001      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 809e 	beq.w	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e6:	2300      	movs	r3, #0
 80043e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043ea:	4b46      	ldr	r3, [pc, #280]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80043fa:	2300      	movs	r3, #0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00d      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004400:	4b40      	ldr	r3, [pc, #256]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004404:	4a3f      	ldr	r2, [pc, #252]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440a:	6593      	str	r3, [r2, #88]	; 0x58
 800440c:	4b3d      	ldr	r3, [pc, #244]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004418:	2301      	movs	r3, #1
 800441a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800441c:	4b3a      	ldr	r3, [pc, #232]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a39      	ldr	r2, [pc, #228]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004428:	f7fe fe0e 	bl	8003048 <HAL_GetTick>
 800442c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800442e:	e009      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004430:	f7fe fe0a 	bl	8003048 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d902      	bls.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	74fb      	strb	r3, [r7, #19]
        break;
 8004442:	e005      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004444:	4b30      	ldr	r3, [pc, #192]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0ef      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004450:	7cfb      	ldrb	r3, [r7, #19]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d15a      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004456:	4b2b      	ldr	r3, [pc, #172]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004460:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01e      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	429a      	cmp	r2, r3
 8004470:	d019      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004472:	4b24      	ldr	r3, [pc, #144]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800447e:	4b21      	ldr	r3, [pc, #132]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004484:	4a1f      	ldr	r2, [pc, #124]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800448e:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	4a1b      	ldr	r2, [pc, #108]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800449e:	4a19      	ldr	r2, [pc, #100]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d016      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fe fdca 	bl	8003048 <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b6:	e00b      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fe fdc6 	bl	8003048 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d902      	bls.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	74fb      	strb	r3, [r7, #19]
            break;
 80044ce:	e006      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0ec      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80044de:	7cfb      	ldrb	r3, [r7, #19]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10b      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e4:	4b07      	ldr	r3, [pc, #28]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f2:	4904      	ldr	r1, [pc, #16]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044fa:	e009      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	74bb      	strb	r3, [r7, #18]
 8004500:	e006      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	7cfb      	ldrb	r3, [r7, #19]
 800450e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004510:	7c7b      	ldrb	r3, [r7, #17]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d105      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004516:	4b8d      	ldr	r3, [pc, #564]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451a:	4a8c      	ldr	r2, [pc, #560]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800451c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004520:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800452e:	4b87      	ldr	r3, [pc, #540]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f023 0203 	bic.w	r2, r3, #3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	4983      	ldr	r1, [pc, #524]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004550:	4b7e      	ldr	r3, [pc, #504]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f023 020c 	bic.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	497b      	ldr	r1, [pc, #492]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004572:	4b76      	ldr	r3, [pc, #472]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	4972      	ldr	r1, [pc, #456]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004594:	4b6d      	ldr	r3, [pc, #436]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	496a      	ldr	r1, [pc, #424]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045b6:	4b65      	ldr	r3, [pc, #404]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c4:	4961      	ldr	r1, [pc, #388]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045d8:	4b5c      	ldr	r3, [pc, #368]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	4959      	ldr	r1, [pc, #356]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045fa:	4b54      	ldr	r3, [pc, #336]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	4950      	ldr	r1, [pc, #320]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800461c:	4b4b      	ldr	r3, [pc, #300]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462a:	4948      	ldr	r1, [pc, #288]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800463e:	4b43      	ldr	r3, [pc, #268]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	493f      	ldr	r1, [pc, #252]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d028      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004660:	4b3a      	ldr	r3, [pc, #232]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466e:	4937      	ldr	r1, [pc, #220]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800467e:	d106      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004680:	4b32      	ldr	r3, [pc, #200]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4a31      	ldr	r2, [pc, #196]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800468a:	60d3      	str	r3, [r2, #12]
 800468c:	e011      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004692:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004696:	d10c      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	2101      	movs	r1, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f8a4 	bl	80047ec <RCCEx_PLLSAI1_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046a8:	7cfb      	ldrb	r3, [r7, #19]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80046ae:	7cfb      	ldrb	r3, [r7, #19]
 80046b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d028      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046be:	4b23      	ldr	r3, [pc, #140]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046cc:	491f      	ldr	r1, [pc, #124]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046dc:	d106      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046de:	4b1b      	ldr	r3, [pc, #108]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	4a1a      	ldr	r2, [pc, #104]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046e8:	60d3      	str	r3, [r2, #12]
 80046ea:	e011      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046f4:	d10c      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3304      	adds	r3, #4
 80046fa:	2101      	movs	r1, #1
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 f875 	bl	80047ec <RCCEx_PLLSAI1_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004706:	7cfb      	ldrb	r3, [r7, #19]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d02b      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	4908      	ldr	r1, [pc, #32]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473a:	d109      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a02      	ldr	r2, [pc, #8]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004746:	60d3      	str	r3, [r2, #12]
 8004748:	e014      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004758:	d10c      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3304      	adds	r3, #4
 800475e:	2101      	movs	r1, #1
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f843 	bl	80047ec <RCCEx_PLLSAI1_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800476a:	7cfb      	ldrb	r3, [r7, #19]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01c      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004780:	4b19      	ldr	r3, [pc, #100]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004786:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478e:	4916      	ldr	r1, [pc, #88]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479e:	d10c      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	2102      	movs	r1, #2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f820 	bl	80047ec <RCCEx_PLLSAI1_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047c6:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	4904      	ldr	r1, [pc, #16]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40021000 	.word	0x40021000

080047ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047fa:	4b74      	ldr	r3, [pc, #464]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d018      	beq.n	8004838 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004806:	4b71      	ldr	r3, [pc, #452]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f003 0203 	and.w	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d10d      	bne.n	8004832 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
       ||
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800481e:	4b6b      	ldr	r3, [pc, #428]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	091b      	lsrs	r3, r3, #4
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
       ||
 800482e:	429a      	cmp	r2, r3
 8004830:	d047      	beq.n	80048c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
 8004836:	e044      	b.n	80048c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b03      	cmp	r3, #3
 800483e:	d018      	beq.n	8004872 <RCCEx_PLLSAI1_Config+0x86>
 8004840:	2b03      	cmp	r3, #3
 8004842:	d825      	bhi.n	8004890 <RCCEx_PLLSAI1_Config+0xa4>
 8004844:	2b01      	cmp	r3, #1
 8004846:	d002      	beq.n	800484e <RCCEx_PLLSAI1_Config+0x62>
 8004848:	2b02      	cmp	r3, #2
 800484a:	d009      	beq.n	8004860 <RCCEx_PLLSAI1_Config+0x74>
 800484c:	e020      	b.n	8004890 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800484e:	4b5f      	ldr	r3, [pc, #380]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d11d      	bne.n	8004896 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800485e:	e01a      	b.n	8004896 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004860:	4b5a      	ldr	r3, [pc, #360]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004868:	2b00      	cmp	r3, #0
 800486a:	d116      	bne.n	800489a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004870:	e013      	b.n	800489a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004872:	4b56      	ldr	r3, [pc, #344]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10f      	bne.n	800489e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800487e:	4b53      	ldr	r3, [pc, #332]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800488e:	e006      	b.n	800489e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
      break;
 8004894:	e004      	b.n	80048a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004896:	bf00      	nop
 8004898:	e002      	b.n	80048a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800489a:	bf00      	nop
 800489c:	e000      	b.n	80048a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800489e:	bf00      	nop
    }

    if(status == HAL_OK)
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10d      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048a6:	4b49      	ldr	r3, [pc, #292]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6819      	ldr	r1, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	430b      	orrs	r3, r1
 80048bc:	4943      	ldr	r1, [pc, #268]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d17c      	bne.n	80049c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048c8:	4b40      	ldr	r3, [pc, #256]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a3f      	ldr	r2, [pc, #252]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d4:	f7fe fbb8 	bl	8003048 <HAL_GetTick>
 80048d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048da:	e009      	b.n	80048f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048dc:	f7fe fbb4 	bl	8003048 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d902      	bls.n	80048f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	73fb      	strb	r3, [r7, #15]
        break;
 80048ee:	e005      	b.n	80048fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048f0:	4b36      	ldr	r3, [pc, #216]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1ef      	bne.n	80048dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d15f      	bne.n	80049c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d110      	bne.n	800492a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004908:	4b30      	ldr	r3, [pc, #192]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004910:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6892      	ldr	r2, [r2, #8]
 8004918:	0211      	lsls	r1, r2, #8
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68d2      	ldr	r2, [r2, #12]
 800491e:	06d2      	lsls	r2, r2, #27
 8004920:	430a      	orrs	r2, r1
 8004922:	492a      	ldr	r1, [pc, #168]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004924:	4313      	orrs	r3, r2
 8004926:	610b      	str	r3, [r1, #16]
 8004928:	e027      	b.n	800497a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d112      	bne.n	8004956 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004930:	4b26      	ldr	r3, [pc, #152]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004938:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6892      	ldr	r2, [r2, #8]
 8004940:	0211      	lsls	r1, r2, #8
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6912      	ldr	r2, [r2, #16]
 8004946:	0852      	lsrs	r2, r2, #1
 8004948:	3a01      	subs	r2, #1
 800494a:	0552      	lsls	r2, r2, #21
 800494c:	430a      	orrs	r2, r1
 800494e:	491f      	ldr	r1, [pc, #124]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004950:	4313      	orrs	r3, r2
 8004952:	610b      	str	r3, [r1, #16]
 8004954:	e011      	b.n	800497a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004956:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800495e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6892      	ldr	r2, [r2, #8]
 8004966:	0211      	lsls	r1, r2, #8
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6952      	ldr	r2, [r2, #20]
 800496c:	0852      	lsrs	r2, r2, #1
 800496e:	3a01      	subs	r2, #1
 8004970:	0652      	lsls	r2, r2, #25
 8004972:	430a      	orrs	r2, r1
 8004974:	4915      	ldr	r1, [pc, #84]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004976:	4313      	orrs	r3, r2
 8004978:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800497a:	4b14      	ldr	r3, [pc, #80]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a13      	ldr	r2, [pc, #76]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004980:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004984:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004986:	f7fe fb5f 	bl	8003048 <HAL_GetTick>
 800498a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800498c:	e009      	b.n	80049a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800498e:	f7fe fb5b 	bl	8003048 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d902      	bls.n	80049a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	73fb      	strb	r3, [r7, #15]
          break;
 80049a0:	e005      	b.n	80049ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049a2:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ef      	beq.n	800498e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d106      	bne.n	80049c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	4903      	ldr	r1, [pc, #12]	; (80049cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40021000 	.word	0x40021000

080049d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e095      	b.n	8004b0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d108      	bne.n	80049fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049f2:	d009      	beq.n	8004a08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	61da      	str	r2, [r3, #28]
 80049fa:	e005      	b.n	8004a08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fc feca 	bl	80017bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a48:	d902      	bls.n	8004a50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e002      	b.n	8004a56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a5e:	d007      	beq.n	8004a70 <HAL_SPI_Init+0xa0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a68:	d002      	beq.n	8004a70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab2:	ea42 0103 	orr.w	r1, r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	0c1b      	lsrs	r3, r3, #16
 8004acc:	f003 0204 	and.w	r2, r3, #4
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004aec:	ea42 0103 	orr.w	r1, r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b08a      	sub	sp, #40	; 0x28
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
 8004b22:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b24:	2301      	movs	r3, #1
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_SPI_TransmitReceive+0x26>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e1fb      	b.n	8004f34 <HAL_SPI_TransmitReceive+0x41e>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b44:	f7fe fa80 	bl	8003048 <HAL_GetTick>
 8004b48:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b50:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004b58:	887b      	ldrh	r3, [r7, #2]
 8004b5a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004b5c:	887b      	ldrh	r3, [r7, #2]
 8004b5e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b60:	7efb      	ldrb	r3, [r7, #27]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d00e      	beq.n	8004b84 <HAL_SPI_TransmitReceive+0x6e>
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b6c:	d106      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x66>
 8004b76:	7efb      	ldrb	r3, [r7, #27]
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d003      	beq.n	8004b84 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b82:	e1cd      	b.n	8004f20 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_SPI_TransmitReceive+0x80>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_SPI_TransmitReceive+0x80>
 8004b90:	887b      	ldrh	r3, [r7, #2]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d103      	bne.n	8004b9e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b9c:	e1c0      	b.n	8004f20 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d003      	beq.n	8004bb2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2205      	movs	r2, #5
 8004bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	887a      	ldrh	r2, [r7, #2]
 8004bc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	887a      	ldrh	r2, [r7, #2]
 8004bca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	887a      	ldrh	r2, [r7, #2]
 8004bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	887a      	ldrh	r2, [r7, #2]
 8004bde:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bf4:	d802      	bhi.n	8004bfc <HAL_SPI_TransmitReceive+0xe6>
 8004bf6:	8a3b      	ldrh	r3, [r7, #16]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d908      	bls.n	8004c0e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c0a:	605a      	str	r2, [r3, #4]
 8004c0c:	e007      	b.n	8004c1e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c1c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	d007      	beq.n	8004c3c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c44:	d97c      	bls.n	8004d40 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <HAL_SPI_TransmitReceive+0x13e>
 8004c4e:	8a7b      	ldrh	r3, [r7, #18]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d169      	bne.n	8004d28 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	881a      	ldrh	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	1c9a      	adds	r2, r3, #2
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c78:	e056      	b.n	8004d28 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d11b      	bne.n	8004cc0 <HAL_SPI_TransmitReceive+0x1aa>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d016      	beq.n	8004cc0 <HAL_SPI_TransmitReceive+0x1aa>
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d113      	bne.n	8004cc0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	881a      	ldrh	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	1c9a      	adds	r2, r3, #2
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d11c      	bne.n	8004d08 <HAL_SPI_TransmitReceive+0x1f2>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d016      	beq.n	8004d08 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	b292      	uxth	r2, r2
 8004ce6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	1c9a      	adds	r2, r3, #2
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d04:	2301      	movs	r3, #1
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d08:	f7fe f99e 	bl	8003048 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d807      	bhi.n	8004d28 <HAL_SPI_TransmitReceive+0x212>
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d003      	beq.n	8004d28 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d26:	e0fb      	b.n	8004f20 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1a3      	bne.n	8004c7a <HAL_SPI_TransmitReceive+0x164>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d19d      	bne.n	8004c7a <HAL_SPI_TransmitReceive+0x164>
 8004d3e:	e0df      	b.n	8004f00 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <HAL_SPI_TransmitReceive+0x23a>
 8004d48:	8a7b      	ldrh	r3, [r7, #18]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	f040 80cb 	bne.w	8004ee6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d912      	bls.n	8004d80 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	881a      	ldrh	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6a:	1c9a      	adds	r2, r3, #2
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b02      	subs	r3, #2
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d7e:	e0b2      	b.n	8004ee6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	330c      	adds	r3, #12
 8004d8a:	7812      	ldrb	r2, [r2, #0]
 8004d8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004da6:	e09e      	b.n	8004ee6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d134      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x30a>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d02f      	beq.n	8004e20 <HAL_SPI_TransmitReceive+0x30a>
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d12c      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d912      	bls.n	8004df6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	881a      	ldrh	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	1c9a      	adds	r2, r3, #2
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b02      	subs	r3, #2
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004df4:	e012      	b.n	8004e1c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	7812      	ldrb	r2, [r2, #0]
 8004e02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d148      	bne.n	8004ec0 <HAL_SPI_TransmitReceive+0x3aa>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d042      	beq.n	8004ec0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d923      	bls.n	8004e8e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	b292      	uxth	r2, r2
 8004e52:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	1c9a      	adds	r2, r3, #2
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b02      	subs	r3, #2
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d81f      	bhi.n	8004ebc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	e016      	b.n	8004ebc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f103 020c 	add.w	r2, r3, #12
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	7812      	ldrb	r2, [r2, #0]
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ec0:	f7fe f8c2 	bl	8003048 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d803      	bhi.n	8004ed8 <HAL_SPI_TransmitReceive+0x3c2>
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed6:	d102      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x3c8>
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ee4:	e01c      	b.n	8004f20 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f47f af5b 	bne.w	8004da8 <HAL_SPI_TransmitReceive+0x292>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f47f af54 	bne.w	8004da8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f937 	bl	8005178 <SPI_EndRxTxTransaction>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d006      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	661a      	str	r2, [r3, #96]	; 0x60
 8004f1c:	e000      	b.n	8004f20 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004f1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3728      	adds	r7, #40	; 0x28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f4c:	f7fe f87c 	bl	8003048 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	4413      	add	r3, r2
 8004f5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f5c:	f7fe f874 	bl	8003048 <HAL_GetTick>
 8004f60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f62:	4b39      	ldr	r3, [pc, #228]	; (8005048 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	015b      	lsls	r3, r3, #5
 8004f68:	0d1b      	lsrs	r3, r3, #20
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	fb02 f303 	mul.w	r3, r2, r3
 8004f70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f72:	e054      	b.n	800501e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7a:	d050      	beq.n	800501e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f7c:	f7fe f864 	bl	8003048 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d902      	bls.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d13d      	bne.n	800500e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004faa:	d111      	bne.n	8004fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb4:	d004      	beq.n	8004fc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fbe:	d107      	bne.n	8004fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd8:	d10f      	bne.n	8004ffa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ff8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e017      	b.n	800503e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	3b01      	subs	r3, #1
 800501c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4013      	ands	r3, r2
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	429a      	cmp	r2, r3
 800502c:	bf0c      	ite	eq
 800502e:	2301      	moveq	r3, #1
 8005030:	2300      	movne	r3, #0
 8005032:	b2db      	uxtb	r3, r3
 8005034:	461a      	mov	r2, r3
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	429a      	cmp	r2, r3
 800503a:	d19b      	bne.n	8004f74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3720      	adds	r7, #32
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000030 	.word	0x20000030

0800504c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08a      	sub	sp, #40	; 0x28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800505e:	f7fd fff3 	bl	8003048 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	4413      	add	r3, r2
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800506e:	f7fd ffeb 	bl	8003048 <HAL_GetTick>
 8005072:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800507c:	4b3d      	ldr	r3, [pc, #244]	; (8005174 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	00da      	lsls	r2, r3, #3
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	0d1b      	lsrs	r3, r3, #20
 800508c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508e:	fb02 f303 	mul.w	r3, r2, r3
 8005092:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005094:	e060      	b.n	8005158 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800509c:	d107      	bne.n	80050ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d104      	bne.n	80050ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d050      	beq.n	8005158 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050b6:	f7fd ffc7 	bl	8003048 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d902      	bls.n	80050cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d13d      	bne.n	8005148 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e4:	d111      	bne.n	800510a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ee:	d004      	beq.n	80050fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f8:	d107      	bne.n	800510a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005108:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005112:	d10f      	bne.n	8005134 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005132:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e010      	b.n	800516a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	3b01      	subs	r3, #1
 8005156:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4013      	ands	r3, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	429a      	cmp	r2, r3
 8005166:	d196      	bne.n	8005096 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3728      	adds	r7, #40	; 0x28
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20000030 	.word	0x20000030

08005178 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af02      	add	r7, sp, #8
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2200      	movs	r2, #0
 800518c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7ff ff5b 	bl	800504c <SPI_WaitFifoStateUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a0:	f043 0220 	orr.w	r2, r3, #32
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e027      	b.n	80051fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2200      	movs	r2, #0
 80051b4:	2180      	movs	r1, #128	; 0x80
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff fec0 	bl	8004f3c <SPI_WaitFlagStateUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e014      	b.n	80051fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2200      	movs	r2, #0
 80051da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff ff34 	bl	800504c <SPI_WaitFifoStateUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e000      	b.n	80051fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e049      	b.n	80052aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7fc fdc0 	bl	8001db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3304      	adds	r3, #4
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f000 fba0 	bl	8005988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d001      	beq.n	80052cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e033      	b.n	8005334 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a19      	ldr	r2, [pc, #100]	; (8005340 <HAL_TIM_Base_Start+0x8c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d009      	beq.n	80052f2 <HAL_TIM_Base_Start+0x3e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e6:	d004      	beq.n	80052f2 <HAL_TIM_Base_Start+0x3e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a15      	ldr	r2, [pc, #84]	; (8005344 <HAL_TIM_Base_Start+0x90>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d115      	bne.n	800531e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	4b13      	ldr	r3, [pc, #76]	; (8005348 <HAL_TIM_Base_Start+0x94>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b06      	cmp	r3, #6
 8005302:	d015      	beq.n	8005330 <HAL_TIM_Base_Start+0x7c>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530a:	d011      	beq.n	8005330 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531c:	e008      	b.n	8005330 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0201 	orr.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e000      	b.n	8005332 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005330:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40014000 	.word	0x40014000
 8005348:	00010007 	.word	0x00010007

0800534c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e049      	b.n	80053f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f841 	bl	80053fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	4619      	mov	r1, r3
 800538a:	4610      	mov	r0, r2
 800538c:	f000 fafc 	bl	8005988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
	...

08005410 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d109      	bne.n	8005434 <HAL_TIM_PWM_Start+0x24>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	bf14      	ite	ne
 800542c:	2301      	movne	r3, #1
 800542e:	2300      	moveq	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	e03c      	b.n	80054ae <HAL_TIM_PWM_Start+0x9e>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b04      	cmp	r3, #4
 8005438:	d109      	bne.n	800544e <HAL_TIM_PWM_Start+0x3e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b01      	cmp	r3, #1
 8005444:	bf14      	ite	ne
 8005446:	2301      	movne	r3, #1
 8005448:	2300      	moveq	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	e02f      	b.n	80054ae <HAL_TIM_PWM_Start+0x9e>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b08      	cmp	r3, #8
 8005452:	d109      	bne.n	8005468 <HAL_TIM_PWM_Start+0x58>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	bf14      	ite	ne
 8005460:	2301      	movne	r3, #1
 8005462:	2300      	moveq	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	e022      	b.n	80054ae <HAL_TIM_PWM_Start+0x9e>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b0c      	cmp	r3, #12
 800546c:	d109      	bne.n	8005482 <HAL_TIM_PWM_Start+0x72>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b01      	cmp	r3, #1
 8005478:	bf14      	ite	ne
 800547a:	2301      	movne	r3, #1
 800547c:	2300      	moveq	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	e015      	b.n	80054ae <HAL_TIM_PWM_Start+0x9e>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b10      	cmp	r3, #16
 8005486:	d109      	bne.n	800549c <HAL_TIM_PWM_Start+0x8c>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	bf14      	ite	ne
 8005494:	2301      	movne	r3, #1
 8005496:	2300      	moveq	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	e008      	b.n	80054ae <HAL_TIM_PWM_Start+0x9e>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	bf14      	ite	ne
 80054a8:	2301      	movne	r3, #1
 80054aa:	2300      	moveq	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e07e      	b.n	80055b4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d104      	bne.n	80054c6 <HAL_TIM_PWM_Start+0xb6>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c4:	e023      	b.n	800550e <HAL_TIM_PWM_Start+0xfe>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d104      	bne.n	80054d6 <HAL_TIM_PWM_Start+0xc6>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054d4:	e01b      	b.n	800550e <HAL_TIM_PWM_Start+0xfe>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d104      	bne.n	80054e6 <HAL_TIM_PWM_Start+0xd6>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e4:	e013      	b.n	800550e <HAL_TIM_PWM_Start+0xfe>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b0c      	cmp	r3, #12
 80054ea:	d104      	bne.n	80054f6 <HAL_TIM_PWM_Start+0xe6>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054f4:	e00b      	b.n	800550e <HAL_TIM_PWM_Start+0xfe>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b10      	cmp	r3, #16
 80054fa:	d104      	bne.n	8005506 <HAL_TIM_PWM_Start+0xf6>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005504:	e003      	b.n	800550e <HAL_TIM_PWM_Start+0xfe>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2202      	movs	r2, #2
 800550a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2201      	movs	r2, #1
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fdb2 	bl	8006080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a26      	ldr	r2, [pc, #152]	; (80055bc <HAL_TIM_PWM_Start+0x1ac>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d009      	beq.n	800553a <HAL_TIM_PWM_Start+0x12a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a25      	ldr	r2, [pc, #148]	; (80055c0 <HAL_TIM_PWM_Start+0x1b0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d004      	beq.n	800553a <HAL_TIM_PWM_Start+0x12a>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a23      	ldr	r2, [pc, #140]	; (80055c4 <HAL_TIM_PWM_Start+0x1b4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d101      	bne.n	800553e <HAL_TIM_PWM_Start+0x12e>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <HAL_TIM_PWM_Start+0x130>
 800553e:	2300      	movs	r3, #0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d007      	beq.n	8005554 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005552:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_TIM_PWM_Start+0x1ac>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d009      	beq.n	8005572 <HAL_TIM_PWM_Start+0x162>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005566:	d004      	beq.n	8005572 <HAL_TIM_PWM_Start+0x162>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a14      	ldr	r2, [pc, #80]	; (80055c0 <HAL_TIM_PWM_Start+0x1b0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d115      	bne.n	800559e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <HAL_TIM_PWM_Start+0x1b8>)
 800557a:	4013      	ands	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b06      	cmp	r3, #6
 8005582:	d015      	beq.n	80055b0 <HAL_TIM_PWM_Start+0x1a0>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558a:	d011      	beq.n	80055b0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559c:	e008      	b.n	80055b0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e000      	b.n	80055b2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40012c00 	.word	0x40012c00
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40014400 	.word	0x40014400
 80055c8:	00010007 	.word	0x00010007

080055cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e0ff      	b.n	80057ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b14      	cmp	r3, #20
 80055f6:	f200 80f0 	bhi.w	80057da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055fa:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005655 	.word	0x08005655
 8005604:	080057db 	.word	0x080057db
 8005608:	080057db 	.word	0x080057db
 800560c:	080057db 	.word	0x080057db
 8005610:	08005695 	.word	0x08005695
 8005614:	080057db 	.word	0x080057db
 8005618:	080057db 	.word	0x080057db
 800561c:	080057db 	.word	0x080057db
 8005620:	080056d7 	.word	0x080056d7
 8005624:	080057db 	.word	0x080057db
 8005628:	080057db 	.word	0x080057db
 800562c:	080057db 	.word	0x080057db
 8005630:	08005717 	.word	0x08005717
 8005634:	080057db 	.word	0x080057db
 8005638:	080057db 	.word	0x080057db
 800563c:	080057db 	.word	0x080057db
 8005640:	08005759 	.word	0x08005759
 8005644:	080057db 	.word	0x080057db
 8005648:	080057db 	.word	0x080057db
 800564c:	080057db 	.word	0x080057db
 8005650:	08005799 	.word	0x08005799
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f9f8 	bl	8005a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0208 	orr.w	r2, r2, #8
 800566e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0204 	bic.w	r2, r2, #4
 800567e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6999      	ldr	r1, [r3, #24]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	619a      	str	r2, [r3, #24]
      break;
 8005692:	e0a5      	b.n	80057e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68b9      	ldr	r1, [r7, #8]
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fa54 	bl	8005b48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6999      	ldr	r1, [r3, #24]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	021a      	lsls	r2, r3, #8
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	619a      	str	r2, [r3, #24]
      break;
 80056d4:	e084      	b.n	80057e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 faad 	bl	8005c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0208 	orr.w	r2, r2, #8
 80056f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69da      	ldr	r2, [r3, #28]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0204 	bic.w	r2, r2, #4
 8005700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69d9      	ldr	r1, [r3, #28]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	61da      	str	r2, [r3, #28]
      break;
 8005714:	e064      	b.n	80057e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fb05 	bl	8005d2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69d9      	ldr	r1, [r3, #28]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	021a      	lsls	r2, r3, #8
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	61da      	str	r2, [r3, #28]
      break;
 8005756:	e043      	b.n	80057e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fb42 	bl	8005de8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0208 	orr.w	r2, r2, #8
 8005772:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0204 	bic.w	r2, r2, #4
 8005782:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005796:	e023      	b.n	80057e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fb7a 	bl	8005e98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	021a      	lsls	r2, r3, #8
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057d8:	e002      	b.n	80057e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	75fb      	strb	r3, [r7, #23]
      break;
 80057de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop

080057f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_TIM_ConfigClockSource+0x1c>
 800580c:	2302      	movs	r3, #2
 800580e:	e0b6      	b.n	800597e <HAL_TIM_ConfigClockSource+0x18a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800583a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800584c:	d03e      	beq.n	80058cc <HAL_TIM_ConfigClockSource+0xd8>
 800584e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005852:	f200 8087 	bhi.w	8005964 <HAL_TIM_ConfigClockSource+0x170>
 8005856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585a:	f000 8086 	beq.w	800596a <HAL_TIM_ConfigClockSource+0x176>
 800585e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005862:	d87f      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x170>
 8005864:	2b70      	cmp	r3, #112	; 0x70
 8005866:	d01a      	beq.n	800589e <HAL_TIM_ConfigClockSource+0xaa>
 8005868:	2b70      	cmp	r3, #112	; 0x70
 800586a:	d87b      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x170>
 800586c:	2b60      	cmp	r3, #96	; 0x60
 800586e:	d050      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x11e>
 8005870:	2b60      	cmp	r3, #96	; 0x60
 8005872:	d877      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x170>
 8005874:	2b50      	cmp	r3, #80	; 0x50
 8005876:	d03c      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0xfe>
 8005878:	2b50      	cmp	r3, #80	; 0x50
 800587a:	d873      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x170>
 800587c:	2b40      	cmp	r3, #64	; 0x40
 800587e:	d058      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x13e>
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d86f      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x170>
 8005884:	2b30      	cmp	r3, #48	; 0x30
 8005886:	d064      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15e>
 8005888:	2b30      	cmp	r3, #48	; 0x30
 800588a:	d86b      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x170>
 800588c:	2b20      	cmp	r3, #32
 800588e:	d060      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15e>
 8005890:	2b20      	cmp	r3, #32
 8005892:	d867      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x170>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d05c      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15e>
 8005898:	2b10      	cmp	r3, #16
 800589a:	d05a      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15e>
 800589c:	e062      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6899      	ldr	r1, [r3, #8]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f000 fbc7 	bl	8006040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	609a      	str	r2, [r3, #8]
      break;
 80058ca:	e04f      	b.n	800596c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	6899      	ldr	r1, [r3, #8]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f000 fbb0 	bl	8006040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ee:	609a      	str	r2, [r3, #8]
      break;
 80058f0:	e03c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	461a      	mov	r2, r3
 8005900:	f000 fb24 	bl	8005f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2150      	movs	r1, #80	; 0x50
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fb7d 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 8005910:	e02c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	461a      	mov	r2, r3
 8005920:	f000 fb43 	bl	8005faa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2160      	movs	r1, #96	; 0x60
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fb6d 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 8005930:	e01c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6859      	ldr	r1, [r3, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	461a      	mov	r2, r3
 8005940:	f000 fb04 	bl	8005f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2140      	movs	r1, #64	; 0x40
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fb5d 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 8005950:	e00c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4619      	mov	r1, r3
 800595c:	4610      	mov	r0, r2
 800595e:	f000 fb54 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 8005962:	e003      	b.n	800596c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
      break;
 8005968:	e000      	b.n	800596c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800596a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a2a      	ldr	r2, [pc, #168]	; (8005a44 <TIM_Base_SetConfig+0xbc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_Base_SetConfig+0x20>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a6:	d108      	bne.n	80059ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a21      	ldr	r2, [pc, #132]	; (8005a44 <TIM_Base_SetConfig+0xbc>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00b      	beq.n	80059da <TIM_Base_SetConfig+0x52>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c8:	d007      	beq.n	80059da <TIM_Base_SetConfig+0x52>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <TIM_Base_SetConfig+0xc0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d003      	beq.n	80059da <TIM_Base_SetConfig+0x52>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1d      	ldr	r2, [pc, #116]	; (8005a4c <TIM_Base_SetConfig+0xc4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d108      	bne.n	80059ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a0c      	ldr	r2, [pc, #48]	; (8005a44 <TIM_Base_SetConfig+0xbc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d007      	beq.n	8005a28 <TIM_Base_SetConfig+0xa0>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a0b      	ldr	r2, [pc, #44]	; (8005a48 <TIM_Base_SetConfig+0xc0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_Base_SetConfig+0xa0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a0a      	ldr	r2, [pc, #40]	; (8005a4c <TIM_Base_SetConfig+0xc4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d103      	bne.n	8005a30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	615a      	str	r2, [r3, #20]
}
 8005a36:	bf00      	nop
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40012c00 	.word	0x40012c00
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400

08005a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f023 0201 	bic.w	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f023 0302 	bic.w	r3, r3, #2
 8005a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a24      	ldr	r2, [pc, #144]	; (8005b3c <TIM_OC1_SetConfig+0xec>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d007      	beq.n	8005ac0 <TIM_OC1_SetConfig+0x70>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a23      	ldr	r2, [pc, #140]	; (8005b40 <TIM_OC1_SetConfig+0xf0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d003      	beq.n	8005ac0 <TIM_OC1_SetConfig+0x70>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a22      	ldr	r2, [pc, #136]	; (8005b44 <TIM_OC1_SetConfig+0xf4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d10c      	bne.n	8005ada <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f023 0308 	bic.w	r3, r3, #8
 8005ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f023 0304 	bic.w	r3, r3, #4
 8005ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a17      	ldr	r2, [pc, #92]	; (8005b3c <TIM_OC1_SetConfig+0xec>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d007      	beq.n	8005af2 <TIM_OC1_SetConfig+0xa2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a16      	ldr	r2, [pc, #88]	; (8005b40 <TIM_OC1_SetConfig+0xf0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d003      	beq.n	8005af2 <TIM_OC1_SetConfig+0xa2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a15      	ldr	r2, [pc, #84]	; (8005b44 <TIM_OC1_SetConfig+0xf4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d111      	bne.n	8005b16 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	621a      	str	r2, [r3, #32]
}
 8005b30:	bf00      	nop
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	40012c00 	.word	0x40012c00
 8005b40:	40014000 	.word	0x40014000
 8005b44:	40014400 	.word	0x40014400

08005b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f023 0210 	bic.w	r2, r3, #16
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	021b      	lsls	r3, r3, #8
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f023 0320 	bic.w	r3, r3, #32
 8005b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a22      	ldr	r2, [pc, #136]	; (8005c30 <TIM_OC2_SetConfig+0xe8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d10d      	bne.n	8005bc8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a19      	ldr	r2, [pc, #100]	; (8005c30 <TIM_OC2_SetConfig+0xe8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d007      	beq.n	8005be0 <TIM_OC2_SetConfig+0x98>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a18      	ldr	r2, [pc, #96]	; (8005c34 <TIM_OC2_SetConfig+0xec>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_OC2_SetConfig+0x98>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a17      	ldr	r2, [pc, #92]	; (8005c38 <TIM_OC2_SetConfig+0xf0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d113      	bne.n	8005c08 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005be6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40012c00 	.word	0x40012c00
 8005c34:	40014000 	.word	0x40014000
 8005c38:	40014400 	.word	0x40014400

08005c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0303 	bic.w	r3, r3, #3
 8005c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a21      	ldr	r2, [pc, #132]	; (8005d20 <TIM_OC3_SetConfig+0xe4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d10d      	bne.n	8005cba <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <TIM_OC3_SetConfig+0xe4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d007      	beq.n	8005cd2 <TIM_OC3_SetConfig+0x96>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a17      	ldr	r2, [pc, #92]	; (8005d24 <TIM_OC3_SetConfig+0xe8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d003      	beq.n	8005cd2 <TIM_OC3_SetConfig+0x96>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a16      	ldr	r2, [pc, #88]	; (8005d28 <TIM_OC3_SetConfig+0xec>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d113      	bne.n	8005cfa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	621a      	str	r2, [r3, #32]
}
 8005d14:	bf00      	nop
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	40012c00 	.word	0x40012c00
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40014400 	.word	0x40014400

08005d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	031b      	lsls	r3, r3, #12
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a14      	ldr	r2, [pc, #80]	; (8005ddc <TIM_OC4_SetConfig+0xb0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d007      	beq.n	8005da0 <TIM_OC4_SetConfig+0x74>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <TIM_OC4_SetConfig+0xb4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_OC4_SetConfig+0x74>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a12      	ldr	r2, [pc, #72]	; (8005de4 <TIM_OC4_SetConfig+0xb8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d109      	bne.n	8005db4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	019b      	lsls	r3, r3, #6
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	621a      	str	r2, [r3, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40012c00 	.word	0x40012c00
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40014400 	.word	0x40014400

08005de8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	041b      	lsls	r3, r3, #16
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a13      	ldr	r2, [pc, #76]	; (8005e8c <TIM_OC5_SetConfig+0xa4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d007      	beq.n	8005e52 <TIM_OC5_SetConfig+0x6a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a12      	ldr	r2, [pc, #72]	; (8005e90 <TIM_OC5_SetConfig+0xa8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_OC5_SetConfig+0x6a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a11      	ldr	r2, [pc, #68]	; (8005e94 <TIM_OC5_SetConfig+0xac>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d109      	bne.n	8005e66 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	021b      	lsls	r3, r3, #8
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	621a      	str	r2, [r3, #32]
}
 8005e80:	bf00      	nop
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40014400 	.word	0x40014400

08005e98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	051b      	lsls	r3, r3, #20
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a14      	ldr	r2, [pc, #80]	; (8005f40 <TIM_OC6_SetConfig+0xa8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d007      	beq.n	8005f04 <TIM_OC6_SetConfig+0x6c>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a13      	ldr	r2, [pc, #76]	; (8005f44 <TIM_OC6_SetConfig+0xac>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d003      	beq.n	8005f04 <TIM_OC6_SetConfig+0x6c>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a12      	ldr	r2, [pc, #72]	; (8005f48 <TIM_OC6_SetConfig+0xb0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d109      	bne.n	8005f18 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	029b      	lsls	r3, r3, #10
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	621a      	str	r2, [r3, #32]
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	40012c00 	.word	0x40012c00
 8005f44:	40014000 	.word	0x40014000
 8005f48:	40014400 	.word	0x40014400

08005f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0201 	bic.w	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f023 030a 	bic.w	r3, r3, #10
 8005f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b087      	sub	sp, #28
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	f023 0210 	bic.w	r2, r3, #16
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	031b      	lsls	r3, r3, #12
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fe6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	621a      	str	r2, [r3, #32]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	f043 0307 	orr.w	r3, r3, #7
 800602c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	609a      	str	r2, [r3, #8]
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800605a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	021a      	lsls	r2, r3, #8
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	431a      	orrs	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4313      	orrs	r3, r2
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	609a      	str	r2, [r3, #8]
}
 8006074:	bf00      	nop
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	2201      	movs	r2, #1
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1a      	ldr	r2, [r3, #32]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	43db      	mvns	r3, r3
 80060a2:	401a      	ands	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a1a      	ldr	r2, [r3, #32]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	fa01 f303 	lsl.w	r3, r1, r3
 80060b8:	431a      	orrs	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
	...

080060cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d101      	bne.n	80060e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e04f      	b.n	8006184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a21      	ldr	r2, [pc, #132]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d108      	bne.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006114:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a14      	ldr	r2, [pc, #80]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d009      	beq.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614c:	d004      	beq.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a10      	ldr	r2, [pc, #64]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d10c      	bne.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800615e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	4313      	orrs	r3, r2
 8006168:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	40012c00 	.word	0x40012c00
 8006194:	40014000 	.word	0x40014000

08006198 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d101      	bne.n	80061b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061b0:	2302      	movs	r3, #2
 80061b2:	e060      	b.n	8006276 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	041b      	lsls	r3, r3, #16
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a14      	ldr	r2, [pc, #80]	; (8006284 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d115      	bne.n	8006264 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	051b      	lsls	r3, r3, #20
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40012c00 	.word	0x40012c00

08006288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e040      	b.n	800631c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fb fe62 	bl	8001f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2224      	movs	r2, #36	; 0x24
 80062b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0201 	bic.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f8c0 	bl	800644c <UART_SetConfig>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d101      	bne.n	80062d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e022      	b.n	800631c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fb0e 	bl	8006900 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fb95 	bl	8006a44 <UART_CheckIdleState>
 800631a:	4603      	mov	r3, r0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08a      	sub	sp, #40	; 0x28
 8006328:	af02      	add	r7, sp, #8
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	4613      	mov	r3, r2
 8006332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006338:	2b20      	cmp	r3, #32
 800633a:	f040 8082 	bne.w	8006442 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <HAL_UART_Transmit+0x26>
 8006344:	88fb      	ldrh	r3, [r7, #6]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e07a      	b.n	8006444 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_UART_Transmit+0x38>
 8006358:	2302      	movs	r3, #2
 800635a:	e073      	b.n	8006444 <HAL_UART_Transmit+0x120>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2221      	movs	r2, #33	; 0x21
 8006370:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006372:	f7fc fe69 	bl	8003048 <HAL_GetTick>
 8006376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	88fa      	ldrh	r2, [r7, #6]
 800637c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	88fa      	ldrh	r2, [r7, #6]
 8006384:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006390:	d108      	bne.n	80063a4 <HAL_UART_Transmit+0x80>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d104      	bne.n	80063a4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	e003      	b.n	80063ac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80063b4:	e02d      	b.n	8006412 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2200      	movs	r2, #0
 80063be:	2180      	movs	r1, #128	; 0x80
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 fb88 	bl	8006ad6 <UART_WaitOnFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e039      	b.n	8006444 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10b      	bne.n	80063ee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	881a      	ldrh	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063e2:	b292      	uxth	r2, r2
 80063e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	3302      	adds	r3, #2
 80063ea:	61bb      	str	r3, [r7, #24]
 80063ec:	e008      	b.n	8006400 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	b292      	uxth	r2, r2
 80063f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	3301      	adds	r3, #1
 80063fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1cb      	bne.n	80063b6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2200      	movs	r2, #0
 8006426:	2140      	movs	r1, #64	; 0x40
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 fb54 	bl	8006ad6 <UART_WaitOnFlagUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e005      	b.n	8006444 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	e000      	b.n	8006444 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006442:	2302      	movs	r3, #2
  }
}
 8006444:	4618      	mov	r0, r3
 8006446:	3720      	adds	r7, #32
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800644c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006450:	b08a      	sub	sp, #40	; 0x28
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	431a      	orrs	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	431a      	orrs	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	4313      	orrs	r3, r2
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	4b9e      	ldr	r3, [pc, #632]	; (80066f4 <UART_SetConfig+0x2a8>)
 800647c:	4013      	ands	r3, r2
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	6812      	ldr	r2, [r2, #0]
 8006482:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006484:	430b      	orrs	r3, r1
 8006486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a93      	ldr	r2, [pc, #588]	; (80066f8 <UART_SetConfig+0x2ac>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d004      	beq.n	80064b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b4:	4313      	orrs	r3, r2
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c8:	430a      	orrs	r2, r1
 80064ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a8a      	ldr	r2, [pc, #552]	; (80066fc <UART_SetConfig+0x2b0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d126      	bne.n	8006524 <UART_SetConfig+0xd8>
 80064d6:	4b8a      	ldr	r3, [pc, #552]	; (8006700 <UART_SetConfig+0x2b4>)
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064dc:	f003 0303 	and.w	r3, r3, #3
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d81b      	bhi.n	800651c <UART_SetConfig+0xd0>
 80064e4:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <UART_SetConfig+0xa0>)
 80064e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ea:	bf00      	nop
 80064ec:	080064fd 	.word	0x080064fd
 80064f0:	0800650d 	.word	0x0800650d
 80064f4:	08006505 	.word	0x08006505
 80064f8:	08006515 	.word	0x08006515
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006502:	e0ab      	b.n	800665c <UART_SetConfig+0x210>
 8006504:	2302      	movs	r3, #2
 8006506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800650a:	e0a7      	b.n	800665c <UART_SetConfig+0x210>
 800650c:	2304      	movs	r3, #4
 800650e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006512:	e0a3      	b.n	800665c <UART_SetConfig+0x210>
 8006514:	2308      	movs	r3, #8
 8006516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800651a:	e09f      	b.n	800665c <UART_SetConfig+0x210>
 800651c:	2310      	movs	r3, #16
 800651e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006522:	e09b      	b.n	800665c <UART_SetConfig+0x210>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a76      	ldr	r2, [pc, #472]	; (8006704 <UART_SetConfig+0x2b8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d138      	bne.n	80065a0 <UART_SetConfig+0x154>
 800652e:	4b74      	ldr	r3, [pc, #464]	; (8006700 <UART_SetConfig+0x2b4>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	f003 030c 	and.w	r3, r3, #12
 8006538:	2b0c      	cmp	r3, #12
 800653a:	d82d      	bhi.n	8006598 <UART_SetConfig+0x14c>
 800653c:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <UART_SetConfig+0xf8>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	08006579 	.word	0x08006579
 8006548:	08006599 	.word	0x08006599
 800654c:	08006599 	.word	0x08006599
 8006550:	08006599 	.word	0x08006599
 8006554:	08006589 	.word	0x08006589
 8006558:	08006599 	.word	0x08006599
 800655c:	08006599 	.word	0x08006599
 8006560:	08006599 	.word	0x08006599
 8006564:	08006581 	.word	0x08006581
 8006568:	08006599 	.word	0x08006599
 800656c:	08006599 	.word	0x08006599
 8006570:	08006599 	.word	0x08006599
 8006574:	08006591 	.word	0x08006591
 8006578:	2300      	movs	r3, #0
 800657a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800657e:	e06d      	b.n	800665c <UART_SetConfig+0x210>
 8006580:	2302      	movs	r3, #2
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006586:	e069      	b.n	800665c <UART_SetConfig+0x210>
 8006588:	2304      	movs	r3, #4
 800658a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800658e:	e065      	b.n	800665c <UART_SetConfig+0x210>
 8006590:	2308      	movs	r3, #8
 8006592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006596:	e061      	b.n	800665c <UART_SetConfig+0x210>
 8006598:	2310      	movs	r3, #16
 800659a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800659e:	e05d      	b.n	800665c <UART_SetConfig+0x210>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a58      	ldr	r2, [pc, #352]	; (8006708 <UART_SetConfig+0x2bc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d125      	bne.n	80065f6 <UART_SetConfig+0x1aa>
 80065aa:	4b55      	ldr	r3, [pc, #340]	; (8006700 <UART_SetConfig+0x2b4>)
 80065ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065b4:	2b30      	cmp	r3, #48	; 0x30
 80065b6:	d016      	beq.n	80065e6 <UART_SetConfig+0x19a>
 80065b8:	2b30      	cmp	r3, #48	; 0x30
 80065ba:	d818      	bhi.n	80065ee <UART_SetConfig+0x1a2>
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d00a      	beq.n	80065d6 <UART_SetConfig+0x18a>
 80065c0:	2b20      	cmp	r3, #32
 80065c2:	d814      	bhi.n	80065ee <UART_SetConfig+0x1a2>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <UART_SetConfig+0x182>
 80065c8:	2b10      	cmp	r3, #16
 80065ca:	d008      	beq.n	80065de <UART_SetConfig+0x192>
 80065cc:	e00f      	b.n	80065ee <UART_SetConfig+0x1a2>
 80065ce:	2300      	movs	r3, #0
 80065d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065d4:	e042      	b.n	800665c <UART_SetConfig+0x210>
 80065d6:	2302      	movs	r3, #2
 80065d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065dc:	e03e      	b.n	800665c <UART_SetConfig+0x210>
 80065de:	2304      	movs	r3, #4
 80065e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065e4:	e03a      	b.n	800665c <UART_SetConfig+0x210>
 80065e6:	2308      	movs	r3, #8
 80065e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ec:	e036      	b.n	800665c <UART_SetConfig+0x210>
 80065ee:	2310      	movs	r3, #16
 80065f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f4:	e032      	b.n	800665c <UART_SetConfig+0x210>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a3f      	ldr	r2, [pc, #252]	; (80066f8 <UART_SetConfig+0x2ac>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d12a      	bne.n	8006656 <UART_SetConfig+0x20a>
 8006600:	4b3f      	ldr	r3, [pc, #252]	; (8006700 <UART_SetConfig+0x2b4>)
 8006602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006606:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800660a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800660e:	d01a      	beq.n	8006646 <UART_SetConfig+0x1fa>
 8006610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006614:	d81b      	bhi.n	800664e <UART_SetConfig+0x202>
 8006616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800661a:	d00c      	beq.n	8006636 <UART_SetConfig+0x1ea>
 800661c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006620:	d815      	bhi.n	800664e <UART_SetConfig+0x202>
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <UART_SetConfig+0x1e2>
 8006626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800662a:	d008      	beq.n	800663e <UART_SetConfig+0x1f2>
 800662c:	e00f      	b.n	800664e <UART_SetConfig+0x202>
 800662e:	2300      	movs	r3, #0
 8006630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006634:	e012      	b.n	800665c <UART_SetConfig+0x210>
 8006636:	2302      	movs	r3, #2
 8006638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800663c:	e00e      	b.n	800665c <UART_SetConfig+0x210>
 800663e:	2304      	movs	r3, #4
 8006640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006644:	e00a      	b.n	800665c <UART_SetConfig+0x210>
 8006646:	2308      	movs	r3, #8
 8006648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800664c:	e006      	b.n	800665c <UART_SetConfig+0x210>
 800664e:	2310      	movs	r3, #16
 8006650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006654:	e002      	b.n	800665c <UART_SetConfig+0x210>
 8006656:	2310      	movs	r3, #16
 8006658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a25      	ldr	r2, [pc, #148]	; (80066f8 <UART_SetConfig+0x2ac>)
 8006662:	4293      	cmp	r3, r2
 8006664:	f040 808a 	bne.w	800677c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006668:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800666c:	2b08      	cmp	r3, #8
 800666e:	d824      	bhi.n	80066ba <UART_SetConfig+0x26e>
 8006670:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <UART_SetConfig+0x22c>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	0800669d 	.word	0x0800669d
 800667c:	080066bb 	.word	0x080066bb
 8006680:	080066a5 	.word	0x080066a5
 8006684:	080066bb 	.word	0x080066bb
 8006688:	080066ab 	.word	0x080066ab
 800668c:	080066bb 	.word	0x080066bb
 8006690:	080066bb 	.word	0x080066bb
 8006694:	080066bb 	.word	0x080066bb
 8006698:	080066b3 	.word	0x080066b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800669c:	f7fd fdd0 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 80066a0:	61f8      	str	r0, [r7, #28]
        break;
 80066a2:	e010      	b.n	80066c6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066a4:	4b19      	ldr	r3, [pc, #100]	; (800670c <UART_SetConfig+0x2c0>)
 80066a6:	61fb      	str	r3, [r7, #28]
        break;
 80066a8:	e00d      	b.n	80066c6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066aa:	f7fd fd31 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80066ae:	61f8      	str	r0, [r7, #28]
        break;
 80066b0:	e009      	b.n	80066c6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b6:	61fb      	str	r3, [r7, #28]
        break;
 80066b8:	e005      	b.n	80066c6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8109 	beq.w	80068e0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	4613      	mov	r3, r2
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	4413      	add	r3, r2
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d305      	bcc.n	80066ea <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d912      	bls.n	8006710 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80066f0:	e0f6      	b.n	80068e0 <UART_SetConfig+0x494>
 80066f2:	bf00      	nop
 80066f4:	efff69f3 	.word	0xefff69f3
 80066f8:	40008000 	.word	0x40008000
 80066fc:	40013800 	.word	0x40013800
 8006700:	40021000 	.word	0x40021000
 8006704:	40004400 	.word	0x40004400
 8006708:	40004800 	.word	0x40004800
 800670c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2200      	movs	r2, #0
 8006714:	461c      	mov	r4, r3
 8006716:	4615      	mov	r5, r2
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	022b      	lsls	r3, r5, #8
 8006722:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006726:	0222      	lsls	r2, r4, #8
 8006728:	68f9      	ldr	r1, [r7, #12]
 800672a:	6849      	ldr	r1, [r1, #4]
 800672c:	0849      	lsrs	r1, r1, #1
 800672e:	2000      	movs	r0, #0
 8006730:	4688      	mov	r8, r1
 8006732:	4681      	mov	r9, r0
 8006734:	eb12 0a08 	adds.w	sl, r2, r8
 8006738:	eb43 0b09 	adc.w	fp, r3, r9
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	607a      	str	r2, [r7, #4]
 8006746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800674a:	4650      	mov	r0, sl
 800674c:	4659      	mov	r1, fp
 800674e:	f7fa fa2b 	bl	8000ba8 <__aeabi_uldivmod>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4613      	mov	r3, r2
 8006758:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006760:	d308      	bcc.n	8006774 <UART_SetConfig+0x328>
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006768:	d204      	bcs.n	8006774 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	60da      	str	r2, [r3, #12]
 8006772:	e0b5      	b.n	80068e0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800677a:	e0b1      	b.n	80068e0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006784:	d15d      	bne.n	8006842 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006786:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800678a:	2b08      	cmp	r3, #8
 800678c:	d827      	bhi.n	80067de <UART_SetConfig+0x392>
 800678e:	a201      	add	r2, pc, #4	; (adr r2, 8006794 <UART_SetConfig+0x348>)
 8006790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006794:	080067b9 	.word	0x080067b9
 8006798:	080067c1 	.word	0x080067c1
 800679c:	080067c9 	.word	0x080067c9
 80067a0:	080067df 	.word	0x080067df
 80067a4:	080067cf 	.word	0x080067cf
 80067a8:	080067df 	.word	0x080067df
 80067ac:	080067df 	.word	0x080067df
 80067b0:	080067df 	.word	0x080067df
 80067b4:	080067d7 	.word	0x080067d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b8:	f7fd fd42 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 80067bc:	61f8      	str	r0, [r7, #28]
        break;
 80067be:	e014      	b.n	80067ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067c0:	f7fd fd54 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 80067c4:	61f8      	str	r0, [r7, #28]
        break;
 80067c6:	e010      	b.n	80067ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067c8:	4b4c      	ldr	r3, [pc, #304]	; (80068fc <UART_SetConfig+0x4b0>)
 80067ca:	61fb      	str	r3, [r7, #28]
        break;
 80067cc:	e00d      	b.n	80067ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ce:	f7fd fc9f 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80067d2:	61f8      	str	r0, [r7, #28]
        break;
 80067d4:	e009      	b.n	80067ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067da:	61fb      	str	r3, [r7, #28]
        break;
 80067dc:	e005      	b.n	80067ea <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80067e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d077      	beq.n	80068e0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	005a      	lsls	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	085b      	lsrs	r3, r3, #1
 80067fa:	441a      	add	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	fbb2 f3f3 	udiv	r3, r2, r3
 8006804:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b0f      	cmp	r3, #15
 800680a:	d916      	bls.n	800683a <UART_SetConfig+0x3ee>
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006812:	d212      	bcs.n	800683a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	b29b      	uxth	r3, r3
 8006818:	f023 030f 	bic.w	r3, r3, #15
 800681c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	085b      	lsrs	r3, r3, #1
 8006822:	b29b      	uxth	r3, r3
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	b29a      	uxth	r2, r3
 800682a:	8afb      	ldrh	r3, [r7, #22]
 800682c:	4313      	orrs	r3, r2
 800682e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	8afa      	ldrh	r2, [r7, #22]
 8006836:	60da      	str	r2, [r3, #12]
 8006838:	e052      	b.n	80068e0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006840:	e04e      	b.n	80068e0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006846:	2b08      	cmp	r3, #8
 8006848:	d827      	bhi.n	800689a <UART_SetConfig+0x44e>
 800684a:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <UART_SetConfig+0x404>)
 800684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006850:	08006875 	.word	0x08006875
 8006854:	0800687d 	.word	0x0800687d
 8006858:	08006885 	.word	0x08006885
 800685c:	0800689b 	.word	0x0800689b
 8006860:	0800688b 	.word	0x0800688b
 8006864:	0800689b 	.word	0x0800689b
 8006868:	0800689b 	.word	0x0800689b
 800686c:	0800689b 	.word	0x0800689b
 8006870:	08006893 	.word	0x08006893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006874:	f7fd fce4 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 8006878:	61f8      	str	r0, [r7, #28]
        break;
 800687a:	e014      	b.n	80068a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800687c:	f7fd fcf6 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 8006880:	61f8      	str	r0, [r7, #28]
        break;
 8006882:	e010      	b.n	80068a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006884:	4b1d      	ldr	r3, [pc, #116]	; (80068fc <UART_SetConfig+0x4b0>)
 8006886:	61fb      	str	r3, [r7, #28]
        break;
 8006888:	e00d      	b.n	80068a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800688a:	f7fd fc41 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 800688e:	61f8      	str	r0, [r7, #28]
        break;
 8006890:	e009      	b.n	80068a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006896:	61fb      	str	r3, [r7, #28]
        break;
 8006898:	e005      	b.n	80068a6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068a4:	bf00      	nop
    }

    if (pclk != 0U)
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d019      	beq.n	80068e0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	085a      	lsrs	r2, r3, #1
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	441a      	add	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80068be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2b0f      	cmp	r3, #15
 80068c4:	d909      	bls.n	80068da <UART_SetConfig+0x48e>
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068cc:	d205      	bcs.n	80068da <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60da      	str	r2, [r3, #12]
 80068d8:	e002      	b.n	80068e0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80068ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3728      	adds	r7, #40	; 0x28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068fa:	bf00      	nop
 80068fc:	00f42400 	.word	0x00f42400

08006900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00a      	beq.n	800696e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	f003 0308 	and.w	r3, r3, #8
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	f003 0310 	and.w	r3, r3, #16
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01a      	beq.n	8006a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069fe:	d10a      	bne.n	8006a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	605a      	str	r2, [r3, #4]
  }
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a54:	f7fc faf8 	bl	8003048 <HAL_GetTick>
 8006a58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d10e      	bne.n	8006a86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f82d 	bl	8006ad6 <UART_WaitOnFlagUntilTimeout>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e023      	b.n	8006ace <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d10e      	bne.n	8006ab2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f817 	bl	8006ad6 <UART_WaitOnFlagUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e00d      	b.n	8006ace <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2220      	movs	r2, #32
 8006abc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b09c      	sub	sp, #112	; 0x70
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	603b      	str	r3, [r7, #0]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ae6:	e0a5      	b.n	8006c34 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aee:	f000 80a1 	beq.w	8006c34 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af2:	f7fc faa9 	bl	8003048 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d302      	bcc.n	8006b08 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d13e      	bne.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b1c:	667b      	str	r3, [r7, #100]	; 0x64
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e6      	bne.n	8006b08 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	663b      	str	r3, [r7, #96]	; 0x60
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3308      	adds	r3, #8
 8006b58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e5      	bne.n	8006b3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2220      	movs	r2, #32
 8006b72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2220      	movs	r2, #32
 8006b78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e067      	b.n	8006c56 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d04f      	beq.n	8006c34 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ba2:	d147      	bne.n	8006c34 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e6      	bne.n	8006bae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3308      	adds	r3, #8
 8006be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f023 0301 	bic.w	r3, r3, #1
 8006bf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c00:	623a      	str	r2, [r7, #32]
 8006c02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	69f9      	ldr	r1, [r7, #28]
 8006c06:	6a3a      	ldr	r2, [r7, #32]
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e5      	bne.n	8006be0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2220      	movs	r2, #32
 8006c18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e010      	b.n	8006c56 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	69da      	ldr	r2, [r3, #28]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	bf0c      	ite	eq
 8006c44:	2301      	moveq	r3, #1
 8006c46:	2300      	movne	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	f43f af4a 	beq.w	8006ae8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3770      	adds	r7, #112	; 0x70
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <setCSLine>:
#define RES14           14

#define AMT22_DELAY     10

void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	460b      	mov	r3, r1
 8006c68:	807b      	strh	r3, [r7, #2]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8006c6e:	787a      	ldrb	r2, [r7, #1]
 8006c70:	887b      	ldrh	r3, [r7, #2]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7fc fca3 	bl	80035c0 <HAL_GPIO_WritePin>
}
 8006c7a:	bf00      	nop
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b088      	sub	sp, #32
 8006c86:	af02      	add	r7, sp, #8
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	460b      	mov	r3, r1
 8006c90:	72fb      	strb	r3, [r7, #11]
 8006c92:	4613      	mov	r3, r2
 8006c94:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 8006c96:	893b      	ldrh	r3, [r7, #8]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff ffde 	bl	8006c5e <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006ca2:	200a      	movs	r0, #10
 8006ca4:	f000 f8d2 	bl	8006e4c <delay_us_AMT22>

  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8006ca8:	f107 0217 	add.w	r2, r7, #23
 8006cac:	f107 010b 	add.w	r1, r7, #11
 8006cb0:	230a      	movs	r3, #10
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f7fd ff2d 	bl	8004b16 <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  //  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006cbc:	200a      	movs	r0, #10
 8006cbe:	f000 f8c5 	bl	8006e4c <delay_us_AMT22>

  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 8006cc2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006cc6:	893b      	ldrh	r3, [r7, #8]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff ffc7 	bl	8006c5e <setCSLine>

  return data;
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b08c      	sub	sp, #48	; 0x30
 8006cde:	af02      	add	r7, sp, #8
 8006ce0:	60f8      	str	r0, [r7, #12]
 8006ce2:	60b9      	str	r1, [r7, #8]
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	460b      	mov	r3, r1
 8006cea:	80fb      	strh	r3, [r7, #6]
 8006cec:	4613      	mov	r3, r2
 8006cee:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8;
 8006cf0:	88fa      	ldrh	r2, [r7, #6]
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	2100      	movs	r1, #0
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f7ff ffbe 	bl	8006c82 <spiWriteRead>
 8006d06:	4603      	mov	r3, r0
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006d0e:	200a      	movs	r0, #10
 8006d10:	f000 f89c 	bl	8006e4c <delay_us_AMT22>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer);
 8006d14:	88fa      	ldrh	r2, [r7, #6]
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	2100      	movs	r1, #0
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff ffac 	bl	8006c82 <spiWriteRead>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d30:	4313      	orrs	r3, r2
 8006d32:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 8006d34:	2300      	movs	r3, #0
 8006d36:	623b      	str	r3, [r7, #32]
 8006d38:	e010      	b.n	8006d5c <getPositionSPI+0x82>
 8006d3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	fa42 f303 	asr.w	r3, r2, r3
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	b2d9      	uxtb	r1, r3
 8006d4a:	f107 0210 	add.w	r2, r7, #16
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	4413      	add	r3, r2
 8006d52:	460a      	mov	r2, r1
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	623b      	str	r3, [r7, #32]
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	2b0f      	cmp	r3, #15
 8006d60:	ddeb      	ble.n	8006d3a <getPositionSPI+0x60>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
 if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8006d62:	7ffb      	ldrb	r3, [r7, #31]
 8006d64:	4619      	mov	r1, r3
 8006d66:	7f7a      	ldrb	r2, [r7, #29]
 8006d68:	7efb      	ldrb	r3, [r7, #27]
 8006d6a:	4053      	eors	r3, r2
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	7e7b      	ldrb	r3, [r7, #25]
 8006d70:	4053      	eors	r3, r2
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	4053      	eors	r3, r2
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	7d7b      	ldrb	r3, [r7, #21]
 8006d7c:	4053      	eors	r3, r2
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	7cfb      	ldrb	r3, [r7, #19]
 8006d82:	4053      	eors	r3, r2
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	7c7b      	ldrb	r3, [r7, #17]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	bf0c      	ite	eq
 8006d8c:	2301      	moveq	r3, #1
 8006d8e:	2300      	movne	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	4299      	cmp	r1, r3
 8006d94:	d11e      	bne.n	8006dd4 <getPositionSPI+0xfa>
         && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8006d96:	7fbb      	ldrb	r3, [r7, #30]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	7f3a      	ldrb	r2, [r7, #28]
 8006d9c:	7ebb      	ldrb	r3, [r7, #26]
 8006d9e:	4053      	eors	r3, r2
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	7e3b      	ldrb	r3, [r7, #24]
 8006da4:	4053      	eors	r3, r2
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	7dbb      	ldrb	r3, [r7, #22]
 8006daa:	4053      	eors	r3, r2
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	7d3b      	ldrb	r3, [r7, #20]
 8006db0:	4053      	eors	r3, r2
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	7cbb      	ldrb	r3, [r7, #18]
 8006db6:	4053      	eors	r3, r2
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	7c3b      	ldrb	r3, [r7, #16]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	bf0c      	ite	eq
 8006dc0:	2301      	moveq	r3, #1
 8006dc2:	2300      	movne	r3, #0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	4299      	cmp	r1, r3
 8006dc8:	d104      	bne.n	8006dd4 <getPositionSPI+0xfa>
   {
     //we got back a good position, so just mask away the checkbits
     currentPosition &= 0x3FFF;
 8006dca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dcc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006dd0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006dd2:	e002      	b.n	8006dda <getPositionSPI+0x100>
   }
 else
 {
   currentPosition = 0xFFFF; //bad position
 8006dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006dd8:	84fb      	strh	r3, [r7, #38]	; 0x26
 }
  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 8006dda:	797b      	ldrb	r3, [r7, #5]
 8006ddc:	2b0c      	cmp	r3, #12
 8006dde:	d107      	bne.n	8006df0 <getPositionSPI+0x116>
 8006de0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d002      	beq.n	8006df0 <getPositionSPI+0x116>
 8006dea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dec:	089b      	lsrs	r3, r3, #2
 8006dee:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 8006df0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3728      	adds	r7, #40	; 0x28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <resetAMT22>:
  //power on delay is 200ms
  HAL_Delay(250);
}

void resetAMT22(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, TIM_HandleTypeDef *timer)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af02      	add	r7, sp, #8
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	603b      	str	r3, [r7, #0]
 8006e06:	4613      	mov	r3, r2
 8006e08:	80fb      	strh	r3, [r7, #6]
  spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer);
 8006e0a:	88fa      	ldrh	r2, [r7, #6]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	2300      	movs	r3, #0
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	4613      	mov	r3, r2
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	2100      	movs	r1, #0
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f7ff ff31 	bl	8006c82 <spiWriteRead>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006e20:	200a      	movs	r0, #10
 8006e22:	f000 f813 	bl	8006e4c <delay_us_AMT22>

  spiWriteRead(hspi, AMT22_RESET, encoderPort, encoderPin, 1, timer);
 8006e26:	88fa      	ldrh	r2, [r7, #6]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	4613      	mov	r3, r2
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	2160      	movs	r1, #96	; 0x60
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f7ff ff23 	bl	8006c82 <spiWriteRead>

//  delay(timer, 250);
  // delay_us_AMT22(250);
  //power on delay is 200ms
  HAL_Delay(250);
 8006e3c:	20fa      	movs	r0, #250	; 0xfa
 8006e3e:	f7fc f90f 	bl	8003060 <HAL_Delay>
}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <delay_us_AMT22>:
			passedTime +=timer->Init.Period;
		}
	}
}
void delay_us_AMT22 (uint16_t us)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8006e56:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <delay_us_AMT22+0x30>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8006e5e:	bf00      	nop
 8006e60:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <delay_us_AMT22+0x30>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e66:	88fb      	ldrh	r3, [r7, #6]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d3f9      	bcc.n	8006e60 <delay_us_AMT22+0x14>
}
 8006e6c:	bf00      	nop
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	2000051c 	.word	0x2000051c

08006e80 <_Znaj>:
 8006e80:	f000 b800 	b.w	8006e84 <_Znwj>

08006e84 <_Znwj>:
 8006e84:	2801      	cmp	r0, #1
 8006e86:	bf38      	it	cc
 8006e88:	2001      	movcc	r0, #1
 8006e8a:	b510      	push	{r4, lr}
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f000 f844 	bl	8006f1c <malloc>
 8006e94:	b930      	cbnz	r0, 8006ea4 <_Znwj+0x20>
 8006e96:	f000 f807 	bl	8006ea8 <_ZSt15get_new_handlerv>
 8006e9a:	b908      	cbnz	r0, 8006ea0 <_Znwj+0x1c>
 8006e9c:	f000 f80c 	bl	8006eb8 <abort>
 8006ea0:	4780      	blx	r0
 8006ea2:	e7f4      	b.n	8006e8e <_Znwj+0xa>
 8006ea4:	bd10      	pop	{r4, pc}
	...

08006ea8 <_ZSt15get_new_handlerv>:
 8006ea8:	4b02      	ldr	r3, [pc, #8]	; (8006eb4 <_ZSt15get_new_handlerv+0xc>)
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	f3bf 8f5b 	dmb	ish
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	2000063c 	.word	0x2000063c

08006eb8 <abort>:
 8006eb8:	b508      	push	{r3, lr}
 8006eba:	2006      	movs	r0, #6
 8006ebc:	f000 fe62 	bl	8007b84 <raise>
 8006ec0:	2001      	movs	r0, #1
 8006ec2:	f7fa fd93 	bl	80019ec <_exit>
	...

08006ec8 <__errno>:
 8006ec8:	4b01      	ldr	r3, [pc, #4]	; (8006ed0 <__errno+0x8>)
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	2000003c 	.word	0x2000003c

08006ed4 <__libc_init_array>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	4d0d      	ldr	r5, [pc, #52]	; (8006f0c <__libc_init_array+0x38>)
 8006ed8:	4c0d      	ldr	r4, [pc, #52]	; (8006f10 <__libc_init_array+0x3c>)
 8006eda:	1b64      	subs	r4, r4, r5
 8006edc:	10a4      	asrs	r4, r4, #2
 8006ede:	2600      	movs	r6, #0
 8006ee0:	42a6      	cmp	r6, r4
 8006ee2:	d109      	bne.n	8006ef8 <__libc_init_array+0x24>
 8006ee4:	4d0b      	ldr	r5, [pc, #44]	; (8006f14 <__libc_init_array+0x40>)
 8006ee6:	4c0c      	ldr	r4, [pc, #48]	; (8006f18 <__libc_init_array+0x44>)
 8006ee8:	f003 f9c4 	bl	800a274 <_init>
 8006eec:	1b64      	subs	r4, r4, r5
 8006eee:	10a4      	asrs	r4, r4, #2
 8006ef0:	2600      	movs	r6, #0
 8006ef2:	42a6      	cmp	r6, r4
 8006ef4:	d105      	bne.n	8006f02 <__libc_init_array+0x2e>
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006efc:	4798      	blx	r3
 8006efe:	3601      	adds	r6, #1
 8006f00:	e7ee      	b.n	8006ee0 <__libc_init_array+0xc>
 8006f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f06:	4798      	blx	r3
 8006f08:	3601      	adds	r6, #1
 8006f0a:	e7f2      	b.n	8006ef2 <__libc_init_array+0x1e>
 8006f0c:	0800adf4 	.word	0x0800adf4
 8006f10:	0800adf4 	.word	0x0800adf4
 8006f14:	0800adf4 	.word	0x0800adf4
 8006f18:	0800adfc 	.word	0x0800adfc

08006f1c <malloc>:
 8006f1c:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <malloc+0xc>)
 8006f1e:	4601      	mov	r1, r0
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	f000 b877 	b.w	8007014 <_malloc_r>
 8006f26:	bf00      	nop
 8006f28:	2000003c 	.word	0x2000003c

08006f2c <memset>:
 8006f2c:	4402      	add	r2, r0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d100      	bne.n	8006f36 <memset+0xa>
 8006f34:	4770      	bx	lr
 8006f36:	f803 1b01 	strb.w	r1, [r3], #1
 8006f3a:	e7f9      	b.n	8006f30 <memset+0x4>

08006f3c <_free_r>:
 8006f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f3e:	2900      	cmp	r1, #0
 8006f40:	d044      	beq.n	8006fcc <_free_r+0x90>
 8006f42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f46:	9001      	str	r0, [sp, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f1a1 0404 	sub.w	r4, r1, #4
 8006f4e:	bfb8      	it	lt
 8006f50:	18e4      	addlt	r4, r4, r3
 8006f52:	f002 f8d3 	bl	80090fc <__malloc_lock>
 8006f56:	4a1e      	ldr	r2, [pc, #120]	; (8006fd0 <_free_r+0x94>)
 8006f58:	9801      	ldr	r0, [sp, #4]
 8006f5a:	6813      	ldr	r3, [r2, #0]
 8006f5c:	b933      	cbnz	r3, 8006f6c <_free_r+0x30>
 8006f5e:	6063      	str	r3, [r4, #4]
 8006f60:	6014      	str	r4, [r2, #0]
 8006f62:	b003      	add	sp, #12
 8006f64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f68:	f002 b8ce 	b.w	8009108 <__malloc_unlock>
 8006f6c:	42a3      	cmp	r3, r4
 8006f6e:	d908      	bls.n	8006f82 <_free_r+0x46>
 8006f70:	6825      	ldr	r5, [r4, #0]
 8006f72:	1961      	adds	r1, r4, r5
 8006f74:	428b      	cmp	r3, r1
 8006f76:	bf01      	itttt	eq
 8006f78:	6819      	ldreq	r1, [r3, #0]
 8006f7a:	685b      	ldreq	r3, [r3, #4]
 8006f7c:	1949      	addeq	r1, r1, r5
 8006f7e:	6021      	streq	r1, [r4, #0]
 8006f80:	e7ed      	b.n	8006f5e <_free_r+0x22>
 8006f82:	461a      	mov	r2, r3
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	b10b      	cbz	r3, 8006f8c <_free_r+0x50>
 8006f88:	42a3      	cmp	r3, r4
 8006f8a:	d9fa      	bls.n	8006f82 <_free_r+0x46>
 8006f8c:	6811      	ldr	r1, [r2, #0]
 8006f8e:	1855      	adds	r5, r2, r1
 8006f90:	42a5      	cmp	r5, r4
 8006f92:	d10b      	bne.n	8006fac <_free_r+0x70>
 8006f94:	6824      	ldr	r4, [r4, #0]
 8006f96:	4421      	add	r1, r4
 8006f98:	1854      	adds	r4, r2, r1
 8006f9a:	42a3      	cmp	r3, r4
 8006f9c:	6011      	str	r1, [r2, #0]
 8006f9e:	d1e0      	bne.n	8006f62 <_free_r+0x26>
 8006fa0:	681c      	ldr	r4, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	6053      	str	r3, [r2, #4]
 8006fa6:	4421      	add	r1, r4
 8006fa8:	6011      	str	r1, [r2, #0]
 8006faa:	e7da      	b.n	8006f62 <_free_r+0x26>
 8006fac:	d902      	bls.n	8006fb4 <_free_r+0x78>
 8006fae:	230c      	movs	r3, #12
 8006fb0:	6003      	str	r3, [r0, #0]
 8006fb2:	e7d6      	b.n	8006f62 <_free_r+0x26>
 8006fb4:	6825      	ldr	r5, [r4, #0]
 8006fb6:	1961      	adds	r1, r4, r5
 8006fb8:	428b      	cmp	r3, r1
 8006fba:	bf04      	itt	eq
 8006fbc:	6819      	ldreq	r1, [r3, #0]
 8006fbe:	685b      	ldreq	r3, [r3, #4]
 8006fc0:	6063      	str	r3, [r4, #4]
 8006fc2:	bf04      	itt	eq
 8006fc4:	1949      	addeq	r1, r1, r5
 8006fc6:	6021      	streq	r1, [r4, #0]
 8006fc8:	6054      	str	r4, [r2, #4]
 8006fca:	e7ca      	b.n	8006f62 <_free_r+0x26>
 8006fcc:	b003      	add	sp, #12
 8006fce:	bd30      	pop	{r4, r5, pc}
 8006fd0:	20000640 	.word	0x20000640

08006fd4 <sbrk_aligned>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	4e0e      	ldr	r6, [pc, #56]	; (8007010 <sbrk_aligned+0x3c>)
 8006fd8:	460c      	mov	r4, r1
 8006fda:	6831      	ldr	r1, [r6, #0]
 8006fdc:	4605      	mov	r5, r0
 8006fde:	b911      	cbnz	r1, 8006fe6 <sbrk_aligned+0x12>
 8006fe0:	f000 fd98 	bl	8007b14 <_sbrk_r>
 8006fe4:	6030      	str	r0, [r6, #0]
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f000 fd93 	bl	8007b14 <_sbrk_r>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	d00a      	beq.n	8007008 <sbrk_aligned+0x34>
 8006ff2:	1cc4      	adds	r4, r0, #3
 8006ff4:	f024 0403 	bic.w	r4, r4, #3
 8006ff8:	42a0      	cmp	r0, r4
 8006ffa:	d007      	beq.n	800700c <sbrk_aligned+0x38>
 8006ffc:	1a21      	subs	r1, r4, r0
 8006ffe:	4628      	mov	r0, r5
 8007000:	f000 fd88 	bl	8007b14 <_sbrk_r>
 8007004:	3001      	adds	r0, #1
 8007006:	d101      	bne.n	800700c <sbrk_aligned+0x38>
 8007008:	f04f 34ff 	mov.w	r4, #4294967295
 800700c:	4620      	mov	r0, r4
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	20000644 	.word	0x20000644

08007014 <_malloc_r>:
 8007014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007018:	1ccd      	adds	r5, r1, #3
 800701a:	f025 0503 	bic.w	r5, r5, #3
 800701e:	3508      	adds	r5, #8
 8007020:	2d0c      	cmp	r5, #12
 8007022:	bf38      	it	cc
 8007024:	250c      	movcc	r5, #12
 8007026:	2d00      	cmp	r5, #0
 8007028:	4607      	mov	r7, r0
 800702a:	db01      	blt.n	8007030 <_malloc_r+0x1c>
 800702c:	42a9      	cmp	r1, r5
 800702e:	d905      	bls.n	800703c <_malloc_r+0x28>
 8007030:	230c      	movs	r3, #12
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	2600      	movs	r6, #0
 8007036:	4630      	mov	r0, r6
 8007038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800703c:	4e2e      	ldr	r6, [pc, #184]	; (80070f8 <_malloc_r+0xe4>)
 800703e:	f002 f85d 	bl	80090fc <__malloc_lock>
 8007042:	6833      	ldr	r3, [r6, #0]
 8007044:	461c      	mov	r4, r3
 8007046:	bb34      	cbnz	r4, 8007096 <_malloc_r+0x82>
 8007048:	4629      	mov	r1, r5
 800704a:	4638      	mov	r0, r7
 800704c:	f7ff ffc2 	bl	8006fd4 <sbrk_aligned>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	4604      	mov	r4, r0
 8007054:	d14d      	bne.n	80070f2 <_malloc_r+0xde>
 8007056:	6834      	ldr	r4, [r6, #0]
 8007058:	4626      	mov	r6, r4
 800705a:	2e00      	cmp	r6, #0
 800705c:	d140      	bne.n	80070e0 <_malloc_r+0xcc>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	4631      	mov	r1, r6
 8007062:	4638      	mov	r0, r7
 8007064:	eb04 0803 	add.w	r8, r4, r3
 8007068:	f000 fd54 	bl	8007b14 <_sbrk_r>
 800706c:	4580      	cmp	r8, r0
 800706e:	d13a      	bne.n	80070e6 <_malloc_r+0xd2>
 8007070:	6821      	ldr	r1, [r4, #0]
 8007072:	3503      	adds	r5, #3
 8007074:	1a6d      	subs	r5, r5, r1
 8007076:	f025 0503 	bic.w	r5, r5, #3
 800707a:	3508      	adds	r5, #8
 800707c:	2d0c      	cmp	r5, #12
 800707e:	bf38      	it	cc
 8007080:	250c      	movcc	r5, #12
 8007082:	4629      	mov	r1, r5
 8007084:	4638      	mov	r0, r7
 8007086:	f7ff ffa5 	bl	8006fd4 <sbrk_aligned>
 800708a:	3001      	adds	r0, #1
 800708c:	d02b      	beq.n	80070e6 <_malloc_r+0xd2>
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	442b      	add	r3, r5
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	e00e      	b.n	80070b4 <_malloc_r+0xa0>
 8007096:	6822      	ldr	r2, [r4, #0]
 8007098:	1b52      	subs	r2, r2, r5
 800709a:	d41e      	bmi.n	80070da <_malloc_r+0xc6>
 800709c:	2a0b      	cmp	r2, #11
 800709e:	d916      	bls.n	80070ce <_malloc_r+0xba>
 80070a0:	1961      	adds	r1, r4, r5
 80070a2:	42a3      	cmp	r3, r4
 80070a4:	6025      	str	r5, [r4, #0]
 80070a6:	bf18      	it	ne
 80070a8:	6059      	strne	r1, [r3, #4]
 80070aa:	6863      	ldr	r3, [r4, #4]
 80070ac:	bf08      	it	eq
 80070ae:	6031      	streq	r1, [r6, #0]
 80070b0:	5162      	str	r2, [r4, r5]
 80070b2:	604b      	str	r3, [r1, #4]
 80070b4:	4638      	mov	r0, r7
 80070b6:	f104 060b 	add.w	r6, r4, #11
 80070ba:	f002 f825 	bl	8009108 <__malloc_unlock>
 80070be:	f026 0607 	bic.w	r6, r6, #7
 80070c2:	1d23      	adds	r3, r4, #4
 80070c4:	1af2      	subs	r2, r6, r3
 80070c6:	d0b6      	beq.n	8007036 <_malloc_r+0x22>
 80070c8:	1b9b      	subs	r3, r3, r6
 80070ca:	50a3      	str	r3, [r4, r2]
 80070cc:	e7b3      	b.n	8007036 <_malloc_r+0x22>
 80070ce:	6862      	ldr	r2, [r4, #4]
 80070d0:	42a3      	cmp	r3, r4
 80070d2:	bf0c      	ite	eq
 80070d4:	6032      	streq	r2, [r6, #0]
 80070d6:	605a      	strne	r2, [r3, #4]
 80070d8:	e7ec      	b.n	80070b4 <_malloc_r+0xa0>
 80070da:	4623      	mov	r3, r4
 80070dc:	6864      	ldr	r4, [r4, #4]
 80070de:	e7b2      	b.n	8007046 <_malloc_r+0x32>
 80070e0:	4634      	mov	r4, r6
 80070e2:	6876      	ldr	r6, [r6, #4]
 80070e4:	e7b9      	b.n	800705a <_malloc_r+0x46>
 80070e6:	230c      	movs	r3, #12
 80070e8:	603b      	str	r3, [r7, #0]
 80070ea:	4638      	mov	r0, r7
 80070ec:	f002 f80c 	bl	8009108 <__malloc_unlock>
 80070f0:	e7a1      	b.n	8007036 <_malloc_r+0x22>
 80070f2:	6025      	str	r5, [r4, #0]
 80070f4:	e7de      	b.n	80070b4 <_malloc_r+0xa0>
 80070f6:	bf00      	nop
 80070f8:	20000640 	.word	0x20000640

080070fc <__cvt>:
 80070fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	ec55 4b10 	vmov	r4, r5, d0
 8007104:	2d00      	cmp	r5, #0
 8007106:	460e      	mov	r6, r1
 8007108:	4619      	mov	r1, r3
 800710a:	462b      	mov	r3, r5
 800710c:	bfbb      	ittet	lt
 800710e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007112:	461d      	movlt	r5, r3
 8007114:	2300      	movge	r3, #0
 8007116:	232d      	movlt	r3, #45	; 0x2d
 8007118:	700b      	strb	r3, [r1, #0]
 800711a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800711c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007120:	4691      	mov	r9, r2
 8007122:	f023 0820 	bic.w	r8, r3, #32
 8007126:	bfbc      	itt	lt
 8007128:	4622      	movlt	r2, r4
 800712a:	4614      	movlt	r4, r2
 800712c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007130:	d005      	beq.n	800713e <__cvt+0x42>
 8007132:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007136:	d100      	bne.n	800713a <__cvt+0x3e>
 8007138:	3601      	adds	r6, #1
 800713a:	2102      	movs	r1, #2
 800713c:	e000      	b.n	8007140 <__cvt+0x44>
 800713e:	2103      	movs	r1, #3
 8007140:	ab03      	add	r3, sp, #12
 8007142:	9301      	str	r3, [sp, #4]
 8007144:	ab02      	add	r3, sp, #8
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	ec45 4b10 	vmov	d0, r4, r5
 800714c:	4653      	mov	r3, sl
 800714e:	4632      	mov	r2, r6
 8007150:	f000 ffda 	bl	8008108 <_dtoa_r>
 8007154:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007158:	4607      	mov	r7, r0
 800715a:	d102      	bne.n	8007162 <__cvt+0x66>
 800715c:	f019 0f01 	tst.w	r9, #1
 8007160:	d022      	beq.n	80071a8 <__cvt+0xac>
 8007162:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007166:	eb07 0906 	add.w	r9, r7, r6
 800716a:	d110      	bne.n	800718e <__cvt+0x92>
 800716c:	783b      	ldrb	r3, [r7, #0]
 800716e:	2b30      	cmp	r3, #48	; 0x30
 8007170:	d10a      	bne.n	8007188 <__cvt+0x8c>
 8007172:	2200      	movs	r2, #0
 8007174:	2300      	movs	r3, #0
 8007176:	4620      	mov	r0, r4
 8007178:	4629      	mov	r1, r5
 800717a:	f7f9 fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 800717e:	b918      	cbnz	r0, 8007188 <__cvt+0x8c>
 8007180:	f1c6 0601 	rsb	r6, r6, #1
 8007184:	f8ca 6000 	str.w	r6, [sl]
 8007188:	f8da 3000 	ldr.w	r3, [sl]
 800718c:	4499      	add	r9, r3
 800718e:	2200      	movs	r2, #0
 8007190:	2300      	movs	r3, #0
 8007192:	4620      	mov	r0, r4
 8007194:	4629      	mov	r1, r5
 8007196:	f7f9 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800719a:	b108      	cbz	r0, 80071a0 <__cvt+0xa4>
 800719c:	f8cd 900c 	str.w	r9, [sp, #12]
 80071a0:	2230      	movs	r2, #48	; 0x30
 80071a2:	9b03      	ldr	r3, [sp, #12]
 80071a4:	454b      	cmp	r3, r9
 80071a6:	d307      	bcc.n	80071b8 <__cvt+0xbc>
 80071a8:	9b03      	ldr	r3, [sp, #12]
 80071aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ac:	1bdb      	subs	r3, r3, r7
 80071ae:	4638      	mov	r0, r7
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	b004      	add	sp, #16
 80071b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b8:	1c59      	adds	r1, r3, #1
 80071ba:	9103      	str	r1, [sp, #12]
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	e7f0      	b.n	80071a2 <__cvt+0xa6>

080071c0 <__exponent>:
 80071c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071c2:	4603      	mov	r3, r0
 80071c4:	2900      	cmp	r1, #0
 80071c6:	bfb8      	it	lt
 80071c8:	4249      	neglt	r1, r1
 80071ca:	f803 2b02 	strb.w	r2, [r3], #2
 80071ce:	bfb4      	ite	lt
 80071d0:	222d      	movlt	r2, #45	; 0x2d
 80071d2:	222b      	movge	r2, #43	; 0x2b
 80071d4:	2909      	cmp	r1, #9
 80071d6:	7042      	strb	r2, [r0, #1]
 80071d8:	dd2a      	ble.n	8007230 <__exponent+0x70>
 80071da:	f10d 0407 	add.w	r4, sp, #7
 80071de:	46a4      	mov	ip, r4
 80071e0:	270a      	movs	r7, #10
 80071e2:	46a6      	mov	lr, r4
 80071e4:	460a      	mov	r2, r1
 80071e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80071ea:	fb07 1516 	mls	r5, r7, r6, r1
 80071ee:	3530      	adds	r5, #48	; 0x30
 80071f0:	2a63      	cmp	r2, #99	; 0x63
 80071f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80071f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071fa:	4631      	mov	r1, r6
 80071fc:	dcf1      	bgt.n	80071e2 <__exponent+0x22>
 80071fe:	3130      	adds	r1, #48	; 0x30
 8007200:	f1ae 0502 	sub.w	r5, lr, #2
 8007204:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007208:	1c44      	adds	r4, r0, #1
 800720a:	4629      	mov	r1, r5
 800720c:	4561      	cmp	r1, ip
 800720e:	d30a      	bcc.n	8007226 <__exponent+0x66>
 8007210:	f10d 0209 	add.w	r2, sp, #9
 8007214:	eba2 020e 	sub.w	r2, r2, lr
 8007218:	4565      	cmp	r5, ip
 800721a:	bf88      	it	hi
 800721c:	2200      	movhi	r2, #0
 800721e:	4413      	add	r3, r2
 8007220:	1a18      	subs	r0, r3, r0
 8007222:	b003      	add	sp, #12
 8007224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800722a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800722e:	e7ed      	b.n	800720c <__exponent+0x4c>
 8007230:	2330      	movs	r3, #48	; 0x30
 8007232:	3130      	adds	r1, #48	; 0x30
 8007234:	7083      	strb	r3, [r0, #2]
 8007236:	70c1      	strb	r1, [r0, #3]
 8007238:	1d03      	adds	r3, r0, #4
 800723a:	e7f1      	b.n	8007220 <__exponent+0x60>

0800723c <_printf_float>:
 800723c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	ed2d 8b02 	vpush	{d8}
 8007244:	b08d      	sub	sp, #52	; 0x34
 8007246:	460c      	mov	r4, r1
 8007248:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800724c:	4616      	mov	r6, r2
 800724e:	461f      	mov	r7, r3
 8007250:	4605      	mov	r5, r0
 8007252:	f001 ff3d 	bl	80090d0 <_localeconv_r>
 8007256:	f8d0 a000 	ldr.w	sl, [r0]
 800725a:	4650      	mov	r0, sl
 800725c:	f7f8 ffb8 	bl	80001d0 <strlen>
 8007260:	2300      	movs	r3, #0
 8007262:	930a      	str	r3, [sp, #40]	; 0x28
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	9305      	str	r3, [sp, #20]
 8007268:	f8d8 3000 	ldr.w	r3, [r8]
 800726c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007270:	3307      	adds	r3, #7
 8007272:	f023 0307 	bic.w	r3, r3, #7
 8007276:	f103 0208 	add.w	r2, r3, #8
 800727a:	f8c8 2000 	str.w	r2, [r8]
 800727e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007282:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007286:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800728a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800728e:	9307      	str	r3, [sp, #28]
 8007290:	f8cd 8018 	str.w	r8, [sp, #24]
 8007294:	ee08 0a10 	vmov	s16, r0
 8007298:	4b9f      	ldr	r3, [pc, #636]	; (8007518 <_printf_float+0x2dc>)
 800729a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800729e:	f04f 32ff 	mov.w	r2, #4294967295
 80072a2:	f7f9 fc43 	bl	8000b2c <__aeabi_dcmpun>
 80072a6:	bb88      	cbnz	r0, 800730c <_printf_float+0xd0>
 80072a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072ac:	4b9a      	ldr	r3, [pc, #616]	; (8007518 <_printf_float+0x2dc>)
 80072ae:	f04f 32ff 	mov.w	r2, #4294967295
 80072b2:	f7f9 fc1d 	bl	8000af0 <__aeabi_dcmple>
 80072b6:	bb48      	cbnz	r0, 800730c <_printf_float+0xd0>
 80072b8:	2200      	movs	r2, #0
 80072ba:	2300      	movs	r3, #0
 80072bc:	4640      	mov	r0, r8
 80072be:	4649      	mov	r1, r9
 80072c0:	f7f9 fc0c 	bl	8000adc <__aeabi_dcmplt>
 80072c4:	b110      	cbz	r0, 80072cc <_printf_float+0x90>
 80072c6:	232d      	movs	r3, #45	; 0x2d
 80072c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072cc:	4b93      	ldr	r3, [pc, #588]	; (800751c <_printf_float+0x2e0>)
 80072ce:	4894      	ldr	r0, [pc, #592]	; (8007520 <_printf_float+0x2e4>)
 80072d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80072d4:	bf94      	ite	ls
 80072d6:	4698      	movls	r8, r3
 80072d8:	4680      	movhi	r8, r0
 80072da:	2303      	movs	r3, #3
 80072dc:	6123      	str	r3, [r4, #16]
 80072de:	9b05      	ldr	r3, [sp, #20]
 80072e0:	f023 0204 	bic.w	r2, r3, #4
 80072e4:	6022      	str	r2, [r4, #0]
 80072e6:	f04f 0900 	mov.w	r9, #0
 80072ea:	9700      	str	r7, [sp, #0]
 80072ec:	4633      	mov	r3, r6
 80072ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80072f0:	4621      	mov	r1, r4
 80072f2:	4628      	mov	r0, r5
 80072f4:	f000 f9d8 	bl	80076a8 <_printf_common>
 80072f8:	3001      	adds	r0, #1
 80072fa:	f040 8090 	bne.w	800741e <_printf_float+0x1e2>
 80072fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007302:	b00d      	add	sp, #52	; 0x34
 8007304:	ecbd 8b02 	vpop	{d8}
 8007308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730c:	4642      	mov	r2, r8
 800730e:	464b      	mov	r3, r9
 8007310:	4640      	mov	r0, r8
 8007312:	4649      	mov	r1, r9
 8007314:	f7f9 fc0a 	bl	8000b2c <__aeabi_dcmpun>
 8007318:	b140      	cbz	r0, 800732c <_printf_float+0xf0>
 800731a:	464b      	mov	r3, r9
 800731c:	2b00      	cmp	r3, #0
 800731e:	bfbc      	itt	lt
 8007320:	232d      	movlt	r3, #45	; 0x2d
 8007322:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007326:	487f      	ldr	r0, [pc, #508]	; (8007524 <_printf_float+0x2e8>)
 8007328:	4b7f      	ldr	r3, [pc, #508]	; (8007528 <_printf_float+0x2ec>)
 800732a:	e7d1      	b.n	80072d0 <_printf_float+0x94>
 800732c:	6863      	ldr	r3, [r4, #4]
 800732e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007332:	9206      	str	r2, [sp, #24]
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	d13f      	bne.n	80073b8 <_printf_float+0x17c>
 8007338:	2306      	movs	r3, #6
 800733a:	6063      	str	r3, [r4, #4]
 800733c:	9b05      	ldr	r3, [sp, #20]
 800733e:	6861      	ldr	r1, [r4, #4]
 8007340:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007344:	2300      	movs	r3, #0
 8007346:	9303      	str	r3, [sp, #12]
 8007348:	ab0a      	add	r3, sp, #40	; 0x28
 800734a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800734e:	ab09      	add	r3, sp, #36	; 0x24
 8007350:	ec49 8b10 	vmov	d0, r8, r9
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	6022      	str	r2, [r4, #0]
 8007358:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800735c:	4628      	mov	r0, r5
 800735e:	f7ff fecd 	bl	80070fc <__cvt>
 8007362:	9b06      	ldr	r3, [sp, #24]
 8007364:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007366:	2b47      	cmp	r3, #71	; 0x47
 8007368:	4680      	mov	r8, r0
 800736a:	d108      	bne.n	800737e <_printf_float+0x142>
 800736c:	1cc8      	adds	r0, r1, #3
 800736e:	db02      	blt.n	8007376 <_printf_float+0x13a>
 8007370:	6863      	ldr	r3, [r4, #4]
 8007372:	4299      	cmp	r1, r3
 8007374:	dd41      	ble.n	80073fa <_printf_float+0x1be>
 8007376:	f1ab 0b02 	sub.w	fp, fp, #2
 800737a:	fa5f fb8b 	uxtb.w	fp, fp
 800737e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007382:	d820      	bhi.n	80073c6 <_printf_float+0x18a>
 8007384:	3901      	subs	r1, #1
 8007386:	465a      	mov	r2, fp
 8007388:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800738c:	9109      	str	r1, [sp, #36]	; 0x24
 800738e:	f7ff ff17 	bl	80071c0 <__exponent>
 8007392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007394:	1813      	adds	r3, r2, r0
 8007396:	2a01      	cmp	r2, #1
 8007398:	4681      	mov	r9, r0
 800739a:	6123      	str	r3, [r4, #16]
 800739c:	dc02      	bgt.n	80073a4 <_printf_float+0x168>
 800739e:	6822      	ldr	r2, [r4, #0]
 80073a0:	07d2      	lsls	r2, r2, #31
 80073a2:	d501      	bpl.n	80073a8 <_printf_float+0x16c>
 80073a4:	3301      	adds	r3, #1
 80073a6:	6123      	str	r3, [r4, #16]
 80073a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d09c      	beq.n	80072ea <_printf_float+0xae>
 80073b0:	232d      	movs	r3, #45	; 0x2d
 80073b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073b6:	e798      	b.n	80072ea <_printf_float+0xae>
 80073b8:	9a06      	ldr	r2, [sp, #24]
 80073ba:	2a47      	cmp	r2, #71	; 0x47
 80073bc:	d1be      	bne.n	800733c <_printf_float+0x100>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1bc      	bne.n	800733c <_printf_float+0x100>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e7b9      	b.n	800733a <_printf_float+0xfe>
 80073c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80073ca:	d118      	bne.n	80073fe <_printf_float+0x1c2>
 80073cc:	2900      	cmp	r1, #0
 80073ce:	6863      	ldr	r3, [r4, #4]
 80073d0:	dd0b      	ble.n	80073ea <_printf_float+0x1ae>
 80073d2:	6121      	str	r1, [r4, #16]
 80073d4:	b913      	cbnz	r3, 80073dc <_printf_float+0x1a0>
 80073d6:	6822      	ldr	r2, [r4, #0]
 80073d8:	07d0      	lsls	r0, r2, #31
 80073da:	d502      	bpl.n	80073e2 <_printf_float+0x1a6>
 80073dc:	3301      	adds	r3, #1
 80073de:	440b      	add	r3, r1
 80073e0:	6123      	str	r3, [r4, #16]
 80073e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80073e4:	f04f 0900 	mov.w	r9, #0
 80073e8:	e7de      	b.n	80073a8 <_printf_float+0x16c>
 80073ea:	b913      	cbnz	r3, 80073f2 <_printf_float+0x1b6>
 80073ec:	6822      	ldr	r2, [r4, #0]
 80073ee:	07d2      	lsls	r2, r2, #31
 80073f0:	d501      	bpl.n	80073f6 <_printf_float+0x1ba>
 80073f2:	3302      	adds	r3, #2
 80073f4:	e7f4      	b.n	80073e0 <_printf_float+0x1a4>
 80073f6:	2301      	movs	r3, #1
 80073f8:	e7f2      	b.n	80073e0 <_printf_float+0x1a4>
 80073fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80073fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007400:	4299      	cmp	r1, r3
 8007402:	db05      	blt.n	8007410 <_printf_float+0x1d4>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	6121      	str	r1, [r4, #16]
 8007408:	07d8      	lsls	r0, r3, #31
 800740a:	d5ea      	bpl.n	80073e2 <_printf_float+0x1a6>
 800740c:	1c4b      	adds	r3, r1, #1
 800740e:	e7e7      	b.n	80073e0 <_printf_float+0x1a4>
 8007410:	2900      	cmp	r1, #0
 8007412:	bfd4      	ite	le
 8007414:	f1c1 0202 	rsble	r2, r1, #2
 8007418:	2201      	movgt	r2, #1
 800741a:	4413      	add	r3, r2
 800741c:	e7e0      	b.n	80073e0 <_printf_float+0x1a4>
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	055a      	lsls	r2, r3, #21
 8007422:	d407      	bmi.n	8007434 <_printf_float+0x1f8>
 8007424:	6923      	ldr	r3, [r4, #16]
 8007426:	4642      	mov	r2, r8
 8007428:	4631      	mov	r1, r6
 800742a:	4628      	mov	r0, r5
 800742c:	47b8      	blx	r7
 800742e:	3001      	adds	r0, #1
 8007430:	d12c      	bne.n	800748c <_printf_float+0x250>
 8007432:	e764      	b.n	80072fe <_printf_float+0xc2>
 8007434:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007438:	f240 80e0 	bls.w	80075fc <_printf_float+0x3c0>
 800743c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007440:	2200      	movs	r2, #0
 8007442:	2300      	movs	r3, #0
 8007444:	f7f9 fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8007448:	2800      	cmp	r0, #0
 800744a:	d034      	beq.n	80074b6 <_printf_float+0x27a>
 800744c:	4a37      	ldr	r2, [pc, #220]	; (800752c <_printf_float+0x2f0>)
 800744e:	2301      	movs	r3, #1
 8007450:	4631      	mov	r1, r6
 8007452:	4628      	mov	r0, r5
 8007454:	47b8      	blx	r7
 8007456:	3001      	adds	r0, #1
 8007458:	f43f af51 	beq.w	80072fe <_printf_float+0xc2>
 800745c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007460:	429a      	cmp	r2, r3
 8007462:	db02      	blt.n	800746a <_printf_float+0x22e>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	07d8      	lsls	r0, r3, #31
 8007468:	d510      	bpl.n	800748c <_printf_float+0x250>
 800746a:	ee18 3a10 	vmov	r3, s16
 800746e:	4652      	mov	r2, sl
 8007470:	4631      	mov	r1, r6
 8007472:	4628      	mov	r0, r5
 8007474:	47b8      	blx	r7
 8007476:	3001      	adds	r0, #1
 8007478:	f43f af41 	beq.w	80072fe <_printf_float+0xc2>
 800747c:	f04f 0800 	mov.w	r8, #0
 8007480:	f104 091a 	add.w	r9, r4, #26
 8007484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007486:	3b01      	subs	r3, #1
 8007488:	4543      	cmp	r3, r8
 800748a:	dc09      	bgt.n	80074a0 <_printf_float+0x264>
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	079b      	lsls	r3, r3, #30
 8007490:	f100 8105 	bmi.w	800769e <_printf_float+0x462>
 8007494:	68e0      	ldr	r0, [r4, #12]
 8007496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007498:	4298      	cmp	r0, r3
 800749a:	bfb8      	it	lt
 800749c:	4618      	movlt	r0, r3
 800749e:	e730      	b.n	8007302 <_printf_float+0xc6>
 80074a0:	2301      	movs	r3, #1
 80074a2:	464a      	mov	r2, r9
 80074a4:	4631      	mov	r1, r6
 80074a6:	4628      	mov	r0, r5
 80074a8:	47b8      	blx	r7
 80074aa:	3001      	adds	r0, #1
 80074ac:	f43f af27 	beq.w	80072fe <_printf_float+0xc2>
 80074b0:	f108 0801 	add.w	r8, r8, #1
 80074b4:	e7e6      	b.n	8007484 <_printf_float+0x248>
 80074b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	dc39      	bgt.n	8007530 <_printf_float+0x2f4>
 80074bc:	4a1b      	ldr	r2, [pc, #108]	; (800752c <_printf_float+0x2f0>)
 80074be:	2301      	movs	r3, #1
 80074c0:	4631      	mov	r1, r6
 80074c2:	4628      	mov	r0, r5
 80074c4:	47b8      	blx	r7
 80074c6:	3001      	adds	r0, #1
 80074c8:	f43f af19 	beq.w	80072fe <_printf_float+0xc2>
 80074cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074d0:	4313      	orrs	r3, r2
 80074d2:	d102      	bne.n	80074da <_printf_float+0x29e>
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	07d9      	lsls	r1, r3, #31
 80074d8:	d5d8      	bpl.n	800748c <_printf_float+0x250>
 80074da:	ee18 3a10 	vmov	r3, s16
 80074de:	4652      	mov	r2, sl
 80074e0:	4631      	mov	r1, r6
 80074e2:	4628      	mov	r0, r5
 80074e4:	47b8      	blx	r7
 80074e6:	3001      	adds	r0, #1
 80074e8:	f43f af09 	beq.w	80072fe <_printf_float+0xc2>
 80074ec:	f04f 0900 	mov.w	r9, #0
 80074f0:	f104 0a1a 	add.w	sl, r4, #26
 80074f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f6:	425b      	negs	r3, r3
 80074f8:	454b      	cmp	r3, r9
 80074fa:	dc01      	bgt.n	8007500 <_printf_float+0x2c4>
 80074fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074fe:	e792      	b.n	8007426 <_printf_float+0x1ea>
 8007500:	2301      	movs	r3, #1
 8007502:	4652      	mov	r2, sl
 8007504:	4631      	mov	r1, r6
 8007506:	4628      	mov	r0, r5
 8007508:	47b8      	blx	r7
 800750a:	3001      	adds	r0, #1
 800750c:	f43f aef7 	beq.w	80072fe <_printf_float+0xc2>
 8007510:	f109 0901 	add.w	r9, r9, #1
 8007514:	e7ee      	b.n	80074f4 <_printf_float+0x2b8>
 8007516:	bf00      	nop
 8007518:	7fefffff 	.word	0x7fefffff
 800751c:	0800a37c 	.word	0x0800a37c
 8007520:	0800a380 	.word	0x0800a380
 8007524:	0800a388 	.word	0x0800a388
 8007528:	0800a384 	.word	0x0800a384
 800752c:	0800a38c 	.word	0x0800a38c
 8007530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007532:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007534:	429a      	cmp	r2, r3
 8007536:	bfa8      	it	ge
 8007538:	461a      	movge	r2, r3
 800753a:	2a00      	cmp	r2, #0
 800753c:	4691      	mov	r9, r2
 800753e:	dc37      	bgt.n	80075b0 <_printf_float+0x374>
 8007540:	f04f 0b00 	mov.w	fp, #0
 8007544:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007548:	f104 021a 	add.w	r2, r4, #26
 800754c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800754e:	9305      	str	r3, [sp, #20]
 8007550:	eba3 0309 	sub.w	r3, r3, r9
 8007554:	455b      	cmp	r3, fp
 8007556:	dc33      	bgt.n	80075c0 <_printf_float+0x384>
 8007558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800755c:	429a      	cmp	r2, r3
 800755e:	db3b      	blt.n	80075d8 <_printf_float+0x39c>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	07da      	lsls	r2, r3, #31
 8007564:	d438      	bmi.n	80075d8 <_printf_float+0x39c>
 8007566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007568:	9a05      	ldr	r2, [sp, #20]
 800756a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800756c:	1a9a      	subs	r2, r3, r2
 800756e:	eba3 0901 	sub.w	r9, r3, r1
 8007572:	4591      	cmp	r9, r2
 8007574:	bfa8      	it	ge
 8007576:	4691      	movge	r9, r2
 8007578:	f1b9 0f00 	cmp.w	r9, #0
 800757c:	dc35      	bgt.n	80075ea <_printf_float+0x3ae>
 800757e:	f04f 0800 	mov.w	r8, #0
 8007582:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007586:	f104 0a1a 	add.w	sl, r4, #26
 800758a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800758e:	1a9b      	subs	r3, r3, r2
 8007590:	eba3 0309 	sub.w	r3, r3, r9
 8007594:	4543      	cmp	r3, r8
 8007596:	f77f af79 	ble.w	800748c <_printf_float+0x250>
 800759a:	2301      	movs	r3, #1
 800759c:	4652      	mov	r2, sl
 800759e:	4631      	mov	r1, r6
 80075a0:	4628      	mov	r0, r5
 80075a2:	47b8      	blx	r7
 80075a4:	3001      	adds	r0, #1
 80075a6:	f43f aeaa 	beq.w	80072fe <_printf_float+0xc2>
 80075aa:	f108 0801 	add.w	r8, r8, #1
 80075ae:	e7ec      	b.n	800758a <_printf_float+0x34e>
 80075b0:	4613      	mov	r3, r2
 80075b2:	4631      	mov	r1, r6
 80075b4:	4642      	mov	r2, r8
 80075b6:	4628      	mov	r0, r5
 80075b8:	47b8      	blx	r7
 80075ba:	3001      	adds	r0, #1
 80075bc:	d1c0      	bne.n	8007540 <_printf_float+0x304>
 80075be:	e69e      	b.n	80072fe <_printf_float+0xc2>
 80075c0:	2301      	movs	r3, #1
 80075c2:	4631      	mov	r1, r6
 80075c4:	4628      	mov	r0, r5
 80075c6:	9205      	str	r2, [sp, #20]
 80075c8:	47b8      	blx	r7
 80075ca:	3001      	adds	r0, #1
 80075cc:	f43f ae97 	beq.w	80072fe <_printf_float+0xc2>
 80075d0:	9a05      	ldr	r2, [sp, #20]
 80075d2:	f10b 0b01 	add.w	fp, fp, #1
 80075d6:	e7b9      	b.n	800754c <_printf_float+0x310>
 80075d8:	ee18 3a10 	vmov	r3, s16
 80075dc:	4652      	mov	r2, sl
 80075de:	4631      	mov	r1, r6
 80075e0:	4628      	mov	r0, r5
 80075e2:	47b8      	blx	r7
 80075e4:	3001      	adds	r0, #1
 80075e6:	d1be      	bne.n	8007566 <_printf_float+0x32a>
 80075e8:	e689      	b.n	80072fe <_printf_float+0xc2>
 80075ea:	9a05      	ldr	r2, [sp, #20]
 80075ec:	464b      	mov	r3, r9
 80075ee:	4442      	add	r2, r8
 80075f0:	4631      	mov	r1, r6
 80075f2:	4628      	mov	r0, r5
 80075f4:	47b8      	blx	r7
 80075f6:	3001      	adds	r0, #1
 80075f8:	d1c1      	bne.n	800757e <_printf_float+0x342>
 80075fa:	e680      	b.n	80072fe <_printf_float+0xc2>
 80075fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075fe:	2a01      	cmp	r2, #1
 8007600:	dc01      	bgt.n	8007606 <_printf_float+0x3ca>
 8007602:	07db      	lsls	r3, r3, #31
 8007604:	d538      	bpl.n	8007678 <_printf_float+0x43c>
 8007606:	2301      	movs	r3, #1
 8007608:	4642      	mov	r2, r8
 800760a:	4631      	mov	r1, r6
 800760c:	4628      	mov	r0, r5
 800760e:	47b8      	blx	r7
 8007610:	3001      	adds	r0, #1
 8007612:	f43f ae74 	beq.w	80072fe <_printf_float+0xc2>
 8007616:	ee18 3a10 	vmov	r3, s16
 800761a:	4652      	mov	r2, sl
 800761c:	4631      	mov	r1, r6
 800761e:	4628      	mov	r0, r5
 8007620:	47b8      	blx	r7
 8007622:	3001      	adds	r0, #1
 8007624:	f43f ae6b 	beq.w	80072fe <_printf_float+0xc2>
 8007628:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800762c:	2200      	movs	r2, #0
 800762e:	2300      	movs	r3, #0
 8007630:	f7f9 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007634:	b9d8      	cbnz	r0, 800766e <_printf_float+0x432>
 8007636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007638:	f108 0201 	add.w	r2, r8, #1
 800763c:	3b01      	subs	r3, #1
 800763e:	4631      	mov	r1, r6
 8007640:	4628      	mov	r0, r5
 8007642:	47b8      	blx	r7
 8007644:	3001      	adds	r0, #1
 8007646:	d10e      	bne.n	8007666 <_printf_float+0x42a>
 8007648:	e659      	b.n	80072fe <_printf_float+0xc2>
 800764a:	2301      	movs	r3, #1
 800764c:	4652      	mov	r2, sl
 800764e:	4631      	mov	r1, r6
 8007650:	4628      	mov	r0, r5
 8007652:	47b8      	blx	r7
 8007654:	3001      	adds	r0, #1
 8007656:	f43f ae52 	beq.w	80072fe <_printf_float+0xc2>
 800765a:	f108 0801 	add.w	r8, r8, #1
 800765e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007660:	3b01      	subs	r3, #1
 8007662:	4543      	cmp	r3, r8
 8007664:	dcf1      	bgt.n	800764a <_printf_float+0x40e>
 8007666:	464b      	mov	r3, r9
 8007668:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800766c:	e6dc      	b.n	8007428 <_printf_float+0x1ec>
 800766e:	f04f 0800 	mov.w	r8, #0
 8007672:	f104 0a1a 	add.w	sl, r4, #26
 8007676:	e7f2      	b.n	800765e <_printf_float+0x422>
 8007678:	2301      	movs	r3, #1
 800767a:	4642      	mov	r2, r8
 800767c:	e7df      	b.n	800763e <_printf_float+0x402>
 800767e:	2301      	movs	r3, #1
 8007680:	464a      	mov	r2, r9
 8007682:	4631      	mov	r1, r6
 8007684:	4628      	mov	r0, r5
 8007686:	47b8      	blx	r7
 8007688:	3001      	adds	r0, #1
 800768a:	f43f ae38 	beq.w	80072fe <_printf_float+0xc2>
 800768e:	f108 0801 	add.w	r8, r8, #1
 8007692:	68e3      	ldr	r3, [r4, #12]
 8007694:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007696:	1a5b      	subs	r3, r3, r1
 8007698:	4543      	cmp	r3, r8
 800769a:	dcf0      	bgt.n	800767e <_printf_float+0x442>
 800769c:	e6fa      	b.n	8007494 <_printf_float+0x258>
 800769e:	f04f 0800 	mov.w	r8, #0
 80076a2:	f104 0919 	add.w	r9, r4, #25
 80076a6:	e7f4      	b.n	8007692 <_printf_float+0x456>

080076a8 <_printf_common>:
 80076a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ac:	4616      	mov	r6, r2
 80076ae:	4699      	mov	r9, r3
 80076b0:	688a      	ldr	r2, [r1, #8]
 80076b2:	690b      	ldr	r3, [r1, #16]
 80076b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076b8:	4293      	cmp	r3, r2
 80076ba:	bfb8      	it	lt
 80076bc:	4613      	movlt	r3, r2
 80076be:	6033      	str	r3, [r6, #0]
 80076c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076c4:	4607      	mov	r7, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	b10a      	cbz	r2, 80076ce <_printf_common+0x26>
 80076ca:	3301      	adds	r3, #1
 80076cc:	6033      	str	r3, [r6, #0]
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	0699      	lsls	r1, r3, #26
 80076d2:	bf42      	ittt	mi
 80076d4:	6833      	ldrmi	r3, [r6, #0]
 80076d6:	3302      	addmi	r3, #2
 80076d8:	6033      	strmi	r3, [r6, #0]
 80076da:	6825      	ldr	r5, [r4, #0]
 80076dc:	f015 0506 	ands.w	r5, r5, #6
 80076e0:	d106      	bne.n	80076f0 <_printf_common+0x48>
 80076e2:	f104 0a19 	add.w	sl, r4, #25
 80076e6:	68e3      	ldr	r3, [r4, #12]
 80076e8:	6832      	ldr	r2, [r6, #0]
 80076ea:	1a9b      	subs	r3, r3, r2
 80076ec:	42ab      	cmp	r3, r5
 80076ee:	dc26      	bgt.n	800773e <_printf_common+0x96>
 80076f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076f4:	1e13      	subs	r3, r2, #0
 80076f6:	6822      	ldr	r2, [r4, #0]
 80076f8:	bf18      	it	ne
 80076fa:	2301      	movne	r3, #1
 80076fc:	0692      	lsls	r2, r2, #26
 80076fe:	d42b      	bmi.n	8007758 <_printf_common+0xb0>
 8007700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007704:	4649      	mov	r1, r9
 8007706:	4638      	mov	r0, r7
 8007708:	47c0      	blx	r8
 800770a:	3001      	adds	r0, #1
 800770c:	d01e      	beq.n	800774c <_printf_common+0xa4>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	68e5      	ldr	r5, [r4, #12]
 8007712:	6832      	ldr	r2, [r6, #0]
 8007714:	f003 0306 	and.w	r3, r3, #6
 8007718:	2b04      	cmp	r3, #4
 800771a:	bf08      	it	eq
 800771c:	1aad      	subeq	r5, r5, r2
 800771e:	68a3      	ldr	r3, [r4, #8]
 8007720:	6922      	ldr	r2, [r4, #16]
 8007722:	bf0c      	ite	eq
 8007724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007728:	2500      	movne	r5, #0
 800772a:	4293      	cmp	r3, r2
 800772c:	bfc4      	itt	gt
 800772e:	1a9b      	subgt	r3, r3, r2
 8007730:	18ed      	addgt	r5, r5, r3
 8007732:	2600      	movs	r6, #0
 8007734:	341a      	adds	r4, #26
 8007736:	42b5      	cmp	r5, r6
 8007738:	d11a      	bne.n	8007770 <_printf_common+0xc8>
 800773a:	2000      	movs	r0, #0
 800773c:	e008      	b.n	8007750 <_printf_common+0xa8>
 800773e:	2301      	movs	r3, #1
 8007740:	4652      	mov	r2, sl
 8007742:	4649      	mov	r1, r9
 8007744:	4638      	mov	r0, r7
 8007746:	47c0      	blx	r8
 8007748:	3001      	adds	r0, #1
 800774a:	d103      	bne.n	8007754 <_printf_common+0xac>
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007754:	3501      	adds	r5, #1
 8007756:	e7c6      	b.n	80076e6 <_printf_common+0x3e>
 8007758:	18e1      	adds	r1, r4, r3
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	2030      	movs	r0, #48	; 0x30
 800775e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007762:	4422      	add	r2, r4
 8007764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800776c:	3302      	adds	r3, #2
 800776e:	e7c7      	b.n	8007700 <_printf_common+0x58>
 8007770:	2301      	movs	r3, #1
 8007772:	4622      	mov	r2, r4
 8007774:	4649      	mov	r1, r9
 8007776:	4638      	mov	r0, r7
 8007778:	47c0      	blx	r8
 800777a:	3001      	adds	r0, #1
 800777c:	d0e6      	beq.n	800774c <_printf_common+0xa4>
 800777e:	3601      	adds	r6, #1
 8007780:	e7d9      	b.n	8007736 <_printf_common+0x8e>
	...

08007784 <_printf_i>:
 8007784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007788:	7e0f      	ldrb	r7, [r1, #24]
 800778a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800778c:	2f78      	cmp	r7, #120	; 0x78
 800778e:	4691      	mov	r9, r2
 8007790:	4680      	mov	r8, r0
 8007792:	460c      	mov	r4, r1
 8007794:	469a      	mov	sl, r3
 8007796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800779a:	d807      	bhi.n	80077ac <_printf_i+0x28>
 800779c:	2f62      	cmp	r7, #98	; 0x62
 800779e:	d80a      	bhi.n	80077b6 <_printf_i+0x32>
 80077a0:	2f00      	cmp	r7, #0
 80077a2:	f000 80d8 	beq.w	8007956 <_printf_i+0x1d2>
 80077a6:	2f58      	cmp	r7, #88	; 0x58
 80077a8:	f000 80a3 	beq.w	80078f2 <_printf_i+0x16e>
 80077ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077b4:	e03a      	b.n	800782c <_printf_i+0xa8>
 80077b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077ba:	2b15      	cmp	r3, #21
 80077bc:	d8f6      	bhi.n	80077ac <_printf_i+0x28>
 80077be:	a101      	add	r1, pc, #4	; (adr r1, 80077c4 <_printf_i+0x40>)
 80077c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077c4:	0800781d 	.word	0x0800781d
 80077c8:	08007831 	.word	0x08007831
 80077cc:	080077ad 	.word	0x080077ad
 80077d0:	080077ad 	.word	0x080077ad
 80077d4:	080077ad 	.word	0x080077ad
 80077d8:	080077ad 	.word	0x080077ad
 80077dc:	08007831 	.word	0x08007831
 80077e0:	080077ad 	.word	0x080077ad
 80077e4:	080077ad 	.word	0x080077ad
 80077e8:	080077ad 	.word	0x080077ad
 80077ec:	080077ad 	.word	0x080077ad
 80077f0:	0800793d 	.word	0x0800793d
 80077f4:	08007861 	.word	0x08007861
 80077f8:	0800791f 	.word	0x0800791f
 80077fc:	080077ad 	.word	0x080077ad
 8007800:	080077ad 	.word	0x080077ad
 8007804:	0800795f 	.word	0x0800795f
 8007808:	080077ad 	.word	0x080077ad
 800780c:	08007861 	.word	0x08007861
 8007810:	080077ad 	.word	0x080077ad
 8007814:	080077ad 	.word	0x080077ad
 8007818:	08007927 	.word	0x08007927
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	1d1a      	adds	r2, r3, #4
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	602a      	str	r2, [r5, #0]
 8007824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800782c:	2301      	movs	r3, #1
 800782e:	e0a3      	b.n	8007978 <_printf_i+0x1f4>
 8007830:	6820      	ldr	r0, [r4, #0]
 8007832:	6829      	ldr	r1, [r5, #0]
 8007834:	0606      	lsls	r6, r0, #24
 8007836:	f101 0304 	add.w	r3, r1, #4
 800783a:	d50a      	bpl.n	8007852 <_printf_i+0xce>
 800783c:	680e      	ldr	r6, [r1, #0]
 800783e:	602b      	str	r3, [r5, #0]
 8007840:	2e00      	cmp	r6, #0
 8007842:	da03      	bge.n	800784c <_printf_i+0xc8>
 8007844:	232d      	movs	r3, #45	; 0x2d
 8007846:	4276      	negs	r6, r6
 8007848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800784c:	485e      	ldr	r0, [pc, #376]	; (80079c8 <_printf_i+0x244>)
 800784e:	230a      	movs	r3, #10
 8007850:	e019      	b.n	8007886 <_printf_i+0x102>
 8007852:	680e      	ldr	r6, [r1, #0]
 8007854:	602b      	str	r3, [r5, #0]
 8007856:	f010 0f40 	tst.w	r0, #64	; 0x40
 800785a:	bf18      	it	ne
 800785c:	b236      	sxthne	r6, r6
 800785e:	e7ef      	b.n	8007840 <_printf_i+0xbc>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	6820      	ldr	r0, [r4, #0]
 8007864:	1d19      	adds	r1, r3, #4
 8007866:	6029      	str	r1, [r5, #0]
 8007868:	0601      	lsls	r1, r0, #24
 800786a:	d501      	bpl.n	8007870 <_printf_i+0xec>
 800786c:	681e      	ldr	r6, [r3, #0]
 800786e:	e002      	b.n	8007876 <_printf_i+0xf2>
 8007870:	0646      	lsls	r6, r0, #25
 8007872:	d5fb      	bpl.n	800786c <_printf_i+0xe8>
 8007874:	881e      	ldrh	r6, [r3, #0]
 8007876:	4854      	ldr	r0, [pc, #336]	; (80079c8 <_printf_i+0x244>)
 8007878:	2f6f      	cmp	r7, #111	; 0x6f
 800787a:	bf0c      	ite	eq
 800787c:	2308      	moveq	r3, #8
 800787e:	230a      	movne	r3, #10
 8007880:	2100      	movs	r1, #0
 8007882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007886:	6865      	ldr	r5, [r4, #4]
 8007888:	60a5      	str	r5, [r4, #8]
 800788a:	2d00      	cmp	r5, #0
 800788c:	bfa2      	ittt	ge
 800788e:	6821      	ldrge	r1, [r4, #0]
 8007890:	f021 0104 	bicge.w	r1, r1, #4
 8007894:	6021      	strge	r1, [r4, #0]
 8007896:	b90e      	cbnz	r6, 800789c <_printf_i+0x118>
 8007898:	2d00      	cmp	r5, #0
 800789a:	d04d      	beq.n	8007938 <_printf_i+0x1b4>
 800789c:	4615      	mov	r5, r2
 800789e:	fbb6 f1f3 	udiv	r1, r6, r3
 80078a2:	fb03 6711 	mls	r7, r3, r1, r6
 80078a6:	5dc7      	ldrb	r7, [r0, r7]
 80078a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078ac:	4637      	mov	r7, r6
 80078ae:	42bb      	cmp	r3, r7
 80078b0:	460e      	mov	r6, r1
 80078b2:	d9f4      	bls.n	800789e <_printf_i+0x11a>
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d10b      	bne.n	80078d0 <_printf_i+0x14c>
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	07de      	lsls	r6, r3, #31
 80078bc:	d508      	bpl.n	80078d0 <_printf_i+0x14c>
 80078be:	6923      	ldr	r3, [r4, #16]
 80078c0:	6861      	ldr	r1, [r4, #4]
 80078c2:	4299      	cmp	r1, r3
 80078c4:	bfde      	ittt	le
 80078c6:	2330      	movle	r3, #48	; 0x30
 80078c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078d0:	1b52      	subs	r2, r2, r5
 80078d2:	6122      	str	r2, [r4, #16]
 80078d4:	f8cd a000 	str.w	sl, [sp]
 80078d8:	464b      	mov	r3, r9
 80078da:	aa03      	add	r2, sp, #12
 80078dc:	4621      	mov	r1, r4
 80078de:	4640      	mov	r0, r8
 80078e0:	f7ff fee2 	bl	80076a8 <_printf_common>
 80078e4:	3001      	adds	r0, #1
 80078e6:	d14c      	bne.n	8007982 <_printf_i+0x1fe>
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ec:	b004      	add	sp, #16
 80078ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f2:	4835      	ldr	r0, [pc, #212]	; (80079c8 <_printf_i+0x244>)
 80078f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078f8:	6829      	ldr	r1, [r5, #0]
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007900:	6029      	str	r1, [r5, #0]
 8007902:	061d      	lsls	r5, r3, #24
 8007904:	d514      	bpl.n	8007930 <_printf_i+0x1ac>
 8007906:	07df      	lsls	r7, r3, #31
 8007908:	bf44      	itt	mi
 800790a:	f043 0320 	orrmi.w	r3, r3, #32
 800790e:	6023      	strmi	r3, [r4, #0]
 8007910:	b91e      	cbnz	r6, 800791a <_printf_i+0x196>
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	f023 0320 	bic.w	r3, r3, #32
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	2310      	movs	r3, #16
 800791c:	e7b0      	b.n	8007880 <_printf_i+0xfc>
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	f043 0320 	orr.w	r3, r3, #32
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	2378      	movs	r3, #120	; 0x78
 8007928:	4828      	ldr	r0, [pc, #160]	; (80079cc <_printf_i+0x248>)
 800792a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800792e:	e7e3      	b.n	80078f8 <_printf_i+0x174>
 8007930:	0659      	lsls	r1, r3, #25
 8007932:	bf48      	it	mi
 8007934:	b2b6      	uxthmi	r6, r6
 8007936:	e7e6      	b.n	8007906 <_printf_i+0x182>
 8007938:	4615      	mov	r5, r2
 800793a:	e7bb      	b.n	80078b4 <_printf_i+0x130>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	6826      	ldr	r6, [r4, #0]
 8007940:	6961      	ldr	r1, [r4, #20]
 8007942:	1d18      	adds	r0, r3, #4
 8007944:	6028      	str	r0, [r5, #0]
 8007946:	0635      	lsls	r5, r6, #24
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	d501      	bpl.n	8007950 <_printf_i+0x1cc>
 800794c:	6019      	str	r1, [r3, #0]
 800794e:	e002      	b.n	8007956 <_printf_i+0x1d2>
 8007950:	0670      	lsls	r0, r6, #25
 8007952:	d5fb      	bpl.n	800794c <_printf_i+0x1c8>
 8007954:	8019      	strh	r1, [r3, #0]
 8007956:	2300      	movs	r3, #0
 8007958:	6123      	str	r3, [r4, #16]
 800795a:	4615      	mov	r5, r2
 800795c:	e7ba      	b.n	80078d4 <_printf_i+0x150>
 800795e:	682b      	ldr	r3, [r5, #0]
 8007960:	1d1a      	adds	r2, r3, #4
 8007962:	602a      	str	r2, [r5, #0]
 8007964:	681d      	ldr	r5, [r3, #0]
 8007966:	6862      	ldr	r2, [r4, #4]
 8007968:	2100      	movs	r1, #0
 800796a:	4628      	mov	r0, r5
 800796c:	f7f8 fc38 	bl	80001e0 <memchr>
 8007970:	b108      	cbz	r0, 8007976 <_printf_i+0x1f2>
 8007972:	1b40      	subs	r0, r0, r5
 8007974:	6060      	str	r0, [r4, #4]
 8007976:	6863      	ldr	r3, [r4, #4]
 8007978:	6123      	str	r3, [r4, #16]
 800797a:	2300      	movs	r3, #0
 800797c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007980:	e7a8      	b.n	80078d4 <_printf_i+0x150>
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	462a      	mov	r2, r5
 8007986:	4649      	mov	r1, r9
 8007988:	4640      	mov	r0, r8
 800798a:	47d0      	blx	sl
 800798c:	3001      	adds	r0, #1
 800798e:	d0ab      	beq.n	80078e8 <_printf_i+0x164>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	079b      	lsls	r3, r3, #30
 8007994:	d413      	bmi.n	80079be <_printf_i+0x23a>
 8007996:	68e0      	ldr	r0, [r4, #12]
 8007998:	9b03      	ldr	r3, [sp, #12]
 800799a:	4298      	cmp	r0, r3
 800799c:	bfb8      	it	lt
 800799e:	4618      	movlt	r0, r3
 80079a0:	e7a4      	b.n	80078ec <_printf_i+0x168>
 80079a2:	2301      	movs	r3, #1
 80079a4:	4632      	mov	r2, r6
 80079a6:	4649      	mov	r1, r9
 80079a8:	4640      	mov	r0, r8
 80079aa:	47d0      	blx	sl
 80079ac:	3001      	adds	r0, #1
 80079ae:	d09b      	beq.n	80078e8 <_printf_i+0x164>
 80079b0:	3501      	adds	r5, #1
 80079b2:	68e3      	ldr	r3, [r4, #12]
 80079b4:	9903      	ldr	r1, [sp, #12]
 80079b6:	1a5b      	subs	r3, r3, r1
 80079b8:	42ab      	cmp	r3, r5
 80079ba:	dcf2      	bgt.n	80079a2 <_printf_i+0x21e>
 80079bc:	e7eb      	b.n	8007996 <_printf_i+0x212>
 80079be:	2500      	movs	r5, #0
 80079c0:	f104 0619 	add.w	r6, r4, #25
 80079c4:	e7f5      	b.n	80079b2 <_printf_i+0x22e>
 80079c6:	bf00      	nop
 80079c8:	0800a38e 	.word	0x0800a38e
 80079cc:	0800a39f 	.word	0x0800a39f

080079d0 <_perror_r>:
 80079d0:	6983      	ldr	r3, [r0, #24]
 80079d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079d4:	68c4      	ldr	r4, [r0, #12]
 80079d6:	4605      	mov	r5, r0
 80079d8:	460e      	mov	r6, r1
 80079da:	b90b      	cbnz	r3, 80079e0 <_perror_r+0x10>
 80079dc:	f001 fada 	bl	8008f94 <__sinit>
 80079e0:	4b43      	ldr	r3, [pc, #268]	; (8007af0 <_perror_r+0x120>)
 80079e2:	429c      	cmp	r4, r3
 80079e4:	d132      	bne.n	8007a4c <_perror_r+0x7c>
 80079e6:	686c      	ldr	r4, [r5, #4]
 80079e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079ea:	07d8      	lsls	r0, r3, #31
 80079ec:	d405      	bmi.n	80079fa <_perror_r+0x2a>
 80079ee:	89a3      	ldrh	r3, [r4, #12]
 80079f0:	0599      	lsls	r1, r3, #22
 80079f2:	d402      	bmi.n	80079fa <_perror_r+0x2a>
 80079f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079f6:	f001 fb70 	bl	80090da <__retarget_lock_acquire_recursive>
 80079fa:	4621      	mov	r1, r4
 80079fc:	4628      	mov	r0, r5
 80079fe:	f001 f9f7 	bl	8008df0 <_fflush_r>
 8007a02:	bb6e      	cbnz	r6, 8007a60 <_perror_r+0x90>
 8007a04:	6829      	ldr	r1, [r5, #0]
 8007a06:	ab01      	add	r3, sp, #4
 8007a08:	2201      	movs	r2, #1
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f000 f8d6 	bl	8007bbc <_strerror_r>
 8007a10:	4607      	mov	r7, r0
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d14f      	bne.n	8007ab6 <_perror_r+0xe6>
 8007a16:	4837      	ldr	r0, [pc, #220]	; (8007af4 <_perror_r+0x124>)
 8007a18:	4f36      	ldr	r7, [pc, #216]	; (8007af4 <_perror_r+0x124>)
 8007a1a:	f7f8 fbd9 	bl	80001d0 <strlen>
 8007a1e:	4606      	mov	r6, r0
 8007a20:	b156      	cbz	r6, 8007a38 <_perror_r+0x68>
 8007a22:	4620      	mov	r0, r4
 8007a24:	f001 fa20 	bl	8008e68 <fileno>
 8007a28:	4633      	mov	r3, r6
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	463a      	mov	r2, r7
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f000 facc 	bl	8007fcc <_write_r>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	da51      	bge.n	8007adc <_perror_r+0x10c>
 8007a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a3c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a42:	07d2      	lsls	r2, r2, #31
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	d54c      	bpl.n	8007ae2 <_perror_r+0x112>
 8007a48:	b003      	add	sp, #12
 8007a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a4c:	4b2a      	ldr	r3, [pc, #168]	; (8007af8 <_perror_r+0x128>)
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	d101      	bne.n	8007a56 <_perror_r+0x86>
 8007a52:	68ac      	ldr	r4, [r5, #8]
 8007a54:	e7c8      	b.n	80079e8 <_perror_r+0x18>
 8007a56:	4b29      	ldr	r3, [pc, #164]	; (8007afc <_perror_r+0x12c>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	bf08      	it	eq
 8007a5c:	68ec      	ldreq	r4, [r5, #12]
 8007a5e:	e7c3      	b.n	80079e8 <_perror_r+0x18>
 8007a60:	7833      	ldrb	r3, [r6, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0ce      	beq.n	8007a04 <_perror_r+0x34>
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7f8 fbb2 	bl	80001d0 <strlen>
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	b157      	cbz	r7, 8007a86 <_perror_r+0xb6>
 8007a70:	4620      	mov	r0, r4
 8007a72:	f001 f9f9 	bl	8008e68 <fileno>
 8007a76:	463b      	mov	r3, r7
 8007a78:	4601      	mov	r1, r0
 8007a7a:	4632      	mov	r2, r6
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	f000 faa5 	bl	8007fcc <_write_r>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	da14      	bge.n	8007ab0 <_perror_r+0xe0>
 8007a86:	481e      	ldr	r0, [pc, #120]	; (8007b00 <_perror_r+0x130>)
 8007a88:	4f1d      	ldr	r7, [pc, #116]	; (8007b00 <_perror_r+0x130>)
 8007a8a:	f7f8 fba1 	bl	80001d0 <strlen>
 8007a8e:	4606      	mov	r6, r0
 8007a90:	2e00      	cmp	r6, #0
 8007a92:	d0b7      	beq.n	8007a04 <_perror_r+0x34>
 8007a94:	4620      	mov	r0, r4
 8007a96:	f001 f9e7 	bl	8008e68 <fileno>
 8007a9a:	4633      	mov	r3, r6
 8007a9c:	4601      	mov	r1, r0
 8007a9e:	463a      	mov	r2, r7
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f000 fa93 	bl	8007fcc <_write_r>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	dbac      	blt.n	8007a04 <_perror_r+0x34>
 8007aaa:	1a36      	subs	r6, r6, r0
 8007aac:	4407      	add	r7, r0
 8007aae:	e7ef      	b.n	8007a90 <_perror_r+0xc0>
 8007ab0:	1a3f      	subs	r7, r7, r0
 8007ab2:	4406      	add	r6, r0
 8007ab4:	e7db      	b.n	8007a6e <_perror_r+0x9e>
 8007ab6:	f7f8 fb8b 	bl	80001d0 <strlen>
 8007aba:	4606      	mov	r6, r0
 8007abc:	2e00      	cmp	r6, #0
 8007abe:	d0aa      	beq.n	8007a16 <_perror_r+0x46>
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f001 f9d1 	bl	8008e68 <fileno>
 8007ac6:	4633      	mov	r3, r6
 8007ac8:	4601      	mov	r1, r0
 8007aca:	463a      	mov	r2, r7
 8007acc:	4628      	mov	r0, r5
 8007ace:	f000 fa7d 	bl	8007fcc <_write_r>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	db9f      	blt.n	8007a16 <_perror_r+0x46>
 8007ad6:	1a36      	subs	r6, r6, r0
 8007ad8:	4407      	add	r7, r0
 8007ada:	e7ef      	b.n	8007abc <_perror_r+0xec>
 8007adc:	1a36      	subs	r6, r6, r0
 8007ade:	4407      	add	r7, r0
 8007ae0:	e79e      	b.n	8007a20 <_perror_r+0x50>
 8007ae2:	059b      	lsls	r3, r3, #22
 8007ae4:	d4b0      	bmi.n	8007a48 <_perror_r+0x78>
 8007ae6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ae8:	f001 faf8 	bl	80090dc <__retarget_lock_release_recursive>
 8007aec:	e7ac      	b.n	8007a48 <_perror_r+0x78>
 8007aee:	bf00      	nop
 8007af0:	0800aaf8 	.word	0x0800aaf8
 8007af4:	0800acdf 	.word	0x0800acdf
 8007af8:	0800ab18 	.word	0x0800ab18
 8007afc:	0800aad8 	.word	0x0800aad8
 8007b00:	0800acaf 	.word	0x0800acaf

08007b04 <perror>:
 8007b04:	4b02      	ldr	r3, [pc, #8]	; (8007b10 <perror+0xc>)
 8007b06:	4601      	mov	r1, r0
 8007b08:	6818      	ldr	r0, [r3, #0]
 8007b0a:	f7ff bf61 	b.w	80079d0 <_perror_r>
 8007b0e:	bf00      	nop
 8007b10:	2000003c 	.word	0x2000003c

08007b14 <_sbrk_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4d06      	ldr	r5, [pc, #24]	; (8007b30 <_sbrk_r+0x1c>)
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	4608      	mov	r0, r1
 8007b1e:	602b      	str	r3, [r5, #0]
 8007b20:	f7f9 ffdc 	bl	8001adc <_sbrk>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d102      	bne.n	8007b2e <_sbrk_r+0x1a>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	b103      	cbz	r3, 8007b2e <_sbrk_r+0x1a>
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	2000064c 	.word	0x2000064c

08007b34 <_raise_r>:
 8007b34:	291f      	cmp	r1, #31
 8007b36:	b538      	push	{r3, r4, r5, lr}
 8007b38:	4604      	mov	r4, r0
 8007b3a:	460d      	mov	r5, r1
 8007b3c:	d904      	bls.n	8007b48 <_raise_r+0x14>
 8007b3e:	2316      	movs	r3, #22
 8007b40:	6003      	str	r3, [r0, #0]
 8007b42:	f04f 30ff 	mov.w	r0, #4294967295
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b4a:	b112      	cbz	r2, 8007b52 <_raise_r+0x1e>
 8007b4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b50:	b94b      	cbnz	r3, 8007b66 <_raise_r+0x32>
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 f830 	bl	8007bb8 <_getpid_r>
 8007b58:	462a      	mov	r2, r5
 8007b5a:	4601      	mov	r1, r0
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b62:	f000 b817 	b.w	8007b94 <_kill_r>
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d00a      	beq.n	8007b80 <_raise_r+0x4c>
 8007b6a:	1c59      	adds	r1, r3, #1
 8007b6c:	d103      	bne.n	8007b76 <_raise_r+0x42>
 8007b6e:	2316      	movs	r3, #22
 8007b70:	6003      	str	r3, [r0, #0]
 8007b72:	2001      	movs	r0, #1
 8007b74:	e7e7      	b.n	8007b46 <_raise_r+0x12>
 8007b76:	2400      	movs	r4, #0
 8007b78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	4798      	blx	r3
 8007b80:	2000      	movs	r0, #0
 8007b82:	e7e0      	b.n	8007b46 <_raise_r+0x12>

08007b84 <raise>:
 8007b84:	4b02      	ldr	r3, [pc, #8]	; (8007b90 <raise+0xc>)
 8007b86:	4601      	mov	r1, r0
 8007b88:	6818      	ldr	r0, [r3, #0]
 8007b8a:	f7ff bfd3 	b.w	8007b34 <_raise_r>
 8007b8e:	bf00      	nop
 8007b90:	2000003c 	.word	0x2000003c

08007b94 <_kill_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4d07      	ldr	r5, [pc, #28]	; (8007bb4 <_kill_r+0x20>)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	602b      	str	r3, [r5, #0]
 8007ba2:	f7f9 ff13 	bl	80019cc <_kill>
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	d102      	bne.n	8007bb0 <_kill_r+0x1c>
 8007baa:	682b      	ldr	r3, [r5, #0]
 8007bac:	b103      	cbz	r3, 8007bb0 <_kill_r+0x1c>
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	bd38      	pop	{r3, r4, r5, pc}
 8007bb2:	bf00      	nop
 8007bb4:	2000064c 	.word	0x2000064c

08007bb8 <_getpid_r>:
 8007bb8:	f7f9 bf00 	b.w	80019bc <_getpid>

08007bbc <_strerror_r>:
 8007bbc:	b510      	push	{r4, lr}
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	288e      	cmp	r0, #142	; 0x8e
 8007bc6:	f200 8130 	bhi.w	8007e2a <_strerror_r+0x26e>
 8007bca:	e8df f010 	tbh	[pc, r0, lsl #1]
 8007bce:	0139      	.short	0x0139
 8007bd0:	0092008f 	.word	0x0092008f
 8007bd4:	00960094 	.word	0x00960094
 8007bd8:	009a0098 	.word	0x009a0098
 8007bdc:	009e009c 	.word	0x009e009c
 8007be0:	00a400a2 	.word	0x00a400a2
 8007be4:	00aa00a8 	.word	0x00aa00a8
 8007be8:	00ae00ac 	.word	0x00ae00ac
 8007bec:	00b0012e 	.word	0x00b0012e
 8007bf0:	00b400b2 	.word	0x00b400b2
 8007bf4:	00b800b6 	.word	0x00b800b6
 8007bf8:	00c000be 	.word	0x00c000be
 8007bfc:	00c800c6 	.word	0x00c800c6
 8007c00:	00cc00ca 	.word	0x00cc00ca
 8007c04:	00d200ce 	.word	0x00d200ce
 8007c08:	00d800d6 	.word	0x00d800d6
 8007c0c:	00dc00da 	.word	0x00dc00da
 8007c10:	00e000de 	.word	0x00e000de
 8007c14:	00e400e2 	.word	0x00e400e2
 8007c18:	012e012e 	.word	0x012e012e
 8007c1c:	012e012e 	.word	0x012e012e
 8007c20:	012e012e 	.word	0x012e012e
 8007c24:	012e012e 	.word	0x012e012e
 8007c28:	00ec00e8 	.word	0x00ec00e8
 8007c2c:	012e012e 	.word	0x012e012e
 8007c30:	012e012e 	.word	0x012e012e
 8007c34:	012e012e 	.word	0x012e012e
 8007c38:	012e012e 	.word	0x012e012e
 8007c3c:	012e012e 	.word	0x012e012e
 8007c40:	012e012e 	.word	0x012e012e
 8007c44:	00ee012e 	.word	0x00ee012e
 8007c48:	00f00108 	.word	0x00f00108
 8007c4c:	012e00f2 	.word	0x012e00f2
 8007c50:	012e012e 	.word	0x012e012e
 8007c54:	012e00f4 	.word	0x012e00f4
 8007c58:	012e012e 	.word	0x012e012e
 8007c5c:	012e00f6 	.word	0x012e00f6
 8007c60:	00fa012e 	.word	0x00fa012e
 8007c64:	012e012e 	.word	0x012e012e
 8007c68:	012e00fc 	.word	0x012e00fc
 8007c6c:	012e012e 	.word	0x012e012e
 8007c70:	012e012e 	.word	0x012e012e
 8007c74:	012e012e 	.word	0x012e012e
 8007c78:	012e012e 	.word	0x012e012e
 8007c7c:	00fe012e 	.word	0x00fe012e
 8007c80:	0100012e 	.word	0x0100012e
 8007c84:	01040102 	.word	0x01040102
 8007c88:	012e012e 	.word	0x012e012e
 8007c8c:	012e0126 	.word	0x012e0126
 8007c90:	012e012e 	.word	0x012e012e
 8007c94:	012e012e 	.word	0x012e012e
 8007c98:	012e012e 	.word	0x012e012e
 8007c9c:	0114012e 	.word	0x0114012e
 8007ca0:	010a0106 	.word	0x010a0106
 8007ca4:	010e010c 	.word	0x010e010c
 8007ca8:	012e0110 	.word	0x012e0110
 8007cac:	01160112 	.word	0x01160112
 8007cb0:	00ea011a 	.word	0x00ea011a
 8007cb4:	012c00c2 	.word	0x012c00c2
 8007cb8:	00d000ba 	.word	0x00d000ba
 8007cbc:	00a000bc 	.word	0x00a000bc
 8007cc0:	012a00a6 	.word	0x012a00a6
 8007cc4:	012e00f8 	.word	0x012e00f8
 8007cc8:	00c40118 	.word	0x00c40118
 8007ccc:	011c011e 	.word	0x011c011e
 8007cd0:	012e012e 	.word	0x012e012e
 8007cd4:	012e012e 	.word	0x012e012e
 8007cd8:	00d4012e 	.word	0x00d4012e
 8007cdc:	012e012e 	.word	0x012e012e
 8007ce0:	00e6012e 	.word	0x00e6012e
 8007ce4:	01200128 	.word	0x01200128
 8007ce8:	01240122 	.word	0x01240122
 8007cec:	4b55      	ldr	r3, [pc, #340]	; (8007e44 <_strerror_r+0x288>)
 8007cee:	4618      	mov	r0, r3
 8007cf0:	bd10      	pop	{r4, pc}
 8007cf2:	4b55      	ldr	r3, [pc, #340]	; (8007e48 <_strerror_r+0x28c>)
 8007cf4:	e7fb      	b.n	8007cee <_strerror_r+0x132>
 8007cf6:	4b55      	ldr	r3, [pc, #340]	; (8007e4c <_strerror_r+0x290>)
 8007cf8:	e7f9      	b.n	8007cee <_strerror_r+0x132>
 8007cfa:	4b55      	ldr	r3, [pc, #340]	; (8007e50 <_strerror_r+0x294>)
 8007cfc:	e7f7      	b.n	8007cee <_strerror_r+0x132>
 8007cfe:	4b55      	ldr	r3, [pc, #340]	; (8007e54 <_strerror_r+0x298>)
 8007d00:	e7f5      	b.n	8007cee <_strerror_r+0x132>
 8007d02:	4b55      	ldr	r3, [pc, #340]	; (8007e58 <_strerror_r+0x29c>)
 8007d04:	e7f3      	b.n	8007cee <_strerror_r+0x132>
 8007d06:	4b55      	ldr	r3, [pc, #340]	; (8007e5c <_strerror_r+0x2a0>)
 8007d08:	e7f1      	b.n	8007cee <_strerror_r+0x132>
 8007d0a:	4b55      	ldr	r3, [pc, #340]	; (8007e60 <_strerror_r+0x2a4>)
 8007d0c:	e7ef      	b.n	8007cee <_strerror_r+0x132>
 8007d0e:	4b55      	ldr	r3, [pc, #340]	; (8007e64 <_strerror_r+0x2a8>)
 8007d10:	e7ed      	b.n	8007cee <_strerror_r+0x132>
 8007d12:	4b55      	ldr	r3, [pc, #340]	; (8007e68 <_strerror_r+0x2ac>)
 8007d14:	e7eb      	b.n	8007cee <_strerror_r+0x132>
 8007d16:	4b55      	ldr	r3, [pc, #340]	; (8007e6c <_strerror_r+0x2b0>)
 8007d18:	e7e9      	b.n	8007cee <_strerror_r+0x132>
 8007d1a:	4b55      	ldr	r3, [pc, #340]	; (8007e70 <_strerror_r+0x2b4>)
 8007d1c:	e7e7      	b.n	8007cee <_strerror_r+0x132>
 8007d1e:	4b55      	ldr	r3, [pc, #340]	; (8007e74 <_strerror_r+0x2b8>)
 8007d20:	e7e5      	b.n	8007cee <_strerror_r+0x132>
 8007d22:	4b55      	ldr	r3, [pc, #340]	; (8007e78 <_strerror_r+0x2bc>)
 8007d24:	e7e3      	b.n	8007cee <_strerror_r+0x132>
 8007d26:	4b55      	ldr	r3, [pc, #340]	; (8007e7c <_strerror_r+0x2c0>)
 8007d28:	e7e1      	b.n	8007cee <_strerror_r+0x132>
 8007d2a:	4b55      	ldr	r3, [pc, #340]	; (8007e80 <_strerror_r+0x2c4>)
 8007d2c:	e7df      	b.n	8007cee <_strerror_r+0x132>
 8007d2e:	4b55      	ldr	r3, [pc, #340]	; (8007e84 <_strerror_r+0x2c8>)
 8007d30:	e7dd      	b.n	8007cee <_strerror_r+0x132>
 8007d32:	4b55      	ldr	r3, [pc, #340]	; (8007e88 <_strerror_r+0x2cc>)
 8007d34:	e7db      	b.n	8007cee <_strerror_r+0x132>
 8007d36:	4b55      	ldr	r3, [pc, #340]	; (8007e8c <_strerror_r+0x2d0>)
 8007d38:	e7d9      	b.n	8007cee <_strerror_r+0x132>
 8007d3a:	4b55      	ldr	r3, [pc, #340]	; (8007e90 <_strerror_r+0x2d4>)
 8007d3c:	e7d7      	b.n	8007cee <_strerror_r+0x132>
 8007d3e:	4b55      	ldr	r3, [pc, #340]	; (8007e94 <_strerror_r+0x2d8>)
 8007d40:	e7d5      	b.n	8007cee <_strerror_r+0x132>
 8007d42:	4b55      	ldr	r3, [pc, #340]	; (8007e98 <_strerror_r+0x2dc>)
 8007d44:	e7d3      	b.n	8007cee <_strerror_r+0x132>
 8007d46:	4b55      	ldr	r3, [pc, #340]	; (8007e9c <_strerror_r+0x2e0>)
 8007d48:	e7d1      	b.n	8007cee <_strerror_r+0x132>
 8007d4a:	4b55      	ldr	r3, [pc, #340]	; (8007ea0 <_strerror_r+0x2e4>)
 8007d4c:	e7cf      	b.n	8007cee <_strerror_r+0x132>
 8007d4e:	4b55      	ldr	r3, [pc, #340]	; (8007ea4 <_strerror_r+0x2e8>)
 8007d50:	e7cd      	b.n	8007cee <_strerror_r+0x132>
 8007d52:	4b55      	ldr	r3, [pc, #340]	; (8007ea8 <_strerror_r+0x2ec>)
 8007d54:	e7cb      	b.n	8007cee <_strerror_r+0x132>
 8007d56:	4b55      	ldr	r3, [pc, #340]	; (8007eac <_strerror_r+0x2f0>)
 8007d58:	e7c9      	b.n	8007cee <_strerror_r+0x132>
 8007d5a:	4b55      	ldr	r3, [pc, #340]	; (8007eb0 <_strerror_r+0x2f4>)
 8007d5c:	e7c7      	b.n	8007cee <_strerror_r+0x132>
 8007d5e:	4b55      	ldr	r3, [pc, #340]	; (8007eb4 <_strerror_r+0x2f8>)
 8007d60:	e7c5      	b.n	8007cee <_strerror_r+0x132>
 8007d62:	4b55      	ldr	r3, [pc, #340]	; (8007eb8 <_strerror_r+0x2fc>)
 8007d64:	e7c3      	b.n	8007cee <_strerror_r+0x132>
 8007d66:	4b55      	ldr	r3, [pc, #340]	; (8007ebc <_strerror_r+0x300>)
 8007d68:	e7c1      	b.n	8007cee <_strerror_r+0x132>
 8007d6a:	4b55      	ldr	r3, [pc, #340]	; (8007ec0 <_strerror_r+0x304>)
 8007d6c:	e7bf      	b.n	8007cee <_strerror_r+0x132>
 8007d6e:	4b55      	ldr	r3, [pc, #340]	; (8007ec4 <_strerror_r+0x308>)
 8007d70:	e7bd      	b.n	8007cee <_strerror_r+0x132>
 8007d72:	4b55      	ldr	r3, [pc, #340]	; (8007ec8 <_strerror_r+0x30c>)
 8007d74:	e7bb      	b.n	8007cee <_strerror_r+0x132>
 8007d76:	4b55      	ldr	r3, [pc, #340]	; (8007ecc <_strerror_r+0x310>)
 8007d78:	e7b9      	b.n	8007cee <_strerror_r+0x132>
 8007d7a:	4b55      	ldr	r3, [pc, #340]	; (8007ed0 <_strerror_r+0x314>)
 8007d7c:	e7b7      	b.n	8007cee <_strerror_r+0x132>
 8007d7e:	4b55      	ldr	r3, [pc, #340]	; (8007ed4 <_strerror_r+0x318>)
 8007d80:	e7b5      	b.n	8007cee <_strerror_r+0x132>
 8007d82:	4b55      	ldr	r3, [pc, #340]	; (8007ed8 <_strerror_r+0x31c>)
 8007d84:	e7b3      	b.n	8007cee <_strerror_r+0x132>
 8007d86:	4b55      	ldr	r3, [pc, #340]	; (8007edc <_strerror_r+0x320>)
 8007d88:	e7b1      	b.n	8007cee <_strerror_r+0x132>
 8007d8a:	4b55      	ldr	r3, [pc, #340]	; (8007ee0 <_strerror_r+0x324>)
 8007d8c:	e7af      	b.n	8007cee <_strerror_r+0x132>
 8007d8e:	4b55      	ldr	r3, [pc, #340]	; (8007ee4 <_strerror_r+0x328>)
 8007d90:	e7ad      	b.n	8007cee <_strerror_r+0x132>
 8007d92:	4b55      	ldr	r3, [pc, #340]	; (8007ee8 <_strerror_r+0x32c>)
 8007d94:	e7ab      	b.n	8007cee <_strerror_r+0x132>
 8007d96:	4b55      	ldr	r3, [pc, #340]	; (8007eec <_strerror_r+0x330>)
 8007d98:	e7a9      	b.n	8007cee <_strerror_r+0x132>
 8007d9a:	4b55      	ldr	r3, [pc, #340]	; (8007ef0 <_strerror_r+0x334>)
 8007d9c:	e7a7      	b.n	8007cee <_strerror_r+0x132>
 8007d9e:	4b55      	ldr	r3, [pc, #340]	; (8007ef4 <_strerror_r+0x338>)
 8007da0:	e7a5      	b.n	8007cee <_strerror_r+0x132>
 8007da2:	4b55      	ldr	r3, [pc, #340]	; (8007ef8 <_strerror_r+0x33c>)
 8007da4:	e7a3      	b.n	8007cee <_strerror_r+0x132>
 8007da6:	4b55      	ldr	r3, [pc, #340]	; (8007efc <_strerror_r+0x340>)
 8007da8:	e7a1      	b.n	8007cee <_strerror_r+0x132>
 8007daa:	4b55      	ldr	r3, [pc, #340]	; (8007f00 <_strerror_r+0x344>)
 8007dac:	e79f      	b.n	8007cee <_strerror_r+0x132>
 8007dae:	4b55      	ldr	r3, [pc, #340]	; (8007f04 <_strerror_r+0x348>)
 8007db0:	e79d      	b.n	8007cee <_strerror_r+0x132>
 8007db2:	4b55      	ldr	r3, [pc, #340]	; (8007f08 <_strerror_r+0x34c>)
 8007db4:	e79b      	b.n	8007cee <_strerror_r+0x132>
 8007db6:	4b55      	ldr	r3, [pc, #340]	; (8007f0c <_strerror_r+0x350>)
 8007db8:	e799      	b.n	8007cee <_strerror_r+0x132>
 8007dba:	4b55      	ldr	r3, [pc, #340]	; (8007f10 <_strerror_r+0x354>)
 8007dbc:	e797      	b.n	8007cee <_strerror_r+0x132>
 8007dbe:	4b55      	ldr	r3, [pc, #340]	; (8007f14 <_strerror_r+0x358>)
 8007dc0:	e795      	b.n	8007cee <_strerror_r+0x132>
 8007dc2:	4b55      	ldr	r3, [pc, #340]	; (8007f18 <_strerror_r+0x35c>)
 8007dc4:	e793      	b.n	8007cee <_strerror_r+0x132>
 8007dc6:	4b55      	ldr	r3, [pc, #340]	; (8007f1c <_strerror_r+0x360>)
 8007dc8:	e791      	b.n	8007cee <_strerror_r+0x132>
 8007dca:	4b55      	ldr	r3, [pc, #340]	; (8007f20 <_strerror_r+0x364>)
 8007dcc:	e78f      	b.n	8007cee <_strerror_r+0x132>
 8007dce:	4b55      	ldr	r3, [pc, #340]	; (8007f24 <_strerror_r+0x368>)
 8007dd0:	e78d      	b.n	8007cee <_strerror_r+0x132>
 8007dd2:	4b55      	ldr	r3, [pc, #340]	; (8007f28 <_strerror_r+0x36c>)
 8007dd4:	e78b      	b.n	8007cee <_strerror_r+0x132>
 8007dd6:	4b55      	ldr	r3, [pc, #340]	; (8007f2c <_strerror_r+0x370>)
 8007dd8:	e789      	b.n	8007cee <_strerror_r+0x132>
 8007dda:	4b55      	ldr	r3, [pc, #340]	; (8007f30 <_strerror_r+0x374>)
 8007ddc:	e787      	b.n	8007cee <_strerror_r+0x132>
 8007dde:	4b55      	ldr	r3, [pc, #340]	; (8007f34 <_strerror_r+0x378>)
 8007de0:	e785      	b.n	8007cee <_strerror_r+0x132>
 8007de2:	4b55      	ldr	r3, [pc, #340]	; (8007f38 <_strerror_r+0x37c>)
 8007de4:	e783      	b.n	8007cee <_strerror_r+0x132>
 8007de6:	4b55      	ldr	r3, [pc, #340]	; (8007f3c <_strerror_r+0x380>)
 8007de8:	e781      	b.n	8007cee <_strerror_r+0x132>
 8007dea:	4b55      	ldr	r3, [pc, #340]	; (8007f40 <_strerror_r+0x384>)
 8007dec:	e77f      	b.n	8007cee <_strerror_r+0x132>
 8007dee:	4b55      	ldr	r3, [pc, #340]	; (8007f44 <_strerror_r+0x388>)
 8007df0:	e77d      	b.n	8007cee <_strerror_r+0x132>
 8007df2:	4b55      	ldr	r3, [pc, #340]	; (8007f48 <_strerror_r+0x38c>)
 8007df4:	e77b      	b.n	8007cee <_strerror_r+0x132>
 8007df6:	4b55      	ldr	r3, [pc, #340]	; (8007f4c <_strerror_r+0x390>)
 8007df8:	e779      	b.n	8007cee <_strerror_r+0x132>
 8007dfa:	4b55      	ldr	r3, [pc, #340]	; (8007f50 <_strerror_r+0x394>)
 8007dfc:	e777      	b.n	8007cee <_strerror_r+0x132>
 8007dfe:	4b55      	ldr	r3, [pc, #340]	; (8007f54 <_strerror_r+0x398>)
 8007e00:	e775      	b.n	8007cee <_strerror_r+0x132>
 8007e02:	4b55      	ldr	r3, [pc, #340]	; (8007f58 <_strerror_r+0x39c>)
 8007e04:	e773      	b.n	8007cee <_strerror_r+0x132>
 8007e06:	4b55      	ldr	r3, [pc, #340]	; (8007f5c <_strerror_r+0x3a0>)
 8007e08:	e771      	b.n	8007cee <_strerror_r+0x132>
 8007e0a:	4b55      	ldr	r3, [pc, #340]	; (8007f60 <_strerror_r+0x3a4>)
 8007e0c:	e76f      	b.n	8007cee <_strerror_r+0x132>
 8007e0e:	4b55      	ldr	r3, [pc, #340]	; (8007f64 <_strerror_r+0x3a8>)
 8007e10:	e76d      	b.n	8007cee <_strerror_r+0x132>
 8007e12:	4b55      	ldr	r3, [pc, #340]	; (8007f68 <_strerror_r+0x3ac>)
 8007e14:	e76b      	b.n	8007cee <_strerror_r+0x132>
 8007e16:	4b55      	ldr	r3, [pc, #340]	; (8007f6c <_strerror_r+0x3b0>)
 8007e18:	e769      	b.n	8007cee <_strerror_r+0x132>
 8007e1a:	4b55      	ldr	r3, [pc, #340]	; (8007f70 <_strerror_r+0x3b4>)
 8007e1c:	e767      	b.n	8007cee <_strerror_r+0x132>
 8007e1e:	4b55      	ldr	r3, [pc, #340]	; (8007f74 <_strerror_r+0x3b8>)
 8007e20:	e765      	b.n	8007cee <_strerror_r+0x132>
 8007e22:	4b55      	ldr	r3, [pc, #340]	; (8007f78 <_strerror_r+0x3bc>)
 8007e24:	e763      	b.n	8007cee <_strerror_r+0x132>
 8007e26:	4b55      	ldr	r3, [pc, #340]	; (8007f7c <_strerror_r+0x3c0>)
 8007e28:	e761      	b.n	8007cee <_strerror_r+0x132>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	bf14      	ite	ne
 8007e2e:	461a      	movne	r2, r3
 8007e30:	4622      	moveq	r2, r4
 8007e32:	f000 f8a9 	bl	8007f88 <_user_strerror>
 8007e36:	4b52      	ldr	r3, [pc, #328]	; (8007f80 <_strerror_r+0x3c4>)
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	bf18      	it	ne
 8007e3c:	4603      	movne	r3, r0
 8007e3e:	e756      	b.n	8007cee <_strerror_r+0x132>
 8007e40:	4b50      	ldr	r3, [pc, #320]	; (8007f84 <_strerror_r+0x3c8>)
 8007e42:	e754      	b.n	8007cee <_strerror_r+0x132>
 8007e44:	0800a3b0 	.word	0x0800a3b0
 8007e48:	0800a3ba 	.word	0x0800a3ba
 8007e4c:	0800a3d4 	.word	0x0800a3d4
 8007e50:	0800a3e4 	.word	0x0800a3e4
 8007e54:	0800a3fc 	.word	0x0800a3fc
 8007e58:	0800a406 	.word	0x0800a406
 8007e5c:	0800a420 	.word	0x0800a420
 8007e60:	0800a432 	.word	0x0800a432
 8007e64:	0800a444 	.word	0x0800a444
 8007e68:	0800a45d 	.word	0x0800a45d
 8007e6c:	0800a46d 	.word	0x0800a46d
 8007e70:	0800a479 	.word	0x0800a479
 8007e74:	0800a496 	.word	0x0800a496
 8007e78:	0800a4a8 	.word	0x0800a4a8
 8007e7c:	0800a4b9 	.word	0x0800a4b9
 8007e80:	0800a4cb 	.word	0x0800a4cb
 8007e84:	0800a4d7 	.word	0x0800a4d7
 8007e88:	0800a4ef 	.word	0x0800a4ef
 8007e8c:	0800a4fb 	.word	0x0800a4fb
 8007e90:	0800a50d 	.word	0x0800a50d
 8007e94:	0800a51c 	.word	0x0800a51c
 8007e98:	0800a52c 	.word	0x0800a52c
 8007e9c:	0800a539 	.word	0x0800a539
 8007ea0:	0800a558 	.word	0x0800a558
 8007ea4:	0800a567 	.word	0x0800a567
 8007ea8:	0800a578 	.word	0x0800a578
 8007eac:	0800a59c 	.word	0x0800a59c
 8007eb0:	0800a5ba 	.word	0x0800a5ba
 8007eb4:	0800a5d8 	.word	0x0800a5d8
 8007eb8:	0800a5f8 	.word	0x0800a5f8
 8007ebc:	0800a60f 	.word	0x0800a60f
 8007ec0:	0800a61e 	.word	0x0800a61e
 8007ec4:	0800a62d 	.word	0x0800a62d
 8007ec8:	0800a641 	.word	0x0800a641
 8007ecc:	0800a659 	.word	0x0800a659
 8007ed0:	0800a667 	.word	0x0800a667
 8007ed4:	0800a674 	.word	0x0800a674
 8007ed8:	0800a68a 	.word	0x0800a68a
 8007edc:	0800a699 	.word	0x0800a699
 8007ee0:	0800a6a5 	.word	0x0800a6a5
 8007ee4:	0800a6d4 	.word	0x0800a6d4
 8007ee8:	0800a6e5 	.word	0x0800a6e5
 8007eec:	0800a700 	.word	0x0800a700
 8007ef0:	0800a713 	.word	0x0800a713
 8007ef4:	0800a729 	.word	0x0800a729
 8007ef8:	0800a732 	.word	0x0800a732
 8007efc:	0800a749 	.word	0x0800a749
 8007f00:	0800a751 	.word	0x0800a751
 8007f04:	0800a75e 	.word	0x0800a75e
 8007f08:	0800a773 	.word	0x0800a773
 8007f0c:	0800a787 	.word	0x0800a787
 8007f10:	0800a79f 	.word	0x0800a79f
 8007f14:	0800a7ae 	.word	0x0800a7ae
 8007f18:	0800a7bf 	.word	0x0800a7bf
 8007f1c:	0800a7d2 	.word	0x0800a7d2
 8007f20:	0800a7de 	.word	0x0800a7de
 8007f24:	0800a7f7 	.word	0x0800a7f7
 8007f28:	0800a80b 	.word	0x0800a80b
 8007f2c:	0800a826 	.word	0x0800a826
 8007f30:	0800a83e 	.word	0x0800a83e
 8007f34:	0800a858 	.word	0x0800a858
 8007f38:	0800a860 	.word	0x0800a860
 8007f3c:	0800a890 	.word	0x0800a890
 8007f40:	0800a8af 	.word	0x0800a8af
 8007f44:	0800a8ce 	.word	0x0800a8ce
 8007f48:	0800a8e5 	.word	0x0800a8e5
 8007f4c:	0800a8f8 	.word	0x0800a8f8
 8007f50:	0800a911 	.word	0x0800a911
 8007f54:	0800a928 	.word	0x0800a928
 8007f58:	0800a93e 	.word	0x0800a93e
 8007f5c:	0800a95f 	.word	0x0800a95f
 8007f60:	0800a977 	.word	0x0800a977
 8007f64:	0800a993 	.word	0x0800a993
 8007f68:	0800a9a6 	.word	0x0800a9a6
 8007f6c:	0800a9bc 	.word	0x0800a9bc
 8007f70:	0800a9d0 	.word	0x0800a9d0
 8007f74:	0800a9f2 	.word	0x0800a9f2
 8007f78:	0800aa18 	.word	0x0800aa18
 8007f7c:	0800aa29 	.word	0x0800aa29
 8007f80:	0800ace0 	.word	0x0800ace0
 8007f84:	0800aa3e 	.word	0x0800aa3e

08007f88 <_user_strerror>:
 8007f88:	2000      	movs	r0, #0
 8007f8a:	4770      	bx	lr

08007f8c <_vsiprintf_r>:
 8007f8c:	b500      	push	{lr}
 8007f8e:	b09b      	sub	sp, #108	; 0x6c
 8007f90:	9100      	str	r1, [sp, #0]
 8007f92:	9104      	str	r1, [sp, #16]
 8007f94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f98:	9105      	str	r1, [sp, #20]
 8007f9a:	9102      	str	r1, [sp, #8]
 8007f9c:	4905      	ldr	r1, [pc, #20]	; (8007fb4 <_vsiprintf_r+0x28>)
 8007f9e:	9103      	str	r1, [sp, #12]
 8007fa0:	4669      	mov	r1, sp
 8007fa2:	f001 fcad 	bl	8009900 <_svfiprintf_r>
 8007fa6:	9b00      	ldr	r3, [sp, #0]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	701a      	strb	r2, [r3, #0]
 8007fac:	b01b      	add	sp, #108	; 0x6c
 8007fae:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fb2:	bf00      	nop
 8007fb4:	ffff0208 	.word	0xffff0208

08007fb8 <vsiprintf>:
 8007fb8:	4613      	mov	r3, r2
 8007fba:	460a      	mov	r2, r1
 8007fbc:	4601      	mov	r1, r0
 8007fbe:	4802      	ldr	r0, [pc, #8]	; (8007fc8 <vsiprintf+0x10>)
 8007fc0:	6800      	ldr	r0, [r0, #0]
 8007fc2:	f7ff bfe3 	b.w	8007f8c <_vsiprintf_r>
 8007fc6:	bf00      	nop
 8007fc8:	2000003c 	.word	0x2000003c

08007fcc <_write_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d07      	ldr	r5, [pc, #28]	; (8007fec <_write_r+0x20>)
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	4608      	mov	r0, r1
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	602a      	str	r2, [r5, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f7f9 fd2d 	bl	8001a3a <_write>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d102      	bne.n	8007fea <_write_r+0x1e>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b103      	cbz	r3, 8007fea <_write_r+0x1e>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	2000064c 	.word	0x2000064c

08007ff0 <quorem>:
 8007ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	6903      	ldr	r3, [r0, #16]
 8007ff6:	690c      	ldr	r4, [r1, #16]
 8007ff8:	42a3      	cmp	r3, r4
 8007ffa:	4607      	mov	r7, r0
 8007ffc:	f2c0 8081 	blt.w	8008102 <quorem+0x112>
 8008000:	3c01      	subs	r4, #1
 8008002:	f101 0814 	add.w	r8, r1, #20
 8008006:	f100 0514 	add.w	r5, r0, #20
 800800a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800800e:	9301      	str	r3, [sp, #4]
 8008010:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008014:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008018:	3301      	adds	r3, #1
 800801a:	429a      	cmp	r2, r3
 800801c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008020:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008024:	fbb2 f6f3 	udiv	r6, r2, r3
 8008028:	d331      	bcc.n	800808e <quorem+0x9e>
 800802a:	f04f 0e00 	mov.w	lr, #0
 800802e:	4640      	mov	r0, r8
 8008030:	46ac      	mov	ip, r5
 8008032:	46f2      	mov	sl, lr
 8008034:	f850 2b04 	ldr.w	r2, [r0], #4
 8008038:	b293      	uxth	r3, r2
 800803a:	fb06 e303 	mla	r3, r6, r3, lr
 800803e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008042:	b29b      	uxth	r3, r3
 8008044:	ebaa 0303 	sub.w	r3, sl, r3
 8008048:	f8dc a000 	ldr.w	sl, [ip]
 800804c:	0c12      	lsrs	r2, r2, #16
 800804e:	fa13 f38a 	uxtah	r3, r3, sl
 8008052:	fb06 e202 	mla	r2, r6, r2, lr
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	9b00      	ldr	r3, [sp, #0]
 800805a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800805e:	b292      	uxth	r2, r2
 8008060:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008064:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008068:	f8bd 3000 	ldrh.w	r3, [sp]
 800806c:	4581      	cmp	r9, r0
 800806e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008072:	f84c 3b04 	str.w	r3, [ip], #4
 8008076:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800807a:	d2db      	bcs.n	8008034 <quorem+0x44>
 800807c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008080:	b92b      	cbnz	r3, 800808e <quorem+0x9e>
 8008082:	9b01      	ldr	r3, [sp, #4]
 8008084:	3b04      	subs	r3, #4
 8008086:	429d      	cmp	r5, r3
 8008088:	461a      	mov	r2, r3
 800808a:	d32e      	bcc.n	80080ea <quorem+0xfa>
 800808c:	613c      	str	r4, [r7, #16]
 800808e:	4638      	mov	r0, r7
 8008090:	f001 fac2 	bl	8009618 <__mcmp>
 8008094:	2800      	cmp	r0, #0
 8008096:	db24      	blt.n	80080e2 <quorem+0xf2>
 8008098:	3601      	adds	r6, #1
 800809a:	4628      	mov	r0, r5
 800809c:	f04f 0c00 	mov.w	ip, #0
 80080a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80080a4:	f8d0 e000 	ldr.w	lr, [r0]
 80080a8:	b293      	uxth	r3, r2
 80080aa:	ebac 0303 	sub.w	r3, ip, r3
 80080ae:	0c12      	lsrs	r2, r2, #16
 80080b0:	fa13 f38e 	uxtah	r3, r3, lr
 80080b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080bc:	b29b      	uxth	r3, r3
 80080be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080c2:	45c1      	cmp	r9, r8
 80080c4:	f840 3b04 	str.w	r3, [r0], #4
 80080c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080cc:	d2e8      	bcs.n	80080a0 <quorem+0xb0>
 80080ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080d6:	b922      	cbnz	r2, 80080e2 <quorem+0xf2>
 80080d8:	3b04      	subs	r3, #4
 80080da:	429d      	cmp	r5, r3
 80080dc:	461a      	mov	r2, r3
 80080de:	d30a      	bcc.n	80080f6 <quorem+0x106>
 80080e0:	613c      	str	r4, [r7, #16]
 80080e2:	4630      	mov	r0, r6
 80080e4:	b003      	add	sp, #12
 80080e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ea:	6812      	ldr	r2, [r2, #0]
 80080ec:	3b04      	subs	r3, #4
 80080ee:	2a00      	cmp	r2, #0
 80080f0:	d1cc      	bne.n	800808c <quorem+0x9c>
 80080f2:	3c01      	subs	r4, #1
 80080f4:	e7c7      	b.n	8008086 <quorem+0x96>
 80080f6:	6812      	ldr	r2, [r2, #0]
 80080f8:	3b04      	subs	r3, #4
 80080fa:	2a00      	cmp	r2, #0
 80080fc:	d1f0      	bne.n	80080e0 <quorem+0xf0>
 80080fe:	3c01      	subs	r4, #1
 8008100:	e7eb      	b.n	80080da <quorem+0xea>
 8008102:	2000      	movs	r0, #0
 8008104:	e7ee      	b.n	80080e4 <quorem+0xf4>
	...

08008108 <_dtoa_r>:
 8008108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810c:	ed2d 8b04 	vpush	{d8-d9}
 8008110:	ec57 6b10 	vmov	r6, r7, d0
 8008114:	b093      	sub	sp, #76	; 0x4c
 8008116:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008118:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800811c:	9106      	str	r1, [sp, #24]
 800811e:	ee10 aa10 	vmov	sl, s0
 8008122:	4604      	mov	r4, r0
 8008124:	9209      	str	r2, [sp, #36]	; 0x24
 8008126:	930c      	str	r3, [sp, #48]	; 0x30
 8008128:	46bb      	mov	fp, r7
 800812a:	b975      	cbnz	r5, 800814a <_dtoa_r+0x42>
 800812c:	2010      	movs	r0, #16
 800812e:	f7fe fef5 	bl	8006f1c <malloc>
 8008132:	4602      	mov	r2, r0
 8008134:	6260      	str	r0, [r4, #36]	; 0x24
 8008136:	b920      	cbnz	r0, 8008142 <_dtoa_r+0x3a>
 8008138:	4ba7      	ldr	r3, [pc, #668]	; (80083d8 <_dtoa_r+0x2d0>)
 800813a:	21ea      	movs	r1, #234	; 0xea
 800813c:	48a7      	ldr	r0, [pc, #668]	; (80083dc <_dtoa_r+0x2d4>)
 800813e:	f001 fd23 	bl	8009b88 <__assert_func>
 8008142:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008146:	6005      	str	r5, [r0, #0]
 8008148:	60c5      	str	r5, [r0, #12]
 800814a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800814c:	6819      	ldr	r1, [r3, #0]
 800814e:	b151      	cbz	r1, 8008166 <_dtoa_r+0x5e>
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	604a      	str	r2, [r1, #4]
 8008154:	2301      	movs	r3, #1
 8008156:	4093      	lsls	r3, r2
 8008158:	608b      	str	r3, [r1, #8]
 800815a:	4620      	mov	r0, r4
 800815c:	f001 f81a 	bl	8009194 <_Bfree>
 8008160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	1e3b      	subs	r3, r7, #0
 8008168:	bfaa      	itet	ge
 800816a:	2300      	movge	r3, #0
 800816c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008170:	f8c8 3000 	strge.w	r3, [r8]
 8008174:	4b9a      	ldr	r3, [pc, #616]	; (80083e0 <_dtoa_r+0x2d8>)
 8008176:	bfbc      	itt	lt
 8008178:	2201      	movlt	r2, #1
 800817a:	f8c8 2000 	strlt.w	r2, [r8]
 800817e:	ea33 030b 	bics.w	r3, r3, fp
 8008182:	d11b      	bne.n	80081bc <_dtoa_r+0xb4>
 8008184:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008186:	f242 730f 	movw	r3, #9999	; 0x270f
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008190:	4333      	orrs	r3, r6
 8008192:	f000 8592 	beq.w	8008cba <_dtoa_r+0xbb2>
 8008196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008198:	b963      	cbnz	r3, 80081b4 <_dtoa_r+0xac>
 800819a:	4b92      	ldr	r3, [pc, #584]	; (80083e4 <_dtoa_r+0x2dc>)
 800819c:	e022      	b.n	80081e4 <_dtoa_r+0xdc>
 800819e:	4b92      	ldr	r3, [pc, #584]	; (80083e8 <_dtoa_r+0x2e0>)
 80081a0:	9301      	str	r3, [sp, #4]
 80081a2:	3308      	adds	r3, #8
 80081a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	9801      	ldr	r0, [sp, #4]
 80081aa:	b013      	add	sp, #76	; 0x4c
 80081ac:	ecbd 8b04 	vpop	{d8-d9}
 80081b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b4:	4b8b      	ldr	r3, [pc, #556]	; (80083e4 <_dtoa_r+0x2dc>)
 80081b6:	9301      	str	r3, [sp, #4]
 80081b8:	3303      	adds	r3, #3
 80081ba:	e7f3      	b.n	80081a4 <_dtoa_r+0x9c>
 80081bc:	2200      	movs	r2, #0
 80081be:	2300      	movs	r3, #0
 80081c0:	4650      	mov	r0, sl
 80081c2:	4659      	mov	r1, fp
 80081c4:	f7f8 fc80 	bl	8000ac8 <__aeabi_dcmpeq>
 80081c8:	ec4b ab19 	vmov	d9, sl, fp
 80081cc:	4680      	mov	r8, r0
 80081ce:	b158      	cbz	r0, 80081e8 <_dtoa_r+0xe0>
 80081d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081d2:	2301      	movs	r3, #1
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 856b 	beq.w	8008cb4 <_dtoa_r+0xbac>
 80081de:	4883      	ldr	r0, [pc, #524]	; (80083ec <_dtoa_r+0x2e4>)
 80081e0:	6018      	str	r0, [r3, #0]
 80081e2:	1e43      	subs	r3, r0, #1
 80081e4:	9301      	str	r3, [sp, #4]
 80081e6:	e7df      	b.n	80081a8 <_dtoa_r+0xa0>
 80081e8:	ec4b ab10 	vmov	d0, sl, fp
 80081ec:	aa10      	add	r2, sp, #64	; 0x40
 80081ee:	a911      	add	r1, sp, #68	; 0x44
 80081f0:	4620      	mov	r0, r4
 80081f2:	f001 fab7 	bl	8009764 <__d2b>
 80081f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80081fa:	ee08 0a10 	vmov	s16, r0
 80081fe:	2d00      	cmp	r5, #0
 8008200:	f000 8084 	beq.w	800830c <_dtoa_r+0x204>
 8008204:	ee19 3a90 	vmov	r3, s19
 8008208:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800820c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008210:	4656      	mov	r6, sl
 8008212:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008216:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800821a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800821e:	4b74      	ldr	r3, [pc, #464]	; (80083f0 <_dtoa_r+0x2e8>)
 8008220:	2200      	movs	r2, #0
 8008222:	4630      	mov	r0, r6
 8008224:	4639      	mov	r1, r7
 8008226:	f7f8 f82f 	bl	8000288 <__aeabi_dsub>
 800822a:	a365      	add	r3, pc, #404	; (adr r3, 80083c0 <_dtoa_r+0x2b8>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f7f8 f9e2 	bl	80005f8 <__aeabi_dmul>
 8008234:	a364      	add	r3, pc, #400	; (adr r3, 80083c8 <_dtoa_r+0x2c0>)
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	f7f8 f827 	bl	800028c <__adddf3>
 800823e:	4606      	mov	r6, r0
 8008240:	4628      	mov	r0, r5
 8008242:	460f      	mov	r7, r1
 8008244:	f7f8 f96e 	bl	8000524 <__aeabi_i2d>
 8008248:	a361      	add	r3, pc, #388	; (adr r3, 80083d0 <_dtoa_r+0x2c8>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	f7f8 f9d3 	bl	80005f8 <__aeabi_dmul>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4630      	mov	r0, r6
 8008258:	4639      	mov	r1, r7
 800825a:	f7f8 f817 	bl	800028c <__adddf3>
 800825e:	4606      	mov	r6, r0
 8008260:	460f      	mov	r7, r1
 8008262:	f7f8 fc79 	bl	8000b58 <__aeabi_d2iz>
 8008266:	2200      	movs	r2, #0
 8008268:	9000      	str	r0, [sp, #0]
 800826a:	2300      	movs	r3, #0
 800826c:	4630      	mov	r0, r6
 800826e:	4639      	mov	r1, r7
 8008270:	f7f8 fc34 	bl	8000adc <__aeabi_dcmplt>
 8008274:	b150      	cbz	r0, 800828c <_dtoa_r+0x184>
 8008276:	9800      	ldr	r0, [sp, #0]
 8008278:	f7f8 f954 	bl	8000524 <__aeabi_i2d>
 800827c:	4632      	mov	r2, r6
 800827e:	463b      	mov	r3, r7
 8008280:	f7f8 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 8008284:	b910      	cbnz	r0, 800828c <_dtoa_r+0x184>
 8008286:	9b00      	ldr	r3, [sp, #0]
 8008288:	3b01      	subs	r3, #1
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	9b00      	ldr	r3, [sp, #0]
 800828e:	2b16      	cmp	r3, #22
 8008290:	d85a      	bhi.n	8008348 <_dtoa_r+0x240>
 8008292:	9a00      	ldr	r2, [sp, #0]
 8008294:	4b57      	ldr	r3, [pc, #348]	; (80083f4 <_dtoa_r+0x2ec>)
 8008296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800829a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829e:	ec51 0b19 	vmov	r0, r1, d9
 80082a2:	f7f8 fc1b 	bl	8000adc <__aeabi_dcmplt>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d050      	beq.n	800834c <_dtoa_r+0x244>
 80082aa:	9b00      	ldr	r3, [sp, #0]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	2300      	movs	r3, #0
 80082b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80082b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082b6:	1b5d      	subs	r5, r3, r5
 80082b8:	1e6b      	subs	r3, r5, #1
 80082ba:	9305      	str	r3, [sp, #20]
 80082bc:	bf45      	ittet	mi
 80082be:	f1c5 0301 	rsbmi	r3, r5, #1
 80082c2:	9304      	strmi	r3, [sp, #16]
 80082c4:	2300      	movpl	r3, #0
 80082c6:	2300      	movmi	r3, #0
 80082c8:	bf4c      	ite	mi
 80082ca:	9305      	strmi	r3, [sp, #20]
 80082cc:	9304      	strpl	r3, [sp, #16]
 80082ce:	9b00      	ldr	r3, [sp, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	db3d      	blt.n	8008350 <_dtoa_r+0x248>
 80082d4:	9b05      	ldr	r3, [sp, #20]
 80082d6:	9a00      	ldr	r2, [sp, #0]
 80082d8:	920a      	str	r2, [sp, #40]	; 0x28
 80082da:	4413      	add	r3, r2
 80082dc:	9305      	str	r3, [sp, #20]
 80082de:	2300      	movs	r3, #0
 80082e0:	9307      	str	r3, [sp, #28]
 80082e2:	9b06      	ldr	r3, [sp, #24]
 80082e4:	2b09      	cmp	r3, #9
 80082e6:	f200 8089 	bhi.w	80083fc <_dtoa_r+0x2f4>
 80082ea:	2b05      	cmp	r3, #5
 80082ec:	bfc4      	itt	gt
 80082ee:	3b04      	subgt	r3, #4
 80082f0:	9306      	strgt	r3, [sp, #24]
 80082f2:	9b06      	ldr	r3, [sp, #24]
 80082f4:	f1a3 0302 	sub.w	r3, r3, #2
 80082f8:	bfcc      	ite	gt
 80082fa:	2500      	movgt	r5, #0
 80082fc:	2501      	movle	r5, #1
 80082fe:	2b03      	cmp	r3, #3
 8008300:	f200 8087 	bhi.w	8008412 <_dtoa_r+0x30a>
 8008304:	e8df f003 	tbb	[pc, r3]
 8008308:	59383a2d 	.word	0x59383a2d
 800830c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008310:	441d      	add	r5, r3
 8008312:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008316:	2b20      	cmp	r3, #32
 8008318:	bfc1      	itttt	gt
 800831a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800831e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008322:	fa0b f303 	lslgt.w	r3, fp, r3
 8008326:	fa26 f000 	lsrgt.w	r0, r6, r0
 800832a:	bfda      	itte	le
 800832c:	f1c3 0320 	rsble	r3, r3, #32
 8008330:	fa06 f003 	lslle.w	r0, r6, r3
 8008334:	4318      	orrgt	r0, r3
 8008336:	f7f8 f8e5 	bl	8000504 <__aeabi_ui2d>
 800833a:	2301      	movs	r3, #1
 800833c:	4606      	mov	r6, r0
 800833e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008342:	3d01      	subs	r5, #1
 8008344:	930e      	str	r3, [sp, #56]	; 0x38
 8008346:	e76a      	b.n	800821e <_dtoa_r+0x116>
 8008348:	2301      	movs	r3, #1
 800834a:	e7b2      	b.n	80082b2 <_dtoa_r+0x1aa>
 800834c:	900b      	str	r0, [sp, #44]	; 0x2c
 800834e:	e7b1      	b.n	80082b4 <_dtoa_r+0x1ac>
 8008350:	9b04      	ldr	r3, [sp, #16]
 8008352:	9a00      	ldr	r2, [sp, #0]
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	9304      	str	r3, [sp, #16]
 8008358:	4253      	negs	r3, r2
 800835a:	9307      	str	r3, [sp, #28]
 800835c:	2300      	movs	r3, #0
 800835e:	930a      	str	r3, [sp, #40]	; 0x28
 8008360:	e7bf      	b.n	80082e2 <_dtoa_r+0x1da>
 8008362:	2300      	movs	r3, #0
 8008364:	9308      	str	r3, [sp, #32]
 8008366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008368:	2b00      	cmp	r3, #0
 800836a:	dc55      	bgt.n	8008418 <_dtoa_r+0x310>
 800836c:	2301      	movs	r3, #1
 800836e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008372:	461a      	mov	r2, r3
 8008374:	9209      	str	r2, [sp, #36]	; 0x24
 8008376:	e00c      	b.n	8008392 <_dtoa_r+0x28a>
 8008378:	2301      	movs	r3, #1
 800837a:	e7f3      	b.n	8008364 <_dtoa_r+0x25c>
 800837c:	2300      	movs	r3, #0
 800837e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008380:	9308      	str	r3, [sp, #32]
 8008382:	9b00      	ldr	r3, [sp, #0]
 8008384:	4413      	add	r3, r2
 8008386:	9302      	str	r3, [sp, #8]
 8008388:	3301      	adds	r3, #1
 800838a:	2b01      	cmp	r3, #1
 800838c:	9303      	str	r3, [sp, #12]
 800838e:	bfb8      	it	lt
 8008390:	2301      	movlt	r3, #1
 8008392:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008394:	2200      	movs	r2, #0
 8008396:	6042      	str	r2, [r0, #4]
 8008398:	2204      	movs	r2, #4
 800839a:	f102 0614 	add.w	r6, r2, #20
 800839e:	429e      	cmp	r6, r3
 80083a0:	6841      	ldr	r1, [r0, #4]
 80083a2:	d93d      	bls.n	8008420 <_dtoa_r+0x318>
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 feb5 	bl	8009114 <_Balloc>
 80083aa:	9001      	str	r0, [sp, #4]
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d13b      	bne.n	8008428 <_dtoa_r+0x320>
 80083b0:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <_dtoa_r+0x2f0>)
 80083b2:	4602      	mov	r2, r0
 80083b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083b8:	e6c0      	b.n	800813c <_dtoa_r+0x34>
 80083ba:	2301      	movs	r3, #1
 80083bc:	e7df      	b.n	800837e <_dtoa_r+0x276>
 80083be:	bf00      	nop
 80083c0:	636f4361 	.word	0x636f4361
 80083c4:	3fd287a7 	.word	0x3fd287a7
 80083c8:	8b60c8b3 	.word	0x8b60c8b3
 80083cc:	3fc68a28 	.word	0x3fc68a28
 80083d0:	509f79fb 	.word	0x509f79fb
 80083d4:	3fd34413 	.word	0x3fd34413
 80083d8:	0800aa53 	.word	0x0800aa53
 80083dc:	0800aa6a 	.word	0x0800aa6a
 80083e0:	7ff00000 	.word	0x7ff00000
 80083e4:	0800aa4f 	.word	0x0800aa4f
 80083e8:	0800aa46 	.word	0x0800aa46
 80083ec:	0800a38d 	.word	0x0800a38d
 80083f0:	3ff80000 	.word	0x3ff80000
 80083f4:	0800abc0 	.word	0x0800abc0
 80083f8:	0800aac5 	.word	0x0800aac5
 80083fc:	2501      	movs	r5, #1
 80083fe:	2300      	movs	r3, #0
 8008400:	9306      	str	r3, [sp, #24]
 8008402:	9508      	str	r5, [sp, #32]
 8008404:	f04f 33ff 	mov.w	r3, #4294967295
 8008408:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800840c:	2200      	movs	r2, #0
 800840e:	2312      	movs	r3, #18
 8008410:	e7b0      	b.n	8008374 <_dtoa_r+0x26c>
 8008412:	2301      	movs	r3, #1
 8008414:	9308      	str	r3, [sp, #32]
 8008416:	e7f5      	b.n	8008404 <_dtoa_r+0x2fc>
 8008418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800841e:	e7b8      	b.n	8008392 <_dtoa_r+0x28a>
 8008420:	3101      	adds	r1, #1
 8008422:	6041      	str	r1, [r0, #4]
 8008424:	0052      	lsls	r2, r2, #1
 8008426:	e7b8      	b.n	800839a <_dtoa_r+0x292>
 8008428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800842a:	9a01      	ldr	r2, [sp, #4]
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	9b03      	ldr	r3, [sp, #12]
 8008430:	2b0e      	cmp	r3, #14
 8008432:	f200 809d 	bhi.w	8008570 <_dtoa_r+0x468>
 8008436:	2d00      	cmp	r5, #0
 8008438:	f000 809a 	beq.w	8008570 <_dtoa_r+0x468>
 800843c:	9b00      	ldr	r3, [sp, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	dd32      	ble.n	80084a8 <_dtoa_r+0x3a0>
 8008442:	4ab7      	ldr	r2, [pc, #732]	; (8008720 <_dtoa_r+0x618>)
 8008444:	f003 030f 	and.w	r3, r3, #15
 8008448:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800844c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008450:	9b00      	ldr	r3, [sp, #0]
 8008452:	05d8      	lsls	r0, r3, #23
 8008454:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008458:	d516      	bpl.n	8008488 <_dtoa_r+0x380>
 800845a:	4bb2      	ldr	r3, [pc, #712]	; (8008724 <_dtoa_r+0x61c>)
 800845c:	ec51 0b19 	vmov	r0, r1, d9
 8008460:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008464:	f7f8 f9f2 	bl	800084c <__aeabi_ddiv>
 8008468:	f007 070f 	and.w	r7, r7, #15
 800846c:	4682      	mov	sl, r0
 800846e:	468b      	mov	fp, r1
 8008470:	2503      	movs	r5, #3
 8008472:	4eac      	ldr	r6, [pc, #688]	; (8008724 <_dtoa_r+0x61c>)
 8008474:	b957      	cbnz	r7, 800848c <_dtoa_r+0x384>
 8008476:	4642      	mov	r2, r8
 8008478:	464b      	mov	r3, r9
 800847a:	4650      	mov	r0, sl
 800847c:	4659      	mov	r1, fp
 800847e:	f7f8 f9e5 	bl	800084c <__aeabi_ddiv>
 8008482:	4682      	mov	sl, r0
 8008484:	468b      	mov	fp, r1
 8008486:	e028      	b.n	80084da <_dtoa_r+0x3d2>
 8008488:	2502      	movs	r5, #2
 800848a:	e7f2      	b.n	8008472 <_dtoa_r+0x36a>
 800848c:	07f9      	lsls	r1, r7, #31
 800848e:	d508      	bpl.n	80084a2 <_dtoa_r+0x39a>
 8008490:	4640      	mov	r0, r8
 8008492:	4649      	mov	r1, r9
 8008494:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008498:	f7f8 f8ae 	bl	80005f8 <__aeabi_dmul>
 800849c:	3501      	adds	r5, #1
 800849e:	4680      	mov	r8, r0
 80084a0:	4689      	mov	r9, r1
 80084a2:	107f      	asrs	r7, r7, #1
 80084a4:	3608      	adds	r6, #8
 80084a6:	e7e5      	b.n	8008474 <_dtoa_r+0x36c>
 80084a8:	f000 809b 	beq.w	80085e2 <_dtoa_r+0x4da>
 80084ac:	9b00      	ldr	r3, [sp, #0]
 80084ae:	4f9d      	ldr	r7, [pc, #628]	; (8008724 <_dtoa_r+0x61c>)
 80084b0:	425e      	negs	r6, r3
 80084b2:	4b9b      	ldr	r3, [pc, #620]	; (8008720 <_dtoa_r+0x618>)
 80084b4:	f006 020f 	and.w	r2, r6, #15
 80084b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	ec51 0b19 	vmov	r0, r1, d9
 80084c4:	f7f8 f898 	bl	80005f8 <__aeabi_dmul>
 80084c8:	1136      	asrs	r6, r6, #4
 80084ca:	4682      	mov	sl, r0
 80084cc:	468b      	mov	fp, r1
 80084ce:	2300      	movs	r3, #0
 80084d0:	2502      	movs	r5, #2
 80084d2:	2e00      	cmp	r6, #0
 80084d4:	d17a      	bne.n	80085cc <_dtoa_r+0x4c4>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1d3      	bne.n	8008482 <_dtoa_r+0x37a>
 80084da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 8082 	beq.w	80085e6 <_dtoa_r+0x4de>
 80084e2:	4b91      	ldr	r3, [pc, #580]	; (8008728 <_dtoa_r+0x620>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	4650      	mov	r0, sl
 80084e8:	4659      	mov	r1, fp
 80084ea:	f7f8 faf7 	bl	8000adc <__aeabi_dcmplt>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d079      	beq.n	80085e6 <_dtoa_r+0x4de>
 80084f2:	9b03      	ldr	r3, [sp, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d076      	beq.n	80085e6 <_dtoa_r+0x4de>
 80084f8:	9b02      	ldr	r3, [sp, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dd36      	ble.n	800856c <_dtoa_r+0x464>
 80084fe:	9b00      	ldr	r3, [sp, #0]
 8008500:	4650      	mov	r0, sl
 8008502:	4659      	mov	r1, fp
 8008504:	1e5f      	subs	r7, r3, #1
 8008506:	2200      	movs	r2, #0
 8008508:	4b88      	ldr	r3, [pc, #544]	; (800872c <_dtoa_r+0x624>)
 800850a:	f7f8 f875 	bl	80005f8 <__aeabi_dmul>
 800850e:	9e02      	ldr	r6, [sp, #8]
 8008510:	4682      	mov	sl, r0
 8008512:	468b      	mov	fp, r1
 8008514:	3501      	adds	r5, #1
 8008516:	4628      	mov	r0, r5
 8008518:	f7f8 f804 	bl	8000524 <__aeabi_i2d>
 800851c:	4652      	mov	r2, sl
 800851e:	465b      	mov	r3, fp
 8008520:	f7f8 f86a 	bl	80005f8 <__aeabi_dmul>
 8008524:	4b82      	ldr	r3, [pc, #520]	; (8008730 <_dtoa_r+0x628>)
 8008526:	2200      	movs	r2, #0
 8008528:	f7f7 feb0 	bl	800028c <__adddf3>
 800852c:	46d0      	mov	r8, sl
 800852e:	46d9      	mov	r9, fp
 8008530:	4682      	mov	sl, r0
 8008532:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008536:	2e00      	cmp	r6, #0
 8008538:	d158      	bne.n	80085ec <_dtoa_r+0x4e4>
 800853a:	4b7e      	ldr	r3, [pc, #504]	; (8008734 <_dtoa_r+0x62c>)
 800853c:	2200      	movs	r2, #0
 800853e:	4640      	mov	r0, r8
 8008540:	4649      	mov	r1, r9
 8008542:	f7f7 fea1 	bl	8000288 <__aeabi_dsub>
 8008546:	4652      	mov	r2, sl
 8008548:	465b      	mov	r3, fp
 800854a:	4680      	mov	r8, r0
 800854c:	4689      	mov	r9, r1
 800854e:	f7f8 fae3 	bl	8000b18 <__aeabi_dcmpgt>
 8008552:	2800      	cmp	r0, #0
 8008554:	f040 8295 	bne.w	8008a82 <_dtoa_r+0x97a>
 8008558:	4652      	mov	r2, sl
 800855a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800855e:	4640      	mov	r0, r8
 8008560:	4649      	mov	r1, r9
 8008562:	f7f8 fabb 	bl	8000adc <__aeabi_dcmplt>
 8008566:	2800      	cmp	r0, #0
 8008568:	f040 8289 	bne.w	8008a7e <_dtoa_r+0x976>
 800856c:	ec5b ab19 	vmov	sl, fp, d9
 8008570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008572:	2b00      	cmp	r3, #0
 8008574:	f2c0 8148 	blt.w	8008808 <_dtoa_r+0x700>
 8008578:	9a00      	ldr	r2, [sp, #0]
 800857a:	2a0e      	cmp	r2, #14
 800857c:	f300 8144 	bgt.w	8008808 <_dtoa_r+0x700>
 8008580:	4b67      	ldr	r3, [pc, #412]	; (8008720 <_dtoa_r+0x618>)
 8008582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008586:	e9d3 8900 	ldrd	r8, r9, [r3]
 800858a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858c:	2b00      	cmp	r3, #0
 800858e:	f280 80d5 	bge.w	800873c <_dtoa_r+0x634>
 8008592:	9b03      	ldr	r3, [sp, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	f300 80d1 	bgt.w	800873c <_dtoa_r+0x634>
 800859a:	f040 826f 	bne.w	8008a7c <_dtoa_r+0x974>
 800859e:	4b65      	ldr	r3, [pc, #404]	; (8008734 <_dtoa_r+0x62c>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	4640      	mov	r0, r8
 80085a4:	4649      	mov	r1, r9
 80085a6:	f7f8 f827 	bl	80005f8 <__aeabi_dmul>
 80085aa:	4652      	mov	r2, sl
 80085ac:	465b      	mov	r3, fp
 80085ae:	f7f8 faa9 	bl	8000b04 <__aeabi_dcmpge>
 80085b2:	9e03      	ldr	r6, [sp, #12]
 80085b4:	4637      	mov	r7, r6
 80085b6:	2800      	cmp	r0, #0
 80085b8:	f040 8245 	bne.w	8008a46 <_dtoa_r+0x93e>
 80085bc:	9d01      	ldr	r5, [sp, #4]
 80085be:	2331      	movs	r3, #49	; 0x31
 80085c0:	f805 3b01 	strb.w	r3, [r5], #1
 80085c4:	9b00      	ldr	r3, [sp, #0]
 80085c6:	3301      	adds	r3, #1
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	e240      	b.n	8008a4e <_dtoa_r+0x946>
 80085cc:	07f2      	lsls	r2, r6, #31
 80085ce:	d505      	bpl.n	80085dc <_dtoa_r+0x4d4>
 80085d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d4:	f7f8 f810 	bl	80005f8 <__aeabi_dmul>
 80085d8:	3501      	adds	r5, #1
 80085da:	2301      	movs	r3, #1
 80085dc:	1076      	asrs	r6, r6, #1
 80085de:	3708      	adds	r7, #8
 80085e0:	e777      	b.n	80084d2 <_dtoa_r+0x3ca>
 80085e2:	2502      	movs	r5, #2
 80085e4:	e779      	b.n	80084da <_dtoa_r+0x3d2>
 80085e6:	9f00      	ldr	r7, [sp, #0]
 80085e8:	9e03      	ldr	r6, [sp, #12]
 80085ea:	e794      	b.n	8008516 <_dtoa_r+0x40e>
 80085ec:	9901      	ldr	r1, [sp, #4]
 80085ee:	4b4c      	ldr	r3, [pc, #304]	; (8008720 <_dtoa_r+0x618>)
 80085f0:	4431      	add	r1, r6
 80085f2:	910d      	str	r1, [sp, #52]	; 0x34
 80085f4:	9908      	ldr	r1, [sp, #32]
 80085f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80085fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085fe:	2900      	cmp	r1, #0
 8008600:	d043      	beq.n	800868a <_dtoa_r+0x582>
 8008602:	494d      	ldr	r1, [pc, #308]	; (8008738 <_dtoa_r+0x630>)
 8008604:	2000      	movs	r0, #0
 8008606:	f7f8 f921 	bl	800084c <__aeabi_ddiv>
 800860a:	4652      	mov	r2, sl
 800860c:	465b      	mov	r3, fp
 800860e:	f7f7 fe3b 	bl	8000288 <__aeabi_dsub>
 8008612:	9d01      	ldr	r5, [sp, #4]
 8008614:	4682      	mov	sl, r0
 8008616:	468b      	mov	fp, r1
 8008618:	4649      	mov	r1, r9
 800861a:	4640      	mov	r0, r8
 800861c:	f7f8 fa9c 	bl	8000b58 <__aeabi_d2iz>
 8008620:	4606      	mov	r6, r0
 8008622:	f7f7 ff7f 	bl	8000524 <__aeabi_i2d>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	4640      	mov	r0, r8
 800862c:	4649      	mov	r1, r9
 800862e:	f7f7 fe2b 	bl	8000288 <__aeabi_dsub>
 8008632:	3630      	adds	r6, #48	; 0x30
 8008634:	f805 6b01 	strb.w	r6, [r5], #1
 8008638:	4652      	mov	r2, sl
 800863a:	465b      	mov	r3, fp
 800863c:	4680      	mov	r8, r0
 800863e:	4689      	mov	r9, r1
 8008640:	f7f8 fa4c 	bl	8000adc <__aeabi_dcmplt>
 8008644:	2800      	cmp	r0, #0
 8008646:	d163      	bne.n	8008710 <_dtoa_r+0x608>
 8008648:	4642      	mov	r2, r8
 800864a:	464b      	mov	r3, r9
 800864c:	4936      	ldr	r1, [pc, #216]	; (8008728 <_dtoa_r+0x620>)
 800864e:	2000      	movs	r0, #0
 8008650:	f7f7 fe1a 	bl	8000288 <__aeabi_dsub>
 8008654:	4652      	mov	r2, sl
 8008656:	465b      	mov	r3, fp
 8008658:	f7f8 fa40 	bl	8000adc <__aeabi_dcmplt>
 800865c:	2800      	cmp	r0, #0
 800865e:	f040 80b5 	bne.w	80087cc <_dtoa_r+0x6c4>
 8008662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008664:	429d      	cmp	r5, r3
 8008666:	d081      	beq.n	800856c <_dtoa_r+0x464>
 8008668:	4b30      	ldr	r3, [pc, #192]	; (800872c <_dtoa_r+0x624>)
 800866a:	2200      	movs	r2, #0
 800866c:	4650      	mov	r0, sl
 800866e:	4659      	mov	r1, fp
 8008670:	f7f7 ffc2 	bl	80005f8 <__aeabi_dmul>
 8008674:	4b2d      	ldr	r3, [pc, #180]	; (800872c <_dtoa_r+0x624>)
 8008676:	4682      	mov	sl, r0
 8008678:	468b      	mov	fp, r1
 800867a:	4640      	mov	r0, r8
 800867c:	4649      	mov	r1, r9
 800867e:	2200      	movs	r2, #0
 8008680:	f7f7 ffba 	bl	80005f8 <__aeabi_dmul>
 8008684:	4680      	mov	r8, r0
 8008686:	4689      	mov	r9, r1
 8008688:	e7c6      	b.n	8008618 <_dtoa_r+0x510>
 800868a:	4650      	mov	r0, sl
 800868c:	4659      	mov	r1, fp
 800868e:	f7f7 ffb3 	bl	80005f8 <__aeabi_dmul>
 8008692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008694:	9d01      	ldr	r5, [sp, #4]
 8008696:	930f      	str	r3, [sp, #60]	; 0x3c
 8008698:	4682      	mov	sl, r0
 800869a:	468b      	mov	fp, r1
 800869c:	4649      	mov	r1, r9
 800869e:	4640      	mov	r0, r8
 80086a0:	f7f8 fa5a 	bl	8000b58 <__aeabi_d2iz>
 80086a4:	4606      	mov	r6, r0
 80086a6:	f7f7 ff3d 	bl	8000524 <__aeabi_i2d>
 80086aa:	3630      	adds	r6, #48	; 0x30
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	4640      	mov	r0, r8
 80086b2:	4649      	mov	r1, r9
 80086b4:	f7f7 fde8 	bl	8000288 <__aeabi_dsub>
 80086b8:	f805 6b01 	strb.w	r6, [r5], #1
 80086bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086be:	429d      	cmp	r5, r3
 80086c0:	4680      	mov	r8, r0
 80086c2:	4689      	mov	r9, r1
 80086c4:	f04f 0200 	mov.w	r2, #0
 80086c8:	d124      	bne.n	8008714 <_dtoa_r+0x60c>
 80086ca:	4b1b      	ldr	r3, [pc, #108]	; (8008738 <_dtoa_r+0x630>)
 80086cc:	4650      	mov	r0, sl
 80086ce:	4659      	mov	r1, fp
 80086d0:	f7f7 fddc 	bl	800028c <__adddf3>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4640      	mov	r0, r8
 80086da:	4649      	mov	r1, r9
 80086dc:	f7f8 fa1c 	bl	8000b18 <__aeabi_dcmpgt>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d173      	bne.n	80087cc <_dtoa_r+0x6c4>
 80086e4:	4652      	mov	r2, sl
 80086e6:	465b      	mov	r3, fp
 80086e8:	4913      	ldr	r1, [pc, #76]	; (8008738 <_dtoa_r+0x630>)
 80086ea:	2000      	movs	r0, #0
 80086ec:	f7f7 fdcc 	bl	8000288 <__aeabi_dsub>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	4640      	mov	r0, r8
 80086f6:	4649      	mov	r1, r9
 80086f8:	f7f8 f9f0 	bl	8000adc <__aeabi_dcmplt>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	f43f af35 	beq.w	800856c <_dtoa_r+0x464>
 8008702:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008704:	1e6b      	subs	r3, r5, #1
 8008706:	930f      	str	r3, [sp, #60]	; 0x3c
 8008708:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800870c:	2b30      	cmp	r3, #48	; 0x30
 800870e:	d0f8      	beq.n	8008702 <_dtoa_r+0x5fa>
 8008710:	9700      	str	r7, [sp, #0]
 8008712:	e049      	b.n	80087a8 <_dtoa_r+0x6a0>
 8008714:	4b05      	ldr	r3, [pc, #20]	; (800872c <_dtoa_r+0x624>)
 8008716:	f7f7 ff6f 	bl	80005f8 <__aeabi_dmul>
 800871a:	4680      	mov	r8, r0
 800871c:	4689      	mov	r9, r1
 800871e:	e7bd      	b.n	800869c <_dtoa_r+0x594>
 8008720:	0800abc0 	.word	0x0800abc0
 8008724:	0800ab98 	.word	0x0800ab98
 8008728:	3ff00000 	.word	0x3ff00000
 800872c:	40240000 	.word	0x40240000
 8008730:	401c0000 	.word	0x401c0000
 8008734:	40140000 	.word	0x40140000
 8008738:	3fe00000 	.word	0x3fe00000
 800873c:	9d01      	ldr	r5, [sp, #4]
 800873e:	4656      	mov	r6, sl
 8008740:	465f      	mov	r7, fp
 8008742:	4642      	mov	r2, r8
 8008744:	464b      	mov	r3, r9
 8008746:	4630      	mov	r0, r6
 8008748:	4639      	mov	r1, r7
 800874a:	f7f8 f87f 	bl	800084c <__aeabi_ddiv>
 800874e:	f7f8 fa03 	bl	8000b58 <__aeabi_d2iz>
 8008752:	4682      	mov	sl, r0
 8008754:	f7f7 fee6 	bl	8000524 <__aeabi_i2d>
 8008758:	4642      	mov	r2, r8
 800875a:	464b      	mov	r3, r9
 800875c:	f7f7 ff4c 	bl	80005f8 <__aeabi_dmul>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4630      	mov	r0, r6
 8008766:	4639      	mov	r1, r7
 8008768:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800876c:	f7f7 fd8c 	bl	8000288 <__aeabi_dsub>
 8008770:	f805 6b01 	strb.w	r6, [r5], #1
 8008774:	9e01      	ldr	r6, [sp, #4]
 8008776:	9f03      	ldr	r7, [sp, #12]
 8008778:	1bae      	subs	r6, r5, r6
 800877a:	42b7      	cmp	r7, r6
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	d135      	bne.n	80087ee <_dtoa_r+0x6e6>
 8008782:	f7f7 fd83 	bl	800028c <__adddf3>
 8008786:	4642      	mov	r2, r8
 8008788:	464b      	mov	r3, r9
 800878a:	4606      	mov	r6, r0
 800878c:	460f      	mov	r7, r1
 800878e:	f7f8 f9c3 	bl	8000b18 <__aeabi_dcmpgt>
 8008792:	b9d0      	cbnz	r0, 80087ca <_dtoa_r+0x6c2>
 8008794:	4642      	mov	r2, r8
 8008796:	464b      	mov	r3, r9
 8008798:	4630      	mov	r0, r6
 800879a:	4639      	mov	r1, r7
 800879c:	f7f8 f994 	bl	8000ac8 <__aeabi_dcmpeq>
 80087a0:	b110      	cbz	r0, 80087a8 <_dtoa_r+0x6a0>
 80087a2:	f01a 0f01 	tst.w	sl, #1
 80087a6:	d110      	bne.n	80087ca <_dtoa_r+0x6c2>
 80087a8:	4620      	mov	r0, r4
 80087aa:	ee18 1a10 	vmov	r1, s16
 80087ae:	f000 fcf1 	bl	8009194 <_Bfree>
 80087b2:	2300      	movs	r3, #0
 80087b4:	9800      	ldr	r0, [sp, #0]
 80087b6:	702b      	strb	r3, [r5, #0]
 80087b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087ba:	3001      	adds	r0, #1
 80087bc:	6018      	str	r0, [r3, #0]
 80087be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f43f acf1 	beq.w	80081a8 <_dtoa_r+0xa0>
 80087c6:	601d      	str	r5, [r3, #0]
 80087c8:	e4ee      	b.n	80081a8 <_dtoa_r+0xa0>
 80087ca:	9f00      	ldr	r7, [sp, #0]
 80087cc:	462b      	mov	r3, r5
 80087ce:	461d      	mov	r5, r3
 80087d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087d4:	2a39      	cmp	r2, #57	; 0x39
 80087d6:	d106      	bne.n	80087e6 <_dtoa_r+0x6de>
 80087d8:	9a01      	ldr	r2, [sp, #4]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d1f7      	bne.n	80087ce <_dtoa_r+0x6c6>
 80087de:	9901      	ldr	r1, [sp, #4]
 80087e0:	2230      	movs	r2, #48	; 0x30
 80087e2:	3701      	adds	r7, #1
 80087e4:	700a      	strb	r2, [r1, #0]
 80087e6:	781a      	ldrb	r2, [r3, #0]
 80087e8:	3201      	adds	r2, #1
 80087ea:	701a      	strb	r2, [r3, #0]
 80087ec:	e790      	b.n	8008710 <_dtoa_r+0x608>
 80087ee:	4ba6      	ldr	r3, [pc, #664]	; (8008a88 <_dtoa_r+0x980>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	f7f7 ff01 	bl	80005f8 <__aeabi_dmul>
 80087f6:	2200      	movs	r2, #0
 80087f8:	2300      	movs	r3, #0
 80087fa:	4606      	mov	r6, r0
 80087fc:	460f      	mov	r7, r1
 80087fe:	f7f8 f963 	bl	8000ac8 <__aeabi_dcmpeq>
 8008802:	2800      	cmp	r0, #0
 8008804:	d09d      	beq.n	8008742 <_dtoa_r+0x63a>
 8008806:	e7cf      	b.n	80087a8 <_dtoa_r+0x6a0>
 8008808:	9a08      	ldr	r2, [sp, #32]
 800880a:	2a00      	cmp	r2, #0
 800880c:	f000 80d7 	beq.w	80089be <_dtoa_r+0x8b6>
 8008810:	9a06      	ldr	r2, [sp, #24]
 8008812:	2a01      	cmp	r2, #1
 8008814:	f300 80ba 	bgt.w	800898c <_dtoa_r+0x884>
 8008818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800881a:	2a00      	cmp	r2, #0
 800881c:	f000 80b2 	beq.w	8008984 <_dtoa_r+0x87c>
 8008820:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008824:	9e07      	ldr	r6, [sp, #28]
 8008826:	9d04      	ldr	r5, [sp, #16]
 8008828:	9a04      	ldr	r2, [sp, #16]
 800882a:	441a      	add	r2, r3
 800882c:	9204      	str	r2, [sp, #16]
 800882e:	9a05      	ldr	r2, [sp, #20]
 8008830:	2101      	movs	r1, #1
 8008832:	441a      	add	r2, r3
 8008834:	4620      	mov	r0, r4
 8008836:	9205      	str	r2, [sp, #20]
 8008838:	f000 fd64 	bl	8009304 <__i2b>
 800883c:	4607      	mov	r7, r0
 800883e:	2d00      	cmp	r5, #0
 8008840:	dd0c      	ble.n	800885c <_dtoa_r+0x754>
 8008842:	9b05      	ldr	r3, [sp, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	dd09      	ble.n	800885c <_dtoa_r+0x754>
 8008848:	42ab      	cmp	r3, r5
 800884a:	9a04      	ldr	r2, [sp, #16]
 800884c:	bfa8      	it	ge
 800884e:	462b      	movge	r3, r5
 8008850:	1ad2      	subs	r2, r2, r3
 8008852:	9204      	str	r2, [sp, #16]
 8008854:	9a05      	ldr	r2, [sp, #20]
 8008856:	1aed      	subs	r5, r5, r3
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	9305      	str	r3, [sp, #20]
 800885c:	9b07      	ldr	r3, [sp, #28]
 800885e:	b31b      	cbz	r3, 80088a8 <_dtoa_r+0x7a0>
 8008860:	9b08      	ldr	r3, [sp, #32]
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 80af 	beq.w	80089c6 <_dtoa_r+0x8be>
 8008868:	2e00      	cmp	r6, #0
 800886a:	dd13      	ble.n	8008894 <_dtoa_r+0x78c>
 800886c:	4639      	mov	r1, r7
 800886e:	4632      	mov	r2, r6
 8008870:	4620      	mov	r0, r4
 8008872:	f000 fe07 	bl	8009484 <__pow5mult>
 8008876:	ee18 2a10 	vmov	r2, s16
 800887a:	4601      	mov	r1, r0
 800887c:	4607      	mov	r7, r0
 800887e:	4620      	mov	r0, r4
 8008880:	f000 fd56 	bl	8009330 <__multiply>
 8008884:	ee18 1a10 	vmov	r1, s16
 8008888:	4680      	mov	r8, r0
 800888a:	4620      	mov	r0, r4
 800888c:	f000 fc82 	bl	8009194 <_Bfree>
 8008890:	ee08 8a10 	vmov	s16, r8
 8008894:	9b07      	ldr	r3, [sp, #28]
 8008896:	1b9a      	subs	r2, r3, r6
 8008898:	d006      	beq.n	80088a8 <_dtoa_r+0x7a0>
 800889a:	ee18 1a10 	vmov	r1, s16
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 fdf0 	bl	8009484 <__pow5mult>
 80088a4:	ee08 0a10 	vmov	s16, r0
 80088a8:	2101      	movs	r1, #1
 80088aa:	4620      	mov	r0, r4
 80088ac:	f000 fd2a 	bl	8009304 <__i2b>
 80088b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	4606      	mov	r6, r0
 80088b6:	f340 8088 	ble.w	80089ca <_dtoa_r+0x8c2>
 80088ba:	461a      	mov	r2, r3
 80088bc:	4601      	mov	r1, r0
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 fde0 	bl	8009484 <__pow5mult>
 80088c4:	9b06      	ldr	r3, [sp, #24]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	4606      	mov	r6, r0
 80088ca:	f340 8081 	ble.w	80089d0 <_dtoa_r+0x8c8>
 80088ce:	f04f 0800 	mov.w	r8, #0
 80088d2:	6933      	ldr	r3, [r6, #16]
 80088d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088d8:	6918      	ldr	r0, [r3, #16]
 80088da:	f000 fcc3 	bl	8009264 <__hi0bits>
 80088de:	f1c0 0020 	rsb	r0, r0, #32
 80088e2:	9b05      	ldr	r3, [sp, #20]
 80088e4:	4418      	add	r0, r3
 80088e6:	f010 001f 	ands.w	r0, r0, #31
 80088ea:	f000 8092 	beq.w	8008a12 <_dtoa_r+0x90a>
 80088ee:	f1c0 0320 	rsb	r3, r0, #32
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	f340 808a 	ble.w	8008a0c <_dtoa_r+0x904>
 80088f8:	f1c0 001c 	rsb	r0, r0, #28
 80088fc:	9b04      	ldr	r3, [sp, #16]
 80088fe:	4403      	add	r3, r0
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	9b05      	ldr	r3, [sp, #20]
 8008904:	4403      	add	r3, r0
 8008906:	4405      	add	r5, r0
 8008908:	9305      	str	r3, [sp, #20]
 800890a:	9b04      	ldr	r3, [sp, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	dd07      	ble.n	8008920 <_dtoa_r+0x818>
 8008910:	ee18 1a10 	vmov	r1, s16
 8008914:	461a      	mov	r2, r3
 8008916:	4620      	mov	r0, r4
 8008918:	f000 fe0e 	bl	8009538 <__lshift>
 800891c:	ee08 0a10 	vmov	s16, r0
 8008920:	9b05      	ldr	r3, [sp, #20]
 8008922:	2b00      	cmp	r3, #0
 8008924:	dd05      	ble.n	8008932 <_dtoa_r+0x82a>
 8008926:	4631      	mov	r1, r6
 8008928:	461a      	mov	r2, r3
 800892a:	4620      	mov	r0, r4
 800892c:	f000 fe04 	bl	8009538 <__lshift>
 8008930:	4606      	mov	r6, r0
 8008932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d06e      	beq.n	8008a16 <_dtoa_r+0x90e>
 8008938:	ee18 0a10 	vmov	r0, s16
 800893c:	4631      	mov	r1, r6
 800893e:	f000 fe6b 	bl	8009618 <__mcmp>
 8008942:	2800      	cmp	r0, #0
 8008944:	da67      	bge.n	8008a16 <_dtoa_r+0x90e>
 8008946:	9b00      	ldr	r3, [sp, #0]
 8008948:	3b01      	subs	r3, #1
 800894a:	ee18 1a10 	vmov	r1, s16
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	220a      	movs	r2, #10
 8008952:	2300      	movs	r3, #0
 8008954:	4620      	mov	r0, r4
 8008956:	f000 fc3f 	bl	80091d8 <__multadd>
 800895a:	9b08      	ldr	r3, [sp, #32]
 800895c:	ee08 0a10 	vmov	s16, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 81b1 	beq.w	8008cc8 <_dtoa_r+0xbc0>
 8008966:	2300      	movs	r3, #0
 8008968:	4639      	mov	r1, r7
 800896a:	220a      	movs	r2, #10
 800896c:	4620      	mov	r0, r4
 800896e:	f000 fc33 	bl	80091d8 <__multadd>
 8008972:	9b02      	ldr	r3, [sp, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	4607      	mov	r7, r0
 8008978:	f300 808e 	bgt.w	8008a98 <_dtoa_r+0x990>
 800897c:	9b06      	ldr	r3, [sp, #24]
 800897e:	2b02      	cmp	r3, #2
 8008980:	dc51      	bgt.n	8008a26 <_dtoa_r+0x91e>
 8008982:	e089      	b.n	8008a98 <_dtoa_r+0x990>
 8008984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800898a:	e74b      	b.n	8008824 <_dtoa_r+0x71c>
 800898c:	9b03      	ldr	r3, [sp, #12]
 800898e:	1e5e      	subs	r6, r3, #1
 8008990:	9b07      	ldr	r3, [sp, #28]
 8008992:	42b3      	cmp	r3, r6
 8008994:	bfbf      	itttt	lt
 8008996:	9b07      	ldrlt	r3, [sp, #28]
 8008998:	9607      	strlt	r6, [sp, #28]
 800899a:	1af2      	sublt	r2, r6, r3
 800899c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800899e:	bfb6      	itet	lt
 80089a0:	189b      	addlt	r3, r3, r2
 80089a2:	1b9e      	subge	r6, r3, r6
 80089a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80089a6:	9b03      	ldr	r3, [sp, #12]
 80089a8:	bfb8      	it	lt
 80089aa:	2600      	movlt	r6, #0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	bfb7      	itett	lt
 80089b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80089b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80089b8:	1a9d      	sublt	r5, r3, r2
 80089ba:	2300      	movlt	r3, #0
 80089bc:	e734      	b.n	8008828 <_dtoa_r+0x720>
 80089be:	9e07      	ldr	r6, [sp, #28]
 80089c0:	9d04      	ldr	r5, [sp, #16]
 80089c2:	9f08      	ldr	r7, [sp, #32]
 80089c4:	e73b      	b.n	800883e <_dtoa_r+0x736>
 80089c6:	9a07      	ldr	r2, [sp, #28]
 80089c8:	e767      	b.n	800889a <_dtoa_r+0x792>
 80089ca:	9b06      	ldr	r3, [sp, #24]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	dc18      	bgt.n	8008a02 <_dtoa_r+0x8fa>
 80089d0:	f1ba 0f00 	cmp.w	sl, #0
 80089d4:	d115      	bne.n	8008a02 <_dtoa_r+0x8fa>
 80089d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089da:	b993      	cbnz	r3, 8008a02 <_dtoa_r+0x8fa>
 80089dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089e0:	0d1b      	lsrs	r3, r3, #20
 80089e2:	051b      	lsls	r3, r3, #20
 80089e4:	b183      	cbz	r3, 8008a08 <_dtoa_r+0x900>
 80089e6:	9b04      	ldr	r3, [sp, #16]
 80089e8:	3301      	adds	r3, #1
 80089ea:	9304      	str	r3, [sp, #16]
 80089ec:	9b05      	ldr	r3, [sp, #20]
 80089ee:	3301      	adds	r3, #1
 80089f0:	9305      	str	r3, [sp, #20]
 80089f2:	f04f 0801 	mov.w	r8, #1
 80089f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f47f af6a 	bne.w	80088d2 <_dtoa_r+0x7ca>
 80089fe:	2001      	movs	r0, #1
 8008a00:	e76f      	b.n	80088e2 <_dtoa_r+0x7da>
 8008a02:	f04f 0800 	mov.w	r8, #0
 8008a06:	e7f6      	b.n	80089f6 <_dtoa_r+0x8ee>
 8008a08:	4698      	mov	r8, r3
 8008a0a:	e7f4      	b.n	80089f6 <_dtoa_r+0x8ee>
 8008a0c:	f43f af7d 	beq.w	800890a <_dtoa_r+0x802>
 8008a10:	4618      	mov	r0, r3
 8008a12:	301c      	adds	r0, #28
 8008a14:	e772      	b.n	80088fc <_dtoa_r+0x7f4>
 8008a16:	9b03      	ldr	r3, [sp, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	dc37      	bgt.n	8008a8c <_dtoa_r+0x984>
 8008a1c:	9b06      	ldr	r3, [sp, #24]
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	dd34      	ble.n	8008a8c <_dtoa_r+0x984>
 8008a22:	9b03      	ldr	r3, [sp, #12]
 8008a24:	9302      	str	r3, [sp, #8]
 8008a26:	9b02      	ldr	r3, [sp, #8]
 8008a28:	b96b      	cbnz	r3, 8008a46 <_dtoa_r+0x93e>
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	2205      	movs	r2, #5
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 fbd2 	bl	80091d8 <__multadd>
 8008a34:	4601      	mov	r1, r0
 8008a36:	4606      	mov	r6, r0
 8008a38:	ee18 0a10 	vmov	r0, s16
 8008a3c:	f000 fdec 	bl	8009618 <__mcmp>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	f73f adbb 	bgt.w	80085bc <_dtoa_r+0x4b4>
 8008a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a48:	9d01      	ldr	r5, [sp, #4]
 8008a4a:	43db      	mvns	r3, r3
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	f04f 0800 	mov.w	r8, #0
 8008a52:	4631      	mov	r1, r6
 8008a54:	4620      	mov	r0, r4
 8008a56:	f000 fb9d 	bl	8009194 <_Bfree>
 8008a5a:	2f00      	cmp	r7, #0
 8008a5c:	f43f aea4 	beq.w	80087a8 <_dtoa_r+0x6a0>
 8008a60:	f1b8 0f00 	cmp.w	r8, #0
 8008a64:	d005      	beq.n	8008a72 <_dtoa_r+0x96a>
 8008a66:	45b8      	cmp	r8, r7
 8008a68:	d003      	beq.n	8008a72 <_dtoa_r+0x96a>
 8008a6a:	4641      	mov	r1, r8
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 fb91 	bl	8009194 <_Bfree>
 8008a72:	4639      	mov	r1, r7
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 fb8d 	bl	8009194 <_Bfree>
 8008a7a:	e695      	b.n	80087a8 <_dtoa_r+0x6a0>
 8008a7c:	2600      	movs	r6, #0
 8008a7e:	4637      	mov	r7, r6
 8008a80:	e7e1      	b.n	8008a46 <_dtoa_r+0x93e>
 8008a82:	9700      	str	r7, [sp, #0]
 8008a84:	4637      	mov	r7, r6
 8008a86:	e599      	b.n	80085bc <_dtoa_r+0x4b4>
 8008a88:	40240000 	.word	0x40240000
 8008a8c:	9b08      	ldr	r3, [sp, #32]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f000 80ca 	beq.w	8008c28 <_dtoa_r+0xb20>
 8008a94:	9b03      	ldr	r3, [sp, #12]
 8008a96:	9302      	str	r3, [sp, #8]
 8008a98:	2d00      	cmp	r5, #0
 8008a9a:	dd05      	ble.n	8008aa8 <_dtoa_r+0x9a0>
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	462a      	mov	r2, r5
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 fd49 	bl	8009538 <__lshift>
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	f1b8 0f00 	cmp.w	r8, #0
 8008aac:	d05b      	beq.n	8008b66 <_dtoa_r+0xa5e>
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 fb2f 	bl	8009114 <_Balloc>
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	b928      	cbnz	r0, 8008ac6 <_dtoa_r+0x9be>
 8008aba:	4b87      	ldr	r3, [pc, #540]	; (8008cd8 <_dtoa_r+0xbd0>)
 8008abc:	4602      	mov	r2, r0
 8008abe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ac2:	f7ff bb3b 	b.w	800813c <_dtoa_r+0x34>
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	3202      	adds	r2, #2
 8008aca:	0092      	lsls	r2, r2, #2
 8008acc:	f107 010c 	add.w	r1, r7, #12
 8008ad0:	300c      	adds	r0, #12
 8008ad2:	f000 fb04 	bl	80090de <memcpy>
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	4629      	mov	r1, r5
 8008ada:	4620      	mov	r0, r4
 8008adc:	f000 fd2c 	bl	8009538 <__lshift>
 8008ae0:	9b01      	ldr	r3, [sp, #4]
 8008ae2:	f103 0901 	add.w	r9, r3, #1
 8008ae6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008aea:	4413      	add	r3, r2
 8008aec:	9305      	str	r3, [sp, #20]
 8008aee:	f00a 0301 	and.w	r3, sl, #1
 8008af2:	46b8      	mov	r8, r7
 8008af4:	9304      	str	r3, [sp, #16]
 8008af6:	4607      	mov	r7, r0
 8008af8:	4631      	mov	r1, r6
 8008afa:	ee18 0a10 	vmov	r0, s16
 8008afe:	f7ff fa77 	bl	8007ff0 <quorem>
 8008b02:	4641      	mov	r1, r8
 8008b04:	9002      	str	r0, [sp, #8]
 8008b06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b0a:	ee18 0a10 	vmov	r0, s16
 8008b0e:	f000 fd83 	bl	8009618 <__mcmp>
 8008b12:	463a      	mov	r2, r7
 8008b14:	9003      	str	r0, [sp, #12]
 8008b16:	4631      	mov	r1, r6
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fd99 	bl	8009650 <__mdiff>
 8008b1e:	68c2      	ldr	r2, [r0, #12]
 8008b20:	f109 3bff 	add.w	fp, r9, #4294967295
 8008b24:	4605      	mov	r5, r0
 8008b26:	bb02      	cbnz	r2, 8008b6a <_dtoa_r+0xa62>
 8008b28:	4601      	mov	r1, r0
 8008b2a:	ee18 0a10 	vmov	r0, s16
 8008b2e:	f000 fd73 	bl	8009618 <__mcmp>
 8008b32:	4602      	mov	r2, r0
 8008b34:	4629      	mov	r1, r5
 8008b36:	4620      	mov	r0, r4
 8008b38:	9207      	str	r2, [sp, #28]
 8008b3a:	f000 fb2b 	bl	8009194 <_Bfree>
 8008b3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008b42:	ea43 0102 	orr.w	r1, r3, r2
 8008b46:	9b04      	ldr	r3, [sp, #16]
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	464d      	mov	r5, r9
 8008b4c:	d10f      	bne.n	8008b6e <_dtoa_r+0xa66>
 8008b4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b52:	d02a      	beq.n	8008baa <_dtoa_r+0xaa2>
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	dd02      	ble.n	8008b60 <_dtoa_r+0xa58>
 8008b5a:	9b02      	ldr	r3, [sp, #8]
 8008b5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b60:	f88b a000 	strb.w	sl, [fp]
 8008b64:	e775      	b.n	8008a52 <_dtoa_r+0x94a>
 8008b66:	4638      	mov	r0, r7
 8008b68:	e7ba      	b.n	8008ae0 <_dtoa_r+0x9d8>
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	e7e2      	b.n	8008b34 <_dtoa_r+0xa2c>
 8008b6e:	9b03      	ldr	r3, [sp, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	db04      	blt.n	8008b7e <_dtoa_r+0xa76>
 8008b74:	9906      	ldr	r1, [sp, #24]
 8008b76:	430b      	orrs	r3, r1
 8008b78:	9904      	ldr	r1, [sp, #16]
 8008b7a:	430b      	orrs	r3, r1
 8008b7c:	d122      	bne.n	8008bc4 <_dtoa_r+0xabc>
 8008b7e:	2a00      	cmp	r2, #0
 8008b80:	ddee      	ble.n	8008b60 <_dtoa_r+0xa58>
 8008b82:	ee18 1a10 	vmov	r1, s16
 8008b86:	2201      	movs	r2, #1
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f000 fcd5 	bl	8009538 <__lshift>
 8008b8e:	4631      	mov	r1, r6
 8008b90:	ee08 0a10 	vmov	s16, r0
 8008b94:	f000 fd40 	bl	8009618 <__mcmp>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	dc03      	bgt.n	8008ba4 <_dtoa_r+0xa9c>
 8008b9c:	d1e0      	bne.n	8008b60 <_dtoa_r+0xa58>
 8008b9e:	f01a 0f01 	tst.w	sl, #1
 8008ba2:	d0dd      	beq.n	8008b60 <_dtoa_r+0xa58>
 8008ba4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ba8:	d1d7      	bne.n	8008b5a <_dtoa_r+0xa52>
 8008baa:	2339      	movs	r3, #57	; 0x39
 8008bac:	f88b 3000 	strb.w	r3, [fp]
 8008bb0:	462b      	mov	r3, r5
 8008bb2:	461d      	mov	r5, r3
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bba:	2a39      	cmp	r2, #57	; 0x39
 8008bbc:	d071      	beq.n	8008ca2 <_dtoa_r+0xb9a>
 8008bbe:	3201      	adds	r2, #1
 8008bc0:	701a      	strb	r2, [r3, #0]
 8008bc2:	e746      	b.n	8008a52 <_dtoa_r+0x94a>
 8008bc4:	2a00      	cmp	r2, #0
 8008bc6:	dd07      	ble.n	8008bd8 <_dtoa_r+0xad0>
 8008bc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bcc:	d0ed      	beq.n	8008baa <_dtoa_r+0xaa2>
 8008bce:	f10a 0301 	add.w	r3, sl, #1
 8008bd2:	f88b 3000 	strb.w	r3, [fp]
 8008bd6:	e73c      	b.n	8008a52 <_dtoa_r+0x94a>
 8008bd8:	9b05      	ldr	r3, [sp, #20]
 8008bda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008bde:	4599      	cmp	r9, r3
 8008be0:	d047      	beq.n	8008c72 <_dtoa_r+0xb6a>
 8008be2:	ee18 1a10 	vmov	r1, s16
 8008be6:	2300      	movs	r3, #0
 8008be8:	220a      	movs	r2, #10
 8008bea:	4620      	mov	r0, r4
 8008bec:	f000 faf4 	bl	80091d8 <__multadd>
 8008bf0:	45b8      	cmp	r8, r7
 8008bf2:	ee08 0a10 	vmov	s16, r0
 8008bf6:	f04f 0300 	mov.w	r3, #0
 8008bfa:	f04f 020a 	mov.w	r2, #10
 8008bfe:	4641      	mov	r1, r8
 8008c00:	4620      	mov	r0, r4
 8008c02:	d106      	bne.n	8008c12 <_dtoa_r+0xb0a>
 8008c04:	f000 fae8 	bl	80091d8 <__multadd>
 8008c08:	4680      	mov	r8, r0
 8008c0a:	4607      	mov	r7, r0
 8008c0c:	f109 0901 	add.w	r9, r9, #1
 8008c10:	e772      	b.n	8008af8 <_dtoa_r+0x9f0>
 8008c12:	f000 fae1 	bl	80091d8 <__multadd>
 8008c16:	4639      	mov	r1, r7
 8008c18:	4680      	mov	r8, r0
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	220a      	movs	r2, #10
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f000 fada 	bl	80091d8 <__multadd>
 8008c24:	4607      	mov	r7, r0
 8008c26:	e7f1      	b.n	8008c0c <_dtoa_r+0xb04>
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	9302      	str	r3, [sp, #8]
 8008c2c:	9d01      	ldr	r5, [sp, #4]
 8008c2e:	ee18 0a10 	vmov	r0, s16
 8008c32:	4631      	mov	r1, r6
 8008c34:	f7ff f9dc 	bl	8007ff0 <quorem>
 8008c38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c3c:	9b01      	ldr	r3, [sp, #4]
 8008c3e:	f805 ab01 	strb.w	sl, [r5], #1
 8008c42:	1aea      	subs	r2, r5, r3
 8008c44:	9b02      	ldr	r3, [sp, #8]
 8008c46:	4293      	cmp	r3, r2
 8008c48:	dd09      	ble.n	8008c5e <_dtoa_r+0xb56>
 8008c4a:	ee18 1a10 	vmov	r1, s16
 8008c4e:	2300      	movs	r3, #0
 8008c50:	220a      	movs	r2, #10
 8008c52:	4620      	mov	r0, r4
 8008c54:	f000 fac0 	bl	80091d8 <__multadd>
 8008c58:	ee08 0a10 	vmov	s16, r0
 8008c5c:	e7e7      	b.n	8008c2e <_dtoa_r+0xb26>
 8008c5e:	9b02      	ldr	r3, [sp, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	bfc8      	it	gt
 8008c64:	461d      	movgt	r5, r3
 8008c66:	9b01      	ldr	r3, [sp, #4]
 8008c68:	bfd8      	it	le
 8008c6a:	2501      	movle	r5, #1
 8008c6c:	441d      	add	r5, r3
 8008c6e:	f04f 0800 	mov.w	r8, #0
 8008c72:	ee18 1a10 	vmov	r1, s16
 8008c76:	2201      	movs	r2, #1
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 fc5d 	bl	8009538 <__lshift>
 8008c7e:	4631      	mov	r1, r6
 8008c80:	ee08 0a10 	vmov	s16, r0
 8008c84:	f000 fcc8 	bl	8009618 <__mcmp>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	dc91      	bgt.n	8008bb0 <_dtoa_r+0xaa8>
 8008c8c:	d102      	bne.n	8008c94 <_dtoa_r+0xb8c>
 8008c8e:	f01a 0f01 	tst.w	sl, #1
 8008c92:	d18d      	bne.n	8008bb0 <_dtoa_r+0xaa8>
 8008c94:	462b      	mov	r3, r5
 8008c96:	461d      	mov	r5, r3
 8008c98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c9c:	2a30      	cmp	r2, #48	; 0x30
 8008c9e:	d0fa      	beq.n	8008c96 <_dtoa_r+0xb8e>
 8008ca0:	e6d7      	b.n	8008a52 <_dtoa_r+0x94a>
 8008ca2:	9a01      	ldr	r2, [sp, #4]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d184      	bne.n	8008bb2 <_dtoa_r+0xaaa>
 8008ca8:	9b00      	ldr	r3, [sp, #0]
 8008caa:	3301      	adds	r3, #1
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	2331      	movs	r3, #49	; 0x31
 8008cb0:	7013      	strb	r3, [r2, #0]
 8008cb2:	e6ce      	b.n	8008a52 <_dtoa_r+0x94a>
 8008cb4:	4b09      	ldr	r3, [pc, #36]	; (8008cdc <_dtoa_r+0xbd4>)
 8008cb6:	f7ff ba95 	b.w	80081e4 <_dtoa_r+0xdc>
 8008cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f47f aa6e 	bne.w	800819e <_dtoa_r+0x96>
 8008cc2:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <_dtoa_r+0xbd8>)
 8008cc4:	f7ff ba8e 	b.w	80081e4 <_dtoa_r+0xdc>
 8008cc8:	9b02      	ldr	r3, [sp, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	dcae      	bgt.n	8008c2c <_dtoa_r+0xb24>
 8008cce:	9b06      	ldr	r3, [sp, #24]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	f73f aea8 	bgt.w	8008a26 <_dtoa_r+0x91e>
 8008cd6:	e7a9      	b.n	8008c2c <_dtoa_r+0xb24>
 8008cd8:	0800aac5 	.word	0x0800aac5
 8008cdc:	0800a38c 	.word	0x0800a38c
 8008ce0:	0800aa46 	.word	0x0800aa46

08008ce4 <__sflush_r>:
 8008ce4:	898a      	ldrh	r2, [r1, #12]
 8008ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cea:	4605      	mov	r5, r0
 8008cec:	0710      	lsls	r0, r2, #28
 8008cee:	460c      	mov	r4, r1
 8008cf0:	d458      	bmi.n	8008da4 <__sflush_r+0xc0>
 8008cf2:	684b      	ldr	r3, [r1, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	dc05      	bgt.n	8008d04 <__sflush_r+0x20>
 8008cf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	dc02      	bgt.n	8008d04 <__sflush_r+0x20>
 8008cfe:	2000      	movs	r0, #0
 8008d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d06:	2e00      	cmp	r6, #0
 8008d08:	d0f9      	beq.n	8008cfe <__sflush_r+0x1a>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d10:	682f      	ldr	r7, [r5, #0]
 8008d12:	602b      	str	r3, [r5, #0]
 8008d14:	d032      	beq.n	8008d7c <__sflush_r+0x98>
 8008d16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	075a      	lsls	r2, r3, #29
 8008d1c:	d505      	bpl.n	8008d2a <__sflush_r+0x46>
 8008d1e:	6863      	ldr	r3, [r4, #4]
 8008d20:	1ac0      	subs	r0, r0, r3
 8008d22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d24:	b10b      	cbz	r3, 8008d2a <__sflush_r+0x46>
 8008d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d28:	1ac0      	subs	r0, r0, r3
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d30:	6a21      	ldr	r1, [r4, #32]
 8008d32:	4628      	mov	r0, r5
 8008d34:	47b0      	blx	r6
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	d106      	bne.n	8008d4a <__sflush_r+0x66>
 8008d3c:	6829      	ldr	r1, [r5, #0]
 8008d3e:	291d      	cmp	r1, #29
 8008d40:	d82c      	bhi.n	8008d9c <__sflush_r+0xb8>
 8008d42:	4a2a      	ldr	r2, [pc, #168]	; (8008dec <__sflush_r+0x108>)
 8008d44:	40ca      	lsrs	r2, r1
 8008d46:	07d6      	lsls	r6, r2, #31
 8008d48:	d528      	bpl.n	8008d9c <__sflush_r+0xb8>
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	6062      	str	r2, [r4, #4]
 8008d4e:	04d9      	lsls	r1, r3, #19
 8008d50:	6922      	ldr	r2, [r4, #16]
 8008d52:	6022      	str	r2, [r4, #0]
 8008d54:	d504      	bpl.n	8008d60 <__sflush_r+0x7c>
 8008d56:	1c42      	adds	r2, r0, #1
 8008d58:	d101      	bne.n	8008d5e <__sflush_r+0x7a>
 8008d5a:	682b      	ldr	r3, [r5, #0]
 8008d5c:	b903      	cbnz	r3, 8008d60 <__sflush_r+0x7c>
 8008d5e:	6560      	str	r0, [r4, #84]	; 0x54
 8008d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d62:	602f      	str	r7, [r5, #0]
 8008d64:	2900      	cmp	r1, #0
 8008d66:	d0ca      	beq.n	8008cfe <__sflush_r+0x1a>
 8008d68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d6c:	4299      	cmp	r1, r3
 8008d6e:	d002      	beq.n	8008d76 <__sflush_r+0x92>
 8008d70:	4628      	mov	r0, r5
 8008d72:	f7fe f8e3 	bl	8006f3c <_free_r>
 8008d76:	2000      	movs	r0, #0
 8008d78:	6360      	str	r0, [r4, #52]	; 0x34
 8008d7a:	e7c1      	b.n	8008d00 <__sflush_r+0x1c>
 8008d7c:	6a21      	ldr	r1, [r4, #32]
 8008d7e:	2301      	movs	r3, #1
 8008d80:	4628      	mov	r0, r5
 8008d82:	47b0      	blx	r6
 8008d84:	1c41      	adds	r1, r0, #1
 8008d86:	d1c7      	bne.n	8008d18 <__sflush_r+0x34>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0c4      	beq.n	8008d18 <__sflush_r+0x34>
 8008d8e:	2b1d      	cmp	r3, #29
 8008d90:	d001      	beq.n	8008d96 <__sflush_r+0xb2>
 8008d92:	2b16      	cmp	r3, #22
 8008d94:	d101      	bne.n	8008d9a <__sflush_r+0xb6>
 8008d96:	602f      	str	r7, [r5, #0]
 8008d98:	e7b1      	b.n	8008cfe <__sflush_r+0x1a>
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008da0:	81a3      	strh	r3, [r4, #12]
 8008da2:	e7ad      	b.n	8008d00 <__sflush_r+0x1c>
 8008da4:	690f      	ldr	r7, [r1, #16]
 8008da6:	2f00      	cmp	r7, #0
 8008da8:	d0a9      	beq.n	8008cfe <__sflush_r+0x1a>
 8008daa:	0793      	lsls	r3, r2, #30
 8008dac:	680e      	ldr	r6, [r1, #0]
 8008dae:	bf08      	it	eq
 8008db0:	694b      	ldreq	r3, [r1, #20]
 8008db2:	600f      	str	r7, [r1, #0]
 8008db4:	bf18      	it	ne
 8008db6:	2300      	movne	r3, #0
 8008db8:	eba6 0807 	sub.w	r8, r6, r7
 8008dbc:	608b      	str	r3, [r1, #8]
 8008dbe:	f1b8 0f00 	cmp.w	r8, #0
 8008dc2:	dd9c      	ble.n	8008cfe <__sflush_r+0x1a>
 8008dc4:	6a21      	ldr	r1, [r4, #32]
 8008dc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008dc8:	4643      	mov	r3, r8
 8008dca:	463a      	mov	r2, r7
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b0      	blx	r6
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	dc06      	bgt.n	8008de2 <__sflush_r+0xfe>
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dda:	81a3      	strh	r3, [r4, #12]
 8008ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8008de0:	e78e      	b.n	8008d00 <__sflush_r+0x1c>
 8008de2:	4407      	add	r7, r0
 8008de4:	eba8 0800 	sub.w	r8, r8, r0
 8008de8:	e7e9      	b.n	8008dbe <__sflush_r+0xda>
 8008dea:	bf00      	nop
 8008dec:	20400001 	.word	0x20400001

08008df0 <_fflush_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	690b      	ldr	r3, [r1, #16]
 8008df4:	4605      	mov	r5, r0
 8008df6:	460c      	mov	r4, r1
 8008df8:	b913      	cbnz	r3, 8008e00 <_fflush_r+0x10>
 8008dfa:	2500      	movs	r5, #0
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	b118      	cbz	r0, 8008e0a <_fflush_r+0x1a>
 8008e02:	6983      	ldr	r3, [r0, #24]
 8008e04:	b90b      	cbnz	r3, 8008e0a <_fflush_r+0x1a>
 8008e06:	f000 f8c5 	bl	8008f94 <__sinit>
 8008e0a:	4b14      	ldr	r3, [pc, #80]	; (8008e5c <_fflush_r+0x6c>)
 8008e0c:	429c      	cmp	r4, r3
 8008e0e:	d11b      	bne.n	8008e48 <_fflush_r+0x58>
 8008e10:	686c      	ldr	r4, [r5, #4]
 8008e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d0ef      	beq.n	8008dfa <_fflush_r+0xa>
 8008e1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e1c:	07d0      	lsls	r0, r2, #31
 8008e1e:	d404      	bmi.n	8008e2a <_fflush_r+0x3a>
 8008e20:	0599      	lsls	r1, r3, #22
 8008e22:	d402      	bmi.n	8008e2a <_fflush_r+0x3a>
 8008e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e26:	f000 f958 	bl	80090da <__retarget_lock_acquire_recursive>
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	f7ff ff59 	bl	8008ce4 <__sflush_r>
 8008e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e34:	07da      	lsls	r2, r3, #31
 8008e36:	4605      	mov	r5, r0
 8008e38:	d4e0      	bmi.n	8008dfc <_fflush_r+0xc>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	059b      	lsls	r3, r3, #22
 8008e3e:	d4dd      	bmi.n	8008dfc <_fflush_r+0xc>
 8008e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e42:	f000 f94b 	bl	80090dc <__retarget_lock_release_recursive>
 8008e46:	e7d9      	b.n	8008dfc <_fflush_r+0xc>
 8008e48:	4b05      	ldr	r3, [pc, #20]	; (8008e60 <_fflush_r+0x70>)
 8008e4a:	429c      	cmp	r4, r3
 8008e4c:	d101      	bne.n	8008e52 <_fflush_r+0x62>
 8008e4e:	68ac      	ldr	r4, [r5, #8]
 8008e50:	e7df      	b.n	8008e12 <_fflush_r+0x22>
 8008e52:	4b04      	ldr	r3, [pc, #16]	; (8008e64 <_fflush_r+0x74>)
 8008e54:	429c      	cmp	r4, r3
 8008e56:	bf08      	it	eq
 8008e58:	68ec      	ldreq	r4, [r5, #12]
 8008e5a:	e7da      	b.n	8008e12 <_fflush_r+0x22>
 8008e5c:	0800aaf8 	.word	0x0800aaf8
 8008e60:	0800ab18 	.word	0x0800ab18
 8008e64:	0800aad8 	.word	0x0800aad8

08008e68 <fileno>:
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	4e1a      	ldr	r6, [pc, #104]	; (8008ed4 <fileno+0x6c>)
 8008e6c:	6835      	ldr	r5, [r6, #0]
 8008e6e:	4604      	mov	r4, r0
 8008e70:	b125      	cbz	r5, 8008e7c <fileno+0x14>
 8008e72:	69ab      	ldr	r3, [r5, #24]
 8008e74:	b913      	cbnz	r3, 8008e7c <fileno+0x14>
 8008e76:	4628      	mov	r0, r5
 8008e78:	f000 f88c 	bl	8008f94 <__sinit>
 8008e7c:	4b16      	ldr	r3, [pc, #88]	; (8008ed8 <fileno+0x70>)
 8008e7e:	429c      	cmp	r4, r3
 8008e80:	d118      	bne.n	8008eb4 <fileno+0x4c>
 8008e82:	686c      	ldr	r4, [r5, #4]
 8008e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e86:	07d8      	lsls	r0, r3, #31
 8008e88:	d405      	bmi.n	8008e96 <fileno+0x2e>
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	0599      	lsls	r1, r3, #22
 8008e8e:	d402      	bmi.n	8008e96 <fileno+0x2e>
 8008e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e92:	f000 f922 	bl	80090da <__retarget_lock_acquire_recursive>
 8008e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e9a:	b1ab      	cbz	r3, 8008ec8 <fileno+0x60>
 8008e9c:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8008ea0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ea2:	07d2      	lsls	r2, r2, #31
 8008ea4:	d404      	bmi.n	8008eb0 <fileno+0x48>
 8008ea6:	059b      	lsls	r3, r3, #22
 8008ea8:	d402      	bmi.n	8008eb0 <fileno+0x48>
 8008eaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eac:	f000 f916 	bl	80090dc <__retarget_lock_release_recursive>
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	4b09      	ldr	r3, [pc, #36]	; (8008edc <fileno+0x74>)
 8008eb6:	429c      	cmp	r4, r3
 8008eb8:	d101      	bne.n	8008ebe <fileno+0x56>
 8008eba:	68ac      	ldr	r4, [r5, #8]
 8008ebc:	e7e2      	b.n	8008e84 <fileno+0x1c>
 8008ebe:	4b08      	ldr	r3, [pc, #32]	; (8008ee0 <fileno+0x78>)
 8008ec0:	429c      	cmp	r4, r3
 8008ec2:	bf08      	it	eq
 8008ec4:	68ec      	ldreq	r4, [r5, #12]
 8008ec6:	e7dd      	b.n	8008e84 <fileno+0x1c>
 8008ec8:	6832      	ldr	r2, [r6, #0]
 8008eca:	2109      	movs	r1, #9
 8008ecc:	6011      	str	r1, [r2, #0]
 8008ece:	f04f 35ff 	mov.w	r5, #4294967295
 8008ed2:	e7e5      	b.n	8008ea0 <fileno+0x38>
 8008ed4:	2000003c 	.word	0x2000003c
 8008ed8:	0800aaf8 	.word	0x0800aaf8
 8008edc:	0800ab18 	.word	0x0800ab18
 8008ee0:	0800aad8 	.word	0x0800aad8

08008ee4 <std>:
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	b510      	push	{r4, lr}
 8008ee8:	4604      	mov	r4, r0
 8008eea:	e9c0 3300 	strd	r3, r3, [r0]
 8008eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ef2:	6083      	str	r3, [r0, #8]
 8008ef4:	8181      	strh	r1, [r0, #12]
 8008ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ef8:	81c2      	strh	r2, [r0, #14]
 8008efa:	6183      	str	r3, [r0, #24]
 8008efc:	4619      	mov	r1, r3
 8008efe:	2208      	movs	r2, #8
 8008f00:	305c      	adds	r0, #92	; 0x5c
 8008f02:	f7fe f813 	bl	8006f2c <memset>
 8008f06:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <std+0x38>)
 8008f08:	6263      	str	r3, [r4, #36]	; 0x24
 8008f0a:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <std+0x3c>)
 8008f0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f0e:	4b05      	ldr	r3, [pc, #20]	; (8008f24 <std+0x40>)
 8008f10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f12:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <std+0x44>)
 8008f14:	6224      	str	r4, [r4, #32]
 8008f16:	6323      	str	r3, [r4, #48]	; 0x30
 8008f18:	bd10      	pop	{r4, pc}
 8008f1a:	bf00      	nop
 8008f1c:	08009b01 	.word	0x08009b01
 8008f20:	08009b23 	.word	0x08009b23
 8008f24:	08009b5b 	.word	0x08009b5b
 8008f28:	08009b7f 	.word	0x08009b7f

08008f2c <_cleanup_r>:
 8008f2c:	4901      	ldr	r1, [pc, #4]	; (8008f34 <_cleanup_r+0x8>)
 8008f2e:	f000 b8af 	b.w	8009090 <_fwalk_reent>
 8008f32:	bf00      	nop
 8008f34:	08008df1 	.word	0x08008df1

08008f38 <__sfmoreglue>:
 8008f38:	b570      	push	{r4, r5, r6, lr}
 8008f3a:	2268      	movs	r2, #104	; 0x68
 8008f3c:	1e4d      	subs	r5, r1, #1
 8008f3e:	4355      	muls	r5, r2
 8008f40:	460e      	mov	r6, r1
 8008f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f46:	f7fe f865 	bl	8007014 <_malloc_r>
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	b140      	cbz	r0, 8008f60 <__sfmoreglue+0x28>
 8008f4e:	2100      	movs	r1, #0
 8008f50:	e9c0 1600 	strd	r1, r6, [r0]
 8008f54:	300c      	adds	r0, #12
 8008f56:	60a0      	str	r0, [r4, #8]
 8008f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f5c:	f7fd ffe6 	bl	8006f2c <memset>
 8008f60:	4620      	mov	r0, r4
 8008f62:	bd70      	pop	{r4, r5, r6, pc}

08008f64 <__sfp_lock_acquire>:
 8008f64:	4801      	ldr	r0, [pc, #4]	; (8008f6c <__sfp_lock_acquire+0x8>)
 8008f66:	f000 b8b8 	b.w	80090da <__retarget_lock_acquire_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	20000649 	.word	0x20000649

08008f70 <__sfp_lock_release>:
 8008f70:	4801      	ldr	r0, [pc, #4]	; (8008f78 <__sfp_lock_release+0x8>)
 8008f72:	f000 b8b3 	b.w	80090dc <__retarget_lock_release_recursive>
 8008f76:	bf00      	nop
 8008f78:	20000649 	.word	0x20000649

08008f7c <__sinit_lock_acquire>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	; (8008f84 <__sinit_lock_acquire+0x8>)
 8008f7e:	f000 b8ac 	b.w	80090da <__retarget_lock_acquire_recursive>
 8008f82:	bf00      	nop
 8008f84:	2000064a 	.word	0x2000064a

08008f88 <__sinit_lock_release>:
 8008f88:	4801      	ldr	r0, [pc, #4]	; (8008f90 <__sinit_lock_release+0x8>)
 8008f8a:	f000 b8a7 	b.w	80090dc <__retarget_lock_release_recursive>
 8008f8e:	bf00      	nop
 8008f90:	2000064a 	.word	0x2000064a

08008f94 <__sinit>:
 8008f94:	b510      	push	{r4, lr}
 8008f96:	4604      	mov	r4, r0
 8008f98:	f7ff fff0 	bl	8008f7c <__sinit_lock_acquire>
 8008f9c:	69a3      	ldr	r3, [r4, #24]
 8008f9e:	b11b      	cbz	r3, 8008fa8 <__sinit+0x14>
 8008fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fa4:	f7ff bff0 	b.w	8008f88 <__sinit_lock_release>
 8008fa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fac:	6523      	str	r3, [r4, #80]	; 0x50
 8008fae:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <__sinit+0x68>)
 8008fb0:	4a13      	ldr	r2, [pc, #76]	; (8009000 <__sinit+0x6c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fb6:	42a3      	cmp	r3, r4
 8008fb8:	bf04      	itt	eq
 8008fba:	2301      	moveq	r3, #1
 8008fbc:	61a3      	streq	r3, [r4, #24]
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 f820 	bl	8009004 <__sfp>
 8008fc4:	6060      	str	r0, [r4, #4]
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f000 f81c 	bl	8009004 <__sfp>
 8008fcc:	60a0      	str	r0, [r4, #8]
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 f818 	bl	8009004 <__sfp>
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	60e0      	str	r0, [r4, #12]
 8008fd8:	2104      	movs	r1, #4
 8008fda:	6860      	ldr	r0, [r4, #4]
 8008fdc:	f7ff ff82 	bl	8008ee4 <std>
 8008fe0:	68a0      	ldr	r0, [r4, #8]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	2109      	movs	r1, #9
 8008fe6:	f7ff ff7d 	bl	8008ee4 <std>
 8008fea:	68e0      	ldr	r0, [r4, #12]
 8008fec:	2202      	movs	r2, #2
 8008fee:	2112      	movs	r1, #18
 8008ff0:	f7ff ff78 	bl	8008ee4 <std>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	61a3      	str	r3, [r4, #24]
 8008ff8:	e7d2      	b.n	8008fa0 <__sinit+0xc>
 8008ffa:	bf00      	nop
 8008ffc:	0800a378 	.word	0x0800a378
 8009000:	08008f2d 	.word	0x08008f2d

08009004 <__sfp>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	4607      	mov	r7, r0
 8009008:	f7ff ffac 	bl	8008f64 <__sfp_lock_acquire>
 800900c:	4b1e      	ldr	r3, [pc, #120]	; (8009088 <__sfp+0x84>)
 800900e:	681e      	ldr	r6, [r3, #0]
 8009010:	69b3      	ldr	r3, [r6, #24]
 8009012:	b913      	cbnz	r3, 800901a <__sfp+0x16>
 8009014:	4630      	mov	r0, r6
 8009016:	f7ff ffbd 	bl	8008f94 <__sinit>
 800901a:	3648      	adds	r6, #72	; 0x48
 800901c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009020:	3b01      	subs	r3, #1
 8009022:	d503      	bpl.n	800902c <__sfp+0x28>
 8009024:	6833      	ldr	r3, [r6, #0]
 8009026:	b30b      	cbz	r3, 800906c <__sfp+0x68>
 8009028:	6836      	ldr	r6, [r6, #0]
 800902a:	e7f7      	b.n	800901c <__sfp+0x18>
 800902c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009030:	b9d5      	cbnz	r5, 8009068 <__sfp+0x64>
 8009032:	4b16      	ldr	r3, [pc, #88]	; (800908c <__sfp+0x88>)
 8009034:	60e3      	str	r3, [r4, #12]
 8009036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800903a:	6665      	str	r5, [r4, #100]	; 0x64
 800903c:	f000 f84c 	bl	80090d8 <__retarget_lock_init_recursive>
 8009040:	f7ff ff96 	bl	8008f70 <__sfp_lock_release>
 8009044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800904c:	6025      	str	r5, [r4, #0]
 800904e:	61a5      	str	r5, [r4, #24]
 8009050:	2208      	movs	r2, #8
 8009052:	4629      	mov	r1, r5
 8009054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009058:	f7fd ff68 	bl	8006f2c <memset>
 800905c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009064:	4620      	mov	r0, r4
 8009066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009068:	3468      	adds	r4, #104	; 0x68
 800906a:	e7d9      	b.n	8009020 <__sfp+0x1c>
 800906c:	2104      	movs	r1, #4
 800906e:	4638      	mov	r0, r7
 8009070:	f7ff ff62 	bl	8008f38 <__sfmoreglue>
 8009074:	4604      	mov	r4, r0
 8009076:	6030      	str	r0, [r6, #0]
 8009078:	2800      	cmp	r0, #0
 800907a:	d1d5      	bne.n	8009028 <__sfp+0x24>
 800907c:	f7ff ff78 	bl	8008f70 <__sfp_lock_release>
 8009080:	230c      	movs	r3, #12
 8009082:	603b      	str	r3, [r7, #0]
 8009084:	e7ee      	b.n	8009064 <__sfp+0x60>
 8009086:	bf00      	nop
 8009088:	0800a378 	.word	0x0800a378
 800908c:	ffff0001 	.word	0xffff0001

08009090 <_fwalk_reent>:
 8009090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009094:	4606      	mov	r6, r0
 8009096:	4688      	mov	r8, r1
 8009098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800909c:	2700      	movs	r7, #0
 800909e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090a2:	f1b9 0901 	subs.w	r9, r9, #1
 80090a6:	d505      	bpl.n	80090b4 <_fwalk_reent+0x24>
 80090a8:	6824      	ldr	r4, [r4, #0]
 80090aa:	2c00      	cmp	r4, #0
 80090ac:	d1f7      	bne.n	800909e <_fwalk_reent+0xe>
 80090ae:	4638      	mov	r0, r7
 80090b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b4:	89ab      	ldrh	r3, [r5, #12]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d907      	bls.n	80090ca <_fwalk_reent+0x3a>
 80090ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090be:	3301      	adds	r3, #1
 80090c0:	d003      	beq.n	80090ca <_fwalk_reent+0x3a>
 80090c2:	4629      	mov	r1, r5
 80090c4:	4630      	mov	r0, r6
 80090c6:	47c0      	blx	r8
 80090c8:	4307      	orrs	r7, r0
 80090ca:	3568      	adds	r5, #104	; 0x68
 80090cc:	e7e9      	b.n	80090a2 <_fwalk_reent+0x12>
	...

080090d0 <_localeconv_r>:
 80090d0:	4800      	ldr	r0, [pc, #0]	; (80090d4 <_localeconv_r+0x4>)
 80090d2:	4770      	bx	lr
 80090d4:	20000190 	.word	0x20000190

080090d8 <__retarget_lock_init_recursive>:
 80090d8:	4770      	bx	lr

080090da <__retarget_lock_acquire_recursive>:
 80090da:	4770      	bx	lr

080090dc <__retarget_lock_release_recursive>:
 80090dc:	4770      	bx	lr

080090de <memcpy>:
 80090de:	440a      	add	r2, r1
 80090e0:	4291      	cmp	r1, r2
 80090e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80090e6:	d100      	bne.n	80090ea <memcpy+0xc>
 80090e8:	4770      	bx	lr
 80090ea:	b510      	push	{r4, lr}
 80090ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090f4:	4291      	cmp	r1, r2
 80090f6:	d1f9      	bne.n	80090ec <memcpy+0xe>
 80090f8:	bd10      	pop	{r4, pc}
	...

080090fc <__malloc_lock>:
 80090fc:	4801      	ldr	r0, [pc, #4]	; (8009104 <__malloc_lock+0x8>)
 80090fe:	f7ff bfec 	b.w	80090da <__retarget_lock_acquire_recursive>
 8009102:	bf00      	nop
 8009104:	20000648 	.word	0x20000648

08009108 <__malloc_unlock>:
 8009108:	4801      	ldr	r0, [pc, #4]	; (8009110 <__malloc_unlock+0x8>)
 800910a:	f7ff bfe7 	b.w	80090dc <__retarget_lock_release_recursive>
 800910e:	bf00      	nop
 8009110:	20000648 	.word	0x20000648

08009114 <_Balloc>:
 8009114:	b570      	push	{r4, r5, r6, lr}
 8009116:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009118:	4604      	mov	r4, r0
 800911a:	460d      	mov	r5, r1
 800911c:	b976      	cbnz	r6, 800913c <_Balloc+0x28>
 800911e:	2010      	movs	r0, #16
 8009120:	f7fd fefc 	bl	8006f1c <malloc>
 8009124:	4602      	mov	r2, r0
 8009126:	6260      	str	r0, [r4, #36]	; 0x24
 8009128:	b920      	cbnz	r0, 8009134 <_Balloc+0x20>
 800912a:	4b18      	ldr	r3, [pc, #96]	; (800918c <_Balloc+0x78>)
 800912c:	4818      	ldr	r0, [pc, #96]	; (8009190 <_Balloc+0x7c>)
 800912e:	2166      	movs	r1, #102	; 0x66
 8009130:	f000 fd2a 	bl	8009b88 <__assert_func>
 8009134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009138:	6006      	str	r6, [r0, #0]
 800913a:	60c6      	str	r6, [r0, #12]
 800913c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800913e:	68f3      	ldr	r3, [r6, #12]
 8009140:	b183      	cbz	r3, 8009164 <_Balloc+0x50>
 8009142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800914a:	b9b8      	cbnz	r0, 800917c <_Balloc+0x68>
 800914c:	2101      	movs	r1, #1
 800914e:	fa01 f605 	lsl.w	r6, r1, r5
 8009152:	1d72      	adds	r2, r6, #5
 8009154:	0092      	lsls	r2, r2, #2
 8009156:	4620      	mov	r0, r4
 8009158:	f000 fb60 	bl	800981c <_calloc_r>
 800915c:	b160      	cbz	r0, 8009178 <_Balloc+0x64>
 800915e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009162:	e00e      	b.n	8009182 <_Balloc+0x6e>
 8009164:	2221      	movs	r2, #33	; 0x21
 8009166:	2104      	movs	r1, #4
 8009168:	4620      	mov	r0, r4
 800916a:	f000 fb57 	bl	800981c <_calloc_r>
 800916e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009170:	60f0      	str	r0, [r6, #12]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1e4      	bne.n	8009142 <_Balloc+0x2e>
 8009178:	2000      	movs	r0, #0
 800917a:	bd70      	pop	{r4, r5, r6, pc}
 800917c:	6802      	ldr	r2, [r0, #0]
 800917e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009182:	2300      	movs	r3, #0
 8009184:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009188:	e7f7      	b.n	800917a <_Balloc+0x66>
 800918a:	bf00      	nop
 800918c:	0800aa53 	.word	0x0800aa53
 8009190:	0800ab38 	.word	0x0800ab38

08009194 <_Bfree>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009198:	4605      	mov	r5, r0
 800919a:	460c      	mov	r4, r1
 800919c:	b976      	cbnz	r6, 80091bc <_Bfree+0x28>
 800919e:	2010      	movs	r0, #16
 80091a0:	f7fd febc 	bl	8006f1c <malloc>
 80091a4:	4602      	mov	r2, r0
 80091a6:	6268      	str	r0, [r5, #36]	; 0x24
 80091a8:	b920      	cbnz	r0, 80091b4 <_Bfree+0x20>
 80091aa:	4b09      	ldr	r3, [pc, #36]	; (80091d0 <_Bfree+0x3c>)
 80091ac:	4809      	ldr	r0, [pc, #36]	; (80091d4 <_Bfree+0x40>)
 80091ae:	218a      	movs	r1, #138	; 0x8a
 80091b0:	f000 fcea 	bl	8009b88 <__assert_func>
 80091b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091b8:	6006      	str	r6, [r0, #0]
 80091ba:	60c6      	str	r6, [r0, #12]
 80091bc:	b13c      	cbz	r4, 80091ce <_Bfree+0x3a>
 80091be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80091c0:	6862      	ldr	r2, [r4, #4]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091c8:	6021      	str	r1, [r4, #0]
 80091ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091ce:	bd70      	pop	{r4, r5, r6, pc}
 80091d0:	0800aa53 	.word	0x0800aa53
 80091d4:	0800ab38 	.word	0x0800ab38

080091d8 <__multadd>:
 80091d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091dc:	690d      	ldr	r5, [r1, #16]
 80091de:	4607      	mov	r7, r0
 80091e0:	460c      	mov	r4, r1
 80091e2:	461e      	mov	r6, r3
 80091e4:	f101 0c14 	add.w	ip, r1, #20
 80091e8:	2000      	movs	r0, #0
 80091ea:	f8dc 3000 	ldr.w	r3, [ip]
 80091ee:	b299      	uxth	r1, r3
 80091f0:	fb02 6101 	mla	r1, r2, r1, r6
 80091f4:	0c1e      	lsrs	r6, r3, #16
 80091f6:	0c0b      	lsrs	r3, r1, #16
 80091f8:	fb02 3306 	mla	r3, r2, r6, r3
 80091fc:	b289      	uxth	r1, r1
 80091fe:	3001      	adds	r0, #1
 8009200:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009204:	4285      	cmp	r5, r0
 8009206:	f84c 1b04 	str.w	r1, [ip], #4
 800920a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800920e:	dcec      	bgt.n	80091ea <__multadd+0x12>
 8009210:	b30e      	cbz	r6, 8009256 <__multadd+0x7e>
 8009212:	68a3      	ldr	r3, [r4, #8]
 8009214:	42ab      	cmp	r3, r5
 8009216:	dc19      	bgt.n	800924c <__multadd+0x74>
 8009218:	6861      	ldr	r1, [r4, #4]
 800921a:	4638      	mov	r0, r7
 800921c:	3101      	adds	r1, #1
 800921e:	f7ff ff79 	bl	8009114 <_Balloc>
 8009222:	4680      	mov	r8, r0
 8009224:	b928      	cbnz	r0, 8009232 <__multadd+0x5a>
 8009226:	4602      	mov	r2, r0
 8009228:	4b0c      	ldr	r3, [pc, #48]	; (800925c <__multadd+0x84>)
 800922a:	480d      	ldr	r0, [pc, #52]	; (8009260 <__multadd+0x88>)
 800922c:	21b5      	movs	r1, #181	; 0xb5
 800922e:	f000 fcab 	bl	8009b88 <__assert_func>
 8009232:	6922      	ldr	r2, [r4, #16]
 8009234:	3202      	adds	r2, #2
 8009236:	f104 010c 	add.w	r1, r4, #12
 800923a:	0092      	lsls	r2, r2, #2
 800923c:	300c      	adds	r0, #12
 800923e:	f7ff ff4e 	bl	80090de <memcpy>
 8009242:	4621      	mov	r1, r4
 8009244:	4638      	mov	r0, r7
 8009246:	f7ff ffa5 	bl	8009194 <_Bfree>
 800924a:	4644      	mov	r4, r8
 800924c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009250:	3501      	adds	r5, #1
 8009252:	615e      	str	r6, [r3, #20]
 8009254:	6125      	str	r5, [r4, #16]
 8009256:	4620      	mov	r0, r4
 8009258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800925c:	0800aac5 	.word	0x0800aac5
 8009260:	0800ab38 	.word	0x0800ab38

08009264 <__hi0bits>:
 8009264:	0c03      	lsrs	r3, r0, #16
 8009266:	041b      	lsls	r3, r3, #16
 8009268:	b9d3      	cbnz	r3, 80092a0 <__hi0bits+0x3c>
 800926a:	0400      	lsls	r0, r0, #16
 800926c:	2310      	movs	r3, #16
 800926e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009272:	bf04      	itt	eq
 8009274:	0200      	lsleq	r0, r0, #8
 8009276:	3308      	addeq	r3, #8
 8009278:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800927c:	bf04      	itt	eq
 800927e:	0100      	lsleq	r0, r0, #4
 8009280:	3304      	addeq	r3, #4
 8009282:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009286:	bf04      	itt	eq
 8009288:	0080      	lsleq	r0, r0, #2
 800928a:	3302      	addeq	r3, #2
 800928c:	2800      	cmp	r0, #0
 800928e:	db05      	blt.n	800929c <__hi0bits+0x38>
 8009290:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009294:	f103 0301 	add.w	r3, r3, #1
 8009298:	bf08      	it	eq
 800929a:	2320      	moveq	r3, #32
 800929c:	4618      	mov	r0, r3
 800929e:	4770      	bx	lr
 80092a0:	2300      	movs	r3, #0
 80092a2:	e7e4      	b.n	800926e <__hi0bits+0xa>

080092a4 <__lo0bits>:
 80092a4:	6803      	ldr	r3, [r0, #0]
 80092a6:	f013 0207 	ands.w	r2, r3, #7
 80092aa:	4601      	mov	r1, r0
 80092ac:	d00b      	beq.n	80092c6 <__lo0bits+0x22>
 80092ae:	07da      	lsls	r2, r3, #31
 80092b0:	d423      	bmi.n	80092fa <__lo0bits+0x56>
 80092b2:	0798      	lsls	r0, r3, #30
 80092b4:	bf49      	itett	mi
 80092b6:	085b      	lsrmi	r3, r3, #1
 80092b8:	089b      	lsrpl	r3, r3, #2
 80092ba:	2001      	movmi	r0, #1
 80092bc:	600b      	strmi	r3, [r1, #0]
 80092be:	bf5c      	itt	pl
 80092c0:	600b      	strpl	r3, [r1, #0]
 80092c2:	2002      	movpl	r0, #2
 80092c4:	4770      	bx	lr
 80092c6:	b298      	uxth	r0, r3
 80092c8:	b9a8      	cbnz	r0, 80092f6 <__lo0bits+0x52>
 80092ca:	0c1b      	lsrs	r3, r3, #16
 80092cc:	2010      	movs	r0, #16
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	b90a      	cbnz	r2, 80092d6 <__lo0bits+0x32>
 80092d2:	3008      	adds	r0, #8
 80092d4:	0a1b      	lsrs	r3, r3, #8
 80092d6:	071a      	lsls	r2, r3, #28
 80092d8:	bf04      	itt	eq
 80092da:	091b      	lsreq	r3, r3, #4
 80092dc:	3004      	addeq	r0, #4
 80092de:	079a      	lsls	r2, r3, #30
 80092e0:	bf04      	itt	eq
 80092e2:	089b      	lsreq	r3, r3, #2
 80092e4:	3002      	addeq	r0, #2
 80092e6:	07da      	lsls	r2, r3, #31
 80092e8:	d403      	bmi.n	80092f2 <__lo0bits+0x4e>
 80092ea:	085b      	lsrs	r3, r3, #1
 80092ec:	f100 0001 	add.w	r0, r0, #1
 80092f0:	d005      	beq.n	80092fe <__lo0bits+0x5a>
 80092f2:	600b      	str	r3, [r1, #0]
 80092f4:	4770      	bx	lr
 80092f6:	4610      	mov	r0, r2
 80092f8:	e7e9      	b.n	80092ce <__lo0bits+0x2a>
 80092fa:	2000      	movs	r0, #0
 80092fc:	4770      	bx	lr
 80092fe:	2020      	movs	r0, #32
 8009300:	4770      	bx	lr
	...

08009304 <__i2b>:
 8009304:	b510      	push	{r4, lr}
 8009306:	460c      	mov	r4, r1
 8009308:	2101      	movs	r1, #1
 800930a:	f7ff ff03 	bl	8009114 <_Balloc>
 800930e:	4602      	mov	r2, r0
 8009310:	b928      	cbnz	r0, 800931e <__i2b+0x1a>
 8009312:	4b05      	ldr	r3, [pc, #20]	; (8009328 <__i2b+0x24>)
 8009314:	4805      	ldr	r0, [pc, #20]	; (800932c <__i2b+0x28>)
 8009316:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800931a:	f000 fc35 	bl	8009b88 <__assert_func>
 800931e:	2301      	movs	r3, #1
 8009320:	6144      	str	r4, [r0, #20]
 8009322:	6103      	str	r3, [r0, #16]
 8009324:	bd10      	pop	{r4, pc}
 8009326:	bf00      	nop
 8009328:	0800aac5 	.word	0x0800aac5
 800932c:	0800ab38 	.word	0x0800ab38

08009330 <__multiply>:
 8009330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009334:	4691      	mov	r9, r2
 8009336:	690a      	ldr	r2, [r1, #16]
 8009338:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800933c:	429a      	cmp	r2, r3
 800933e:	bfb8      	it	lt
 8009340:	460b      	movlt	r3, r1
 8009342:	460c      	mov	r4, r1
 8009344:	bfbc      	itt	lt
 8009346:	464c      	movlt	r4, r9
 8009348:	4699      	movlt	r9, r3
 800934a:	6927      	ldr	r7, [r4, #16]
 800934c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009350:	68a3      	ldr	r3, [r4, #8]
 8009352:	6861      	ldr	r1, [r4, #4]
 8009354:	eb07 060a 	add.w	r6, r7, sl
 8009358:	42b3      	cmp	r3, r6
 800935a:	b085      	sub	sp, #20
 800935c:	bfb8      	it	lt
 800935e:	3101      	addlt	r1, #1
 8009360:	f7ff fed8 	bl	8009114 <_Balloc>
 8009364:	b930      	cbnz	r0, 8009374 <__multiply+0x44>
 8009366:	4602      	mov	r2, r0
 8009368:	4b44      	ldr	r3, [pc, #272]	; (800947c <__multiply+0x14c>)
 800936a:	4845      	ldr	r0, [pc, #276]	; (8009480 <__multiply+0x150>)
 800936c:	f240 115d 	movw	r1, #349	; 0x15d
 8009370:	f000 fc0a 	bl	8009b88 <__assert_func>
 8009374:	f100 0514 	add.w	r5, r0, #20
 8009378:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800937c:	462b      	mov	r3, r5
 800937e:	2200      	movs	r2, #0
 8009380:	4543      	cmp	r3, r8
 8009382:	d321      	bcc.n	80093c8 <__multiply+0x98>
 8009384:	f104 0314 	add.w	r3, r4, #20
 8009388:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800938c:	f109 0314 	add.w	r3, r9, #20
 8009390:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009394:	9202      	str	r2, [sp, #8]
 8009396:	1b3a      	subs	r2, r7, r4
 8009398:	3a15      	subs	r2, #21
 800939a:	f022 0203 	bic.w	r2, r2, #3
 800939e:	3204      	adds	r2, #4
 80093a0:	f104 0115 	add.w	r1, r4, #21
 80093a4:	428f      	cmp	r7, r1
 80093a6:	bf38      	it	cc
 80093a8:	2204      	movcc	r2, #4
 80093aa:	9201      	str	r2, [sp, #4]
 80093ac:	9a02      	ldr	r2, [sp, #8]
 80093ae:	9303      	str	r3, [sp, #12]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d80c      	bhi.n	80093ce <__multiply+0x9e>
 80093b4:	2e00      	cmp	r6, #0
 80093b6:	dd03      	ble.n	80093c0 <__multiply+0x90>
 80093b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d05a      	beq.n	8009476 <__multiply+0x146>
 80093c0:	6106      	str	r6, [r0, #16]
 80093c2:	b005      	add	sp, #20
 80093c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c8:	f843 2b04 	str.w	r2, [r3], #4
 80093cc:	e7d8      	b.n	8009380 <__multiply+0x50>
 80093ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80093d2:	f1ba 0f00 	cmp.w	sl, #0
 80093d6:	d024      	beq.n	8009422 <__multiply+0xf2>
 80093d8:	f104 0e14 	add.w	lr, r4, #20
 80093dc:	46a9      	mov	r9, r5
 80093de:	f04f 0c00 	mov.w	ip, #0
 80093e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80093e6:	f8d9 1000 	ldr.w	r1, [r9]
 80093ea:	fa1f fb82 	uxth.w	fp, r2
 80093ee:	b289      	uxth	r1, r1
 80093f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80093f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80093f8:	f8d9 2000 	ldr.w	r2, [r9]
 80093fc:	4461      	add	r1, ip
 80093fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009402:	fb0a c20b 	mla	r2, sl, fp, ip
 8009406:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800940a:	b289      	uxth	r1, r1
 800940c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009410:	4577      	cmp	r7, lr
 8009412:	f849 1b04 	str.w	r1, [r9], #4
 8009416:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800941a:	d8e2      	bhi.n	80093e2 <__multiply+0xb2>
 800941c:	9a01      	ldr	r2, [sp, #4]
 800941e:	f845 c002 	str.w	ip, [r5, r2]
 8009422:	9a03      	ldr	r2, [sp, #12]
 8009424:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009428:	3304      	adds	r3, #4
 800942a:	f1b9 0f00 	cmp.w	r9, #0
 800942e:	d020      	beq.n	8009472 <__multiply+0x142>
 8009430:	6829      	ldr	r1, [r5, #0]
 8009432:	f104 0c14 	add.w	ip, r4, #20
 8009436:	46ae      	mov	lr, r5
 8009438:	f04f 0a00 	mov.w	sl, #0
 800943c:	f8bc b000 	ldrh.w	fp, [ip]
 8009440:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009444:	fb09 220b 	mla	r2, r9, fp, r2
 8009448:	4492      	add	sl, r2
 800944a:	b289      	uxth	r1, r1
 800944c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009450:	f84e 1b04 	str.w	r1, [lr], #4
 8009454:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009458:	f8be 1000 	ldrh.w	r1, [lr]
 800945c:	0c12      	lsrs	r2, r2, #16
 800945e:	fb09 1102 	mla	r1, r9, r2, r1
 8009462:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009466:	4567      	cmp	r7, ip
 8009468:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800946c:	d8e6      	bhi.n	800943c <__multiply+0x10c>
 800946e:	9a01      	ldr	r2, [sp, #4]
 8009470:	50a9      	str	r1, [r5, r2]
 8009472:	3504      	adds	r5, #4
 8009474:	e79a      	b.n	80093ac <__multiply+0x7c>
 8009476:	3e01      	subs	r6, #1
 8009478:	e79c      	b.n	80093b4 <__multiply+0x84>
 800947a:	bf00      	nop
 800947c:	0800aac5 	.word	0x0800aac5
 8009480:	0800ab38 	.word	0x0800ab38

08009484 <__pow5mult>:
 8009484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009488:	4615      	mov	r5, r2
 800948a:	f012 0203 	ands.w	r2, r2, #3
 800948e:	4606      	mov	r6, r0
 8009490:	460f      	mov	r7, r1
 8009492:	d007      	beq.n	80094a4 <__pow5mult+0x20>
 8009494:	4c25      	ldr	r4, [pc, #148]	; (800952c <__pow5mult+0xa8>)
 8009496:	3a01      	subs	r2, #1
 8009498:	2300      	movs	r3, #0
 800949a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800949e:	f7ff fe9b 	bl	80091d8 <__multadd>
 80094a2:	4607      	mov	r7, r0
 80094a4:	10ad      	asrs	r5, r5, #2
 80094a6:	d03d      	beq.n	8009524 <__pow5mult+0xa0>
 80094a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80094aa:	b97c      	cbnz	r4, 80094cc <__pow5mult+0x48>
 80094ac:	2010      	movs	r0, #16
 80094ae:	f7fd fd35 	bl	8006f1c <malloc>
 80094b2:	4602      	mov	r2, r0
 80094b4:	6270      	str	r0, [r6, #36]	; 0x24
 80094b6:	b928      	cbnz	r0, 80094c4 <__pow5mult+0x40>
 80094b8:	4b1d      	ldr	r3, [pc, #116]	; (8009530 <__pow5mult+0xac>)
 80094ba:	481e      	ldr	r0, [pc, #120]	; (8009534 <__pow5mult+0xb0>)
 80094bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80094c0:	f000 fb62 	bl	8009b88 <__assert_func>
 80094c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094c8:	6004      	str	r4, [r0, #0]
 80094ca:	60c4      	str	r4, [r0, #12]
 80094cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80094d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094d4:	b94c      	cbnz	r4, 80094ea <__pow5mult+0x66>
 80094d6:	f240 2171 	movw	r1, #625	; 0x271
 80094da:	4630      	mov	r0, r6
 80094dc:	f7ff ff12 	bl	8009304 <__i2b>
 80094e0:	2300      	movs	r3, #0
 80094e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80094e6:	4604      	mov	r4, r0
 80094e8:	6003      	str	r3, [r0, #0]
 80094ea:	f04f 0900 	mov.w	r9, #0
 80094ee:	07eb      	lsls	r3, r5, #31
 80094f0:	d50a      	bpl.n	8009508 <__pow5mult+0x84>
 80094f2:	4639      	mov	r1, r7
 80094f4:	4622      	mov	r2, r4
 80094f6:	4630      	mov	r0, r6
 80094f8:	f7ff ff1a 	bl	8009330 <__multiply>
 80094fc:	4639      	mov	r1, r7
 80094fe:	4680      	mov	r8, r0
 8009500:	4630      	mov	r0, r6
 8009502:	f7ff fe47 	bl	8009194 <_Bfree>
 8009506:	4647      	mov	r7, r8
 8009508:	106d      	asrs	r5, r5, #1
 800950a:	d00b      	beq.n	8009524 <__pow5mult+0xa0>
 800950c:	6820      	ldr	r0, [r4, #0]
 800950e:	b938      	cbnz	r0, 8009520 <__pow5mult+0x9c>
 8009510:	4622      	mov	r2, r4
 8009512:	4621      	mov	r1, r4
 8009514:	4630      	mov	r0, r6
 8009516:	f7ff ff0b 	bl	8009330 <__multiply>
 800951a:	6020      	str	r0, [r4, #0]
 800951c:	f8c0 9000 	str.w	r9, [r0]
 8009520:	4604      	mov	r4, r0
 8009522:	e7e4      	b.n	80094ee <__pow5mult+0x6a>
 8009524:	4638      	mov	r0, r7
 8009526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800952a:	bf00      	nop
 800952c:	0800ac88 	.word	0x0800ac88
 8009530:	0800aa53 	.word	0x0800aa53
 8009534:	0800ab38 	.word	0x0800ab38

08009538 <__lshift>:
 8009538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800953c:	460c      	mov	r4, r1
 800953e:	6849      	ldr	r1, [r1, #4]
 8009540:	6923      	ldr	r3, [r4, #16]
 8009542:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009546:	68a3      	ldr	r3, [r4, #8]
 8009548:	4607      	mov	r7, r0
 800954a:	4691      	mov	r9, r2
 800954c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009550:	f108 0601 	add.w	r6, r8, #1
 8009554:	42b3      	cmp	r3, r6
 8009556:	db0b      	blt.n	8009570 <__lshift+0x38>
 8009558:	4638      	mov	r0, r7
 800955a:	f7ff fddb 	bl	8009114 <_Balloc>
 800955e:	4605      	mov	r5, r0
 8009560:	b948      	cbnz	r0, 8009576 <__lshift+0x3e>
 8009562:	4602      	mov	r2, r0
 8009564:	4b2a      	ldr	r3, [pc, #168]	; (8009610 <__lshift+0xd8>)
 8009566:	482b      	ldr	r0, [pc, #172]	; (8009614 <__lshift+0xdc>)
 8009568:	f240 11d9 	movw	r1, #473	; 0x1d9
 800956c:	f000 fb0c 	bl	8009b88 <__assert_func>
 8009570:	3101      	adds	r1, #1
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	e7ee      	b.n	8009554 <__lshift+0x1c>
 8009576:	2300      	movs	r3, #0
 8009578:	f100 0114 	add.w	r1, r0, #20
 800957c:	f100 0210 	add.w	r2, r0, #16
 8009580:	4618      	mov	r0, r3
 8009582:	4553      	cmp	r3, sl
 8009584:	db37      	blt.n	80095f6 <__lshift+0xbe>
 8009586:	6920      	ldr	r0, [r4, #16]
 8009588:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800958c:	f104 0314 	add.w	r3, r4, #20
 8009590:	f019 091f 	ands.w	r9, r9, #31
 8009594:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009598:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800959c:	d02f      	beq.n	80095fe <__lshift+0xc6>
 800959e:	f1c9 0e20 	rsb	lr, r9, #32
 80095a2:	468a      	mov	sl, r1
 80095a4:	f04f 0c00 	mov.w	ip, #0
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	fa02 f209 	lsl.w	r2, r2, r9
 80095ae:	ea42 020c 	orr.w	r2, r2, ip
 80095b2:	f84a 2b04 	str.w	r2, [sl], #4
 80095b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ba:	4298      	cmp	r0, r3
 80095bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80095c0:	d8f2      	bhi.n	80095a8 <__lshift+0x70>
 80095c2:	1b03      	subs	r3, r0, r4
 80095c4:	3b15      	subs	r3, #21
 80095c6:	f023 0303 	bic.w	r3, r3, #3
 80095ca:	3304      	adds	r3, #4
 80095cc:	f104 0215 	add.w	r2, r4, #21
 80095d0:	4290      	cmp	r0, r2
 80095d2:	bf38      	it	cc
 80095d4:	2304      	movcc	r3, #4
 80095d6:	f841 c003 	str.w	ip, [r1, r3]
 80095da:	f1bc 0f00 	cmp.w	ip, #0
 80095de:	d001      	beq.n	80095e4 <__lshift+0xac>
 80095e0:	f108 0602 	add.w	r6, r8, #2
 80095e4:	3e01      	subs	r6, #1
 80095e6:	4638      	mov	r0, r7
 80095e8:	612e      	str	r6, [r5, #16]
 80095ea:	4621      	mov	r1, r4
 80095ec:	f7ff fdd2 	bl	8009194 <_Bfree>
 80095f0:	4628      	mov	r0, r5
 80095f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80095fa:	3301      	adds	r3, #1
 80095fc:	e7c1      	b.n	8009582 <__lshift+0x4a>
 80095fe:	3904      	subs	r1, #4
 8009600:	f853 2b04 	ldr.w	r2, [r3], #4
 8009604:	f841 2f04 	str.w	r2, [r1, #4]!
 8009608:	4298      	cmp	r0, r3
 800960a:	d8f9      	bhi.n	8009600 <__lshift+0xc8>
 800960c:	e7ea      	b.n	80095e4 <__lshift+0xac>
 800960e:	bf00      	nop
 8009610:	0800aac5 	.word	0x0800aac5
 8009614:	0800ab38 	.word	0x0800ab38

08009618 <__mcmp>:
 8009618:	b530      	push	{r4, r5, lr}
 800961a:	6902      	ldr	r2, [r0, #16]
 800961c:	690c      	ldr	r4, [r1, #16]
 800961e:	1b12      	subs	r2, r2, r4
 8009620:	d10e      	bne.n	8009640 <__mcmp+0x28>
 8009622:	f100 0314 	add.w	r3, r0, #20
 8009626:	3114      	adds	r1, #20
 8009628:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800962c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009630:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009634:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009638:	42a5      	cmp	r5, r4
 800963a:	d003      	beq.n	8009644 <__mcmp+0x2c>
 800963c:	d305      	bcc.n	800964a <__mcmp+0x32>
 800963e:	2201      	movs	r2, #1
 8009640:	4610      	mov	r0, r2
 8009642:	bd30      	pop	{r4, r5, pc}
 8009644:	4283      	cmp	r3, r0
 8009646:	d3f3      	bcc.n	8009630 <__mcmp+0x18>
 8009648:	e7fa      	b.n	8009640 <__mcmp+0x28>
 800964a:	f04f 32ff 	mov.w	r2, #4294967295
 800964e:	e7f7      	b.n	8009640 <__mcmp+0x28>

08009650 <__mdiff>:
 8009650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	460c      	mov	r4, r1
 8009656:	4606      	mov	r6, r0
 8009658:	4611      	mov	r1, r2
 800965a:	4620      	mov	r0, r4
 800965c:	4690      	mov	r8, r2
 800965e:	f7ff ffdb 	bl	8009618 <__mcmp>
 8009662:	1e05      	subs	r5, r0, #0
 8009664:	d110      	bne.n	8009688 <__mdiff+0x38>
 8009666:	4629      	mov	r1, r5
 8009668:	4630      	mov	r0, r6
 800966a:	f7ff fd53 	bl	8009114 <_Balloc>
 800966e:	b930      	cbnz	r0, 800967e <__mdiff+0x2e>
 8009670:	4b3a      	ldr	r3, [pc, #232]	; (800975c <__mdiff+0x10c>)
 8009672:	4602      	mov	r2, r0
 8009674:	f240 2132 	movw	r1, #562	; 0x232
 8009678:	4839      	ldr	r0, [pc, #228]	; (8009760 <__mdiff+0x110>)
 800967a:	f000 fa85 	bl	8009b88 <__assert_func>
 800967e:	2301      	movs	r3, #1
 8009680:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009684:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009688:	bfa4      	itt	ge
 800968a:	4643      	movge	r3, r8
 800968c:	46a0      	movge	r8, r4
 800968e:	4630      	mov	r0, r6
 8009690:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009694:	bfa6      	itte	ge
 8009696:	461c      	movge	r4, r3
 8009698:	2500      	movge	r5, #0
 800969a:	2501      	movlt	r5, #1
 800969c:	f7ff fd3a 	bl	8009114 <_Balloc>
 80096a0:	b920      	cbnz	r0, 80096ac <__mdiff+0x5c>
 80096a2:	4b2e      	ldr	r3, [pc, #184]	; (800975c <__mdiff+0x10c>)
 80096a4:	4602      	mov	r2, r0
 80096a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80096aa:	e7e5      	b.n	8009678 <__mdiff+0x28>
 80096ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80096b0:	6926      	ldr	r6, [r4, #16]
 80096b2:	60c5      	str	r5, [r0, #12]
 80096b4:	f104 0914 	add.w	r9, r4, #20
 80096b8:	f108 0514 	add.w	r5, r8, #20
 80096bc:	f100 0e14 	add.w	lr, r0, #20
 80096c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80096c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80096c8:	f108 0210 	add.w	r2, r8, #16
 80096cc:	46f2      	mov	sl, lr
 80096ce:	2100      	movs	r1, #0
 80096d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80096d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80096d8:	fa1f f883 	uxth.w	r8, r3
 80096dc:	fa11 f18b 	uxtah	r1, r1, fp
 80096e0:	0c1b      	lsrs	r3, r3, #16
 80096e2:	eba1 0808 	sub.w	r8, r1, r8
 80096e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80096ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80096ee:	fa1f f888 	uxth.w	r8, r8
 80096f2:	1419      	asrs	r1, r3, #16
 80096f4:	454e      	cmp	r6, r9
 80096f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80096fa:	f84a 3b04 	str.w	r3, [sl], #4
 80096fe:	d8e7      	bhi.n	80096d0 <__mdiff+0x80>
 8009700:	1b33      	subs	r3, r6, r4
 8009702:	3b15      	subs	r3, #21
 8009704:	f023 0303 	bic.w	r3, r3, #3
 8009708:	3304      	adds	r3, #4
 800970a:	3415      	adds	r4, #21
 800970c:	42a6      	cmp	r6, r4
 800970e:	bf38      	it	cc
 8009710:	2304      	movcc	r3, #4
 8009712:	441d      	add	r5, r3
 8009714:	4473      	add	r3, lr
 8009716:	469e      	mov	lr, r3
 8009718:	462e      	mov	r6, r5
 800971a:	4566      	cmp	r6, ip
 800971c:	d30e      	bcc.n	800973c <__mdiff+0xec>
 800971e:	f10c 0203 	add.w	r2, ip, #3
 8009722:	1b52      	subs	r2, r2, r5
 8009724:	f022 0203 	bic.w	r2, r2, #3
 8009728:	3d03      	subs	r5, #3
 800972a:	45ac      	cmp	ip, r5
 800972c:	bf38      	it	cc
 800972e:	2200      	movcc	r2, #0
 8009730:	441a      	add	r2, r3
 8009732:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009736:	b17b      	cbz	r3, 8009758 <__mdiff+0x108>
 8009738:	6107      	str	r7, [r0, #16]
 800973a:	e7a3      	b.n	8009684 <__mdiff+0x34>
 800973c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009740:	fa11 f288 	uxtah	r2, r1, r8
 8009744:	1414      	asrs	r4, r2, #16
 8009746:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800974a:	b292      	uxth	r2, r2
 800974c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009750:	f84e 2b04 	str.w	r2, [lr], #4
 8009754:	1421      	asrs	r1, r4, #16
 8009756:	e7e0      	b.n	800971a <__mdiff+0xca>
 8009758:	3f01      	subs	r7, #1
 800975a:	e7ea      	b.n	8009732 <__mdiff+0xe2>
 800975c:	0800aac5 	.word	0x0800aac5
 8009760:	0800ab38 	.word	0x0800ab38

08009764 <__d2b>:
 8009764:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009768:	4689      	mov	r9, r1
 800976a:	2101      	movs	r1, #1
 800976c:	ec57 6b10 	vmov	r6, r7, d0
 8009770:	4690      	mov	r8, r2
 8009772:	f7ff fccf 	bl	8009114 <_Balloc>
 8009776:	4604      	mov	r4, r0
 8009778:	b930      	cbnz	r0, 8009788 <__d2b+0x24>
 800977a:	4602      	mov	r2, r0
 800977c:	4b25      	ldr	r3, [pc, #148]	; (8009814 <__d2b+0xb0>)
 800977e:	4826      	ldr	r0, [pc, #152]	; (8009818 <__d2b+0xb4>)
 8009780:	f240 310a 	movw	r1, #778	; 0x30a
 8009784:	f000 fa00 	bl	8009b88 <__assert_func>
 8009788:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800978c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009790:	bb35      	cbnz	r5, 80097e0 <__d2b+0x7c>
 8009792:	2e00      	cmp	r6, #0
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	d028      	beq.n	80097ea <__d2b+0x86>
 8009798:	4668      	mov	r0, sp
 800979a:	9600      	str	r6, [sp, #0]
 800979c:	f7ff fd82 	bl	80092a4 <__lo0bits>
 80097a0:	9900      	ldr	r1, [sp, #0]
 80097a2:	b300      	cbz	r0, 80097e6 <__d2b+0x82>
 80097a4:	9a01      	ldr	r2, [sp, #4]
 80097a6:	f1c0 0320 	rsb	r3, r0, #32
 80097aa:	fa02 f303 	lsl.w	r3, r2, r3
 80097ae:	430b      	orrs	r3, r1
 80097b0:	40c2      	lsrs	r2, r0
 80097b2:	6163      	str	r3, [r4, #20]
 80097b4:	9201      	str	r2, [sp, #4]
 80097b6:	9b01      	ldr	r3, [sp, #4]
 80097b8:	61a3      	str	r3, [r4, #24]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	bf14      	ite	ne
 80097be:	2202      	movne	r2, #2
 80097c0:	2201      	moveq	r2, #1
 80097c2:	6122      	str	r2, [r4, #16]
 80097c4:	b1d5      	cbz	r5, 80097fc <__d2b+0x98>
 80097c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80097ca:	4405      	add	r5, r0
 80097cc:	f8c9 5000 	str.w	r5, [r9]
 80097d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80097d4:	f8c8 0000 	str.w	r0, [r8]
 80097d8:	4620      	mov	r0, r4
 80097da:	b003      	add	sp, #12
 80097dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097e4:	e7d5      	b.n	8009792 <__d2b+0x2e>
 80097e6:	6161      	str	r1, [r4, #20]
 80097e8:	e7e5      	b.n	80097b6 <__d2b+0x52>
 80097ea:	a801      	add	r0, sp, #4
 80097ec:	f7ff fd5a 	bl	80092a4 <__lo0bits>
 80097f0:	9b01      	ldr	r3, [sp, #4]
 80097f2:	6163      	str	r3, [r4, #20]
 80097f4:	2201      	movs	r2, #1
 80097f6:	6122      	str	r2, [r4, #16]
 80097f8:	3020      	adds	r0, #32
 80097fa:	e7e3      	b.n	80097c4 <__d2b+0x60>
 80097fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009800:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009804:	f8c9 0000 	str.w	r0, [r9]
 8009808:	6918      	ldr	r0, [r3, #16]
 800980a:	f7ff fd2b 	bl	8009264 <__hi0bits>
 800980e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009812:	e7df      	b.n	80097d4 <__d2b+0x70>
 8009814:	0800aac5 	.word	0x0800aac5
 8009818:	0800ab38 	.word	0x0800ab38

0800981c <_calloc_r>:
 800981c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800981e:	fba1 2402 	umull	r2, r4, r1, r2
 8009822:	b94c      	cbnz	r4, 8009838 <_calloc_r+0x1c>
 8009824:	4611      	mov	r1, r2
 8009826:	9201      	str	r2, [sp, #4]
 8009828:	f7fd fbf4 	bl	8007014 <_malloc_r>
 800982c:	9a01      	ldr	r2, [sp, #4]
 800982e:	4605      	mov	r5, r0
 8009830:	b930      	cbnz	r0, 8009840 <_calloc_r+0x24>
 8009832:	4628      	mov	r0, r5
 8009834:	b003      	add	sp, #12
 8009836:	bd30      	pop	{r4, r5, pc}
 8009838:	220c      	movs	r2, #12
 800983a:	6002      	str	r2, [r0, #0]
 800983c:	2500      	movs	r5, #0
 800983e:	e7f8      	b.n	8009832 <_calloc_r+0x16>
 8009840:	4621      	mov	r1, r4
 8009842:	f7fd fb73 	bl	8006f2c <memset>
 8009846:	e7f4      	b.n	8009832 <_calloc_r+0x16>

08009848 <__ssputs_r>:
 8009848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800984c:	688e      	ldr	r6, [r1, #8]
 800984e:	429e      	cmp	r6, r3
 8009850:	4682      	mov	sl, r0
 8009852:	460c      	mov	r4, r1
 8009854:	4690      	mov	r8, r2
 8009856:	461f      	mov	r7, r3
 8009858:	d838      	bhi.n	80098cc <__ssputs_r+0x84>
 800985a:	898a      	ldrh	r2, [r1, #12]
 800985c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009860:	d032      	beq.n	80098c8 <__ssputs_r+0x80>
 8009862:	6825      	ldr	r5, [r4, #0]
 8009864:	6909      	ldr	r1, [r1, #16]
 8009866:	eba5 0901 	sub.w	r9, r5, r1
 800986a:	6965      	ldr	r5, [r4, #20]
 800986c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009870:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009874:	3301      	adds	r3, #1
 8009876:	444b      	add	r3, r9
 8009878:	106d      	asrs	r5, r5, #1
 800987a:	429d      	cmp	r5, r3
 800987c:	bf38      	it	cc
 800987e:	461d      	movcc	r5, r3
 8009880:	0553      	lsls	r3, r2, #21
 8009882:	d531      	bpl.n	80098e8 <__ssputs_r+0xa0>
 8009884:	4629      	mov	r1, r5
 8009886:	f7fd fbc5 	bl	8007014 <_malloc_r>
 800988a:	4606      	mov	r6, r0
 800988c:	b950      	cbnz	r0, 80098a4 <__ssputs_r+0x5c>
 800988e:	230c      	movs	r3, #12
 8009890:	f8ca 3000 	str.w	r3, [sl]
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800989a:	81a3      	strh	r3, [r4, #12]
 800989c:	f04f 30ff 	mov.w	r0, #4294967295
 80098a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a4:	6921      	ldr	r1, [r4, #16]
 80098a6:	464a      	mov	r2, r9
 80098a8:	f7ff fc19 	bl	80090de <memcpy>
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098b6:	81a3      	strh	r3, [r4, #12]
 80098b8:	6126      	str	r6, [r4, #16]
 80098ba:	6165      	str	r5, [r4, #20]
 80098bc:	444e      	add	r6, r9
 80098be:	eba5 0509 	sub.w	r5, r5, r9
 80098c2:	6026      	str	r6, [r4, #0]
 80098c4:	60a5      	str	r5, [r4, #8]
 80098c6:	463e      	mov	r6, r7
 80098c8:	42be      	cmp	r6, r7
 80098ca:	d900      	bls.n	80098ce <__ssputs_r+0x86>
 80098cc:	463e      	mov	r6, r7
 80098ce:	6820      	ldr	r0, [r4, #0]
 80098d0:	4632      	mov	r2, r6
 80098d2:	4641      	mov	r1, r8
 80098d4:	f000 f9bc 	bl	8009c50 <memmove>
 80098d8:	68a3      	ldr	r3, [r4, #8]
 80098da:	1b9b      	subs	r3, r3, r6
 80098dc:	60a3      	str	r3, [r4, #8]
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	4433      	add	r3, r6
 80098e2:	6023      	str	r3, [r4, #0]
 80098e4:	2000      	movs	r0, #0
 80098e6:	e7db      	b.n	80098a0 <__ssputs_r+0x58>
 80098e8:	462a      	mov	r2, r5
 80098ea:	f000 f9cb 	bl	8009c84 <_realloc_r>
 80098ee:	4606      	mov	r6, r0
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d1e1      	bne.n	80098b8 <__ssputs_r+0x70>
 80098f4:	6921      	ldr	r1, [r4, #16]
 80098f6:	4650      	mov	r0, sl
 80098f8:	f7fd fb20 	bl	8006f3c <_free_r>
 80098fc:	e7c7      	b.n	800988e <__ssputs_r+0x46>
	...

08009900 <_svfiprintf_r>:
 8009900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009904:	4698      	mov	r8, r3
 8009906:	898b      	ldrh	r3, [r1, #12]
 8009908:	061b      	lsls	r3, r3, #24
 800990a:	b09d      	sub	sp, #116	; 0x74
 800990c:	4607      	mov	r7, r0
 800990e:	460d      	mov	r5, r1
 8009910:	4614      	mov	r4, r2
 8009912:	d50e      	bpl.n	8009932 <_svfiprintf_r+0x32>
 8009914:	690b      	ldr	r3, [r1, #16]
 8009916:	b963      	cbnz	r3, 8009932 <_svfiprintf_r+0x32>
 8009918:	2140      	movs	r1, #64	; 0x40
 800991a:	f7fd fb7b 	bl	8007014 <_malloc_r>
 800991e:	6028      	str	r0, [r5, #0]
 8009920:	6128      	str	r0, [r5, #16]
 8009922:	b920      	cbnz	r0, 800992e <_svfiprintf_r+0x2e>
 8009924:	230c      	movs	r3, #12
 8009926:	603b      	str	r3, [r7, #0]
 8009928:	f04f 30ff 	mov.w	r0, #4294967295
 800992c:	e0d1      	b.n	8009ad2 <_svfiprintf_r+0x1d2>
 800992e:	2340      	movs	r3, #64	; 0x40
 8009930:	616b      	str	r3, [r5, #20]
 8009932:	2300      	movs	r3, #0
 8009934:	9309      	str	r3, [sp, #36]	; 0x24
 8009936:	2320      	movs	r3, #32
 8009938:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800993c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009940:	2330      	movs	r3, #48	; 0x30
 8009942:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009aec <_svfiprintf_r+0x1ec>
 8009946:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800994a:	f04f 0901 	mov.w	r9, #1
 800994e:	4623      	mov	r3, r4
 8009950:	469a      	mov	sl, r3
 8009952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009956:	b10a      	cbz	r2, 800995c <_svfiprintf_r+0x5c>
 8009958:	2a25      	cmp	r2, #37	; 0x25
 800995a:	d1f9      	bne.n	8009950 <_svfiprintf_r+0x50>
 800995c:	ebba 0b04 	subs.w	fp, sl, r4
 8009960:	d00b      	beq.n	800997a <_svfiprintf_r+0x7a>
 8009962:	465b      	mov	r3, fp
 8009964:	4622      	mov	r2, r4
 8009966:	4629      	mov	r1, r5
 8009968:	4638      	mov	r0, r7
 800996a:	f7ff ff6d 	bl	8009848 <__ssputs_r>
 800996e:	3001      	adds	r0, #1
 8009970:	f000 80aa 	beq.w	8009ac8 <_svfiprintf_r+0x1c8>
 8009974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009976:	445a      	add	r2, fp
 8009978:	9209      	str	r2, [sp, #36]	; 0x24
 800997a:	f89a 3000 	ldrb.w	r3, [sl]
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 80a2 	beq.w	8009ac8 <_svfiprintf_r+0x1c8>
 8009984:	2300      	movs	r3, #0
 8009986:	f04f 32ff 	mov.w	r2, #4294967295
 800998a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800998e:	f10a 0a01 	add.w	sl, sl, #1
 8009992:	9304      	str	r3, [sp, #16]
 8009994:	9307      	str	r3, [sp, #28]
 8009996:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800999a:	931a      	str	r3, [sp, #104]	; 0x68
 800999c:	4654      	mov	r4, sl
 800999e:	2205      	movs	r2, #5
 80099a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a4:	4851      	ldr	r0, [pc, #324]	; (8009aec <_svfiprintf_r+0x1ec>)
 80099a6:	f7f6 fc1b 	bl	80001e0 <memchr>
 80099aa:	9a04      	ldr	r2, [sp, #16]
 80099ac:	b9d8      	cbnz	r0, 80099e6 <_svfiprintf_r+0xe6>
 80099ae:	06d0      	lsls	r0, r2, #27
 80099b0:	bf44      	itt	mi
 80099b2:	2320      	movmi	r3, #32
 80099b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099b8:	0711      	lsls	r1, r2, #28
 80099ba:	bf44      	itt	mi
 80099bc:	232b      	movmi	r3, #43	; 0x2b
 80099be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099c2:	f89a 3000 	ldrb.w	r3, [sl]
 80099c6:	2b2a      	cmp	r3, #42	; 0x2a
 80099c8:	d015      	beq.n	80099f6 <_svfiprintf_r+0xf6>
 80099ca:	9a07      	ldr	r2, [sp, #28]
 80099cc:	4654      	mov	r4, sl
 80099ce:	2000      	movs	r0, #0
 80099d0:	f04f 0c0a 	mov.w	ip, #10
 80099d4:	4621      	mov	r1, r4
 80099d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099da:	3b30      	subs	r3, #48	; 0x30
 80099dc:	2b09      	cmp	r3, #9
 80099de:	d94e      	bls.n	8009a7e <_svfiprintf_r+0x17e>
 80099e0:	b1b0      	cbz	r0, 8009a10 <_svfiprintf_r+0x110>
 80099e2:	9207      	str	r2, [sp, #28]
 80099e4:	e014      	b.n	8009a10 <_svfiprintf_r+0x110>
 80099e6:	eba0 0308 	sub.w	r3, r0, r8
 80099ea:	fa09 f303 	lsl.w	r3, r9, r3
 80099ee:	4313      	orrs	r3, r2
 80099f0:	9304      	str	r3, [sp, #16]
 80099f2:	46a2      	mov	sl, r4
 80099f4:	e7d2      	b.n	800999c <_svfiprintf_r+0x9c>
 80099f6:	9b03      	ldr	r3, [sp, #12]
 80099f8:	1d19      	adds	r1, r3, #4
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	9103      	str	r1, [sp, #12]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	bfbb      	ittet	lt
 8009a02:	425b      	neglt	r3, r3
 8009a04:	f042 0202 	orrlt.w	r2, r2, #2
 8009a08:	9307      	strge	r3, [sp, #28]
 8009a0a:	9307      	strlt	r3, [sp, #28]
 8009a0c:	bfb8      	it	lt
 8009a0e:	9204      	strlt	r2, [sp, #16]
 8009a10:	7823      	ldrb	r3, [r4, #0]
 8009a12:	2b2e      	cmp	r3, #46	; 0x2e
 8009a14:	d10c      	bne.n	8009a30 <_svfiprintf_r+0x130>
 8009a16:	7863      	ldrb	r3, [r4, #1]
 8009a18:	2b2a      	cmp	r3, #42	; 0x2a
 8009a1a:	d135      	bne.n	8009a88 <_svfiprintf_r+0x188>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	1d1a      	adds	r2, r3, #4
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	9203      	str	r2, [sp, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	bfb8      	it	lt
 8009a28:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a2c:	3402      	adds	r4, #2
 8009a2e:	9305      	str	r3, [sp, #20]
 8009a30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009afc <_svfiprintf_r+0x1fc>
 8009a34:	7821      	ldrb	r1, [r4, #0]
 8009a36:	2203      	movs	r2, #3
 8009a38:	4650      	mov	r0, sl
 8009a3a:	f7f6 fbd1 	bl	80001e0 <memchr>
 8009a3e:	b140      	cbz	r0, 8009a52 <_svfiprintf_r+0x152>
 8009a40:	2340      	movs	r3, #64	; 0x40
 8009a42:	eba0 000a 	sub.w	r0, r0, sl
 8009a46:	fa03 f000 	lsl.w	r0, r3, r0
 8009a4a:	9b04      	ldr	r3, [sp, #16]
 8009a4c:	4303      	orrs	r3, r0
 8009a4e:	3401      	adds	r4, #1
 8009a50:	9304      	str	r3, [sp, #16]
 8009a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a56:	4826      	ldr	r0, [pc, #152]	; (8009af0 <_svfiprintf_r+0x1f0>)
 8009a58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a5c:	2206      	movs	r2, #6
 8009a5e:	f7f6 fbbf 	bl	80001e0 <memchr>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d038      	beq.n	8009ad8 <_svfiprintf_r+0x1d8>
 8009a66:	4b23      	ldr	r3, [pc, #140]	; (8009af4 <_svfiprintf_r+0x1f4>)
 8009a68:	bb1b      	cbnz	r3, 8009ab2 <_svfiprintf_r+0x1b2>
 8009a6a:	9b03      	ldr	r3, [sp, #12]
 8009a6c:	3307      	adds	r3, #7
 8009a6e:	f023 0307 	bic.w	r3, r3, #7
 8009a72:	3308      	adds	r3, #8
 8009a74:	9303      	str	r3, [sp, #12]
 8009a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a78:	4433      	add	r3, r6
 8009a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a7c:	e767      	b.n	800994e <_svfiprintf_r+0x4e>
 8009a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a82:	460c      	mov	r4, r1
 8009a84:	2001      	movs	r0, #1
 8009a86:	e7a5      	b.n	80099d4 <_svfiprintf_r+0xd4>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	3401      	adds	r4, #1
 8009a8c:	9305      	str	r3, [sp, #20]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	f04f 0c0a 	mov.w	ip, #10
 8009a94:	4620      	mov	r0, r4
 8009a96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a9a:	3a30      	subs	r2, #48	; 0x30
 8009a9c:	2a09      	cmp	r2, #9
 8009a9e:	d903      	bls.n	8009aa8 <_svfiprintf_r+0x1a8>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d0c5      	beq.n	8009a30 <_svfiprintf_r+0x130>
 8009aa4:	9105      	str	r1, [sp, #20]
 8009aa6:	e7c3      	b.n	8009a30 <_svfiprintf_r+0x130>
 8009aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aac:	4604      	mov	r4, r0
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e7f0      	b.n	8009a94 <_svfiprintf_r+0x194>
 8009ab2:	ab03      	add	r3, sp, #12
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	462a      	mov	r2, r5
 8009ab8:	4b0f      	ldr	r3, [pc, #60]	; (8009af8 <_svfiprintf_r+0x1f8>)
 8009aba:	a904      	add	r1, sp, #16
 8009abc:	4638      	mov	r0, r7
 8009abe:	f7fd fbbd 	bl	800723c <_printf_float>
 8009ac2:	1c42      	adds	r2, r0, #1
 8009ac4:	4606      	mov	r6, r0
 8009ac6:	d1d6      	bne.n	8009a76 <_svfiprintf_r+0x176>
 8009ac8:	89ab      	ldrh	r3, [r5, #12]
 8009aca:	065b      	lsls	r3, r3, #25
 8009acc:	f53f af2c 	bmi.w	8009928 <_svfiprintf_r+0x28>
 8009ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ad2:	b01d      	add	sp, #116	; 0x74
 8009ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad8:	ab03      	add	r3, sp, #12
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	462a      	mov	r2, r5
 8009ade:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <_svfiprintf_r+0x1f8>)
 8009ae0:	a904      	add	r1, sp, #16
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	f7fd fe4e 	bl	8007784 <_printf_i>
 8009ae8:	e7eb      	b.n	8009ac2 <_svfiprintf_r+0x1c2>
 8009aea:	bf00      	nop
 8009aec:	0800ac94 	.word	0x0800ac94
 8009af0:	0800ac9e 	.word	0x0800ac9e
 8009af4:	0800723d 	.word	0x0800723d
 8009af8:	08009849 	.word	0x08009849
 8009afc:	0800ac9a 	.word	0x0800ac9a

08009b00 <__sread>:
 8009b00:	b510      	push	{r4, lr}
 8009b02:	460c      	mov	r4, r1
 8009b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b08:	f000 fa44 	bl	8009f94 <_read_r>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	bfab      	itete	ge
 8009b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b12:	89a3      	ldrhlt	r3, [r4, #12]
 8009b14:	181b      	addge	r3, r3, r0
 8009b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b1a:	bfac      	ite	ge
 8009b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b1e:	81a3      	strhlt	r3, [r4, #12]
 8009b20:	bd10      	pop	{r4, pc}

08009b22 <__swrite>:
 8009b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b26:	461f      	mov	r7, r3
 8009b28:	898b      	ldrh	r3, [r1, #12]
 8009b2a:	05db      	lsls	r3, r3, #23
 8009b2c:	4605      	mov	r5, r0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	4616      	mov	r6, r2
 8009b32:	d505      	bpl.n	8009b40 <__swrite+0x1e>
 8009b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b38:	2302      	movs	r3, #2
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f000 f864 	bl	8009c08 <_lseek_r>
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b4a:	81a3      	strh	r3, [r4, #12]
 8009b4c:	4632      	mov	r2, r6
 8009b4e:	463b      	mov	r3, r7
 8009b50:	4628      	mov	r0, r5
 8009b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b56:	f7fe ba39 	b.w	8007fcc <_write_r>

08009b5a <__sseek>:
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b62:	f000 f851 	bl	8009c08 <_lseek_r>
 8009b66:	1c43      	adds	r3, r0, #1
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	bf15      	itete	ne
 8009b6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b76:	81a3      	strheq	r3, [r4, #12]
 8009b78:	bf18      	it	ne
 8009b7a:	81a3      	strhne	r3, [r4, #12]
 8009b7c:	bd10      	pop	{r4, pc}

08009b7e <__sclose>:
 8009b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b82:	f000 b81f 	b.w	8009bc4 <_close_r>
	...

08009b88 <__assert_func>:
 8009b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b8a:	4614      	mov	r4, r2
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <__assert_func+0x2c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4605      	mov	r5, r0
 8009b94:	68d8      	ldr	r0, [r3, #12]
 8009b96:	b14c      	cbz	r4, 8009bac <__assert_func+0x24>
 8009b98:	4b07      	ldr	r3, [pc, #28]	; (8009bb8 <__assert_func+0x30>)
 8009b9a:	9100      	str	r1, [sp, #0]
 8009b9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ba0:	4906      	ldr	r1, [pc, #24]	; (8009bbc <__assert_func+0x34>)
 8009ba2:	462b      	mov	r3, r5
 8009ba4:	f000 f81e 	bl	8009be4 <fiprintf>
 8009ba8:	f7fd f986 	bl	8006eb8 <abort>
 8009bac:	4b04      	ldr	r3, [pc, #16]	; (8009bc0 <__assert_func+0x38>)
 8009bae:	461c      	mov	r4, r3
 8009bb0:	e7f3      	b.n	8009b9a <__assert_func+0x12>
 8009bb2:	bf00      	nop
 8009bb4:	2000003c 	.word	0x2000003c
 8009bb8:	0800aca5 	.word	0x0800aca5
 8009bbc:	0800acb2 	.word	0x0800acb2
 8009bc0:	0800ace0 	.word	0x0800ace0

08009bc4 <_close_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	4d06      	ldr	r5, [pc, #24]	; (8009be0 <_close_r+0x1c>)
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4604      	mov	r4, r0
 8009bcc:	4608      	mov	r0, r1
 8009bce:	602b      	str	r3, [r5, #0]
 8009bd0:	f7f7 ff4f 	bl	8001a72 <_close>
 8009bd4:	1c43      	adds	r3, r0, #1
 8009bd6:	d102      	bne.n	8009bde <_close_r+0x1a>
 8009bd8:	682b      	ldr	r3, [r5, #0]
 8009bda:	b103      	cbz	r3, 8009bde <_close_r+0x1a>
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	bd38      	pop	{r3, r4, r5, pc}
 8009be0:	2000064c 	.word	0x2000064c

08009be4 <fiprintf>:
 8009be4:	b40e      	push	{r1, r2, r3}
 8009be6:	b503      	push	{r0, r1, lr}
 8009be8:	4601      	mov	r1, r0
 8009bea:	ab03      	add	r3, sp, #12
 8009bec:	4805      	ldr	r0, [pc, #20]	; (8009c04 <fiprintf+0x20>)
 8009bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bf2:	6800      	ldr	r0, [r0, #0]
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	f000 f89d 	bl	8009d34 <_vfiprintf_r>
 8009bfa:	b002      	add	sp, #8
 8009bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c00:	b003      	add	sp, #12
 8009c02:	4770      	bx	lr
 8009c04:	2000003c 	.word	0x2000003c

08009c08 <_lseek_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d07      	ldr	r5, [pc, #28]	; (8009c28 <_lseek_r+0x20>)
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	4608      	mov	r0, r1
 8009c10:	4611      	mov	r1, r2
 8009c12:	2200      	movs	r2, #0
 8009c14:	602a      	str	r2, [r5, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	f7f7 ff52 	bl	8001ac0 <_lseek>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d102      	bne.n	8009c26 <_lseek_r+0x1e>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	b103      	cbz	r3, 8009c26 <_lseek_r+0x1e>
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	2000064c 	.word	0x2000064c

08009c2c <__ascii_mbtowc>:
 8009c2c:	b082      	sub	sp, #8
 8009c2e:	b901      	cbnz	r1, 8009c32 <__ascii_mbtowc+0x6>
 8009c30:	a901      	add	r1, sp, #4
 8009c32:	b142      	cbz	r2, 8009c46 <__ascii_mbtowc+0x1a>
 8009c34:	b14b      	cbz	r3, 8009c4a <__ascii_mbtowc+0x1e>
 8009c36:	7813      	ldrb	r3, [r2, #0]
 8009c38:	600b      	str	r3, [r1, #0]
 8009c3a:	7812      	ldrb	r2, [r2, #0]
 8009c3c:	1e10      	subs	r0, r2, #0
 8009c3e:	bf18      	it	ne
 8009c40:	2001      	movne	r0, #1
 8009c42:	b002      	add	sp, #8
 8009c44:	4770      	bx	lr
 8009c46:	4610      	mov	r0, r2
 8009c48:	e7fb      	b.n	8009c42 <__ascii_mbtowc+0x16>
 8009c4a:	f06f 0001 	mvn.w	r0, #1
 8009c4e:	e7f8      	b.n	8009c42 <__ascii_mbtowc+0x16>

08009c50 <memmove>:
 8009c50:	4288      	cmp	r0, r1
 8009c52:	b510      	push	{r4, lr}
 8009c54:	eb01 0402 	add.w	r4, r1, r2
 8009c58:	d902      	bls.n	8009c60 <memmove+0x10>
 8009c5a:	4284      	cmp	r4, r0
 8009c5c:	4623      	mov	r3, r4
 8009c5e:	d807      	bhi.n	8009c70 <memmove+0x20>
 8009c60:	1e43      	subs	r3, r0, #1
 8009c62:	42a1      	cmp	r1, r4
 8009c64:	d008      	beq.n	8009c78 <memmove+0x28>
 8009c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c6e:	e7f8      	b.n	8009c62 <memmove+0x12>
 8009c70:	4402      	add	r2, r0
 8009c72:	4601      	mov	r1, r0
 8009c74:	428a      	cmp	r2, r1
 8009c76:	d100      	bne.n	8009c7a <memmove+0x2a>
 8009c78:	bd10      	pop	{r4, pc}
 8009c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c82:	e7f7      	b.n	8009c74 <memmove+0x24>

08009c84 <_realloc_r>:
 8009c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c88:	4680      	mov	r8, r0
 8009c8a:	4614      	mov	r4, r2
 8009c8c:	460e      	mov	r6, r1
 8009c8e:	b921      	cbnz	r1, 8009c9a <_realloc_r+0x16>
 8009c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c94:	4611      	mov	r1, r2
 8009c96:	f7fd b9bd 	b.w	8007014 <_malloc_r>
 8009c9a:	b92a      	cbnz	r2, 8009ca8 <_realloc_r+0x24>
 8009c9c:	f7fd f94e 	bl	8006f3c <_free_r>
 8009ca0:	4625      	mov	r5, r4
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca8:	f000 faba 	bl	800a220 <_malloc_usable_size_r>
 8009cac:	4284      	cmp	r4, r0
 8009cae:	4607      	mov	r7, r0
 8009cb0:	d802      	bhi.n	8009cb8 <_realloc_r+0x34>
 8009cb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cb6:	d812      	bhi.n	8009cde <_realloc_r+0x5a>
 8009cb8:	4621      	mov	r1, r4
 8009cba:	4640      	mov	r0, r8
 8009cbc:	f7fd f9aa 	bl	8007014 <_malloc_r>
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d0ed      	beq.n	8009ca2 <_realloc_r+0x1e>
 8009cc6:	42bc      	cmp	r4, r7
 8009cc8:	4622      	mov	r2, r4
 8009cca:	4631      	mov	r1, r6
 8009ccc:	bf28      	it	cs
 8009cce:	463a      	movcs	r2, r7
 8009cd0:	f7ff fa05 	bl	80090de <memcpy>
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	f7fd f930 	bl	8006f3c <_free_r>
 8009cdc:	e7e1      	b.n	8009ca2 <_realloc_r+0x1e>
 8009cde:	4635      	mov	r5, r6
 8009ce0:	e7df      	b.n	8009ca2 <_realloc_r+0x1e>

08009ce2 <__sfputc_r>:
 8009ce2:	6893      	ldr	r3, [r2, #8]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	b410      	push	{r4}
 8009cea:	6093      	str	r3, [r2, #8]
 8009cec:	da08      	bge.n	8009d00 <__sfputc_r+0x1e>
 8009cee:	6994      	ldr	r4, [r2, #24]
 8009cf0:	42a3      	cmp	r3, r4
 8009cf2:	db01      	blt.n	8009cf8 <__sfputc_r+0x16>
 8009cf4:	290a      	cmp	r1, #10
 8009cf6:	d103      	bne.n	8009d00 <__sfputc_r+0x1e>
 8009cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cfc:	f000 b95c 	b.w	8009fb8 <__swbuf_r>
 8009d00:	6813      	ldr	r3, [r2, #0]
 8009d02:	1c58      	adds	r0, r3, #1
 8009d04:	6010      	str	r0, [r2, #0]
 8009d06:	7019      	strb	r1, [r3, #0]
 8009d08:	4608      	mov	r0, r1
 8009d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <__sfputs_r>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	4606      	mov	r6, r0
 8009d14:	460f      	mov	r7, r1
 8009d16:	4614      	mov	r4, r2
 8009d18:	18d5      	adds	r5, r2, r3
 8009d1a:	42ac      	cmp	r4, r5
 8009d1c:	d101      	bne.n	8009d22 <__sfputs_r+0x12>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	e007      	b.n	8009d32 <__sfputs_r+0x22>
 8009d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d26:	463a      	mov	r2, r7
 8009d28:	4630      	mov	r0, r6
 8009d2a:	f7ff ffda 	bl	8009ce2 <__sfputc_r>
 8009d2e:	1c43      	adds	r3, r0, #1
 8009d30:	d1f3      	bne.n	8009d1a <__sfputs_r+0xa>
 8009d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d34 <_vfiprintf_r>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	460d      	mov	r5, r1
 8009d3a:	b09d      	sub	sp, #116	; 0x74
 8009d3c:	4614      	mov	r4, r2
 8009d3e:	4698      	mov	r8, r3
 8009d40:	4606      	mov	r6, r0
 8009d42:	b118      	cbz	r0, 8009d4c <_vfiprintf_r+0x18>
 8009d44:	6983      	ldr	r3, [r0, #24]
 8009d46:	b90b      	cbnz	r3, 8009d4c <_vfiprintf_r+0x18>
 8009d48:	f7ff f924 	bl	8008f94 <__sinit>
 8009d4c:	4b89      	ldr	r3, [pc, #548]	; (8009f74 <_vfiprintf_r+0x240>)
 8009d4e:	429d      	cmp	r5, r3
 8009d50:	d11b      	bne.n	8009d8a <_vfiprintf_r+0x56>
 8009d52:	6875      	ldr	r5, [r6, #4]
 8009d54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d56:	07d9      	lsls	r1, r3, #31
 8009d58:	d405      	bmi.n	8009d66 <_vfiprintf_r+0x32>
 8009d5a:	89ab      	ldrh	r3, [r5, #12]
 8009d5c:	059a      	lsls	r2, r3, #22
 8009d5e:	d402      	bmi.n	8009d66 <_vfiprintf_r+0x32>
 8009d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d62:	f7ff f9ba 	bl	80090da <__retarget_lock_acquire_recursive>
 8009d66:	89ab      	ldrh	r3, [r5, #12]
 8009d68:	071b      	lsls	r3, r3, #28
 8009d6a:	d501      	bpl.n	8009d70 <_vfiprintf_r+0x3c>
 8009d6c:	692b      	ldr	r3, [r5, #16]
 8009d6e:	b9eb      	cbnz	r3, 8009dac <_vfiprintf_r+0x78>
 8009d70:	4629      	mov	r1, r5
 8009d72:	4630      	mov	r0, r6
 8009d74:	f000 f980 	bl	800a078 <__swsetup_r>
 8009d78:	b1c0      	cbz	r0, 8009dac <_vfiprintf_r+0x78>
 8009d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d7c:	07dc      	lsls	r4, r3, #31
 8009d7e:	d50e      	bpl.n	8009d9e <_vfiprintf_r+0x6a>
 8009d80:	f04f 30ff 	mov.w	r0, #4294967295
 8009d84:	b01d      	add	sp, #116	; 0x74
 8009d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8a:	4b7b      	ldr	r3, [pc, #492]	; (8009f78 <_vfiprintf_r+0x244>)
 8009d8c:	429d      	cmp	r5, r3
 8009d8e:	d101      	bne.n	8009d94 <_vfiprintf_r+0x60>
 8009d90:	68b5      	ldr	r5, [r6, #8]
 8009d92:	e7df      	b.n	8009d54 <_vfiprintf_r+0x20>
 8009d94:	4b79      	ldr	r3, [pc, #484]	; (8009f7c <_vfiprintf_r+0x248>)
 8009d96:	429d      	cmp	r5, r3
 8009d98:	bf08      	it	eq
 8009d9a:	68f5      	ldreq	r5, [r6, #12]
 8009d9c:	e7da      	b.n	8009d54 <_vfiprintf_r+0x20>
 8009d9e:	89ab      	ldrh	r3, [r5, #12]
 8009da0:	0598      	lsls	r0, r3, #22
 8009da2:	d4ed      	bmi.n	8009d80 <_vfiprintf_r+0x4c>
 8009da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009da6:	f7ff f999 	bl	80090dc <__retarget_lock_release_recursive>
 8009daa:	e7e9      	b.n	8009d80 <_vfiprintf_r+0x4c>
 8009dac:	2300      	movs	r3, #0
 8009dae:	9309      	str	r3, [sp, #36]	; 0x24
 8009db0:	2320      	movs	r3, #32
 8009db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dba:	2330      	movs	r3, #48	; 0x30
 8009dbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f80 <_vfiprintf_r+0x24c>
 8009dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dc4:	f04f 0901 	mov.w	r9, #1
 8009dc8:	4623      	mov	r3, r4
 8009dca:	469a      	mov	sl, r3
 8009dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dd0:	b10a      	cbz	r2, 8009dd6 <_vfiprintf_r+0xa2>
 8009dd2:	2a25      	cmp	r2, #37	; 0x25
 8009dd4:	d1f9      	bne.n	8009dca <_vfiprintf_r+0x96>
 8009dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8009dda:	d00b      	beq.n	8009df4 <_vfiprintf_r+0xc0>
 8009ddc:	465b      	mov	r3, fp
 8009dde:	4622      	mov	r2, r4
 8009de0:	4629      	mov	r1, r5
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7ff ff94 	bl	8009d10 <__sfputs_r>
 8009de8:	3001      	adds	r0, #1
 8009dea:	f000 80aa 	beq.w	8009f42 <_vfiprintf_r+0x20e>
 8009dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009df0:	445a      	add	r2, fp
 8009df2:	9209      	str	r2, [sp, #36]	; 0x24
 8009df4:	f89a 3000 	ldrb.w	r3, [sl]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 80a2 	beq.w	8009f42 <_vfiprintf_r+0x20e>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f04f 32ff 	mov.w	r2, #4294967295
 8009e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e08:	f10a 0a01 	add.w	sl, sl, #1
 8009e0c:	9304      	str	r3, [sp, #16]
 8009e0e:	9307      	str	r3, [sp, #28]
 8009e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e14:	931a      	str	r3, [sp, #104]	; 0x68
 8009e16:	4654      	mov	r4, sl
 8009e18:	2205      	movs	r2, #5
 8009e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e1e:	4858      	ldr	r0, [pc, #352]	; (8009f80 <_vfiprintf_r+0x24c>)
 8009e20:	f7f6 f9de 	bl	80001e0 <memchr>
 8009e24:	9a04      	ldr	r2, [sp, #16]
 8009e26:	b9d8      	cbnz	r0, 8009e60 <_vfiprintf_r+0x12c>
 8009e28:	06d1      	lsls	r1, r2, #27
 8009e2a:	bf44      	itt	mi
 8009e2c:	2320      	movmi	r3, #32
 8009e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e32:	0713      	lsls	r3, r2, #28
 8009e34:	bf44      	itt	mi
 8009e36:	232b      	movmi	r3, #43	; 0x2b
 8009e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e40:	2b2a      	cmp	r3, #42	; 0x2a
 8009e42:	d015      	beq.n	8009e70 <_vfiprintf_r+0x13c>
 8009e44:	9a07      	ldr	r2, [sp, #28]
 8009e46:	4654      	mov	r4, sl
 8009e48:	2000      	movs	r0, #0
 8009e4a:	f04f 0c0a 	mov.w	ip, #10
 8009e4e:	4621      	mov	r1, r4
 8009e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e54:	3b30      	subs	r3, #48	; 0x30
 8009e56:	2b09      	cmp	r3, #9
 8009e58:	d94e      	bls.n	8009ef8 <_vfiprintf_r+0x1c4>
 8009e5a:	b1b0      	cbz	r0, 8009e8a <_vfiprintf_r+0x156>
 8009e5c:	9207      	str	r2, [sp, #28]
 8009e5e:	e014      	b.n	8009e8a <_vfiprintf_r+0x156>
 8009e60:	eba0 0308 	sub.w	r3, r0, r8
 8009e64:	fa09 f303 	lsl.w	r3, r9, r3
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	46a2      	mov	sl, r4
 8009e6e:	e7d2      	b.n	8009e16 <_vfiprintf_r+0xe2>
 8009e70:	9b03      	ldr	r3, [sp, #12]
 8009e72:	1d19      	adds	r1, r3, #4
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	9103      	str	r1, [sp, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	bfbb      	ittet	lt
 8009e7c:	425b      	neglt	r3, r3
 8009e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e82:	9307      	strge	r3, [sp, #28]
 8009e84:	9307      	strlt	r3, [sp, #28]
 8009e86:	bfb8      	it	lt
 8009e88:	9204      	strlt	r2, [sp, #16]
 8009e8a:	7823      	ldrb	r3, [r4, #0]
 8009e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e8e:	d10c      	bne.n	8009eaa <_vfiprintf_r+0x176>
 8009e90:	7863      	ldrb	r3, [r4, #1]
 8009e92:	2b2a      	cmp	r3, #42	; 0x2a
 8009e94:	d135      	bne.n	8009f02 <_vfiprintf_r+0x1ce>
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	1d1a      	adds	r2, r3, #4
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	9203      	str	r2, [sp, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	bfb8      	it	lt
 8009ea2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ea6:	3402      	adds	r4, #2
 8009ea8:	9305      	str	r3, [sp, #20]
 8009eaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f90 <_vfiprintf_r+0x25c>
 8009eae:	7821      	ldrb	r1, [r4, #0]
 8009eb0:	2203      	movs	r2, #3
 8009eb2:	4650      	mov	r0, sl
 8009eb4:	f7f6 f994 	bl	80001e0 <memchr>
 8009eb8:	b140      	cbz	r0, 8009ecc <_vfiprintf_r+0x198>
 8009eba:	2340      	movs	r3, #64	; 0x40
 8009ebc:	eba0 000a 	sub.w	r0, r0, sl
 8009ec0:	fa03 f000 	lsl.w	r0, r3, r0
 8009ec4:	9b04      	ldr	r3, [sp, #16]
 8009ec6:	4303      	orrs	r3, r0
 8009ec8:	3401      	adds	r4, #1
 8009eca:	9304      	str	r3, [sp, #16]
 8009ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed0:	482c      	ldr	r0, [pc, #176]	; (8009f84 <_vfiprintf_r+0x250>)
 8009ed2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ed6:	2206      	movs	r2, #6
 8009ed8:	f7f6 f982 	bl	80001e0 <memchr>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d03f      	beq.n	8009f60 <_vfiprintf_r+0x22c>
 8009ee0:	4b29      	ldr	r3, [pc, #164]	; (8009f88 <_vfiprintf_r+0x254>)
 8009ee2:	bb1b      	cbnz	r3, 8009f2c <_vfiprintf_r+0x1f8>
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	3307      	adds	r3, #7
 8009ee8:	f023 0307 	bic.w	r3, r3, #7
 8009eec:	3308      	adds	r3, #8
 8009eee:	9303      	str	r3, [sp, #12]
 8009ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef2:	443b      	add	r3, r7
 8009ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef6:	e767      	b.n	8009dc8 <_vfiprintf_r+0x94>
 8009ef8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009efc:	460c      	mov	r4, r1
 8009efe:	2001      	movs	r0, #1
 8009f00:	e7a5      	b.n	8009e4e <_vfiprintf_r+0x11a>
 8009f02:	2300      	movs	r3, #0
 8009f04:	3401      	adds	r4, #1
 8009f06:	9305      	str	r3, [sp, #20]
 8009f08:	4619      	mov	r1, r3
 8009f0a:	f04f 0c0a 	mov.w	ip, #10
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f14:	3a30      	subs	r2, #48	; 0x30
 8009f16:	2a09      	cmp	r2, #9
 8009f18:	d903      	bls.n	8009f22 <_vfiprintf_r+0x1ee>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d0c5      	beq.n	8009eaa <_vfiprintf_r+0x176>
 8009f1e:	9105      	str	r1, [sp, #20]
 8009f20:	e7c3      	b.n	8009eaa <_vfiprintf_r+0x176>
 8009f22:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f26:	4604      	mov	r4, r0
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e7f0      	b.n	8009f0e <_vfiprintf_r+0x1da>
 8009f2c:	ab03      	add	r3, sp, #12
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	462a      	mov	r2, r5
 8009f32:	4b16      	ldr	r3, [pc, #88]	; (8009f8c <_vfiprintf_r+0x258>)
 8009f34:	a904      	add	r1, sp, #16
 8009f36:	4630      	mov	r0, r6
 8009f38:	f7fd f980 	bl	800723c <_printf_float>
 8009f3c:	4607      	mov	r7, r0
 8009f3e:	1c78      	adds	r0, r7, #1
 8009f40:	d1d6      	bne.n	8009ef0 <_vfiprintf_r+0x1bc>
 8009f42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f44:	07d9      	lsls	r1, r3, #31
 8009f46:	d405      	bmi.n	8009f54 <_vfiprintf_r+0x220>
 8009f48:	89ab      	ldrh	r3, [r5, #12]
 8009f4a:	059a      	lsls	r2, r3, #22
 8009f4c:	d402      	bmi.n	8009f54 <_vfiprintf_r+0x220>
 8009f4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f50:	f7ff f8c4 	bl	80090dc <__retarget_lock_release_recursive>
 8009f54:	89ab      	ldrh	r3, [r5, #12]
 8009f56:	065b      	lsls	r3, r3, #25
 8009f58:	f53f af12 	bmi.w	8009d80 <_vfiprintf_r+0x4c>
 8009f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f5e:	e711      	b.n	8009d84 <_vfiprintf_r+0x50>
 8009f60:	ab03      	add	r3, sp, #12
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	462a      	mov	r2, r5
 8009f66:	4b09      	ldr	r3, [pc, #36]	; (8009f8c <_vfiprintf_r+0x258>)
 8009f68:	a904      	add	r1, sp, #16
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f7fd fc0a 	bl	8007784 <_printf_i>
 8009f70:	e7e4      	b.n	8009f3c <_vfiprintf_r+0x208>
 8009f72:	bf00      	nop
 8009f74:	0800aaf8 	.word	0x0800aaf8
 8009f78:	0800ab18 	.word	0x0800ab18
 8009f7c:	0800aad8 	.word	0x0800aad8
 8009f80:	0800ac94 	.word	0x0800ac94
 8009f84:	0800ac9e 	.word	0x0800ac9e
 8009f88:	0800723d 	.word	0x0800723d
 8009f8c:	08009d11 	.word	0x08009d11
 8009f90:	0800ac9a 	.word	0x0800ac9a

08009f94 <_read_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4d07      	ldr	r5, [pc, #28]	; (8009fb4 <_read_r+0x20>)
 8009f98:	4604      	mov	r4, r0
 8009f9a:	4608      	mov	r0, r1
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	602a      	str	r2, [r5, #0]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	f7f7 fd2c 	bl	8001a00 <_read>
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	d102      	bne.n	8009fb2 <_read_r+0x1e>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	b103      	cbz	r3, 8009fb2 <_read_r+0x1e>
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	2000064c 	.word	0x2000064c

08009fb8 <__swbuf_r>:
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	460e      	mov	r6, r1
 8009fbc:	4614      	mov	r4, r2
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	b118      	cbz	r0, 8009fca <__swbuf_r+0x12>
 8009fc2:	6983      	ldr	r3, [r0, #24]
 8009fc4:	b90b      	cbnz	r3, 8009fca <__swbuf_r+0x12>
 8009fc6:	f7fe ffe5 	bl	8008f94 <__sinit>
 8009fca:	4b21      	ldr	r3, [pc, #132]	; (800a050 <__swbuf_r+0x98>)
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	d12b      	bne.n	800a028 <__swbuf_r+0x70>
 8009fd0:	686c      	ldr	r4, [r5, #4]
 8009fd2:	69a3      	ldr	r3, [r4, #24]
 8009fd4:	60a3      	str	r3, [r4, #8]
 8009fd6:	89a3      	ldrh	r3, [r4, #12]
 8009fd8:	071a      	lsls	r2, r3, #28
 8009fda:	d52f      	bpl.n	800a03c <__swbuf_r+0x84>
 8009fdc:	6923      	ldr	r3, [r4, #16]
 8009fde:	b36b      	cbz	r3, 800a03c <__swbuf_r+0x84>
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	6820      	ldr	r0, [r4, #0]
 8009fe4:	1ac0      	subs	r0, r0, r3
 8009fe6:	6963      	ldr	r3, [r4, #20]
 8009fe8:	b2f6      	uxtb	r6, r6
 8009fea:	4283      	cmp	r3, r0
 8009fec:	4637      	mov	r7, r6
 8009fee:	dc04      	bgt.n	8009ffa <__swbuf_r+0x42>
 8009ff0:	4621      	mov	r1, r4
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f7fe fefc 	bl	8008df0 <_fflush_r>
 8009ff8:	bb30      	cbnz	r0, 800a048 <__swbuf_r+0x90>
 8009ffa:	68a3      	ldr	r3, [r4, #8]
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	60a3      	str	r3, [r4, #8]
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	1c5a      	adds	r2, r3, #1
 800a004:	6022      	str	r2, [r4, #0]
 800a006:	701e      	strb	r6, [r3, #0]
 800a008:	6963      	ldr	r3, [r4, #20]
 800a00a:	3001      	adds	r0, #1
 800a00c:	4283      	cmp	r3, r0
 800a00e:	d004      	beq.n	800a01a <__swbuf_r+0x62>
 800a010:	89a3      	ldrh	r3, [r4, #12]
 800a012:	07db      	lsls	r3, r3, #31
 800a014:	d506      	bpl.n	800a024 <__swbuf_r+0x6c>
 800a016:	2e0a      	cmp	r6, #10
 800a018:	d104      	bne.n	800a024 <__swbuf_r+0x6c>
 800a01a:	4621      	mov	r1, r4
 800a01c:	4628      	mov	r0, r5
 800a01e:	f7fe fee7 	bl	8008df0 <_fflush_r>
 800a022:	b988      	cbnz	r0, 800a048 <__swbuf_r+0x90>
 800a024:	4638      	mov	r0, r7
 800a026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a028:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <__swbuf_r+0x9c>)
 800a02a:	429c      	cmp	r4, r3
 800a02c:	d101      	bne.n	800a032 <__swbuf_r+0x7a>
 800a02e:	68ac      	ldr	r4, [r5, #8]
 800a030:	e7cf      	b.n	8009fd2 <__swbuf_r+0x1a>
 800a032:	4b09      	ldr	r3, [pc, #36]	; (800a058 <__swbuf_r+0xa0>)
 800a034:	429c      	cmp	r4, r3
 800a036:	bf08      	it	eq
 800a038:	68ec      	ldreq	r4, [r5, #12]
 800a03a:	e7ca      	b.n	8009fd2 <__swbuf_r+0x1a>
 800a03c:	4621      	mov	r1, r4
 800a03e:	4628      	mov	r0, r5
 800a040:	f000 f81a 	bl	800a078 <__swsetup_r>
 800a044:	2800      	cmp	r0, #0
 800a046:	d0cb      	beq.n	8009fe0 <__swbuf_r+0x28>
 800a048:	f04f 37ff 	mov.w	r7, #4294967295
 800a04c:	e7ea      	b.n	800a024 <__swbuf_r+0x6c>
 800a04e:	bf00      	nop
 800a050:	0800aaf8 	.word	0x0800aaf8
 800a054:	0800ab18 	.word	0x0800ab18
 800a058:	0800aad8 	.word	0x0800aad8

0800a05c <__ascii_wctomb>:
 800a05c:	b149      	cbz	r1, 800a072 <__ascii_wctomb+0x16>
 800a05e:	2aff      	cmp	r2, #255	; 0xff
 800a060:	bf85      	ittet	hi
 800a062:	238a      	movhi	r3, #138	; 0x8a
 800a064:	6003      	strhi	r3, [r0, #0]
 800a066:	700a      	strbls	r2, [r1, #0]
 800a068:	f04f 30ff 	movhi.w	r0, #4294967295
 800a06c:	bf98      	it	ls
 800a06e:	2001      	movls	r0, #1
 800a070:	4770      	bx	lr
 800a072:	4608      	mov	r0, r1
 800a074:	4770      	bx	lr
	...

0800a078 <__swsetup_r>:
 800a078:	4b32      	ldr	r3, [pc, #200]	; (800a144 <__swsetup_r+0xcc>)
 800a07a:	b570      	push	{r4, r5, r6, lr}
 800a07c:	681d      	ldr	r5, [r3, #0]
 800a07e:	4606      	mov	r6, r0
 800a080:	460c      	mov	r4, r1
 800a082:	b125      	cbz	r5, 800a08e <__swsetup_r+0x16>
 800a084:	69ab      	ldr	r3, [r5, #24]
 800a086:	b913      	cbnz	r3, 800a08e <__swsetup_r+0x16>
 800a088:	4628      	mov	r0, r5
 800a08a:	f7fe ff83 	bl	8008f94 <__sinit>
 800a08e:	4b2e      	ldr	r3, [pc, #184]	; (800a148 <__swsetup_r+0xd0>)
 800a090:	429c      	cmp	r4, r3
 800a092:	d10f      	bne.n	800a0b4 <__swsetup_r+0x3c>
 800a094:	686c      	ldr	r4, [r5, #4]
 800a096:	89a3      	ldrh	r3, [r4, #12]
 800a098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a09c:	0719      	lsls	r1, r3, #28
 800a09e:	d42c      	bmi.n	800a0fa <__swsetup_r+0x82>
 800a0a0:	06dd      	lsls	r5, r3, #27
 800a0a2:	d411      	bmi.n	800a0c8 <__swsetup_r+0x50>
 800a0a4:	2309      	movs	r3, #9
 800a0a6:	6033      	str	r3, [r6, #0]
 800a0a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0ac:	81a3      	strh	r3, [r4, #12]
 800a0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b2:	e03e      	b.n	800a132 <__swsetup_r+0xba>
 800a0b4:	4b25      	ldr	r3, [pc, #148]	; (800a14c <__swsetup_r+0xd4>)
 800a0b6:	429c      	cmp	r4, r3
 800a0b8:	d101      	bne.n	800a0be <__swsetup_r+0x46>
 800a0ba:	68ac      	ldr	r4, [r5, #8]
 800a0bc:	e7eb      	b.n	800a096 <__swsetup_r+0x1e>
 800a0be:	4b24      	ldr	r3, [pc, #144]	; (800a150 <__swsetup_r+0xd8>)
 800a0c0:	429c      	cmp	r4, r3
 800a0c2:	bf08      	it	eq
 800a0c4:	68ec      	ldreq	r4, [r5, #12]
 800a0c6:	e7e6      	b.n	800a096 <__swsetup_r+0x1e>
 800a0c8:	0758      	lsls	r0, r3, #29
 800a0ca:	d512      	bpl.n	800a0f2 <__swsetup_r+0x7a>
 800a0cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0ce:	b141      	cbz	r1, 800a0e2 <__swsetup_r+0x6a>
 800a0d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0d4:	4299      	cmp	r1, r3
 800a0d6:	d002      	beq.n	800a0de <__swsetup_r+0x66>
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f7fc ff2f 	bl	8006f3c <_free_r>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	6363      	str	r3, [r4, #52]	; 0x34
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0e8:	81a3      	strh	r3, [r4, #12]
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	6063      	str	r3, [r4, #4]
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	f043 0308 	orr.w	r3, r3, #8
 800a0f8:	81a3      	strh	r3, [r4, #12]
 800a0fa:	6923      	ldr	r3, [r4, #16]
 800a0fc:	b94b      	cbnz	r3, 800a112 <__swsetup_r+0x9a>
 800a0fe:	89a3      	ldrh	r3, [r4, #12]
 800a100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a108:	d003      	beq.n	800a112 <__swsetup_r+0x9a>
 800a10a:	4621      	mov	r1, r4
 800a10c:	4630      	mov	r0, r6
 800a10e:	f000 f847 	bl	800a1a0 <__smakebuf_r>
 800a112:	89a0      	ldrh	r0, [r4, #12]
 800a114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a118:	f010 0301 	ands.w	r3, r0, #1
 800a11c:	d00a      	beq.n	800a134 <__swsetup_r+0xbc>
 800a11e:	2300      	movs	r3, #0
 800a120:	60a3      	str	r3, [r4, #8]
 800a122:	6963      	ldr	r3, [r4, #20]
 800a124:	425b      	negs	r3, r3
 800a126:	61a3      	str	r3, [r4, #24]
 800a128:	6923      	ldr	r3, [r4, #16]
 800a12a:	b943      	cbnz	r3, 800a13e <__swsetup_r+0xc6>
 800a12c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a130:	d1ba      	bne.n	800a0a8 <__swsetup_r+0x30>
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	0781      	lsls	r1, r0, #30
 800a136:	bf58      	it	pl
 800a138:	6963      	ldrpl	r3, [r4, #20]
 800a13a:	60a3      	str	r3, [r4, #8]
 800a13c:	e7f4      	b.n	800a128 <__swsetup_r+0xb0>
 800a13e:	2000      	movs	r0, #0
 800a140:	e7f7      	b.n	800a132 <__swsetup_r+0xba>
 800a142:	bf00      	nop
 800a144:	2000003c 	.word	0x2000003c
 800a148:	0800aaf8 	.word	0x0800aaf8
 800a14c:	0800ab18 	.word	0x0800ab18
 800a150:	0800aad8 	.word	0x0800aad8

0800a154 <__swhatbuf_r>:
 800a154:	b570      	push	{r4, r5, r6, lr}
 800a156:	460e      	mov	r6, r1
 800a158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a15c:	2900      	cmp	r1, #0
 800a15e:	b096      	sub	sp, #88	; 0x58
 800a160:	4614      	mov	r4, r2
 800a162:	461d      	mov	r5, r3
 800a164:	da08      	bge.n	800a178 <__swhatbuf_r+0x24>
 800a166:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	602a      	str	r2, [r5, #0]
 800a16e:	061a      	lsls	r2, r3, #24
 800a170:	d410      	bmi.n	800a194 <__swhatbuf_r+0x40>
 800a172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a176:	e00e      	b.n	800a196 <__swhatbuf_r+0x42>
 800a178:	466a      	mov	r2, sp
 800a17a:	f000 f859 	bl	800a230 <_fstat_r>
 800a17e:	2800      	cmp	r0, #0
 800a180:	dbf1      	blt.n	800a166 <__swhatbuf_r+0x12>
 800a182:	9a01      	ldr	r2, [sp, #4]
 800a184:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a188:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a18c:	425a      	negs	r2, r3
 800a18e:	415a      	adcs	r2, r3
 800a190:	602a      	str	r2, [r5, #0]
 800a192:	e7ee      	b.n	800a172 <__swhatbuf_r+0x1e>
 800a194:	2340      	movs	r3, #64	; 0x40
 800a196:	2000      	movs	r0, #0
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	b016      	add	sp, #88	; 0x58
 800a19c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a1a0 <__smakebuf_r>:
 800a1a0:	898b      	ldrh	r3, [r1, #12]
 800a1a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1a4:	079d      	lsls	r5, r3, #30
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	d507      	bpl.n	800a1bc <__smakebuf_r+0x1c>
 800a1ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	6123      	str	r3, [r4, #16]
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	6163      	str	r3, [r4, #20]
 800a1b8:	b002      	add	sp, #8
 800a1ba:	bd70      	pop	{r4, r5, r6, pc}
 800a1bc:	ab01      	add	r3, sp, #4
 800a1be:	466a      	mov	r2, sp
 800a1c0:	f7ff ffc8 	bl	800a154 <__swhatbuf_r>
 800a1c4:	9900      	ldr	r1, [sp, #0]
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f7fc ff23 	bl	8007014 <_malloc_r>
 800a1ce:	b948      	cbnz	r0, 800a1e4 <__smakebuf_r+0x44>
 800a1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1d4:	059a      	lsls	r2, r3, #22
 800a1d6:	d4ef      	bmi.n	800a1b8 <__smakebuf_r+0x18>
 800a1d8:	f023 0303 	bic.w	r3, r3, #3
 800a1dc:	f043 0302 	orr.w	r3, r3, #2
 800a1e0:	81a3      	strh	r3, [r4, #12]
 800a1e2:	e7e3      	b.n	800a1ac <__smakebuf_r+0xc>
 800a1e4:	4b0d      	ldr	r3, [pc, #52]	; (800a21c <__smakebuf_r+0x7c>)
 800a1e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	6020      	str	r0, [r4, #0]
 800a1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f0:	81a3      	strh	r3, [r4, #12]
 800a1f2:	9b00      	ldr	r3, [sp, #0]
 800a1f4:	6163      	str	r3, [r4, #20]
 800a1f6:	9b01      	ldr	r3, [sp, #4]
 800a1f8:	6120      	str	r0, [r4, #16]
 800a1fa:	b15b      	cbz	r3, 800a214 <__smakebuf_r+0x74>
 800a1fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a200:	4630      	mov	r0, r6
 800a202:	f000 f827 	bl	800a254 <_isatty_r>
 800a206:	b128      	cbz	r0, 800a214 <__smakebuf_r+0x74>
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	f023 0303 	bic.w	r3, r3, #3
 800a20e:	f043 0301 	orr.w	r3, r3, #1
 800a212:	81a3      	strh	r3, [r4, #12]
 800a214:	89a0      	ldrh	r0, [r4, #12]
 800a216:	4305      	orrs	r5, r0
 800a218:	81a5      	strh	r5, [r4, #12]
 800a21a:	e7cd      	b.n	800a1b8 <__smakebuf_r+0x18>
 800a21c:	08008f2d 	.word	0x08008f2d

0800a220 <_malloc_usable_size_r>:
 800a220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a224:	1f18      	subs	r0, r3, #4
 800a226:	2b00      	cmp	r3, #0
 800a228:	bfbc      	itt	lt
 800a22a:	580b      	ldrlt	r3, [r1, r0]
 800a22c:	18c0      	addlt	r0, r0, r3
 800a22e:	4770      	bx	lr

0800a230 <_fstat_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4d07      	ldr	r5, [pc, #28]	; (800a250 <_fstat_r+0x20>)
 800a234:	2300      	movs	r3, #0
 800a236:	4604      	mov	r4, r0
 800a238:	4608      	mov	r0, r1
 800a23a:	4611      	mov	r1, r2
 800a23c:	602b      	str	r3, [r5, #0]
 800a23e:	f7f7 fc24 	bl	8001a8a <_fstat>
 800a242:	1c43      	adds	r3, r0, #1
 800a244:	d102      	bne.n	800a24c <_fstat_r+0x1c>
 800a246:	682b      	ldr	r3, [r5, #0]
 800a248:	b103      	cbz	r3, 800a24c <_fstat_r+0x1c>
 800a24a:	6023      	str	r3, [r4, #0]
 800a24c:	bd38      	pop	{r3, r4, r5, pc}
 800a24e:	bf00      	nop
 800a250:	2000064c 	.word	0x2000064c

0800a254 <_isatty_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4d06      	ldr	r5, [pc, #24]	; (800a270 <_isatty_r+0x1c>)
 800a258:	2300      	movs	r3, #0
 800a25a:	4604      	mov	r4, r0
 800a25c:	4608      	mov	r0, r1
 800a25e:	602b      	str	r3, [r5, #0]
 800a260:	f7f7 fc23 	bl	8001aaa <_isatty>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d102      	bne.n	800a26e <_isatty_r+0x1a>
 800a268:	682b      	ldr	r3, [r5, #0]
 800a26a:	b103      	cbz	r3, 800a26e <_isatty_r+0x1a>
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	bd38      	pop	{r3, r4, r5, pc}
 800a270:	2000064c 	.word	0x2000064c

0800a274 <_init>:
 800a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a276:	bf00      	nop
 800a278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a27a:	bc08      	pop	{r3}
 800a27c:	469e      	mov	lr, r3
 800a27e:	4770      	bx	lr

0800a280 <_fini>:
 800a280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a282:	bf00      	nop
 800a284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a286:	bc08      	pop	{r3}
 800a288:	469e      	mov	lr, r3
 800a28a:	4770      	bx	lr
