
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a084  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b34  0800a218  0800a218  0001a218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad4c  0800ad4c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad4c  0800ad4c  0001ad4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad54  0800ad54  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ad54  0800ad54  0001ad54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad5c  0800ad5c  0001ad5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800ad60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000210  0800af6c  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  0800af6c  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a6a  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003592  00000000  00000000  00038ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003c238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279f8  00000000  00000000  0003e830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017699  00000000  00000000  00066228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddf85  00000000  00000000  0007d8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b846  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064dc  00000000  00000000  0015b898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1fc 	.word	0x0800a1fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800a1fc 	.word	0x0800a1fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB8   ------> S_TIM16_CH1
*/
void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b52      	ldr	r3, [pc, #328]	; (800100c <MX_GPIO_Init+0x160>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a51      	ldr	r2, [pc, #324]	; (800100c <MX_GPIO_Init+0x160>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b4f      	ldr	r3, [pc, #316]	; (800100c <MX_GPIO_Init+0x160>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	4b4c      	ldr	r3, [pc, #304]	; (800100c <MX_GPIO_Init+0x160>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a4b      	ldr	r2, [pc, #300]	; (800100c <MX_GPIO_Init+0x160>)
 8000ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b49      	ldr	r3, [pc, #292]	; (800100c <MX_GPIO_Init+0x160>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b46      	ldr	r3, [pc, #280]	; (800100c <MX_GPIO_Init+0x160>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a45      	ldr	r2, [pc, #276]	; (800100c <MX_GPIO_Init+0x160>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b43      	ldr	r3, [pc, #268]	; (800100c <MX_GPIO_Init+0x160>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b40      	ldr	r3, [pc, #256]	; (800100c <MX_GPIO_Init+0x160>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a3f      	ldr	r2, [pc, #252]	; (800100c <MX_GPIO_Init+0x160>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b3d      	ldr	r3, [pc, #244]	; (800100c <MX_GPIO_Init+0x160>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000f22:	2200      	movs	r2, #0
 8000f24:	f248 11b0 	movw	r1, #33200	; 0x81b0
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f002 fb0a 	bl	8003544 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	4836      	ldr	r0, [pc, #216]	; (8001010 <MX_GPIO_Init+0x164>)
 8000f36:	f002 fb05 	bl	8003544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2160      	movs	r1, #96	; 0x60
 8000f3e:	4835      	ldr	r0, [pc, #212]	; (8001014 <MX_GPIO_Init+0x168>)
 8000f40:	f002 fb00 	bl	8003544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	482d      	ldr	r0, [pc, #180]	; (8001010 <MX_GPIO_Init+0x164>)
 8000f5c:	f002 f978 	bl	8003250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000f60:	f248 13b0 	movw	r3, #33200	; 0x81b0
 8000f64:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f002 f968 	bl	8003250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000f80:	2340      	movs	r3, #64	; 0x40
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f002 f95b 	bl	8003250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4817      	ldr	r0, [pc, #92]	; (8001010 <MX_GPIO_Init+0x164>)
 8000fb2:	f002 f94d 	bl	8003250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 8000fb6:	2360      	movs	r3, #96	; 0x60
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4811      	ldr	r0, [pc, #68]	; (8001014 <MX_GPIO_Init+0x168>)
 8000fce:	f002 f93f 	bl	8003250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000fe4:	230e      	movs	r3, #14
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <MX_GPIO_Init+0x168>)
 8000ff0:	f002 f92e 	bl	8003250 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2028      	movs	r0, #40	; 0x28
 8000ffa:	f002 f8f2 	bl	80031e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ffe:	2028      	movs	r0, #40	; 0x28
 8001000:	f002 f90b 	bl	800321a <HAL_NVIC_EnableIRQ>

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	48000800 	.word	0x48000800
 8001014:	48000400 	.word	0x48000400

08001018 <_ZN3PinC1Ev>:
    uint16_t pin;
    bool valid;
    TIM_HandleTypeDef* p_tim;
    unsigned int channel;

    Pin() : port(nullptr), pin(0), valid(false), p_tim(nullptr), channel(0) {}
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	809a      	strh	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	719a      	strb	r2, [r3, #6]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_ZN3PinC1EP12GPIO_TypeDeft>:
    Pin(GPIO_TypeDef* p, uint16_t pn) : port(p), pin(pn), valid(true), p_tim(nullptr), channel(0) {} // no timer
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	4613      	mov	r3, r2
 8001058:	80fb      	strh	r3, [r7, #6]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	88fa      	ldrh	r2, [r7, #6]
 8001064:	809a      	strh	r2, [r3, #4]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2201      	movs	r2, #1
 800106a:	719a      	strb	r2, [r3, #6]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>:
    Pin(GPIO_TypeDef* p, uint16_t pn, TIM_HandleTypeDef* t, unsigned int c) : port(p), pin(pn), valid(true), p_tim(t), channel(c) {}
 8001086:	b480      	push	{r7}
 8001088:	b085      	sub	sp, #20
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4613      	mov	r3, r2
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	809a      	strh	r2, [r3, #4]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2201      	movs	r2, #1
 80010a6:	719a      	strb	r2, [r3, #6]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <_Z5printPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff f87f 	bl	80001d0 <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <_Z5printPKc+0x2c>)
 80010de:	f005 f8e3 	bl	80062a8 <HAL_UART_Transmit>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200005ac 	.word	0x200005ac

080010f4 <printf>:
int printf(const char* s, ...){
 80010f4:	b40f      	push	{r0, r1, r2, r3}
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b0c2      	sub	sp, #264	; 0x108
 80010fa:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 80010fc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001104:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001108:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 800110a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800110e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001112:	f107 0008 	add.w	r0, r7, #8
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800111c:	f006 ff0e 	bl	8007f3c <vsiprintf>
	perror(buffer);
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	4618      	mov	r0, r3
 8001126:	f006 fcaf 	bl	8007a88 <perror>
	print(buffer);
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ffc8 	bl	80010c4 <_Z5printPKc>
	va_end(args);
//	#endif
	return strlen(buffer);
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f849 	bl	80001d0 <strlen>
 800113e:	4603      	mov	r3, r0
}
 8001140:	4618      	mov	r0, r3
 8001142:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001146:	46bd      	mov	sp, r7
 8001148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800114c:	b004      	add	sp, #16
 800114e:	4770      	bx	lr

08001150 <_Z12print_CYTRONPc>:
Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin, &htim2, TIM_CHANNEL_2);
Pin AMT22_1(GPIOC, GPIO_PIN_7);
RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);
int button_counter = 0;

void print_CYTRON(char* msg){
 8001150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001154:	b08f      	sub	sp, #60	; 0x3c
 8001156:	af0a      	add	r7, sp, #40	; 0x28
 8001158:	60f8      	str	r0, [r7, #12]
  current_angle = Wrist_Roll.get_current_angle();
 800115a:	481f      	ldr	r0, [pc, #124]	; (80011d8 <_Z12print_CYTRONPc+0x88>)
 800115c:	f001 fa80 	bl	8002660 <_ZN13RoverArmMotor17get_current_angleEv>
 8001160:	eeb0 7a40 	vmov.f32	s14, s0
 8001164:	eef0 7a60 	vmov.f32	s15, s1
 8001168:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <_Z12print_CYTRONPc+0x8c>)
 800116a:	ed83 7b00 	vstr	d7, [r3]
  current_angle_sw = Wrist_Roll.get_current_angle_sw();
 800116e:	481a      	ldr	r0, [pc, #104]	; (80011d8 <_Z12print_CYTRONPc+0x88>)
 8001170:	f001 fabc 	bl	80026ec <_ZN13RoverArmMotor20get_current_angle_swEv>
 8001174:	eeb0 7a40 	vmov.f32	s14, s0
 8001178:	eef0 7a60 	vmov.f32	s15, s1
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <_Z12print_CYTRONPc+0x90>)
 800117e:	ed83 7b00 	vstr	d7, [r3]
  printf("%s angle_raw: %.2f, angle_sw: %.2f, setpoint: %.2f, zero_sw: %.2f, _outputSum: %.2f, output: %.2f\r\n", 
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <_Z12print_CYTRONPc+0x8c>)
 8001184:	ed93 7b00 	vldr	d7, [r3]
 8001188:	ed87 7b00 	vstr	d7, [r7]
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <_Z12print_CYTRONPc+0x90>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	4911      	ldr	r1, [pc, #68]	; (80011d8 <_Z12print_CYTRONPc+0x88>)
 8001194:	e9d1 0150 	ldrd	r0, r1, [r1, #320]	; 0x140
 8001198:	4c0f      	ldr	r4, [pc, #60]	; (80011d8 <_Z12print_CYTRONPc+0x88>)
 800119a:	e9d4 4558 	ldrd	r4, r5, [r4, #352]	; 0x160
 800119e:	4e0e      	ldr	r6, [pc, #56]	; (80011d8 <_Z12print_CYTRONPc+0x88>)
 80011a0:	e9d6 8914 	ldrd	r8, r9, [r6, #80]	; 0x50
    msg, current_angle, current_angle_sw, Wrist_Roll.setpoint, Wrist_Roll.zero_angle_sw,
    Wrist_Roll.internalPIDInstance._outputSum, *Wrist_Roll.internalPIDInstance._myOutput);
 80011a4:	4e0c      	ldr	r6, [pc, #48]	; (80011d8 <_Z12print_CYTRONPc+0x88>)
 80011a6:	6c76      	ldr	r6, [r6, #68]	; 0x44
  printf("%s angle_raw: %.2f, angle_sw: %.2f, setpoint: %.2f, zero_sw: %.2f, _outputSum: %.2f, output: %.2f\r\n", 
 80011a8:	e9d6 ab00 	ldrd	sl, fp, [r6]
 80011ac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80011b0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80011b4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80011b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80011bc:	e9cd 2300 	strd	r2, r3, [sp]
 80011c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011c4:	68f9      	ldr	r1, [r7, #12]
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <_Z12print_CYTRONPc+0x94>)
 80011c8:	f7ff ff94 	bl	80010f4 <printf>
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011d6:	bf00      	nop
 80011d8:	20000278 	.word	0x20000278
 80011dc:	20000230 	.word	0x20000230
 80011e0:	20000238 	.word	0x20000238
 80011e4:	0800a218 	.word	0x0800a218

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ee:	f001 fe7d 	bl	8002eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f2:	f000 f8ff 	bl	80013f4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f7ff fe59 	bl	8000eac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011fa:	f000 fe5f 	bl	8001ebc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80011fe:	f000 f9f7 	bl	80015f0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001202:	f000 fa33 	bl	800166c <MX_SPI2_Init>
  MX_SPI3_Init();
 8001206:	f000 fa6f 	bl	80016e8 <MX_SPI3_Init>
  MX_TIM1_Init();
 800120a:	f000 fc83 	bl	8001b14 <MX_TIM1_Init>
  MX_TIM2_Init();
 800120e:	f000 fd2d 	bl	8001c6c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderData_1 = 99;
 8001212:	2363      	movs	r3, #99	; 0x63
 8001214:	82fb      	strh	r3, [r7, #22]
  uint16_t encoderData_2 = 99;
 8001216:	2363      	movs	r3, #99	; 0x63
 8001218:	82bb      	strh	r3, [r7, #20]
  uint16_t encoderData_3 = 99;
 800121a:	2363      	movs	r3, #99	; 0x63
 800121c:	827b      	strh	r3, [r7, #18]
  uint16_t encoder_max = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	823b      	strh	r3, [r7, #16]
  uint16_t encoder_min = 4100;
 8001222:	f241 0304 	movw	r3, #4100	; 0x1004
 8001226:	81fb      	strh	r3, [r7, #14]
  HAL_TIM_Base_Start(&htim1);
 8001228:	4863      	ldr	r0, [pc, #396]	; (80013b8 <main+0x1d0>)
 800122a:	f004 f805 	bl	8005238 <HAL_TIM_Base_Start>

  /*---AMT22 setup---*/
  // resetAMT22(&hspi1, GPIOC, GPIO_PIN_7, &htim1);

  /*---ESC setup---*/
  int32_t  CH2_ESC = 1500-1;
 800122e:	f240 53db 	movw	r3, #1499	; 0x5db
 8001232:	60bb      	str	r3, [r7, #8]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001234:	2104      	movs	r1, #4
 8001236:	4860      	ldr	r0, [pc, #384]	; (80013b8 <main+0x1d0>)
 8001238:	f004 f8ac 	bl	8005394 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 800123c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001240:	f001 fed0 	bl	8002fe4 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500-1);
 8001244:	4b5c      	ldr	r3, [pc, #368]	; (80013b8 <main+0x1d0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f240 52db 	movw	r2, #1499	; 0x5db
 800124c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(500);
 800124e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001252:	f001 fec7 	bl	8002fe4 <HAL_Delay>




  /*---CYTRON setup---*/
  int32_t  CH2_DC = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800125a:	2104      	movs	r1, #4
 800125c:	4857      	ldr	r0, [pc, #348]	; (80013bc <main+0x1d4>)
 800125e:	f004 f899 	bl	8005394 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001262:	4b56      	ldr	r3, [pc, #344]	; (80013bc <main+0x1d4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2200      	movs	r2, #0
 8001268:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(10);
 800126a:	200a      	movs	r0, #10
 800126c:	f001 feba 	bl	8002fe4 <HAL_Delay>
  Wrist_Roll.wrist_waist = 1;
 8001270:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <main+0x1d8>)
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
  Wrist_Roll.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
 8001278:	4b52      	ldr	r3, [pc, #328]	; (80013c4 <main+0x1dc>)
 800127a:	ed93 7b00 	vldr	d7, [r3]
 800127e:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <main+0x1e0>)
 8001280:	ed93 6b00 	vldr	d6, [r3]
 8001284:	4b51      	ldr	r3, [pc, #324]	; (80013cc <main+0x1e4>)
 8001286:	ed93 2b00 	vldr	d2, [r3]
 800128a:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <main+0x1e8>)
 800128c:	ed93 3b00 	vldr	d3, [r3]
 8001290:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <main+0x1ec>)
 8001292:	ed93 4b00 	vldr	d4, [r3]
 8001296:	4b50      	ldr	r3, [pc, #320]	; (80013d8 <main+0x1f0>)
 8001298:	ed93 5b00 	vldr	d5, [r3]
 800129c:	eeb0 1a46 	vmov.f32	s2, s12
 80012a0:	eef0 1a66 	vmov.f32	s3, s13
 80012a4:	eeb0 0a47 	vmov.f32	s0, s14
 80012a8:	eef0 0a67 	vmov.f32	s1, s15
 80012ac:	4844      	ldr	r0, [pc, #272]	; (80013c0 <main+0x1d8>)
 80012ae:	f000 ff77 	bl	80021a0 <_ZN13RoverArmMotor5beginEdddddd>
  Wrist_Roll.setAngleLimits(2, 120.0f); //for angle limits test
 80012b2:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80013a8 <main+0x1c0>
 80012b6:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 80013b0 <main+0x1c8>
 80012ba:	4841      	ldr	r0, [pc, #260]	; (80013c0 <main+0x1d8>)
 80012bc:	f001 f96f 	bl	800259e <_ZN13RoverArmMotor14setAngleLimitsEdd>
  Wrist_Roll.reset_encoder();
 80012c0:	483f      	ldr	r0, [pc, #252]	; (80013c0 <main+0x1d8>)
 80012c2:	f001 f990 	bl	80025e6 <_ZN13RoverArmMotor13reset_encoderEv>
  // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 70);
  // current_angle = Wrist_Roll.get_current_angle();
  // printf("current angle is %f\r\n, current_angle");
  // Wrist_Roll.newSetpoint(current_angle + 150);

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 30);
 80012c6:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <main+0x1d4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	221e      	movs	r2, #30
 80012cc:	639a      	str	r2, [r3, #56]	; 0x38
  while(!brakeSet){
 80012ce:	4b43      	ldr	r3, [pc, #268]	; (80013dc <main+0x1f4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d103      	bne.n	80012de <main+0xf6>
    print_CYTRON("BRAKE");
 80012d6:	4842      	ldr	r0, [pc, #264]	; (80013e0 <main+0x1f8>)
 80012d8:	f7ff ff3a 	bl	8001150 <_Z12print_CYTRONPc>
  while(!brakeSet){
 80012dc:	e7f7      	b.n	80012ce <main+0xe6>
    // printf("waiting for brake set\r\n");
  }
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80012de:	4b37      	ldr	r3, [pc, #220]	; (80013bc <main+0x1d4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2200      	movs	r2, #0
 80012e4:	639a      	str	r2, [r3, #56]	; 0x38
    // printf("current angle: %f, setpoint: %f, current_angle_sw: %f\r\n", current_angle, setpoint, current_angle_sw);


    /*--------------------------------------CYTRON angle limit test--------------------------------------*/
    // high first because we just set zero 
    Wrist_Roll.newSetpoint(Wrist_Roll.highestAngle);
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <main+0x1d8>)
 80012e8:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 80012ec:	eeb0 0a47 	vmov.f32	s0, s14
 80012f0:	eef0 0a67 	vmov.f32	s1, s15
 80012f4:	4832      	ldr	r0, [pc, #200]	; (80013c0 <main+0x1d8>)
 80012f6:	f001 f921 	bl	800253c <_ZN13RoverArmMotor11newSetpointEd>
    while(true) {
      if (!(current_angle_sw >= Wrist_Roll.highestAngle - 1.0)) {
 80012fa:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <main+0x1d8>)
 80012fc:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	; 0x108
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <main+0x1fc>)
 8001306:	f7fe ffbf 	bl	8000288 <__aeabi_dsub>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <main+0x200>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	2401      	movs	r4, #1
 800131a:	f7ff fbe9 	bl	8000af0 <__aeabi_dcmple>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <main+0x140>
 8001324:	2300      	movs	r3, #0
 8001326:	461c      	mov	r4, r3
 8001328:	b2e3      	uxtb	r3, r4
 800132a:	f083 0301 	eor.w	r3, r3, #1
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <main+0x15a>
        print_CYTRON("UP");
 8001334:	482d      	ldr	r0, [pc, #180]	; (80013ec <main+0x204>)
 8001336:	f7ff ff0b 	bl	8001150 <_Z12print_CYTRONPc>
        Wrist_Roll.tick();
 800133a:	4821      	ldr	r0, [pc, #132]	; (80013c0 <main+0x1d8>)
 800133c:	f000 ffc2 	bl	80022c4 <_ZN13RoverArmMotor4tickEv>
      if (!(current_angle_sw >= Wrist_Roll.highestAngle - 1.0)) {
 8001340:	e7db      	b.n	80012fa <main+0x112>
      }
      else {
        break;
 8001342:	bf00      	nop
      }
    }
    Wrist_Roll.newSetpoint(Wrist_Roll.lowestAngle);
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <main+0x1d8>)
 8001346:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800134a:	eeb0 0a47 	vmov.f32	s0, s14
 800134e:	eef0 0a67 	vmov.f32	s1, s15
 8001352:	481b      	ldr	r0, [pc, #108]	; (80013c0 <main+0x1d8>)
 8001354:	f001 f8f2 	bl	800253c <_ZN13RoverArmMotor11newSetpointEd>
    while(true) {
      if (!(current_angle_sw <= Wrist_Roll.lowestAngle + 1.0)) {
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <main+0x1d8>)
 800135a:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	; 0x100
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <main+0x1fc>)
 8001364:	f7fe ff92 	bl	800028c <__adddf3>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <main+0x200>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	2401      	movs	r4, #1
 8001378:	f7ff fbc4 	bl	8000b04 <__aeabi_dcmpge>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <main+0x19e>
 8001382:	2300      	movs	r3, #0
 8001384:	461c      	mov	r4, r3
 8001386:	b2e3      	uxtb	r3, r4
 8001388:	f083 0301 	eor.w	r3, r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <main+0x1b8>
        print_CYTRON("DOWN");
 8001392:	4817      	ldr	r0, [pc, #92]	; (80013f0 <main+0x208>)
 8001394:	f7ff fedc 	bl	8001150 <_Z12print_CYTRONPc>
        Wrist_Roll.tick();
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <main+0x1d8>)
 800139a:	f000 ff93 	bl	80022c4 <_ZN13RoverArmMotor4tickEv>
      if (!(current_angle_sw <= Wrist_Roll.lowestAngle + 1.0)) {
 800139e:	e7db      	b.n	8001358 <main+0x170>
      }
      else {
        break;
 80013a0:	bf00      	nop
    Wrist_Roll.newSetpoint(Wrist_Roll.highestAngle);
 80013a2:	e7a0      	b.n	80012e6 <main+0xfe>
 80013a4:	f3af 8000 	nop.w
 80013a8:	00000000 	.word	0x00000000
 80013ac:	405e0000 	.word	0x405e0000
 80013b0:	00000000 	.word	0x00000000
 80013b4:	40000000 	.word	0x40000000
 80013b8:	20000514 	.word	0x20000514
 80013bc:	20000560 	.word	0x20000560
 80013c0:	20000278 	.word	0x20000278
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000010 	.word	0x20000010
 80013d0:	20000018 	.word	0x20000018
 80013d4:	20000020 	.word	0x20000020
 80013d8:	20000028 	.word	0x20000028
 80013dc:	20000240 	.word	0x20000240
 80013e0:	0800a27c 	.word	0x0800a27c
 80013e4:	3ff00000 	.word	0x3ff00000
 80013e8:	20000238 	.word	0x20000238
 80013ec:	0800a284 	.word	0x0800a284
 80013f0:	0800a288 	.word	0x0800a288

080013f4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b096      	sub	sp, #88	; 0x58
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	2244      	movs	r2, #68	; 0x44
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f005 fd54 	bl	8006eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001416:	f44f 7000 	mov.w	r0, #512	; 0x200
 800141a:	f002 f8d1 	bl	80035c0 <HAL_PWREx_ControlVoltageScaling>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf14      	ite	ne
 8001424:	2301      	movne	r3, #1
 8001426:	2300      	moveq	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800142e:	f000 f86b 	bl	8001508 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001432:	2302      	movs	r3, #2
 8001434:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143c:	2310      	movs	r3, #16
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001440:	2302      	movs	r3, #2
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001444:	2302      	movs	r3, #2
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001448:	2301      	movs	r3, #1
 800144a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800144c:	230a      	movs	r3, #10
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001450:	2307      	movs	r3, #7
 8001452:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001454:	2302      	movs	r3, #2
 8001456:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001458:	2302      	movs	r3, #2
 800145a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4618      	mov	r0, r3
 8001462:	f002 f903 	bl	800366c <HAL_RCC_OscConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	bf14      	ite	ne
 800146c:	2301      	movne	r3, #1
 800146e:	2300      	moveq	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8001476:	f000 f847 	bl	8001508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147a:	230f      	movs	r3, #15
 800147c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147e:	2303      	movs	r3, #3
 8001480:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800148e:	463b      	mov	r3, r7
 8001490:	2104      	movs	r1, #4
 8001492:	4618      	mov	r0, r3
 8001494:	f002 fcfe 	bl	8003e94 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	bf14      	ite	ne
 800149e:	2301      	movne	r3, #1
 80014a0:	2300      	moveq	r3, #0
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 80014a8:	f000 f82e 	bl	8001508 <Error_Handler>
  }
}
 80014ac:	bf00      	nop
 80014ae:	3758      	adds	r7, #88	; 0x58
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
  // if(!brakeSet) {
    if(GPIO_Pin == B1_Pin) // INT Source is pin A9
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014c4:	d115      	bne.n	80014f2 <HAL_GPIO_EXTI_Callback+0x3e>
    {
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);  // set encoder stationary
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x44>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2200      	movs	r2, #0
 80014cc:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_Delay(100);  
 80014ce:	2064      	movs	r0, #100	; 0x64
 80014d0:	f001 fd88 	bl	8002fe4 <HAL_Delay>
      button_counter++;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_GPIO_EXTI_Callback+0x48>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_GPIO_EXTI_Callback+0x48>)
 80014dc:	6013      	str	r3, [r2, #0]
      Wrist_Roll.set_zero_angle_sw();
 80014de:	4808      	ldr	r0, [pc, #32]	; (8001500 <HAL_GPIO_EXTI_Callback+0x4c>)
 80014e0:	f001 f895 	bl	800260e <_ZN13RoverArmMotor17set_zero_angle_swEv>
      brakeSet = 1;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <HAL_GPIO_EXTI_Callback+0x50>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]
      HAL_Delay(100);
 80014ea:	2064      	movs	r0, #100	; 0x64
 80014ec:	f001 fd7a 	bl	8002fe4 <HAL_Delay>
      return;
 80014f0:	bf00      	nop
    }
  // }
}
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000560 	.word	0x20000560
 80014fc:	200003e0 	.word	0x200003e0
 8001500:	20000278 	.word	0x20000278
 8001504:	20000240 	.word	0x20000240

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>
 8001512:	0000      	movs	r0, r0
 8001514:	0000      	movs	r0, r0
	...

08001518 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b096      	sub	sp, #88	; 0x58
 800151c:	af10      	add	r7, sp, #64	; 0x40
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d13f      	bne.n	80015a8 <_Z41__static_initialization_and_destruction_0ii+0x90>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800152e:	4293      	cmp	r3, r2
 8001530:	d13a      	bne.n	80015a8 <_Z41__static_initialization_and_destruction_0ii+0x90>
Pin CYTRON_DIR_1(CYTRON_DIR_1_GPIO_Port, CYTRON_DIR_1_Pin);
 8001532:	2220      	movs	r2, #32
 8001534:	4922      	ldr	r1, [pc, #136]	; (80015c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001536:	4823      	ldr	r0, [pc, #140]	; (80015c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001538:	f7ff fd88 	bl	800104c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin, &htim2, TIM_CHANNEL_2);
 800153c:	2304      	movs	r3, #4
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001542:	2208      	movs	r2, #8
 8001544:	491e      	ldr	r1, [pc, #120]	; (80015c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001546:	4821      	ldr	r0, [pc, #132]	; (80015cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001548:	f7ff fd9d 	bl	8001086 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>
Pin AMT22_1(GPIOC, GPIO_PIN_7);
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	4920      	ldr	r1, [pc, #128]	; (80015d0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001550:	4820      	ldr	r0, [pc, #128]	; (80015d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001552:	f7ff fd7b 	bl	800104c <_ZN3PinC1EP12GPIO_TypeDeft>
RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fd5c 	bl	8001018 <_ZN3PinC1Ev>
 8001560:	4c1a      	ldr	r4, [pc, #104]	; (80015cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001562:	ad0b      	add	r5, sp, #44	; 0x2c
 8001564:	f107 0308 	add.w	r3, r7, #8
 8001568:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800156a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800156e:	2300      	movs	r3, #0
 8001570:	930a      	str	r3, [sp, #40]	; 0x28
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001574:	ad06      	add	r5, sp, #24
 8001576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001578:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800157e:	ad02      	add	r5, sp, #8
 8001580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001582:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001586:	466a      	mov	r2, sp
 8001588:	f104 0308 	add.w	r3, r4, #8
 800158c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001590:	e882 0003 	stmia.w	r2, {r0, r1}
 8001594:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001598:	ed9f 1b05 	vldr	d1, [pc, #20]	; 80015b0 <_Z41__static_initialization_and_destruction_0ii+0x98>
 800159c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 80015b8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80015a0:	490d      	ldr	r1, [pc, #52]	; (80015d8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80015a2:	480e      	ldr	r0, [pc, #56]	; (80015dc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80015a4:	f000 fd55 	bl	8002052 <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>
}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bdb0      	pop	{r4, r5, r7, pc}
 80015b0:	00000000 	.word	0x00000000
 80015b4:	40767000 	.word	0x40767000
	...
 80015c0:	48000400 	.word	0x48000400
 80015c4:	20000244 	.word	0x20000244
 80015c8:	20000560 	.word	0x20000560
 80015cc:	20000254 	.word	0x20000254
 80015d0:	48000800 	.word	0x48000800
 80015d4:	20000264 	.word	0x20000264
 80015d8:	200003e4 	.word	0x200003e4
 80015dc:	20000278 	.word	0x20000278

080015e0 <_GLOBAL__sub_I_aggKp>:
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015e8:	2001      	movs	r0, #1
 80015ea:	f7ff ff95 	bl	8001518 <_Z41__static_initialization_and_destruction_0ii>
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <MX_SPI1_Init+0x74>)
 80015f6:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <MX_SPI1_Init+0x78>)
 80015f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_SPI1_Init+0x74>)
 80015fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001600:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_SPI1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_SPI1_Init+0x74>)
 800160a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800160e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_SPI1_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_SPI1_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_SPI1_Init+0x74>)
 800161e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001622:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_SPI1_Init+0x74>)
 8001626:	2228      	movs	r2, #40	; 0x28
 8001628:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_SPI1_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_SPI1_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_SPI1_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_SPI1_Init+0x74>)
 800163e:	2207      	movs	r2, #7
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_SPI1_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_SPI1_Init+0x74>)
 800164a:	2208      	movs	r2, #8
 800164c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_SPI1_Init+0x74>)
 8001650:	f003 f980 	bl	8004954 <HAL_SPI_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800165a:	f7ff ff55 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200003e4 	.word	0x200003e4
 8001668:	40013000 	.word	0x40013000

0800166c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <MX_SPI2_Init+0x74>)
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <MX_SPI2_Init+0x78>)
 8001674:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_SPI2_Init+0x74>)
 8001678:	f44f 7282 	mov.w	r2, #260	; 0x104
 800167c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_SPI2_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_SPI2_Init+0x74>)
 8001686:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800168a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_SPI2_Init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <MX_SPI2_Init+0x74>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_SPI2_Init+0x74>)
 800169a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_SPI2_Init+0x74>)
 80016a2:	2220      	movs	r2, #32
 80016a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_SPI2_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_SPI2_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <MX_SPI2_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_SPI2_Init+0x74>)
 80016ba:	2207      	movs	r2, #7
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <MX_SPI2_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_SPI2_Init+0x74>)
 80016c6:	2208      	movs	r2, #8
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_SPI2_Init+0x74>)
 80016cc:	f003 f942 	bl	8004954 <HAL_SPI_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80016d6:	f7ff ff17 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000448 	.word	0x20000448
 80016e4:	40003800 	.word	0x40003800

080016e8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MX_SPI3_Init+0x74>)
 80016ee:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <MX_SPI3_Init+0x78>)
 80016f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_SPI3_Init+0x74>)
 80016f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_SPI3_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_SPI3_Init+0x74>)
 8001702:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001706:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_SPI3_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <MX_SPI3_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_SPI3_Init+0x74>)
 8001716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800171a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_SPI3_Init+0x74>)
 800171e:	2220      	movs	r2, #32
 8001720:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_SPI3_Init+0x74>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_SPI3_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_SPI3_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_SPI3_Init+0x74>)
 8001736:	2207      	movs	r2, #7
 8001738:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_SPI3_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_SPI3_Init+0x74>)
 8001742:	2208      	movs	r2, #8
 8001744:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_SPI3_Init+0x74>)
 8001748:	f003 f904 	bl	8004954 <HAL_SPI_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001752:	f7ff fed9 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200004ac 	.word	0x200004ac
 8001760:	40003c00 	.word	0x40003c00

08001764 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08e      	sub	sp, #56	; 0x38
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a47      	ldr	r2, [pc, #284]	; (80018a0 <HAL_SPI_MspInit+0x13c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d12a      	bne.n	80017dc <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178a:	4a46      	ldr	r2, [pc, #280]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 800178c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001790:	6613      	str	r3, [r2, #96]	; 0x60
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179a:	623b      	str	r3, [r7, #32]
 800179c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	4a40      	ldr	r2, [pc, #256]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017aa:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80017b6:	f641 0302 	movw	r3, #6146	; 0x1802
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017c8:	2305      	movs	r3, #5
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d6:	f001 fd3b 	bl	8003250 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80017da:	e05c      	b.n	8001896 <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a31      	ldr	r2, [pc, #196]	; (80018a8 <HAL_SPI_MspInit+0x144>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d129      	bne.n	800183a <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017e6:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	4a2e      	ldr	r2, [pc, #184]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f0:	6593      	str	r3, [r2, #88]	; 0x58
 80017f2:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a28      	ldr	r2, [pc, #160]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001816:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001828:	2305      	movs	r3, #5
 800182a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001830:	4619      	mov	r1, r3
 8001832:	481e      	ldr	r0, [pc, #120]	; (80018ac <HAL_SPI_MspInit+0x148>)
 8001834:	f001 fd0c 	bl	8003250 <HAL_GPIO_Init>
}
 8001838:	e02d      	b.n	8001896 <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI3)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <HAL_SPI_MspInit+0x14c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d128      	bne.n	8001896 <HAL_SPI_MspInit+0x132>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 800184a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800184e:	6593      	str	r3, [r2, #88]	; 0x58
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	4a10      	ldr	r2, [pc, #64]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_SPI_MspInit+0x140>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001874:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001886:	2306      	movs	r3, #6
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188e:	4619      	mov	r1, r3
 8001890:	4808      	ldr	r0, [pc, #32]	; (80018b4 <HAL_SPI_MspInit+0x150>)
 8001892:	f001 fcdd 	bl	8003250 <HAL_GPIO_Init>
}
 8001896:	bf00      	nop
 8001898:	3738      	adds	r7, #56	; 0x38
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40013000 	.word	0x40013000
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40003800 	.word	0x40003800
 80018ac:	48000400 	.word	0x48000400
 80018b0:	40003c00 	.word	0x40003c00
 80018b4:	48000800 	.word	0x48000800

080018b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_MspInit+0x44>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <HAL_MspInit+0x44>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6613      	str	r3, [r2, #96]	; 0x60
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_MspInit+0x44>)
 80018cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_MspInit+0x44>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <HAL_MspInit+0x44>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	6593      	str	r3, [r2, #88]	; 0x58
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_MspInit+0x44>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <NMI_Handler+0x4>

08001906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler+0x4>

08001912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>

0800191e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194c:	f001 fb2a 	bl	8002fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001958:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800195c:	f001 fe0a 	bl	8003574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return 1;
 8001968:	2301      	movs	r3, #1
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_kill>:

int _kill(int pid, int sig)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800197e:	f005 fa65 	bl	8006e4c <__errno>
 8001982:	4603      	mov	r3, r0
 8001984:	2216      	movs	r2, #22
 8001986:	601a      	str	r2, [r3, #0]
  return -1;
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_exit>:

void _exit (int status)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ffe7 	bl	8001974 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019a6:	e7fe      	b.n	80019a6 <_exit+0x12>

080019a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	e00a      	b.n	80019d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ba:	f3af 8000 	nop.w
 80019be:	4601      	mov	r1, r0
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	60ba      	str	r2, [r7, #8]
 80019c6:	b2ca      	uxtb	r2, r1
 80019c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dbf0      	blt.n	80019ba <_read+0x12>
  }

  return len;
 80019d8:	687b      	ldr	r3, [r7, #4]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e009      	b.n	8001a08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	60ba      	str	r2, [r7, #8]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	dbf1      	blt.n	80019f4 <_write+0x12>
  }
  return len;
 8001a10:	687b      	ldr	r3, [r7, #4]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_close>:

int _close(int file)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a42:	605a      	str	r2, [r3, #4]
  return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_isatty>:

int _isatty(int file)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <_sbrk+0x5c>)
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <_sbrk+0x60>)
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <_sbrk+0x64>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <_sbrk+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d207      	bcs.n	8001ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab4:	f005 f9ca 	bl	8006e4c <__errno>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	e009      	b.n	8001ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <_sbrk+0x64>)
 8001ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20010000 	.word	0x20010000
 8001ae4:	00000400 	.word	0x00000400
 8001ae8:	20000510 	.word	0x20000510
 8001aec:	20000648 	.word	0x20000648

08001af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <SystemInit+0x20>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <SystemInit+0x20>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b09a      	sub	sp, #104	; 0x68
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	615a      	str	r2, [r3, #20]
 8001b46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	222c      	movs	r2, #44	; 0x2c
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f005 f9ae 	bl	8006eb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b54:	4b43      	ldr	r3, [pc, #268]	; (8001c64 <MX_TIM1_Init+0x150>)
 8001b56:	4a44      	ldr	r2, [pc, #272]	; (8001c68 <MX_TIM1_Init+0x154>)
 8001b58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001b5a:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <MX_TIM1_Init+0x150>)
 8001b5c:	224f      	movs	r2, #79	; 0x4f
 8001b5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b60:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <MX_TIM1_Init+0x150>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500-1;
 8001b66:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <MX_TIM1_Init+0x150>)
 8001b68:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001b6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <MX_TIM1_Init+0x150>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b74:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <MX_TIM1_Init+0x150>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <MX_TIM1_Init+0x150>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b80:	4838      	ldr	r0, [pc, #224]	; (8001c64 <MX_TIM1_Init+0x150>)
 8001b82:	f003 fb01 	bl	8005188 <HAL_TIM_Base_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001b8c:	f7ff fcbc 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b94:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4831      	ldr	r0, [pc, #196]	; (8001c64 <MX_TIM1_Init+0x150>)
 8001b9e:	f003 fdeb 	bl	8005778 <HAL_TIM_ConfigClockSource>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ba8:	f7ff fcae 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bac:	482d      	ldr	r0, [pc, #180]	; (8001c64 <MX_TIM1_Init+0x150>)
 8001bae:	f003 fb8f 	bl	80052d0 <HAL_TIM_PWM_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001bb8:	f7ff fca6 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4825      	ldr	r0, [pc, #148]	; (8001c64 <MX_TIM1_Init+0x150>)
 8001bd0:	f004 fa3e 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001bda:	f7ff fc95 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bde:	2360      	movs	r3, #96	; 0x60
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be6:	2300      	movs	r3, #0
 8001be8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bea:	2300      	movs	r3, #0
 8001bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bfe:	2204      	movs	r2, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4818      	ldr	r0, [pc, #96]	; (8001c64 <MX_TIM1_Init+0x150>)
 8001c04:	f003 fca4 	bl	8005550 <HAL_TIM_PWM_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001c0e:	f7ff fc7b 	bl	8001508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	4619      	mov	r1, r3
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <MX_TIM1_Init+0x150>)
 8001c48:	f004 fa68 	bl	800611c <HAL_TIMEx_ConfigBreakDeadTime>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001c52:	f7ff fc59 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c56:	4803      	ldr	r0, [pc, #12]	; (8001c64 <MX_TIM1_Init+0x150>)
 8001c58:	f000 f8d4 	bl	8001e04 <HAL_TIM_MspPostInit>

}
 8001c5c:	bf00      	nop
 8001c5e:	3768      	adds	r7, #104	; 0x68
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000514 	.word	0x20000514
 8001c68:	40012c00 	.word	0x40012c00

08001c6c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08e      	sub	sp, #56	; 0x38
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	611a      	str	r2, [r3, #16]
 8001c9a:	615a      	str	r2, [r3, #20]
 8001c9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <MX_TIM2_Init+0xe8>)
 8001ca0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ca4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <MX_TIM2_Init+0xe8>)
 8001ca8:	224f      	movs	r2, #79	; 0x4f
 8001caa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cac:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <MX_TIM2_Init+0xe8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001cb2:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <MX_TIM2_Init+0xe8>)
 8001cb4:	2263      	movs	r2, #99	; 0x63
 8001cb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb8:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <MX_TIM2_Init+0xe8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cbe:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <MX_TIM2_Init+0xe8>)
 8001cc0:	2280      	movs	r2, #128	; 0x80
 8001cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cc4:	4823      	ldr	r0, [pc, #140]	; (8001d54 <MX_TIM2_Init+0xe8>)
 8001cc6:	f003 fa5f 	bl	8005188 <HAL_TIM_Base_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001cd0:	f7ff fc1a 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cde:	4619      	mov	r1, r3
 8001ce0:	481c      	ldr	r0, [pc, #112]	; (8001d54 <MX_TIM2_Init+0xe8>)
 8001ce2:	f003 fd49 	bl	8005778 <HAL_TIM_ConfigClockSource>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001cec:	f7ff fc0c 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cf0:	4818      	ldr	r0, [pc, #96]	; (8001d54 <MX_TIM2_Init+0xe8>)
 8001cf2:	f003 faed 	bl	80052d0 <HAL_TIM_PWM_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001cfc:	f7ff fc04 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4811      	ldr	r0, [pc, #68]	; (8001d54 <MX_TIM2_Init+0xe8>)
 8001d10:	f004 f99e 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d1a:	f7ff fbf5 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d1e:	2360      	movs	r3, #96	; 0x60
 8001d20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2204      	movs	r2, #4
 8001d32:	4619      	mov	r1, r3
 8001d34:	4807      	ldr	r0, [pc, #28]	; (8001d54 <MX_TIM2_Init+0xe8>)
 8001d36:	f003 fc0b 	bl	8005550 <HAL_TIM_PWM_ConfigChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001d40:	f7ff fbe2 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d44:	4803      	ldr	r0, [pc, #12]	; (8001d54 <MX_TIM2_Init+0xe8>)
 8001d46:	f000 f85d 	bl	8001e04 <HAL_TIM_MspPostInit>

}
 8001d4a:	bf00      	nop
 8001d4c:	3738      	adds	r7, #56	; 0x38
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000560 	.word	0x20000560

08001d58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a20      	ldr	r2, [pc, #128]	; (8001df8 <HAL_TIM_Base_MspInit+0xa0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10c      	bne.n	8001d94 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_TIM_Base_MspInit+0xa4>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	4a1f      	ldr	r2, [pc, #124]	; (8001dfc <HAL_TIM_Base_MspInit+0xa4>)
 8001d80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d84:	6613      	str	r3, [r2, #96]	; 0x60
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_TIM_Base_MspInit+0xa4>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d92:	e02d      	b.n	8001df0 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9c:	d128      	bne.n	8001df0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_TIM_Base_MspInit+0xa4>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	4a16      	ldr	r2, [pc, #88]	; (8001dfc <HAL_TIM_Base_MspInit+0xa4>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6593      	str	r3, [r2, #88]	; 0x58
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_TIM_Base_MspInit+0xa4>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_TIM_Base_MspInit+0xa4>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_TIM_Base_MspInit+0xa4>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_TIM_Base_MspInit+0xa4>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001de0:	2301      	movs	r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <HAL_TIM_Base_MspInit+0xa8>)
 8001dec:	f001 fa30 	bl	8003250 <HAL_GPIO_Init>
}
 8001df0:	bf00      	nop
 8001df2:	3728      	adds	r7, #40	; 0x28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40012c00 	.word	0x40012c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48000400 	.word	0x48000400

08001e04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <HAL_TIM_MspPostInit+0xac>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d11e      	bne.n	8001e64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <HAL_TIM_MspPostInit+0xb0>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	4a22      	ldr	r2, [pc, #136]	; (8001eb4 <HAL_TIM_MspPostInit+0xb0>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_TIM_MspPostInit+0xb0>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 8001e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e50:	2301      	movs	r3, #1
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5e:	f001 f9f7 	bl	8003250 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e62:	e020      	b.n	8001ea6 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6c:	d11b      	bne.n	8001ea6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_TIM_MspPostInit+0xb0>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <HAL_TIM_MspPostInit+0xb0>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_TIM_MspPostInit+0xb0>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 8001e86:	2308      	movs	r3, #8
 8001e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e96:	2301      	movs	r3, #1
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <HAL_TIM_MspPostInit+0xb4>)
 8001ea2:	f001 f9d5 	bl	8003250 <HAL_GPIO_Init>
}
 8001ea6:	bf00      	nop
 8001ea8:	3728      	adds	r7, #40	; 0x28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40012c00 	.word	0x40012c00
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	48000400 	.word	0x48000400

08001ebc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <MX_USART2_UART_Init+0x58>)
 8001ec2:	4a15      	ldr	r2, [pc, #84]	; (8001f18 <MX_USART2_UART_Init+0x5c>)
 8001ec4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <MX_USART2_UART_Init+0x58>)
 8001ec8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ecc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <MX_USART2_UART_Init+0x58>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <MX_USART2_UART_Init+0x58>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <MX_USART2_UART_Init+0x58>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <MX_USART2_UART_Init+0x58>)
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <MX_USART2_UART_Init+0x58>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <MX_USART2_UART_Init+0x58>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <MX_USART2_UART_Init+0x58>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <MX_USART2_UART_Init+0x58>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_USART2_UART_Init+0x58>)
 8001f00:	f004 f984 	bl	800620c <HAL_UART_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f0a:	f7ff fafd 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200005ac 	.word	0x200005ac
 8001f18:	40004400 	.word	0x40004400

08001f1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b0a2      	sub	sp, #136	; 0x88
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2260      	movs	r2, #96	; 0x60
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f004 ffb7 	bl	8006eb0 <memset>
  if(uartHandle->Instance==USART2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a20      	ldr	r2, [pc, #128]	; (8001fc8 <HAL_UART_MspInit+0xac>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d138      	bne.n	8001fbe <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 f9bf 	bl	80042dc <HAL_RCCEx_PeriphCLKConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f64:	f7ff fad0 	bl	8001508 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_UART_MspInit+0xb0>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_UART_MspInit+0xb0>)
 8001f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f72:	6593      	str	r3, [r2, #88]	; 0x58
 8001f74:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_UART_MspInit+0xb0>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_UART_MspInit+0xb0>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <HAL_UART_MspInit+0xb0>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_UART_MspInit+0xb0>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f98:	230c      	movs	r3, #12
 8001f9a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001faa:	2307      	movs	r3, #7
 8001fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fba:	f001 f949 	bl	8003250 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3788      	adds	r7, #136	; 0x88
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40004400 	.word	0x40004400
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002008 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fd4:	f7ff fd8c 	bl	8001af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd8:	480c      	ldr	r0, [pc, #48]	; (800200c <LoopForever+0x6>)
  ldr r1, =_edata
 8001fda:	490d      	ldr	r1, [pc, #52]	; (8002010 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <LoopForever+0xe>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe0:	e002      	b.n	8001fe8 <LoopCopyDataInit>

08001fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe6:	3304      	adds	r3, #4

08001fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fec:	d3f9      	bcc.n	8001fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ff0:	4c0a      	ldr	r4, [pc, #40]	; (800201c <LoopForever+0x16>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff4:	e001      	b.n	8001ffa <LoopFillZerobss>

08001ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff8:	3204      	adds	r2, #4

08001ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ffc:	d3fb      	bcc.n	8001ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ffe:	f004 ff2b 	bl	8006e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002002:	f7ff f8f1 	bl	80011e8 <main>

08002006 <LoopForever>:

LoopForever:
    b LoopForever
 8002006:	e7fe      	b.n	8002006 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002008:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002010:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002014:	0800ad60 	.word	0x0800ad60
  ldr r2, =_sbss
 8002018:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800201c:	20000648 	.word	0x20000648

08002020 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <ADC1_IRQHandler>

08002022 <_ZN9movingAvgC1Ei>:
#define MOVINGAVG_H_INCLUDED

class movingAvg
{
    public:
        movingAvg(int interval)
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
            : m_interval{interval}, m_nbrReadings{0}, m_sum{0}, m_next{0} {}
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	60da      	str	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>:

// TODO: Test this class with the old code, remember to create backup beforehand!
// I'm very suspicious of the way I handled user defined pointers...

// The motor will not move until begin() is called!
RoverArmMotor::RoverArmMotor(SPI_HandleTypeDef* spi_handle, Pin pwm_pin, Pin dir_pin, Pin encoder_pin, int esc_type, double minimum_angle, double maximum_angle, Pin brake_pin)
 8002052:	b082      	sub	sp, #8
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af02      	add	r7, sp, #8
 800205a:	6178      	str	r0, [r7, #20]
 800205c:	6139      	str	r1, [r7, #16]
 800205e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002062:	e881 000c 	stmia.w	r1, {r2, r3}
 8002066:	ed87 0b02 	vstr	d0, [r7, #8]
 800206a:	ed87 1b00 	vstr	d1, [r7]
                :internalPIDInstance(&input, &output, &setpoint, regularKp, regularKi, regularKd, _PID_CD_DIRECT)
                ,internalAveragerInstance(15){
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8002094:	2300      	movs	r3, #0
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	eeb0 2a45 	vmov.f32	s4, s10
 800209c:	eef0 2a65 	vmov.f32	s5, s11
 80020a0:	eeb0 1a46 	vmov.f32	s2, s12
 80020a4:	eef0 1a66 	vmov.f32	s3, s13
 80020a8:	eeb0 0a47 	vmov.f32	s0, s14
 80020ac:	eef0 0a67 	vmov.f32	s1, s15
 80020b0:	4623      	mov	r3, r4
 80020b2:	f000 fc25 	bl	8002900 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3370      	adds	r3, #112	; 0x70
 80020ba:	210f      	movs	r1, #15
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ffb0 	bl	8002022 <_ZN9movingAvgC1Ei>
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	33b8      	adds	r3, #184	; 0xb8
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe ffa6 	bl	8001018 <_ZN3PinC1Ev>
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	33c8      	adds	r3, #200	; 0xc8
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe ffa1 	bl	8001018 <_ZN3PinC1Ev>
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	33d8      	adds	r3, #216	; 0xd8
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe ff9c 	bl	8001018 <_ZN3PinC1Ev>
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	33e8      	adds	r3, #232	; 0xe8
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe ff97 	bl	8001018 <_ZN3PinC1Ev>

    //constructor
    spi = spi_handle;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    pwm = pwm_pin;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80020f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    dir = dir_pin;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8002108:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800210c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800210e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    encoder = encoder_pin;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8002118:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800211c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800211e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    brake = brake_pin;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8002128:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800212c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800212e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    escType = esc_type;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002136:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    lowestAngle = minimum_angle;
 800213a:	6979      	ldr	r1, [r7, #20]
 800213c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002140:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = maximum_angle;
 8002144:	6979      	ldr	r1, [r7, #20]
 8002146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800214a:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108

    //clean up variables
    input = 0;
 800214e:	6979      	ldr	r1, [r7, #20]
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
    output = 0;
 800215c:	6979      	ldr	r1, [r7, #20]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
    lastAngle = 0;
 800216a:	6979      	ldr	r1, [r7, #20]
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    sw_angle = 1;  //use software angle
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2201      	movs	r2, #1
 800217c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    zero_angle_sw = 0;  //mn297
 8002180:	6979      	ldr	r1, [r7, #20]
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
    
}
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	4618      	mov	r0, r3
 8002192:	371c      	adds	r7, #28
 8002194:	46bd      	mov	sp, r7
 8002196:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800219a:	b002      	add	sp, #8
 800219c:	4770      	bx	lr
	...

080021a0 <_ZN13RoverArmMotor5beginEdddddd>:

void RoverArmMotor::begin(double aggP, double aggI, double aggD, double regP, double regI, double regD){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	; 0x38
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6378      	str	r0, [r7, #52]	; 0x34
 80021a8:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80021ac:	ed87 1b08 	vstr	d1, [r7, #32]
 80021b0:	ed87 2b06 	vstr	d2, [r7, #24]
 80021b4:	ed87 3b04 	vstr	d3, [r7, #16]
 80021b8:	ed87 4b02 	vstr	d4, [r7, #8]
 80021bc:	ed87 5b00 	vstr	d5, [r7]
    /*------------------Initialize pins------------------*/ 
    // Initialize given pins
    // pinMode(encoder, INPUT); // not needed since we use HAL library
    // pinMode(pwm, OUTPUT);

    if(escType == CYTRON){
 80021c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d107      	bne.n	80021da <_ZN13RoverArmMotor5beginEdddddd+0x3a>
        // pinMode(dir, OUTPUT); // not needed since we use HAL library

        // Allow negative outputs, the sign will be interpreted as
        // the direction pin
        internalPIDInstance.SetOutputLimits(5, 99); // PWM duty cycle mn297 TOOD: check this
 80021ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021cc:	ed9f 1b38 	vldr	d1, [pc, #224]	; 80022b0 <_ZN13RoverArmMotor5beginEdddddd+0x110>
 80021d0:	ed9f 0b39 	vldr	d0, [pc, #228]	; 80022b8 <_ZN13RoverArmMotor5beginEdddddd+0x118>
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fd18 	bl	8002c0a <_ZN3PID15SetOutputLimitsEdd>
    //     // internalServoInstance.attach(pwm);
    //     internalServoInstance.attach(pwm, 1100, 1900, 1500); // mn297
    // }
    
    /*------------------Initialize moving average------------------*/
    internalAveragerInstance.begin();
 80021da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021dc:	3370      	adds	r3, #112	; 0x70
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fb29 	bl	8002836 <_ZN9movingAvg5beginEv>

    /*------------------Initialize PID------------------*/
    internalPIDInstance.Init();
 80021e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fbad 	bl	8002946 <_ZN3PID4InitEv>
    internalPIDInstance.SetMode(_PID_MODE_AUTOMATIC);
 80021ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ee:	2101      	movs	r1, #1
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fcec 	bl	8002bce <_ZN3PID7SetModeE15PIDMode_TypeDef>
    /*------------------Get setpoint------------------*/
    // Get current location and set it as setpoint. Essential to prevent jerkiness
    // as the microcontroller initializes.
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    //after setup, currentAngle is same as setpoint
    currentAngle = get_current_angle();    // fix setpoint not equal to current angle
 80021f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021f8:	f000 fa32 	bl	8002660 <_ZN13RoverArmMotor17get_current_angleEv>
 80021fc:	eeb0 7a40 	vmov.f32	s14, s0
 8002200:	eef0 7a60 	vmov.f32	s15, s1
 8002204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002206:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    setpoint = currentAngle;
 800220a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220c:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8002210:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002212:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140



    /*------------------Set PID parameters------------------*/
    regularKp = regP;
 8002216:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002218:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800221c:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    regularKi = regI;
 8002220:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002226:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    regularKd = regD;
 800222a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800222c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002230:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    aggressiveKp = aggP;
 8002234:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800223a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    aggressiveKi = aggI;
 800223e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002240:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002244:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    aggressiveKd = aggD;
 8002248:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800224a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800224e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

    internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 8002252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002256:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225c:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002262:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8002266:	eeb0 2a45 	vmov.f32	s4, s10
 800226a:	eef0 2a65 	vmov.f32	s5, s11
 800226e:	eeb0 1a46 	vmov.f32	s2, s12
 8002272:	eef0 1a66 	vmov.f32	s3, s13
 8002276:	eeb0 0a47 	vmov.f32	s0, s14
 800227a:	eef0 0a67 	vmov.f32	s1, s15
 800227e:	4610      	mov	r0, r2
 8002280:	f000 fd31 	bl	8002ce6 <_ZN3PID10SetTuningsEddd>
    // if(brake)  engageBrake(); //use brake if there is one
    if (brake.valid != 0)  engageBrake(); //use brake if there is one
 8002284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002286:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <_ZN13RoverArmMotor5beginEdddddd+0xf4>
 800228e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002290:	f000 f9cf 	bl	8002632 <_ZN13RoverArmMotor11engageBrakeEv>

    //initialize the multiplier bool to false and the multiplier to 1. 
    wrist_waist = false; 
 8002294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    //multiplier = 1;
    gearRatio = 1;  //TODO check if this is correct
 800229c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <_ZN13RoverArmMotor5beginEdddddd+0x120>)
 80022a4:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150

}
 80022a8:	bf00      	nop
 80022aa:	3738      	adds	r7, #56	; 0x38
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	00000000 	.word	0x00000000
 80022b4:	4058c000 	.word	0x4058c000
 80022b8:	00000000 	.word	0x00000000
 80022bc:	40140000 	.word	0x40140000
 80022c0:	3ff00000 	.word	0x3ff00000

080022c4 <_ZN13RoverArmMotor4tickEv>:

int positive_rezeros = 0;
double real_angle = 0;

// Needs to be called in each loop
void RoverArmMotor::tick(){ // worry about currentAngle and setpoint
 80022c4:	b5b0      	push	{r4, r5, r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

    /*------------------Get current angle------------------*/
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    if (sw_angle) {
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <_ZN13RoverArmMotor4tickEv+0x28>
        currentAngle = get_current_angle_sw(); 
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fa08 	bl	80026ec <_ZN13RoverArmMotor20get_current_angle_swEv>
 80022dc:	eeb0 7a40 	vmov.f32	s14, s0
 80022e0:	eef0 7a60 	vmov.f32	s15, s1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
 80022ea:	e009      	b.n	8002300 <_ZN13RoverArmMotor4tickEv+0x3c>
    }   else {
        currentAngle = get_current_angle(); 
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f9b7 	bl	8002660 <_ZN13RoverArmMotor17get_current_angleEv>
 80022f2:	eeb0 7a40 	vmov.f32	s14, s0
 80022f6:	eef0 7a60 	vmov.f32	s15, s1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    }

      // Measurement deadband - ignore sub-degree noise
    if(abs(currentAngle - lastAngle) < 1.0){
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 800230c:	f7fd ffbc 	bl	8000288 <__aeabi_dsub>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	f7fe fc1e 	bl	8000b58 <__aeabi_d2iz>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	bfb8      	it	lt
 8002322:	425b      	neglt	r3, r3
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f8fd 	bl	8000524 <__aeabi_i2d>
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	4b80      	ldr	r3, [pc, #512]	; (8002530 <_ZN13RoverArmMotor4tickEv+0x26c>)
 8002330:	f7fe fbd4 	bl	8000adc <__aeabi_dcmplt>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <_ZN13RoverArmMotor4tickEv+0x82>
        currentAngle = lastAngle;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
    }
    input = currentAngle; // range [0,359]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
   //------------------Compute PID------------------//
    // Compute distance, retune PID if necessary. Less aggressive tuning params for small errors
    // Find the shortest from the current position to the set point
    double gap; //mn297 could be negative

    if(wrist_waist){
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8002358:	2b00      	cmp	r3, #0
 800235a:	d052      	beq.n	8002402 <_ZN13RoverArmMotor4tickEv+0x13e>
        // if(abs(setpoint-input) < abs((setpoint + 360.0f)-input)) { 
        //     gap = setpoint - input; 
        // } else {
        //     gap = (setpoint + 360.0f) - input; 
        // }
        if(abs(setpoint-input) > abs((setpoint + 360.0f)-input)) { 
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8002368:	f7fd ff8e 	bl	8000288 <__aeabi_dsub>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	f7fe fbf0 	bl	8000b58 <__aeabi_d2iz>
 8002378:	4603      	mov	r3, r0
 800237a:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800237e:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	4b69      	ldr	r3, [pc, #420]	; (8002534 <_ZN13RoverArmMotor4tickEv+0x270>)
 800238e:	f7fd ff7d 	bl	800028c <__adddf3>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80023a0:	f7fd ff72 	bl	8000288 <__aeabi_dsub>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7fe fbd4 	bl	8000b58 <__aeabi_d2iz>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	bfb8      	it	lt
 80023b6:	425b      	neglt	r3, r3
 80023b8:	429c      	cmp	r4, r3
 80023ba:	dd15      	ble.n	80023e8 <_ZN13RoverArmMotor4tickEv+0x124>
            gap = input - (setpoint + 360.0f); 
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	e9d3 454c 	ldrd	r4, r5, [r3, #304]	; 0x130
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	4b59      	ldr	r3, [pc, #356]	; (8002534 <_ZN13RoverArmMotor4tickEv+0x270>)
 80023ce:	f7fd ff5d 	bl	800028c <__adddf3>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4620      	mov	r0, r4
 80023d8:	4629      	mov	r1, r5
 80023da:	f7fd ff55 	bl	8000288 <__aeabi_dsub>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80023e6:	e018      	b.n	800241a <_ZN13RoverArmMotor4tickEv+0x156>
        } else {
            gap = setpoint - input; 
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80023f4:	f7fd ff48 	bl	8000288 <__aeabi_dsub>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002400:	e00b      	b.n	800241a <_ZN13RoverArmMotor4tickEv+0x156>
        }
        
    }
    else{
        gap = setpoint - input;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800240e:	f7fd ff3b 	bl	8000288 <__aeabi_dsub>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	e9c7 2304 	strd	r2, r3, [r7, #16]
    // if(input <= lowestAngle || input >= highestAngle){
    //     setpoint = gearRatio * (lowestAngle + highestAngle) / 2 ;
    // }

    // Tone down P and I as the motor hones onto position
    if (abs(gap) < 10){
 800241a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800241e:	f7fe fb9b 	bl	8000b58 <__aeabi_d2iz>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	bfb8      	it	lt
 8002428:	425b      	neglt	r3, r3
 800242a:	2b09      	cmp	r3, #9
 800242c:	dc19      	bgt.n	8002462 <_ZN13RoverArmMotor4tickEv+0x19e>
        internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8002442:	eeb0 2a45 	vmov.f32	s4, s10
 8002446:	eef0 2a65 	vmov.f32	s5, s11
 800244a:	eeb0 1a46 	vmov.f32	s2, s12
 800244e:	eef0 1a66 	vmov.f32	s3, s13
 8002452:	eeb0 0a47 	vmov.f32	s0, s14
 8002456:	eef0 0a67 	vmov.f32	s1, s15
 800245a:	4610      	mov	r0, r2
 800245c:	f000 fc43 	bl	8002ce6 <_ZN3PID10SetTuningsEddd>
 8002460:	e018      	b.n	8002494 <_ZN13RoverArmMotor4tickEv+0x1d0>
    }else{
        internalPIDInstance.SetTunings(aggressiveKp, aggressiveKi, aggressiveKd);
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	ed93 5b26 	vldr	d5, [r3, #152]	; 0x98
 8002476:	eeb0 2a45 	vmov.f32	s4, s10
 800247a:	eef0 2a65 	vmov.f32	s5, s11
 800247e:	eeb0 1a46 	vmov.f32	s2, s12
 8002482:	eef0 1a66 	vmov.f32	s3, s13
 8002486:	eeb0 0a47 	vmov.f32	s0, s14
 800248a:	eef0 0a67 	vmov.f32	s1, s15
 800248e:	4610      	mov	r0, r2
 8002490:	f000 fc29 	bl	8002ce6 <_ZN3PID10SetTuningsEddd>
    }
    internalPIDInstance.Compute(); // return value stored in output
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fa8f 	bl	80029ba <_ZN3PID7ComputeEv>
    // Make sure we aren't snapping our tendons - move back a little bit if we are
    // if(currentAngle >= (highestAngle - 2) && currentAngle <= (lowestAngle + 2)) output = 0.0;


    //------------------Write to motor------------------//
    if(escType == CYTRON){
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d139      	bne.n	800251a <_ZN13RoverArmMotor4tickEv+0x256>

        // Interpret sign of the error signal as the direction pin value
        // (gap > 0) ? digitalWrite(dir, HIGH) : digitalWrite(dir, LOW); // invert if needed mn297
        if (gap > 0) {
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024b2:	f7fe fb31 	bl	8000b18 <__aeabi_dcmpgt>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <_ZN13RoverArmMotor4tickEv+0x20e>
            HAL_GPIO_WritePin(dir.port, dir.pin, GPIO_PIN_SET); //mn297
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 80024c8:	2201      	movs	r2, #1
 80024ca:	4619      	mov	r1, r3
 80024cc:	f001 f83a 	bl	8003544 <HAL_GPIO_WritePin>
 80024d0:	e009      	b.n	80024e6 <_ZN13RoverArmMotor4tickEv+0x222>
        }
        else {
            HAL_GPIO_WritePin(dir.port, dir.pin, GPIO_PIN_RESET); //mn297
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 80024de:	2200      	movs	r2, #0
 80024e0:	4619      	mov	r1, r3
 80024e2:	f001 f82f 	bl	8003544 <HAL_GPIO_WritePin>
        }
        // Write to PWM pin
        //TODO port to HAL
        // analogWrite(pwm, abs(output)); //mn297 function execute quickly and jumps to next tick()
        double test_output = abs(output);     //smoothing
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7fe fb32 	bl	8000b58 <__aeabi_d2iz>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bfb8      	it	lt
 80024fa:	425b      	neglt	r3, r3
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe f811 	bl	8000524 <__aeabi_i2d>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	e9c7 2302 	strd	r2, r3, [r7, #8]
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (int) test_output);
 800250a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800250e:	f7fe fb23 	bl	8000b58 <__aeabi_d2iz>
 8002512:	4602      	mov	r2, r0
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <_ZN13RoverArmMotor4tickEv+0x274>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	639a      	str	r2, [r3, #56]	; 0x38
    //     internalServoInstance.writeMicroseconds(output);
    // }


    //------------------Update angle------------------//
    lastAngle = currentAngle;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bdb0      	pop	{r4, r5, r7, pc}
 800252e:	bf00      	nop
 8002530:	3ff00000 	.word	0x3ff00000
 8002534:	40768000 	.word	0x40768000
 8002538:	20000560 	.word	0x20000560

0800253c <_ZN13RoverArmMotor11newSetpointEd>:
// For display purposes
double RoverArmMotor::getSetpoint(){
    return setpoint / gearRatio;
}

bool RoverArmMotor::newSetpoint(double angl){
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	ed87 0b00 	vstr	d0, [r7]
    double setpoint_test = angl * gearRatio;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800254e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002552:	f7fe f851 	bl	80005f8 <__aeabi_dmul>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if(setpoint_test >= lowestAngle && setpoint_test <= highestAngle){
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8002564:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002568:	f7fe facc 	bl	8000b04 <__aeabi_dcmpge>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d010      	beq.n	8002594 <_ZN13RoverArmMotor11newSetpointEd+0x58>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8002578:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800257c:	f7fe fab8 	bl	8000af0 <__aeabi_dcmple>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d006      	beq.n	8002594 <_ZN13RoverArmMotor11newSetpointEd+0x58>
        setpoint = setpoint_test;
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800258c:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
        return true;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <_ZN13RoverArmMotor11newSetpointEd+0x5a>
    }else{
        return false;
 8002594:	2300      	movs	r3, #0
    }
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_ZN13RoverArmMotor14setAngleLimitsEdd>:

// void RoverArmMotor::setGearRatio(double ratio){
//     gearRatio = ratio;
// }

void RoverArmMotor::setAngleLimits(double lowest, double highest){
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6178      	str	r0, [r7, #20]
 80025a6:	ed87 0b02 	vstr	d0, [r7, #8]
 80025aa:	ed87 1b00 	vstr	d1, [r7]
    lowestAngle = lowest * gearRatio;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 80025b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025b8:	f7fe f81e 	bl	80005f8 <__aeabi_dmul>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	6979      	ldr	r1, [r7, #20]
 80025c2:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = highest * gearRatio;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 80025cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025d0:	f7fe f812 	bl	80005f8 <__aeabi_dmul>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	6979      	ldr	r1, [r7, #20]
 80025da:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
}
 80025de:	bf00      	nop
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_ZN13RoverArmMotor13reset_encoderEv>:

void RoverArmMotor::set_zero_angle(){
    setZeroSPI(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
}
void RoverArmMotor::reset_encoder(){
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
    resetAMT22(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 8002600:	2300      	movs	r3, #0
 8002602:	f004 fbbc 	bl	8006d7e <resetAMT22>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_ZN13RoverArmMotor17set_zero_angle_swEv>:
void RoverArmMotor::set_zero_angle_sw(){
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
    zero_angle_sw = this->get_current_angle();
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f822 	bl	8002660 <_ZN13RoverArmMotor17get_current_angleEv>
 800261c:	eeb0 7a40 	vmov.f32	s14, s0
 8002620:	eef0 7a60 	vmov.f32	s15, s1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160
}  //mn297 software zero angle
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <_ZN13RoverArmMotor11engageBrakeEv>:
    //   digitalWrite(brake, LOW);  
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_RESET); //mn297
    }
}

void RoverArmMotor::engageBrake(){
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
    if(brake.valid != 0){
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <_ZN13RoverArmMotor11engageBrakeEv+0x26>
    //    digitalWrite(brake, HIGH); 
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_SET); //mn297
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8002650:	2201      	movs	r2, #1
 8002652:	4619      	mov	r1, r3
 8002654:	f000 ff76 	bl	8003544 <HAL_GPIO_WritePin>
    }
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <_ZN13RoverArmMotor17get_current_angleEv>:
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
    adcResult = internalAveragerInstance.reading(encoderData);  // implicit cast to int
    currentAngle = mapFloat((float) adcResult, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
    return currentAngle / gearRatio;
}
double RoverArmMotor::get_current_angle(){    //mn297
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af02      	add	r7, sp, #8
 8002666:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 800267a:	2300      	movs	r3, #0
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	230c      	movs	r3, #12
 8002680:	f004 faed 	bl	8006c5e <getPositionSPI>
 8002684:	4603      	mov	r3, r0
 8002686:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 8002688:	89fb      	ldrh	r3, [r7, #14]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002692:	ed9f 2a13 	vldr	s4, [pc, #76]	; 80026e0 <_ZN13RoverArmMotor17get_current_angleEv+0x80>
 8002696:	eddf 1a13 	vldr	s3, [pc, #76]	; 80026e4 <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 800269a:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80026e8 <_ZN13RoverArmMotor17get_current_angleEv+0x88>
 800269e:	eddf 0a11 	vldr	s1, [pc, #68]	; 80026e4 <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 80026a2:	eeb0 0a67 	vmov.f32	s0, s15
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f88a 	bl	80027c0 <_ZN13RoverArmMotor8mapFloatEfffff>
 80026ac:	eeb0 7a40 	vmov.f32	s14, s0
 80026b0:	eef0 7a60 	vmov.f32	s15, s1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    return currentAngle / gearRatio;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80026c6:	f7fe f8c1 	bl	800084c <__aeabi_ddiv>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80026d2:	eeb0 0a47 	vmov.f32	s0, s14
 80026d6:	eef0 0a67 	vmov.f32	s1, s15
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	43b38000 	.word	0x43b38000
 80026e4:	00000000 	.word	0x00000000
 80026e8:	457ff000 	.word	0x457ff000

080026ec <_ZN13RoverArmMotor20get_current_angle_swEv>:
double RoverArmMotor::get_current_angle_sw(){    //TODO mn297
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 8002706:	2300      	movs	r3, #0
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	230c      	movs	r3, #12
 800270c:	f004 faa7 	bl	8006c5e <getPositionSPI>
 8002710:	4603      	mov	r3, r0
 8002712:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 8002714:	89fb      	ldrh	r3, [r7, #14]
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271e:	ed9f 2a24 	vldr	s4, [pc, #144]	; 80027b0 <_ZN13RoverArmMotor20get_current_angle_swEv+0xc4>
 8002722:	eddf 1a24 	vldr	s3, [pc, #144]	; 80027b4 <_ZN13RoverArmMotor20get_current_angle_swEv+0xc8>
 8002726:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80027b8 <_ZN13RoverArmMotor20get_current_angle_swEv+0xcc>
 800272a:	eddf 0a22 	vldr	s1, [pc, #136]	; 80027b4 <_ZN13RoverArmMotor20get_current_angle_swEv+0xc8>
 800272e:	eeb0 0a67 	vmov.f32	s0, s15
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f844 	bl	80027c0 <_ZN13RoverArmMotor8mapFloatEfffff>
 8002738:	eeb0 7a40 	vmov.f32	s14, s0
 800273c:	eef0 7a60 	vmov.f32	s15, s1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    
    double diff = currentAngle - zero_angle_sw;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 8002752:	f7fd fd99 	bl	8000288 <__aeabi_dsub>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if(diff < 0) diff += 360;
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800276a:	f7fe f9b7 	bl	8000adc <__aeabi_dcmplt>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <_ZN13RoverArmMotor20get_current_angle_swEv+0x9e>
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	4b10      	ldr	r3, [pc, #64]	; (80027bc <_ZN13RoverArmMotor20get_current_angle_swEv+0xd0>)
 800277a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800277e:	f7fd fd85 	bl	800028c <__adddf3>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return diff / gearRatio;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8002790:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002794:	f7fe f85a 	bl	800084c <__aeabi_ddiv>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	ec43 2b17 	vmov	d7, r2, r3
}
 80027a0:	eeb0 0a47 	vmov.f32	s0, s14
 80027a4:	eef0 0a67 	vmov.f32	s1, s15
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	43b38000 	.word	0x43b38000
 80027b4:	00000000 	.word	0x00000000
 80027b8:	457ff000 	.word	0x457ff000
 80027bc:	40768000 	.word	0x40768000

080027c0 <_ZN13RoverArmMotor8mapFloatEfffff>:

double RoverArmMotor::getCurrentOutput(){
    return output;
}

double RoverArmMotor::mapFloat(float x, float in_min, float in_max, float out_min, float out_max){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6178      	str	r0, [r7, #20]
 80027c8:	ed87 0a04 	vstr	s0, [r7, #16]
 80027cc:	edc7 0a03 	vstr	s1, [r7, #12]
 80027d0:	ed87 1a02 	vstr	s2, [r7, #8]
 80027d4:	edc7 1a01 	vstr	s3, [r7, #4]
 80027d8:	ed87 2a00 	vstr	s4, [r7]
    double result = ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 80027dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80027e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80027e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027e8:	edd7 6a00 	vldr	s13, [r7]
 80027ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80027f4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80027f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80027fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002808:	edd7 7a01 	vldr	s15, [r7, #4]
 800280c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002810:	ee17 0a90 	vmov	r0, s15
 8002814:	f7fd fe98 	bl	8000548 <__aeabi_f2d>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result; 
 8002820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002824:	ec43 2b17 	vmov	d7, r2, r3
    }
 8002828:	eeb0 0a47 	vmov.f32	s0, s14
 800282c:	eef0 0a67 	vmov.f32	s1, s15
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <_ZN9movingAvg5beginEv>:

#include <movingAvg.h>

// initialize - allocate the interval array
void movingAvg::begin()
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
    m_readings = new int[m_interval];
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8002846:	4293      	cmp	r3, r2
 8002848:	d201      	bcs.n	800284e <_ZN9movingAvg5beginEv+0x18>
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	e001      	b.n	8002852 <_ZN9movingAvg5beginEv+0x1c>
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
 8002852:	4618      	mov	r0, r3
 8002854:	f004 fad6 	bl	8006e04 <_Znaj>
 8002858:	4603      	mov	r3, r0
 800285a:	461a      	mov	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	611a      	str	r2, [r3, #16]
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~ Constructor ~~~~~~~~~~~~~~~~ */
PID::PID() { }

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6278      	str	r0, [r7, #36]	; 0x24
 8002870:	6239      	str	r1, [r7, #32]
 8002872:	61fa      	str	r2, [r7, #28]
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	ed87 0b04 	vstr	d0, [r7, #16]
 800287a:	ed87 1b02 	vstr	d1, [r7, #8]
 800287e:	ed87 2b00 	vstr	d2, [r7]
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_myOutput   = Output;
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	645a      	str	r2, [r3, #68]	; 0x44
	_myInput    = Input;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	6a3a      	ldr	r2, [r7, #32]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
	_mySetpoint = Setpoint;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	649a      	str	r2, [r3, #72]	; 0x48
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	2200      	movs	r2, #0
 8002898:	705a      	strb	r2, [r3, #1]
	
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 800289a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80028f0 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x88>
 800289e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80028f8 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x90>
 80028a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028a4:	f000 f9b1 	bl	8002c0a <_ZN3PID15SetOutputLimitsEdd>
	
	_sampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	2264      	movs	r2, #100	; 0x64
 80028ac:	609a      	str	r2, [r3, #8]
	
	PID::SetControllerDirection(ControllerDirection);
 80028ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80028b2:	4619      	mov	r1, r3
 80028b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028b6:	f000 fad9 	bl	8002e6c <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>
	PID::SetTunings(Kp, Ki, Kd, POn);
 80028ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80028be:	4619      	mov	r1, r3
 80028c0:	ed97 2b00 	vldr	d2, [r7]
 80028c4:	ed97 1b02 	vldr	d1, [r7, #8]
 80028c8:	ed97 0b04 	vldr	d0, [r7, #16]
 80028cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028ce:	f000 fa25 	bl	8002d1c <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
	
	_lastTime = GetTime() - _sampleTime;
 80028d2:	f000 fb7b 	bl	8002fcc <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	1ad2      	subs	r2, r2, r3
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	605a      	str	r2, [r3, #4]
	
}
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	4618      	mov	r0, r3
 80028e6:	3728      	adds	r7, #40	; 0x28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	f3af 8000 	nop.w
 80028f0:	00000000 	.word	0x00000000
 80028f4:	406fe000 	.word	0x406fe000
	...

08002900 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>:

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection) : PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection)
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	; 0x30
 8002904:	af02      	add	r7, sp, #8
 8002906:	6278      	str	r0, [r7, #36]	; 0x24
 8002908:	6239      	str	r1, [r7, #32]
 800290a:	61fa      	str	r2, [r7, #28]
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002912:	ed87 1b02 	vstr	d1, [r7, #8]
 8002916:	ed87 2b00 	vstr	d2, [r7]
 800291a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	2301      	movs	r3, #1
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	ed97 2b00 	vldr	d2, [r7]
 8002928:	ed97 1b02 	vldr	d1, [r7, #8]
 800292c:	ed97 0b04 	vldr	d0, [r7, #16]
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	6a39      	ldr	r1, [r7, #32]
 8002936:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002938:	f7ff ff96 	bl	8002868 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>
{ }
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	4618      	mov	r0, r3
 8002940:	3728      	adds	r7, #40	; 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_ZN3PID4InitEv>:



/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	_lastInput = *_myInput;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (_outputSum > _outMax)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002976:	f7fe f8cf 	bl	8000b18 <__aeabi_dcmpgt>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d006      	beq.n	800298e <_ZN3PID4InitEv+0x48>
	{
		_outputSum = _outMax;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		_outputSum = _outMin;
	}
	else { }	
	
}
 800298c:	e011      	b.n	80029b2 <_ZN3PID4InitEv+0x6c>
	else if (_outputSum < _outMin)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800299a:	f7fe f89f 	bl	8000adc <__aeabi_dcmplt>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d100      	bne.n	80029a6 <_ZN3PID4InitEv+0x60>
}
 80029a4:	e005      	b.n	80029b2 <_ZN3PID4InitEv+0x6c>
		_outputSum = _outMin;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_ZN3PID7ComputeEv>:
	PID::Init(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID::Compute(void)
{
 80029ba:	b5b0      	push	{r4, r5, r7, lr}
 80029bc:	b08c      	sub	sp, #48	; 0x30
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
	
	double input;
	double error;
	double dInput;
	double output;
	_outputSum = _outMin;	//mn297 hotfix TODO check if this is correct
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!_inAuto)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	785b      	ldrb	r3, [r3, #1]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <_ZN3PID7ComputeEv+0x20>
	{
		return _FALSE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e0f5      	b.n	8002bc6 <_ZN3PID7ComputeEv+0x20c>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80029da:	f000 faf7 	bl	8002fcc <HAL_GetTick>
 80029de:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - _lastTime);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= _sampleTime)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	6a3a      	ldr	r2, [r7, #32]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	f0c0 80e7 	bcc.w	8002bc4 <_ZN3PID7ComputeEv+0x20a>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *_myInput;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = abs(*_mySetpoint - input);	//mn297 fix
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a0e:	f7fd fc3b 	bl	8000288 <__aeabi_dsub>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f7fe f89d 	bl	8000b58 <__aeabi_d2iz>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bfb8      	it	lt
 8002a24:	425b      	neglt	r3, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fd7c 	bl	8000524 <__aeabi_i2d>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = abs(input - _lastInput);		//mn297 fix TODO: check if this is correct
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002a3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a3e:	f7fd fc23 	bl	8000288 <__aeabi_dsub>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f7fe f885 	bl	8000b58 <__aeabi_d2iz>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bfb8      	it	lt
 8002a54:	425b      	neglt	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd fd64 	bl	8000524 <__aeabi_i2d>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		_outputSum += (_ki * error);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002a70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a74:	f7fd fdc0 	bl	80005f8 <__aeabi_dmul>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fc04 	bl	800028c <__adddf3>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!_pOnE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d114      	bne.n	8002ac0 <_ZN3PID7ComputeEv+0x106>
		{
			_outputSum -= _kp * dInput;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002aa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aa6:	f7fd fda7 	bl	80005f8 <__aeabi_dmul>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4620      	mov	r0, r4
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	f7fd fbe9 	bl	8000288 <__aeabi_dsub>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (_outputSum > _outMax)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002acc:	f7fe f824 	bl	8000b18 <__aeabi_dcmpgt>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <_ZN3PID7ComputeEv+0x12a>
		{
			_outputSum = _outMax;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002ae2:	e010      	b.n	8002b06 <_ZN3PID7ComputeEv+0x14c>
		}
		else if (_outputSum < _outMin)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002af0:	f7fd fff4 	bl	8000adc <__aeabi_dcmplt>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <_ZN3PID7ComputeEv+0x14c>
		{
			_outputSum = _outMin;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (_pOnE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <_ZN3PID7ComputeEv+0x16c>
		{
			output = _kp * error;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002b14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b18:	f7fd fd6e 	bl	80005f8 <__aeabi_dmul>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002b24:	e005      	b.n	8002b32 <_ZN3PID7ComputeEv+0x178>
		}
		else
		{
			output = 0;
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += _outputSum - _kd * dInput;		//TODO check if this is correct mn297
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002b3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b42:	f7fd fd59 	bl	80005f8 <__aeabi_dmul>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	f7fd fb9b 	bl	8000288 <__aeabi_dsub>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b5a:	f7fd fb97 	bl	800028c <__adddf3>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > _outMax)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002b6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b70:	f7fd ffd2 	bl	8000b18 <__aeabi_dcmpgt>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <_ZN3PID7ComputeEv+0x1cc>
		{
			output = _outMax;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002b80:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002b84:	e00e      	b.n	8002ba4 <_ZN3PID7ComputeEv+0x1ea>
		}
		else if (output < _outMin)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002b8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b90:	f7fd ffa4 	bl	8000adc <__aeabi_dcmplt>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <_ZN3PID7ComputeEv+0x1ea>
		{
			output = _outMin;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002ba0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*_myOutput = output;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ba8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bac:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		_lastInput = input;
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bb6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		_lastTime  = now;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbe:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <_ZN3PID7ComputeEv+0x20c>
		
	}
	else
	{
		return _FALSE;
 8002bc4:	2300      	movs	r3, #0
	}
	
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3730      	adds	r7, #48	; 0x30
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bdb0      	pop	{r4, r5, r7, pc}

08002bce <_ZN3PID7SetModeE15PIDMode_TypeDef>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID::SetMode(PIDMode_TypeDef Mode)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !_inAuto)
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	785b      	ldrb	r3, [r3, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
	{
		Init();
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fea5 	bl	8002946 <_ZN3PID4InitEv>
	}
	
	_inAuto = (PIDMode_TypeDef)newAuto;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	705a      	strb	r2, [r3, #1]
	
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_ZN3PID15SetOutputLimitsEdd>:
	return _inAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(double Min, double Max)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6178      	str	r0, [r7, #20]
 8002c12:	ed87 0b02 	vstr	d0, [r7, #8]
 8002c16:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c22:	f7fd ff6f 	bl	8000b04 <__aeabi_dcmpge>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d158      	bne.n	8002cde <_ZN3PID15SetOutputLimitsEdd+0xd4>
	{
		return;
	}
	
	_outMin = Min;
 8002c2c:	6979      	ldr	r1, [r7, #20]
 8002c2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c32:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	_outMax = Max;
 8002c36:	6979      	ldr	r1, [r7, #20]
 8002c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c3c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	785b      	ldrb	r3, [r3, #1]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d04b      	beq.n	8002ce0 <_ZN3PID15SetOutputLimitsEdd+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002c56:	f7fd ff5f 	bl	8000b18 <__aeabi_dcmpgt>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <_ZN3PID15SetOutputLimitsEdd+0x66>
		{
			*_myOutput = _outMax;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002c6a:	e9c1 2300 	strd	r2, r3, [r1]
 8002c6e:	e012      	b.n	8002c96 <_ZN3PID15SetOutputLimitsEdd+0x8c>
		}
		else if (*_myOutput < _outMin)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002c7e:	f7fd ff2d 	bl	8000adc <__aeabi_dcmplt>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <_ZN3PID15SetOutputLimitsEdd+0x8c>
		{
			*_myOutput = _outMin;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002c92:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002ca2:	f7fd ff39 	bl	8000b18 <__aeabi_dcmpgt>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d006      	beq.n	8002cba <_ZN3PID15SetOutputLimitsEdd+0xb0>
		{
			_outputSum = _outMax;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002cb2:	6979      	ldr	r1, [r7, #20]
 8002cb4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002cb8:	e012      	b.n	8002ce0 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		}
		else if (_outputSum < _outMin)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002cc6:	f7fd ff09 	bl	8000adc <__aeabi_dcmplt>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		{
			_outputSum = _outMin;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002cd6:	6979      	ldr	r1, [r7, #20]
 8002cd8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002cdc:	e000      	b.n	8002ce0 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		return;
 8002cde:	bf00      	nop
		}
		else { }
		
	}
	
}
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <_ZN3PID10SetTuningsEddd>:

/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID::SetTunings(double Kp, double Ki, double Kd)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b088      	sub	sp, #32
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	61f8      	str	r0, [r7, #28]
 8002cee:	ed87 0b04 	vstr	d0, [r7, #16]
 8002cf2:	ed87 1b02 	vstr	d1, [r7, #8]
 8002cf6:	ed87 2b00 	vstr	d2, [r7]
	PID::SetTunings(Kp, Ki, Kd, _pOn);
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	789b      	ldrb	r3, [r3, #2]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	ed97 2b00 	vldr	d2, [r7]
 8002d04:	ed97 1b02 	vldr	d1, [r7, #8]
 8002d08:	ed97 0b04 	vldr	d0, [r7, #16]
 8002d0c:	69f8      	ldr	r0, [r7, #28]
 8002d0e:	f000 f805 	bl	8002d1c <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
}
 8002d12:	bf00      	nop
 8002d14:	3720      	adds	r7, #32
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>:
void PID::SetTunings(double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08a      	sub	sp, #40	; 0x28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	61f8      	str	r0, [r7, #28]
 8002d24:	ed87 0b04 	vstr	d0, [r7, #16]
 8002d28:	ed87 1b02 	vstr	d1, [r7, #8]
 8002d2c:	ed87 2b00 	vstr	d2, [r7]
 8002d30:	460b      	mov	r3, r1
 8002d32:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d40:	f7fd fecc 	bl	8000adc <__aeabi_dcmplt>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f040 8089 	bne.w	8002e5e <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d58:	f7fd fec0 	bl	8000adc <__aeabi_dcmplt>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d17d      	bne.n	8002e5e <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d6e:	f7fd feb5 	bl	8000adc <__aeabi_dcmplt>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d172      	bne.n	8002e5e <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	_pOn    = POn;
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	7efa      	ldrb	r2, [r7, #27]
 8002d7c:	709a      	strb	r2, [r3, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002d7e:	7efb      	ldrb	r3, [r7, #27]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	701a      	strb	r2, [r3, #0]

	_dispKp = Kp;
 8002d90:	69f9      	ldr	r1, [r7, #28]
 8002d92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d96:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_dispKi = Ki;
 8002d9a:	69f9      	ldr	r1, [r7, #28]
 8002d9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_dispKd = Kd;
 8002da4:	69f9      	ldr	r1, [r7, #28]
 8002da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002daa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)_sampleTime) / 1000;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fba6 	bl	8000504 <__aeabi_ui2d>
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x14c>)
 8002dbe:	f7fd fd45 	bl	800084c <__aeabi_ddiv>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	_kp = Kp;
 8002dca:	69f9      	ldr	r1, [r7, #28]
 8002dcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dd0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	_ki = Ki * SampleTimeInSec;
 8002dd4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ddc:	f7fd fc0c 	bl	80005f8 <__aeabi_dmul>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	69f9      	ldr	r1, [r7, #28]
 8002de6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	_kd = Kd / SampleTimeInSec;
 8002dea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002df2:	f7fd fd2b 	bl	800084c <__aeabi_ddiv>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	69f9      	ldr	r1, [r7, #28]
 8002dfc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (_controllerDirection == _PID_CD_REVERSE)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	78db      	ldrb	r3, [r3, #3]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d12b      	bne.n	8002e60 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
	{
		
		_kp = (0 - _kp);
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e0e:	f04f 0000 	mov.w	r0, #0
 8002e12:	f04f 0100 	mov.w	r1, #0
 8002e16:	f7fd fa37 	bl	8000288 <__aeabi_dsub>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	69f9      	ldr	r1, [r7, #28]
 8002e20:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002e2a:	f04f 0000 	mov.w	r0, #0
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	f7fd fa29 	bl	8000288 <__aeabi_dsub>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	69f9      	ldr	r1, [r7, #28]
 8002e3c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e46:	f04f 0000 	mov.w	r0, #0
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	f7fd fa1b 	bl	8000288 <__aeabi_dsub>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	69f9      	ldr	r1, [r7, #28]
 8002e58:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002e5c:	e000      	b.n	8002e60 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
		return;
 8002e5e:	bf00      	nop
		
	}
	
}
 8002e60:	3728      	adds	r7, #40	; 0x28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	408f4000 	.word	0x408f4000

08002e6c <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d02e      	beq.n	8002ede <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	78db      	ldrb	r3, [r3, #3]
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d029      	beq.n	8002ede <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
	{
		
		_kp = (0 - _kp);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e90:	f04f 0000 	mov.w	r0, #0
 8002e94:	f04f 0100 	mov.w	r1, #0
 8002e98:	f7fd f9f6 	bl	8000288 <__aeabi_dsub>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	f7fd f9e8 	bl	8000288 <__aeabi_dsub>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002ec8:	f04f 0000 	mov.w	r0, #0
 8002ecc:	f04f 0100 	mov.w	r1, #0
 8002ed0:	f7fd f9da 	bl	8000288 <__aeabi_dsub>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	_controllerDirection = Direction;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	70da      	strb	r2, [r3, #3]
	
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <HAL_Init+0x3c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <HAL_Init+0x3c>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f02:	2003      	movs	r0, #3
 8002f04:	f000 f962 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f000 f80f 	bl	8002f2c <HAL_InitTick>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	71fb      	strb	r3, [r7, #7]
 8002f18:	e001      	b.n	8002f1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f1a:	f7fe fccd 	bl	80018b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40022000 	.word	0x40022000

08002f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f38:	4b17      	ldr	r3, [pc, #92]	; (8002f98 <HAL_InitTick+0x6c>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d023      	beq.n	8002f88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f40:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <HAL_InitTick+0x70>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <HAL_InitTick+0x6c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f96d 	bl	8003236 <HAL_SYSTICK_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10f      	bne.n	8002f82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0f      	cmp	r3, #15
 8002f66:	d809      	bhi.n	8002f7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	f000 f937 	bl	80031e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_InitTick+0x74>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e007      	b.n	8002f8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
 8002f80:	e004      	b.n	8002f8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	e001      	b.n	8002f8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000038 	.word	0x20000038
 8002f9c:	20000030 	.word	0x20000030
 8002fa0:	20000034 	.word	0x20000034

08002fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_IncTick+0x20>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000038 	.word	0x20000038
 8002fc8:	20000630 	.word	0x20000630

08002fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_GetTick+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000630 	.word	0x20000630

08002fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff ffee 	bl	8002fcc <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d005      	beq.n	800300a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_Delay+0x44>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800300a:	bf00      	nop
 800300c:	f7ff ffde 	bl	8002fcc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	d8f7      	bhi.n	800300c <HAL_Delay+0x28>
  {
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000038 	.word	0x20000038

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4907      	ldr	r1, [pc, #28]	; (80030c8 <__NVIC_EnableIRQ+0x38>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	; (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
         );
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003198:	d301      	bcc.n	800319e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800319a:	2301      	movs	r3, #1
 800319c:	e00f      	b.n	80031be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <SysTick_Config+0x40>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a6:	210f      	movs	r1, #15
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	f7ff ff8e 	bl	80030cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <SysTick_Config+0x40>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b6:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <SysTick_Config+0x40>)
 80031b8:	2207      	movs	r2, #7
 80031ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	e000e010 	.word	0xe000e010

080031cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff29 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031f4:	f7ff ff3e 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	6978      	ldr	r0, [r7, #20]
 8003200:	f7ff ff8e 	bl	8003120 <NVIC_EncodePriority>
 8003204:	4602      	mov	r2, r0
 8003206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff5d 	bl	80030cc <__NVIC_SetPriority>
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff31 	bl	8003090 <__NVIC_EnableIRQ>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ffa2 	bl	8003188 <SysTick_Config>
 8003244:	4603      	mov	r3, r0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325e:	e154      	b.n	800350a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	4013      	ands	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8146 	beq.w	8003504 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d005      	beq.n	8003290 <HAL_GPIO_Init+0x40>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d130      	bne.n	80032f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	2203      	movs	r2, #3
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032c6:	2201      	movs	r2, #1
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	f003 0201 	and.w	r2, r3, #1
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d017      	beq.n	800332e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	2203      	movs	r2, #3
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4013      	ands	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d123      	bne.n	8003382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	08da      	lsrs	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3208      	adds	r2, #8
 8003342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	08da      	lsrs	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3208      	adds	r2, #8
 800337c:	6939      	ldr	r1, [r7, #16]
 800337e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	2203      	movs	r2, #3
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0203 	and.w	r2, r3, #3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80a0 	beq.w	8003504 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c4:	4b58      	ldr	r3, [pc, #352]	; (8003528 <HAL_GPIO_Init+0x2d8>)
 80033c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c8:	4a57      	ldr	r2, [pc, #348]	; (8003528 <HAL_GPIO_Init+0x2d8>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6613      	str	r3, [r2, #96]	; 0x60
 80033d0:	4b55      	ldr	r3, [pc, #340]	; (8003528 <HAL_GPIO_Init+0x2d8>)
 80033d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033dc:	4a53      	ldr	r2, [pc, #332]	; (800352c <HAL_GPIO_Init+0x2dc>)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	3302      	adds	r3, #2
 80033e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	220f      	movs	r2, #15
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003406:	d019      	beq.n	800343c <HAL_GPIO_Init+0x1ec>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a49      	ldr	r2, [pc, #292]	; (8003530 <HAL_GPIO_Init+0x2e0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <HAL_GPIO_Init+0x1e8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a48      	ldr	r2, [pc, #288]	; (8003534 <HAL_GPIO_Init+0x2e4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00d      	beq.n	8003434 <HAL_GPIO_Init+0x1e4>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a47      	ldr	r2, [pc, #284]	; (8003538 <HAL_GPIO_Init+0x2e8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d007      	beq.n	8003430 <HAL_GPIO_Init+0x1e0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a46      	ldr	r2, [pc, #280]	; (800353c <HAL_GPIO_Init+0x2ec>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_GPIO_Init+0x1dc>
 8003428:	2304      	movs	r3, #4
 800342a:	e008      	b.n	800343e <HAL_GPIO_Init+0x1ee>
 800342c:	2307      	movs	r3, #7
 800342e:	e006      	b.n	800343e <HAL_GPIO_Init+0x1ee>
 8003430:	2303      	movs	r3, #3
 8003432:	e004      	b.n	800343e <HAL_GPIO_Init+0x1ee>
 8003434:	2302      	movs	r3, #2
 8003436:	e002      	b.n	800343e <HAL_GPIO_Init+0x1ee>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_GPIO_Init+0x1ee>
 800343c:	2300      	movs	r3, #0
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	f002 0203 	and.w	r2, r2, #3
 8003444:	0092      	lsls	r2, r2, #2
 8003446:	4093      	lsls	r3, r2
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800344e:	4937      	ldr	r1, [pc, #220]	; (800352c <HAL_GPIO_Init+0x2dc>)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	3302      	adds	r3, #2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800345c:	4b38      	ldr	r3, [pc, #224]	; (8003540 <HAL_GPIO_Init+0x2f0>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	43db      	mvns	r3, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003480:	4a2f      	ldr	r2, [pc, #188]	; (8003540 <HAL_GPIO_Init+0x2f0>)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003486:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <HAL_GPIO_Init+0x2f0>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	43db      	mvns	r3, r3
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4013      	ands	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034aa:	4a25      	ldr	r2, [pc, #148]	; (8003540 <HAL_GPIO_Init+0x2f0>)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034b0:	4b23      	ldr	r3, [pc, #140]	; (8003540 <HAL_GPIO_Init+0x2f0>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4013      	ands	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034d4:	4a1a      	ldr	r2, [pc, #104]	; (8003540 <HAL_GPIO_Init+0x2f0>)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034da:	4b19      	ldr	r3, [pc, #100]	; (8003540 <HAL_GPIO_Init+0x2f0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034fe:	4a10      	ldr	r2, [pc, #64]	; (8003540 <HAL_GPIO_Init+0x2f0>)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	3301      	adds	r3, #1
 8003508:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	f47f aea3 	bne.w	8003260 <HAL_GPIO_Init+0x10>
  }
}
 800351a:	bf00      	nop
 800351c:	bf00      	nop
 800351e:	371c      	adds	r7, #28
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40021000 	.word	0x40021000
 800352c:	40010000 	.word	0x40010000
 8003530:	48000400 	.word	0x48000400
 8003534:	48000800 	.word	0x48000800
 8003538:	48000c00 	.word	0x48000c00
 800353c:	48001000 	.word	0x48001000
 8003540:	40010400 	.word	0x40010400

08003544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	807b      	strh	r3, [r7, #2]
 8003550:	4613      	mov	r3, r2
 8003552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003554:	787b      	ldrb	r3, [r7, #1]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800355a:	887a      	ldrh	r2, [r7, #2]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003560:	e002      	b.n	8003568 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003562:	887a      	ldrh	r2, [r7, #2]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800357e:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d006      	beq.n	8003598 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800358a:	4a05      	ldr	r2, [pc, #20]	; (80035a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd ff8e 	bl	80014b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40010400 	.word	0x40010400

080035a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <HAL_PWREx_GetVoltageRange+0x18>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40007000 	.word	0x40007000

080035c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ce:	d130      	bne.n	8003632 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035d0:	4b23      	ldr	r3, [pc, #140]	; (8003660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035dc:	d038      	beq.n	8003650 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035de:	4b20      	ldr	r3, [pc, #128]	; (8003660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035e6:	4a1e      	ldr	r2, [pc, #120]	; (8003660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035ee:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2232      	movs	r2, #50	; 0x32
 80035f4:	fb02 f303 	mul.w	r3, r2, r3
 80035f8:	4a1b      	ldr	r2, [pc, #108]	; (8003668 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	0c9b      	lsrs	r3, r3, #18
 8003600:	3301      	adds	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003604:	e002      	b.n	800360c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3b01      	subs	r3, #1
 800360a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800360c:	4b14      	ldr	r3, [pc, #80]	; (8003660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003618:	d102      	bne.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x60>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f2      	bne.n	8003606 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362c:	d110      	bne.n	8003650 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e00f      	b.n	8003652 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363e:	d007      	beq.n	8003650 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003640:	4b07      	ldr	r3, [pc, #28]	; (8003660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003648:	4a05      	ldr	r2, [pc, #20]	; (8003660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800364a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800364e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40007000 	.word	0x40007000
 8003664:	20000030 	.word	0x20000030
 8003668:	431bde83 	.word	0x431bde83

0800366c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f000 bc02 	b.w	8003e84 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003680:	4b96      	ldr	r3, [pc, #600]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800368a:	4b94      	ldr	r3, [pc, #592]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80e4 	beq.w	800386a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <HAL_RCC_OscConfig+0x4c>
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	f040 808b 	bne.w	80037c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	f040 8087 	bne.w	80037c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036b8:	4b88      	ldr	r3, [pc, #544]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_OscConfig+0x64>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e3d9      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1a      	ldr	r2, [r3, #32]
 80036d4:	4b81      	ldr	r3, [pc, #516]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d004      	beq.n	80036ea <HAL_RCC_OscConfig+0x7e>
 80036e0:	4b7e      	ldr	r3, [pc, #504]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e8:	e005      	b.n	80036f6 <HAL_RCC_OscConfig+0x8a>
 80036ea:	4b7c      	ldr	r3, [pc, #496]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80036ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d223      	bcs.n	8003742 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fd8c 	bl	800421c <RCC_SetFlashLatencyFromMSIRange>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e3ba      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800370e:	4b73      	ldr	r3, [pc, #460]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a72      	ldr	r2, [pc, #456]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003714:	f043 0308 	orr.w	r3, r3, #8
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	4b70      	ldr	r3, [pc, #448]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	496d      	ldr	r1, [pc, #436]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800372c:	4b6b      	ldr	r3, [pc, #428]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	4968      	ldr	r1, [pc, #416]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
 8003740:	e025      	b.n	800378e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003742:	4b66      	ldr	r3, [pc, #408]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a65      	ldr	r2, [pc, #404]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003748:	f043 0308 	orr.w	r3, r3, #8
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b63      	ldr	r3, [pc, #396]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	4960      	ldr	r1, [pc, #384]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800375c:	4313      	orrs	r3, r2
 800375e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003760:	4b5e      	ldr	r3, [pc, #376]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	495b      	ldr	r1, [pc, #364]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fd4c 	bl	800421c <RCC_SetFlashLatencyFromMSIRange>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e37a      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800378e:	f000 fc81 	bl	8004094 <HAL_RCC_GetSysClockFreq>
 8003792:	4602      	mov	r2, r0
 8003794:	4b51      	ldr	r3, [pc, #324]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	4950      	ldr	r1, [pc, #320]	; (80038e0 <HAL_RCC_OscConfig+0x274>)
 80037a0:	5ccb      	ldrb	r3, [r1, r3]
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	fa22 f303 	lsr.w	r3, r2, r3
 80037aa:	4a4e      	ldr	r2, [pc, #312]	; (80038e4 <HAL_RCC_OscConfig+0x278>)
 80037ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037ae:	4b4e      	ldr	r3, [pc, #312]	; (80038e8 <HAL_RCC_OscConfig+0x27c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fbba 	bl	8002f2c <HAL_InitTick>
 80037b8:	4603      	mov	r3, r0
 80037ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d052      	beq.n	8003868 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	e35e      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d032      	beq.n	8003834 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037ce:	4b43      	ldr	r3, [pc, #268]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a42      	ldr	r2, [pc, #264]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037da:	f7ff fbf7 	bl	8002fcc <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037e2:	f7ff fbf3 	bl	8002fcc <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e347      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037f4:	4b39      	ldr	r3, [pc, #228]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003800:	4b36      	ldr	r3, [pc, #216]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a35      	ldr	r2, [pc, #212]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003806:	f043 0308 	orr.w	r3, r3, #8
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b33      	ldr	r3, [pc, #204]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4930      	ldr	r1, [pc, #192]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800381e:	4b2f      	ldr	r3, [pc, #188]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	492b      	ldr	r1, [pc, #172]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
 8003832:	e01a      	b.n	800386a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003834:	4b29      	ldr	r3, [pc, #164]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a28      	ldr	r2, [pc, #160]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003840:	f7ff fbc4 	bl	8002fcc <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003848:	f7ff fbc0 	bl	8002fcc <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e314      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800385a:	4b20      	ldr	r3, [pc, #128]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x1dc>
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003868:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d073      	beq.n	800395e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b08      	cmp	r3, #8
 800387a:	d005      	beq.n	8003888 <HAL_RCC_OscConfig+0x21c>
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2b0c      	cmp	r3, #12
 8003880:	d10e      	bne.n	80038a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d10b      	bne.n	80038a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	4b14      	ldr	r3, [pc, #80]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d063      	beq.n	800395c <HAL_RCC_OscConfig+0x2f0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d15f      	bne.n	800395c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e2f1      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a8:	d106      	bne.n	80038b8 <HAL_RCC_OscConfig+0x24c>
 80038aa:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e025      	b.n	8003904 <HAL_RCC_OscConfig+0x298>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c0:	d114      	bne.n	80038ec <HAL_RCC_OscConfig+0x280>
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a05      	ldr	r2, [pc, #20]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80038c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	4b03      	ldr	r3, [pc, #12]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a02      	ldr	r2, [pc, #8]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e013      	b.n	8003904 <HAL_RCC_OscConfig+0x298>
 80038dc:	40021000 	.word	0x40021000
 80038e0:	0800a290 	.word	0x0800a290
 80038e4:	20000030 	.word	0x20000030
 80038e8:	20000034 	.word	0x20000034
 80038ec:	4ba0      	ldr	r3, [pc, #640]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a9f      	ldr	r2, [pc, #636]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b9d      	ldr	r3, [pc, #628]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a9c      	ldr	r2, [pc, #624]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80038fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7ff fb5e 	bl	8002fcc <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003914:	f7ff fb5a 	bl	8002fcc <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e2ae      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003926:	4b92      	ldr	r3, [pc, #584]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x2a8>
 8003932:	e014      	b.n	800395e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7ff fb4a 	bl	8002fcc <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800393c:	f7ff fb46 	bl	8002fcc <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b64      	cmp	r3, #100	; 0x64
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e29a      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800394e:	4b88      	ldr	r3, [pc, #544]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x2d0>
 800395a:	e000      	b.n	800395e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d060      	beq.n	8003a2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d005      	beq.n	800397c <HAL_RCC_OscConfig+0x310>
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2b0c      	cmp	r3, #12
 8003974:	d119      	bne.n	80039aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d116      	bne.n	80039aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800397c:	4b7c      	ldr	r3, [pc, #496]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_OscConfig+0x328>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e277      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003994:	4b76      	ldr	r3, [pc, #472]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	4973      	ldr	r1, [pc, #460]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a8:	e040      	b.n	8003a2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d023      	beq.n	80039fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b2:	4b6f      	ldr	r3, [pc, #444]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6e      	ldr	r2, [pc, #440]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7ff fb05 	bl	8002fcc <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c6:	f7ff fb01 	bl	8002fcc <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e255      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d8:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e4:	4b62      	ldr	r3, [pc, #392]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	495f      	ldr	r1, [pc, #380]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
 80039f8:	e018      	b.n	8003a2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fa:	4b5d      	ldr	r3, [pc, #372]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a5c      	ldr	r2, [pc, #368]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a06:	f7ff fae1 	bl	8002fcc <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0e:	f7ff fadd 	bl	8002fcc <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e231      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a20:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d03c      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01c      	beq.n	8003a7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a40:	4b4b      	ldr	r3, [pc, #300]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a46:	4a4a      	ldr	r2, [pc, #296]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7ff fabc 	bl	8002fcc <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a58:	f7ff fab8 	bl	8002fcc <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e20c      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a6a:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ef      	beq.n	8003a58 <HAL_RCC_OscConfig+0x3ec>
 8003a78:	e01b      	b.n	8003ab2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a7a:	4b3d      	ldr	r3, [pc, #244]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a80:	4a3b      	ldr	r2, [pc, #236]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8a:	f7ff fa9f 	bl	8002fcc <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a92:	f7ff fa9b 	bl	8002fcc <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e1ef      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aa4:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1ef      	bne.n	8003a92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80a6 	beq.w	8003c0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ac4:	4b2a      	ldr	r3, [pc, #168]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10d      	bne.n	8003aec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad0:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	4a26      	ldr	r2, [pc, #152]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ada:	6593      	str	r3, [r2, #88]	; 0x58
 8003adc:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aec:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <HAL_RCC_OscConfig+0x508>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d118      	bne.n	8003b2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af8:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <HAL_RCC_OscConfig+0x508>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <HAL_RCC_OscConfig+0x508>)
 8003afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b04:	f7ff fa62 	bl	8002fcc <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0c:	f7ff fa5e 	bl	8002fcc <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e1b2      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1e:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <HAL_RCC_OscConfig+0x508>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d108      	bne.n	8003b44 <HAL_RCC_OscConfig+0x4d8>
 8003b32:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b38:	4a0d      	ldr	r2, [pc, #52]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b42:	e029      	b.n	8003b98 <HAL_RCC_OscConfig+0x52c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d115      	bne.n	8003b78 <HAL_RCC_OscConfig+0x50c>
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b54:	f043 0304 	orr.w	r3, r3, #4
 8003b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	4a03      	ldr	r2, [pc, #12]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b6c:	e014      	b.n	8003b98 <HAL_RCC_OscConfig+0x52c>
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40007000 	.word	0x40007000
 8003b78:	4b9a      	ldr	r3, [pc, #616]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	4a99      	ldr	r2, [pc, #612]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b88:	4b96      	ldr	r3, [pc, #600]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	4a95      	ldr	r2, [pc, #596]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003b90:	f023 0304 	bic.w	r3, r3, #4
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d016      	beq.n	8003bce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7ff fa14 	bl	8002fcc <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7ff fa10 	bl	8002fcc <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e162      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bbe:	4b89      	ldr	r3, [pc, #548]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ed      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x53c>
 8003bcc:	e015      	b.n	8003bfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7ff f9fd 	bl	8002fcc <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bd4:	e00a      	b.n	8003bec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7ff f9f9 	bl	8002fcc <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e14b      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bec:	4b7d      	ldr	r3, [pc, #500]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ed      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfa:	7ffb      	ldrb	r3, [r7, #31]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c00:	4b78      	ldr	r3, [pc, #480]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	4a77      	ldr	r2, [pc, #476]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d03c      	beq.n	8003c92 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01c      	beq.n	8003c5a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c20:	4b70      	ldr	r3, [pc, #448]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c26:	4a6f      	ldr	r2, [pc, #444]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7ff f9cc 	bl	8002fcc <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c38:	f7ff f9c8 	bl	8002fcc <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e11c      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c4a:	4b66      	ldr	r3, [pc, #408]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003c4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0ef      	beq.n	8003c38 <HAL_RCC_OscConfig+0x5cc>
 8003c58:	e01b      	b.n	8003c92 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c5a:	4b62      	ldr	r3, [pc, #392]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c60:	4a60      	ldr	r2, [pc, #384]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6a:	f7ff f9af 	bl	8002fcc <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c72:	f7ff f9ab 	bl	8002fcc <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e0ff      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c84:	4b57      	ldr	r3, [pc, #348]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1ef      	bne.n	8003c72 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80f3 	beq.w	8003e82 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	f040 80c9 	bne.w	8003e38 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ca6:	4b4f      	ldr	r3, [pc, #316]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f003 0203 	and.w	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d12c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d123      	bne.n	8003d14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d11b      	bne.n	8003d14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d113      	bne.n	8003d14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d109      	bne.n	8003d14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d06b      	beq.n	8003dec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	d062      	beq.n	8003de0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d1a:	4b32      	ldr	r3, [pc, #200]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e0ac      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d2a:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2d      	ldr	r2, [pc, #180]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d36:	f7ff f949 	bl	8002fcc <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7ff f945 	bl	8002fcc <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e099      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d50:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f0      	bne.n	8003d3e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d5c:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	4b21      	ldr	r3, [pc, #132]	; (8003de8 <HAL_RCC_OscConfig+0x77c>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d6c:	3a01      	subs	r2, #1
 8003d6e:	0112      	lsls	r2, r2, #4
 8003d70:	4311      	orrs	r1, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d76:	0212      	lsls	r2, r2, #8
 8003d78:	4311      	orrs	r1, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d7e:	0852      	lsrs	r2, r2, #1
 8003d80:	3a01      	subs	r2, #1
 8003d82:	0552      	lsls	r2, r2, #21
 8003d84:	4311      	orrs	r1, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d8a:	0852      	lsrs	r2, r2, #1
 8003d8c:	3a01      	subs	r2, #1
 8003d8e:	0652      	lsls	r2, r2, #25
 8003d90:	4311      	orrs	r1, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d96:	06d2      	lsls	r2, r2, #27
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	4912      	ldr	r1, [pc, #72]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003da0:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003daa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dac:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003db8:	f7ff f908 	bl	8002fcc <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc0:	f7ff f904 	bl	8002fcc <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e058      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd2:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dde:	e050      	b.n	8003e82 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e04f      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
 8003de4:	40021000 	.word	0x40021000
 8003de8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dec:	4b27      	ldr	r3, [pc, #156]	; (8003e8c <HAL_RCC_OscConfig+0x820>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d144      	bne.n	8003e82 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003df8:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <HAL_RCC_OscConfig+0x820>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a23      	ldr	r2, [pc, #140]	; (8003e8c <HAL_RCC_OscConfig+0x820>)
 8003dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_RCC_OscConfig+0x820>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4a20      	ldr	r2, [pc, #128]	; (8003e8c <HAL_RCC_OscConfig+0x820>)
 8003e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e10:	f7ff f8dc 	bl	8002fcc <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e18:	f7ff f8d8 	bl	8002fcc <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e02c      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2a:	4b18      	ldr	r3, [pc, #96]	; (8003e8c <HAL_RCC_OscConfig+0x820>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x7ac>
 8003e36:	e024      	b.n	8003e82 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	d01f      	beq.n	8003e7e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3e:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <HAL_RCC_OscConfig+0x820>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <HAL_RCC_OscConfig+0x820>)
 8003e44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7ff f8bf 	bl	8002fcc <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e52:	f7ff f8bb 	bl	8002fcc <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e00f      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e64:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <HAL_RCC_OscConfig+0x820>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f0      	bne.n	8003e52 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_RCC_OscConfig+0x820>)
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	4905      	ldr	r1, [pc, #20]	; (8003e8c <HAL_RCC_OscConfig+0x820>)
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCC_OscConfig+0x824>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60cb      	str	r3, [r1, #12]
 8003e7c:	e001      	b.n	8003e82 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	feeefffc 	.word	0xfeeefffc

08003e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0e7      	b.n	8004078 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b75      	ldr	r3, [pc, #468]	; (8004080 <HAL_RCC_ClockConfig+0x1ec>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d910      	bls.n	8003ed8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b72      	ldr	r3, [pc, #456]	; (8004080 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 0207 	bic.w	r2, r3, #7
 8003ebe:	4970      	ldr	r1, [pc, #448]	; (8004080 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec6:	4b6e      	ldr	r3, [pc, #440]	; (8004080 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0cf      	b.n	8004078 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d010      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	4b66      	ldr	r3, [pc, #408]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d908      	bls.n	8003f06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef4:	4b63      	ldr	r3, [pc, #396]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4960      	ldr	r1, [pc, #384]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d04c      	beq.n	8003fac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d107      	bne.n	8003f2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1a:	4b5a      	ldr	r3, [pc, #360]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d121      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e0a6      	b.n	8004078 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d107      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f32:	4b54      	ldr	r3, [pc, #336]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d115      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e09a      	b.n	8004078 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d107      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f4a:	4b4e      	ldr	r3, [pc, #312]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e08e      	b.n	8004078 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f5a:	4b4a      	ldr	r3, [pc, #296]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e086      	b.n	8004078 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f6a:	4b46      	ldr	r3, [pc, #280]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f023 0203 	bic.w	r2, r3, #3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4943      	ldr	r1, [pc, #268]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f7c:	f7ff f826 	bl	8002fcc <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f84:	f7ff f822 	bl	8002fcc <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e06e      	b.n	8004078 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9a:	4b3a      	ldr	r3, [pc, #232]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 020c 	and.w	r2, r3, #12
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d1eb      	bne.n	8003f84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d010      	beq.n	8003fda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	4b31      	ldr	r3, [pc, #196]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d208      	bcs.n	8003fda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc8:	4b2e      	ldr	r3, [pc, #184]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	492b      	ldr	r1, [pc, #172]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fda:	4b29      	ldr	r3, [pc, #164]	; (8004080 <HAL_RCC_ClockConfig+0x1ec>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d210      	bcs.n	800400a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe8:	4b25      	ldr	r3, [pc, #148]	; (8004080 <HAL_RCC_ClockConfig+0x1ec>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f023 0207 	bic.w	r2, r3, #7
 8003ff0:	4923      	ldr	r1, [pc, #140]	; (8004080 <HAL_RCC_ClockConfig+0x1ec>)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff8:	4b21      	ldr	r3, [pc, #132]	; (8004080 <HAL_RCC_ClockConfig+0x1ec>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d001      	beq.n	800400a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e036      	b.n	8004078 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004016:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	4918      	ldr	r1, [pc, #96]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8004024:	4313      	orrs	r3, r2
 8004026:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004034:	4b13      	ldr	r3, [pc, #76]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4910      	ldr	r1, [pc, #64]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8004044:	4313      	orrs	r3, r2
 8004046:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004048:	f000 f824 	bl	8004094 <HAL_RCC_GetSysClockFreq>
 800404c:	4602      	mov	r2, r0
 800404e:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <HAL_RCC_ClockConfig+0x1f0>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	490b      	ldr	r1, [pc, #44]	; (8004088 <HAL_RCC_ClockConfig+0x1f4>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
 8004064:	4a09      	ldr	r2, [pc, #36]	; (800408c <HAL_RCC_ClockConfig+0x1f8>)
 8004066:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004068:	4b09      	ldr	r3, [pc, #36]	; (8004090 <HAL_RCC_ClockConfig+0x1fc>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe ff5d 	bl	8002f2c <HAL_InitTick>
 8004072:	4603      	mov	r3, r0
 8004074:	72fb      	strb	r3, [r7, #11]

  return status;
 8004076:	7afb      	ldrb	r3, [r7, #11]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40022000 	.word	0x40022000
 8004084:	40021000 	.word	0x40021000
 8004088:	0800a290 	.word	0x0800a290
 800408c:	20000030 	.word	0x20000030
 8004090:	20000034 	.word	0x20000034

08004094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004094:	b480      	push	{r7}
 8004096:	b089      	sub	sp, #36	; 0x24
 8004098:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	2300      	movs	r3, #0
 80040a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040a2:	4b3e      	ldr	r3, [pc, #248]	; (800419c <HAL_RCC_GetSysClockFreq+0x108>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040ac:	4b3b      	ldr	r3, [pc, #236]	; (800419c <HAL_RCC_GetSysClockFreq+0x108>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x34>
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b0c      	cmp	r3, #12
 80040c0:	d121      	bne.n	8004106 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d11e      	bne.n	8004106 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040c8:	4b34      	ldr	r3, [pc, #208]	; (800419c <HAL_RCC_GetSysClockFreq+0x108>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d107      	bne.n	80040e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040d4:	4b31      	ldr	r3, [pc, #196]	; (800419c <HAL_RCC_GetSysClockFreq+0x108>)
 80040d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	e005      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040e4:	4b2d      	ldr	r3, [pc, #180]	; (800419c <HAL_RCC_GetSysClockFreq+0x108>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040f0:	4a2b      	ldr	r2, [pc, #172]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10d      	bne.n	800411c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004104:	e00a      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b04      	cmp	r3, #4
 800410a:	d102      	bne.n	8004112 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800410c:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	e004      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d101      	bne.n	800411c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004118:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800411a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d134      	bne.n	800418c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004122:	4b1e      	ldr	r3, [pc, #120]	; (800419c <HAL_RCC_GetSysClockFreq+0x108>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d003      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0xa6>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b03      	cmp	r3, #3
 8004136:	d003      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0xac>
 8004138:	e005      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800413a:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800413c:	617b      	str	r3, [r7, #20]
      break;
 800413e:	e005      	b.n	800414c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004142:	617b      	str	r3, [r7, #20]
      break;
 8004144:	e002      	b.n	800414c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	617b      	str	r3, [r7, #20]
      break;
 800414a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800414c:	4b13      	ldr	r3, [pc, #76]	; (800419c <HAL_RCC_GetSysClockFreq+0x108>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	3301      	adds	r3, #1
 8004158:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800415a:	4b10      	ldr	r3, [pc, #64]	; (800419c <HAL_RCC_GetSysClockFreq+0x108>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	0a1b      	lsrs	r3, r3, #8
 8004160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	fb03 f202 	mul.w	r2, r3, r2
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004170:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <HAL_RCC_GetSysClockFreq+0x108>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	0e5b      	lsrs	r3, r3, #25
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	3301      	adds	r3, #1
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	fbb2 f3f3 	udiv	r3, r2, r3
 800418a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800418c:	69bb      	ldr	r3, [r7, #24]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3724      	adds	r7, #36	; 0x24
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40021000 	.word	0x40021000
 80041a0:	0800a2a8 	.word	0x0800a2a8
 80041a4:	00f42400 	.word	0x00f42400
 80041a8:	007a1200 	.word	0x007a1200

080041ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b0:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041b2:	681b      	ldr	r3, [r3, #0]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	20000030 	.word	0x20000030

080041c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041c8:	f7ff fff0 	bl	80041ac <HAL_RCC_GetHCLKFreq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	0a1b      	lsrs	r3, r3, #8
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	4904      	ldr	r1, [pc, #16]	; (80041ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40021000 	.word	0x40021000
 80041ec:	0800a2a0 	.word	0x0800a2a0

080041f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041f4:	f7ff ffda 	bl	80041ac <HAL_RCC_GetHCLKFreq>
 80041f8:	4602      	mov	r2, r0
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	0adb      	lsrs	r3, r3, #11
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	4904      	ldr	r1, [pc, #16]	; (8004218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004206:	5ccb      	ldrb	r3, [r1, r3]
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40021000 	.word	0x40021000
 8004218:	0800a2a0 	.word	0x0800a2a0

0800421c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004228:	4b2a      	ldr	r3, [pc, #168]	; (80042d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004234:	f7ff f9b6 	bl	80035a4 <HAL_PWREx_GetVoltageRange>
 8004238:	6178      	str	r0, [r7, #20]
 800423a:	e014      	b.n	8004266 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800423c:	4b25      	ldr	r3, [pc, #148]	; (80042d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	4a24      	ldr	r2, [pc, #144]	; (80042d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004246:	6593      	str	r3, [r2, #88]	; 0x58
 8004248:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004254:	f7ff f9a6 	bl	80035a4 <HAL_PWREx_GetVoltageRange>
 8004258:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800425a:	4b1e      	ldr	r3, [pc, #120]	; (80042d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425e:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004264:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426c:	d10b      	bne.n	8004286 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b80      	cmp	r3, #128	; 0x80
 8004272:	d919      	bls.n	80042a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2ba0      	cmp	r3, #160	; 0xa0
 8004278:	d902      	bls.n	8004280 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800427a:	2302      	movs	r3, #2
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	e013      	b.n	80042a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004280:	2301      	movs	r3, #1
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	e010      	b.n	80042a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b80      	cmp	r3, #128	; 0x80
 800428a:	d902      	bls.n	8004292 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800428c:	2303      	movs	r3, #3
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	e00a      	b.n	80042a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b80      	cmp	r3, #128	; 0x80
 8004296:	d102      	bne.n	800429e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004298:	2302      	movs	r3, #2
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	e004      	b.n	80042a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b70      	cmp	r3, #112	; 0x70
 80042a2:	d101      	bne.n	80042a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042a4:	2301      	movs	r3, #1
 80042a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f023 0207 	bic.w	r2, r3, #7
 80042b0:	4909      	ldr	r1, [pc, #36]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d001      	beq.n	80042ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40022000 	.word	0x40022000

080042dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042e4:	2300      	movs	r3, #0
 80042e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042e8:	2300      	movs	r3, #0
 80042ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d031      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004300:	d01a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004302:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004306:	d814      	bhi.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d009      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800430c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004310:	d10f      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004312:	4b5d      	ldr	r3, [pc, #372]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	4a5c      	ldr	r2, [pc, #368]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800431e:	e00c      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	2100      	movs	r1, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fa22 	bl	8004770 <RCCEx_PLLSAI1_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004330:	e003      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	74fb      	strb	r3, [r7, #19]
      break;
 8004336:	e000      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800433a:	7cfb      	ldrb	r3, [r7, #19]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10b      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004340:	4b51      	ldr	r3, [pc, #324]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	494e      	ldr	r1, [pc, #312]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004356:	e001      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 809e 	beq.w	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436a:	2300      	movs	r3, #0
 800436c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800436e:	4b46      	ldr	r3, [pc, #280]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800437e:	2300      	movs	r3, #0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00d      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004384:	4b40      	ldr	r3, [pc, #256]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004388:	4a3f      	ldr	r2, [pc, #252]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800438a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438e:	6593      	str	r3, [r2, #88]	; 0x58
 8004390:	4b3d      	ldr	r3, [pc, #244]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439c:	2301      	movs	r3, #1
 800439e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a0:	4b3a      	ldr	r3, [pc, #232]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a39      	ldr	r2, [pc, #228]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043ac:	f7fe fe0e 	bl	8002fcc <HAL_GetTick>
 80043b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043b2:	e009      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b4:	f7fe fe0a 	bl	8002fcc <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d902      	bls.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	74fb      	strb	r3, [r7, #19]
        break;
 80043c6:	e005      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043c8:	4b30      	ldr	r3, [pc, #192]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ef      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d15a      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043da:	4b2b      	ldr	r3, [pc, #172]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01e      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d019      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043f6:	4b24      	ldr	r3, [pc, #144]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004400:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004402:	4b21      	ldr	r3, [pc, #132]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004408:	4a1f      	ldr	r2, [pc, #124]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800440a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004412:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800441a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004422:	4a19      	ldr	r2, [pc, #100]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d016      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fe fdca 	bl	8002fcc <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800443a:	e00b      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443c:	f7fe fdc6 	bl	8002fcc <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d902      	bls.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	74fb      	strb	r3, [r7, #19]
            break;
 8004452:	e006      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0ec      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004462:	7cfb      	ldrb	r3, [r7, #19]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10b      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004468:	4b07      	ldr	r3, [pc, #28]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004476:	4904      	ldr	r1, [pc, #16]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800447e:	e009      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	74bb      	strb	r3, [r7, #18]
 8004484:	e006      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000
 800448c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004494:	7c7b      	ldrb	r3, [r7, #17]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d105      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800449a:	4b8d      	ldr	r3, [pc, #564]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800449c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449e:	4a8c      	ldr	r2, [pc, #560]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044b2:	4b87      	ldr	r3, [pc, #540]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	f023 0203 	bic.w	r2, r3, #3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	4983      	ldr	r1, [pc, #524]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044d4:	4b7e      	ldr	r3, [pc, #504]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	f023 020c 	bic.w	r2, r3, #12
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	497b      	ldr	r1, [pc, #492]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044f6:	4b76      	ldr	r3, [pc, #472]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	4972      	ldr	r1, [pc, #456]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004518:	4b6d      	ldr	r3, [pc, #436]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	496a      	ldr	r1, [pc, #424]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800453a:	4b65      	ldr	r3, [pc, #404]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004540:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004548:	4961      	ldr	r1, [pc, #388]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800455c:	4b5c      	ldr	r3, [pc, #368]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4959      	ldr	r1, [pc, #356]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800457e:	4b54      	ldr	r3, [pc, #336]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004584:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	4950      	ldr	r1, [pc, #320]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045a0:	4b4b      	ldr	r3, [pc, #300]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ae:	4948      	ldr	r1, [pc, #288]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045c2:	4b43      	ldr	r3, [pc, #268]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	493f      	ldr	r1, [pc, #252]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d028      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045e4:	4b3a      	ldr	r3, [pc, #232]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f2:	4937      	ldr	r1, [pc, #220]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004602:	d106      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004604:	4b32      	ldr	r3, [pc, #200]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a31      	ldr	r2, [pc, #196]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800460a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800460e:	60d3      	str	r3, [r2, #12]
 8004610:	e011      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004616:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800461a:	d10c      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3304      	adds	r3, #4
 8004620:	2101      	movs	r1, #1
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f8a4 	bl	8004770 <RCCEx_PLLSAI1_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800462c:	7cfb      	ldrb	r3, [r7, #19]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004632:	7cfb      	ldrb	r3, [r7, #19]
 8004634:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d028      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004642:	4b23      	ldr	r3, [pc, #140]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004650:	491f      	ldr	r1, [pc, #124]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004660:	d106      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004662:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	4a1a      	ldr	r2, [pc, #104]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800466c:	60d3      	str	r3, [r2, #12]
 800466e:	e011      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004678:	d10c      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3304      	adds	r3, #4
 800467e:	2101      	movs	r1, #1
 8004680:	4618      	mov	r0, r3
 8004682:	f000 f875 	bl	8004770 <RCCEx_PLLSAI1_Config>
 8004686:	4603      	mov	r3, r0
 8004688:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800468a:	7cfb      	ldrb	r3, [r7, #19]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d02b      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ae:	4908      	ldr	r1, [pc, #32]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046be:	d109      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c0:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4a02      	ldr	r2, [pc, #8]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ca:	60d3      	str	r3, [r2, #12]
 80046cc:	e014      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80046ce:	bf00      	nop
 80046d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2101      	movs	r1, #1
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f843 	bl	8004770 <RCCEx_PLLSAI1_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01c      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004704:	4b19      	ldr	r3, [pc, #100]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	4916      	ldr	r1, [pc, #88]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004722:	d10c      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	2102      	movs	r1, #2
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f820 	bl	8004770 <RCCEx_PLLSAI1_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800474a:	4b08      	ldr	r3, [pc, #32]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	4904      	ldr	r1, [pc, #16]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004760:	7cbb      	ldrb	r3, [r7, #18]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40021000 	.word	0x40021000

08004770 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800477e:	4b74      	ldr	r3, [pc, #464]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d018      	beq.n	80047bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800478a:	4b71      	ldr	r3, [pc, #452]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0203 	and.w	r2, r3, #3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d10d      	bne.n	80047b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
       ||
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047a2:	4b6b      	ldr	r3, [pc, #428]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
       ||
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d047      	beq.n	8004846 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
 80047ba:	e044      	b.n	8004846 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d018      	beq.n	80047f6 <RCCEx_PLLSAI1_Config+0x86>
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d825      	bhi.n	8004814 <RCCEx_PLLSAI1_Config+0xa4>
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d002      	beq.n	80047d2 <RCCEx_PLLSAI1_Config+0x62>
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d009      	beq.n	80047e4 <RCCEx_PLLSAI1_Config+0x74>
 80047d0:	e020      	b.n	8004814 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047d2:	4b5f      	ldr	r3, [pc, #380]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d11d      	bne.n	800481a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e2:	e01a      	b.n	800481a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047e4:	4b5a      	ldr	r3, [pc, #360]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d116      	bne.n	800481e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047f4:	e013      	b.n	800481e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047f6:	4b56      	ldr	r3, [pc, #344]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10f      	bne.n	8004822 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004802:	4b53      	ldr	r3, [pc, #332]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d109      	bne.n	8004822 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004812:	e006      	b.n	8004822 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
      break;
 8004818:	e004      	b.n	8004824 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800481a:	bf00      	nop
 800481c:	e002      	b.n	8004824 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004822:	bf00      	nop
    }

    if(status == HAL_OK)
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10d      	bne.n	8004846 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800482a:	4b49      	ldr	r3, [pc, #292]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6819      	ldr	r1, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	3b01      	subs	r3, #1
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	430b      	orrs	r3, r1
 8004840:	4943      	ldr	r1, [pc, #268]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004842:	4313      	orrs	r3, r2
 8004844:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d17c      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800484c:	4b40      	ldr	r3, [pc, #256]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a3f      	ldr	r2, [pc, #252]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004852:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004858:	f7fe fbb8 	bl	8002fcc <HAL_GetTick>
 800485c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800485e:	e009      	b.n	8004874 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004860:	f7fe fbb4 	bl	8002fcc <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d902      	bls.n	8004874 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	73fb      	strb	r3, [r7, #15]
        break;
 8004872:	e005      	b.n	8004880 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004874:	4b36      	ldr	r3, [pc, #216]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1ef      	bne.n	8004860 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d15f      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d110      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800488c:	4b30      	ldr	r3, [pc, #192]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004894:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6892      	ldr	r2, [r2, #8]
 800489c:	0211      	lsls	r1, r2, #8
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68d2      	ldr	r2, [r2, #12]
 80048a2:	06d2      	lsls	r2, r2, #27
 80048a4:	430a      	orrs	r2, r1
 80048a6:	492a      	ldr	r1, [pc, #168]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	610b      	str	r3, [r1, #16]
 80048ac:	e027      	b.n	80048fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d112      	bne.n	80048da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048b4:	4b26      	ldr	r3, [pc, #152]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80048bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6892      	ldr	r2, [r2, #8]
 80048c4:	0211      	lsls	r1, r2, #8
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6912      	ldr	r2, [r2, #16]
 80048ca:	0852      	lsrs	r2, r2, #1
 80048cc:	3a01      	subs	r2, #1
 80048ce:	0552      	lsls	r2, r2, #21
 80048d0:	430a      	orrs	r2, r1
 80048d2:	491f      	ldr	r1, [pc, #124]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	610b      	str	r3, [r1, #16]
 80048d8:	e011      	b.n	80048fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048da:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6892      	ldr	r2, [r2, #8]
 80048ea:	0211      	lsls	r1, r2, #8
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6952      	ldr	r2, [r2, #20]
 80048f0:	0852      	lsrs	r2, r2, #1
 80048f2:	3a01      	subs	r2, #1
 80048f4:	0652      	lsls	r2, r2, #25
 80048f6:	430a      	orrs	r2, r1
 80048f8:	4915      	ldr	r1, [pc, #84]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048fe:	4b14      	ldr	r3, [pc, #80]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a13      	ldr	r2, [pc, #76]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004904:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004908:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490a:	f7fe fb5f 	bl	8002fcc <HAL_GetTick>
 800490e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004910:	e009      	b.n	8004926 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004912:	f7fe fb5b 	bl	8002fcc <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d902      	bls.n	8004926 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	73fb      	strb	r3, [r7, #15]
          break;
 8004924:	e005      	b.n	8004932 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0ef      	beq.n	8004912 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	4903      	ldr	r1, [pc, #12]	; (8004950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004942:	4313      	orrs	r3, r2
 8004944:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004946:	7bfb      	ldrb	r3, [r7, #15]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40021000 	.word	0x40021000

08004954 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e095      	b.n	8004a92 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d108      	bne.n	8004980 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004976:	d009      	beq.n	800498c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	61da      	str	r2, [r3, #28]
 800497e:	e005      	b.n	800498c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fc fedc 	bl	8001764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049cc:	d902      	bls.n	80049d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	e002      	b.n	80049da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049e2:	d007      	beq.n	80049f4 <HAL_SPI_Init+0xa0>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049ec:	d002      	beq.n	80049f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a36:	ea42 0103 	orr.w	r1, r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	0c1b      	lsrs	r3, r3, #16
 8004a50:	f003 0204 	and.w	r2, r3, #4
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a70:	ea42 0103 	orr.w	r1, r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b08a      	sub	sp, #40	; 0x28
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	607a      	str	r2, [r7, #4]
 8004aa6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x26>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e1fb      	b.n	8004eb8 <HAL_SPI_TransmitReceive+0x41e>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ac8:	f7fe fa80 	bl	8002fcc <HAL_GetTick>
 8004acc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ad4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004adc:	887b      	ldrh	r3, [r7, #2]
 8004ade:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004ae0:	887b      	ldrh	r3, [r7, #2]
 8004ae2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ae4:	7efb      	ldrb	r3, [r7, #27]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d00e      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x6e>
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af0:	d106      	bne.n	8004b00 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d102      	bne.n	8004b00 <HAL_SPI_TransmitReceive+0x66>
 8004afa:	7efb      	ldrb	r3, [r7, #27]
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d003      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b06:	e1cd      	b.n	8004ea4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_SPI_TransmitReceive+0x80>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <HAL_SPI_TransmitReceive+0x80>
 8004b14:	887b      	ldrh	r3, [r7, #2]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d103      	bne.n	8004b22 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b20:	e1c0      	b.n	8004ea4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d003      	beq.n	8004b36 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2205      	movs	r2, #5
 8004b32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	887a      	ldrh	r2, [r7, #2]
 8004b46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	887a      	ldrh	r2, [r7, #2]
 8004b4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	887a      	ldrh	r2, [r7, #2]
 8004b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	887a      	ldrh	r2, [r7, #2]
 8004b62:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b78:	d802      	bhi.n	8004b80 <HAL_SPI_TransmitReceive+0xe6>
 8004b7a:	8a3b      	ldrh	r3, [r7, #16]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d908      	bls.n	8004b92 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b8e:	605a      	str	r2, [r3, #4]
 8004b90:	e007      	b.n	8004ba2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ba0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	d007      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bc8:	d97c      	bls.n	8004cc4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_SPI_TransmitReceive+0x13e>
 8004bd2:	8a7b      	ldrh	r3, [r7, #18]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d169      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	881a      	ldrh	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	1c9a      	adds	r2, r3, #2
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bfc:	e056      	b.n	8004cac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d11b      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x1aa>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d016      	beq.n	8004c44 <HAL_SPI_TransmitReceive+0x1aa>
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d113      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	881a      	ldrh	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	1c9a      	adds	r2, r3, #2
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d11c      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x1f2>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d016      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	b292      	uxth	r2, r2
 8004c6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	1c9a      	adds	r2, r3, #2
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c8c:	f7fe f99e 	bl	8002fcc <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d807      	bhi.n	8004cac <HAL_SPI_TransmitReceive+0x212>
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d003      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004caa:	e0fb      	b.n	8004ea4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1a3      	bne.n	8004bfe <HAL_SPI_TransmitReceive+0x164>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d19d      	bne.n	8004bfe <HAL_SPI_TransmitReceive+0x164>
 8004cc2:	e0df      	b.n	8004e84 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_SPI_TransmitReceive+0x23a>
 8004ccc:	8a7b      	ldrh	r3, [r7, #18]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	f040 80cb 	bne.w	8004e6a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d912      	bls.n	8004d04 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	881a      	ldrh	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	1c9a      	adds	r2, r3, #2
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b02      	subs	r3, #2
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d02:	e0b2      	b.n	8004e6a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	7812      	ldrb	r2, [r2, #0]
 8004d10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d2a:	e09e      	b.n	8004e6a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d134      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x30a>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d02f      	beq.n	8004da4 <HAL_SPI_TransmitReceive+0x30a>
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d12c      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d912      	bls.n	8004d7a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	881a      	ldrh	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	1c9a      	adds	r2, r3, #2
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b02      	subs	r3, #2
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d78:	e012      	b.n	8004da0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	330c      	adds	r3, #12
 8004d84:	7812      	ldrb	r2, [r2, #0]
 8004d86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d148      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x3aa>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d042      	beq.n	8004e44 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d923      	bls.n	8004e12 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	b292      	uxth	r2, r2
 8004dd6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	1c9a      	adds	r2, r3, #2
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b02      	subs	r3, #2
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d81f      	bhi.n	8004e40 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e0e:	605a      	str	r2, [r3, #4]
 8004e10:	e016      	b.n	8004e40 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f103 020c 	add.w	r2, r3, #12
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	7812      	ldrb	r2, [r2, #0]
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e40:	2301      	movs	r3, #1
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e44:	f7fe f8c2 	bl	8002fcc <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d803      	bhi.n	8004e5c <HAL_SPI_TransmitReceive+0x3c2>
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	d102      	bne.n	8004e62 <HAL_SPI_TransmitReceive+0x3c8>
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004e68:	e01c      	b.n	8004ea4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f47f af5b 	bne.w	8004d2c <HAL_SPI_TransmitReceive+0x292>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f47f af54 	bne.w	8004d2c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f937 	bl	80050fc <SPI_EndRxTxTransaction>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d006      	beq.n	8004ea2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	661a      	str	r2, [r3, #96]	; 0x60
 8004ea0:	e000      	b.n	8004ea4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004ea2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3728      	adds	r7, #40	; 0x28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ed0:	f7fe f87c 	bl	8002fcc <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	4413      	add	r3, r2
 8004ede:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ee0:	f7fe f874 	bl	8002fcc <HAL_GetTick>
 8004ee4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ee6:	4b39      	ldr	r3, [pc, #228]	; (8004fcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	015b      	lsls	r3, r3, #5
 8004eec:	0d1b      	lsrs	r3, r3, #20
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	fb02 f303 	mul.w	r3, r2, r3
 8004ef4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ef6:	e054      	b.n	8004fa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d050      	beq.n	8004fa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f00:	f7fe f864 	bl	8002fcc <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d902      	bls.n	8004f16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d13d      	bne.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f2e:	d111      	bne.n	8004f54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f38:	d004      	beq.n	8004f44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f42:	d107      	bne.n	8004f54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5c:	d10f      	bne.n	8004f7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e017      	b.n	8004fc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4013      	ands	r3, r2
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	bf0c      	ite	eq
 8004fb2:	2301      	moveq	r3, #1
 8004fb4:	2300      	movne	r3, #0
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	461a      	mov	r2, r3
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d19b      	bne.n	8004ef8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3720      	adds	r7, #32
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000030 	.word	0x20000030

08004fd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fe2:	f7fd fff3 	bl	8002fcc <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	4413      	add	r3, r2
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004ff2:	f7fd ffeb 	bl	8002fcc <HAL_GetTick>
 8004ff6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	330c      	adds	r3, #12
 8004ffe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005000:	4b3d      	ldr	r3, [pc, #244]	; (80050f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	00da      	lsls	r2, r3, #3
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	0d1b      	lsrs	r3, r3, #20
 8005010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005018:	e060      	b.n	80050dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005020:	d107      	bne.n	8005032 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d104      	bne.n	8005032 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005030:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d050      	beq.n	80050dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800503a:	f7fd ffc7 	bl	8002fcc <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005046:	429a      	cmp	r2, r3
 8005048:	d902      	bls.n	8005050 <SPI_WaitFifoStateUntilTimeout+0x80>
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d13d      	bne.n	80050cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800505e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005068:	d111      	bne.n	800508e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005072:	d004      	beq.n	800507e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507c:	d107      	bne.n	800508e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005096:	d10f      	bne.n	80050b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e010      	b.n	80050ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	3b01      	subs	r3, #1
 80050da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4013      	ands	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d196      	bne.n	800501a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3728      	adds	r7, #40	; 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000030 	.word	0x20000030

080050fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2200      	movs	r2, #0
 8005110:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f7ff ff5b 	bl	8004fd0 <SPI_WaitFifoStateUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d007      	beq.n	8005130 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005124:	f043 0220 	orr.w	r2, r3, #32
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e027      	b.n	8005180 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2200      	movs	r2, #0
 8005138:	2180      	movs	r1, #128	; 0x80
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff fec0 	bl	8004ec0 <SPI_WaitFlagStateUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d007      	beq.n	8005156 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800514a:	f043 0220 	orr.w	r2, r3, #32
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e014      	b.n	8005180 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2200      	movs	r2, #0
 800515e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7ff ff34 	bl	8004fd0 <SPI_WaitFifoStateUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005172:	f043 0220 	orr.w	r2, r3, #32
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e000      	b.n	8005180 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e049      	b.n	800522e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7fc fdd2 	bl	8001d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4619      	mov	r1, r3
 80051c6:	4610      	mov	r0, r2
 80051c8:	f000 fba0 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	d001      	beq.n	8005250 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e033      	b.n	80052b8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a19      	ldr	r2, [pc, #100]	; (80052c4 <HAL_TIM_Base_Start+0x8c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d009      	beq.n	8005276 <HAL_TIM_Base_Start+0x3e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526a:	d004      	beq.n	8005276 <HAL_TIM_Base_Start+0x3e>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <HAL_TIM_Base_Start+0x90>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d115      	bne.n	80052a2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	4b13      	ldr	r3, [pc, #76]	; (80052cc <HAL_TIM_Base_Start+0x94>)
 800527e:	4013      	ands	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b06      	cmp	r3, #6
 8005286:	d015      	beq.n	80052b4 <HAL_TIM_Base_Start+0x7c>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528e:	d011      	beq.n	80052b4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a0:	e008      	b.n	80052b4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	e000      	b.n	80052b6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	40012c00 	.word	0x40012c00
 80052c8:	40014000 	.word	0x40014000
 80052cc:	00010007 	.word	0x00010007

080052d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e049      	b.n	8005376 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f841 	bl	800537e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4610      	mov	r0, r2
 8005310:	f000 fafc 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d109      	bne.n	80053b8 <HAL_TIM_PWM_Start+0x24>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	bf14      	ite	ne
 80053b0:	2301      	movne	r3, #1
 80053b2:	2300      	moveq	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	e03c      	b.n	8005432 <HAL_TIM_PWM_Start+0x9e>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d109      	bne.n	80053d2 <HAL_TIM_PWM_Start+0x3e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	bf14      	ite	ne
 80053ca:	2301      	movne	r3, #1
 80053cc:	2300      	moveq	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	e02f      	b.n	8005432 <HAL_TIM_PWM_Start+0x9e>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d109      	bne.n	80053ec <HAL_TIM_PWM_Start+0x58>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	bf14      	ite	ne
 80053e4:	2301      	movne	r3, #1
 80053e6:	2300      	moveq	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	e022      	b.n	8005432 <HAL_TIM_PWM_Start+0x9e>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b0c      	cmp	r3, #12
 80053f0:	d109      	bne.n	8005406 <HAL_TIM_PWM_Start+0x72>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	bf14      	ite	ne
 80053fe:	2301      	movne	r3, #1
 8005400:	2300      	moveq	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	e015      	b.n	8005432 <HAL_TIM_PWM_Start+0x9e>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b10      	cmp	r3, #16
 800540a:	d109      	bne.n	8005420 <HAL_TIM_PWM_Start+0x8c>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b01      	cmp	r3, #1
 8005416:	bf14      	ite	ne
 8005418:	2301      	movne	r3, #1
 800541a:	2300      	moveq	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	e008      	b.n	8005432 <HAL_TIM_PWM_Start+0x9e>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	bf14      	ite	ne
 800542c:	2301      	movne	r3, #1
 800542e:	2300      	moveq	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e07e      	b.n	8005538 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d104      	bne.n	800544a <HAL_TIM_PWM_Start+0xb6>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005448:	e023      	b.n	8005492 <HAL_TIM_PWM_Start+0xfe>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b04      	cmp	r3, #4
 800544e:	d104      	bne.n	800545a <HAL_TIM_PWM_Start+0xc6>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005458:	e01b      	b.n	8005492 <HAL_TIM_PWM_Start+0xfe>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b08      	cmp	r3, #8
 800545e:	d104      	bne.n	800546a <HAL_TIM_PWM_Start+0xd6>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005468:	e013      	b.n	8005492 <HAL_TIM_PWM_Start+0xfe>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b0c      	cmp	r3, #12
 800546e:	d104      	bne.n	800547a <HAL_TIM_PWM_Start+0xe6>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005478:	e00b      	b.n	8005492 <HAL_TIM_PWM_Start+0xfe>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b10      	cmp	r3, #16
 800547e:	d104      	bne.n	800548a <HAL_TIM_PWM_Start+0xf6>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005488:	e003      	b.n	8005492 <HAL_TIM_PWM_Start+0xfe>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2202      	movs	r2, #2
 800548e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2201      	movs	r2, #1
 8005498:	6839      	ldr	r1, [r7, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fdb2 	bl	8006004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a26      	ldr	r2, [pc, #152]	; (8005540 <HAL_TIM_PWM_Start+0x1ac>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d009      	beq.n	80054be <HAL_TIM_PWM_Start+0x12a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a25      	ldr	r2, [pc, #148]	; (8005544 <HAL_TIM_PWM_Start+0x1b0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_TIM_PWM_Start+0x12a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a23      	ldr	r2, [pc, #140]	; (8005548 <HAL_TIM_PWM_Start+0x1b4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_PWM_Start+0x12e>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <HAL_TIM_PWM_Start+0x130>
 80054c2:	2300      	movs	r3, #0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d007      	beq.n	80054d8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a18      	ldr	r2, [pc, #96]	; (8005540 <HAL_TIM_PWM_Start+0x1ac>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d009      	beq.n	80054f6 <HAL_TIM_PWM_Start+0x162>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ea:	d004      	beq.n	80054f6 <HAL_TIM_PWM_Start+0x162>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a14      	ldr	r2, [pc, #80]	; (8005544 <HAL_TIM_PWM_Start+0x1b0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d115      	bne.n	8005522 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	4b13      	ldr	r3, [pc, #76]	; (800554c <HAL_TIM_PWM_Start+0x1b8>)
 80054fe:	4013      	ands	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b06      	cmp	r3, #6
 8005506:	d015      	beq.n	8005534 <HAL_TIM_PWM_Start+0x1a0>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550e:	d011      	beq.n	8005534 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005520:	e008      	b.n	8005534 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0201 	orr.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	e000      	b.n	8005536 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005534:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40012c00 	.word	0x40012c00
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	00010007 	.word	0x00010007

08005550 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800556a:	2302      	movs	r3, #2
 800556c:	e0ff      	b.n	800576e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b14      	cmp	r3, #20
 800557a:	f200 80f0 	bhi.w	800575e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800557e:	a201      	add	r2, pc, #4	; (adr r2, 8005584 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005584:	080055d9 	.word	0x080055d9
 8005588:	0800575f 	.word	0x0800575f
 800558c:	0800575f 	.word	0x0800575f
 8005590:	0800575f 	.word	0x0800575f
 8005594:	08005619 	.word	0x08005619
 8005598:	0800575f 	.word	0x0800575f
 800559c:	0800575f 	.word	0x0800575f
 80055a0:	0800575f 	.word	0x0800575f
 80055a4:	0800565b 	.word	0x0800565b
 80055a8:	0800575f 	.word	0x0800575f
 80055ac:	0800575f 	.word	0x0800575f
 80055b0:	0800575f 	.word	0x0800575f
 80055b4:	0800569b 	.word	0x0800569b
 80055b8:	0800575f 	.word	0x0800575f
 80055bc:	0800575f 	.word	0x0800575f
 80055c0:	0800575f 	.word	0x0800575f
 80055c4:	080056dd 	.word	0x080056dd
 80055c8:	0800575f 	.word	0x0800575f
 80055cc:	0800575f 	.word	0x0800575f
 80055d0:	0800575f 	.word	0x0800575f
 80055d4:	0800571d 	.word	0x0800571d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 f9f8 	bl	80059d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0208 	orr.w	r2, r2, #8
 80055f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0204 	bic.w	r2, r2, #4
 8005602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6999      	ldr	r1, [r3, #24]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	691a      	ldr	r2, [r3, #16]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	619a      	str	r2, [r3, #24]
      break;
 8005616:	e0a5      	b.n	8005764 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fa54 	bl	8005acc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6999      	ldr	r1, [r3, #24]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	021a      	lsls	r2, r3, #8
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	619a      	str	r2, [r3, #24]
      break;
 8005658:	e084      	b.n	8005764 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	4618      	mov	r0, r3
 8005662:	f000 faad 	bl	8005bc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0208 	orr.w	r2, r2, #8
 8005674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69da      	ldr	r2, [r3, #28]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0204 	bic.w	r2, r2, #4
 8005684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69d9      	ldr	r1, [r3, #28]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	61da      	str	r2, [r3, #28]
      break;
 8005698:	e064      	b.n	8005764 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fb05 	bl	8005cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69d9      	ldr	r1, [r3, #28]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	021a      	lsls	r2, r3, #8
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	61da      	str	r2, [r3, #28]
      break;
 80056da:	e043      	b.n	8005764 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fb42 	bl	8005d6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0208 	orr.w	r2, r2, #8
 80056f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0204 	bic.w	r2, r2, #4
 8005706:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	691a      	ldr	r2, [r3, #16]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800571a:	e023      	b.n	8005764 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fb7a 	bl	8005e1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005736:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005746:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	021a      	lsls	r2, r3, #8
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800575c:	e002      	b.n	8005764 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	75fb      	strb	r3, [r7, #23]
      break;
 8005762:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800576c:	7dfb      	ldrb	r3, [r7, #23]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop

08005778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_TIM_ConfigClockSource+0x1c>
 8005790:	2302      	movs	r3, #2
 8005792:	e0b6      	b.n	8005902 <HAL_TIM_ConfigClockSource+0x18a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d0:	d03e      	beq.n	8005850 <HAL_TIM_ConfigClockSource+0xd8>
 80057d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d6:	f200 8087 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x170>
 80057da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057de:	f000 8086 	beq.w	80058ee <HAL_TIM_ConfigClockSource+0x176>
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e6:	d87f      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x170>
 80057e8:	2b70      	cmp	r3, #112	; 0x70
 80057ea:	d01a      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0xaa>
 80057ec:	2b70      	cmp	r3, #112	; 0x70
 80057ee:	d87b      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x170>
 80057f0:	2b60      	cmp	r3, #96	; 0x60
 80057f2:	d050      	beq.n	8005896 <HAL_TIM_ConfigClockSource+0x11e>
 80057f4:	2b60      	cmp	r3, #96	; 0x60
 80057f6:	d877      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x170>
 80057f8:	2b50      	cmp	r3, #80	; 0x50
 80057fa:	d03c      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0xfe>
 80057fc:	2b50      	cmp	r3, #80	; 0x50
 80057fe:	d873      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x170>
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	d058      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x13e>
 8005804:	2b40      	cmp	r3, #64	; 0x40
 8005806:	d86f      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x170>
 8005808:	2b30      	cmp	r3, #48	; 0x30
 800580a:	d064      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x15e>
 800580c:	2b30      	cmp	r3, #48	; 0x30
 800580e:	d86b      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x170>
 8005810:	2b20      	cmp	r3, #32
 8005812:	d060      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x15e>
 8005814:	2b20      	cmp	r3, #32
 8005816:	d867      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x170>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d05c      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x15e>
 800581c:	2b10      	cmp	r3, #16
 800581e:	d05a      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x15e>
 8005820:	e062      	b.n	80058e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6899      	ldr	r1, [r3, #8]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f000 fbc7 	bl	8005fc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	609a      	str	r2, [r3, #8]
      break;
 800584e:	e04f      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	6899      	ldr	r1, [r3, #8]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f000 fbb0 	bl	8005fc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005872:	609a      	str	r2, [r3, #8]
      break;
 8005874:	e03c      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6859      	ldr	r1, [r3, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	461a      	mov	r2, r3
 8005884:	f000 fb24 	bl	8005ed0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2150      	movs	r1, #80	; 0x50
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fb7d 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 8005894:	e02c      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6859      	ldr	r1, [r3, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f000 fb43 	bl	8005f2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2160      	movs	r1, #96	; 0x60
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fb6d 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 80058b4:	e01c      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f000 fb04 	bl	8005ed0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2140      	movs	r1, #64	; 0x40
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fb5d 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 80058d4:	e00c      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4619      	mov	r1, r3
 80058e0:	4610      	mov	r0, r2
 80058e2:	f000 fb54 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 80058e6:	e003      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	73fb      	strb	r3, [r7, #15]
      break;
 80058ec:	e000      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80058ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a2a      	ldr	r2, [pc, #168]	; (80059c8 <TIM_Base_SetConfig+0xbc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_Base_SetConfig+0x20>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592a:	d108      	bne.n	800593e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a21      	ldr	r2, [pc, #132]	; (80059c8 <TIM_Base_SetConfig+0xbc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00b      	beq.n	800595e <TIM_Base_SetConfig+0x52>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594c:	d007      	beq.n	800595e <TIM_Base_SetConfig+0x52>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1e      	ldr	r2, [pc, #120]	; (80059cc <TIM_Base_SetConfig+0xc0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <TIM_Base_SetConfig+0x52>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a1d      	ldr	r2, [pc, #116]	; (80059d0 <TIM_Base_SetConfig+0xc4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d108      	bne.n	8005970 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a0c      	ldr	r2, [pc, #48]	; (80059c8 <TIM_Base_SetConfig+0xbc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d007      	beq.n	80059ac <TIM_Base_SetConfig+0xa0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a0b      	ldr	r2, [pc, #44]	; (80059cc <TIM_Base_SetConfig+0xc0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d003      	beq.n	80059ac <TIM_Base_SetConfig+0xa0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a0a      	ldr	r2, [pc, #40]	; (80059d0 <TIM_Base_SetConfig+0xc4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d103      	bne.n	80059b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	615a      	str	r2, [r3, #20]
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40012c00 	.word	0x40012c00
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40014400 	.word	0x40014400

080059d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0303 	bic.w	r3, r3, #3
 8005a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f023 0302 	bic.w	r3, r3, #2
 8005a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a24      	ldr	r2, [pc, #144]	; (8005ac0 <TIM_OC1_SetConfig+0xec>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d007      	beq.n	8005a44 <TIM_OC1_SetConfig+0x70>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a23      	ldr	r2, [pc, #140]	; (8005ac4 <TIM_OC1_SetConfig+0xf0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_OC1_SetConfig+0x70>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a22      	ldr	r2, [pc, #136]	; (8005ac8 <TIM_OC1_SetConfig+0xf4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d10c      	bne.n	8005a5e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f023 0308 	bic.w	r3, r3, #8
 8005a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f023 0304 	bic.w	r3, r3, #4
 8005a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a17      	ldr	r2, [pc, #92]	; (8005ac0 <TIM_OC1_SetConfig+0xec>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d007      	beq.n	8005a76 <TIM_OC1_SetConfig+0xa2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a16      	ldr	r2, [pc, #88]	; (8005ac4 <TIM_OC1_SetConfig+0xf0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d003      	beq.n	8005a76 <TIM_OC1_SetConfig+0xa2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <TIM_OC1_SetConfig+0xf4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d111      	bne.n	8005a9a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	621a      	str	r2, [r3, #32]
}
 8005ab4:	bf00      	nop
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	40012c00 	.word	0x40012c00
 8005ac4:	40014000 	.word	0x40014000
 8005ac8:	40014400 	.word	0x40014400

08005acc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f023 0210 	bic.w	r2, r3, #16
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	021b      	lsls	r3, r3, #8
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0320 	bic.w	r3, r3, #32
 8005b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a22      	ldr	r2, [pc, #136]	; (8005bb4 <TIM_OC2_SetConfig+0xe8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d10d      	bne.n	8005b4c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a19      	ldr	r2, [pc, #100]	; (8005bb4 <TIM_OC2_SetConfig+0xe8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d007      	beq.n	8005b64 <TIM_OC2_SetConfig+0x98>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a18      	ldr	r2, [pc, #96]	; (8005bb8 <TIM_OC2_SetConfig+0xec>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d003      	beq.n	8005b64 <TIM_OC2_SetConfig+0x98>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a17      	ldr	r2, [pc, #92]	; (8005bbc <TIM_OC2_SetConfig+0xf0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d113      	bne.n	8005b8c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40014400 	.word	0x40014400

08005bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0303 	bic.w	r3, r3, #3
 8005bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a21      	ldr	r2, [pc, #132]	; (8005ca4 <TIM_OC3_SetConfig+0xe4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d10d      	bne.n	8005c3e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a18      	ldr	r2, [pc, #96]	; (8005ca4 <TIM_OC3_SetConfig+0xe4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d007      	beq.n	8005c56 <TIM_OC3_SetConfig+0x96>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <TIM_OC3_SetConfig+0xe8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d003      	beq.n	8005c56 <TIM_OC3_SetConfig+0x96>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a16      	ldr	r2, [pc, #88]	; (8005cac <TIM_OC3_SetConfig+0xec>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d113      	bne.n	8005c7e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	621a      	str	r2, [r3, #32]
}
 8005c98:	bf00      	nop
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	40012c00 	.word	0x40012c00
 8005ca8:	40014000 	.word	0x40014000
 8005cac:	40014400 	.word	0x40014400

08005cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	031b      	lsls	r3, r3, #12
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a14      	ldr	r2, [pc, #80]	; (8005d60 <TIM_OC4_SetConfig+0xb0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <TIM_OC4_SetConfig+0x74>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a13      	ldr	r2, [pc, #76]	; (8005d64 <TIM_OC4_SetConfig+0xb4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_OC4_SetConfig+0x74>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a12      	ldr	r2, [pc, #72]	; (8005d68 <TIM_OC4_SetConfig+0xb8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d109      	bne.n	8005d38 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	019b      	lsls	r3, r3, #6
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40012c00 	.word	0x40012c00
 8005d64:	40014000 	.word	0x40014000
 8005d68:	40014400 	.word	0x40014400

08005d6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005db0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	041b      	lsls	r3, r3, #16
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a13      	ldr	r2, [pc, #76]	; (8005e10 <TIM_OC5_SetConfig+0xa4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d007      	beq.n	8005dd6 <TIM_OC5_SetConfig+0x6a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a12      	ldr	r2, [pc, #72]	; (8005e14 <TIM_OC5_SetConfig+0xa8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d003      	beq.n	8005dd6 <TIM_OC5_SetConfig+0x6a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a11      	ldr	r2, [pc, #68]	; (8005e18 <TIM_OC5_SetConfig+0xac>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d109      	bne.n	8005dea <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	021b      	lsls	r3, r3, #8
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	621a      	str	r2, [r3, #32]
}
 8005e04:	bf00      	nop
 8005e06:	371c      	adds	r7, #28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	40012c00 	.word	0x40012c00
 8005e14:	40014000 	.word	0x40014000
 8005e18:	40014400 	.word	0x40014400

08005e1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	021b      	lsls	r3, r3, #8
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	051b      	lsls	r3, r3, #20
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a14      	ldr	r2, [pc, #80]	; (8005ec4 <TIM_OC6_SetConfig+0xa8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d007      	beq.n	8005e88 <TIM_OC6_SetConfig+0x6c>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a13      	ldr	r2, [pc, #76]	; (8005ec8 <TIM_OC6_SetConfig+0xac>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d003      	beq.n	8005e88 <TIM_OC6_SetConfig+0x6c>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a12      	ldr	r2, [pc, #72]	; (8005ecc <TIM_OC6_SetConfig+0xb0>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d109      	bne.n	8005e9c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	029b      	lsls	r3, r3, #10
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40014000 	.word	0x40014000
 8005ecc:	40014400 	.word	0x40014400

08005ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f023 0201 	bic.w	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f023 030a 	bic.w	r3, r3, #10
 8005f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	621a      	str	r2, [r3, #32]
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b087      	sub	sp, #28
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f023 0210 	bic.w	r2, r3, #16
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	031b      	lsls	r3, r3, #12
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b085      	sub	sp, #20
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f043 0307 	orr.w	r3, r3, #7
 8005fb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	021a      	lsls	r2, r3, #8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	609a      	str	r2, [r3, #8]
}
 8005ff8:	bf00      	nop
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	2201      	movs	r2, #1
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a1a      	ldr	r2, [r3, #32]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	43db      	mvns	r3, r3
 8006026:	401a      	ands	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1a      	ldr	r2, [r3, #32]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	fa01 f303 	lsl.w	r3, r1, r3
 800603c:	431a      	orrs	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	621a      	str	r2, [r3, #32]
}
 8006042:	bf00      	nop
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006064:	2302      	movs	r3, #2
 8006066:	e04f      	b.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a21      	ldr	r2, [pc, #132]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d108      	bne.n	80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006098:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a14      	ldr	r2, [pc, #80]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d009      	beq.n	80060dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d0:	d004      	beq.n	80060dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a10      	ldr	r2, [pc, #64]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d10c      	bne.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	40012c00 	.word	0x40012c00
 8006118:	40014000 	.word	0x40014000

0800611c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006134:	2302      	movs	r3, #2
 8006136:	e060      	b.n	80061fa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	4313      	orrs	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	041b      	lsls	r3, r3, #16
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a14      	ldr	r2, [pc, #80]	; (8006208 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d115      	bne.n	80061e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	051b      	lsls	r3, r3, #20
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	40012c00 	.word	0x40012c00

0800620c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e040      	b.n	80062a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fb fe74 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2224      	movs	r2, #36	; 0x24
 8006238:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0201 	bic.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f8c0 	bl	80063d0 <UART_SetConfig>
 8006250:	4603      	mov	r3, r0
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e022      	b.n	80062a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fb0e 	bl	8006884 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fb95 	bl	80069c8 <UART_CheckIdleState>
 800629e:	4603      	mov	r3, r0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	; 0x28
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	4613      	mov	r3, r2
 80062b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062bc:	2b20      	cmp	r3, #32
 80062be:	f040 8082 	bne.w	80063c6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <HAL_UART_Transmit+0x26>
 80062c8:	88fb      	ldrh	r3, [r7, #6]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e07a      	b.n	80063c8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_UART_Transmit+0x38>
 80062dc:	2302      	movs	r3, #2
 80062de:	e073      	b.n	80063c8 <HAL_UART_Transmit+0x120>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2221      	movs	r2, #33	; 0x21
 80062f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062f6:	f7fc fe69 	bl	8002fcc <HAL_GetTick>
 80062fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	88fa      	ldrh	r2, [r7, #6]
 8006300:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	88fa      	ldrh	r2, [r7, #6]
 8006308:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006314:	d108      	bne.n	8006328 <HAL_UART_Transmit+0x80>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d104      	bne.n	8006328 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800631e:	2300      	movs	r3, #0
 8006320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	e003      	b.n	8006330 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800632c:	2300      	movs	r3, #0
 800632e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006338:	e02d      	b.n	8006396 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2200      	movs	r2, #0
 8006342:	2180      	movs	r1, #128	; 0x80
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 fb88 	bl	8006a5a <UART_WaitOnFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e039      	b.n	80063c8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10b      	bne.n	8006372 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	881a      	ldrh	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006366:	b292      	uxth	r2, r2
 8006368:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	3302      	adds	r3, #2
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	e008      	b.n	8006384 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	781a      	ldrb	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	b292      	uxth	r2, r2
 800637c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	3301      	adds	r3, #1
 8006382:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800638a:	b29b      	uxth	r3, r3
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1cb      	bne.n	800633a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2200      	movs	r2, #0
 80063aa:	2140      	movs	r1, #64	; 0x40
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fb54 	bl	8006a5a <UART_WaitOnFlagUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e005      	b.n	80063c8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	e000      	b.n	80063c8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80063c6:	2302      	movs	r3, #2
  }
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3720      	adds	r7, #32
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063d4:	b08a      	sub	sp, #40	; 0x28
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	431a      	orrs	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	431a      	orrs	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4b9e      	ldr	r3, [pc, #632]	; (8006678 <UART_SetConfig+0x2a8>)
 8006400:	4013      	ands	r3, r2
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	6812      	ldr	r2, [r2, #0]
 8006406:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006408:	430b      	orrs	r3, r1
 800640a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a93      	ldr	r2, [pc, #588]	; (800667c <UART_SetConfig+0x2ac>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006438:	4313      	orrs	r3, r2
 800643a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644c:	430a      	orrs	r2, r1
 800644e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a8a      	ldr	r2, [pc, #552]	; (8006680 <UART_SetConfig+0x2b0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d126      	bne.n	80064a8 <UART_SetConfig+0xd8>
 800645a:	4b8a      	ldr	r3, [pc, #552]	; (8006684 <UART_SetConfig+0x2b4>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	2b03      	cmp	r3, #3
 8006466:	d81b      	bhi.n	80064a0 <UART_SetConfig+0xd0>
 8006468:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <UART_SetConfig+0xa0>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	08006481 	.word	0x08006481
 8006474:	08006491 	.word	0x08006491
 8006478:	08006489 	.word	0x08006489
 800647c:	08006499 	.word	0x08006499
 8006480:	2301      	movs	r3, #1
 8006482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006486:	e0ab      	b.n	80065e0 <UART_SetConfig+0x210>
 8006488:	2302      	movs	r3, #2
 800648a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800648e:	e0a7      	b.n	80065e0 <UART_SetConfig+0x210>
 8006490:	2304      	movs	r3, #4
 8006492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006496:	e0a3      	b.n	80065e0 <UART_SetConfig+0x210>
 8006498:	2308      	movs	r3, #8
 800649a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800649e:	e09f      	b.n	80065e0 <UART_SetConfig+0x210>
 80064a0:	2310      	movs	r3, #16
 80064a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064a6:	e09b      	b.n	80065e0 <UART_SetConfig+0x210>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a76      	ldr	r2, [pc, #472]	; (8006688 <UART_SetConfig+0x2b8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d138      	bne.n	8006524 <UART_SetConfig+0x154>
 80064b2:	4b74      	ldr	r3, [pc, #464]	; (8006684 <UART_SetConfig+0x2b4>)
 80064b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b8:	f003 030c 	and.w	r3, r3, #12
 80064bc:	2b0c      	cmp	r3, #12
 80064be:	d82d      	bhi.n	800651c <UART_SetConfig+0x14c>
 80064c0:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <UART_SetConfig+0xf8>)
 80064c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c6:	bf00      	nop
 80064c8:	080064fd 	.word	0x080064fd
 80064cc:	0800651d 	.word	0x0800651d
 80064d0:	0800651d 	.word	0x0800651d
 80064d4:	0800651d 	.word	0x0800651d
 80064d8:	0800650d 	.word	0x0800650d
 80064dc:	0800651d 	.word	0x0800651d
 80064e0:	0800651d 	.word	0x0800651d
 80064e4:	0800651d 	.word	0x0800651d
 80064e8:	08006505 	.word	0x08006505
 80064ec:	0800651d 	.word	0x0800651d
 80064f0:	0800651d 	.word	0x0800651d
 80064f4:	0800651d 	.word	0x0800651d
 80064f8:	08006515 	.word	0x08006515
 80064fc:	2300      	movs	r3, #0
 80064fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006502:	e06d      	b.n	80065e0 <UART_SetConfig+0x210>
 8006504:	2302      	movs	r3, #2
 8006506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800650a:	e069      	b.n	80065e0 <UART_SetConfig+0x210>
 800650c:	2304      	movs	r3, #4
 800650e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006512:	e065      	b.n	80065e0 <UART_SetConfig+0x210>
 8006514:	2308      	movs	r3, #8
 8006516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800651a:	e061      	b.n	80065e0 <UART_SetConfig+0x210>
 800651c:	2310      	movs	r3, #16
 800651e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006522:	e05d      	b.n	80065e0 <UART_SetConfig+0x210>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a58      	ldr	r2, [pc, #352]	; (800668c <UART_SetConfig+0x2bc>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d125      	bne.n	800657a <UART_SetConfig+0x1aa>
 800652e:	4b55      	ldr	r3, [pc, #340]	; (8006684 <UART_SetConfig+0x2b4>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006538:	2b30      	cmp	r3, #48	; 0x30
 800653a:	d016      	beq.n	800656a <UART_SetConfig+0x19a>
 800653c:	2b30      	cmp	r3, #48	; 0x30
 800653e:	d818      	bhi.n	8006572 <UART_SetConfig+0x1a2>
 8006540:	2b20      	cmp	r3, #32
 8006542:	d00a      	beq.n	800655a <UART_SetConfig+0x18a>
 8006544:	2b20      	cmp	r3, #32
 8006546:	d814      	bhi.n	8006572 <UART_SetConfig+0x1a2>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <UART_SetConfig+0x182>
 800654c:	2b10      	cmp	r3, #16
 800654e:	d008      	beq.n	8006562 <UART_SetConfig+0x192>
 8006550:	e00f      	b.n	8006572 <UART_SetConfig+0x1a2>
 8006552:	2300      	movs	r3, #0
 8006554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006558:	e042      	b.n	80065e0 <UART_SetConfig+0x210>
 800655a:	2302      	movs	r3, #2
 800655c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006560:	e03e      	b.n	80065e0 <UART_SetConfig+0x210>
 8006562:	2304      	movs	r3, #4
 8006564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006568:	e03a      	b.n	80065e0 <UART_SetConfig+0x210>
 800656a:	2308      	movs	r3, #8
 800656c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006570:	e036      	b.n	80065e0 <UART_SetConfig+0x210>
 8006572:	2310      	movs	r3, #16
 8006574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006578:	e032      	b.n	80065e0 <UART_SetConfig+0x210>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a3f      	ldr	r2, [pc, #252]	; (800667c <UART_SetConfig+0x2ac>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d12a      	bne.n	80065da <UART_SetConfig+0x20a>
 8006584:	4b3f      	ldr	r3, [pc, #252]	; (8006684 <UART_SetConfig+0x2b4>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800658e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006592:	d01a      	beq.n	80065ca <UART_SetConfig+0x1fa>
 8006594:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006598:	d81b      	bhi.n	80065d2 <UART_SetConfig+0x202>
 800659a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800659e:	d00c      	beq.n	80065ba <UART_SetConfig+0x1ea>
 80065a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065a4:	d815      	bhi.n	80065d2 <UART_SetConfig+0x202>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <UART_SetConfig+0x1e2>
 80065aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ae:	d008      	beq.n	80065c2 <UART_SetConfig+0x1f2>
 80065b0:	e00f      	b.n	80065d2 <UART_SetConfig+0x202>
 80065b2:	2300      	movs	r3, #0
 80065b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b8:	e012      	b.n	80065e0 <UART_SetConfig+0x210>
 80065ba:	2302      	movs	r3, #2
 80065bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065c0:	e00e      	b.n	80065e0 <UART_SetConfig+0x210>
 80065c2:	2304      	movs	r3, #4
 80065c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065c8:	e00a      	b.n	80065e0 <UART_SetConfig+0x210>
 80065ca:	2308      	movs	r3, #8
 80065cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065d0:	e006      	b.n	80065e0 <UART_SetConfig+0x210>
 80065d2:	2310      	movs	r3, #16
 80065d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065d8:	e002      	b.n	80065e0 <UART_SetConfig+0x210>
 80065da:	2310      	movs	r3, #16
 80065dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a25      	ldr	r2, [pc, #148]	; (800667c <UART_SetConfig+0x2ac>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	f040 808a 	bne.w	8006700 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d824      	bhi.n	800663e <UART_SetConfig+0x26e>
 80065f4:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <UART_SetConfig+0x22c>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006621 	.word	0x08006621
 8006600:	0800663f 	.word	0x0800663f
 8006604:	08006629 	.word	0x08006629
 8006608:	0800663f 	.word	0x0800663f
 800660c:	0800662f 	.word	0x0800662f
 8006610:	0800663f 	.word	0x0800663f
 8006614:	0800663f 	.word	0x0800663f
 8006618:	0800663f 	.word	0x0800663f
 800661c:	08006637 	.word	0x08006637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006620:	f7fd fdd0 	bl	80041c4 <HAL_RCC_GetPCLK1Freq>
 8006624:	61f8      	str	r0, [r7, #28]
        break;
 8006626:	e010      	b.n	800664a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006628:	4b19      	ldr	r3, [pc, #100]	; (8006690 <UART_SetConfig+0x2c0>)
 800662a:	61fb      	str	r3, [r7, #28]
        break;
 800662c:	e00d      	b.n	800664a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800662e:	f7fd fd31 	bl	8004094 <HAL_RCC_GetSysClockFreq>
 8006632:	61f8      	str	r0, [r7, #28]
        break;
 8006634:	e009      	b.n	800664a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800663a:	61fb      	str	r3, [r7, #28]
        break;
 800663c:	e005      	b.n	800664a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006648:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8109 	beq.w	8006864 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	4413      	add	r3, r2
 800665c:	69fa      	ldr	r2, [r7, #28]
 800665e:	429a      	cmp	r2, r3
 8006660:	d305      	bcc.n	800666e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006668:	69fa      	ldr	r2, [r7, #28]
 800666a:	429a      	cmp	r2, r3
 800666c:	d912      	bls.n	8006694 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006674:	e0f6      	b.n	8006864 <UART_SetConfig+0x494>
 8006676:	bf00      	nop
 8006678:	efff69f3 	.word	0xefff69f3
 800667c:	40008000 	.word	0x40008000
 8006680:	40013800 	.word	0x40013800
 8006684:	40021000 	.word	0x40021000
 8006688:	40004400 	.word	0x40004400
 800668c:	40004800 	.word	0x40004800
 8006690:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2200      	movs	r2, #0
 8006698:	461c      	mov	r4, r3
 800669a:	4615      	mov	r5, r2
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	022b      	lsls	r3, r5, #8
 80066a6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80066aa:	0222      	lsls	r2, r4, #8
 80066ac:	68f9      	ldr	r1, [r7, #12]
 80066ae:	6849      	ldr	r1, [r1, #4]
 80066b0:	0849      	lsrs	r1, r1, #1
 80066b2:	2000      	movs	r0, #0
 80066b4:	4688      	mov	r8, r1
 80066b6:	4681      	mov	r9, r0
 80066b8:	eb12 0a08 	adds.w	sl, r2, r8
 80066bc:	eb43 0b09 	adc.w	fp, r3, r9
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	607a      	str	r2, [r7, #4]
 80066ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ce:	4650      	mov	r0, sl
 80066d0:	4659      	mov	r1, fp
 80066d2:	f7fa fa69 	bl	8000ba8 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4613      	mov	r3, r2
 80066dc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066e4:	d308      	bcc.n	80066f8 <UART_SetConfig+0x328>
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ec:	d204      	bcs.n	80066f8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	60da      	str	r2, [r3, #12]
 80066f6:	e0b5      	b.n	8006864 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80066fe:	e0b1      	b.n	8006864 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006708:	d15d      	bne.n	80067c6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800670a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800670e:	2b08      	cmp	r3, #8
 8006710:	d827      	bhi.n	8006762 <UART_SetConfig+0x392>
 8006712:	a201      	add	r2, pc, #4	; (adr r2, 8006718 <UART_SetConfig+0x348>)
 8006714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006718:	0800673d 	.word	0x0800673d
 800671c:	08006745 	.word	0x08006745
 8006720:	0800674d 	.word	0x0800674d
 8006724:	08006763 	.word	0x08006763
 8006728:	08006753 	.word	0x08006753
 800672c:	08006763 	.word	0x08006763
 8006730:	08006763 	.word	0x08006763
 8006734:	08006763 	.word	0x08006763
 8006738:	0800675b 	.word	0x0800675b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800673c:	f7fd fd42 	bl	80041c4 <HAL_RCC_GetPCLK1Freq>
 8006740:	61f8      	str	r0, [r7, #28]
        break;
 8006742:	e014      	b.n	800676e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006744:	f7fd fd54 	bl	80041f0 <HAL_RCC_GetPCLK2Freq>
 8006748:	61f8      	str	r0, [r7, #28]
        break;
 800674a:	e010      	b.n	800676e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800674c:	4b4c      	ldr	r3, [pc, #304]	; (8006880 <UART_SetConfig+0x4b0>)
 800674e:	61fb      	str	r3, [r7, #28]
        break;
 8006750:	e00d      	b.n	800676e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006752:	f7fd fc9f 	bl	8004094 <HAL_RCC_GetSysClockFreq>
 8006756:	61f8      	str	r0, [r7, #28]
        break;
 8006758:	e009      	b.n	800676e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800675a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800675e:	61fb      	str	r3, [r7, #28]
        break;
 8006760:	e005      	b.n	800676e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800676c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d077      	beq.n	8006864 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	005a      	lsls	r2, r3, #1
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	441a      	add	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	fbb2 f3f3 	udiv	r3, r2, r3
 8006788:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	2b0f      	cmp	r3, #15
 800678e:	d916      	bls.n	80067be <UART_SetConfig+0x3ee>
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006796:	d212      	bcs.n	80067be <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	b29b      	uxth	r3, r3
 800679c:	f023 030f 	bic.w	r3, r3, #15
 80067a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	085b      	lsrs	r3, r3, #1
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	8afb      	ldrh	r3, [r7, #22]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	8afa      	ldrh	r2, [r7, #22]
 80067ba:	60da      	str	r2, [r3, #12]
 80067bc:	e052      	b.n	8006864 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80067c4:	e04e      	b.n	8006864 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	d827      	bhi.n	800681e <UART_SetConfig+0x44e>
 80067ce:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <UART_SetConfig+0x404>)
 80067d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	08006801 	.word	0x08006801
 80067dc:	08006809 	.word	0x08006809
 80067e0:	0800681f 	.word	0x0800681f
 80067e4:	0800680f 	.word	0x0800680f
 80067e8:	0800681f 	.word	0x0800681f
 80067ec:	0800681f 	.word	0x0800681f
 80067f0:	0800681f 	.word	0x0800681f
 80067f4:	08006817 	.word	0x08006817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067f8:	f7fd fce4 	bl	80041c4 <HAL_RCC_GetPCLK1Freq>
 80067fc:	61f8      	str	r0, [r7, #28]
        break;
 80067fe:	e014      	b.n	800682a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006800:	f7fd fcf6 	bl	80041f0 <HAL_RCC_GetPCLK2Freq>
 8006804:	61f8      	str	r0, [r7, #28]
        break;
 8006806:	e010      	b.n	800682a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006808:	4b1d      	ldr	r3, [pc, #116]	; (8006880 <UART_SetConfig+0x4b0>)
 800680a:	61fb      	str	r3, [r7, #28]
        break;
 800680c:	e00d      	b.n	800682a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800680e:	f7fd fc41 	bl	8004094 <HAL_RCC_GetSysClockFreq>
 8006812:	61f8      	str	r0, [r7, #28]
        break;
 8006814:	e009      	b.n	800682a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800681a:	61fb      	str	r3, [r7, #28]
        break;
 800681c:	e005      	b.n	800682a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800681e:	2300      	movs	r3, #0
 8006820:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006828:	bf00      	nop
    }

    if (pclk != 0U)
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d019      	beq.n	8006864 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	085a      	lsrs	r2, r3, #1
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	441a      	add	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006842:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	2b0f      	cmp	r3, #15
 8006848:	d909      	bls.n	800685e <UART_SetConfig+0x48e>
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006850:	d205      	bcs.n	800685e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60da      	str	r2, [r3, #12]
 800685c:	e002      	b.n	8006864 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006870:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006874:	4618      	mov	r0, r3
 8006876:	3728      	adds	r7, #40	; 0x28
 8006878:	46bd      	mov	sp, r7
 800687a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800687e:	bf00      	nop
 8006880:	00f42400 	.word	0x00f42400

08006884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d01a      	beq.n	800699a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006982:	d10a      	bne.n	800699a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	605a      	str	r2, [r3, #4]
  }
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069d8:	f7fc faf8 	bl	8002fcc <HAL_GetTick>
 80069dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0308 	and.w	r3, r3, #8
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d10e      	bne.n	8006a0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f82d 	bl	8006a5a <UART_WaitOnFlagUntilTimeout>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e023      	b.n	8006a52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b04      	cmp	r3, #4
 8006a16:	d10e      	bne.n	8006a36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f817 	bl	8006a5a <UART_WaitOnFlagUntilTimeout>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e00d      	b.n	8006a52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b09c      	sub	sp, #112	; 0x70
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	603b      	str	r3, [r7, #0]
 8006a66:	4613      	mov	r3, r2
 8006a68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a6a:	e0a5      	b.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	f000 80a1 	beq.w	8006bb8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a76:	f7fc faa9 	bl	8002fcc <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d302      	bcc.n	8006a8c <UART_WaitOnFlagUntilTimeout+0x32>
 8006a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d13e      	bne.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006aa0:	667b      	str	r3, [r7, #100]	; 0x64
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ab0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e6      	bne.n	8006a8c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3308      	adds	r3, #8
 8006adc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ade:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ae0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e5      	bne.n	8006abe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2220      	movs	r2, #32
 8006af6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2220      	movs	r2, #32
 8006afc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e067      	b.n	8006bda <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d04f      	beq.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b26:	d147      	bne.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b30:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34
 8006b52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b58:	e841 2300 	strex	r3, r2, [r1]
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e6      	bne.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3308      	adds	r3, #8
 8006b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	e853 3f00 	ldrex	r3, [r3]
 8006b72:	613b      	str	r3, [r7, #16]
   return(result);
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3308      	adds	r3, #8
 8006b82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b84:	623a      	str	r2, [r7, #32]
 8006b86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b88:	69f9      	ldr	r1, [r7, #28]
 8006b8a:	6a3a      	ldr	r2, [r7, #32]
 8006b8c:	e841 2300 	strex	r3, r2, [r1]
 8006b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e5      	bne.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e010      	b.n	8006bda <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	69da      	ldr	r2, [r3, #28]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	bf0c      	ite	eq
 8006bc8:	2301      	moveq	r3, #1
 8006bca:	2300      	movne	r3, #0
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	461a      	mov	r2, r3
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	f43f af4a 	beq.w	8006a6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3770      	adds	r7, #112	; 0x70
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <setCSLine>:
#define RES14           14

#define AMT22_DELAY     10

void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	807b      	strh	r3, [r7, #2]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8006bf2:	787a      	ldrb	r2, [r7, #1]
 8006bf4:	887b      	ldrh	r3, [r7, #2]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7fc fca3 	bl	8003544 <HAL_GPIO_WritePin>
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b088      	sub	sp, #32
 8006c0a:	af02      	add	r7, sp, #8
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	461a      	mov	r2, r3
 8006c12:	460b      	mov	r3, r1
 8006c14:	72fb      	strb	r3, [r7, #11]
 8006c16:	4613      	mov	r3, r2
 8006c18:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 8006c1a:	893b      	ldrh	r3, [r7, #8]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff ffde 	bl	8006be2 <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006c26:	200a      	movs	r0, #10
 8006c28:	f000 f8d2 	bl	8006dd0 <delay_us_AMT22>

  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8006c2c:	f107 0217 	add.w	r2, r7, #23
 8006c30:	f107 010b 	add.w	r1, r7, #11
 8006c34:	230a      	movs	r3, #10
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	2301      	movs	r3, #1
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7fd ff2d 	bl	8004a9a <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  //  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006c40:	200a      	movs	r0, #10
 8006c42:	f000 f8c5 	bl	8006dd0 <delay_us_AMT22>

  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 8006c46:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006c4a:	893b      	ldrh	r3, [r7, #8]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff ffc7 	bl	8006be2 <setCSLine>

  return data;
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b08c      	sub	sp, #48	; 0x30
 8006c62:	af02      	add	r7, sp, #8
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	4611      	mov	r1, r2
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	80fb      	strh	r3, [r7, #6]
 8006c70:	4613      	mov	r3, r2
 8006c72:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8;
 8006c74:	88fa      	ldrh	r2, [r7, #6]
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	2100      	movs	r1, #0
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f7ff ffbe 	bl	8006c06 <spiWriteRead>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006c92:	200a      	movs	r0, #10
 8006c94:	f000 f89c 	bl	8006dd0 <delay_us_AMT22>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer);
 8006c98:	88fa      	ldrh	r2, [r7, #6]
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	9301      	str	r3, [sp, #4]
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f7ff ffac 	bl	8006c06 <spiWriteRead>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 8006cb8:	2300      	movs	r3, #0
 8006cba:	623b      	str	r3, [r7, #32]
 8006cbc:	e010      	b.n	8006ce0 <getPositionSPI+0x82>
 8006cbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	fa42 f303 	asr.w	r3, r2, r3
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	b2d9      	uxtb	r1, r3
 8006cce:	f107 0210 	add.w	r2, r7, #16
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	460a      	mov	r2, r1
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	623b      	str	r3, [r7, #32]
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	2b0f      	cmp	r3, #15
 8006ce4:	ddeb      	ble.n	8006cbe <getPositionSPI+0x60>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
 if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8006ce6:	7ffb      	ldrb	r3, [r7, #31]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	7f7a      	ldrb	r2, [r7, #29]
 8006cec:	7efb      	ldrb	r3, [r7, #27]
 8006cee:	4053      	eors	r3, r2
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	7e7b      	ldrb	r3, [r7, #25]
 8006cf4:	4053      	eors	r3, r2
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	4053      	eors	r3, r2
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	7d7b      	ldrb	r3, [r7, #21]
 8006d00:	4053      	eors	r3, r2
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	7cfb      	ldrb	r3, [r7, #19]
 8006d06:	4053      	eors	r3, r2
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	7c7b      	ldrb	r3, [r7, #17]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	bf0c      	ite	eq
 8006d10:	2301      	moveq	r3, #1
 8006d12:	2300      	movne	r3, #0
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	4299      	cmp	r1, r3
 8006d18:	d11e      	bne.n	8006d58 <getPositionSPI+0xfa>
         && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8006d1a:	7fbb      	ldrb	r3, [r7, #30]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	7f3a      	ldrb	r2, [r7, #28]
 8006d20:	7ebb      	ldrb	r3, [r7, #26]
 8006d22:	4053      	eors	r3, r2
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	7e3b      	ldrb	r3, [r7, #24]
 8006d28:	4053      	eors	r3, r2
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	7dbb      	ldrb	r3, [r7, #22]
 8006d2e:	4053      	eors	r3, r2
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	7d3b      	ldrb	r3, [r7, #20]
 8006d34:	4053      	eors	r3, r2
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	7cbb      	ldrb	r3, [r7, #18]
 8006d3a:	4053      	eors	r3, r2
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	7c3b      	ldrb	r3, [r7, #16]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	bf0c      	ite	eq
 8006d44:	2301      	moveq	r3, #1
 8006d46:	2300      	movne	r3, #0
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	4299      	cmp	r1, r3
 8006d4c:	d104      	bne.n	8006d58 <getPositionSPI+0xfa>
   {
     //we got back a good position, so just mask away the checkbits
     currentPosition &= 0x3FFF;
 8006d4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006d54:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006d56:	e002      	b.n	8006d5e <getPositionSPI+0x100>
   }
 else
 {
   currentPosition = 0xFFFF; //bad position
 8006d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d5c:	84fb      	strh	r3, [r7, #38]	; 0x26
 }
  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 8006d5e:	797b      	ldrb	r3, [r7, #5]
 8006d60:	2b0c      	cmp	r3, #12
 8006d62:	d107      	bne.n	8006d74 <getPositionSPI+0x116>
 8006d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d002      	beq.n	8006d74 <getPositionSPI+0x116>
 8006d6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d70:	089b      	lsrs	r3, r3, #2
 8006d72:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 8006d74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3728      	adds	r7, #40	; 0x28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <resetAMT22>:
  //power on delay is 200ms
  HAL_Delay(250);
}

void resetAMT22(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, TIM_HandleTypeDef *timer)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b086      	sub	sp, #24
 8006d82:	af02      	add	r7, sp, #8
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	603b      	str	r3, [r7, #0]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	80fb      	strh	r3, [r7, #6]
  spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer);
 8006d8e:	88fa      	ldrh	r2, [r7, #6]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	2300      	movs	r3, #0
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f7ff ff31 	bl	8006c06 <spiWriteRead>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006da4:	200a      	movs	r0, #10
 8006da6:	f000 f813 	bl	8006dd0 <delay_us_AMT22>

  spiWriteRead(hspi, AMT22_RESET, encoderPort, encoderPin, 1, timer);
 8006daa:	88fa      	ldrh	r2, [r7, #6]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	9301      	str	r3, [sp, #4]
 8006db0:	2301      	movs	r3, #1
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	4613      	mov	r3, r2
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	2160      	movs	r1, #96	; 0x60
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f7ff ff23 	bl	8006c06 <spiWriteRead>

//  delay(timer, 250);
  // delay_us_AMT22(250);
  //power on delay is 200ms
  HAL_Delay(250);
 8006dc0:	20fa      	movs	r0, #250	; 0xfa
 8006dc2:	f7fc f90f 	bl	8002fe4 <HAL_Delay>
}
 8006dc6:	bf00      	nop
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <delay_us_AMT22>:
			passedTime +=timer->Init.Period;
		}
	}
}
void delay_us_AMT22 (uint16_t us)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8006dda:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <delay_us_AMT22+0x30>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2200      	movs	r2, #0
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8006de2:	bf00      	nop
 8006de4:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <delay_us_AMT22+0x30>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dea:	88fb      	ldrh	r3, [r7, #6]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d3f9      	bcc.n	8006de4 <delay_us_AMT22+0x14>
}
 8006df0:	bf00      	nop
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	20000514 	.word	0x20000514

08006e04 <_Znaj>:
 8006e04:	f000 b800 	b.w	8006e08 <_Znwj>

08006e08 <_Znwj>:
 8006e08:	2801      	cmp	r0, #1
 8006e0a:	bf38      	it	cc
 8006e0c:	2001      	movcc	r0, #1
 8006e0e:	b510      	push	{r4, lr}
 8006e10:	4604      	mov	r4, r0
 8006e12:	4620      	mov	r0, r4
 8006e14:	f000 f844 	bl	8006ea0 <malloc>
 8006e18:	b930      	cbnz	r0, 8006e28 <_Znwj+0x20>
 8006e1a:	f000 f807 	bl	8006e2c <_ZSt15get_new_handlerv>
 8006e1e:	b908      	cbnz	r0, 8006e24 <_Znwj+0x1c>
 8006e20:	f000 f80c 	bl	8006e3c <abort>
 8006e24:	4780      	blx	r0
 8006e26:	e7f4      	b.n	8006e12 <_Znwj+0xa>
 8006e28:	bd10      	pop	{r4, pc}
	...

08006e2c <_ZSt15get_new_handlerv>:
 8006e2c:	4b02      	ldr	r3, [pc, #8]	; (8006e38 <_ZSt15get_new_handlerv+0xc>)
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	f3bf 8f5b 	dmb	ish
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	20000634 	.word	0x20000634

08006e3c <abort>:
 8006e3c:	b508      	push	{r3, lr}
 8006e3e:	2006      	movs	r0, #6
 8006e40:	f000 fe62 	bl	8007b08 <raise>
 8006e44:	2001      	movs	r0, #1
 8006e46:	f7fa fda5 	bl	8001994 <_exit>
	...

08006e4c <__errno>:
 8006e4c:	4b01      	ldr	r3, [pc, #4]	; (8006e54 <__errno+0x8>)
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	2000003c 	.word	0x2000003c

08006e58 <__libc_init_array>:
 8006e58:	b570      	push	{r4, r5, r6, lr}
 8006e5a:	4d0d      	ldr	r5, [pc, #52]	; (8006e90 <__libc_init_array+0x38>)
 8006e5c:	4c0d      	ldr	r4, [pc, #52]	; (8006e94 <__libc_init_array+0x3c>)
 8006e5e:	1b64      	subs	r4, r4, r5
 8006e60:	10a4      	asrs	r4, r4, #2
 8006e62:	2600      	movs	r6, #0
 8006e64:	42a6      	cmp	r6, r4
 8006e66:	d109      	bne.n	8006e7c <__libc_init_array+0x24>
 8006e68:	4d0b      	ldr	r5, [pc, #44]	; (8006e98 <__libc_init_array+0x40>)
 8006e6a:	4c0c      	ldr	r4, [pc, #48]	; (8006e9c <__libc_init_array+0x44>)
 8006e6c:	f003 f9c6 	bl	800a1fc <_init>
 8006e70:	1b64      	subs	r4, r4, r5
 8006e72:	10a4      	asrs	r4, r4, #2
 8006e74:	2600      	movs	r6, #0
 8006e76:	42a6      	cmp	r6, r4
 8006e78:	d105      	bne.n	8006e86 <__libc_init_array+0x2e>
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e80:	4798      	blx	r3
 8006e82:	3601      	adds	r6, #1
 8006e84:	e7ee      	b.n	8006e64 <__libc_init_array+0xc>
 8006e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e8a:	4798      	blx	r3
 8006e8c:	3601      	adds	r6, #1
 8006e8e:	e7f2      	b.n	8006e76 <__libc_init_array+0x1e>
 8006e90:	0800ad54 	.word	0x0800ad54
 8006e94:	0800ad54 	.word	0x0800ad54
 8006e98:	0800ad54 	.word	0x0800ad54
 8006e9c:	0800ad5c 	.word	0x0800ad5c

08006ea0 <malloc>:
 8006ea0:	4b02      	ldr	r3, [pc, #8]	; (8006eac <malloc+0xc>)
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	f000 b877 	b.w	8006f98 <_malloc_r>
 8006eaa:	bf00      	nop
 8006eac:	2000003c 	.word	0x2000003c

08006eb0 <memset>:
 8006eb0:	4402      	add	r2, r0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d100      	bne.n	8006eba <memset+0xa>
 8006eb8:	4770      	bx	lr
 8006eba:	f803 1b01 	strb.w	r1, [r3], #1
 8006ebe:	e7f9      	b.n	8006eb4 <memset+0x4>

08006ec0 <_free_r>:
 8006ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ec2:	2900      	cmp	r1, #0
 8006ec4:	d044      	beq.n	8006f50 <_free_r+0x90>
 8006ec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eca:	9001      	str	r0, [sp, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f1a1 0404 	sub.w	r4, r1, #4
 8006ed2:	bfb8      	it	lt
 8006ed4:	18e4      	addlt	r4, r4, r3
 8006ed6:	f002 f8d5 	bl	8009084 <__malloc_lock>
 8006eda:	4a1e      	ldr	r2, [pc, #120]	; (8006f54 <_free_r+0x94>)
 8006edc:	9801      	ldr	r0, [sp, #4]
 8006ede:	6813      	ldr	r3, [r2, #0]
 8006ee0:	b933      	cbnz	r3, 8006ef0 <_free_r+0x30>
 8006ee2:	6063      	str	r3, [r4, #4]
 8006ee4:	6014      	str	r4, [r2, #0]
 8006ee6:	b003      	add	sp, #12
 8006ee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eec:	f002 b8d0 	b.w	8009090 <__malloc_unlock>
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	d908      	bls.n	8006f06 <_free_r+0x46>
 8006ef4:	6825      	ldr	r5, [r4, #0]
 8006ef6:	1961      	adds	r1, r4, r5
 8006ef8:	428b      	cmp	r3, r1
 8006efa:	bf01      	itttt	eq
 8006efc:	6819      	ldreq	r1, [r3, #0]
 8006efe:	685b      	ldreq	r3, [r3, #4]
 8006f00:	1949      	addeq	r1, r1, r5
 8006f02:	6021      	streq	r1, [r4, #0]
 8006f04:	e7ed      	b.n	8006ee2 <_free_r+0x22>
 8006f06:	461a      	mov	r2, r3
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	b10b      	cbz	r3, 8006f10 <_free_r+0x50>
 8006f0c:	42a3      	cmp	r3, r4
 8006f0e:	d9fa      	bls.n	8006f06 <_free_r+0x46>
 8006f10:	6811      	ldr	r1, [r2, #0]
 8006f12:	1855      	adds	r5, r2, r1
 8006f14:	42a5      	cmp	r5, r4
 8006f16:	d10b      	bne.n	8006f30 <_free_r+0x70>
 8006f18:	6824      	ldr	r4, [r4, #0]
 8006f1a:	4421      	add	r1, r4
 8006f1c:	1854      	adds	r4, r2, r1
 8006f1e:	42a3      	cmp	r3, r4
 8006f20:	6011      	str	r1, [r2, #0]
 8006f22:	d1e0      	bne.n	8006ee6 <_free_r+0x26>
 8006f24:	681c      	ldr	r4, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	6053      	str	r3, [r2, #4]
 8006f2a:	4421      	add	r1, r4
 8006f2c:	6011      	str	r1, [r2, #0]
 8006f2e:	e7da      	b.n	8006ee6 <_free_r+0x26>
 8006f30:	d902      	bls.n	8006f38 <_free_r+0x78>
 8006f32:	230c      	movs	r3, #12
 8006f34:	6003      	str	r3, [r0, #0]
 8006f36:	e7d6      	b.n	8006ee6 <_free_r+0x26>
 8006f38:	6825      	ldr	r5, [r4, #0]
 8006f3a:	1961      	adds	r1, r4, r5
 8006f3c:	428b      	cmp	r3, r1
 8006f3e:	bf04      	itt	eq
 8006f40:	6819      	ldreq	r1, [r3, #0]
 8006f42:	685b      	ldreq	r3, [r3, #4]
 8006f44:	6063      	str	r3, [r4, #4]
 8006f46:	bf04      	itt	eq
 8006f48:	1949      	addeq	r1, r1, r5
 8006f4a:	6021      	streq	r1, [r4, #0]
 8006f4c:	6054      	str	r4, [r2, #4]
 8006f4e:	e7ca      	b.n	8006ee6 <_free_r+0x26>
 8006f50:	b003      	add	sp, #12
 8006f52:	bd30      	pop	{r4, r5, pc}
 8006f54:	20000638 	.word	0x20000638

08006f58 <sbrk_aligned>:
 8006f58:	b570      	push	{r4, r5, r6, lr}
 8006f5a:	4e0e      	ldr	r6, [pc, #56]	; (8006f94 <sbrk_aligned+0x3c>)
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	6831      	ldr	r1, [r6, #0]
 8006f60:	4605      	mov	r5, r0
 8006f62:	b911      	cbnz	r1, 8006f6a <sbrk_aligned+0x12>
 8006f64:	f000 fd98 	bl	8007a98 <_sbrk_r>
 8006f68:	6030      	str	r0, [r6, #0]
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f000 fd93 	bl	8007a98 <_sbrk_r>
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	d00a      	beq.n	8006f8c <sbrk_aligned+0x34>
 8006f76:	1cc4      	adds	r4, r0, #3
 8006f78:	f024 0403 	bic.w	r4, r4, #3
 8006f7c:	42a0      	cmp	r0, r4
 8006f7e:	d007      	beq.n	8006f90 <sbrk_aligned+0x38>
 8006f80:	1a21      	subs	r1, r4, r0
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 fd88 	bl	8007a98 <_sbrk_r>
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d101      	bne.n	8006f90 <sbrk_aligned+0x38>
 8006f8c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f90:	4620      	mov	r0, r4
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	2000063c 	.word	0x2000063c

08006f98 <_malloc_r>:
 8006f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9c:	1ccd      	adds	r5, r1, #3
 8006f9e:	f025 0503 	bic.w	r5, r5, #3
 8006fa2:	3508      	adds	r5, #8
 8006fa4:	2d0c      	cmp	r5, #12
 8006fa6:	bf38      	it	cc
 8006fa8:	250c      	movcc	r5, #12
 8006faa:	2d00      	cmp	r5, #0
 8006fac:	4607      	mov	r7, r0
 8006fae:	db01      	blt.n	8006fb4 <_malloc_r+0x1c>
 8006fb0:	42a9      	cmp	r1, r5
 8006fb2:	d905      	bls.n	8006fc0 <_malloc_r+0x28>
 8006fb4:	230c      	movs	r3, #12
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	2600      	movs	r6, #0
 8006fba:	4630      	mov	r0, r6
 8006fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc0:	4e2e      	ldr	r6, [pc, #184]	; (800707c <_malloc_r+0xe4>)
 8006fc2:	f002 f85f 	bl	8009084 <__malloc_lock>
 8006fc6:	6833      	ldr	r3, [r6, #0]
 8006fc8:	461c      	mov	r4, r3
 8006fca:	bb34      	cbnz	r4, 800701a <_malloc_r+0x82>
 8006fcc:	4629      	mov	r1, r5
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f7ff ffc2 	bl	8006f58 <sbrk_aligned>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	d14d      	bne.n	8007076 <_malloc_r+0xde>
 8006fda:	6834      	ldr	r4, [r6, #0]
 8006fdc:	4626      	mov	r6, r4
 8006fde:	2e00      	cmp	r6, #0
 8006fe0:	d140      	bne.n	8007064 <_malloc_r+0xcc>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	eb04 0803 	add.w	r8, r4, r3
 8006fec:	f000 fd54 	bl	8007a98 <_sbrk_r>
 8006ff0:	4580      	cmp	r8, r0
 8006ff2:	d13a      	bne.n	800706a <_malloc_r+0xd2>
 8006ff4:	6821      	ldr	r1, [r4, #0]
 8006ff6:	3503      	adds	r5, #3
 8006ff8:	1a6d      	subs	r5, r5, r1
 8006ffa:	f025 0503 	bic.w	r5, r5, #3
 8006ffe:	3508      	adds	r5, #8
 8007000:	2d0c      	cmp	r5, #12
 8007002:	bf38      	it	cc
 8007004:	250c      	movcc	r5, #12
 8007006:	4629      	mov	r1, r5
 8007008:	4638      	mov	r0, r7
 800700a:	f7ff ffa5 	bl	8006f58 <sbrk_aligned>
 800700e:	3001      	adds	r0, #1
 8007010:	d02b      	beq.n	800706a <_malloc_r+0xd2>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	442b      	add	r3, r5
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	e00e      	b.n	8007038 <_malloc_r+0xa0>
 800701a:	6822      	ldr	r2, [r4, #0]
 800701c:	1b52      	subs	r2, r2, r5
 800701e:	d41e      	bmi.n	800705e <_malloc_r+0xc6>
 8007020:	2a0b      	cmp	r2, #11
 8007022:	d916      	bls.n	8007052 <_malloc_r+0xba>
 8007024:	1961      	adds	r1, r4, r5
 8007026:	42a3      	cmp	r3, r4
 8007028:	6025      	str	r5, [r4, #0]
 800702a:	bf18      	it	ne
 800702c:	6059      	strne	r1, [r3, #4]
 800702e:	6863      	ldr	r3, [r4, #4]
 8007030:	bf08      	it	eq
 8007032:	6031      	streq	r1, [r6, #0]
 8007034:	5162      	str	r2, [r4, r5]
 8007036:	604b      	str	r3, [r1, #4]
 8007038:	4638      	mov	r0, r7
 800703a:	f104 060b 	add.w	r6, r4, #11
 800703e:	f002 f827 	bl	8009090 <__malloc_unlock>
 8007042:	f026 0607 	bic.w	r6, r6, #7
 8007046:	1d23      	adds	r3, r4, #4
 8007048:	1af2      	subs	r2, r6, r3
 800704a:	d0b6      	beq.n	8006fba <_malloc_r+0x22>
 800704c:	1b9b      	subs	r3, r3, r6
 800704e:	50a3      	str	r3, [r4, r2]
 8007050:	e7b3      	b.n	8006fba <_malloc_r+0x22>
 8007052:	6862      	ldr	r2, [r4, #4]
 8007054:	42a3      	cmp	r3, r4
 8007056:	bf0c      	ite	eq
 8007058:	6032      	streq	r2, [r6, #0]
 800705a:	605a      	strne	r2, [r3, #4]
 800705c:	e7ec      	b.n	8007038 <_malloc_r+0xa0>
 800705e:	4623      	mov	r3, r4
 8007060:	6864      	ldr	r4, [r4, #4]
 8007062:	e7b2      	b.n	8006fca <_malloc_r+0x32>
 8007064:	4634      	mov	r4, r6
 8007066:	6876      	ldr	r6, [r6, #4]
 8007068:	e7b9      	b.n	8006fde <_malloc_r+0x46>
 800706a:	230c      	movs	r3, #12
 800706c:	603b      	str	r3, [r7, #0]
 800706e:	4638      	mov	r0, r7
 8007070:	f002 f80e 	bl	8009090 <__malloc_unlock>
 8007074:	e7a1      	b.n	8006fba <_malloc_r+0x22>
 8007076:	6025      	str	r5, [r4, #0]
 8007078:	e7de      	b.n	8007038 <_malloc_r+0xa0>
 800707a:	bf00      	nop
 800707c:	20000638 	.word	0x20000638

08007080 <__cvt>:
 8007080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007084:	ec55 4b10 	vmov	r4, r5, d0
 8007088:	2d00      	cmp	r5, #0
 800708a:	460e      	mov	r6, r1
 800708c:	4619      	mov	r1, r3
 800708e:	462b      	mov	r3, r5
 8007090:	bfbb      	ittet	lt
 8007092:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007096:	461d      	movlt	r5, r3
 8007098:	2300      	movge	r3, #0
 800709a:	232d      	movlt	r3, #45	; 0x2d
 800709c:	700b      	strb	r3, [r1, #0]
 800709e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80070a4:	4691      	mov	r9, r2
 80070a6:	f023 0820 	bic.w	r8, r3, #32
 80070aa:	bfbc      	itt	lt
 80070ac:	4622      	movlt	r2, r4
 80070ae:	4614      	movlt	r4, r2
 80070b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070b4:	d005      	beq.n	80070c2 <__cvt+0x42>
 80070b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070ba:	d100      	bne.n	80070be <__cvt+0x3e>
 80070bc:	3601      	adds	r6, #1
 80070be:	2102      	movs	r1, #2
 80070c0:	e000      	b.n	80070c4 <__cvt+0x44>
 80070c2:	2103      	movs	r1, #3
 80070c4:	ab03      	add	r3, sp, #12
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	ab02      	add	r3, sp, #8
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	ec45 4b10 	vmov	d0, r4, r5
 80070d0:	4653      	mov	r3, sl
 80070d2:	4632      	mov	r2, r6
 80070d4:	f000 ffdc 	bl	8008090 <_dtoa_r>
 80070d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070dc:	4607      	mov	r7, r0
 80070de:	d102      	bne.n	80070e6 <__cvt+0x66>
 80070e0:	f019 0f01 	tst.w	r9, #1
 80070e4:	d022      	beq.n	800712c <__cvt+0xac>
 80070e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070ea:	eb07 0906 	add.w	r9, r7, r6
 80070ee:	d110      	bne.n	8007112 <__cvt+0x92>
 80070f0:	783b      	ldrb	r3, [r7, #0]
 80070f2:	2b30      	cmp	r3, #48	; 0x30
 80070f4:	d10a      	bne.n	800710c <__cvt+0x8c>
 80070f6:	2200      	movs	r2, #0
 80070f8:	2300      	movs	r3, #0
 80070fa:	4620      	mov	r0, r4
 80070fc:	4629      	mov	r1, r5
 80070fe:	f7f9 fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007102:	b918      	cbnz	r0, 800710c <__cvt+0x8c>
 8007104:	f1c6 0601 	rsb	r6, r6, #1
 8007108:	f8ca 6000 	str.w	r6, [sl]
 800710c:	f8da 3000 	ldr.w	r3, [sl]
 8007110:	4499      	add	r9, r3
 8007112:	2200      	movs	r2, #0
 8007114:	2300      	movs	r3, #0
 8007116:	4620      	mov	r0, r4
 8007118:	4629      	mov	r1, r5
 800711a:	f7f9 fcd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800711e:	b108      	cbz	r0, 8007124 <__cvt+0xa4>
 8007120:	f8cd 900c 	str.w	r9, [sp, #12]
 8007124:	2230      	movs	r2, #48	; 0x30
 8007126:	9b03      	ldr	r3, [sp, #12]
 8007128:	454b      	cmp	r3, r9
 800712a:	d307      	bcc.n	800713c <__cvt+0xbc>
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007130:	1bdb      	subs	r3, r3, r7
 8007132:	4638      	mov	r0, r7
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	b004      	add	sp, #16
 8007138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713c:	1c59      	adds	r1, r3, #1
 800713e:	9103      	str	r1, [sp, #12]
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	e7f0      	b.n	8007126 <__cvt+0xa6>

08007144 <__exponent>:
 8007144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007146:	4603      	mov	r3, r0
 8007148:	2900      	cmp	r1, #0
 800714a:	bfb8      	it	lt
 800714c:	4249      	neglt	r1, r1
 800714e:	f803 2b02 	strb.w	r2, [r3], #2
 8007152:	bfb4      	ite	lt
 8007154:	222d      	movlt	r2, #45	; 0x2d
 8007156:	222b      	movge	r2, #43	; 0x2b
 8007158:	2909      	cmp	r1, #9
 800715a:	7042      	strb	r2, [r0, #1]
 800715c:	dd2a      	ble.n	80071b4 <__exponent+0x70>
 800715e:	f10d 0407 	add.w	r4, sp, #7
 8007162:	46a4      	mov	ip, r4
 8007164:	270a      	movs	r7, #10
 8007166:	46a6      	mov	lr, r4
 8007168:	460a      	mov	r2, r1
 800716a:	fb91 f6f7 	sdiv	r6, r1, r7
 800716e:	fb07 1516 	mls	r5, r7, r6, r1
 8007172:	3530      	adds	r5, #48	; 0x30
 8007174:	2a63      	cmp	r2, #99	; 0x63
 8007176:	f104 34ff 	add.w	r4, r4, #4294967295
 800717a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800717e:	4631      	mov	r1, r6
 8007180:	dcf1      	bgt.n	8007166 <__exponent+0x22>
 8007182:	3130      	adds	r1, #48	; 0x30
 8007184:	f1ae 0502 	sub.w	r5, lr, #2
 8007188:	f804 1c01 	strb.w	r1, [r4, #-1]
 800718c:	1c44      	adds	r4, r0, #1
 800718e:	4629      	mov	r1, r5
 8007190:	4561      	cmp	r1, ip
 8007192:	d30a      	bcc.n	80071aa <__exponent+0x66>
 8007194:	f10d 0209 	add.w	r2, sp, #9
 8007198:	eba2 020e 	sub.w	r2, r2, lr
 800719c:	4565      	cmp	r5, ip
 800719e:	bf88      	it	hi
 80071a0:	2200      	movhi	r2, #0
 80071a2:	4413      	add	r3, r2
 80071a4:	1a18      	subs	r0, r3, r0
 80071a6:	b003      	add	sp, #12
 80071a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071b2:	e7ed      	b.n	8007190 <__exponent+0x4c>
 80071b4:	2330      	movs	r3, #48	; 0x30
 80071b6:	3130      	adds	r1, #48	; 0x30
 80071b8:	7083      	strb	r3, [r0, #2]
 80071ba:	70c1      	strb	r1, [r0, #3]
 80071bc:	1d03      	adds	r3, r0, #4
 80071be:	e7f1      	b.n	80071a4 <__exponent+0x60>

080071c0 <_printf_float>:
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	ed2d 8b02 	vpush	{d8}
 80071c8:	b08d      	sub	sp, #52	; 0x34
 80071ca:	460c      	mov	r4, r1
 80071cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80071d0:	4616      	mov	r6, r2
 80071d2:	461f      	mov	r7, r3
 80071d4:	4605      	mov	r5, r0
 80071d6:	f001 ff3f 	bl	8009058 <_localeconv_r>
 80071da:	f8d0 a000 	ldr.w	sl, [r0]
 80071de:	4650      	mov	r0, sl
 80071e0:	f7f8 fff6 	bl	80001d0 <strlen>
 80071e4:	2300      	movs	r3, #0
 80071e6:	930a      	str	r3, [sp, #40]	; 0x28
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	9305      	str	r3, [sp, #20]
 80071ec:	f8d8 3000 	ldr.w	r3, [r8]
 80071f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80071f4:	3307      	adds	r3, #7
 80071f6:	f023 0307 	bic.w	r3, r3, #7
 80071fa:	f103 0208 	add.w	r2, r3, #8
 80071fe:	f8c8 2000 	str.w	r2, [r8]
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800720a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800720e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007212:	9307      	str	r3, [sp, #28]
 8007214:	f8cd 8018 	str.w	r8, [sp, #24]
 8007218:	ee08 0a10 	vmov	s16, r0
 800721c:	4b9f      	ldr	r3, [pc, #636]	; (800749c <_printf_float+0x2dc>)
 800721e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007222:	f04f 32ff 	mov.w	r2, #4294967295
 8007226:	f7f9 fc81 	bl	8000b2c <__aeabi_dcmpun>
 800722a:	bb88      	cbnz	r0, 8007290 <_printf_float+0xd0>
 800722c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007230:	4b9a      	ldr	r3, [pc, #616]	; (800749c <_printf_float+0x2dc>)
 8007232:	f04f 32ff 	mov.w	r2, #4294967295
 8007236:	f7f9 fc5b 	bl	8000af0 <__aeabi_dcmple>
 800723a:	bb48      	cbnz	r0, 8007290 <_printf_float+0xd0>
 800723c:	2200      	movs	r2, #0
 800723e:	2300      	movs	r3, #0
 8007240:	4640      	mov	r0, r8
 8007242:	4649      	mov	r1, r9
 8007244:	f7f9 fc4a 	bl	8000adc <__aeabi_dcmplt>
 8007248:	b110      	cbz	r0, 8007250 <_printf_float+0x90>
 800724a:	232d      	movs	r3, #45	; 0x2d
 800724c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007250:	4b93      	ldr	r3, [pc, #588]	; (80074a0 <_printf_float+0x2e0>)
 8007252:	4894      	ldr	r0, [pc, #592]	; (80074a4 <_printf_float+0x2e4>)
 8007254:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007258:	bf94      	ite	ls
 800725a:	4698      	movls	r8, r3
 800725c:	4680      	movhi	r8, r0
 800725e:	2303      	movs	r3, #3
 8007260:	6123      	str	r3, [r4, #16]
 8007262:	9b05      	ldr	r3, [sp, #20]
 8007264:	f023 0204 	bic.w	r2, r3, #4
 8007268:	6022      	str	r2, [r4, #0]
 800726a:	f04f 0900 	mov.w	r9, #0
 800726e:	9700      	str	r7, [sp, #0]
 8007270:	4633      	mov	r3, r6
 8007272:	aa0b      	add	r2, sp, #44	; 0x2c
 8007274:	4621      	mov	r1, r4
 8007276:	4628      	mov	r0, r5
 8007278:	f000 f9d8 	bl	800762c <_printf_common>
 800727c:	3001      	adds	r0, #1
 800727e:	f040 8090 	bne.w	80073a2 <_printf_float+0x1e2>
 8007282:	f04f 30ff 	mov.w	r0, #4294967295
 8007286:	b00d      	add	sp, #52	; 0x34
 8007288:	ecbd 8b02 	vpop	{d8}
 800728c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007290:	4642      	mov	r2, r8
 8007292:	464b      	mov	r3, r9
 8007294:	4640      	mov	r0, r8
 8007296:	4649      	mov	r1, r9
 8007298:	f7f9 fc48 	bl	8000b2c <__aeabi_dcmpun>
 800729c:	b140      	cbz	r0, 80072b0 <_printf_float+0xf0>
 800729e:	464b      	mov	r3, r9
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bfbc      	itt	lt
 80072a4:	232d      	movlt	r3, #45	; 0x2d
 80072a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072aa:	487f      	ldr	r0, [pc, #508]	; (80074a8 <_printf_float+0x2e8>)
 80072ac:	4b7f      	ldr	r3, [pc, #508]	; (80074ac <_printf_float+0x2ec>)
 80072ae:	e7d1      	b.n	8007254 <_printf_float+0x94>
 80072b0:	6863      	ldr	r3, [r4, #4]
 80072b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80072b6:	9206      	str	r2, [sp, #24]
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	d13f      	bne.n	800733c <_printf_float+0x17c>
 80072bc:	2306      	movs	r3, #6
 80072be:	6063      	str	r3, [r4, #4]
 80072c0:	9b05      	ldr	r3, [sp, #20]
 80072c2:	6861      	ldr	r1, [r4, #4]
 80072c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80072c8:	2300      	movs	r3, #0
 80072ca:	9303      	str	r3, [sp, #12]
 80072cc:	ab0a      	add	r3, sp, #40	; 0x28
 80072ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80072d2:	ab09      	add	r3, sp, #36	; 0x24
 80072d4:	ec49 8b10 	vmov	d0, r8, r9
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	6022      	str	r2, [r4, #0]
 80072dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072e0:	4628      	mov	r0, r5
 80072e2:	f7ff fecd 	bl	8007080 <__cvt>
 80072e6:	9b06      	ldr	r3, [sp, #24]
 80072e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072ea:	2b47      	cmp	r3, #71	; 0x47
 80072ec:	4680      	mov	r8, r0
 80072ee:	d108      	bne.n	8007302 <_printf_float+0x142>
 80072f0:	1cc8      	adds	r0, r1, #3
 80072f2:	db02      	blt.n	80072fa <_printf_float+0x13a>
 80072f4:	6863      	ldr	r3, [r4, #4]
 80072f6:	4299      	cmp	r1, r3
 80072f8:	dd41      	ble.n	800737e <_printf_float+0x1be>
 80072fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80072fe:	fa5f fb8b 	uxtb.w	fp, fp
 8007302:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007306:	d820      	bhi.n	800734a <_printf_float+0x18a>
 8007308:	3901      	subs	r1, #1
 800730a:	465a      	mov	r2, fp
 800730c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007310:	9109      	str	r1, [sp, #36]	; 0x24
 8007312:	f7ff ff17 	bl	8007144 <__exponent>
 8007316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007318:	1813      	adds	r3, r2, r0
 800731a:	2a01      	cmp	r2, #1
 800731c:	4681      	mov	r9, r0
 800731e:	6123      	str	r3, [r4, #16]
 8007320:	dc02      	bgt.n	8007328 <_printf_float+0x168>
 8007322:	6822      	ldr	r2, [r4, #0]
 8007324:	07d2      	lsls	r2, r2, #31
 8007326:	d501      	bpl.n	800732c <_printf_float+0x16c>
 8007328:	3301      	adds	r3, #1
 800732a:	6123      	str	r3, [r4, #16]
 800732c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007330:	2b00      	cmp	r3, #0
 8007332:	d09c      	beq.n	800726e <_printf_float+0xae>
 8007334:	232d      	movs	r3, #45	; 0x2d
 8007336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800733a:	e798      	b.n	800726e <_printf_float+0xae>
 800733c:	9a06      	ldr	r2, [sp, #24]
 800733e:	2a47      	cmp	r2, #71	; 0x47
 8007340:	d1be      	bne.n	80072c0 <_printf_float+0x100>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1bc      	bne.n	80072c0 <_printf_float+0x100>
 8007346:	2301      	movs	r3, #1
 8007348:	e7b9      	b.n	80072be <_printf_float+0xfe>
 800734a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800734e:	d118      	bne.n	8007382 <_printf_float+0x1c2>
 8007350:	2900      	cmp	r1, #0
 8007352:	6863      	ldr	r3, [r4, #4]
 8007354:	dd0b      	ble.n	800736e <_printf_float+0x1ae>
 8007356:	6121      	str	r1, [r4, #16]
 8007358:	b913      	cbnz	r3, 8007360 <_printf_float+0x1a0>
 800735a:	6822      	ldr	r2, [r4, #0]
 800735c:	07d0      	lsls	r0, r2, #31
 800735e:	d502      	bpl.n	8007366 <_printf_float+0x1a6>
 8007360:	3301      	adds	r3, #1
 8007362:	440b      	add	r3, r1
 8007364:	6123      	str	r3, [r4, #16]
 8007366:	65a1      	str	r1, [r4, #88]	; 0x58
 8007368:	f04f 0900 	mov.w	r9, #0
 800736c:	e7de      	b.n	800732c <_printf_float+0x16c>
 800736e:	b913      	cbnz	r3, 8007376 <_printf_float+0x1b6>
 8007370:	6822      	ldr	r2, [r4, #0]
 8007372:	07d2      	lsls	r2, r2, #31
 8007374:	d501      	bpl.n	800737a <_printf_float+0x1ba>
 8007376:	3302      	adds	r3, #2
 8007378:	e7f4      	b.n	8007364 <_printf_float+0x1a4>
 800737a:	2301      	movs	r3, #1
 800737c:	e7f2      	b.n	8007364 <_printf_float+0x1a4>
 800737e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007384:	4299      	cmp	r1, r3
 8007386:	db05      	blt.n	8007394 <_printf_float+0x1d4>
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	6121      	str	r1, [r4, #16]
 800738c:	07d8      	lsls	r0, r3, #31
 800738e:	d5ea      	bpl.n	8007366 <_printf_float+0x1a6>
 8007390:	1c4b      	adds	r3, r1, #1
 8007392:	e7e7      	b.n	8007364 <_printf_float+0x1a4>
 8007394:	2900      	cmp	r1, #0
 8007396:	bfd4      	ite	le
 8007398:	f1c1 0202 	rsble	r2, r1, #2
 800739c:	2201      	movgt	r2, #1
 800739e:	4413      	add	r3, r2
 80073a0:	e7e0      	b.n	8007364 <_printf_float+0x1a4>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	055a      	lsls	r2, r3, #21
 80073a6:	d407      	bmi.n	80073b8 <_printf_float+0x1f8>
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	4642      	mov	r2, r8
 80073ac:	4631      	mov	r1, r6
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	d12c      	bne.n	8007410 <_printf_float+0x250>
 80073b6:	e764      	b.n	8007282 <_printf_float+0xc2>
 80073b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073bc:	f240 80e0 	bls.w	8007580 <_printf_float+0x3c0>
 80073c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073c4:	2200      	movs	r2, #0
 80073c6:	2300      	movs	r3, #0
 80073c8:	f7f9 fb7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d034      	beq.n	800743a <_printf_float+0x27a>
 80073d0:	4a37      	ldr	r2, [pc, #220]	; (80074b0 <_printf_float+0x2f0>)
 80073d2:	2301      	movs	r3, #1
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	f43f af51 	beq.w	8007282 <_printf_float+0xc2>
 80073e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073e4:	429a      	cmp	r2, r3
 80073e6:	db02      	blt.n	80073ee <_printf_float+0x22e>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	07d8      	lsls	r0, r3, #31
 80073ec:	d510      	bpl.n	8007410 <_printf_float+0x250>
 80073ee:	ee18 3a10 	vmov	r3, s16
 80073f2:	4652      	mov	r2, sl
 80073f4:	4631      	mov	r1, r6
 80073f6:	4628      	mov	r0, r5
 80073f8:	47b8      	blx	r7
 80073fa:	3001      	adds	r0, #1
 80073fc:	f43f af41 	beq.w	8007282 <_printf_float+0xc2>
 8007400:	f04f 0800 	mov.w	r8, #0
 8007404:	f104 091a 	add.w	r9, r4, #26
 8007408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800740a:	3b01      	subs	r3, #1
 800740c:	4543      	cmp	r3, r8
 800740e:	dc09      	bgt.n	8007424 <_printf_float+0x264>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	079b      	lsls	r3, r3, #30
 8007414:	f100 8105 	bmi.w	8007622 <_printf_float+0x462>
 8007418:	68e0      	ldr	r0, [r4, #12]
 800741a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800741c:	4298      	cmp	r0, r3
 800741e:	bfb8      	it	lt
 8007420:	4618      	movlt	r0, r3
 8007422:	e730      	b.n	8007286 <_printf_float+0xc6>
 8007424:	2301      	movs	r3, #1
 8007426:	464a      	mov	r2, r9
 8007428:	4631      	mov	r1, r6
 800742a:	4628      	mov	r0, r5
 800742c:	47b8      	blx	r7
 800742e:	3001      	adds	r0, #1
 8007430:	f43f af27 	beq.w	8007282 <_printf_float+0xc2>
 8007434:	f108 0801 	add.w	r8, r8, #1
 8007438:	e7e6      	b.n	8007408 <_printf_float+0x248>
 800743a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	dc39      	bgt.n	80074b4 <_printf_float+0x2f4>
 8007440:	4a1b      	ldr	r2, [pc, #108]	; (80074b0 <_printf_float+0x2f0>)
 8007442:	2301      	movs	r3, #1
 8007444:	4631      	mov	r1, r6
 8007446:	4628      	mov	r0, r5
 8007448:	47b8      	blx	r7
 800744a:	3001      	adds	r0, #1
 800744c:	f43f af19 	beq.w	8007282 <_printf_float+0xc2>
 8007450:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007454:	4313      	orrs	r3, r2
 8007456:	d102      	bne.n	800745e <_printf_float+0x29e>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	07d9      	lsls	r1, r3, #31
 800745c:	d5d8      	bpl.n	8007410 <_printf_float+0x250>
 800745e:	ee18 3a10 	vmov	r3, s16
 8007462:	4652      	mov	r2, sl
 8007464:	4631      	mov	r1, r6
 8007466:	4628      	mov	r0, r5
 8007468:	47b8      	blx	r7
 800746a:	3001      	adds	r0, #1
 800746c:	f43f af09 	beq.w	8007282 <_printf_float+0xc2>
 8007470:	f04f 0900 	mov.w	r9, #0
 8007474:	f104 0a1a 	add.w	sl, r4, #26
 8007478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747a:	425b      	negs	r3, r3
 800747c:	454b      	cmp	r3, r9
 800747e:	dc01      	bgt.n	8007484 <_printf_float+0x2c4>
 8007480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007482:	e792      	b.n	80073aa <_printf_float+0x1ea>
 8007484:	2301      	movs	r3, #1
 8007486:	4652      	mov	r2, sl
 8007488:	4631      	mov	r1, r6
 800748a:	4628      	mov	r0, r5
 800748c:	47b8      	blx	r7
 800748e:	3001      	adds	r0, #1
 8007490:	f43f aef7 	beq.w	8007282 <_printf_float+0xc2>
 8007494:	f109 0901 	add.w	r9, r9, #1
 8007498:	e7ee      	b.n	8007478 <_printf_float+0x2b8>
 800749a:	bf00      	nop
 800749c:	7fefffff 	.word	0x7fefffff
 80074a0:	0800a2dc 	.word	0x0800a2dc
 80074a4:	0800a2e0 	.word	0x0800a2e0
 80074a8:	0800a2e8 	.word	0x0800a2e8
 80074ac:	0800a2e4 	.word	0x0800a2e4
 80074b0:	0800a2ec 	.word	0x0800a2ec
 80074b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074b8:	429a      	cmp	r2, r3
 80074ba:	bfa8      	it	ge
 80074bc:	461a      	movge	r2, r3
 80074be:	2a00      	cmp	r2, #0
 80074c0:	4691      	mov	r9, r2
 80074c2:	dc37      	bgt.n	8007534 <_printf_float+0x374>
 80074c4:	f04f 0b00 	mov.w	fp, #0
 80074c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074cc:	f104 021a 	add.w	r2, r4, #26
 80074d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074d2:	9305      	str	r3, [sp, #20]
 80074d4:	eba3 0309 	sub.w	r3, r3, r9
 80074d8:	455b      	cmp	r3, fp
 80074da:	dc33      	bgt.n	8007544 <_printf_float+0x384>
 80074dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074e0:	429a      	cmp	r2, r3
 80074e2:	db3b      	blt.n	800755c <_printf_float+0x39c>
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	07da      	lsls	r2, r3, #31
 80074e8:	d438      	bmi.n	800755c <_printf_float+0x39c>
 80074ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ec:	9a05      	ldr	r2, [sp, #20]
 80074ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074f0:	1a9a      	subs	r2, r3, r2
 80074f2:	eba3 0901 	sub.w	r9, r3, r1
 80074f6:	4591      	cmp	r9, r2
 80074f8:	bfa8      	it	ge
 80074fa:	4691      	movge	r9, r2
 80074fc:	f1b9 0f00 	cmp.w	r9, #0
 8007500:	dc35      	bgt.n	800756e <_printf_float+0x3ae>
 8007502:	f04f 0800 	mov.w	r8, #0
 8007506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800750a:	f104 0a1a 	add.w	sl, r4, #26
 800750e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007512:	1a9b      	subs	r3, r3, r2
 8007514:	eba3 0309 	sub.w	r3, r3, r9
 8007518:	4543      	cmp	r3, r8
 800751a:	f77f af79 	ble.w	8007410 <_printf_float+0x250>
 800751e:	2301      	movs	r3, #1
 8007520:	4652      	mov	r2, sl
 8007522:	4631      	mov	r1, r6
 8007524:	4628      	mov	r0, r5
 8007526:	47b8      	blx	r7
 8007528:	3001      	adds	r0, #1
 800752a:	f43f aeaa 	beq.w	8007282 <_printf_float+0xc2>
 800752e:	f108 0801 	add.w	r8, r8, #1
 8007532:	e7ec      	b.n	800750e <_printf_float+0x34e>
 8007534:	4613      	mov	r3, r2
 8007536:	4631      	mov	r1, r6
 8007538:	4642      	mov	r2, r8
 800753a:	4628      	mov	r0, r5
 800753c:	47b8      	blx	r7
 800753e:	3001      	adds	r0, #1
 8007540:	d1c0      	bne.n	80074c4 <_printf_float+0x304>
 8007542:	e69e      	b.n	8007282 <_printf_float+0xc2>
 8007544:	2301      	movs	r3, #1
 8007546:	4631      	mov	r1, r6
 8007548:	4628      	mov	r0, r5
 800754a:	9205      	str	r2, [sp, #20]
 800754c:	47b8      	blx	r7
 800754e:	3001      	adds	r0, #1
 8007550:	f43f ae97 	beq.w	8007282 <_printf_float+0xc2>
 8007554:	9a05      	ldr	r2, [sp, #20]
 8007556:	f10b 0b01 	add.w	fp, fp, #1
 800755a:	e7b9      	b.n	80074d0 <_printf_float+0x310>
 800755c:	ee18 3a10 	vmov	r3, s16
 8007560:	4652      	mov	r2, sl
 8007562:	4631      	mov	r1, r6
 8007564:	4628      	mov	r0, r5
 8007566:	47b8      	blx	r7
 8007568:	3001      	adds	r0, #1
 800756a:	d1be      	bne.n	80074ea <_printf_float+0x32a>
 800756c:	e689      	b.n	8007282 <_printf_float+0xc2>
 800756e:	9a05      	ldr	r2, [sp, #20]
 8007570:	464b      	mov	r3, r9
 8007572:	4442      	add	r2, r8
 8007574:	4631      	mov	r1, r6
 8007576:	4628      	mov	r0, r5
 8007578:	47b8      	blx	r7
 800757a:	3001      	adds	r0, #1
 800757c:	d1c1      	bne.n	8007502 <_printf_float+0x342>
 800757e:	e680      	b.n	8007282 <_printf_float+0xc2>
 8007580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007582:	2a01      	cmp	r2, #1
 8007584:	dc01      	bgt.n	800758a <_printf_float+0x3ca>
 8007586:	07db      	lsls	r3, r3, #31
 8007588:	d538      	bpl.n	80075fc <_printf_float+0x43c>
 800758a:	2301      	movs	r3, #1
 800758c:	4642      	mov	r2, r8
 800758e:	4631      	mov	r1, r6
 8007590:	4628      	mov	r0, r5
 8007592:	47b8      	blx	r7
 8007594:	3001      	adds	r0, #1
 8007596:	f43f ae74 	beq.w	8007282 <_printf_float+0xc2>
 800759a:	ee18 3a10 	vmov	r3, s16
 800759e:	4652      	mov	r2, sl
 80075a0:	4631      	mov	r1, r6
 80075a2:	4628      	mov	r0, r5
 80075a4:	47b8      	blx	r7
 80075a6:	3001      	adds	r0, #1
 80075a8:	f43f ae6b 	beq.w	8007282 <_printf_float+0xc2>
 80075ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075b0:	2200      	movs	r2, #0
 80075b2:	2300      	movs	r3, #0
 80075b4:	f7f9 fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 80075b8:	b9d8      	cbnz	r0, 80075f2 <_printf_float+0x432>
 80075ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075bc:	f108 0201 	add.w	r2, r8, #1
 80075c0:	3b01      	subs	r3, #1
 80075c2:	4631      	mov	r1, r6
 80075c4:	4628      	mov	r0, r5
 80075c6:	47b8      	blx	r7
 80075c8:	3001      	adds	r0, #1
 80075ca:	d10e      	bne.n	80075ea <_printf_float+0x42a>
 80075cc:	e659      	b.n	8007282 <_printf_float+0xc2>
 80075ce:	2301      	movs	r3, #1
 80075d0:	4652      	mov	r2, sl
 80075d2:	4631      	mov	r1, r6
 80075d4:	4628      	mov	r0, r5
 80075d6:	47b8      	blx	r7
 80075d8:	3001      	adds	r0, #1
 80075da:	f43f ae52 	beq.w	8007282 <_printf_float+0xc2>
 80075de:	f108 0801 	add.w	r8, r8, #1
 80075e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e4:	3b01      	subs	r3, #1
 80075e6:	4543      	cmp	r3, r8
 80075e8:	dcf1      	bgt.n	80075ce <_printf_float+0x40e>
 80075ea:	464b      	mov	r3, r9
 80075ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075f0:	e6dc      	b.n	80073ac <_printf_float+0x1ec>
 80075f2:	f04f 0800 	mov.w	r8, #0
 80075f6:	f104 0a1a 	add.w	sl, r4, #26
 80075fa:	e7f2      	b.n	80075e2 <_printf_float+0x422>
 80075fc:	2301      	movs	r3, #1
 80075fe:	4642      	mov	r2, r8
 8007600:	e7df      	b.n	80075c2 <_printf_float+0x402>
 8007602:	2301      	movs	r3, #1
 8007604:	464a      	mov	r2, r9
 8007606:	4631      	mov	r1, r6
 8007608:	4628      	mov	r0, r5
 800760a:	47b8      	blx	r7
 800760c:	3001      	adds	r0, #1
 800760e:	f43f ae38 	beq.w	8007282 <_printf_float+0xc2>
 8007612:	f108 0801 	add.w	r8, r8, #1
 8007616:	68e3      	ldr	r3, [r4, #12]
 8007618:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800761a:	1a5b      	subs	r3, r3, r1
 800761c:	4543      	cmp	r3, r8
 800761e:	dcf0      	bgt.n	8007602 <_printf_float+0x442>
 8007620:	e6fa      	b.n	8007418 <_printf_float+0x258>
 8007622:	f04f 0800 	mov.w	r8, #0
 8007626:	f104 0919 	add.w	r9, r4, #25
 800762a:	e7f4      	b.n	8007616 <_printf_float+0x456>

0800762c <_printf_common>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	4616      	mov	r6, r2
 8007632:	4699      	mov	r9, r3
 8007634:	688a      	ldr	r2, [r1, #8]
 8007636:	690b      	ldr	r3, [r1, #16]
 8007638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800763c:	4293      	cmp	r3, r2
 800763e:	bfb8      	it	lt
 8007640:	4613      	movlt	r3, r2
 8007642:	6033      	str	r3, [r6, #0]
 8007644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007648:	4607      	mov	r7, r0
 800764a:	460c      	mov	r4, r1
 800764c:	b10a      	cbz	r2, 8007652 <_printf_common+0x26>
 800764e:	3301      	adds	r3, #1
 8007650:	6033      	str	r3, [r6, #0]
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	0699      	lsls	r1, r3, #26
 8007656:	bf42      	ittt	mi
 8007658:	6833      	ldrmi	r3, [r6, #0]
 800765a:	3302      	addmi	r3, #2
 800765c:	6033      	strmi	r3, [r6, #0]
 800765e:	6825      	ldr	r5, [r4, #0]
 8007660:	f015 0506 	ands.w	r5, r5, #6
 8007664:	d106      	bne.n	8007674 <_printf_common+0x48>
 8007666:	f104 0a19 	add.w	sl, r4, #25
 800766a:	68e3      	ldr	r3, [r4, #12]
 800766c:	6832      	ldr	r2, [r6, #0]
 800766e:	1a9b      	subs	r3, r3, r2
 8007670:	42ab      	cmp	r3, r5
 8007672:	dc26      	bgt.n	80076c2 <_printf_common+0x96>
 8007674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007678:	1e13      	subs	r3, r2, #0
 800767a:	6822      	ldr	r2, [r4, #0]
 800767c:	bf18      	it	ne
 800767e:	2301      	movne	r3, #1
 8007680:	0692      	lsls	r2, r2, #26
 8007682:	d42b      	bmi.n	80076dc <_printf_common+0xb0>
 8007684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007688:	4649      	mov	r1, r9
 800768a:	4638      	mov	r0, r7
 800768c:	47c0      	blx	r8
 800768e:	3001      	adds	r0, #1
 8007690:	d01e      	beq.n	80076d0 <_printf_common+0xa4>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	68e5      	ldr	r5, [r4, #12]
 8007696:	6832      	ldr	r2, [r6, #0]
 8007698:	f003 0306 	and.w	r3, r3, #6
 800769c:	2b04      	cmp	r3, #4
 800769e:	bf08      	it	eq
 80076a0:	1aad      	subeq	r5, r5, r2
 80076a2:	68a3      	ldr	r3, [r4, #8]
 80076a4:	6922      	ldr	r2, [r4, #16]
 80076a6:	bf0c      	ite	eq
 80076a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076ac:	2500      	movne	r5, #0
 80076ae:	4293      	cmp	r3, r2
 80076b0:	bfc4      	itt	gt
 80076b2:	1a9b      	subgt	r3, r3, r2
 80076b4:	18ed      	addgt	r5, r5, r3
 80076b6:	2600      	movs	r6, #0
 80076b8:	341a      	adds	r4, #26
 80076ba:	42b5      	cmp	r5, r6
 80076bc:	d11a      	bne.n	80076f4 <_printf_common+0xc8>
 80076be:	2000      	movs	r0, #0
 80076c0:	e008      	b.n	80076d4 <_printf_common+0xa8>
 80076c2:	2301      	movs	r3, #1
 80076c4:	4652      	mov	r2, sl
 80076c6:	4649      	mov	r1, r9
 80076c8:	4638      	mov	r0, r7
 80076ca:	47c0      	blx	r8
 80076cc:	3001      	adds	r0, #1
 80076ce:	d103      	bne.n	80076d8 <_printf_common+0xac>
 80076d0:	f04f 30ff 	mov.w	r0, #4294967295
 80076d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d8:	3501      	adds	r5, #1
 80076da:	e7c6      	b.n	800766a <_printf_common+0x3e>
 80076dc:	18e1      	adds	r1, r4, r3
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	2030      	movs	r0, #48	; 0x30
 80076e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076e6:	4422      	add	r2, r4
 80076e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076f0:	3302      	adds	r3, #2
 80076f2:	e7c7      	b.n	8007684 <_printf_common+0x58>
 80076f4:	2301      	movs	r3, #1
 80076f6:	4622      	mov	r2, r4
 80076f8:	4649      	mov	r1, r9
 80076fa:	4638      	mov	r0, r7
 80076fc:	47c0      	blx	r8
 80076fe:	3001      	adds	r0, #1
 8007700:	d0e6      	beq.n	80076d0 <_printf_common+0xa4>
 8007702:	3601      	adds	r6, #1
 8007704:	e7d9      	b.n	80076ba <_printf_common+0x8e>
	...

08007708 <_printf_i>:
 8007708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800770c:	7e0f      	ldrb	r7, [r1, #24]
 800770e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007710:	2f78      	cmp	r7, #120	; 0x78
 8007712:	4691      	mov	r9, r2
 8007714:	4680      	mov	r8, r0
 8007716:	460c      	mov	r4, r1
 8007718:	469a      	mov	sl, r3
 800771a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800771e:	d807      	bhi.n	8007730 <_printf_i+0x28>
 8007720:	2f62      	cmp	r7, #98	; 0x62
 8007722:	d80a      	bhi.n	800773a <_printf_i+0x32>
 8007724:	2f00      	cmp	r7, #0
 8007726:	f000 80d8 	beq.w	80078da <_printf_i+0x1d2>
 800772a:	2f58      	cmp	r7, #88	; 0x58
 800772c:	f000 80a3 	beq.w	8007876 <_printf_i+0x16e>
 8007730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007738:	e03a      	b.n	80077b0 <_printf_i+0xa8>
 800773a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800773e:	2b15      	cmp	r3, #21
 8007740:	d8f6      	bhi.n	8007730 <_printf_i+0x28>
 8007742:	a101      	add	r1, pc, #4	; (adr r1, 8007748 <_printf_i+0x40>)
 8007744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007748:	080077a1 	.word	0x080077a1
 800774c:	080077b5 	.word	0x080077b5
 8007750:	08007731 	.word	0x08007731
 8007754:	08007731 	.word	0x08007731
 8007758:	08007731 	.word	0x08007731
 800775c:	08007731 	.word	0x08007731
 8007760:	080077b5 	.word	0x080077b5
 8007764:	08007731 	.word	0x08007731
 8007768:	08007731 	.word	0x08007731
 800776c:	08007731 	.word	0x08007731
 8007770:	08007731 	.word	0x08007731
 8007774:	080078c1 	.word	0x080078c1
 8007778:	080077e5 	.word	0x080077e5
 800777c:	080078a3 	.word	0x080078a3
 8007780:	08007731 	.word	0x08007731
 8007784:	08007731 	.word	0x08007731
 8007788:	080078e3 	.word	0x080078e3
 800778c:	08007731 	.word	0x08007731
 8007790:	080077e5 	.word	0x080077e5
 8007794:	08007731 	.word	0x08007731
 8007798:	08007731 	.word	0x08007731
 800779c:	080078ab 	.word	0x080078ab
 80077a0:	682b      	ldr	r3, [r5, #0]
 80077a2:	1d1a      	adds	r2, r3, #4
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	602a      	str	r2, [r5, #0]
 80077a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077b0:	2301      	movs	r3, #1
 80077b2:	e0a3      	b.n	80078fc <_printf_i+0x1f4>
 80077b4:	6820      	ldr	r0, [r4, #0]
 80077b6:	6829      	ldr	r1, [r5, #0]
 80077b8:	0606      	lsls	r6, r0, #24
 80077ba:	f101 0304 	add.w	r3, r1, #4
 80077be:	d50a      	bpl.n	80077d6 <_printf_i+0xce>
 80077c0:	680e      	ldr	r6, [r1, #0]
 80077c2:	602b      	str	r3, [r5, #0]
 80077c4:	2e00      	cmp	r6, #0
 80077c6:	da03      	bge.n	80077d0 <_printf_i+0xc8>
 80077c8:	232d      	movs	r3, #45	; 0x2d
 80077ca:	4276      	negs	r6, r6
 80077cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d0:	485e      	ldr	r0, [pc, #376]	; (800794c <_printf_i+0x244>)
 80077d2:	230a      	movs	r3, #10
 80077d4:	e019      	b.n	800780a <_printf_i+0x102>
 80077d6:	680e      	ldr	r6, [r1, #0]
 80077d8:	602b      	str	r3, [r5, #0]
 80077da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077de:	bf18      	it	ne
 80077e0:	b236      	sxthne	r6, r6
 80077e2:	e7ef      	b.n	80077c4 <_printf_i+0xbc>
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	6820      	ldr	r0, [r4, #0]
 80077e8:	1d19      	adds	r1, r3, #4
 80077ea:	6029      	str	r1, [r5, #0]
 80077ec:	0601      	lsls	r1, r0, #24
 80077ee:	d501      	bpl.n	80077f4 <_printf_i+0xec>
 80077f0:	681e      	ldr	r6, [r3, #0]
 80077f2:	e002      	b.n	80077fa <_printf_i+0xf2>
 80077f4:	0646      	lsls	r6, r0, #25
 80077f6:	d5fb      	bpl.n	80077f0 <_printf_i+0xe8>
 80077f8:	881e      	ldrh	r6, [r3, #0]
 80077fa:	4854      	ldr	r0, [pc, #336]	; (800794c <_printf_i+0x244>)
 80077fc:	2f6f      	cmp	r7, #111	; 0x6f
 80077fe:	bf0c      	ite	eq
 8007800:	2308      	moveq	r3, #8
 8007802:	230a      	movne	r3, #10
 8007804:	2100      	movs	r1, #0
 8007806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800780a:	6865      	ldr	r5, [r4, #4]
 800780c:	60a5      	str	r5, [r4, #8]
 800780e:	2d00      	cmp	r5, #0
 8007810:	bfa2      	ittt	ge
 8007812:	6821      	ldrge	r1, [r4, #0]
 8007814:	f021 0104 	bicge.w	r1, r1, #4
 8007818:	6021      	strge	r1, [r4, #0]
 800781a:	b90e      	cbnz	r6, 8007820 <_printf_i+0x118>
 800781c:	2d00      	cmp	r5, #0
 800781e:	d04d      	beq.n	80078bc <_printf_i+0x1b4>
 8007820:	4615      	mov	r5, r2
 8007822:	fbb6 f1f3 	udiv	r1, r6, r3
 8007826:	fb03 6711 	mls	r7, r3, r1, r6
 800782a:	5dc7      	ldrb	r7, [r0, r7]
 800782c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007830:	4637      	mov	r7, r6
 8007832:	42bb      	cmp	r3, r7
 8007834:	460e      	mov	r6, r1
 8007836:	d9f4      	bls.n	8007822 <_printf_i+0x11a>
 8007838:	2b08      	cmp	r3, #8
 800783a:	d10b      	bne.n	8007854 <_printf_i+0x14c>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	07de      	lsls	r6, r3, #31
 8007840:	d508      	bpl.n	8007854 <_printf_i+0x14c>
 8007842:	6923      	ldr	r3, [r4, #16]
 8007844:	6861      	ldr	r1, [r4, #4]
 8007846:	4299      	cmp	r1, r3
 8007848:	bfde      	ittt	le
 800784a:	2330      	movle	r3, #48	; 0x30
 800784c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007850:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007854:	1b52      	subs	r2, r2, r5
 8007856:	6122      	str	r2, [r4, #16]
 8007858:	f8cd a000 	str.w	sl, [sp]
 800785c:	464b      	mov	r3, r9
 800785e:	aa03      	add	r2, sp, #12
 8007860:	4621      	mov	r1, r4
 8007862:	4640      	mov	r0, r8
 8007864:	f7ff fee2 	bl	800762c <_printf_common>
 8007868:	3001      	adds	r0, #1
 800786a:	d14c      	bne.n	8007906 <_printf_i+0x1fe>
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	b004      	add	sp, #16
 8007872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007876:	4835      	ldr	r0, [pc, #212]	; (800794c <_printf_i+0x244>)
 8007878:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800787c:	6829      	ldr	r1, [r5, #0]
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	f851 6b04 	ldr.w	r6, [r1], #4
 8007884:	6029      	str	r1, [r5, #0]
 8007886:	061d      	lsls	r5, r3, #24
 8007888:	d514      	bpl.n	80078b4 <_printf_i+0x1ac>
 800788a:	07df      	lsls	r7, r3, #31
 800788c:	bf44      	itt	mi
 800788e:	f043 0320 	orrmi.w	r3, r3, #32
 8007892:	6023      	strmi	r3, [r4, #0]
 8007894:	b91e      	cbnz	r6, 800789e <_printf_i+0x196>
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	f023 0320 	bic.w	r3, r3, #32
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	2310      	movs	r3, #16
 80078a0:	e7b0      	b.n	8007804 <_printf_i+0xfc>
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	f043 0320 	orr.w	r3, r3, #32
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	2378      	movs	r3, #120	; 0x78
 80078ac:	4828      	ldr	r0, [pc, #160]	; (8007950 <_printf_i+0x248>)
 80078ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078b2:	e7e3      	b.n	800787c <_printf_i+0x174>
 80078b4:	0659      	lsls	r1, r3, #25
 80078b6:	bf48      	it	mi
 80078b8:	b2b6      	uxthmi	r6, r6
 80078ba:	e7e6      	b.n	800788a <_printf_i+0x182>
 80078bc:	4615      	mov	r5, r2
 80078be:	e7bb      	b.n	8007838 <_printf_i+0x130>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	6826      	ldr	r6, [r4, #0]
 80078c4:	6961      	ldr	r1, [r4, #20]
 80078c6:	1d18      	adds	r0, r3, #4
 80078c8:	6028      	str	r0, [r5, #0]
 80078ca:	0635      	lsls	r5, r6, #24
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	d501      	bpl.n	80078d4 <_printf_i+0x1cc>
 80078d0:	6019      	str	r1, [r3, #0]
 80078d2:	e002      	b.n	80078da <_printf_i+0x1d2>
 80078d4:	0670      	lsls	r0, r6, #25
 80078d6:	d5fb      	bpl.n	80078d0 <_printf_i+0x1c8>
 80078d8:	8019      	strh	r1, [r3, #0]
 80078da:	2300      	movs	r3, #0
 80078dc:	6123      	str	r3, [r4, #16]
 80078de:	4615      	mov	r5, r2
 80078e0:	e7ba      	b.n	8007858 <_printf_i+0x150>
 80078e2:	682b      	ldr	r3, [r5, #0]
 80078e4:	1d1a      	adds	r2, r3, #4
 80078e6:	602a      	str	r2, [r5, #0]
 80078e8:	681d      	ldr	r5, [r3, #0]
 80078ea:	6862      	ldr	r2, [r4, #4]
 80078ec:	2100      	movs	r1, #0
 80078ee:	4628      	mov	r0, r5
 80078f0:	f7f8 fc76 	bl	80001e0 <memchr>
 80078f4:	b108      	cbz	r0, 80078fa <_printf_i+0x1f2>
 80078f6:	1b40      	subs	r0, r0, r5
 80078f8:	6060      	str	r0, [r4, #4]
 80078fa:	6863      	ldr	r3, [r4, #4]
 80078fc:	6123      	str	r3, [r4, #16]
 80078fe:	2300      	movs	r3, #0
 8007900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007904:	e7a8      	b.n	8007858 <_printf_i+0x150>
 8007906:	6923      	ldr	r3, [r4, #16]
 8007908:	462a      	mov	r2, r5
 800790a:	4649      	mov	r1, r9
 800790c:	4640      	mov	r0, r8
 800790e:	47d0      	blx	sl
 8007910:	3001      	adds	r0, #1
 8007912:	d0ab      	beq.n	800786c <_printf_i+0x164>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	079b      	lsls	r3, r3, #30
 8007918:	d413      	bmi.n	8007942 <_printf_i+0x23a>
 800791a:	68e0      	ldr	r0, [r4, #12]
 800791c:	9b03      	ldr	r3, [sp, #12]
 800791e:	4298      	cmp	r0, r3
 8007920:	bfb8      	it	lt
 8007922:	4618      	movlt	r0, r3
 8007924:	e7a4      	b.n	8007870 <_printf_i+0x168>
 8007926:	2301      	movs	r3, #1
 8007928:	4632      	mov	r2, r6
 800792a:	4649      	mov	r1, r9
 800792c:	4640      	mov	r0, r8
 800792e:	47d0      	blx	sl
 8007930:	3001      	adds	r0, #1
 8007932:	d09b      	beq.n	800786c <_printf_i+0x164>
 8007934:	3501      	adds	r5, #1
 8007936:	68e3      	ldr	r3, [r4, #12]
 8007938:	9903      	ldr	r1, [sp, #12]
 800793a:	1a5b      	subs	r3, r3, r1
 800793c:	42ab      	cmp	r3, r5
 800793e:	dcf2      	bgt.n	8007926 <_printf_i+0x21e>
 8007940:	e7eb      	b.n	800791a <_printf_i+0x212>
 8007942:	2500      	movs	r5, #0
 8007944:	f104 0619 	add.w	r6, r4, #25
 8007948:	e7f5      	b.n	8007936 <_printf_i+0x22e>
 800794a:	bf00      	nop
 800794c:	0800a2ee 	.word	0x0800a2ee
 8007950:	0800a2ff 	.word	0x0800a2ff

08007954 <_perror_r>:
 8007954:	6983      	ldr	r3, [r0, #24]
 8007956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007958:	68c4      	ldr	r4, [r0, #12]
 800795a:	4605      	mov	r5, r0
 800795c:	460e      	mov	r6, r1
 800795e:	b90b      	cbnz	r3, 8007964 <_perror_r+0x10>
 8007960:	f001 fadc 	bl	8008f1c <__sinit>
 8007964:	4b43      	ldr	r3, [pc, #268]	; (8007a74 <_perror_r+0x120>)
 8007966:	429c      	cmp	r4, r3
 8007968:	d132      	bne.n	80079d0 <_perror_r+0x7c>
 800796a:	686c      	ldr	r4, [r5, #4]
 800796c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800796e:	07d8      	lsls	r0, r3, #31
 8007970:	d405      	bmi.n	800797e <_perror_r+0x2a>
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	0599      	lsls	r1, r3, #22
 8007976:	d402      	bmi.n	800797e <_perror_r+0x2a>
 8007978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800797a:	f001 fb72 	bl	8009062 <__retarget_lock_acquire_recursive>
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f001 f9f9 	bl	8008d78 <_fflush_r>
 8007986:	bb6e      	cbnz	r6, 80079e4 <_perror_r+0x90>
 8007988:	6829      	ldr	r1, [r5, #0]
 800798a:	ab01      	add	r3, sp, #4
 800798c:	2201      	movs	r2, #1
 800798e:	4628      	mov	r0, r5
 8007990:	f000 f8d6 	bl	8007b40 <_strerror_r>
 8007994:	4607      	mov	r7, r0
 8007996:	2800      	cmp	r0, #0
 8007998:	d14f      	bne.n	8007a3a <_perror_r+0xe6>
 800799a:	4837      	ldr	r0, [pc, #220]	; (8007a78 <_perror_r+0x124>)
 800799c:	4f36      	ldr	r7, [pc, #216]	; (8007a78 <_perror_r+0x124>)
 800799e:	f7f8 fc17 	bl	80001d0 <strlen>
 80079a2:	4606      	mov	r6, r0
 80079a4:	b156      	cbz	r6, 80079bc <_perror_r+0x68>
 80079a6:	4620      	mov	r0, r4
 80079a8:	f001 fa22 	bl	8008df0 <fileno>
 80079ac:	4633      	mov	r3, r6
 80079ae:	4601      	mov	r1, r0
 80079b0:	463a      	mov	r2, r7
 80079b2:	4628      	mov	r0, r5
 80079b4:	f000 facc 	bl	8007f50 <_write_r>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	da51      	bge.n	8007a60 <_perror_r+0x10c>
 80079bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079c6:	07d2      	lsls	r2, r2, #31
 80079c8:	81a3      	strh	r3, [r4, #12]
 80079ca:	d54c      	bpl.n	8007a66 <_perror_r+0x112>
 80079cc:	b003      	add	sp, #12
 80079ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d0:	4b2a      	ldr	r3, [pc, #168]	; (8007a7c <_perror_r+0x128>)
 80079d2:	429c      	cmp	r4, r3
 80079d4:	d101      	bne.n	80079da <_perror_r+0x86>
 80079d6:	68ac      	ldr	r4, [r5, #8]
 80079d8:	e7c8      	b.n	800796c <_perror_r+0x18>
 80079da:	4b29      	ldr	r3, [pc, #164]	; (8007a80 <_perror_r+0x12c>)
 80079dc:	429c      	cmp	r4, r3
 80079de:	bf08      	it	eq
 80079e0:	68ec      	ldreq	r4, [r5, #12]
 80079e2:	e7c3      	b.n	800796c <_perror_r+0x18>
 80079e4:	7833      	ldrb	r3, [r6, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0ce      	beq.n	8007988 <_perror_r+0x34>
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7f8 fbf0 	bl	80001d0 <strlen>
 80079f0:	4607      	mov	r7, r0
 80079f2:	b157      	cbz	r7, 8007a0a <_perror_r+0xb6>
 80079f4:	4620      	mov	r0, r4
 80079f6:	f001 f9fb 	bl	8008df0 <fileno>
 80079fa:	463b      	mov	r3, r7
 80079fc:	4601      	mov	r1, r0
 80079fe:	4632      	mov	r2, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	f000 faa5 	bl	8007f50 <_write_r>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	da14      	bge.n	8007a34 <_perror_r+0xe0>
 8007a0a:	481e      	ldr	r0, [pc, #120]	; (8007a84 <_perror_r+0x130>)
 8007a0c:	4f1d      	ldr	r7, [pc, #116]	; (8007a84 <_perror_r+0x130>)
 8007a0e:	f7f8 fbdf 	bl	80001d0 <strlen>
 8007a12:	4606      	mov	r6, r0
 8007a14:	2e00      	cmp	r6, #0
 8007a16:	d0b7      	beq.n	8007988 <_perror_r+0x34>
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f001 f9e9 	bl	8008df0 <fileno>
 8007a1e:	4633      	mov	r3, r6
 8007a20:	4601      	mov	r1, r0
 8007a22:	463a      	mov	r2, r7
 8007a24:	4628      	mov	r0, r5
 8007a26:	f000 fa93 	bl	8007f50 <_write_r>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	dbac      	blt.n	8007988 <_perror_r+0x34>
 8007a2e:	1a36      	subs	r6, r6, r0
 8007a30:	4407      	add	r7, r0
 8007a32:	e7ef      	b.n	8007a14 <_perror_r+0xc0>
 8007a34:	1a3f      	subs	r7, r7, r0
 8007a36:	4406      	add	r6, r0
 8007a38:	e7db      	b.n	80079f2 <_perror_r+0x9e>
 8007a3a:	f7f8 fbc9 	bl	80001d0 <strlen>
 8007a3e:	4606      	mov	r6, r0
 8007a40:	2e00      	cmp	r6, #0
 8007a42:	d0aa      	beq.n	800799a <_perror_r+0x46>
 8007a44:	4620      	mov	r0, r4
 8007a46:	f001 f9d3 	bl	8008df0 <fileno>
 8007a4a:	4633      	mov	r3, r6
 8007a4c:	4601      	mov	r1, r0
 8007a4e:	463a      	mov	r2, r7
 8007a50:	4628      	mov	r0, r5
 8007a52:	f000 fa7d 	bl	8007f50 <_write_r>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	db9f      	blt.n	800799a <_perror_r+0x46>
 8007a5a:	1a36      	subs	r6, r6, r0
 8007a5c:	4407      	add	r7, r0
 8007a5e:	e7ef      	b.n	8007a40 <_perror_r+0xec>
 8007a60:	1a36      	subs	r6, r6, r0
 8007a62:	4407      	add	r7, r0
 8007a64:	e79e      	b.n	80079a4 <_perror_r+0x50>
 8007a66:	059b      	lsls	r3, r3, #22
 8007a68:	d4b0      	bmi.n	80079cc <_perror_r+0x78>
 8007a6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a6c:	f001 fafa 	bl	8009064 <__retarget_lock_release_recursive>
 8007a70:	e7ac      	b.n	80079cc <_perror_r+0x78>
 8007a72:	bf00      	nop
 8007a74:	0800aa58 	.word	0x0800aa58
 8007a78:	0800ac3f 	.word	0x0800ac3f
 8007a7c:	0800aa78 	.word	0x0800aa78
 8007a80:	0800aa38 	.word	0x0800aa38
 8007a84:	0800ac0f 	.word	0x0800ac0f

08007a88 <perror>:
 8007a88:	4b02      	ldr	r3, [pc, #8]	; (8007a94 <perror+0xc>)
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	f7ff bf61 	b.w	8007954 <_perror_r>
 8007a92:	bf00      	nop
 8007a94:	2000003c 	.word	0x2000003c

08007a98 <_sbrk_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4d06      	ldr	r5, [pc, #24]	; (8007ab4 <_sbrk_r+0x1c>)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	4608      	mov	r0, r1
 8007aa2:	602b      	str	r3, [r5, #0]
 8007aa4:	f7f9 ffee 	bl	8001a84 <_sbrk>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d102      	bne.n	8007ab2 <_sbrk_r+0x1a>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <_sbrk_r+0x1a>
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	20000644 	.word	0x20000644

08007ab8 <_raise_r>:
 8007ab8:	291f      	cmp	r1, #31
 8007aba:	b538      	push	{r3, r4, r5, lr}
 8007abc:	4604      	mov	r4, r0
 8007abe:	460d      	mov	r5, r1
 8007ac0:	d904      	bls.n	8007acc <_raise_r+0x14>
 8007ac2:	2316      	movs	r3, #22
 8007ac4:	6003      	str	r3, [r0, #0]
 8007ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
 8007acc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ace:	b112      	cbz	r2, 8007ad6 <_raise_r+0x1e>
 8007ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ad4:	b94b      	cbnz	r3, 8007aea <_raise_r+0x32>
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 f830 	bl	8007b3c <_getpid_r>
 8007adc:	462a      	mov	r2, r5
 8007ade:	4601      	mov	r1, r0
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ae6:	f000 b817 	b.w	8007b18 <_kill_r>
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d00a      	beq.n	8007b04 <_raise_r+0x4c>
 8007aee:	1c59      	adds	r1, r3, #1
 8007af0:	d103      	bne.n	8007afa <_raise_r+0x42>
 8007af2:	2316      	movs	r3, #22
 8007af4:	6003      	str	r3, [r0, #0]
 8007af6:	2001      	movs	r0, #1
 8007af8:	e7e7      	b.n	8007aca <_raise_r+0x12>
 8007afa:	2400      	movs	r4, #0
 8007afc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b00:	4628      	mov	r0, r5
 8007b02:	4798      	blx	r3
 8007b04:	2000      	movs	r0, #0
 8007b06:	e7e0      	b.n	8007aca <_raise_r+0x12>

08007b08 <raise>:
 8007b08:	4b02      	ldr	r3, [pc, #8]	; (8007b14 <raise+0xc>)
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	6818      	ldr	r0, [r3, #0]
 8007b0e:	f7ff bfd3 	b.w	8007ab8 <_raise_r>
 8007b12:	bf00      	nop
 8007b14:	2000003c 	.word	0x2000003c

08007b18 <_kill_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4d07      	ldr	r5, [pc, #28]	; (8007b38 <_kill_r+0x20>)
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	4604      	mov	r4, r0
 8007b20:	4608      	mov	r0, r1
 8007b22:	4611      	mov	r1, r2
 8007b24:	602b      	str	r3, [r5, #0]
 8007b26:	f7f9 ff25 	bl	8001974 <_kill>
 8007b2a:	1c43      	adds	r3, r0, #1
 8007b2c:	d102      	bne.n	8007b34 <_kill_r+0x1c>
 8007b2e:	682b      	ldr	r3, [r5, #0]
 8007b30:	b103      	cbz	r3, 8007b34 <_kill_r+0x1c>
 8007b32:	6023      	str	r3, [r4, #0]
 8007b34:	bd38      	pop	{r3, r4, r5, pc}
 8007b36:	bf00      	nop
 8007b38:	20000644 	.word	0x20000644

08007b3c <_getpid_r>:
 8007b3c:	f7f9 bf12 	b.w	8001964 <_getpid>

08007b40 <_strerror_r>:
 8007b40:	b510      	push	{r4, lr}
 8007b42:	4604      	mov	r4, r0
 8007b44:	4608      	mov	r0, r1
 8007b46:	4611      	mov	r1, r2
 8007b48:	288e      	cmp	r0, #142	; 0x8e
 8007b4a:	f200 8130 	bhi.w	8007dae <_strerror_r+0x26e>
 8007b4e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8007b52:	0139      	.short	0x0139
 8007b54:	0092008f 	.word	0x0092008f
 8007b58:	00960094 	.word	0x00960094
 8007b5c:	009a0098 	.word	0x009a0098
 8007b60:	009e009c 	.word	0x009e009c
 8007b64:	00a400a2 	.word	0x00a400a2
 8007b68:	00aa00a8 	.word	0x00aa00a8
 8007b6c:	00ae00ac 	.word	0x00ae00ac
 8007b70:	00b0012e 	.word	0x00b0012e
 8007b74:	00b400b2 	.word	0x00b400b2
 8007b78:	00b800b6 	.word	0x00b800b6
 8007b7c:	00c000be 	.word	0x00c000be
 8007b80:	00c800c6 	.word	0x00c800c6
 8007b84:	00cc00ca 	.word	0x00cc00ca
 8007b88:	00d200ce 	.word	0x00d200ce
 8007b8c:	00d800d6 	.word	0x00d800d6
 8007b90:	00dc00da 	.word	0x00dc00da
 8007b94:	00e000de 	.word	0x00e000de
 8007b98:	00e400e2 	.word	0x00e400e2
 8007b9c:	012e012e 	.word	0x012e012e
 8007ba0:	012e012e 	.word	0x012e012e
 8007ba4:	012e012e 	.word	0x012e012e
 8007ba8:	012e012e 	.word	0x012e012e
 8007bac:	00ec00e8 	.word	0x00ec00e8
 8007bb0:	012e012e 	.word	0x012e012e
 8007bb4:	012e012e 	.word	0x012e012e
 8007bb8:	012e012e 	.word	0x012e012e
 8007bbc:	012e012e 	.word	0x012e012e
 8007bc0:	012e012e 	.word	0x012e012e
 8007bc4:	012e012e 	.word	0x012e012e
 8007bc8:	00ee012e 	.word	0x00ee012e
 8007bcc:	00f00108 	.word	0x00f00108
 8007bd0:	012e00f2 	.word	0x012e00f2
 8007bd4:	012e012e 	.word	0x012e012e
 8007bd8:	012e00f4 	.word	0x012e00f4
 8007bdc:	012e012e 	.word	0x012e012e
 8007be0:	012e00f6 	.word	0x012e00f6
 8007be4:	00fa012e 	.word	0x00fa012e
 8007be8:	012e012e 	.word	0x012e012e
 8007bec:	012e00fc 	.word	0x012e00fc
 8007bf0:	012e012e 	.word	0x012e012e
 8007bf4:	012e012e 	.word	0x012e012e
 8007bf8:	012e012e 	.word	0x012e012e
 8007bfc:	012e012e 	.word	0x012e012e
 8007c00:	00fe012e 	.word	0x00fe012e
 8007c04:	0100012e 	.word	0x0100012e
 8007c08:	01040102 	.word	0x01040102
 8007c0c:	012e012e 	.word	0x012e012e
 8007c10:	012e0126 	.word	0x012e0126
 8007c14:	012e012e 	.word	0x012e012e
 8007c18:	012e012e 	.word	0x012e012e
 8007c1c:	012e012e 	.word	0x012e012e
 8007c20:	0114012e 	.word	0x0114012e
 8007c24:	010a0106 	.word	0x010a0106
 8007c28:	010e010c 	.word	0x010e010c
 8007c2c:	012e0110 	.word	0x012e0110
 8007c30:	01160112 	.word	0x01160112
 8007c34:	00ea011a 	.word	0x00ea011a
 8007c38:	012c00c2 	.word	0x012c00c2
 8007c3c:	00d000ba 	.word	0x00d000ba
 8007c40:	00a000bc 	.word	0x00a000bc
 8007c44:	012a00a6 	.word	0x012a00a6
 8007c48:	012e00f8 	.word	0x012e00f8
 8007c4c:	00c40118 	.word	0x00c40118
 8007c50:	011c011e 	.word	0x011c011e
 8007c54:	012e012e 	.word	0x012e012e
 8007c58:	012e012e 	.word	0x012e012e
 8007c5c:	00d4012e 	.word	0x00d4012e
 8007c60:	012e012e 	.word	0x012e012e
 8007c64:	00e6012e 	.word	0x00e6012e
 8007c68:	01200128 	.word	0x01200128
 8007c6c:	01240122 	.word	0x01240122
 8007c70:	4b55      	ldr	r3, [pc, #340]	; (8007dc8 <_strerror_r+0x288>)
 8007c72:	4618      	mov	r0, r3
 8007c74:	bd10      	pop	{r4, pc}
 8007c76:	4b55      	ldr	r3, [pc, #340]	; (8007dcc <_strerror_r+0x28c>)
 8007c78:	e7fb      	b.n	8007c72 <_strerror_r+0x132>
 8007c7a:	4b55      	ldr	r3, [pc, #340]	; (8007dd0 <_strerror_r+0x290>)
 8007c7c:	e7f9      	b.n	8007c72 <_strerror_r+0x132>
 8007c7e:	4b55      	ldr	r3, [pc, #340]	; (8007dd4 <_strerror_r+0x294>)
 8007c80:	e7f7      	b.n	8007c72 <_strerror_r+0x132>
 8007c82:	4b55      	ldr	r3, [pc, #340]	; (8007dd8 <_strerror_r+0x298>)
 8007c84:	e7f5      	b.n	8007c72 <_strerror_r+0x132>
 8007c86:	4b55      	ldr	r3, [pc, #340]	; (8007ddc <_strerror_r+0x29c>)
 8007c88:	e7f3      	b.n	8007c72 <_strerror_r+0x132>
 8007c8a:	4b55      	ldr	r3, [pc, #340]	; (8007de0 <_strerror_r+0x2a0>)
 8007c8c:	e7f1      	b.n	8007c72 <_strerror_r+0x132>
 8007c8e:	4b55      	ldr	r3, [pc, #340]	; (8007de4 <_strerror_r+0x2a4>)
 8007c90:	e7ef      	b.n	8007c72 <_strerror_r+0x132>
 8007c92:	4b55      	ldr	r3, [pc, #340]	; (8007de8 <_strerror_r+0x2a8>)
 8007c94:	e7ed      	b.n	8007c72 <_strerror_r+0x132>
 8007c96:	4b55      	ldr	r3, [pc, #340]	; (8007dec <_strerror_r+0x2ac>)
 8007c98:	e7eb      	b.n	8007c72 <_strerror_r+0x132>
 8007c9a:	4b55      	ldr	r3, [pc, #340]	; (8007df0 <_strerror_r+0x2b0>)
 8007c9c:	e7e9      	b.n	8007c72 <_strerror_r+0x132>
 8007c9e:	4b55      	ldr	r3, [pc, #340]	; (8007df4 <_strerror_r+0x2b4>)
 8007ca0:	e7e7      	b.n	8007c72 <_strerror_r+0x132>
 8007ca2:	4b55      	ldr	r3, [pc, #340]	; (8007df8 <_strerror_r+0x2b8>)
 8007ca4:	e7e5      	b.n	8007c72 <_strerror_r+0x132>
 8007ca6:	4b55      	ldr	r3, [pc, #340]	; (8007dfc <_strerror_r+0x2bc>)
 8007ca8:	e7e3      	b.n	8007c72 <_strerror_r+0x132>
 8007caa:	4b55      	ldr	r3, [pc, #340]	; (8007e00 <_strerror_r+0x2c0>)
 8007cac:	e7e1      	b.n	8007c72 <_strerror_r+0x132>
 8007cae:	4b55      	ldr	r3, [pc, #340]	; (8007e04 <_strerror_r+0x2c4>)
 8007cb0:	e7df      	b.n	8007c72 <_strerror_r+0x132>
 8007cb2:	4b55      	ldr	r3, [pc, #340]	; (8007e08 <_strerror_r+0x2c8>)
 8007cb4:	e7dd      	b.n	8007c72 <_strerror_r+0x132>
 8007cb6:	4b55      	ldr	r3, [pc, #340]	; (8007e0c <_strerror_r+0x2cc>)
 8007cb8:	e7db      	b.n	8007c72 <_strerror_r+0x132>
 8007cba:	4b55      	ldr	r3, [pc, #340]	; (8007e10 <_strerror_r+0x2d0>)
 8007cbc:	e7d9      	b.n	8007c72 <_strerror_r+0x132>
 8007cbe:	4b55      	ldr	r3, [pc, #340]	; (8007e14 <_strerror_r+0x2d4>)
 8007cc0:	e7d7      	b.n	8007c72 <_strerror_r+0x132>
 8007cc2:	4b55      	ldr	r3, [pc, #340]	; (8007e18 <_strerror_r+0x2d8>)
 8007cc4:	e7d5      	b.n	8007c72 <_strerror_r+0x132>
 8007cc6:	4b55      	ldr	r3, [pc, #340]	; (8007e1c <_strerror_r+0x2dc>)
 8007cc8:	e7d3      	b.n	8007c72 <_strerror_r+0x132>
 8007cca:	4b55      	ldr	r3, [pc, #340]	; (8007e20 <_strerror_r+0x2e0>)
 8007ccc:	e7d1      	b.n	8007c72 <_strerror_r+0x132>
 8007cce:	4b55      	ldr	r3, [pc, #340]	; (8007e24 <_strerror_r+0x2e4>)
 8007cd0:	e7cf      	b.n	8007c72 <_strerror_r+0x132>
 8007cd2:	4b55      	ldr	r3, [pc, #340]	; (8007e28 <_strerror_r+0x2e8>)
 8007cd4:	e7cd      	b.n	8007c72 <_strerror_r+0x132>
 8007cd6:	4b55      	ldr	r3, [pc, #340]	; (8007e2c <_strerror_r+0x2ec>)
 8007cd8:	e7cb      	b.n	8007c72 <_strerror_r+0x132>
 8007cda:	4b55      	ldr	r3, [pc, #340]	; (8007e30 <_strerror_r+0x2f0>)
 8007cdc:	e7c9      	b.n	8007c72 <_strerror_r+0x132>
 8007cde:	4b55      	ldr	r3, [pc, #340]	; (8007e34 <_strerror_r+0x2f4>)
 8007ce0:	e7c7      	b.n	8007c72 <_strerror_r+0x132>
 8007ce2:	4b55      	ldr	r3, [pc, #340]	; (8007e38 <_strerror_r+0x2f8>)
 8007ce4:	e7c5      	b.n	8007c72 <_strerror_r+0x132>
 8007ce6:	4b55      	ldr	r3, [pc, #340]	; (8007e3c <_strerror_r+0x2fc>)
 8007ce8:	e7c3      	b.n	8007c72 <_strerror_r+0x132>
 8007cea:	4b55      	ldr	r3, [pc, #340]	; (8007e40 <_strerror_r+0x300>)
 8007cec:	e7c1      	b.n	8007c72 <_strerror_r+0x132>
 8007cee:	4b55      	ldr	r3, [pc, #340]	; (8007e44 <_strerror_r+0x304>)
 8007cf0:	e7bf      	b.n	8007c72 <_strerror_r+0x132>
 8007cf2:	4b55      	ldr	r3, [pc, #340]	; (8007e48 <_strerror_r+0x308>)
 8007cf4:	e7bd      	b.n	8007c72 <_strerror_r+0x132>
 8007cf6:	4b55      	ldr	r3, [pc, #340]	; (8007e4c <_strerror_r+0x30c>)
 8007cf8:	e7bb      	b.n	8007c72 <_strerror_r+0x132>
 8007cfa:	4b55      	ldr	r3, [pc, #340]	; (8007e50 <_strerror_r+0x310>)
 8007cfc:	e7b9      	b.n	8007c72 <_strerror_r+0x132>
 8007cfe:	4b55      	ldr	r3, [pc, #340]	; (8007e54 <_strerror_r+0x314>)
 8007d00:	e7b7      	b.n	8007c72 <_strerror_r+0x132>
 8007d02:	4b55      	ldr	r3, [pc, #340]	; (8007e58 <_strerror_r+0x318>)
 8007d04:	e7b5      	b.n	8007c72 <_strerror_r+0x132>
 8007d06:	4b55      	ldr	r3, [pc, #340]	; (8007e5c <_strerror_r+0x31c>)
 8007d08:	e7b3      	b.n	8007c72 <_strerror_r+0x132>
 8007d0a:	4b55      	ldr	r3, [pc, #340]	; (8007e60 <_strerror_r+0x320>)
 8007d0c:	e7b1      	b.n	8007c72 <_strerror_r+0x132>
 8007d0e:	4b55      	ldr	r3, [pc, #340]	; (8007e64 <_strerror_r+0x324>)
 8007d10:	e7af      	b.n	8007c72 <_strerror_r+0x132>
 8007d12:	4b55      	ldr	r3, [pc, #340]	; (8007e68 <_strerror_r+0x328>)
 8007d14:	e7ad      	b.n	8007c72 <_strerror_r+0x132>
 8007d16:	4b55      	ldr	r3, [pc, #340]	; (8007e6c <_strerror_r+0x32c>)
 8007d18:	e7ab      	b.n	8007c72 <_strerror_r+0x132>
 8007d1a:	4b55      	ldr	r3, [pc, #340]	; (8007e70 <_strerror_r+0x330>)
 8007d1c:	e7a9      	b.n	8007c72 <_strerror_r+0x132>
 8007d1e:	4b55      	ldr	r3, [pc, #340]	; (8007e74 <_strerror_r+0x334>)
 8007d20:	e7a7      	b.n	8007c72 <_strerror_r+0x132>
 8007d22:	4b55      	ldr	r3, [pc, #340]	; (8007e78 <_strerror_r+0x338>)
 8007d24:	e7a5      	b.n	8007c72 <_strerror_r+0x132>
 8007d26:	4b55      	ldr	r3, [pc, #340]	; (8007e7c <_strerror_r+0x33c>)
 8007d28:	e7a3      	b.n	8007c72 <_strerror_r+0x132>
 8007d2a:	4b55      	ldr	r3, [pc, #340]	; (8007e80 <_strerror_r+0x340>)
 8007d2c:	e7a1      	b.n	8007c72 <_strerror_r+0x132>
 8007d2e:	4b55      	ldr	r3, [pc, #340]	; (8007e84 <_strerror_r+0x344>)
 8007d30:	e79f      	b.n	8007c72 <_strerror_r+0x132>
 8007d32:	4b55      	ldr	r3, [pc, #340]	; (8007e88 <_strerror_r+0x348>)
 8007d34:	e79d      	b.n	8007c72 <_strerror_r+0x132>
 8007d36:	4b55      	ldr	r3, [pc, #340]	; (8007e8c <_strerror_r+0x34c>)
 8007d38:	e79b      	b.n	8007c72 <_strerror_r+0x132>
 8007d3a:	4b55      	ldr	r3, [pc, #340]	; (8007e90 <_strerror_r+0x350>)
 8007d3c:	e799      	b.n	8007c72 <_strerror_r+0x132>
 8007d3e:	4b55      	ldr	r3, [pc, #340]	; (8007e94 <_strerror_r+0x354>)
 8007d40:	e797      	b.n	8007c72 <_strerror_r+0x132>
 8007d42:	4b55      	ldr	r3, [pc, #340]	; (8007e98 <_strerror_r+0x358>)
 8007d44:	e795      	b.n	8007c72 <_strerror_r+0x132>
 8007d46:	4b55      	ldr	r3, [pc, #340]	; (8007e9c <_strerror_r+0x35c>)
 8007d48:	e793      	b.n	8007c72 <_strerror_r+0x132>
 8007d4a:	4b55      	ldr	r3, [pc, #340]	; (8007ea0 <_strerror_r+0x360>)
 8007d4c:	e791      	b.n	8007c72 <_strerror_r+0x132>
 8007d4e:	4b55      	ldr	r3, [pc, #340]	; (8007ea4 <_strerror_r+0x364>)
 8007d50:	e78f      	b.n	8007c72 <_strerror_r+0x132>
 8007d52:	4b55      	ldr	r3, [pc, #340]	; (8007ea8 <_strerror_r+0x368>)
 8007d54:	e78d      	b.n	8007c72 <_strerror_r+0x132>
 8007d56:	4b55      	ldr	r3, [pc, #340]	; (8007eac <_strerror_r+0x36c>)
 8007d58:	e78b      	b.n	8007c72 <_strerror_r+0x132>
 8007d5a:	4b55      	ldr	r3, [pc, #340]	; (8007eb0 <_strerror_r+0x370>)
 8007d5c:	e789      	b.n	8007c72 <_strerror_r+0x132>
 8007d5e:	4b55      	ldr	r3, [pc, #340]	; (8007eb4 <_strerror_r+0x374>)
 8007d60:	e787      	b.n	8007c72 <_strerror_r+0x132>
 8007d62:	4b55      	ldr	r3, [pc, #340]	; (8007eb8 <_strerror_r+0x378>)
 8007d64:	e785      	b.n	8007c72 <_strerror_r+0x132>
 8007d66:	4b55      	ldr	r3, [pc, #340]	; (8007ebc <_strerror_r+0x37c>)
 8007d68:	e783      	b.n	8007c72 <_strerror_r+0x132>
 8007d6a:	4b55      	ldr	r3, [pc, #340]	; (8007ec0 <_strerror_r+0x380>)
 8007d6c:	e781      	b.n	8007c72 <_strerror_r+0x132>
 8007d6e:	4b55      	ldr	r3, [pc, #340]	; (8007ec4 <_strerror_r+0x384>)
 8007d70:	e77f      	b.n	8007c72 <_strerror_r+0x132>
 8007d72:	4b55      	ldr	r3, [pc, #340]	; (8007ec8 <_strerror_r+0x388>)
 8007d74:	e77d      	b.n	8007c72 <_strerror_r+0x132>
 8007d76:	4b55      	ldr	r3, [pc, #340]	; (8007ecc <_strerror_r+0x38c>)
 8007d78:	e77b      	b.n	8007c72 <_strerror_r+0x132>
 8007d7a:	4b55      	ldr	r3, [pc, #340]	; (8007ed0 <_strerror_r+0x390>)
 8007d7c:	e779      	b.n	8007c72 <_strerror_r+0x132>
 8007d7e:	4b55      	ldr	r3, [pc, #340]	; (8007ed4 <_strerror_r+0x394>)
 8007d80:	e777      	b.n	8007c72 <_strerror_r+0x132>
 8007d82:	4b55      	ldr	r3, [pc, #340]	; (8007ed8 <_strerror_r+0x398>)
 8007d84:	e775      	b.n	8007c72 <_strerror_r+0x132>
 8007d86:	4b55      	ldr	r3, [pc, #340]	; (8007edc <_strerror_r+0x39c>)
 8007d88:	e773      	b.n	8007c72 <_strerror_r+0x132>
 8007d8a:	4b55      	ldr	r3, [pc, #340]	; (8007ee0 <_strerror_r+0x3a0>)
 8007d8c:	e771      	b.n	8007c72 <_strerror_r+0x132>
 8007d8e:	4b55      	ldr	r3, [pc, #340]	; (8007ee4 <_strerror_r+0x3a4>)
 8007d90:	e76f      	b.n	8007c72 <_strerror_r+0x132>
 8007d92:	4b55      	ldr	r3, [pc, #340]	; (8007ee8 <_strerror_r+0x3a8>)
 8007d94:	e76d      	b.n	8007c72 <_strerror_r+0x132>
 8007d96:	4b55      	ldr	r3, [pc, #340]	; (8007eec <_strerror_r+0x3ac>)
 8007d98:	e76b      	b.n	8007c72 <_strerror_r+0x132>
 8007d9a:	4b55      	ldr	r3, [pc, #340]	; (8007ef0 <_strerror_r+0x3b0>)
 8007d9c:	e769      	b.n	8007c72 <_strerror_r+0x132>
 8007d9e:	4b55      	ldr	r3, [pc, #340]	; (8007ef4 <_strerror_r+0x3b4>)
 8007da0:	e767      	b.n	8007c72 <_strerror_r+0x132>
 8007da2:	4b55      	ldr	r3, [pc, #340]	; (8007ef8 <_strerror_r+0x3b8>)
 8007da4:	e765      	b.n	8007c72 <_strerror_r+0x132>
 8007da6:	4b55      	ldr	r3, [pc, #340]	; (8007efc <_strerror_r+0x3bc>)
 8007da8:	e763      	b.n	8007c72 <_strerror_r+0x132>
 8007daa:	4b55      	ldr	r3, [pc, #340]	; (8007f00 <_strerror_r+0x3c0>)
 8007dac:	e761      	b.n	8007c72 <_strerror_r+0x132>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bf14      	ite	ne
 8007db2:	461a      	movne	r2, r3
 8007db4:	4622      	moveq	r2, r4
 8007db6:	f000 f8a9 	bl	8007f0c <_user_strerror>
 8007dba:	4b52      	ldr	r3, [pc, #328]	; (8007f04 <_strerror_r+0x3c4>)
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	bf18      	it	ne
 8007dc0:	4603      	movne	r3, r0
 8007dc2:	e756      	b.n	8007c72 <_strerror_r+0x132>
 8007dc4:	4b50      	ldr	r3, [pc, #320]	; (8007f08 <_strerror_r+0x3c8>)
 8007dc6:	e754      	b.n	8007c72 <_strerror_r+0x132>
 8007dc8:	0800a310 	.word	0x0800a310
 8007dcc:	0800a31a 	.word	0x0800a31a
 8007dd0:	0800a334 	.word	0x0800a334
 8007dd4:	0800a344 	.word	0x0800a344
 8007dd8:	0800a35c 	.word	0x0800a35c
 8007ddc:	0800a366 	.word	0x0800a366
 8007de0:	0800a380 	.word	0x0800a380
 8007de4:	0800a392 	.word	0x0800a392
 8007de8:	0800a3a4 	.word	0x0800a3a4
 8007dec:	0800a3bd 	.word	0x0800a3bd
 8007df0:	0800a3cd 	.word	0x0800a3cd
 8007df4:	0800a3d9 	.word	0x0800a3d9
 8007df8:	0800a3f6 	.word	0x0800a3f6
 8007dfc:	0800a408 	.word	0x0800a408
 8007e00:	0800a419 	.word	0x0800a419
 8007e04:	0800a42b 	.word	0x0800a42b
 8007e08:	0800a437 	.word	0x0800a437
 8007e0c:	0800a44f 	.word	0x0800a44f
 8007e10:	0800a45b 	.word	0x0800a45b
 8007e14:	0800a46d 	.word	0x0800a46d
 8007e18:	0800a47c 	.word	0x0800a47c
 8007e1c:	0800a48c 	.word	0x0800a48c
 8007e20:	0800a499 	.word	0x0800a499
 8007e24:	0800a4b8 	.word	0x0800a4b8
 8007e28:	0800a4c7 	.word	0x0800a4c7
 8007e2c:	0800a4d8 	.word	0x0800a4d8
 8007e30:	0800a4fc 	.word	0x0800a4fc
 8007e34:	0800a51a 	.word	0x0800a51a
 8007e38:	0800a538 	.word	0x0800a538
 8007e3c:	0800a558 	.word	0x0800a558
 8007e40:	0800a56f 	.word	0x0800a56f
 8007e44:	0800a57e 	.word	0x0800a57e
 8007e48:	0800a58d 	.word	0x0800a58d
 8007e4c:	0800a5a1 	.word	0x0800a5a1
 8007e50:	0800a5b9 	.word	0x0800a5b9
 8007e54:	0800a5c7 	.word	0x0800a5c7
 8007e58:	0800a5d4 	.word	0x0800a5d4
 8007e5c:	0800a5ea 	.word	0x0800a5ea
 8007e60:	0800a5f9 	.word	0x0800a5f9
 8007e64:	0800a605 	.word	0x0800a605
 8007e68:	0800a634 	.word	0x0800a634
 8007e6c:	0800a645 	.word	0x0800a645
 8007e70:	0800a660 	.word	0x0800a660
 8007e74:	0800a673 	.word	0x0800a673
 8007e78:	0800a689 	.word	0x0800a689
 8007e7c:	0800a692 	.word	0x0800a692
 8007e80:	0800a6a9 	.word	0x0800a6a9
 8007e84:	0800a6b1 	.word	0x0800a6b1
 8007e88:	0800a6be 	.word	0x0800a6be
 8007e8c:	0800a6d3 	.word	0x0800a6d3
 8007e90:	0800a6e7 	.word	0x0800a6e7
 8007e94:	0800a6ff 	.word	0x0800a6ff
 8007e98:	0800a70e 	.word	0x0800a70e
 8007e9c:	0800a71f 	.word	0x0800a71f
 8007ea0:	0800a732 	.word	0x0800a732
 8007ea4:	0800a73e 	.word	0x0800a73e
 8007ea8:	0800a757 	.word	0x0800a757
 8007eac:	0800a76b 	.word	0x0800a76b
 8007eb0:	0800a786 	.word	0x0800a786
 8007eb4:	0800a79e 	.word	0x0800a79e
 8007eb8:	0800a7b8 	.word	0x0800a7b8
 8007ebc:	0800a7c0 	.word	0x0800a7c0
 8007ec0:	0800a7f0 	.word	0x0800a7f0
 8007ec4:	0800a80f 	.word	0x0800a80f
 8007ec8:	0800a82e 	.word	0x0800a82e
 8007ecc:	0800a845 	.word	0x0800a845
 8007ed0:	0800a858 	.word	0x0800a858
 8007ed4:	0800a871 	.word	0x0800a871
 8007ed8:	0800a888 	.word	0x0800a888
 8007edc:	0800a89e 	.word	0x0800a89e
 8007ee0:	0800a8bf 	.word	0x0800a8bf
 8007ee4:	0800a8d7 	.word	0x0800a8d7
 8007ee8:	0800a8f3 	.word	0x0800a8f3
 8007eec:	0800a906 	.word	0x0800a906
 8007ef0:	0800a91c 	.word	0x0800a91c
 8007ef4:	0800a930 	.word	0x0800a930
 8007ef8:	0800a952 	.word	0x0800a952
 8007efc:	0800a978 	.word	0x0800a978
 8007f00:	0800a989 	.word	0x0800a989
 8007f04:	0800ac40 	.word	0x0800ac40
 8007f08:	0800a99e 	.word	0x0800a99e

08007f0c <_user_strerror>:
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	4770      	bx	lr

08007f10 <_vsiprintf_r>:
 8007f10:	b500      	push	{lr}
 8007f12:	b09b      	sub	sp, #108	; 0x6c
 8007f14:	9100      	str	r1, [sp, #0]
 8007f16:	9104      	str	r1, [sp, #16]
 8007f18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f1c:	9105      	str	r1, [sp, #20]
 8007f1e:	9102      	str	r1, [sp, #8]
 8007f20:	4905      	ldr	r1, [pc, #20]	; (8007f38 <_vsiprintf_r+0x28>)
 8007f22:	9103      	str	r1, [sp, #12]
 8007f24:	4669      	mov	r1, sp
 8007f26:	f001 fcaf 	bl	8009888 <_svfiprintf_r>
 8007f2a:	9b00      	ldr	r3, [sp, #0]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	b01b      	add	sp, #108	; 0x6c
 8007f32:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f36:	bf00      	nop
 8007f38:	ffff0208 	.word	0xffff0208

08007f3c <vsiprintf>:
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	460a      	mov	r2, r1
 8007f40:	4601      	mov	r1, r0
 8007f42:	4802      	ldr	r0, [pc, #8]	; (8007f4c <vsiprintf+0x10>)
 8007f44:	6800      	ldr	r0, [r0, #0]
 8007f46:	f7ff bfe3 	b.w	8007f10 <_vsiprintf_r>
 8007f4a:	bf00      	nop
 8007f4c:	2000003c 	.word	0x2000003c

08007f50 <_write_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4d07      	ldr	r5, [pc, #28]	; (8007f70 <_write_r+0x20>)
 8007f54:	4604      	mov	r4, r0
 8007f56:	4608      	mov	r0, r1
 8007f58:	4611      	mov	r1, r2
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	602a      	str	r2, [r5, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f7f9 fd3f 	bl	80019e2 <_write>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d102      	bne.n	8007f6e <_write_r+0x1e>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	b103      	cbz	r3, 8007f6e <_write_r+0x1e>
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	20000644 	.word	0x20000644

08007f74 <quorem>:
 8007f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f78:	6903      	ldr	r3, [r0, #16]
 8007f7a:	690c      	ldr	r4, [r1, #16]
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	4607      	mov	r7, r0
 8007f80:	f2c0 8081 	blt.w	8008086 <quorem+0x112>
 8007f84:	3c01      	subs	r4, #1
 8007f86:	f101 0814 	add.w	r8, r1, #20
 8007f8a:	f100 0514 	add.w	r5, r0, #20
 8007f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007fa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fa8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fac:	d331      	bcc.n	8008012 <quorem+0x9e>
 8007fae:	f04f 0e00 	mov.w	lr, #0
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	46ac      	mov	ip, r5
 8007fb6:	46f2      	mov	sl, lr
 8007fb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fbc:	b293      	uxth	r3, r2
 8007fbe:	fb06 e303 	mla	r3, r6, r3, lr
 8007fc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	ebaa 0303 	sub.w	r3, sl, r3
 8007fcc:	f8dc a000 	ldr.w	sl, [ip]
 8007fd0:	0c12      	lsrs	r2, r2, #16
 8007fd2:	fa13 f38a 	uxtah	r3, r3, sl
 8007fd6:	fb06 e202 	mla	r2, r6, r2, lr
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	9b00      	ldr	r3, [sp, #0]
 8007fde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fe2:	b292      	uxth	r2, r2
 8007fe4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007fe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fec:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ff0:	4581      	cmp	r9, r0
 8007ff2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ff6:	f84c 3b04 	str.w	r3, [ip], #4
 8007ffa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ffe:	d2db      	bcs.n	8007fb8 <quorem+0x44>
 8008000:	f855 300b 	ldr.w	r3, [r5, fp]
 8008004:	b92b      	cbnz	r3, 8008012 <quorem+0x9e>
 8008006:	9b01      	ldr	r3, [sp, #4]
 8008008:	3b04      	subs	r3, #4
 800800a:	429d      	cmp	r5, r3
 800800c:	461a      	mov	r2, r3
 800800e:	d32e      	bcc.n	800806e <quorem+0xfa>
 8008010:	613c      	str	r4, [r7, #16]
 8008012:	4638      	mov	r0, r7
 8008014:	f001 fac4 	bl	80095a0 <__mcmp>
 8008018:	2800      	cmp	r0, #0
 800801a:	db24      	blt.n	8008066 <quorem+0xf2>
 800801c:	3601      	adds	r6, #1
 800801e:	4628      	mov	r0, r5
 8008020:	f04f 0c00 	mov.w	ip, #0
 8008024:	f858 2b04 	ldr.w	r2, [r8], #4
 8008028:	f8d0 e000 	ldr.w	lr, [r0]
 800802c:	b293      	uxth	r3, r2
 800802e:	ebac 0303 	sub.w	r3, ip, r3
 8008032:	0c12      	lsrs	r2, r2, #16
 8008034:	fa13 f38e 	uxtah	r3, r3, lr
 8008038:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800803c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008040:	b29b      	uxth	r3, r3
 8008042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008046:	45c1      	cmp	r9, r8
 8008048:	f840 3b04 	str.w	r3, [r0], #4
 800804c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008050:	d2e8      	bcs.n	8008024 <quorem+0xb0>
 8008052:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008056:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800805a:	b922      	cbnz	r2, 8008066 <quorem+0xf2>
 800805c:	3b04      	subs	r3, #4
 800805e:	429d      	cmp	r5, r3
 8008060:	461a      	mov	r2, r3
 8008062:	d30a      	bcc.n	800807a <quorem+0x106>
 8008064:	613c      	str	r4, [r7, #16]
 8008066:	4630      	mov	r0, r6
 8008068:	b003      	add	sp, #12
 800806a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806e:	6812      	ldr	r2, [r2, #0]
 8008070:	3b04      	subs	r3, #4
 8008072:	2a00      	cmp	r2, #0
 8008074:	d1cc      	bne.n	8008010 <quorem+0x9c>
 8008076:	3c01      	subs	r4, #1
 8008078:	e7c7      	b.n	800800a <quorem+0x96>
 800807a:	6812      	ldr	r2, [r2, #0]
 800807c:	3b04      	subs	r3, #4
 800807e:	2a00      	cmp	r2, #0
 8008080:	d1f0      	bne.n	8008064 <quorem+0xf0>
 8008082:	3c01      	subs	r4, #1
 8008084:	e7eb      	b.n	800805e <quorem+0xea>
 8008086:	2000      	movs	r0, #0
 8008088:	e7ee      	b.n	8008068 <quorem+0xf4>
 800808a:	0000      	movs	r0, r0
 800808c:	0000      	movs	r0, r0
	...

08008090 <_dtoa_r>:
 8008090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	ed2d 8b04 	vpush	{d8-d9}
 8008098:	ec57 6b10 	vmov	r6, r7, d0
 800809c:	b093      	sub	sp, #76	; 0x4c
 800809e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80080a4:	9106      	str	r1, [sp, #24]
 80080a6:	ee10 aa10 	vmov	sl, s0
 80080aa:	4604      	mov	r4, r0
 80080ac:	9209      	str	r2, [sp, #36]	; 0x24
 80080ae:	930c      	str	r3, [sp, #48]	; 0x30
 80080b0:	46bb      	mov	fp, r7
 80080b2:	b975      	cbnz	r5, 80080d2 <_dtoa_r+0x42>
 80080b4:	2010      	movs	r0, #16
 80080b6:	f7fe fef3 	bl	8006ea0 <malloc>
 80080ba:	4602      	mov	r2, r0
 80080bc:	6260      	str	r0, [r4, #36]	; 0x24
 80080be:	b920      	cbnz	r0, 80080ca <_dtoa_r+0x3a>
 80080c0:	4ba7      	ldr	r3, [pc, #668]	; (8008360 <_dtoa_r+0x2d0>)
 80080c2:	21ea      	movs	r1, #234	; 0xea
 80080c4:	48a7      	ldr	r0, [pc, #668]	; (8008364 <_dtoa_r+0x2d4>)
 80080c6:	f001 fd23 	bl	8009b10 <__assert_func>
 80080ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080ce:	6005      	str	r5, [r0, #0]
 80080d0:	60c5      	str	r5, [r0, #12]
 80080d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080d4:	6819      	ldr	r1, [r3, #0]
 80080d6:	b151      	cbz	r1, 80080ee <_dtoa_r+0x5e>
 80080d8:	685a      	ldr	r2, [r3, #4]
 80080da:	604a      	str	r2, [r1, #4]
 80080dc:	2301      	movs	r3, #1
 80080de:	4093      	lsls	r3, r2
 80080e0:	608b      	str	r3, [r1, #8]
 80080e2:	4620      	mov	r0, r4
 80080e4:	f001 f81a 	bl	800911c <_Bfree>
 80080e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	1e3b      	subs	r3, r7, #0
 80080f0:	bfaa      	itet	ge
 80080f2:	2300      	movge	r3, #0
 80080f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80080f8:	f8c8 3000 	strge.w	r3, [r8]
 80080fc:	4b9a      	ldr	r3, [pc, #616]	; (8008368 <_dtoa_r+0x2d8>)
 80080fe:	bfbc      	itt	lt
 8008100:	2201      	movlt	r2, #1
 8008102:	f8c8 2000 	strlt.w	r2, [r8]
 8008106:	ea33 030b 	bics.w	r3, r3, fp
 800810a:	d11b      	bne.n	8008144 <_dtoa_r+0xb4>
 800810c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800810e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008118:	4333      	orrs	r3, r6
 800811a:	f000 8592 	beq.w	8008c42 <_dtoa_r+0xbb2>
 800811e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008120:	b963      	cbnz	r3, 800813c <_dtoa_r+0xac>
 8008122:	4b92      	ldr	r3, [pc, #584]	; (800836c <_dtoa_r+0x2dc>)
 8008124:	e022      	b.n	800816c <_dtoa_r+0xdc>
 8008126:	4b92      	ldr	r3, [pc, #584]	; (8008370 <_dtoa_r+0x2e0>)
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	3308      	adds	r3, #8
 800812c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800812e:	6013      	str	r3, [r2, #0]
 8008130:	9801      	ldr	r0, [sp, #4]
 8008132:	b013      	add	sp, #76	; 0x4c
 8008134:	ecbd 8b04 	vpop	{d8-d9}
 8008138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813c:	4b8b      	ldr	r3, [pc, #556]	; (800836c <_dtoa_r+0x2dc>)
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	3303      	adds	r3, #3
 8008142:	e7f3      	b.n	800812c <_dtoa_r+0x9c>
 8008144:	2200      	movs	r2, #0
 8008146:	2300      	movs	r3, #0
 8008148:	4650      	mov	r0, sl
 800814a:	4659      	mov	r1, fp
 800814c:	f7f8 fcbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008150:	ec4b ab19 	vmov	d9, sl, fp
 8008154:	4680      	mov	r8, r0
 8008156:	b158      	cbz	r0, 8008170 <_dtoa_r+0xe0>
 8008158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800815a:	2301      	movs	r3, #1
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 856b 	beq.w	8008c3c <_dtoa_r+0xbac>
 8008166:	4883      	ldr	r0, [pc, #524]	; (8008374 <_dtoa_r+0x2e4>)
 8008168:	6018      	str	r0, [r3, #0]
 800816a:	1e43      	subs	r3, r0, #1
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	e7df      	b.n	8008130 <_dtoa_r+0xa0>
 8008170:	ec4b ab10 	vmov	d0, sl, fp
 8008174:	aa10      	add	r2, sp, #64	; 0x40
 8008176:	a911      	add	r1, sp, #68	; 0x44
 8008178:	4620      	mov	r0, r4
 800817a:	f001 fab7 	bl	80096ec <__d2b>
 800817e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008182:	ee08 0a10 	vmov	s16, r0
 8008186:	2d00      	cmp	r5, #0
 8008188:	f000 8084 	beq.w	8008294 <_dtoa_r+0x204>
 800818c:	ee19 3a90 	vmov	r3, s19
 8008190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008194:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008198:	4656      	mov	r6, sl
 800819a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800819e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80081a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80081a6:	4b74      	ldr	r3, [pc, #464]	; (8008378 <_dtoa_r+0x2e8>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	4630      	mov	r0, r6
 80081ac:	4639      	mov	r1, r7
 80081ae:	f7f8 f86b 	bl	8000288 <__aeabi_dsub>
 80081b2:	a365      	add	r3, pc, #404	; (adr r3, 8008348 <_dtoa_r+0x2b8>)
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	f7f8 fa1e 	bl	80005f8 <__aeabi_dmul>
 80081bc:	a364      	add	r3, pc, #400	; (adr r3, 8008350 <_dtoa_r+0x2c0>)
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	f7f8 f863 	bl	800028c <__adddf3>
 80081c6:	4606      	mov	r6, r0
 80081c8:	4628      	mov	r0, r5
 80081ca:	460f      	mov	r7, r1
 80081cc:	f7f8 f9aa 	bl	8000524 <__aeabi_i2d>
 80081d0:	a361      	add	r3, pc, #388	; (adr r3, 8008358 <_dtoa_r+0x2c8>)
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	f7f8 fa0f 	bl	80005f8 <__aeabi_dmul>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	4630      	mov	r0, r6
 80081e0:	4639      	mov	r1, r7
 80081e2:	f7f8 f853 	bl	800028c <__adddf3>
 80081e6:	4606      	mov	r6, r0
 80081e8:	460f      	mov	r7, r1
 80081ea:	f7f8 fcb5 	bl	8000b58 <__aeabi_d2iz>
 80081ee:	2200      	movs	r2, #0
 80081f0:	9000      	str	r0, [sp, #0]
 80081f2:	2300      	movs	r3, #0
 80081f4:	4630      	mov	r0, r6
 80081f6:	4639      	mov	r1, r7
 80081f8:	f7f8 fc70 	bl	8000adc <__aeabi_dcmplt>
 80081fc:	b150      	cbz	r0, 8008214 <_dtoa_r+0x184>
 80081fe:	9800      	ldr	r0, [sp, #0]
 8008200:	f7f8 f990 	bl	8000524 <__aeabi_i2d>
 8008204:	4632      	mov	r2, r6
 8008206:	463b      	mov	r3, r7
 8008208:	f7f8 fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800820c:	b910      	cbnz	r0, 8008214 <_dtoa_r+0x184>
 800820e:	9b00      	ldr	r3, [sp, #0]
 8008210:	3b01      	subs	r3, #1
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	9b00      	ldr	r3, [sp, #0]
 8008216:	2b16      	cmp	r3, #22
 8008218:	d85a      	bhi.n	80082d0 <_dtoa_r+0x240>
 800821a:	9a00      	ldr	r2, [sp, #0]
 800821c:	4b57      	ldr	r3, [pc, #348]	; (800837c <_dtoa_r+0x2ec>)
 800821e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	ec51 0b19 	vmov	r0, r1, d9
 800822a:	f7f8 fc57 	bl	8000adc <__aeabi_dcmplt>
 800822e:	2800      	cmp	r0, #0
 8008230:	d050      	beq.n	80082d4 <_dtoa_r+0x244>
 8008232:	9b00      	ldr	r3, [sp, #0]
 8008234:	3b01      	subs	r3, #1
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	2300      	movs	r3, #0
 800823a:	930b      	str	r3, [sp, #44]	; 0x2c
 800823c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800823e:	1b5d      	subs	r5, r3, r5
 8008240:	1e6b      	subs	r3, r5, #1
 8008242:	9305      	str	r3, [sp, #20]
 8008244:	bf45      	ittet	mi
 8008246:	f1c5 0301 	rsbmi	r3, r5, #1
 800824a:	9304      	strmi	r3, [sp, #16]
 800824c:	2300      	movpl	r3, #0
 800824e:	2300      	movmi	r3, #0
 8008250:	bf4c      	ite	mi
 8008252:	9305      	strmi	r3, [sp, #20]
 8008254:	9304      	strpl	r3, [sp, #16]
 8008256:	9b00      	ldr	r3, [sp, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	db3d      	blt.n	80082d8 <_dtoa_r+0x248>
 800825c:	9b05      	ldr	r3, [sp, #20]
 800825e:	9a00      	ldr	r2, [sp, #0]
 8008260:	920a      	str	r2, [sp, #40]	; 0x28
 8008262:	4413      	add	r3, r2
 8008264:	9305      	str	r3, [sp, #20]
 8008266:	2300      	movs	r3, #0
 8008268:	9307      	str	r3, [sp, #28]
 800826a:	9b06      	ldr	r3, [sp, #24]
 800826c:	2b09      	cmp	r3, #9
 800826e:	f200 8089 	bhi.w	8008384 <_dtoa_r+0x2f4>
 8008272:	2b05      	cmp	r3, #5
 8008274:	bfc4      	itt	gt
 8008276:	3b04      	subgt	r3, #4
 8008278:	9306      	strgt	r3, [sp, #24]
 800827a:	9b06      	ldr	r3, [sp, #24]
 800827c:	f1a3 0302 	sub.w	r3, r3, #2
 8008280:	bfcc      	ite	gt
 8008282:	2500      	movgt	r5, #0
 8008284:	2501      	movle	r5, #1
 8008286:	2b03      	cmp	r3, #3
 8008288:	f200 8087 	bhi.w	800839a <_dtoa_r+0x30a>
 800828c:	e8df f003 	tbb	[pc, r3]
 8008290:	59383a2d 	.word	0x59383a2d
 8008294:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008298:	441d      	add	r5, r3
 800829a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800829e:	2b20      	cmp	r3, #32
 80082a0:	bfc1      	itttt	gt
 80082a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80082aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80082ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80082b2:	bfda      	itte	le
 80082b4:	f1c3 0320 	rsble	r3, r3, #32
 80082b8:	fa06 f003 	lslle.w	r0, r6, r3
 80082bc:	4318      	orrgt	r0, r3
 80082be:	f7f8 f921 	bl	8000504 <__aeabi_ui2d>
 80082c2:	2301      	movs	r3, #1
 80082c4:	4606      	mov	r6, r0
 80082c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80082ca:	3d01      	subs	r5, #1
 80082cc:	930e      	str	r3, [sp, #56]	; 0x38
 80082ce:	e76a      	b.n	80081a6 <_dtoa_r+0x116>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e7b2      	b.n	800823a <_dtoa_r+0x1aa>
 80082d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80082d6:	e7b1      	b.n	800823c <_dtoa_r+0x1ac>
 80082d8:	9b04      	ldr	r3, [sp, #16]
 80082da:	9a00      	ldr	r2, [sp, #0]
 80082dc:	1a9b      	subs	r3, r3, r2
 80082de:	9304      	str	r3, [sp, #16]
 80082e0:	4253      	negs	r3, r2
 80082e2:	9307      	str	r3, [sp, #28]
 80082e4:	2300      	movs	r3, #0
 80082e6:	930a      	str	r3, [sp, #40]	; 0x28
 80082e8:	e7bf      	b.n	800826a <_dtoa_r+0x1da>
 80082ea:	2300      	movs	r3, #0
 80082ec:	9308      	str	r3, [sp, #32]
 80082ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	dc55      	bgt.n	80083a0 <_dtoa_r+0x310>
 80082f4:	2301      	movs	r3, #1
 80082f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082fa:	461a      	mov	r2, r3
 80082fc:	9209      	str	r2, [sp, #36]	; 0x24
 80082fe:	e00c      	b.n	800831a <_dtoa_r+0x28a>
 8008300:	2301      	movs	r3, #1
 8008302:	e7f3      	b.n	80082ec <_dtoa_r+0x25c>
 8008304:	2300      	movs	r3, #0
 8008306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008308:	9308      	str	r3, [sp, #32]
 800830a:	9b00      	ldr	r3, [sp, #0]
 800830c:	4413      	add	r3, r2
 800830e:	9302      	str	r3, [sp, #8]
 8008310:	3301      	adds	r3, #1
 8008312:	2b01      	cmp	r3, #1
 8008314:	9303      	str	r3, [sp, #12]
 8008316:	bfb8      	it	lt
 8008318:	2301      	movlt	r3, #1
 800831a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800831c:	2200      	movs	r2, #0
 800831e:	6042      	str	r2, [r0, #4]
 8008320:	2204      	movs	r2, #4
 8008322:	f102 0614 	add.w	r6, r2, #20
 8008326:	429e      	cmp	r6, r3
 8008328:	6841      	ldr	r1, [r0, #4]
 800832a:	d93d      	bls.n	80083a8 <_dtoa_r+0x318>
 800832c:	4620      	mov	r0, r4
 800832e:	f000 feb5 	bl	800909c <_Balloc>
 8008332:	9001      	str	r0, [sp, #4]
 8008334:	2800      	cmp	r0, #0
 8008336:	d13b      	bne.n	80083b0 <_dtoa_r+0x320>
 8008338:	4b11      	ldr	r3, [pc, #68]	; (8008380 <_dtoa_r+0x2f0>)
 800833a:	4602      	mov	r2, r0
 800833c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008340:	e6c0      	b.n	80080c4 <_dtoa_r+0x34>
 8008342:	2301      	movs	r3, #1
 8008344:	e7df      	b.n	8008306 <_dtoa_r+0x276>
 8008346:	bf00      	nop
 8008348:	636f4361 	.word	0x636f4361
 800834c:	3fd287a7 	.word	0x3fd287a7
 8008350:	8b60c8b3 	.word	0x8b60c8b3
 8008354:	3fc68a28 	.word	0x3fc68a28
 8008358:	509f79fb 	.word	0x509f79fb
 800835c:	3fd34413 	.word	0x3fd34413
 8008360:	0800a9b3 	.word	0x0800a9b3
 8008364:	0800a9ca 	.word	0x0800a9ca
 8008368:	7ff00000 	.word	0x7ff00000
 800836c:	0800a9af 	.word	0x0800a9af
 8008370:	0800a9a6 	.word	0x0800a9a6
 8008374:	0800a2ed 	.word	0x0800a2ed
 8008378:	3ff80000 	.word	0x3ff80000
 800837c:	0800ab20 	.word	0x0800ab20
 8008380:	0800aa25 	.word	0x0800aa25
 8008384:	2501      	movs	r5, #1
 8008386:	2300      	movs	r3, #0
 8008388:	9306      	str	r3, [sp, #24]
 800838a:	9508      	str	r5, [sp, #32]
 800838c:	f04f 33ff 	mov.w	r3, #4294967295
 8008390:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008394:	2200      	movs	r2, #0
 8008396:	2312      	movs	r3, #18
 8008398:	e7b0      	b.n	80082fc <_dtoa_r+0x26c>
 800839a:	2301      	movs	r3, #1
 800839c:	9308      	str	r3, [sp, #32]
 800839e:	e7f5      	b.n	800838c <_dtoa_r+0x2fc>
 80083a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083a6:	e7b8      	b.n	800831a <_dtoa_r+0x28a>
 80083a8:	3101      	adds	r1, #1
 80083aa:	6041      	str	r1, [r0, #4]
 80083ac:	0052      	lsls	r2, r2, #1
 80083ae:	e7b8      	b.n	8008322 <_dtoa_r+0x292>
 80083b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083b2:	9a01      	ldr	r2, [sp, #4]
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	9b03      	ldr	r3, [sp, #12]
 80083b8:	2b0e      	cmp	r3, #14
 80083ba:	f200 809d 	bhi.w	80084f8 <_dtoa_r+0x468>
 80083be:	2d00      	cmp	r5, #0
 80083c0:	f000 809a 	beq.w	80084f8 <_dtoa_r+0x468>
 80083c4:	9b00      	ldr	r3, [sp, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	dd32      	ble.n	8008430 <_dtoa_r+0x3a0>
 80083ca:	4ab7      	ldr	r2, [pc, #732]	; (80086a8 <_dtoa_r+0x618>)
 80083cc:	f003 030f 	and.w	r3, r3, #15
 80083d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80083d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083d8:	9b00      	ldr	r3, [sp, #0]
 80083da:	05d8      	lsls	r0, r3, #23
 80083dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80083e0:	d516      	bpl.n	8008410 <_dtoa_r+0x380>
 80083e2:	4bb2      	ldr	r3, [pc, #712]	; (80086ac <_dtoa_r+0x61c>)
 80083e4:	ec51 0b19 	vmov	r0, r1, d9
 80083e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083ec:	f7f8 fa2e 	bl	800084c <__aeabi_ddiv>
 80083f0:	f007 070f 	and.w	r7, r7, #15
 80083f4:	4682      	mov	sl, r0
 80083f6:	468b      	mov	fp, r1
 80083f8:	2503      	movs	r5, #3
 80083fa:	4eac      	ldr	r6, [pc, #688]	; (80086ac <_dtoa_r+0x61c>)
 80083fc:	b957      	cbnz	r7, 8008414 <_dtoa_r+0x384>
 80083fe:	4642      	mov	r2, r8
 8008400:	464b      	mov	r3, r9
 8008402:	4650      	mov	r0, sl
 8008404:	4659      	mov	r1, fp
 8008406:	f7f8 fa21 	bl	800084c <__aeabi_ddiv>
 800840a:	4682      	mov	sl, r0
 800840c:	468b      	mov	fp, r1
 800840e:	e028      	b.n	8008462 <_dtoa_r+0x3d2>
 8008410:	2502      	movs	r5, #2
 8008412:	e7f2      	b.n	80083fa <_dtoa_r+0x36a>
 8008414:	07f9      	lsls	r1, r7, #31
 8008416:	d508      	bpl.n	800842a <_dtoa_r+0x39a>
 8008418:	4640      	mov	r0, r8
 800841a:	4649      	mov	r1, r9
 800841c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008420:	f7f8 f8ea 	bl	80005f8 <__aeabi_dmul>
 8008424:	3501      	adds	r5, #1
 8008426:	4680      	mov	r8, r0
 8008428:	4689      	mov	r9, r1
 800842a:	107f      	asrs	r7, r7, #1
 800842c:	3608      	adds	r6, #8
 800842e:	e7e5      	b.n	80083fc <_dtoa_r+0x36c>
 8008430:	f000 809b 	beq.w	800856a <_dtoa_r+0x4da>
 8008434:	9b00      	ldr	r3, [sp, #0]
 8008436:	4f9d      	ldr	r7, [pc, #628]	; (80086ac <_dtoa_r+0x61c>)
 8008438:	425e      	negs	r6, r3
 800843a:	4b9b      	ldr	r3, [pc, #620]	; (80086a8 <_dtoa_r+0x618>)
 800843c:	f006 020f 	and.w	r2, r6, #15
 8008440:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008448:	ec51 0b19 	vmov	r0, r1, d9
 800844c:	f7f8 f8d4 	bl	80005f8 <__aeabi_dmul>
 8008450:	1136      	asrs	r6, r6, #4
 8008452:	4682      	mov	sl, r0
 8008454:	468b      	mov	fp, r1
 8008456:	2300      	movs	r3, #0
 8008458:	2502      	movs	r5, #2
 800845a:	2e00      	cmp	r6, #0
 800845c:	d17a      	bne.n	8008554 <_dtoa_r+0x4c4>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1d3      	bne.n	800840a <_dtoa_r+0x37a>
 8008462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 8082 	beq.w	800856e <_dtoa_r+0x4de>
 800846a:	4b91      	ldr	r3, [pc, #580]	; (80086b0 <_dtoa_r+0x620>)
 800846c:	2200      	movs	r2, #0
 800846e:	4650      	mov	r0, sl
 8008470:	4659      	mov	r1, fp
 8008472:	f7f8 fb33 	bl	8000adc <__aeabi_dcmplt>
 8008476:	2800      	cmp	r0, #0
 8008478:	d079      	beq.n	800856e <_dtoa_r+0x4de>
 800847a:	9b03      	ldr	r3, [sp, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d076      	beq.n	800856e <_dtoa_r+0x4de>
 8008480:	9b02      	ldr	r3, [sp, #8]
 8008482:	2b00      	cmp	r3, #0
 8008484:	dd36      	ble.n	80084f4 <_dtoa_r+0x464>
 8008486:	9b00      	ldr	r3, [sp, #0]
 8008488:	4650      	mov	r0, sl
 800848a:	4659      	mov	r1, fp
 800848c:	1e5f      	subs	r7, r3, #1
 800848e:	2200      	movs	r2, #0
 8008490:	4b88      	ldr	r3, [pc, #544]	; (80086b4 <_dtoa_r+0x624>)
 8008492:	f7f8 f8b1 	bl	80005f8 <__aeabi_dmul>
 8008496:	9e02      	ldr	r6, [sp, #8]
 8008498:	4682      	mov	sl, r0
 800849a:	468b      	mov	fp, r1
 800849c:	3501      	adds	r5, #1
 800849e:	4628      	mov	r0, r5
 80084a0:	f7f8 f840 	bl	8000524 <__aeabi_i2d>
 80084a4:	4652      	mov	r2, sl
 80084a6:	465b      	mov	r3, fp
 80084a8:	f7f8 f8a6 	bl	80005f8 <__aeabi_dmul>
 80084ac:	4b82      	ldr	r3, [pc, #520]	; (80086b8 <_dtoa_r+0x628>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	f7f7 feec 	bl	800028c <__adddf3>
 80084b4:	46d0      	mov	r8, sl
 80084b6:	46d9      	mov	r9, fp
 80084b8:	4682      	mov	sl, r0
 80084ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80084be:	2e00      	cmp	r6, #0
 80084c0:	d158      	bne.n	8008574 <_dtoa_r+0x4e4>
 80084c2:	4b7e      	ldr	r3, [pc, #504]	; (80086bc <_dtoa_r+0x62c>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	4640      	mov	r0, r8
 80084c8:	4649      	mov	r1, r9
 80084ca:	f7f7 fedd 	bl	8000288 <__aeabi_dsub>
 80084ce:	4652      	mov	r2, sl
 80084d0:	465b      	mov	r3, fp
 80084d2:	4680      	mov	r8, r0
 80084d4:	4689      	mov	r9, r1
 80084d6:	f7f8 fb1f 	bl	8000b18 <__aeabi_dcmpgt>
 80084da:	2800      	cmp	r0, #0
 80084dc:	f040 8295 	bne.w	8008a0a <_dtoa_r+0x97a>
 80084e0:	4652      	mov	r2, sl
 80084e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80084e6:	4640      	mov	r0, r8
 80084e8:	4649      	mov	r1, r9
 80084ea:	f7f8 faf7 	bl	8000adc <__aeabi_dcmplt>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	f040 8289 	bne.w	8008a06 <_dtoa_r+0x976>
 80084f4:	ec5b ab19 	vmov	sl, fp, d9
 80084f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f2c0 8148 	blt.w	8008790 <_dtoa_r+0x700>
 8008500:	9a00      	ldr	r2, [sp, #0]
 8008502:	2a0e      	cmp	r2, #14
 8008504:	f300 8144 	bgt.w	8008790 <_dtoa_r+0x700>
 8008508:	4b67      	ldr	r3, [pc, #412]	; (80086a8 <_dtoa_r+0x618>)
 800850a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800850e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008514:	2b00      	cmp	r3, #0
 8008516:	f280 80d5 	bge.w	80086c4 <_dtoa_r+0x634>
 800851a:	9b03      	ldr	r3, [sp, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f300 80d1 	bgt.w	80086c4 <_dtoa_r+0x634>
 8008522:	f040 826f 	bne.w	8008a04 <_dtoa_r+0x974>
 8008526:	4b65      	ldr	r3, [pc, #404]	; (80086bc <_dtoa_r+0x62c>)
 8008528:	2200      	movs	r2, #0
 800852a:	4640      	mov	r0, r8
 800852c:	4649      	mov	r1, r9
 800852e:	f7f8 f863 	bl	80005f8 <__aeabi_dmul>
 8008532:	4652      	mov	r2, sl
 8008534:	465b      	mov	r3, fp
 8008536:	f7f8 fae5 	bl	8000b04 <__aeabi_dcmpge>
 800853a:	9e03      	ldr	r6, [sp, #12]
 800853c:	4637      	mov	r7, r6
 800853e:	2800      	cmp	r0, #0
 8008540:	f040 8245 	bne.w	80089ce <_dtoa_r+0x93e>
 8008544:	9d01      	ldr	r5, [sp, #4]
 8008546:	2331      	movs	r3, #49	; 0x31
 8008548:	f805 3b01 	strb.w	r3, [r5], #1
 800854c:	9b00      	ldr	r3, [sp, #0]
 800854e:	3301      	adds	r3, #1
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	e240      	b.n	80089d6 <_dtoa_r+0x946>
 8008554:	07f2      	lsls	r2, r6, #31
 8008556:	d505      	bpl.n	8008564 <_dtoa_r+0x4d4>
 8008558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800855c:	f7f8 f84c 	bl	80005f8 <__aeabi_dmul>
 8008560:	3501      	adds	r5, #1
 8008562:	2301      	movs	r3, #1
 8008564:	1076      	asrs	r6, r6, #1
 8008566:	3708      	adds	r7, #8
 8008568:	e777      	b.n	800845a <_dtoa_r+0x3ca>
 800856a:	2502      	movs	r5, #2
 800856c:	e779      	b.n	8008462 <_dtoa_r+0x3d2>
 800856e:	9f00      	ldr	r7, [sp, #0]
 8008570:	9e03      	ldr	r6, [sp, #12]
 8008572:	e794      	b.n	800849e <_dtoa_r+0x40e>
 8008574:	9901      	ldr	r1, [sp, #4]
 8008576:	4b4c      	ldr	r3, [pc, #304]	; (80086a8 <_dtoa_r+0x618>)
 8008578:	4431      	add	r1, r6
 800857a:	910d      	str	r1, [sp, #52]	; 0x34
 800857c:	9908      	ldr	r1, [sp, #32]
 800857e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008582:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008586:	2900      	cmp	r1, #0
 8008588:	d043      	beq.n	8008612 <_dtoa_r+0x582>
 800858a:	494d      	ldr	r1, [pc, #308]	; (80086c0 <_dtoa_r+0x630>)
 800858c:	2000      	movs	r0, #0
 800858e:	f7f8 f95d 	bl	800084c <__aeabi_ddiv>
 8008592:	4652      	mov	r2, sl
 8008594:	465b      	mov	r3, fp
 8008596:	f7f7 fe77 	bl	8000288 <__aeabi_dsub>
 800859a:	9d01      	ldr	r5, [sp, #4]
 800859c:	4682      	mov	sl, r0
 800859e:	468b      	mov	fp, r1
 80085a0:	4649      	mov	r1, r9
 80085a2:	4640      	mov	r0, r8
 80085a4:	f7f8 fad8 	bl	8000b58 <__aeabi_d2iz>
 80085a8:	4606      	mov	r6, r0
 80085aa:	f7f7 ffbb 	bl	8000524 <__aeabi_i2d>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	4640      	mov	r0, r8
 80085b4:	4649      	mov	r1, r9
 80085b6:	f7f7 fe67 	bl	8000288 <__aeabi_dsub>
 80085ba:	3630      	adds	r6, #48	; 0x30
 80085bc:	f805 6b01 	strb.w	r6, [r5], #1
 80085c0:	4652      	mov	r2, sl
 80085c2:	465b      	mov	r3, fp
 80085c4:	4680      	mov	r8, r0
 80085c6:	4689      	mov	r9, r1
 80085c8:	f7f8 fa88 	bl	8000adc <__aeabi_dcmplt>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d163      	bne.n	8008698 <_dtoa_r+0x608>
 80085d0:	4642      	mov	r2, r8
 80085d2:	464b      	mov	r3, r9
 80085d4:	4936      	ldr	r1, [pc, #216]	; (80086b0 <_dtoa_r+0x620>)
 80085d6:	2000      	movs	r0, #0
 80085d8:	f7f7 fe56 	bl	8000288 <__aeabi_dsub>
 80085dc:	4652      	mov	r2, sl
 80085de:	465b      	mov	r3, fp
 80085e0:	f7f8 fa7c 	bl	8000adc <__aeabi_dcmplt>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	f040 80b5 	bne.w	8008754 <_dtoa_r+0x6c4>
 80085ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085ec:	429d      	cmp	r5, r3
 80085ee:	d081      	beq.n	80084f4 <_dtoa_r+0x464>
 80085f0:	4b30      	ldr	r3, [pc, #192]	; (80086b4 <_dtoa_r+0x624>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	4650      	mov	r0, sl
 80085f6:	4659      	mov	r1, fp
 80085f8:	f7f7 fffe 	bl	80005f8 <__aeabi_dmul>
 80085fc:	4b2d      	ldr	r3, [pc, #180]	; (80086b4 <_dtoa_r+0x624>)
 80085fe:	4682      	mov	sl, r0
 8008600:	468b      	mov	fp, r1
 8008602:	4640      	mov	r0, r8
 8008604:	4649      	mov	r1, r9
 8008606:	2200      	movs	r2, #0
 8008608:	f7f7 fff6 	bl	80005f8 <__aeabi_dmul>
 800860c:	4680      	mov	r8, r0
 800860e:	4689      	mov	r9, r1
 8008610:	e7c6      	b.n	80085a0 <_dtoa_r+0x510>
 8008612:	4650      	mov	r0, sl
 8008614:	4659      	mov	r1, fp
 8008616:	f7f7 ffef 	bl	80005f8 <__aeabi_dmul>
 800861a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800861c:	9d01      	ldr	r5, [sp, #4]
 800861e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008620:	4682      	mov	sl, r0
 8008622:	468b      	mov	fp, r1
 8008624:	4649      	mov	r1, r9
 8008626:	4640      	mov	r0, r8
 8008628:	f7f8 fa96 	bl	8000b58 <__aeabi_d2iz>
 800862c:	4606      	mov	r6, r0
 800862e:	f7f7 ff79 	bl	8000524 <__aeabi_i2d>
 8008632:	3630      	adds	r6, #48	; 0x30
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	4640      	mov	r0, r8
 800863a:	4649      	mov	r1, r9
 800863c:	f7f7 fe24 	bl	8000288 <__aeabi_dsub>
 8008640:	f805 6b01 	strb.w	r6, [r5], #1
 8008644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008646:	429d      	cmp	r5, r3
 8008648:	4680      	mov	r8, r0
 800864a:	4689      	mov	r9, r1
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	d124      	bne.n	800869c <_dtoa_r+0x60c>
 8008652:	4b1b      	ldr	r3, [pc, #108]	; (80086c0 <_dtoa_r+0x630>)
 8008654:	4650      	mov	r0, sl
 8008656:	4659      	mov	r1, fp
 8008658:	f7f7 fe18 	bl	800028c <__adddf3>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4640      	mov	r0, r8
 8008662:	4649      	mov	r1, r9
 8008664:	f7f8 fa58 	bl	8000b18 <__aeabi_dcmpgt>
 8008668:	2800      	cmp	r0, #0
 800866a:	d173      	bne.n	8008754 <_dtoa_r+0x6c4>
 800866c:	4652      	mov	r2, sl
 800866e:	465b      	mov	r3, fp
 8008670:	4913      	ldr	r1, [pc, #76]	; (80086c0 <_dtoa_r+0x630>)
 8008672:	2000      	movs	r0, #0
 8008674:	f7f7 fe08 	bl	8000288 <__aeabi_dsub>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4640      	mov	r0, r8
 800867e:	4649      	mov	r1, r9
 8008680:	f7f8 fa2c 	bl	8000adc <__aeabi_dcmplt>
 8008684:	2800      	cmp	r0, #0
 8008686:	f43f af35 	beq.w	80084f4 <_dtoa_r+0x464>
 800868a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800868c:	1e6b      	subs	r3, r5, #1
 800868e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008690:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008694:	2b30      	cmp	r3, #48	; 0x30
 8008696:	d0f8      	beq.n	800868a <_dtoa_r+0x5fa>
 8008698:	9700      	str	r7, [sp, #0]
 800869a:	e049      	b.n	8008730 <_dtoa_r+0x6a0>
 800869c:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <_dtoa_r+0x624>)
 800869e:	f7f7 ffab 	bl	80005f8 <__aeabi_dmul>
 80086a2:	4680      	mov	r8, r0
 80086a4:	4689      	mov	r9, r1
 80086a6:	e7bd      	b.n	8008624 <_dtoa_r+0x594>
 80086a8:	0800ab20 	.word	0x0800ab20
 80086ac:	0800aaf8 	.word	0x0800aaf8
 80086b0:	3ff00000 	.word	0x3ff00000
 80086b4:	40240000 	.word	0x40240000
 80086b8:	401c0000 	.word	0x401c0000
 80086bc:	40140000 	.word	0x40140000
 80086c0:	3fe00000 	.word	0x3fe00000
 80086c4:	9d01      	ldr	r5, [sp, #4]
 80086c6:	4656      	mov	r6, sl
 80086c8:	465f      	mov	r7, fp
 80086ca:	4642      	mov	r2, r8
 80086cc:	464b      	mov	r3, r9
 80086ce:	4630      	mov	r0, r6
 80086d0:	4639      	mov	r1, r7
 80086d2:	f7f8 f8bb 	bl	800084c <__aeabi_ddiv>
 80086d6:	f7f8 fa3f 	bl	8000b58 <__aeabi_d2iz>
 80086da:	4682      	mov	sl, r0
 80086dc:	f7f7 ff22 	bl	8000524 <__aeabi_i2d>
 80086e0:	4642      	mov	r2, r8
 80086e2:	464b      	mov	r3, r9
 80086e4:	f7f7 ff88 	bl	80005f8 <__aeabi_dmul>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4630      	mov	r0, r6
 80086ee:	4639      	mov	r1, r7
 80086f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80086f4:	f7f7 fdc8 	bl	8000288 <__aeabi_dsub>
 80086f8:	f805 6b01 	strb.w	r6, [r5], #1
 80086fc:	9e01      	ldr	r6, [sp, #4]
 80086fe:	9f03      	ldr	r7, [sp, #12]
 8008700:	1bae      	subs	r6, r5, r6
 8008702:	42b7      	cmp	r7, r6
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	d135      	bne.n	8008776 <_dtoa_r+0x6e6>
 800870a:	f7f7 fdbf 	bl	800028c <__adddf3>
 800870e:	4642      	mov	r2, r8
 8008710:	464b      	mov	r3, r9
 8008712:	4606      	mov	r6, r0
 8008714:	460f      	mov	r7, r1
 8008716:	f7f8 f9ff 	bl	8000b18 <__aeabi_dcmpgt>
 800871a:	b9d0      	cbnz	r0, 8008752 <_dtoa_r+0x6c2>
 800871c:	4642      	mov	r2, r8
 800871e:	464b      	mov	r3, r9
 8008720:	4630      	mov	r0, r6
 8008722:	4639      	mov	r1, r7
 8008724:	f7f8 f9d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008728:	b110      	cbz	r0, 8008730 <_dtoa_r+0x6a0>
 800872a:	f01a 0f01 	tst.w	sl, #1
 800872e:	d110      	bne.n	8008752 <_dtoa_r+0x6c2>
 8008730:	4620      	mov	r0, r4
 8008732:	ee18 1a10 	vmov	r1, s16
 8008736:	f000 fcf1 	bl	800911c <_Bfree>
 800873a:	2300      	movs	r3, #0
 800873c:	9800      	ldr	r0, [sp, #0]
 800873e:	702b      	strb	r3, [r5, #0]
 8008740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008742:	3001      	adds	r0, #1
 8008744:	6018      	str	r0, [r3, #0]
 8008746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008748:	2b00      	cmp	r3, #0
 800874a:	f43f acf1 	beq.w	8008130 <_dtoa_r+0xa0>
 800874e:	601d      	str	r5, [r3, #0]
 8008750:	e4ee      	b.n	8008130 <_dtoa_r+0xa0>
 8008752:	9f00      	ldr	r7, [sp, #0]
 8008754:	462b      	mov	r3, r5
 8008756:	461d      	mov	r5, r3
 8008758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800875c:	2a39      	cmp	r2, #57	; 0x39
 800875e:	d106      	bne.n	800876e <_dtoa_r+0x6de>
 8008760:	9a01      	ldr	r2, [sp, #4]
 8008762:	429a      	cmp	r2, r3
 8008764:	d1f7      	bne.n	8008756 <_dtoa_r+0x6c6>
 8008766:	9901      	ldr	r1, [sp, #4]
 8008768:	2230      	movs	r2, #48	; 0x30
 800876a:	3701      	adds	r7, #1
 800876c:	700a      	strb	r2, [r1, #0]
 800876e:	781a      	ldrb	r2, [r3, #0]
 8008770:	3201      	adds	r2, #1
 8008772:	701a      	strb	r2, [r3, #0]
 8008774:	e790      	b.n	8008698 <_dtoa_r+0x608>
 8008776:	4ba6      	ldr	r3, [pc, #664]	; (8008a10 <_dtoa_r+0x980>)
 8008778:	2200      	movs	r2, #0
 800877a:	f7f7 ff3d 	bl	80005f8 <__aeabi_dmul>
 800877e:	2200      	movs	r2, #0
 8008780:	2300      	movs	r3, #0
 8008782:	4606      	mov	r6, r0
 8008784:	460f      	mov	r7, r1
 8008786:	f7f8 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800878a:	2800      	cmp	r0, #0
 800878c:	d09d      	beq.n	80086ca <_dtoa_r+0x63a>
 800878e:	e7cf      	b.n	8008730 <_dtoa_r+0x6a0>
 8008790:	9a08      	ldr	r2, [sp, #32]
 8008792:	2a00      	cmp	r2, #0
 8008794:	f000 80d7 	beq.w	8008946 <_dtoa_r+0x8b6>
 8008798:	9a06      	ldr	r2, [sp, #24]
 800879a:	2a01      	cmp	r2, #1
 800879c:	f300 80ba 	bgt.w	8008914 <_dtoa_r+0x884>
 80087a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087a2:	2a00      	cmp	r2, #0
 80087a4:	f000 80b2 	beq.w	800890c <_dtoa_r+0x87c>
 80087a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087ac:	9e07      	ldr	r6, [sp, #28]
 80087ae:	9d04      	ldr	r5, [sp, #16]
 80087b0:	9a04      	ldr	r2, [sp, #16]
 80087b2:	441a      	add	r2, r3
 80087b4:	9204      	str	r2, [sp, #16]
 80087b6:	9a05      	ldr	r2, [sp, #20]
 80087b8:	2101      	movs	r1, #1
 80087ba:	441a      	add	r2, r3
 80087bc:	4620      	mov	r0, r4
 80087be:	9205      	str	r2, [sp, #20]
 80087c0:	f000 fd64 	bl	800928c <__i2b>
 80087c4:	4607      	mov	r7, r0
 80087c6:	2d00      	cmp	r5, #0
 80087c8:	dd0c      	ble.n	80087e4 <_dtoa_r+0x754>
 80087ca:	9b05      	ldr	r3, [sp, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dd09      	ble.n	80087e4 <_dtoa_r+0x754>
 80087d0:	42ab      	cmp	r3, r5
 80087d2:	9a04      	ldr	r2, [sp, #16]
 80087d4:	bfa8      	it	ge
 80087d6:	462b      	movge	r3, r5
 80087d8:	1ad2      	subs	r2, r2, r3
 80087da:	9204      	str	r2, [sp, #16]
 80087dc:	9a05      	ldr	r2, [sp, #20]
 80087de:	1aed      	subs	r5, r5, r3
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	9305      	str	r3, [sp, #20]
 80087e4:	9b07      	ldr	r3, [sp, #28]
 80087e6:	b31b      	cbz	r3, 8008830 <_dtoa_r+0x7a0>
 80087e8:	9b08      	ldr	r3, [sp, #32]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 80af 	beq.w	800894e <_dtoa_r+0x8be>
 80087f0:	2e00      	cmp	r6, #0
 80087f2:	dd13      	ble.n	800881c <_dtoa_r+0x78c>
 80087f4:	4639      	mov	r1, r7
 80087f6:	4632      	mov	r2, r6
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 fe07 	bl	800940c <__pow5mult>
 80087fe:	ee18 2a10 	vmov	r2, s16
 8008802:	4601      	mov	r1, r0
 8008804:	4607      	mov	r7, r0
 8008806:	4620      	mov	r0, r4
 8008808:	f000 fd56 	bl	80092b8 <__multiply>
 800880c:	ee18 1a10 	vmov	r1, s16
 8008810:	4680      	mov	r8, r0
 8008812:	4620      	mov	r0, r4
 8008814:	f000 fc82 	bl	800911c <_Bfree>
 8008818:	ee08 8a10 	vmov	s16, r8
 800881c:	9b07      	ldr	r3, [sp, #28]
 800881e:	1b9a      	subs	r2, r3, r6
 8008820:	d006      	beq.n	8008830 <_dtoa_r+0x7a0>
 8008822:	ee18 1a10 	vmov	r1, s16
 8008826:	4620      	mov	r0, r4
 8008828:	f000 fdf0 	bl	800940c <__pow5mult>
 800882c:	ee08 0a10 	vmov	s16, r0
 8008830:	2101      	movs	r1, #1
 8008832:	4620      	mov	r0, r4
 8008834:	f000 fd2a 	bl	800928c <__i2b>
 8008838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800883a:	2b00      	cmp	r3, #0
 800883c:	4606      	mov	r6, r0
 800883e:	f340 8088 	ble.w	8008952 <_dtoa_r+0x8c2>
 8008842:	461a      	mov	r2, r3
 8008844:	4601      	mov	r1, r0
 8008846:	4620      	mov	r0, r4
 8008848:	f000 fde0 	bl	800940c <__pow5mult>
 800884c:	9b06      	ldr	r3, [sp, #24]
 800884e:	2b01      	cmp	r3, #1
 8008850:	4606      	mov	r6, r0
 8008852:	f340 8081 	ble.w	8008958 <_dtoa_r+0x8c8>
 8008856:	f04f 0800 	mov.w	r8, #0
 800885a:	6933      	ldr	r3, [r6, #16]
 800885c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008860:	6918      	ldr	r0, [r3, #16]
 8008862:	f000 fcc3 	bl	80091ec <__hi0bits>
 8008866:	f1c0 0020 	rsb	r0, r0, #32
 800886a:	9b05      	ldr	r3, [sp, #20]
 800886c:	4418      	add	r0, r3
 800886e:	f010 001f 	ands.w	r0, r0, #31
 8008872:	f000 8092 	beq.w	800899a <_dtoa_r+0x90a>
 8008876:	f1c0 0320 	rsb	r3, r0, #32
 800887a:	2b04      	cmp	r3, #4
 800887c:	f340 808a 	ble.w	8008994 <_dtoa_r+0x904>
 8008880:	f1c0 001c 	rsb	r0, r0, #28
 8008884:	9b04      	ldr	r3, [sp, #16]
 8008886:	4403      	add	r3, r0
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	9b05      	ldr	r3, [sp, #20]
 800888c:	4403      	add	r3, r0
 800888e:	4405      	add	r5, r0
 8008890:	9305      	str	r3, [sp, #20]
 8008892:	9b04      	ldr	r3, [sp, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	dd07      	ble.n	80088a8 <_dtoa_r+0x818>
 8008898:	ee18 1a10 	vmov	r1, s16
 800889c:	461a      	mov	r2, r3
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 fe0e 	bl	80094c0 <__lshift>
 80088a4:	ee08 0a10 	vmov	s16, r0
 80088a8:	9b05      	ldr	r3, [sp, #20]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	dd05      	ble.n	80088ba <_dtoa_r+0x82a>
 80088ae:	4631      	mov	r1, r6
 80088b0:	461a      	mov	r2, r3
 80088b2:	4620      	mov	r0, r4
 80088b4:	f000 fe04 	bl	80094c0 <__lshift>
 80088b8:	4606      	mov	r6, r0
 80088ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d06e      	beq.n	800899e <_dtoa_r+0x90e>
 80088c0:	ee18 0a10 	vmov	r0, s16
 80088c4:	4631      	mov	r1, r6
 80088c6:	f000 fe6b 	bl	80095a0 <__mcmp>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	da67      	bge.n	800899e <_dtoa_r+0x90e>
 80088ce:	9b00      	ldr	r3, [sp, #0]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	ee18 1a10 	vmov	r1, s16
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	220a      	movs	r2, #10
 80088da:	2300      	movs	r3, #0
 80088dc:	4620      	mov	r0, r4
 80088de:	f000 fc3f 	bl	8009160 <__multadd>
 80088e2:	9b08      	ldr	r3, [sp, #32]
 80088e4:	ee08 0a10 	vmov	s16, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 81b1 	beq.w	8008c50 <_dtoa_r+0xbc0>
 80088ee:	2300      	movs	r3, #0
 80088f0:	4639      	mov	r1, r7
 80088f2:	220a      	movs	r2, #10
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 fc33 	bl	8009160 <__multadd>
 80088fa:	9b02      	ldr	r3, [sp, #8]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	4607      	mov	r7, r0
 8008900:	f300 808e 	bgt.w	8008a20 <_dtoa_r+0x990>
 8008904:	9b06      	ldr	r3, [sp, #24]
 8008906:	2b02      	cmp	r3, #2
 8008908:	dc51      	bgt.n	80089ae <_dtoa_r+0x91e>
 800890a:	e089      	b.n	8008a20 <_dtoa_r+0x990>
 800890c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800890e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008912:	e74b      	b.n	80087ac <_dtoa_r+0x71c>
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	1e5e      	subs	r6, r3, #1
 8008918:	9b07      	ldr	r3, [sp, #28]
 800891a:	42b3      	cmp	r3, r6
 800891c:	bfbf      	itttt	lt
 800891e:	9b07      	ldrlt	r3, [sp, #28]
 8008920:	9607      	strlt	r6, [sp, #28]
 8008922:	1af2      	sublt	r2, r6, r3
 8008924:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008926:	bfb6      	itet	lt
 8008928:	189b      	addlt	r3, r3, r2
 800892a:	1b9e      	subge	r6, r3, r6
 800892c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	bfb8      	it	lt
 8008932:	2600      	movlt	r6, #0
 8008934:	2b00      	cmp	r3, #0
 8008936:	bfb7      	itett	lt
 8008938:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800893c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008940:	1a9d      	sublt	r5, r3, r2
 8008942:	2300      	movlt	r3, #0
 8008944:	e734      	b.n	80087b0 <_dtoa_r+0x720>
 8008946:	9e07      	ldr	r6, [sp, #28]
 8008948:	9d04      	ldr	r5, [sp, #16]
 800894a:	9f08      	ldr	r7, [sp, #32]
 800894c:	e73b      	b.n	80087c6 <_dtoa_r+0x736>
 800894e:	9a07      	ldr	r2, [sp, #28]
 8008950:	e767      	b.n	8008822 <_dtoa_r+0x792>
 8008952:	9b06      	ldr	r3, [sp, #24]
 8008954:	2b01      	cmp	r3, #1
 8008956:	dc18      	bgt.n	800898a <_dtoa_r+0x8fa>
 8008958:	f1ba 0f00 	cmp.w	sl, #0
 800895c:	d115      	bne.n	800898a <_dtoa_r+0x8fa>
 800895e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008962:	b993      	cbnz	r3, 800898a <_dtoa_r+0x8fa>
 8008964:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008968:	0d1b      	lsrs	r3, r3, #20
 800896a:	051b      	lsls	r3, r3, #20
 800896c:	b183      	cbz	r3, 8008990 <_dtoa_r+0x900>
 800896e:	9b04      	ldr	r3, [sp, #16]
 8008970:	3301      	adds	r3, #1
 8008972:	9304      	str	r3, [sp, #16]
 8008974:	9b05      	ldr	r3, [sp, #20]
 8008976:	3301      	adds	r3, #1
 8008978:	9305      	str	r3, [sp, #20]
 800897a:	f04f 0801 	mov.w	r8, #1
 800897e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008980:	2b00      	cmp	r3, #0
 8008982:	f47f af6a 	bne.w	800885a <_dtoa_r+0x7ca>
 8008986:	2001      	movs	r0, #1
 8008988:	e76f      	b.n	800886a <_dtoa_r+0x7da>
 800898a:	f04f 0800 	mov.w	r8, #0
 800898e:	e7f6      	b.n	800897e <_dtoa_r+0x8ee>
 8008990:	4698      	mov	r8, r3
 8008992:	e7f4      	b.n	800897e <_dtoa_r+0x8ee>
 8008994:	f43f af7d 	beq.w	8008892 <_dtoa_r+0x802>
 8008998:	4618      	mov	r0, r3
 800899a:	301c      	adds	r0, #28
 800899c:	e772      	b.n	8008884 <_dtoa_r+0x7f4>
 800899e:	9b03      	ldr	r3, [sp, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dc37      	bgt.n	8008a14 <_dtoa_r+0x984>
 80089a4:	9b06      	ldr	r3, [sp, #24]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	dd34      	ble.n	8008a14 <_dtoa_r+0x984>
 80089aa:	9b03      	ldr	r3, [sp, #12]
 80089ac:	9302      	str	r3, [sp, #8]
 80089ae:	9b02      	ldr	r3, [sp, #8]
 80089b0:	b96b      	cbnz	r3, 80089ce <_dtoa_r+0x93e>
 80089b2:	4631      	mov	r1, r6
 80089b4:	2205      	movs	r2, #5
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 fbd2 	bl	8009160 <__multadd>
 80089bc:	4601      	mov	r1, r0
 80089be:	4606      	mov	r6, r0
 80089c0:	ee18 0a10 	vmov	r0, s16
 80089c4:	f000 fdec 	bl	80095a0 <__mcmp>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	f73f adbb 	bgt.w	8008544 <_dtoa_r+0x4b4>
 80089ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d0:	9d01      	ldr	r5, [sp, #4]
 80089d2:	43db      	mvns	r3, r3
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	f04f 0800 	mov.w	r8, #0
 80089da:	4631      	mov	r1, r6
 80089dc:	4620      	mov	r0, r4
 80089de:	f000 fb9d 	bl	800911c <_Bfree>
 80089e2:	2f00      	cmp	r7, #0
 80089e4:	f43f aea4 	beq.w	8008730 <_dtoa_r+0x6a0>
 80089e8:	f1b8 0f00 	cmp.w	r8, #0
 80089ec:	d005      	beq.n	80089fa <_dtoa_r+0x96a>
 80089ee:	45b8      	cmp	r8, r7
 80089f0:	d003      	beq.n	80089fa <_dtoa_r+0x96a>
 80089f2:	4641      	mov	r1, r8
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 fb91 	bl	800911c <_Bfree>
 80089fa:	4639      	mov	r1, r7
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 fb8d 	bl	800911c <_Bfree>
 8008a02:	e695      	b.n	8008730 <_dtoa_r+0x6a0>
 8008a04:	2600      	movs	r6, #0
 8008a06:	4637      	mov	r7, r6
 8008a08:	e7e1      	b.n	80089ce <_dtoa_r+0x93e>
 8008a0a:	9700      	str	r7, [sp, #0]
 8008a0c:	4637      	mov	r7, r6
 8008a0e:	e599      	b.n	8008544 <_dtoa_r+0x4b4>
 8008a10:	40240000 	.word	0x40240000
 8008a14:	9b08      	ldr	r3, [sp, #32]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 80ca 	beq.w	8008bb0 <_dtoa_r+0xb20>
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	9302      	str	r3, [sp, #8]
 8008a20:	2d00      	cmp	r5, #0
 8008a22:	dd05      	ble.n	8008a30 <_dtoa_r+0x9a0>
 8008a24:	4639      	mov	r1, r7
 8008a26:	462a      	mov	r2, r5
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 fd49 	bl	80094c0 <__lshift>
 8008a2e:	4607      	mov	r7, r0
 8008a30:	f1b8 0f00 	cmp.w	r8, #0
 8008a34:	d05b      	beq.n	8008aee <_dtoa_r+0xa5e>
 8008a36:	6879      	ldr	r1, [r7, #4]
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fb2f 	bl	800909c <_Balloc>
 8008a3e:	4605      	mov	r5, r0
 8008a40:	b928      	cbnz	r0, 8008a4e <_dtoa_r+0x9be>
 8008a42:	4b87      	ldr	r3, [pc, #540]	; (8008c60 <_dtoa_r+0xbd0>)
 8008a44:	4602      	mov	r2, r0
 8008a46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a4a:	f7ff bb3b 	b.w	80080c4 <_dtoa_r+0x34>
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	3202      	adds	r2, #2
 8008a52:	0092      	lsls	r2, r2, #2
 8008a54:	f107 010c 	add.w	r1, r7, #12
 8008a58:	300c      	adds	r0, #12
 8008a5a:	f000 fb04 	bl	8009066 <memcpy>
 8008a5e:	2201      	movs	r2, #1
 8008a60:	4629      	mov	r1, r5
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 fd2c 	bl	80094c0 <__lshift>
 8008a68:	9b01      	ldr	r3, [sp, #4]
 8008a6a:	f103 0901 	add.w	r9, r3, #1
 8008a6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008a72:	4413      	add	r3, r2
 8008a74:	9305      	str	r3, [sp, #20]
 8008a76:	f00a 0301 	and.w	r3, sl, #1
 8008a7a:	46b8      	mov	r8, r7
 8008a7c:	9304      	str	r3, [sp, #16]
 8008a7e:	4607      	mov	r7, r0
 8008a80:	4631      	mov	r1, r6
 8008a82:	ee18 0a10 	vmov	r0, s16
 8008a86:	f7ff fa75 	bl	8007f74 <quorem>
 8008a8a:	4641      	mov	r1, r8
 8008a8c:	9002      	str	r0, [sp, #8]
 8008a8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a92:	ee18 0a10 	vmov	r0, s16
 8008a96:	f000 fd83 	bl	80095a0 <__mcmp>
 8008a9a:	463a      	mov	r2, r7
 8008a9c:	9003      	str	r0, [sp, #12]
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 fd99 	bl	80095d8 <__mdiff>
 8008aa6:	68c2      	ldr	r2, [r0, #12]
 8008aa8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008aac:	4605      	mov	r5, r0
 8008aae:	bb02      	cbnz	r2, 8008af2 <_dtoa_r+0xa62>
 8008ab0:	4601      	mov	r1, r0
 8008ab2:	ee18 0a10 	vmov	r0, s16
 8008ab6:	f000 fd73 	bl	80095a0 <__mcmp>
 8008aba:	4602      	mov	r2, r0
 8008abc:	4629      	mov	r1, r5
 8008abe:	4620      	mov	r0, r4
 8008ac0:	9207      	str	r2, [sp, #28]
 8008ac2:	f000 fb2b 	bl	800911c <_Bfree>
 8008ac6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008aca:	ea43 0102 	orr.w	r1, r3, r2
 8008ace:	9b04      	ldr	r3, [sp, #16]
 8008ad0:	430b      	orrs	r3, r1
 8008ad2:	464d      	mov	r5, r9
 8008ad4:	d10f      	bne.n	8008af6 <_dtoa_r+0xa66>
 8008ad6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ada:	d02a      	beq.n	8008b32 <_dtoa_r+0xaa2>
 8008adc:	9b03      	ldr	r3, [sp, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	dd02      	ble.n	8008ae8 <_dtoa_r+0xa58>
 8008ae2:	9b02      	ldr	r3, [sp, #8]
 8008ae4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008ae8:	f88b a000 	strb.w	sl, [fp]
 8008aec:	e775      	b.n	80089da <_dtoa_r+0x94a>
 8008aee:	4638      	mov	r0, r7
 8008af0:	e7ba      	b.n	8008a68 <_dtoa_r+0x9d8>
 8008af2:	2201      	movs	r2, #1
 8008af4:	e7e2      	b.n	8008abc <_dtoa_r+0xa2c>
 8008af6:	9b03      	ldr	r3, [sp, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	db04      	blt.n	8008b06 <_dtoa_r+0xa76>
 8008afc:	9906      	ldr	r1, [sp, #24]
 8008afe:	430b      	orrs	r3, r1
 8008b00:	9904      	ldr	r1, [sp, #16]
 8008b02:	430b      	orrs	r3, r1
 8008b04:	d122      	bne.n	8008b4c <_dtoa_r+0xabc>
 8008b06:	2a00      	cmp	r2, #0
 8008b08:	ddee      	ble.n	8008ae8 <_dtoa_r+0xa58>
 8008b0a:	ee18 1a10 	vmov	r1, s16
 8008b0e:	2201      	movs	r2, #1
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 fcd5 	bl	80094c0 <__lshift>
 8008b16:	4631      	mov	r1, r6
 8008b18:	ee08 0a10 	vmov	s16, r0
 8008b1c:	f000 fd40 	bl	80095a0 <__mcmp>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	dc03      	bgt.n	8008b2c <_dtoa_r+0xa9c>
 8008b24:	d1e0      	bne.n	8008ae8 <_dtoa_r+0xa58>
 8008b26:	f01a 0f01 	tst.w	sl, #1
 8008b2a:	d0dd      	beq.n	8008ae8 <_dtoa_r+0xa58>
 8008b2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b30:	d1d7      	bne.n	8008ae2 <_dtoa_r+0xa52>
 8008b32:	2339      	movs	r3, #57	; 0x39
 8008b34:	f88b 3000 	strb.w	r3, [fp]
 8008b38:	462b      	mov	r3, r5
 8008b3a:	461d      	mov	r5, r3
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b42:	2a39      	cmp	r2, #57	; 0x39
 8008b44:	d071      	beq.n	8008c2a <_dtoa_r+0xb9a>
 8008b46:	3201      	adds	r2, #1
 8008b48:	701a      	strb	r2, [r3, #0]
 8008b4a:	e746      	b.n	80089da <_dtoa_r+0x94a>
 8008b4c:	2a00      	cmp	r2, #0
 8008b4e:	dd07      	ble.n	8008b60 <_dtoa_r+0xad0>
 8008b50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b54:	d0ed      	beq.n	8008b32 <_dtoa_r+0xaa2>
 8008b56:	f10a 0301 	add.w	r3, sl, #1
 8008b5a:	f88b 3000 	strb.w	r3, [fp]
 8008b5e:	e73c      	b.n	80089da <_dtoa_r+0x94a>
 8008b60:	9b05      	ldr	r3, [sp, #20]
 8008b62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008b66:	4599      	cmp	r9, r3
 8008b68:	d047      	beq.n	8008bfa <_dtoa_r+0xb6a>
 8008b6a:	ee18 1a10 	vmov	r1, s16
 8008b6e:	2300      	movs	r3, #0
 8008b70:	220a      	movs	r2, #10
 8008b72:	4620      	mov	r0, r4
 8008b74:	f000 faf4 	bl	8009160 <__multadd>
 8008b78:	45b8      	cmp	r8, r7
 8008b7a:	ee08 0a10 	vmov	s16, r0
 8008b7e:	f04f 0300 	mov.w	r3, #0
 8008b82:	f04f 020a 	mov.w	r2, #10
 8008b86:	4641      	mov	r1, r8
 8008b88:	4620      	mov	r0, r4
 8008b8a:	d106      	bne.n	8008b9a <_dtoa_r+0xb0a>
 8008b8c:	f000 fae8 	bl	8009160 <__multadd>
 8008b90:	4680      	mov	r8, r0
 8008b92:	4607      	mov	r7, r0
 8008b94:	f109 0901 	add.w	r9, r9, #1
 8008b98:	e772      	b.n	8008a80 <_dtoa_r+0x9f0>
 8008b9a:	f000 fae1 	bl	8009160 <__multadd>
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	4680      	mov	r8, r0
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	220a      	movs	r2, #10
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 fada 	bl	8009160 <__multadd>
 8008bac:	4607      	mov	r7, r0
 8008bae:	e7f1      	b.n	8008b94 <_dtoa_r+0xb04>
 8008bb0:	9b03      	ldr	r3, [sp, #12]
 8008bb2:	9302      	str	r3, [sp, #8]
 8008bb4:	9d01      	ldr	r5, [sp, #4]
 8008bb6:	ee18 0a10 	vmov	r0, s16
 8008bba:	4631      	mov	r1, r6
 8008bbc:	f7ff f9da 	bl	8007f74 <quorem>
 8008bc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008bc4:	9b01      	ldr	r3, [sp, #4]
 8008bc6:	f805 ab01 	strb.w	sl, [r5], #1
 8008bca:	1aea      	subs	r2, r5, r3
 8008bcc:	9b02      	ldr	r3, [sp, #8]
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	dd09      	ble.n	8008be6 <_dtoa_r+0xb56>
 8008bd2:	ee18 1a10 	vmov	r1, s16
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	220a      	movs	r2, #10
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 fac0 	bl	8009160 <__multadd>
 8008be0:	ee08 0a10 	vmov	s16, r0
 8008be4:	e7e7      	b.n	8008bb6 <_dtoa_r+0xb26>
 8008be6:	9b02      	ldr	r3, [sp, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	bfc8      	it	gt
 8008bec:	461d      	movgt	r5, r3
 8008bee:	9b01      	ldr	r3, [sp, #4]
 8008bf0:	bfd8      	it	le
 8008bf2:	2501      	movle	r5, #1
 8008bf4:	441d      	add	r5, r3
 8008bf6:	f04f 0800 	mov.w	r8, #0
 8008bfa:	ee18 1a10 	vmov	r1, s16
 8008bfe:	2201      	movs	r2, #1
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 fc5d 	bl	80094c0 <__lshift>
 8008c06:	4631      	mov	r1, r6
 8008c08:	ee08 0a10 	vmov	s16, r0
 8008c0c:	f000 fcc8 	bl	80095a0 <__mcmp>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	dc91      	bgt.n	8008b38 <_dtoa_r+0xaa8>
 8008c14:	d102      	bne.n	8008c1c <_dtoa_r+0xb8c>
 8008c16:	f01a 0f01 	tst.w	sl, #1
 8008c1a:	d18d      	bne.n	8008b38 <_dtoa_r+0xaa8>
 8008c1c:	462b      	mov	r3, r5
 8008c1e:	461d      	mov	r5, r3
 8008c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c24:	2a30      	cmp	r2, #48	; 0x30
 8008c26:	d0fa      	beq.n	8008c1e <_dtoa_r+0xb8e>
 8008c28:	e6d7      	b.n	80089da <_dtoa_r+0x94a>
 8008c2a:	9a01      	ldr	r2, [sp, #4]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d184      	bne.n	8008b3a <_dtoa_r+0xaaa>
 8008c30:	9b00      	ldr	r3, [sp, #0]
 8008c32:	3301      	adds	r3, #1
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	2331      	movs	r3, #49	; 0x31
 8008c38:	7013      	strb	r3, [r2, #0]
 8008c3a:	e6ce      	b.n	80089da <_dtoa_r+0x94a>
 8008c3c:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <_dtoa_r+0xbd4>)
 8008c3e:	f7ff ba95 	b.w	800816c <_dtoa_r+0xdc>
 8008c42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f47f aa6e 	bne.w	8008126 <_dtoa_r+0x96>
 8008c4a:	4b07      	ldr	r3, [pc, #28]	; (8008c68 <_dtoa_r+0xbd8>)
 8008c4c:	f7ff ba8e 	b.w	800816c <_dtoa_r+0xdc>
 8008c50:	9b02      	ldr	r3, [sp, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dcae      	bgt.n	8008bb4 <_dtoa_r+0xb24>
 8008c56:	9b06      	ldr	r3, [sp, #24]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	f73f aea8 	bgt.w	80089ae <_dtoa_r+0x91e>
 8008c5e:	e7a9      	b.n	8008bb4 <_dtoa_r+0xb24>
 8008c60:	0800aa25 	.word	0x0800aa25
 8008c64:	0800a2ec 	.word	0x0800a2ec
 8008c68:	0800a9a6 	.word	0x0800a9a6

08008c6c <__sflush_r>:
 8008c6c:	898a      	ldrh	r2, [r1, #12]
 8008c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c72:	4605      	mov	r5, r0
 8008c74:	0710      	lsls	r0, r2, #28
 8008c76:	460c      	mov	r4, r1
 8008c78:	d458      	bmi.n	8008d2c <__sflush_r+0xc0>
 8008c7a:	684b      	ldr	r3, [r1, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	dc05      	bgt.n	8008c8c <__sflush_r+0x20>
 8008c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dc02      	bgt.n	8008c8c <__sflush_r+0x20>
 8008c86:	2000      	movs	r0, #0
 8008c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c8e:	2e00      	cmp	r6, #0
 8008c90:	d0f9      	beq.n	8008c86 <__sflush_r+0x1a>
 8008c92:	2300      	movs	r3, #0
 8008c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c98:	682f      	ldr	r7, [r5, #0]
 8008c9a:	602b      	str	r3, [r5, #0]
 8008c9c:	d032      	beq.n	8008d04 <__sflush_r+0x98>
 8008c9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	075a      	lsls	r2, r3, #29
 8008ca4:	d505      	bpl.n	8008cb2 <__sflush_r+0x46>
 8008ca6:	6863      	ldr	r3, [r4, #4]
 8008ca8:	1ac0      	subs	r0, r0, r3
 8008caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cac:	b10b      	cbz	r3, 8008cb2 <__sflush_r+0x46>
 8008cae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cb0:	1ac0      	subs	r0, r0, r3
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cb8:	6a21      	ldr	r1, [r4, #32]
 8008cba:	4628      	mov	r0, r5
 8008cbc:	47b0      	blx	r6
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	d106      	bne.n	8008cd2 <__sflush_r+0x66>
 8008cc4:	6829      	ldr	r1, [r5, #0]
 8008cc6:	291d      	cmp	r1, #29
 8008cc8:	d82c      	bhi.n	8008d24 <__sflush_r+0xb8>
 8008cca:	4a2a      	ldr	r2, [pc, #168]	; (8008d74 <__sflush_r+0x108>)
 8008ccc:	40ca      	lsrs	r2, r1
 8008cce:	07d6      	lsls	r6, r2, #31
 8008cd0:	d528      	bpl.n	8008d24 <__sflush_r+0xb8>
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	6062      	str	r2, [r4, #4]
 8008cd6:	04d9      	lsls	r1, r3, #19
 8008cd8:	6922      	ldr	r2, [r4, #16]
 8008cda:	6022      	str	r2, [r4, #0]
 8008cdc:	d504      	bpl.n	8008ce8 <__sflush_r+0x7c>
 8008cde:	1c42      	adds	r2, r0, #1
 8008ce0:	d101      	bne.n	8008ce6 <__sflush_r+0x7a>
 8008ce2:	682b      	ldr	r3, [r5, #0]
 8008ce4:	b903      	cbnz	r3, 8008ce8 <__sflush_r+0x7c>
 8008ce6:	6560      	str	r0, [r4, #84]	; 0x54
 8008ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cea:	602f      	str	r7, [r5, #0]
 8008cec:	2900      	cmp	r1, #0
 8008cee:	d0ca      	beq.n	8008c86 <__sflush_r+0x1a>
 8008cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cf4:	4299      	cmp	r1, r3
 8008cf6:	d002      	beq.n	8008cfe <__sflush_r+0x92>
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	f7fe f8e1 	bl	8006ec0 <_free_r>
 8008cfe:	2000      	movs	r0, #0
 8008d00:	6360      	str	r0, [r4, #52]	; 0x34
 8008d02:	e7c1      	b.n	8008c88 <__sflush_r+0x1c>
 8008d04:	6a21      	ldr	r1, [r4, #32]
 8008d06:	2301      	movs	r3, #1
 8008d08:	4628      	mov	r0, r5
 8008d0a:	47b0      	blx	r6
 8008d0c:	1c41      	adds	r1, r0, #1
 8008d0e:	d1c7      	bne.n	8008ca0 <__sflush_r+0x34>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0c4      	beq.n	8008ca0 <__sflush_r+0x34>
 8008d16:	2b1d      	cmp	r3, #29
 8008d18:	d001      	beq.n	8008d1e <__sflush_r+0xb2>
 8008d1a:	2b16      	cmp	r3, #22
 8008d1c:	d101      	bne.n	8008d22 <__sflush_r+0xb6>
 8008d1e:	602f      	str	r7, [r5, #0]
 8008d20:	e7b1      	b.n	8008c86 <__sflush_r+0x1a>
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d28:	81a3      	strh	r3, [r4, #12]
 8008d2a:	e7ad      	b.n	8008c88 <__sflush_r+0x1c>
 8008d2c:	690f      	ldr	r7, [r1, #16]
 8008d2e:	2f00      	cmp	r7, #0
 8008d30:	d0a9      	beq.n	8008c86 <__sflush_r+0x1a>
 8008d32:	0793      	lsls	r3, r2, #30
 8008d34:	680e      	ldr	r6, [r1, #0]
 8008d36:	bf08      	it	eq
 8008d38:	694b      	ldreq	r3, [r1, #20]
 8008d3a:	600f      	str	r7, [r1, #0]
 8008d3c:	bf18      	it	ne
 8008d3e:	2300      	movne	r3, #0
 8008d40:	eba6 0807 	sub.w	r8, r6, r7
 8008d44:	608b      	str	r3, [r1, #8]
 8008d46:	f1b8 0f00 	cmp.w	r8, #0
 8008d4a:	dd9c      	ble.n	8008c86 <__sflush_r+0x1a>
 8008d4c:	6a21      	ldr	r1, [r4, #32]
 8008d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d50:	4643      	mov	r3, r8
 8008d52:	463a      	mov	r2, r7
 8008d54:	4628      	mov	r0, r5
 8008d56:	47b0      	blx	r6
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	dc06      	bgt.n	8008d6a <__sflush_r+0xfe>
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	e78e      	b.n	8008c88 <__sflush_r+0x1c>
 8008d6a:	4407      	add	r7, r0
 8008d6c:	eba8 0800 	sub.w	r8, r8, r0
 8008d70:	e7e9      	b.n	8008d46 <__sflush_r+0xda>
 8008d72:	bf00      	nop
 8008d74:	20400001 	.word	0x20400001

08008d78 <_fflush_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	690b      	ldr	r3, [r1, #16]
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	460c      	mov	r4, r1
 8008d80:	b913      	cbnz	r3, 8008d88 <_fflush_r+0x10>
 8008d82:	2500      	movs	r5, #0
 8008d84:	4628      	mov	r0, r5
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	b118      	cbz	r0, 8008d92 <_fflush_r+0x1a>
 8008d8a:	6983      	ldr	r3, [r0, #24]
 8008d8c:	b90b      	cbnz	r3, 8008d92 <_fflush_r+0x1a>
 8008d8e:	f000 f8c5 	bl	8008f1c <__sinit>
 8008d92:	4b14      	ldr	r3, [pc, #80]	; (8008de4 <_fflush_r+0x6c>)
 8008d94:	429c      	cmp	r4, r3
 8008d96:	d11b      	bne.n	8008dd0 <_fflush_r+0x58>
 8008d98:	686c      	ldr	r4, [r5, #4]
 8008d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0ef      	beq.n	8008d82 <_fflush_r+0xa>
 8008da2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008da4:	07d0      	lsls	r0, r2, #31
 8008da6:	d404      	bmi.n	8008db2 <_fflush_r+0x3a>
 8008da8:	0599      	lsls	r1, r3, #22
 8008daa:	d402      	bmi.n	8008db2 <_fflush_r+0x3a>
 8008dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dae:	f000 f958 	bl	8009062 <__retarget_lock_acquire_recursive>
 8008db2:	4628      	mov	r0, r5
 8008db4:	4621      	mov	r1, r4
 8008db6:	f7ff ff59 	bl	8008c6c <__sflush_r>
 8008dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dbc:	07da      	lsls	r2, r3, #31
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	d4e0      	bmi.n	8008d84 <_fflush_r+0xc>
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	059b      	lsls	r3, r3, #22
 8008dc6:	d4dd      	bmi.n	8008d84 <_fflush_r+0xc>
 8008dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dca:	f000 f94b 	bl	8009064 <__retarget_lock_release_recursive>
 8008dce:	e7d9      	b.n	8008d84 <_fflush_r+0xc>
 8008dd0:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <_fflush_r+0x70>)
 8008dd2:	429c      	cmp	r4, r3
 8008dd4:	d101      	bne.n	8008dda <_fflush_r+0x62>
 8008dd6:	68ac      	ldr	r4, [r5, #8]
 8008dd8:	e7df      	b.n	8008d9a <_fflush_r+0x22>
 8008dda:	4b04      	ldr	r3, [pc, #16]	; (8008dec <_fflush_r+0x74>)
 8008ddc:	429c      	cmp	r4, r3
 8008dde:	bf08      	it	eq
 8008de0:	68ec      	ldreq	r4, [r5, #12]
 8008de2:	e7da      	b.n	8008d9a <_fflush_r+0x22>
 8008de4:	0800aa58 	.word	0x0800aa58
 8008de8:	0800aa78 	.word	0x0800aa78
 8008dec:	0800aa38 	.word	0x0800aa38

08008df0 <fileno>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	4e1a      	ldr	r6, [pc, #104]	; (8008e5c <fileno+0x6c>)
 8008df4:	6835      	ldr	r5, [r6, #0]
 8008df6:	4604      	mov	r4, r0
 8008df8:	b125      	cbz	r5, 8008e04 <fileno+0x14>
 8008dfa:	69ab      	ldr	r3, [r5, #24]
 8008dfc:	b913      	cbnz	r3, 8008e04 <fileno+0x14>
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f000 f88c 	bl	8008f1c <__sinit>
 8008e04:	4b16      	ldr	r3, [pc, #88]	; (8008e60 <fileno+0x70>)
 8008e06:	429c      	cmp	r4, r3
 8008e08:	d118      	bne.n	8008e3c <fileno+0x4c>
 8008e0a:	686c      	ldr	r4, [r5, #4]
 8008e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e0e:	07d8      	lsls	r0, r3, #31
 8008e10:	d405      	bmi.n	8008e1e <fileno+0x2e>
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	0599      	lsls	r1, r3, #22
 8008e16:	d402      	bmi.n	8008e1e <fileno+0x2e>
 8008e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e1a:	f000 f922 	bl	8009062 <__retarget_lock_acquire_recursive>
 8008e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e22:	b1ab      	cbz	r3, 8008e50 <fileno+0x60>
 8008e24:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8008e28:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e2a:	07d2      	lsls	r2, r2, #31
 8008e2c:	d404      	bmi.n	8008e38 <fileno+0x48>
 8008e2e:	059b      	lsls	r3, r3, #22
 8008e30:	d402      	bmi.n	8008e38 <fileno+0x48>
 8008e32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e34:	f000 f916 	bl	8009064 <__retarget_lock_release_recursive>
 8008e38:	4628      	mov	r0, r5
 8008e3a:	bd70      	pop	{r4, r5, r6, pc}
 8008e3c:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <fileno+0x74>)
 8008e3e:	429c      	cmp	r4, r3
 8008e40:	d101      	bne.n	8008e46 <fileno+0x56>
 8008e42:	68ac      	ldr	r4, [r5, #8]
 8008e44:	e7e2      	b.n	8008e0c <fileno+0x1c>
 8008e46:	4b08      	ldr	r3, [pc, #32]	; (8008e68 <fileno+0x78>)
 8008e48:	429c      	cmp	r4, r3
 8008e4a:	bf08      	it	eq
 8008e4c:	68ec      	ldreq	r4, [r5, #12]
 8008e4e:	e7dd      	b.n	8008e0c <fileno+0x1c>
 8008e50:	6832      	ldr	r2, [r6, #0]
 8008e52:	2109      	movs	r1, #9
 8008e54:	6011      	str	r1, [r2, #0]
 8008e56:	f04f 35ff 	mov.w	r5, #4294967295
 8008e5a:	e7e5      	b.n	8008e28 <fileno+0x38>
 8008e5c:	2000003c 	.word	0x2000003c
 8008e60:	0800aa58 	.word	0x0800aa58
 8008e64:	0800aa78 	.word	0x0800aa78
 8008e68:	0800aa38 	.word	0x0800aa38

08008e6c <std>:
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	b510      	push	{r4, lr}
 8008e70:	4604      	mov	r4, r0
 8008e72:	e9c0 3300 	strd	r3, r3, [r0]
 8008e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e7a:	6083      	str	r3, [r0, #8]
 8008e7c:	8181      	strh	r1, [r0, #12]
 8008e7e:	6643      	str	r3, [r0, #100]	; 0x64
 8008e80:	81c2      	strh	r2, [r0, #14]
 8008e82:	6183      	str	r3, [r0, #24]
 8008e84:	4619      	mov	r1, r3
 8008e86:	2208      	movs	r2, #8
 8008e88:	305c      	adds	r0, #92	; 0x5c
 8008e8a:	f7fe f811 	bl	8006eb0 <memset>
 8008e8e:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <std+0x38>)
 8008e90:	6263      	str	r3, [r4, #36]	; 0x24
 8008e92:	4b05      	ldr	r3, [pc, #20]	; (8008ea8 <std+0x3c>)
 8008e94:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e96:	4b05      	ldr	r3, [pc, #20]	; (8008eac <std+0x40>)
 8008e98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e9a:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <std+0x44>)
 8008e9c:	6224      	str	r4, [r4, #32]
 8008e9e:	6323      	str	r3, [r4, #48]	; 0x30
 8008ea0:	bd10      	pop	{r4, pc}
 8008ea2:	bf00      	nop
 8008ea4:	08009a89 	.word	0x08009a89
 8008ea8:	08009aab 	.word	0x08009aab
 8008eac:	08009ae3 	.word	0x08009ae3
 8008eb0:	08009b07 	.word	0x08009b07

08008eb4 <_cleanup_r>:
 8008eb4:	4901      	ldr	r1, [pc, #4]	; (8008ebc <_cleanup_r+0x8>)
 8008eb6:	f000 b8af 	b.w	8009018 <_fwalk_reent>
 8008eba:	bf00      	nop
 8008ebc:	08008d79 	.word	0x08008d79

08008ec0 <__sfmoreglue>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	2268      	movs	r2, #104	; 0x68
 8008ec4:	1e4d      	subs	r5, r1, #1
 8008ec6:	4355      	muls	r5, r2
 8008ec8:	460e      	mov	r6, r1
 8008eca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ece:	f7fe f863 	bl	8006f98 <_malloc_r>
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	b140      	cbz	r0, 8008ee8 <__sfmoreglue+0x28>
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	e9c0 1600 	strd	r1, r6, [r0]
 8008edc:	300c      	adds	r0, #12
 8008ede:	60a0      	str	r0, [r4, #8]
 8008ee0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ee4:	f7fd ffe4 	bl	8006eb0 <memset>
 8008ee8:	4620      	mov	r0, r4
 8008eea:	bd70      	pop	{r4, r5, r6, pc}

08008eec <__sfp_lock_acquire>:
 8008eec:	4801      	ldr	r0, [pc, #4]	; (8008ef4 <__sfp_lock_acquire+0x8>)
 8008eee:	f000 b8b8 	b.w	8009062 <__retarget_lock_acquire_recursive>
 8008ef2:	bf00      	nop
 8008ef4:	20000641 	.word	0x20000641

08008ef8 <__sfp_lock_release>:
 8008ef8:	4801      	ldr	r0, [pc, #4]	; (8008f00 <__sfp_lock_release+0x8>)
 8008efa:	f000 b8b3 	b.w	8009064 <__retarget_lock_release_recursive>
 8008efe:	bf00      	nop
 8008f00:	20000641 	.word	0x20000641

08008f04 <__sinit_lock_acquire>:
 8008f04:	4801      	ldr	r0, [pc, #4]	; (8008f0c <__sinit_lock_acquire+0x8>)
 8008f06:	f000 b8ac 	b.w	8009062 <__retarget_lock_acquire_recursive>
 8008f0a:	bf00      	nop
 8008f0c:	20000642 	.word	0x20000642

08008f10 <__sinit_lock_release>:
 8008f10:	4801      	ldr	r0, [pc, #4]	; (8008f18 <__sinit_lock_release+0x8>)
 8008f12:	f000 b8a7 	b.w	8009064 <__retarget_lock_release_recursive>
 8008f16:	bf00      	nop
 8008f18:	20000642 	.word	0x20000642

08008f1c <__sinit>:
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	4604      	mov	r4, r0
 8008f20:	f7ff fff0 	bl	8008f04 <__sinit_lock_acquire>
 8008f24:	69a3      	ldr	r3, [r4, #24]
 8008f26:	b11b      	cbz	r3, 8008f30 <__sinit+0x14>
 8008f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f2c:	f7ff bff0 	b.w	8008f10 <__sinit_lock_release>
 8008f30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f34:	6523      	str	r3, [r4, #80]	; 0x50
 8008f36:	4b13      	ldr	r3, [pc, #76]	; (8008f84 <__sinit+0x68>)
 8008f38:	4a13      	ldr	r2, [pc, #76]	; (8008f88 <__sinit+0x6c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f3e:	42a3      	cmp	r3, r4
 8008f40:	bf04      	itt	eq
 8008f42:	2301      	moveq	r3, #1
 8008f44:	61a3      	streq	r3, [r4, #24]
 8008f46:	4620      	mov	r0, r4
 8008f48:	f000 f820 	bl	8008f8c <__sfp>
 8008f4c:	6060      	str	r0, [r4, #4]
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f000 f81c 	bl	8008f8c <__sfp>
 8008f54:	60a0      	str	r0, [r4, #8]
 8008f56:	4620      	mov	r0, r4
 8008f58:	f000 f818 	bl	8008f8c <__sfp>
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	60e0      	str	r0, [r4, #12]
 8008f60:	2104      	movs	r1, #4
 8008f62:	6860      	ldr	r0, [r4, #4]
 8008f64:	f7ff ff82 	bl	8008e6c <std>
 8008f68:	68a0      	ldr	r0, [r4, #8]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	2109      	movs	r1, #9
 8008f6e:	f7ff ff7d 	bl	8008e6c <std>
 8008f72:	68e0      	ldr	r0, [r4, #12]
 8008f74:	2202      	movs	r2, #2
 8008f76:	2112      	movs	r1, #18
 8008f78:	f7ff ff78 	bl	8008e6c <std>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	61a3      	str	r3, [r4, #24]
 8008f80:	e7d2      	b.n	8008f28 <__sinit+0xc>
 8008f82:	bf00      	nop
 8008f84:	0800a2d8 	.word	0x0800a2d8
 8008f88:	08008eb5 	.word	0x08008eb5

08008f8c <__sfp>:
 8008f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8e:	4607      	mov	r7, r0
 8008f90:	f7ff ffac 	bl	8008eec <__sfp_lock_acquire>
 8008f94:	4b1e      	ldr	r3, [pc, #120]	; (8009010 <__sfp+0x84>)
 8008f96:	681e      	ldr	r6, [r3, #0]
 8008f98:	69b3      	ldr	r3, [r6, #24]
 8008f9a:	b913      	cbnz	r3, 8008fa2 <__sfp+0x16>
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	f7ff ffbd 	bl	8008f1c <__sinit>
 8008fa2:	3648      	adds	r6, #72	; 0x48
 8008fa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	d503      	bpl.n	8008fb4 <__sfp+0x28>
 8008fac:	6833      	ldr	r3, [r6, #0]
 8008fae:	b30b      	cbz	r3, 8008ff4 <__sfp+0x68>
 8008fb0:	6836      	ldr	r6, [r6, #0]
 8008fb2:	e7f7      	b.n	8008fa4 <__sfp+0x18>
 8008fb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fb8:	b9d5      	cbnz	r5, 8008ff0 <__sfp+0x64>
 8008fba:	4b16      	ldr	r3, [pc, #88]	; (8009014 <__sfp+0x88>)
 8008fbc:	60e3      	str	r3, [r4, #12]
 8008fbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fc2:	6665      	str	r5, [r4, #100]	; 0x64
 8008fc4:	f000 f84c 	bl	8009060 <__retarget_lock_init_recursive>
 8008fc8:	f7ff ff96 	bl	8008ef8 <__sfp_lock_release>
 8008fcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008fd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008fd4:	6025      	str	r5, [r4, #0]
 8008fd6:	61a5      	str	r5, [r4, #24]
 8008fd8:	2208      	movs	r2, #8
 8008fda:	4629      	mov	r1, r5
 8008fdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008fe0:	f7fd ff66 	bl	8006eb0 <memset>
 8008fe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008fe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008fec:	4620      	mov	r0, r4
 8008fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ff0:	3468      	adds	r4, #104	; 0x68
 8008ff2:	e7d9      	b.n	8008fa8 <__sfp+0x1c>
 8008ff4:	2104      	movs	r1, #4
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	f7ff ff62 	bl	8008ec0 <__sfmoreglue>
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	6030      	str	r0, [r6, #0]
 8009000:	2800      	cmp	r0, #0
 8009002:	d1d5      	bne.n	8008fb0 <__sfp+0x24>
 8009004:	f7ff ff78 	bl	8008ef8 <__sfp_lock_release>
 8009008:	230c      	movs	r3, #12
 800900a:	603b      	str	r3, [r7, #0]
 800900c:	e7ee      	b.n	8008fec <__sfp+0x60>
 800900e:	bf00      	nop
 8009010:	0800a2d8 	.word	0x0800a2d8
 8009014:	ffff0001 	.word	0xffff0001

08009018 <_fwalk_reent>:
 8009018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800901c:	4606      	mov	r6, r0
 800901e:	4688      	mov	r8, r1
 8009020:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009024:	2700      	movs	r7, #0
 8009026:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800902a:	f1b9 0901 	subs.w	r9, r9, #1
 800902e:	d505      	bpl.n	800903c <_fwalk_reent+0x24>
 8009030:	6824      	ldr	r4, [r4, #0]
 8009032:	2c00      	cmp	r4, #0
 8009034:	d1f7      	bne.n	8009026 <_fwalk_reent+0xe>
 8009036:	4638      	mov	r0, r7
 8009038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800903c:	89ab      	ldrh	r3, [r5, #12]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d907      	bls.n	8009052 <_fwalk_reent+0x3a>
 8009042:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009046:	3301      	adds	r3, #1
 8009048:	d003      	beq.n	8009052 <_fwalk_reent+0x3a>
 800904a:	4629      	mov	r1, r5
 800904c:	4630      	mov	r0, r6
 800904e:	47c0      	blx	r8
 8009050:	4307      	orrs	r7, r0
 8009052:	3568      	adds	r5, #104	; 0x68
 8009054:	e7e9      	b.n	800902a <_fwalk_reent+0x12>
	...

08009058 <_localeconv_r>:
 8009058:	4800      	ldr	r0, [pc, #0]	; (800905c <_localeconv_r+0x4>)
 800905a:	4770      	bx	lr
 800905c:	20000190 	.word	0x20000190

08009060 <__retarget_lock_init_recursive>:
 8009060:	4770      	bx	lr

08009062 <__retarget_lock_acquire_recursive>:
 8009062:	4770      	bx	lr

08009064 <__retarget_lock_release_recursive>:
 8009064:	4770      	bx	lr

08009066 <memcpy>:
 8009066:	440a      	add	r2, r1
 8009068:	4291      	cmp	r1, r2
 800906a:	f100 33ff 	add.w	r3, r0, #4294967295
 800906e:	d100      	bne.n	8009072 <memcpy+0xc>
 8009070:	4770      	bx	lr
 8009072:	b510      	push	{r4, lr}
 8009074:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009078:	f803 4f01 	strb.w	r4, [r3, #1]!
 800907c:	4291      	cmp	r1, r2
 800907e:	d1f9      	bne.n	8009074 <memcpy+0xe>
 8009080:	bd10      	pop	{r4, pc}
	...

08009084 <__malloc_lock>:
 8009084:	4801      	ldr	r0, [pc, #4]	; (800908c <__malloc_lock+0x8>)
 8009086:	f7ff bfec 	b.w	8009062 <__retarget_lock_acquire_recursive>
 800908a:	bf00      	nop
 800908c:	20000640 	.word	0x20000640

08009090 <__malloc_unlock>:
 8009090:	4801      	ldr	r0, [pc, #4]	; (8009098 <__malloc_unlock+0x8>)
 8009092:	f7ff bfe7 	b.w	8009064 <__retarget_lock_release_recursive>
 8009096:	bf00      	nop
 8009098:	20000640 	.word	0x20000640

0800909c <_Balloc>:
 800909c:	b570      	push	{r4, r5, r6, lr}
 800909e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090a0:	4604      	mov	r4, r0
 80090a2:	460d      	mov	r5, r1
 80090a4:	b976      	cbnz	r6, 80090c4 <_Balloc+0x28>
 80090a6:	2010      	movs	r0, #16
 80090a8:	f7fd fefa 	bl	8006ea0 <malloc>
 80090ac:	4602      	mov	r2, r0
 80090ae:	6260      	str	r0, [r4, #36]	; 0x24
 80090b0:	b920      	cbnz	r0, 80090bc <_Balloc+0x20>
 80090b2:	4b18      	ldr	r3, [pc, #96]	; (8009114 <_Balloc+0x78>)
 80090b4:	4818      	ldr	r0, [pc, #96]	; (8009118 <_Balloc+0x7c>)
 80090b6:	2166      	movs	r1, #102	; 0x66
 80090b8:	f000 fd2a 	bl	8009b10 <__assert_func>
 80090bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090c0:	6006      	str	r6, [r0, #0]
 80090c2:	60c6      	str	r6, [r0, #12]
 80090c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090c6:	68f3      	ldr	r3, [r6, #12]
 80090c8:	b183      	cbz	r3, 80090ec <_Balloc+0x50>
 80090ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090d2:	b9b8      	cbnz	r0, 8009104 <_Balloc+0x68>
 80090d4:	2101      	movs	r1, #1
 80090d6:	fa01 f605 	lsl.w	r6, r1, r5
 80090da:	1d72      	adds	r2, r6, #5
 80090dc:	0092      	lsls	r2, r2, #2
 80090de:	4620      	mov	r0, r4
 80090e0:	f000 fb60 	bl	80097a4 <_calloc_r>
 80090e4:	b160      	cbz	r0, 8009100 <_Balloc+0x64>
 80090e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090ea:	e00e      	b.n	800910a <_Balloc+0x6e>
 80090ec:	2221      	movs	r2, #33	; 0x21
 80090ee:	2104      	movs	r1, #4
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 fb57 	bl	80097a4 <_calloc_r>
 80090f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090f8:	60f0      	str	r0, [r6, #12]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1e4      	bne.n	80090ca <_Balloc+0x2e>
 8009100:	2000      	movs	r0, #0
 8009102:	bd70      	pop	{r4, r5, r6, pc}
 8009104:	6802      	ldr	r2, [r0, #0]
 8009106:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800910a:	2300      	movs	r3, #0
 800910c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009110:	e7f7      	b.n	8009102 <_Balloc+0x66>
 8009112:	bf00      	nop
 8009114:	0800a9b3 	.word	0x0800a9b3
 8009118:	0800aa98 	.word	0x0800aa98

0800911c <_Bfree>:
 800911c:	b570      	push	{r4, r5, r6, lr}
 800911e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009120:	4605      	mov	r5, r0
 8009122:	460c      	mov	r4, r1
 8009124:	b976      	cbnz	r6, 8009144 <_Bfree+0x28>
 8009126:	2010      	movs	r0, #16
 8009128:	f7fd feba 	bl	8006ea0 <malloc>
 800912c:	4602      	mov	r2, r0
 800912e:	6268      	str	r0, [r5, #36]	; 0x24
 8009130:	b920      	cbnz	r0, 800913c <_Bfree+0x20>
 8009132:	4b09      	ldr	r3, [pc, #36]	; (8009158 <_Bfree+0x3c>)
 8009134:	4809      	ldr	r0, [pc, #36]	; (800915c <_Bfree+0x40>)
 8009136:	218a      	movs	r1, #138	; 0x8a
 8009138:	f000 fcea 	bl	8009b10 <__assert_func>
 800913c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009140:	6006      	str	r6, [r0, #0]
 8009142:	60c6      	str	r6, [r0, #12]
 8009144:	b13c      	cbz	r4, 8009156 <_Bfree+0x3a>
 8009146:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009148:	6862      	ldr	r2, [r4, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009150:	6021      	str	r1, [r4, #0]
 8009152:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009156:	bd70      	pop	{r4, r5, r6, pc}
 8009158:	0800a9b3 	.word	0x0800a9b3
 800915c:	0800aa98 	.word	0x0800aa98

08009160 <__multadd>:
 8009160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009164:	690d      	ldr	r5, [r1, #16]
 8009166:	4607      	mov	r7, r0
 8009168:	460c      	mov	r4, r1
 800916a:	461e      	mov	r6, r3
 800916c:	f101 0c14 	add.w	ip, r1, #20
 8009170:	2000      	movs	r0, #0
 8009172:	f8dc 3000 	ldr.w	r3, [ip]
 8009176:	b299      	uxth	r1, r3
 8009178:	fb02 6101 	mla	r1, r2, r1, r6
 800917c:	0c1e      	lsrs	r6, r3, #16
 800917e:	0c0b      	lsrs	r3, r1, #16
 8009180:	fb02 3306 	mla	r3, r2, r6, r3
 8009184:	b289      	uxth	r1, r1
 8009186:	3001      	adds	r0, #1
 8009188:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800918c:	4285      	cmp	r5, r0
 800918e:	f84c 1b04 	str.w	r1, [ip], #4
 8009192:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009196:	dcec      	bgt.n	8009172 <__multadd+0x12>
 8009198:	b30e      	cbz	r6, 80091de <__multadd+0x7e>
 800919a:	68a3      	ldr	r3, [r4, #8]
 800919c:	42ab      	cmp	r3, r5
 800919e:	dc19      	bgt.n	80091d4 <__multadd+0x74>
 80091a0:	6861      	ldr	r1, [r4, #4]
 80091a2:	4638      	mov	r0, r7
 80091a4:	3101      	adds	r1, #1
 80091a6:	f7ff ff79 	bl	800909c <_Balloc>
 80091aa:	4680      	mov	r8, r0
 80091ac:	b928      	cbnz	r0, 80091ba <__multadd+0x5a>
 80091ae:	4602      	mov	r2, r0
 80091b0:	4b0c      	ldr	r3, [pc, #48]	; (80091e4 <__multadd+0x84>)
 80091b2:	480d      	ldr	r0, [pc, #52]	; (80091e8 <__multadd+0x88>)
 80091b4:	21b5      	movs	r1, #181	; 0xb5
 80091b6:	f000 fcab 	bl	8009b10 <__assert_func>
 80091ba:	6922      	ldr	r2, [r4, #16]
 80091bc:	3202      	adds	r2, #2
 80091be:	f104 010c 	add.w	r1, r4, #12
 80091c2:	0092      	lsls	r2, r2, #2
 80091c4:	300c      	adds	r0, #12
 80091c6:	f7ff ff4e 	bl	8009066 <memcpy>
 80091ca:	4621      	mov	r1, r4
 80091cc:	4638      	mov	r0, r7
 80091ce:	f7ff ffa5 	bl	800911c <_Bfree>
 80091d2:	4644      	mov	r4, r8
 80091d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091d8:	3501      	adds	r5, #1
 80091da:	615e      	str	r6, [r3, #20]
 80091dc:	6125      	str	r5, [r4, #16]
 80091de:	4620      	mov	r0, r4
 80091e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e4:	0800aa25 	.word	0x0800aa25
 80091e8:	0800aa98 	.word	0x0800aa98

080091ec <__hi0bits>:
 80091ec:	0c03      	lsrs	r3, r0, #16
 80091ee:	041b      	lsls	r3, r3, #16
 80091f0:	b9d3      	cbnz	r3, 8009228 <__hi0bits+0x3c>
 80091f2:	0400      	lsls	r0, r0, #16
 80091f4:	2310      	movs	r3, #16
 80091f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091fa:	bf04      	itt	eq
 80091fc:	0200      	lsleq	r0, r0, #8
 80091fe:	3308      	addeq	r3, #8
 8009200:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009204:	bf04      	itt	eq
 8009206:	0100      	lsleq	r0, r0, #4
 8009208:	3304      	addeq	r3, #4
 800920a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800920e:	bf04      	itt	eq
 8009210:	0080      	lsleq	r0, r0, #2
 8009212:	3302      	addeq	r3, #2
 8009214:	2800      	cmp	r0, #0
 8009216:	db05      	blt.n	8009224 <__hi0bits+0x38>
 8009218:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800921c:	f103 0301 	add.w	r3, r3, #1
 8009220:	bf08      	it	eq
 8009222:	2320      	moveq	r3, #32
 8009224:	4618      	mov	r0, r3
 8009226:	4770      	bx	lr
 8009228:	2300      	movs	r3, #0
 800922a:	e7e4      	b.n	80091f6 <__hi0bits+0xa>

0800922c <__lo0bits>:
 800922c:	6803      	ldr	r3, [r0, #0]
 800922e:	f013 0207 	ands.w	r2, r3, #7
 8009232:	4601      	mov	r1, r0
 8009234:	d00b      	beq.n	800924e <__lo0bits+0x22>
 8009236:	07da      	lsls	r2, r3, #31
 8009238:	d423      	bmi.n	8009282 <__lo0bits+0x56>
 800923a:	0798      	lsls	r0, r3, #30
 800923c:	bf49      	itett	mi
 800923e:	085b      	lsrmi	r3, r3, #1
 8009240:	089b      	lsrpl	r3, r3, #2
 8009242:	2001      	movmi	r0, #1
 8009244:	600b      	strmi	r3, [r1, #0]
 8009246:	bf5c      	itt	pl
 8009248:	600b      	strpl	r3, [r1, #0]
 800924a:	2002      	movpl	r0, #2
 800924c:	4770      	bx	lr
 800924e:	b298      	uxth	r0, r3
 8009250:	b9a8      	cbnz	r0, 800927e <__lo0bits+0x52>
 8009252:	0c1b      	lsrs	r3, r3, #16
 8009254:	2010      	movs	r0, #16
 8009256:	b2da      	uxtb	r2, r3
 8009258:	b90a      	cbnz	r2, 800925e <__lo0bits+0x32>
 800925a:	3008      	adds	r0, #8
 800925c:	0a1b      	lsrs	r3, r3, #8
 800925e:	071a      	lsls	r2, r3, #28
 8009260:	bf04      	itt	eq
 8009262:	091b      	lsreq	r3, r3, #4
 8009264:	3004      	addeq	r0, #4
 8009266:	079a      	lsls	r2, r3, #30
 8009268:	bf04      	itt	eq
 800926a:	089b      	lsreq	r3, r3, #2
 800926c:	3002      	addeq	r0, #2
 800926e:	07da      	lsls	r2, r3, #31
 8009270:	d403      	bmi.n	800927a <__lo0bits+0x4e>
 8009272:	085b      	lsrs	r3, r3, #1
 8009274:	f100 0001 	add.w	r0, r0, #1
 8009278:	d005      	beq.n	8009286 <__lo0bits+0x5a>
 800927a:	600b      	str	r3, [r1, #0]
 800927c:	4770      	bx	lr
 800927e:	4610      	mov	r0, r2
 8009280:	e7e9      	b.n	8009256 <__lo0bits+0x2a>
 8009282:	2000      	movs	r0, #0
 8009284:	4770      	bx	lr
 8009286:	2020      	movs	r0, #32
 8009288:	4770      	bx	lr
	...

0800928c <__i2b>:
 800928c:	b510      	push	{r4, lr}
 800928e:	460c      	mov	r4, r1
 8009290:	2101      	movs	r1, #1
 8009292:	f7ff ff03 	bl	800909c <_Balloc>
 8009296:	4602      	mov	r2, r0
 8009298:	b928      	cbnz	r0, 80092a6 <__i2b+0x1a>
 800929a:	4b05      	ldr	r3, [pc, #20]	; (80092b0 <__i2b+0x24>)
 800929c:	4805      	ldr	r0, [pc, #20]	; (80092b4 <__i2b+0x28>)
 800929e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092a2:	f000 fc35 	bl	8009b10 <__assert_func>
 80092a6:	2301      	movs	r3, #1
 80092a8:	6144      	str	r4, [r0, #20]
 80092aa:	6103      	str	r3, [r0, #16]
 80092ac:	bd10      	pop	{r4, pc}
 80092ae:	bf00      	nop
 80092b0:	0800aa25 	.word	0x0800aa25
 80092b4:	0800aa98 	.word	0x0800aa98

080092b8 <__multiply>:
 80092b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	4691      	mov	r9, r2
 80092be:	690a      	ldr	r2, [r1, #16]
 80092c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	bfb8      	it	lt
 80092c8:	460b      	movlt	r3, r1
 80092ca:	460c      	mov	r4, r1
 80092cc:	bfbc      	itt	lt
 80092ce:	464c      	movlt	r4, r9
 80092d0:	4699      	movlt	r9, r3
 80092d2:	6927      	ldr	r7, [r4, #16]
 80092d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092d8:	68a3      	ldr	r3, [r4, #8]
 80092da:	6861      	ldr	r1, [r4, #4]
 80092dc:	eb07 060a 	add.w	r6, r7, sl
 80092e0:	42b3      	cmp	r3, r6
 80092e2:	b085      	sub	sp, #20
 80092e4:	bfb8      	it	lt
 80092e6:	3101      	addlt	r1, #1
 80092e8:	f7ff fed8 	bl	800909c <_Balloc>
 80092ec:	b930      	cbnz	r0, 80092fc <__multiply+0x44>
 80092ee:	4602      	mov	r2, r0
 80092f0:	4b44      	ldr	r3, [pc, #272]	; (8009404 <__multiply+0x14c>)
 80092f2:	4845      	ldr	r0, [pc, #276]	; (8009408 <__multiply+0x150>)
 80092f4:	f240 115d 	movw	r1, #349	; 0x15d
 80092f8:	f000 fc0a 	bl	8009b10 <__assert_func>
 80092fc:	f100 0514 	add.w	r5, r0, #20
 8009300:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009304:	462b      	mov	r3, r5
 8009306:	2200      	movs	r2, #0
 8009308:	4543      	cmp	r3, r8
 800930a:	d321      	bcc.n	8009350 <__multiply+0x98>
 800930c:	f104 0314 	add.w	r3, r4, #20
 8009310:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009314:	f109 0314 	add.w	r3, r9, #20
 8009318:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800931c:	9202      	str	r2, [sp, #8]
 800931e:	1b3a      	subs	r2, r7, r4
 8009320:	3a15      	subs	r2, #21
 8009322:	f022 0203 	bic.w	r2, r2, #3
 8009326:	3204      	adds	r2, #4
 8009328:	f104 0115 	add.w	r1, r4, #21
 800932c:	428f      	cmp	r7, r1
 800932e:	bf38      	it	cc
 8009330:	2204      	movcc	r2, #4
 8009332:	9201      	str	r2, [sp, #4]
 8009334:	9a02      	ldr	r2, [sp, #8]
 8009336:	9303      	str	r3, [sp, #12]
 8009338:	429a      	cmp	r2, r3
 800933a:	d80c      	bhi.n	8009356 <__multiply+0x9e>
 800933c:	2e00      	cmp	r6, #0
 800933e:	dd03      	ble.n	8009348 <__multiply+0x90>
 8009340:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009344:	2b00      	cmp	r3, #0
 8009346:	d05a      	beq.n	80093fe <__multiply+0x146>
 8009348:	6106      	str	r6, [r0, #16]
 800934a:	b005      	add	sp, #20
 800934c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009350:	f843 2b04 	str.w	r2, [r3], #4
 8009354:	e7d8      	b.n	8009308 <__multiply+0x50>
 8009356:	f8b3 a000 	ldrh.w	sl, [r3]
 800935a:	f1ba 0f00 	cmp.w	sl, #0
 800935e:	d024      	beq.n	80093aa <__multiply+0xf2>
 8009360:	f104 0e14 	add.w	lr, r4, #20
 8009364:	46a9      	mov	r9, r5
 8009366:	f04f 0c00 	mov.w	ip, #0
 800936a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800936e:	f8d9 1000 	ldr.w	r1, [r9]
 8009372:	fa1f fb82 	uxth.w	fp, r2
 8009376:	b289      	uxth	r1, r1
 8009378:	fb0a 110b 	mla	r1, sl, fp, r1
 800937c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009380:	f8d9 2000 	ldr.w	r2, [r9]
 8009384:	4461      	add	r1, ip
 8009386:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800938a:	fb0a c20b 	mla	r2, sl, fp, ip
 800938e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009392:	b289      	uxth	r1, r1
 8009394:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009398:	4577      	cmp	r7, lr
 800939a:	f849 1b04 	str.w	r1, [r9], #4
 800939e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093a2:	d8e2      	bhi.n	800936a <__multiply+0xb2>
 80093a4:	9a01      	ldr	r2, [sp, #4]
 80093a6:	f845 c002 	str.w	ip, [r5, r2]
 80093aa:	9a03      	ldr	r2, [sp, #12]
 80093ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093b0:	3304      	adds	r3, #4
 80093b2:	f1b9 0f00 	cmp.w	r9, #0
 80093b6:	d020      	beq.n	80093fa <__multiply+0x142>
 80093b8:	6829      	ldr	r1, [r5, #0]
 80093ba:	f104 0c14 	add.w	ip, r4, #20
 80093be:	46ae      	mov	lr, r5
 80093c0:	f04f 0a00 	mov.w	sl, #0
 80093c4:	f8bc b000 	ldrh.w	fp, [ip]
 80093c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093cc:	fb09 220b 	mla	r2, r9, fp, r2
 80093d0:	4492      	add	sl, r2
 80093d2:	b289      	uxth	r1, r1
 80093d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80093d8:	f84e 1b04 	str.w	r1, [lr], #4
 80093dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80093e0:	f8be 1000 	ldrh.w	r1, [lr]
 80093e4:	0c12      	lsrs	r2, r2, #16
 80093e6:	fb09 1102 	mla	r1, r9, r2, r1
 80093ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80093ee:	4567      	cmp	r7, ip
 80093f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093f4:	d8e6      	bhi.n	80093c4 <__multiply+0x10c>
 80093f6:	9a01      	ldr	r2, [sp, #4]
 80093f8:	50a9      	str	r1, [r5, r2]
 80093fa:	3504      	adds	r5, #4
 80093fc:	e79a      	b.n	8009334 <__multiply+0x7c>
 80093fe:	3e01      	subs	r6, #1
 8009400:	e79c      	b.n	800933c <__multiply+0x84>
 8009402:	bf00      	nop
 8009404:	0800aa25 	.word	0x0800aa25
 8009408:	0800aa98 	.word	0x0800aa98

0800940c <__pow5mult>:
 800940c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009410:	4615      	mov	r5, r2
 8009412:	f012 0203 	ands.w	r2, r2, #3
 8009416:	4606      	mov	r6, r0
 8009418:	460f      	mov	r7, r1
 800941a:	d007      	beq.n	800942c <__pow5mult+0x20>
 800941c:	4c25      	ldr	r4, [pc, #148]	; (80094b4 <__pow5mult+0xa8>)
 800941e:	3a01      	subs	r2, #1
 8009420:	2300      	movs	r3, #0
 8009422:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009426:	f7ff fe9b 	bl	8009160 <__multadd>
 800942a:	4607      	mov	r7, r0
 800942c:	10ad      	asrs	r5, r5, #2
 800942e:	d03d      	beq.n	80094ac <__pow5mult+0xa0>
 8009430:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009432:	b97c      	cbnz	r4, 8009454 <__pow5mult+0x48>
 8009434:	2010      	movs	r0, #16
 8009436:	f7fd fd33 	bl	8006ea0 <malloc>
 800943a:	4602      	mov	r2, r0
 800943c:	6270      	str	r0, [r6, #36]	; 0x24
 800943e:	b928      	cbnz	r0, 800944c <__pow5mult+0x40>
 8009440:	4b1d      	ldr	r3, [pc, #116]	; (80094b8 <__pow5mult+0xac>)
 8009442:	481e      	ldr	r0, [pc, #120]	; (80094bc <__pow5mult+0xb0>)
 8009444:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009448:	f000 fb62 	bl	8009b10 <__assert_func>
 800944c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009450:	6004      	str	r4, [r0, #0]
 8009452:	60c4      	str	r4, [r0, #12]
 8009454:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009458:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800945c:	b94c      	cbnz	r4, 8009472 <__pow5mult+0x66>
 800945e:	f240 2171 	movw	r1, #625	; 0x271
 8009462:	4630      	mov	r0, r6
 8009464:	f7ff ff12 	bl	800928c <__i2b>
 8009468:	2300      	movs	r3, #0
 800946a:	f8c8 0008 	str.w	r0, [r8, #8]
 800946e:	4604      	mov	r4, r0
 8009470:	6003      	str	r3, [r0, #0]
 8009472:	f04f 0900 	mov.w	r9, #0
 8009476:	07eb      	lsls	r3, r5, #31
 8009478:	d50a      	bpl.n	8009490 <__pow5mult+0x84>
 800947a:	4639      	mov	r1, r7
 800947c:	4622      	mov	r2, r4
 800947e:	4630      	mov	r0, r6
 8009480:	f7ff ff1a 	bl	80092b8 <__multiply>
 8009484:	4639      	mov	r1, r7
 8009486:	4680      	mov	r8, r0
 8009488:	4630      	mov	r0, r6
 800948a:	f7ff fe47 	bl	800911c <_Bfree>
 800948e:	4647      	mov	r7, r8
 8009490:	106d      	asrs	r5, r5, #1
 8009492:	d00b      	beq.n	80094ac <__pow5mult+0xa0>
 8009494:	6820      	ldr	r0, [r4, #0]
 8009496:	b938      	cbnz	r0, 80094a8 <__pow5mult+0x9c>
 8009498:	4622      	mov	r2, r4
 800949a:	4621      	mov	r1, r4
 800949c:	4630      	mov	r0, r6
 800949e:	f7ff ff0b 	bl	80092b8 <__multiply>
 80094a2:	6020      	str	r0, [r4, #0]
 80094a4:	f8c0 9000 	str.w	r9, [r0]
 80094a8:	4604      	mov	r4, r0
 80094aa:	e7e4      	b.n	8009476 <__pow5mult+0x6a>
 80094ac:	4638      	mov	r0, r7
 80094ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094b2:	bf00      	nop
 80094b4:	0800abe8 	.word	0x0800abe8
 80094b8:	0800a9b3 	.word	0x0800a9b3
 80094bc:	0800aa98 	.word	0x0800aa98

080094c0 <__lshift>:
 80094c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c4:	460c      	mov	r4, r1
 80094c6:	6849      	ldr	r1, [r1, #4]
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094ce:	68a3      	ldr	r3, [r4, #8]
 80094d0:	4607      	mov	r7, r0
 80094d2:	4691      	mov	r9, r2
 80094d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094d8:	f108 0601 	add.w	r6, r8, #1
 80094dc:	42b3      	cmp	r3, r6
 80094de:	db0b      	blt.n	80094f8 <__lshift+0x38>
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7ff fddb 	bl	800909c <_Balloc>
 80094e6:	4605      	mov	r5, r0
 80094e8:	b948      	cbnz	r0, 80094fe <__lshift+0x3e>
 80094ea:	4602      	mov	r2, r0
 80094ec:	4b2a      	ldr	r3, [pc, #168]	; (8009598 <__lshift+0xd8>)
 80094ee:	482b      	ldr	r0, [pc, #172]	; (800959c <__lshift+0xdc>)
 80094f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80094f4:	f000 fb0c 	bl	8009b10 <__assert_func>
 80094f8:	3101      	adds	r1, #1
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	e7ee      	b.n	80094dc <__lshift+0x1c>
 80094fe:	2300      	movs	r3, #0
 8009500:	f100 0114 	add.w	r1, r0, #20
 8009504:	f100 0210 	add.w	r2, r0, #16
 8009508:	4618      	mov	r0, r3
 800950a:	4553      	cmp	r3, sl
 800950c:	db37      	blt.n	800957e <__lshift+0xbe>
 800950e:	6920      	ldr	r0, [r4, #16]
 8009510:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009514:	f104 0314 	add.w	r3, r4, #20
 8009518:	f019 091f 	ands.w	r9, r9, #31
 800951c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009520:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009524:	d02f      	beq.n	8009586 <__lshift+0xc6>
 8009526:	f1c9 0e20 	rsb	lr, r9, #32
 800952a:	468a      	mov	sl, r1
 800952c:	f04f 0c00 	mov.w	ip, #0
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	fa02 f209 	lsl.w	r2, r2, r9
 8009536:	ea42 020c 	orr.w	r2, r2, ip
 800953a:	f84a 2b04 	str.w	r2, [sl], #4
 800953e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009542:	4298      	cmp	r0, r3
 8009544:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009548:	d8f2      	bhi.n	8009530 <__lshift+0x70>
 800954a:	1b03      	subs	r3, r0, r4
 800954c:	3b15      	subs	r3, #21
 800954e:	f023 0303 	bic.w	r3, r3, #3
 8009552:	3304      	adds	r3, #4
 8009554:	f104 0215 	add.w	r2, r4, #21
 8009558:	4290      	cmp	r0, r2
 800955a:	bf38      	it	cc
 800955c:	2304      	movcc	r3, #4
 800955e:	f841 c003 	str.w	ip, [r1, r3]
 8009562:	f1bc 0f00 	cmp.w	ip, #0
 8009566:	d001      	beq.n	800956c <__lshift+0xac>
 8009568:	f108 0602 	add.w	r6, r8, #2
 800956c:	3e01      	subs	r6, #1
 800956e:	4638      	mov	r0, r7
 8009570:	612e      	str	r6, [r5, #16]
 8009572:	4621      	mov	r1, r4
 8009574:	f7ff fdd2 	bl	800911c <_Bfree>
 8009578:	4628      	mov	r0, r5
 800957a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009582:	3301      	adds	r3, #1
 8009584:	e7c1      	b.n	800950a <__lshift+0x4a>
 8009586:	3904      	subs	r1, #4
 8009588:	f853 2b04 	ldr.w	r2, [r3], #4
 800958c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009590:	4298      	cmp	r0, r3
 8009592:	d8f9      	bhi.n	8009588 <__lshift+0xc8>
 8009594:	e7ea      	b.n	800956c <__lshift+0xac>
 8009596:	bf00      	nop
 8009598:	0800aa25 	.word	0x0800aa25
 800959c:	0800aa98 	.word	0x0800aa98

080095a0 <__mcmp>:
 80095a0:	b530      	push	{r4, r5, lr}
 80095a2:	6902      	ldr	r2, [r0, #16]
 80095a4:	690c      	ldr	r4, [r1, #16]
 80095a6:	1b12      	subs	r2, r2, r4
 80095a8:	d10e      	bne.n	80095c8 <__mcmp+0x28>
 80095aa:	f100 0314 	add.w	r3, r0, #20
 80095ae:	3114      	adds	r1, #20
 80095b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095c0:	42a5      	cmp	r5, r4
 80095c2:	d003      	beq.n	80095cc <__mcmp+0x2c>
 80095c4:	d305      	bcc.n	80095d2 <__mcmp+0x32>
 80095c6:	2201      	movs	r2, #1
 80095c8:	4610      	mov	r0, r2
 80095ca:	bd30      	pop	{r4, r5, pc}
 80095cc:	4283      	cmp	r3, r0
 80095ce:	d3f3      	bcc.n	80095b8 <__mcmp+0x18>
 80095d0:	e7fa      	b.n	80095c8 <__mcmp+0x28>
 80095d2:	f04f 32ff 	mov.w	r2, #4294967295
 80095d6:	e7f7      	b.n	80095c8 <__mcmp+0x28>

080095d8 <__mdiff>:
 80095d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	460c      	mov	r4, r1
 80095de:	4606      	mov	r6, r0
 80095e0:	4611      	mov	r1, r2
 80095e2:	4620      	mov	r0, r4
 80095e4:	4690      	mov	r8, r2
 80095e6:	f7ff ffdb 	bl	80095a0 <__mcmp>
 80095ea:	1e05      	subs	r5, r0, #0
 80095ec:	d110      	bne.n	8009610 <__mdiff+0x38>
 80095ee:	4629      	mov	r1, r5
 80095f0:	4630      	mov	r0, r6
 80095f2:	f7ff fd53 	bl	800909c <_Balloc>
 80095f6:	b930      	cbnz	r0, 8009606 <__mdiff+0x2e>
 80095f8:	4b3a      	ldr	r3, [pc, #232]	; (80096e4 <__mdiff+0x10c>)
 80095fa:	4602      	mov	r2, r0
 80095fc:	f240 2132 	movw	r1, #562	; 0x232
 8009600:	4839      	ldr	r0, [pc, #228]	; (80096e8 <__mdiff+0x110>)
 8009602:	f000 fa85 	bl	8009b10 <__assert_func>
 8009606:	2301      	movs	r3, #1
 8009608:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800960c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009610:	bfa4      	itt	ge
 8009612:	4643      	movge	r3, r8
 8009614:	46a0      	movge	r8, r4
 8009616:	4630      	mov	r0, r6
 8009618:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800961c:	bfa6      	itte	ge
 800961e:	461c      	movge	r4, r3
 8009620:	2500      	movge	r5, #0
 8009622:	2501      	movlt	r5, #1
 8009624:	f7ff fd3a 	bl	800909c <_Balloc>
 8009628:	b920      	cbnz	r0, 8009634 <__mdiff+0x5c>
 800962a:	4b2e      	ldr	r3, [pc, #184]	; (80096e4 <__mdiff+0x10c>)
 800962c:	4602      	mov	r2, r0
 800962e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009632:	e7e5      	b.n	8009600 <__mdiff+0x28>
 8009634:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009638:	6926      	ldr	r6, [r4, #16]
 800963a:	60c5      	str	r5, [r0, #12]
 800963c:	f104 0914 	add.w	r9, r4, #20
 8009640:	f108 0514 	add.w	r5, r8, #20
 8009644:	f100 0e14 	add.w	lr, r0, #20
 8009648:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800964c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009650:	f108 0210 	add.w	r2, r8, #16
 8009654:	46f2      	mov	sl, lr
 8009656:	2100      	movs	r1, #0
 8009658:	f859 3b04 	ldr.w	r3, [r9], #4
 800965c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009660:	fa1f f883 	uxth.w	r8, r3
 8009664:	fa11 f18b 	uxtah	r1, r1, fp
 8009668:	0c1b      	lsrs	r3, r3, #16
 800966a:	eba1 0808 	sub.w	r8, r1, r8
 800966e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009672:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009676:	fa1f f888 	uxth.w	r8, r8
 800967a:	1419      	asrs	r1, r3, #16
 800967c:	454e      	cmp	r6, r9
 800967e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009682:	f84a 3b04 	str.w	r3, [sl], #4
 8009686:	d8e7      	bhi.n	8009658 <__mdiff+0x80>
 8009688:	1b33      	subs	r3, r6, r4
 800968a:	3b15      	subs	r3, #21
 800968c:	f023 0303 	bic.w	r3, r3, #3
 8009690:	3304      	adds	r3, #4
 8009692:	3415      	adds	r4, #21
 8009694:	42a6      	cmp	r6, r4
 8009696:	bf38      	it	cc
 8009698:	2304      	movcc	r3, #4
 800969a:	441d      	add	r5, r3
 800969c:	4473      	add	r3, lr
 800969e:	469e      	mov	lr, r3
 80096a0:	462e      	mov	r6, r5
 80096a2:	4566      	cmp	r6, ip
 80096a4:	d30e      	bcc.n	80096c4 <__mdiff+0xec>
 80096a6:	f10c 0203 	add.w	r2, ip, #3
 80096aa:	1b52      	subs	r2, r2, r5
 80096ac:	f022 0203 	bic.w	r2, r2, #3
 80096b0:	3d03      	subs	r5, #3
 80096b2:	45ac      	cmp	ip, r5
 80096b4:	bf38      	it	cc
 80096b6:	2200      	movcc	r2, #0
 80096b8:	441a      	add	r2, r3
 80096ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80096be:	b17b      	cbz	r3, 80096e0 <__mdiff+0x108>
 80096c0:	6107      	str	r7, [r0, #16]
 80096c2:	e7a3      	b.n	800960c <__mdiff+0x34>
 80096c4:	f856 8b04 	ldr.w	r8, [r6], #4
 80096c8:	fa11 f288 	uxtah	r2, r1, r8
 80096cc:	1414      	asrs	r4, r2, #16
 80096ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096d2:	b292      	uxth	r2, r2
 80096d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096d8:	f84e 2b04 	str.w	r2, [lr], #4
 80096dc:	1421      	asrs	r1, r4, #16
 80096de:	e7e0      	b.n	80096a2 <__mdiff+0xca>
 80096e0:	3f01      	subs	r7, #1
 80096e2:	e7ea      	b.n	80096ba <__mdiff+0xe2>
 80096e4:	0800aa25 	.word	0x0800aa25
 80096e8:	0800aa98 	.word	0x0800aa98

080096ec <__d2b>:
 80096ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096f0:	4689      	mov	r9, r1
 80096f2:	2101      	movs	r1, #1
 80096f4:	ec57 6b10 	vmov	r6, r7, d0
 80096f8:	4690      	mov	r8, r2
 80096fa:	f7ff fccf 	bl	800909c <_Balloc>
 80096fe:	4604      	mov	r4, r0
 8009700:	b930      	cbnz	r0, 8009710 <__d2b+0x24>
 8009702:	4602      	mov	r2, r0
 8009704:	4b25      	ldr	r3, [pc, #148]	; (800979c <__d2b+0xb0>)
 8009706:	4826      	ldr	r0, [pc, #152]	; (80097a0 <__d2b+0xb4>)
 8009708:	f240 310a 	movw	r1, #778	; 0x30a
 800970c:	f000 fa00 	bl	8009b10 <__assert_func>
 8009710:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009714:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009718:	bb35      	cbnz	r5, 8009768 <__d2b+0x7c>
 800971a:	2e00      	cmp	r6, #0
 800971c:	9301      	str	r3, [sp, #4]
 800971e:	d028      	beq.n	8009772 <__d2b+0x86>
 8009720:	4668      	mov	r0, sp
 8009722:	9600      	str	r6, [sp, #0]
 8009724:	f7ff fd82 	bl	800922c <__lo0bits>
 8009728:	9900      	ldr	r1, [sp, #0]
 800972a:	b300      	cbz	r0, 800976e <__d2b+0x82>
 800972c:	9a01      	ldr	r2, [sp, #4]
 800972e:	f1c0 0320 	rsb	r3, r0, #32
 8009732:	fa02 f303 	lsl.w	r3, r2, r3
 8009736:	430b      	orrs	r3, r1
 8009738:	40c2      	lsrs	r2, r0
 800973a:	6163      	str	r3, [r4, #20]
 800973c:	9201      	str	r2, [sp, #4]
 800973e:	9b01      	ldr	r3, [sp, #4]
 8009740:	61a3      	str	r3, [r4, #24]
 8009742:	2b00      	cmp	r3, #0
 8009744:	bf14      	ite	ne
 8009746:	2202      	movne	r2, #2
 8009748:	2201      	moveq	r2, #1
 800974a:	6122      	str	r2, [r4, #16]
 800974c:	b1d5      	cbz	r5, 8009784 <__d2b+0x98>
 800974e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009752:	4405      	add	r5, r0
 8009754:	f8c9 5000 	str.w	r5, [r9]
 8009758:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800975c:	f8c8 0000 	str.w	r0, [r8]
 8009760:	4620      	mov	r0, r4
 8009762:	b003      	add	sp, #12
 8009764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800976c:	e7d5      	b.n	800971a <__d2b+0x2e>
 800976e:	6161      	str	r1, [r4, #20]
 8009770:	e7e5      	b.n	800973e <__d2b+0x52>
 8009772:	a801      	add	r0, sp, #4
 8009774:	f7ff fd5a 	bl	800922c <__lo0bits>
 8009778:	9b01      	ldr	r3, [sp, #4]
 800977a:	6163      	str	r3, [r4, #20]
 800977c:	2201      	movs	r2, #1
 800977e:	6122      	str	r2, [r4, #16]
 8009780:	3020      	adds	r0, #32
 8009782:	e7e3      	b.n	800974c <__d2b+0x60>
 8009784:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009788:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800978c:	f8c9 0000 	str.w	r0, [r9]
 8009790:	6918      	ldr	r0, [r3, #16]
 8009792:	f7ff fd2b 	bl	80091ec <__hi0bits>
 8009796:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800979a:	e7df      	b.n	800975c <__d2b+0x70>
 800979c:	0800aa25 	.word	0x0800aa25
 80097a0:	0800aa98 	.word	0x0800aa98

080097a4 <_calloc_r>:
 80097a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097a6:	fba1 2402 	umull	r2, r4, r1, r2
 80097aa:	b94c      	cbnz	r4, 80097c0 <_calloc_r+0x1c>
 80097ac:	4611      	mov	r1, r2
 80097ae:	9201      	str	r2, [sp, #4]
 80097b0:	f7fd fbf2 	bl	8006f98 <_malloc_r>
 80097b4:	9a01      	ldr	r2, [sp, #4]
 80097b6:	4605      	mov	r5, r0
 80097b8:	b930      	cbnz	r0, 80097c8 <_calloc_r+0x24>
 80097ba:	4628      	mov	r0, r5
 80097bc:	b003      	add	sp, #12
 80097be:	bd30      	pop	{r4, r5, pc}
 80097c0:	220c      	movs	r2, #12
 80097c2:	6002      	str	r2, [r0, #0]
 80097c4:	2500      	movs	r5, #0
 80097c6:	e7f8      	b.n	80097ba <_calloc_r+0x16>
 80097c8:	4621      	mov	r1, r4
 80097ca:	f7fd fb71 	bl	8006eb0 <memset>
 80097ce:	e7f4      	b.n	80097ba <_calloc_r+0x16>

080097d0 <__ssputs_r>:
 80097d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d4:	688e      	ldr	r6, [r1, #8]
 80097d6:	429e      	cmp	r6, r3
 80097d8:	4682      	mov	sl, r0
 80097da:	460c      	mov	r4, r1
 80097dc:	4690      	mov	r8, r2
 80097de:	461f      	mov	r7, r3
 80097e0:	d838      	bhi.n	8009854 <__ssputs_r+0x84>
 80097e2:	898a      	ldrh	r2, [r1, #12]
 80097e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097e8:	d032      	beq.n	8009850 <__ssputs_r+0x80>
 80097ea:	6825      	ldr	r5, [r4, #0]
 80097ec:	6909      	ldr	r1, [r1, #16]
 80097ee:	eba5 0901 	sub.w	r9, r5, r1
 80097f2:	6965      	ldr	r5, [r4, #20]
 80097f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097fc:	3301      	adds	r3, #1
 80097fe:	444b      	add	r3, r9
 8009800:	106d      	asrs	r5, r5, #1
 8009802:	429d      	cmp	r5, r3
 8009804:	bf38      	it	cc
 8009806:	461d      	movcc	r5, r3
 8009808:	0553      	lsls	r3, r2, #21
 800980a:	d531      	bpl.n	8009870 <__ssputs_r+0xa0>
 800980c:	4629      	mov	r1, r5
 800980e:	f7fd fbc3 	bl	8006f98 <_malloc_r>
 8009812:	4606      	mov	r6, r0
 8009814:	b950      	cbnz	r0, 800982c <__ssputs_r+0x5c>
 8009816:	230c      	movs	r3, #12
 8009818:	f8ca 3000 	str.w	r3, [sl]
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009822:	81a3      	strh	r3, [r4, #12]
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800982c:	6921      	ldr	r1, [r4, #16]
 800982e:	464a      	mov	r2, r9
 8009830:	f7ff fc19 	bl	8009066 <memcpy>
 8009834:	89a3      	ldrh	r3, [r4, #12]
 8009836:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800983a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983e:	81a3      	strh	r3, [r4, #12]
 8009840:	6126      	str	r6, [r4, #16]
 8009842:	6165      	str	r5, [r4, #20]
 8009844:	444e      	add	r6, r9
 8009846:	eba5 0509 	sub.w	r5, r5, r9
 800984a:	6026      	str	r6, [r4, #0]
 800984c:	60a5      	str	r5, [r4, #8]
 800984e:	463e      	mov	r6, r7
 8009850:	42be      	cmp	r6, r7
 8009852:	d900      	bls.n	8009856 <__ssputs_r+0x86>
 8009854:	463e      	mov	r6, r7
 8009856:	6820      	ldr	r0, [r4, #0]
 8009858:	4632      	mov	r2, r6
 800985a:	4641      	mov	r1, r8
 800985c:	f000 f9bc 	bl	8009bd8 <memmove>
 8009860:	68a3      	ldr	r3, [r4, #8]
 8009862:	1b9b      	subs	r3, r3, r6
 8009864:	60a3      	str	r3, [r4, #8]
 8009866:	6823      	ldr	r3, [r4, #0]
 8009868:	4433      	add	r3, r6
 800986a:	6023      	str	r3, [r4, #0]
 800986c:	2000      	movs	r0, #0
 800986e:	e7db      	b.n	8009828 <__ssputs_r+0x58>
 8009870:	462a      	mov	r2, r5
 8009872:	f000 f9cb 	bl	8009c0c <_realloc_r>
 8009876:	4606      	mov	r6, r0
 8009878:	2800      	cmp	r0, #0
 800987a:	d1e1      	bne.n	8009840 <__ssputs_r+0x70>
 800987c:	6921      	ldr	r1, [r4, #16]
 800987e:	4650      	mov	r0, sl
 8009880:	f7fd fb1e 	bl	8006ec0 <_free_r>
 8009884:	e7c7      	b.n	8009816 <__ssputs_r+0x46>
	...

08009888 <_svfiprintf_r>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	4698      	mov	r8, r3
 800988e:	898b      	ldrh	r3, [r1, #12]
 8009890:	061b      	lsls	r3, r3, #24
 8009892:	b09d      	sub	sp, #116	; 0x74
 8009894:	4607      	mov	r7, r0
 8009896:	460d      	mov	r5, r1
 8009898:	4614      	mov	r4, r2
 800989a:	d50e      	bpl.n	80098ba <_svfiprintf_r+0x32>
 800989c:	690b      	ldr	r3, [r1, #16]
 800989e:	b963      	cbnz	r3, 80098ba <_svfiprintf_r+0x32>
 80098a0:	2140      	movs	r1, #64	; 0x40
 80098a2:	f7fd fb79 	bl	8006f98 <_malloc_r>
 80098a6:	6028      	str	r0, [r5, #0]
 80098a8:	6128      	str	r0, [r5, #16]
 80098aa:	b920      	cbnz	r0, 80098b6 <_svfiprintf_r+0x2e>
 80098ac:	230c      	movs	r3, #12
 80098ae:	603b      	str	r3, [r7, #0]
 80098b0:	f04f 30ff 	mov.w	r0, #4294967295
 80098b4:	e0d1      	b.n	8009a5a <_svfiprintf_r+0x1d2>
 80098b6:	2340      	movs	r3, #64	; 0x40
 80098b8:	616b      	str	r3, [r5, #20]
 80098ba:	2300      	movs	r3, #0
 80098bc:	9309      	str	r3, [sp, #36]	; 0x24
 80098be:	2320      	movs	r3, #32
 80098c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80098c8:	2330      	movs	r3, #48	; 0x30
 80098ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a74 <_svfiprintf_r+0x1ec>
 80098ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098d2:	f04f 0901 	mov.w	r9, #1
 80098d6:	4623      	mov	r3, r4
 80098d8:	469a      	mov	sl, r3
 80098da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098de:	b10a      	cbz	r2, 80098e4 <_svfiprintf_r+0x5c>
 80098e0:	2a25      	cmp	r2, #37	; 0x25
 80098e2:	d1f9      	bne.n	80098d8 <_svfiprintf_r+0x50>
 80098e4:	ebba 0b04 	subs.w	fp, sl, r4
 80098e8:	d00b      	beq.n	8009902 <_svfiprintf_r+0x7a>
 80098ea:	465b      	mov	r3, fp
 80098ec:	4622      	mov	r2, r4
 80098ee:	4629      	mov	r1, r5
 80098f0:	4638      	mov	r0, r7
 80098f2:	f7ff ff6d 	bl	80097d0 <__ssputs_r>
 80098f6:	3001      	adds	r0, #1
 80098f8:	f000 80aa 	beq.w	8009a50 <_svfiprintf_r+0x1c8>
 80098fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098fe:	445a      	add	r2, fp
 8009900:	9209      	str	r2, [sp, #36]	; 0x24
 8009902:	f89a 3000 	ldrb.w	r3, [sl]
 8009906:	2b00      	cmp	r3, #0
 8009908:	f000 80a2 	beq.w	8009a50 <_svfiprintf_r+0x1c8>
 800990c:	2300      	movs	r3, #0
 800990e:	f04f 32ff 	mov.w	r2, #4294967295
 8009912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009916:	f10a 0a01 	add.w	sl, sl, #1
 800991a:	9304      	str	r3, [sp, #16]
 800991c:	9307      	str	r3, [sp, #28]
 800991e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009922:	931a      	str	r3, [sp, #104]	; 0x68
 8009924:	4654      	mov	r4, sl
 8009926:	2205      	movs	r2, #5
 8009928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800992c:	4851      	ldr	r0, [pc, #324]	; (8009a74 <_svfiprintf_r+0x1ec>)
 800992e:	f7f6 fc57 	bl	80001e0 <memchr>
 8009932:	9a04      	ldr	r2, [sp, #16]
 8009934:	b9d8      	cbnz	r0, 800996e <_svfiprintf_r+0xe6>
 8009936:	06d0      	lsls	r0, r2, #27
 8009938:	bf44      	itt	mi
 800993a:	2320      	movmi	r3, #32
 800993c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009940:	0711      	lsls	r1, r2, #28
 8009942:	bf44      	itt	mi
 8009944:	232b      	movmi	r3, #43	; 0x2b
 8009946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800994a:	f89a 3000 	ldrb.w	r3, [sl]
 800994e:	2b2a      	cmp	r3, #42	; 0x2a
 8009950:	d015      	beq.n	800997e <_svfiprintf_r+0xf6>
 8009952:	9a07      	ldr	r2, [sp, #28]
 8009954:	4654      	mov	r4, sl
 8009956:	2000      	movs	r0, #0
 8009958:	f04f 0c0a 	mov.w	ip, #10
 800995c:	4621      	mov	r1, r4
 800995e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009962:	3b30      	subs	r3, #48	; 0x30
 8009964:	2b09      	cmp	r3, #9
 8009966:	d94e      	bls.n	8009a06 <_svfiprintf_r+0x17e>
 8009968:	b1b0      	cbz	r0, 8009998 <_svfiprintf_r+0x110>
 800996a:	9207      	str	r2, [sp, #28]
 800996c:	e014      	b.n	8009998 <_svfiprintf_r+0x110>
 800996e:	eba0 0308 	sub.w	r3, r0, r8
 8009972:	fa09 f303 	lsl.w	r3, r9, r3
 8009976:	4313      	orrs	r3, r2
 8009978:	9304      	str	r3, [sp, #16]
 800997a:	46a2      	mov	sl, r4
 800997c:	e7d2      	b.n	8009924 <_svfiprintf_r+0x9c>
 800997e:	9b03      	ldr	r3, [sp, #12]
 8009980:	1d19      	adds	r1, r3, #4
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	9103      	str	r1, [sp, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	bfbb      	ittet	lt
 800998a:	425b      	neglt	r3, r3
 800998c:	f042 0202 	orrlt.w	r2, r2, #2
 8009990:	9307      	strge	r3, [sp, #28]
 8009992:	9307      	strlt	r3, [sp, #28]
 8009994:	bfb8      	it	lt
 8009996:	9204      	strlt	r2, [sp, #16]
 8009998:	7823      	ldrb	r3, [r4, #0]
 800999a:	2b2e      	cmp	r3, #46	; 0x2e
 800999c:	d10c      	bne.n	80099b8 <_svfiprintf_r+0x130>
 800999e:	7863      	ldrb	r3, [r4, #1]
 80099a0:	2b2a      	cmp	r3, #42	; 0x2a
 80099a2:	d135      	bne.n	8009a10 <_svfiprintf_r+0x188>
 80099a4:	9b03      	ldr	r3, [sp, #12]
 80099a6:	1d1a      	adds	r2, r3, #4
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	9203      	str	r2, [sp, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	bfb8      	it	lt
 80099b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80099b4:	3402      	adds	r4, #2
 80099b6:	9305      	str	r3, [sp, #20]
 80099b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a84 <_svfiprintf_r+0x1fc>
 80099bc:	7821      	ldrb	r1, [r4, #0]
 80099be:	2203      	movs	r2, #3
 80099c0:	4650      	mov	r0, sl
 80099c2:	f7f6 fc0d 	bl	80001e0 <memchr>
 80099c6:	b140      	cbz	r0, 80099da <_svfiprintf_r+0x152>
 80099c8:	2340      	movs	r3, #64	; 0x40
 80099ca:	eba0 000a 	sub.w	r0, r0, sl
 80099ce:	fa03 f000 	lsl.w	r0, r3, r0
 80099d2:	9b04      	ldr	r3, [sp, #16]
 80099d4:	4303      	orrs	r3, r0
 80099d6:	3401      	adds	r4, #1
 80099d8:	9304      	str	r3, [sp, #16]
 80099da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099de:	4826      	ldr	r0, [pc, #152]	; (8009a78 <_svfiprintf_r+0x1f0>)
 80099e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099e4:	2206      	movs	r2, #6
 80099e6:	f7f6 fbfb 	bl	80001e0 <memchr>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d038      	beq.n	8009a60 <_svfiprintf_r+0x1d8>
 80099ee:	4b23      	ldr	r3, [pc, #140]	; (8009a7c <_svfiprintf_r+0x1f4>)
 80099f0:	bb1b      	cbnz	r3, 8009a3a <_svfiprintf_r+0x1b2>
 80099f2:	9b03      	ldr	r3, [sp, #12]
 80099f4:	3307      	adds	r3, #7
 80099f6:	f023 0307 	bic.w	r3, r3, #7
 80099fa:	3308      	adds	r3, #8
 80099fc:	9303      	str	r3, [sp, #12]
 80099fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a00:	4433      	add	r3, r6
 8009a02:	9309      	str	r3, [sp, #36]	; 0x24
 8009a04:	e767      	b.n	80098d6 <_svfiprintf_r+0x4e>
 8009a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	2001      	movs	r0, #1
 8009a0e:	e7a5      	b.n	800995c <_svfiprintf_r+0xd4>
 8009a10:	2300      	movs	r3, #0
 8009a12:	3401      	adds	r4, #1
 8009a14:	9305      	str	r3, [sp, #20]
 8009a16:	4619      	mov	r1, r3
 8009a18:	f04f 0c0a 	mov.w	ip, #10
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a22:	3a30      	subs	r2, #48	; 0x30
 8009a24:	2a09      	cmp	r2, #9
 8009a26:	d903      	bls.n	8009a30 <_svfiprintf_r+0x1a8>
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d0c5      	beq.n	80099b8 <_svfiprintf_r+0x130>
 8009a2c:	9105      	str	r1, [sp, #20]
 8009a2e:	e7c3      	b.n	80099b8 <_svfiprintf_r+0x130>
 8009a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a34:	4604      	mov	r4, r0
 8009a36:	2301      	movs	r3, #1
 8009a38:	e7f0      	b.n	8009a1c <_svfiprintf_r+0x194>
 8009a3a:	ab03      	add	r3, sp, #12
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	462a      	mov	r2, r5
 8009a40:	4b0f      	ldr	r3, [pc, #60]	; (8009a80 <_svfiprintf_r+0x1f8>)
 8009a42:	a904      	add	r1, sp, #16
 8009a44:	4638      	mov	r0, r7
 8009a46:	f7fd fbbb 	bl	80071c0 <_printf_float>
 8009a4a:	1c42      	adds	r2, r0, #1
 8009a4c:	4606      	mov	r6, r0
 8009a4e:	d1d6      	bne.n	80099fe <_svfiprintf_r+0x176>
 8009a50:	89ab      	ldrh	r3, [r5, #12]
 8009a52:	065b      	lsls	r3, r3, #25
 8009a54:	f53f af2c 	bmi.w	80098b0 <_svfiprintf_r+0x28>
 8009a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a5a:	b01d      	add	sp, #116	; 0x74
 8009a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a60:	ab03      	add	r3, sp, #12
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	462a      	mov	r2, r5
 8009a66:	4b06      	ldr	r3, [pc, #24]	; (8009a80 <_svfiprintf_r+0x1f8>)
 8009a68:	a904      	add	r1, sp, #16
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	f7fd fe4c 	bl	8007708 <_printf_i>
 8009a70:	e7eb      	b.n	8009a4a <_svfiprintf_r+0x1c2>
 8009a72:	bf00      	nop
 8009a74:	0800abf4 	.word	0x0800abf4
 8009a78:	0800abfe 	.word	0x0800abfe
 8009a7c:	080071c1 	.word	0x080071c1
 8009a80:	080097d1 	.word	0x080097d1
 8009a84:	0800abfa 	.word	0x0800abfa

08009a88 <__sread>:
 8009a88:	b510      	push	{r4, lr}
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a90:	f000 fa44 	bl	8009f1c <_read_r>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	bfab      	itete	ge
 8009a98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8009a9c:	181b      	addge	r3, r3, r0
 8009a9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009aa2:	bfac      	ite	ge
 8009aa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009aa6:	81a3      	strhlt	r3, [r4, #12]
 8009aa8:	bd10      	pop	{r4, pc}

08009aaa <__swrite>:
 8009aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aae:	461f      	mov	r7, r3
 8009ab0:	898b      	ldrh	r3, [r1, #12]
 8009ab2:	05db      	lsls	r3, r3, #23
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	4616      	mov	r6, r2
 8009aba:	d505      	bpl.n	8009ac8 <__swrite+0x1e>
 8009abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f000 f864 	bl	8009b90 <_lseek_r>
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ad2:	81a3      	strh	r3, [r4, #12]
 8009ad4:	4632      	mov	r2, r6
 8009ad6:	463b      	mov	r3, r7
 8009ad8:	4628      	mov	r0, r5
 8009ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ade:	f7fe ba37 	b.w	8007f50 <_write_r>

08009ae2 <__sseek>:
 8009ae2:	b510      	push	{r4, lr}
 8009ae4:	460c      	mov	r4, r1
 8009ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aea:	f000 f851 	bl	8009b90 <_lseek_r>
 8009aee:	1c43      	adds	r3, r0, #1
 8009af0:	89a3      	ldrh	r3, [r4, #12]
 8009af2:	bf15      	itete	ne
 8009af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009afe:	81a3      	strheq	r3, [r4, #12]
 8009b00:	bf18      	it	ne
 8009b02:	81a3      	strhne	r3, [r4, #12]
 8009b04:	bd10      	pop	{r4, pc}

08009b06 <__sclose>:
 8009b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b0a:	f000 b81f 	b.w	8009b4c <_close_r>
	...

08009b10 <__assert_func>:
 8009b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b12:	4614      	mov	r4, r2
 8009b14:	461a      	mov	r2, r3
 8009b16:	4b09      	ldr	r3, [pc, #36]	; (8009b3c <__assert_func+0x2c>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4605      	mov	r5, r0
 8009b1c:	68d8      	ldr	r0, [r3, #12]
 8009b1e:	b14c      	cbz	r4, 8009b34 <__assert_func+0x24>
 8009b20:	4b07      	ldr	r3, [pc, #28]	; (8009b40 <__assert_func+0x30>)
 8009b22:	9100      	str	r1, [sp, #0]
 8009b24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b28:	4906      	ldr	r1, [pc, #24]	; (8009b44 <__assert_func+0x34>)
 8009b2a:	462b      	mov	r3, r5
 8009b2c:	f000 f81e 	bl	8009b6c <fiprintf>
 8009b30:	f7fd f984 	bl	8006e3c <abort>
 8009b34:	4b04      	ldr	r3, [pc, #16]	; (8009b48 <__assert_func+0x38>)
 8009b36:	461c      	mov	r4, r3
 8009b38:	e7f3      	b.n	8009b22 <__assert_func+0x12>
 8009b3a:	bf00      	nop
 8009b3c:	2000003c 	.word	0x2000003c
 8009b40:	0800ac05 	.word	0x0800ac05
 8009b44:	0800ac12 	.word	0x0800ac12
 8009b48:	0800ac40 	.word	0x0800ac40

08009b4c <_close_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4d06      	ldr	r5, [pc, #24]	; (8009b68 <_close_r+0x1c>)
 8009b50:	2300      	movs	r3, #0
 8009b52:	4604      	mov	r4, r0
 8009b54:	4608      	mov	r0, r1
 8009b56:	602b      	str	r3, [r5, #0]
 8009b58:	f7f7 ff5f 	bl	8001a1a <_close>
 8009b5c:	1c43      	adds	r3, r0, #1
 8009b5e:	d102      	bne.n	8009b66 <_close_r+0x1a>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	b103      	cbz	r3, 8009b66 <_close_r+0x1a>
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	20000644 	.word	0x20000644

08009b6c <fiprintf>:
 8009b6c:	b40e      	push	{r1, r2, r3}
 8009b6e:	b503      	push	{r0, r1, lr}
 8009b70:	4601      	mov	r1, r0
 8009b72:	ab03      	add	r3, sp, #12
 8009b74:	4805      	ldr	r0, [pc, #20]	; (8009b8c <fiprintf+0x20>)
 8009b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b7a:	6800      	ldr	r0, [r0, #0]
 8009b7c:	9301      	str	r3, [sp, #4]
 8009b7e:	f000 f89d 	bl	8009cbc <_vfiprintf_r>
 8009b82:	b002      	add	sp, #8
 8009b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b88:	b003      	add	sp, #12
 8009b8a:	4770      	bx	lr
 8009b8c:	2000003c 	.word	0x2000003c

08009b90 <_lseek_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4d07      	ldr	r5, [pc, #28]	; (8009bb0 <_lseek_r+0x20>)
 8009b94:	4604      	mov	r4, r0
 8009b96:	4608      	mov	r0, r1
 8009b98:	4611      	mov	r1, r2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	602a      	str	r2, [r5, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f7f7 ff62 	bl	8001a68 <_lseek>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d102      	bne.n	8009bae <_lseek_r+0x1e>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	b103      	cbz	r3, 8009bae <_lseek_r+0x1e>
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	20000644 	.word	0x20000644

08009bb4 <__ascii_mbtowc>:
 8009bb4:	b082      	sub	sp, #8
 8009bb6:	b901      	cbnz	r1, 8009bba <__ascii_mbtowc+0x6>
 8009bb8:	a901      	add	r1, sp, #4
 8009bba:	b142      	cbz	r2, 8009bce <__ascii_mbtowc+0x1a>
 8009bbc:	b14b      	cbz	r3, 8009bd2 <__ascii_mbtowc+0x1e>
 8009bbe:	7813      	ldrb	r3, [r2, #0]
 8009bc0:	600b      	str	r3, [r1, #0]
 8009bc2:	7812      	ldrb	r2, [r2, #0]
 8009bc4:	1e10      	subs	r0, r2, #0
 8009bc6:	bf18      	it	ne
 8009bc8:	2001      	movne	r0, #1
 8009bca:	b002      	add	sp, #8
 8009bcc:	4770      	bx	lr
 8009bce:	4610      	mov	r0, r2
 8009bd0:	e7fb      	b.n	8009bca <__ascii_mbtowc+0x16>
 8009bd2:	f06f 0001 	mvn.w	r0, #1
 8009bd6:	e7f8      	b.n	8009bca <__ascii_mbtowc+0x16>

08009bd8 <memmove>:
 8009bd8:	4288      	cmp	r0, r1
 8009bda:	b510      	push	{r4, lr}
 8009bdc:	eb01 0402 	add.w	r4, r1, r2
 8009be0:	d902      	bls.n	8009be8 <memmove+0x10>
 8009be2:	4284      	cmp	r4, r0
 8009be4:	4623      	mov	r3, r4
 8009be6:	d807      	bhi.n	8009bf8 <memmove+0x20>
 8009be8:	1e43      	subs	r3, r0, #1
 8009bea:	42a1      	cmp	r1, r4
 8009bec:	d008      	beq.n	8009c00 <memmove+0x28>
 8009bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bf6:	e7f8      	b.n	8009bea <memmove+0x12>
 8009bf8:	4402      	add	r2, r0
 8009bfa:	4601      	mov	r1, r0
 8009bfc:	428a      	cmp	r2, r1
 8009bfe:	d100      	bne.n	8009c02 <memmove+0x2a>
 8009c00:	bd10      	pop	{r4, pc}
 8009c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c0a:	e7f7      	b.n	8009bfc <memmove+0x24>

08009c0c <_realloc_r>:
 8009c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c10:	4680      	mov	r8, r0
 8009c12:	4614      	mov	r4, r2
 8009c14:	460e      	mov	r6, r1
 8009c16:	b921      	cbnz	r1, 8009c22 <_realloc_r+0x16>
 8009c18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	f7fd b9bb 	b.w	8006f98 <_malloc_r>
 8009c22:	b92a      	cbnz	r2, 8009c30 <_realloc_r+0x24>
 8009c24:	f7fd f94c 	bl	8006ec0 <_free_r>
 8009c28:	4625      	mov	r5, r4
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c30:	f000 faba 	bl	800a1a8 <_malloc_usable_size_r>
 8009c34:	4284      	cmp	r4, r0
 8009c36:	4607      	mov	r7, r0
 8009c38:	d802      	bhi.n	8009c40 <_realloc_r+0x34>
 8009c3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c3e:	d812      	bhi.n	8009c66 <_realloc_r+0x5a>
 8009c40:	4621      	mov	r1, r4
 8009c42:	4640      	mov	r0, r8
 8009c44:	f7fd f9a8 	bl	8006f98 <_malloc_r>
 8009c48:	4605      	mov	r5, r0
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d0ed      	beq.n	8009c2a <_realloc_r+0x1e>
 8009c4e:	42bc      	cmp	r4, r7
 8009c50:	4622      	mov	r2, r4
 8009c52:	4631      	mov	r1, r6
 8009c54:	bf28      	it	cs
 8009c56:	463a      	movcs	r2, r7
 8009c58:	f7ff fa05 	bl	8009066 <memcpy>
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4640      	mov	r0, r8
 8009c60:	f7fd f92e 	bl	8006ec0 <_free_r>
 8009c64:	e7e1      	b.n	8009c2a <_realloc_r+0x1e>
 8009c66:	4635      	mov	r5, r6
 8009c68:	e7df      	b.n	8009c2a <_realloc_r+0x1e>

08009c6a <__sfputc_r>:
 8009c6a:	6893      	ldr	r3, [r2, #8]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	b410      	push	{r4}
 8009c72:	6093      	str	r3, [r2, #8]
 8009c74:	da08      	bge.n	8009c88 <__sfputc_r+0x1e>
 8009c76:	6994      	ldr	r4, [r2, #24]
 8009c78:	42a3      	cmp	r3, r4
 8009c7a:	db01      	blt.n	8009c80 <__sfputc_r+0x16>
 8009c7c:	290a      	cmp	r1, #10
 8009c7e:	d103      	bne.n	8009c88 <__sfputc_r+0x1e>
 8009c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c84:	f000 b95c 	b.w	8009f40 <__swbuf_r>
 8009c88:	6813      	ldr	r3, [r2, #0]
 8009c8a:	1c58      	adds	r0, r3, #1
 8009c8c:	6010      	str	r0, [r2, #0]
 8009c8e:	7019      	strb	r1, [r3, #0]
 8009c90:	4608      	mov	r0, r1
 8009c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <__sfputs_r>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	460f      	mov	r7, r1
 8009c9e:	4614      	mov	r4, r2
 8009ca0:	18d5      	adds	r5, r2, r3
 8009ca2:	42ac      	cmp	r4, r5
 8009ca4:	d101      	bne.n	8009caa <__sfputs_r+0x12>
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	e007      	b.n	8009cba <__sfputs_r+0x22>
 8009caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cae:	463a      	mov	r2, r7
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	f7ff ffda 	bl	8009c6a <__sfputc_r>
 8009cb6:	1c43      	adds	r3, r0, #1
 8009cb8:	d1f3      	bne.n	8009ca2 <__sfputs_r+0xa>
 8009cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009cbc <_vfiprintf_r>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	460d      	mov	r5, r1
 8009cc2:	b09d      	sub	sp, #116	; 0x74
 8009cc4:	4614      	mov	r4, r2
 8009cc6:	4698      	mov	r8, r3
 8009cc8:	4606      	mov	r6, r0
 8009cca:	b118      	cbz	r0, 8009cd4 <_vfiprintf_r+0x18>
 8009ccc:	6983      	ldr	r3, [r0, #24]
 8009cce:	b90b      	cbnz	r3, 8009cd4 <_vfiprintf_r+0x18>
 8009cd0:	f7ff f924 	bl	8008f1c <__sinit>
 8009cd4:	4b89      	ldr	r3, [pc, #548]	; (8009efc <_vfiprintf_r+0x240>)
 8009cd6:	429d      	cmp	r5, r3
 8009cd8:	d11b      	bne.n	8009d12 <_vfiprintf_r+0x56>
 8009cda:	6875      	ldr	r5, [r6, #4]
 8009cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cde:	07d9      	lsls	r1, r3, #31
 8009ce0:	d405      	bmi.n	8009cee <_vfiprintf_r+0x32>
 8009ce2:	89ab      	ldrh	r3, [r5, #12]
 8009ce4:	059a      	lsls	r2, r3, #22
 8009ce6:	d402      	bmi.n	8009cee <_vfiprintf_r+0x32>
 8009ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cea:	f7ff f9ba 	bl	8009062 <__retarget_lock_acquire_recursive>
 8009cee:	89ab      	ldrh	r3, [r5, #12]
 8009cf0:	071b      	lsls	r3, r3, #28
 8009cf2:	d501      	bpl.n	8009cf8 <_vfiprintf_r+0x3c>
 8009cf4:	692b      	ldr	r3, [r5, #16]
 8009cf6:	b9eb      	cbnz	r3, 8009d34 <_vfiprintf_r+0x78>
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f000 f980 	bl	800a000 <__swsetup_r>
 8009d00:	b1c0      	cbz	r0, 8009d34 <_vfiprintf_r+0x78>
 8009d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d04:	07dc      	lsls	r4, r3, #31
 8009d06:	d50e      	bpl.n	8009d26 <_vfiprintf_r+0x6a>
 8009d08:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0c:	b01d      	add	sp, #116	; 0x74
 8009d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d12:	4b7b      	ldr	r3, [pc, #492]	; (8009f00 <_vfiprintf_r+0x244>)
 8009d14:	429d      	cmp	r5, r3
 8009d16:	d101      	bne.n	8009d1c <_vfiprintf_r+0x60>
 8009d18:	68b5      	ldr	r5, [r6, #8]
 8009d1a:	e7df      	b.n	8009cdc <_vfiprintf_r+0x20>
 8009d1c:	4b79      	ldr	r3, [pc, #484]	; (8009f04 <_vfiprintf_r+0x248>)
 8009d1e:	429d      	cmp	r5, r3
 8009d20:	bf08      	it	eq
 8009d22:	68f5      	ldreq	r5, [r6, #12]
 8009d24:	e7da      	b.n	8009cdc <_vfiprintf_r+0x20>
 8009d26:	89ab      	ldrh	r3, [r5, #12]
 8009d28:	0598      	lsls	r0, r3, #22
 8009d2a:	d4ed      	bmi.n	8009d08 <_vfiprintf_r+0x4c>
 8009d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d2e:	f7ff f999 	bl	8009064 <__retarget_lock_release_recursive>
 8009d32:	e7e9      	b.n	8009d08 <_vfiprintf_r+0x4c>
 8009d34:	2300      	movs	r3, #0
 8009d36:	9309      	str	r3, [sp, #36]	; 0x24
 8009d38:	2320      	movs	r3, #32
 8009d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d42:	2330      	movs	r3, #48	; 0x30
 8009d44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f08 <_vfiprintf_r+0x24c>
 8009d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d4c:	f04f 0901 	mov.w	r9, #1
 8009d50:	4623      	mov	r3, r4
 8009d52:	469a      	mov	sl, r3
 8009d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d58:	b10a      	cbz	r2, 8009d5e <_vfiprintf_r+0xa2>
 8009d5a:	2a25      	cmp	r2, #37	; 0x25
 8009d5c:	d1f9      	bne.n	8009d52 <_vfiprintf_r+0x96>
 8009d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009d62:	d00b      	beq.n	8009d7c <_vfiprintf_r+0xc0>
 8009d64:	465b      	mov	r3, fp
 8009d66:	4622      	mov	r2, r4
 8009d68:	4629      	mov	r1, r5
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f7ff ff94 	bl	8009c98 <__sfputs_r>
 8009d70:	3001      	adds	r0, #1
 8009d72:	f000 80aa 	beq.w	8009eca <_vfiprintf_r+0x20e>
 8009d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d78:	445a      	add	r2, fp
 8009d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 80a2 	beq.w	8009eca <_vfiprintf_r+0x20e>
 8009d86:	2300      	movs	r3, #0
 8009d88:	f04f 32ff 	mov.w	r2, #4294967295
 8009d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d90:	f10a 0a01 	add.w	sl, sl, #1
 8009d94:	9304      	str	r3, [sp, #16]
 8009d96:	9307      	str	r3, [sp, #28]
 8009d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009d9e:	4654      	mov	r4, sl
 8009da0:	2205      	movs	r2, #5
 8009da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da6:	4858      	ldr	r0, [pc, #352]	; (8009f08 <_vfiprintf_r+0x24c>)
 8009da8:	f7f6 fa1a 	bl	80001e0 <memchr>
 8009dac:	9a04      	ldr	r2, [sp, #16]
 8009dae:	b9d8      	cbnz	r0, 8009de8 <_vfiprintf_r+0x12c>
 8009db0:	06d1      	lsls	r1, r2, #27
 8009db2:	bf44      	itt	mi
 8009db4:	2320      	movmi	r3, #32
 8009db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dba:	0713      	lsls	r3, r2, #28
 8009dbc:	bf44      	itt	mi
 8009dbe:	232b      	movmi	r3, #43	; 0x2b
 8009dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8009dca:	d015      	beq.n	8009df8 <_vfiprintf_r+0x13c>
 8009dcc:	9a07      	ldr	r2, [sp, #28]
 8009dce:	4654      	mov	r4, sl
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	f04f 0c0a 	mov.w	ip, #10
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ddc:	3b30      	subs	r3, #48	; 0x30
 8009dde:	2b09      	cmp	r3, #9
 8009de0:	d94e      	bls.n	8009e80 <_vfiprintf_r+0x1c4>
 8009de2:	b1b0      	cbz	r0, 8009e12 <_vfiprintf_r+0x156>
 8009de4:	9207      	str	r2, [sp, #28]
 8009de6:	e014      	b.n	8009e12 <_vfiprintf_r+0x156>
 8009de8:	eba0 0308 	sub.w	r3, r0, r8
 8009dec:	fa09 f303 	lsl.w	r3, r9, r3
 8009df0:	4313      	orrs	r3, r2
 8009df2:	9304      	str	r3, [sp, #16]
 8009df4:	46a2      	mov	sl, r4
 8009df6:	e7d2      	b.n	8009d9e <_vfiprintf_r+0xe2>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	1d19      	adds	r1, r3, #4
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	9103      	str	r1, [sp, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	bfbb      	ittet	lt
 8009e04:	425b      	neglt	r3, r3
 8009e06:	f042 0202 	orrlt.w	r2, r2, #2
 8009e0a:	9307      	strge	r3, [sp, #28]
 8009e0c:	9307      	strlt	r3, [sp, #28]
 8009e0e:	bfb8      	it	lt
 8009e10:	9204      	strlt	r2, [sp, #16]
 8009e12:	7823      	ldrb	r3, [r4, #0]
 8009e14:	2b2e      	cmp	r3, #46	; 0x2e
 8009e16:	d10c      	bne.n	8009e32 <_vfiprintf_r+0x176>
 8009e18:	7863      	ldrb	r3, [r4, #1]
 8009e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e1c:	d135      	bne.n	8009e8a <_vfiprintf_r+0x1ce>
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	1d1a      	adds	r2, r3, #4
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	9203      	str	r2, [sp, #12]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	bfb8      	it	lt
 8009e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e2e:	3402      	adds	r4, #2
 8009e30:	9305      	str	r3, [sp, #20]
 8009e32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f18 <_vfiprintf_r+0x25c>
 8009e36:	7821      	ldrb	r1, [r4, #0]
 8009e38:	2203      	movs	r2, #3
 8009e3a:	4650      	mov	r0, sl
 8009e3c:	f7f6 f9d0 	bl	80001e0 <memchr>
 8009e40:	b140      	cbz	r0, 8009e54 <_vfiprintf_r+0x198>
 8009e42:	2340      	movs	r3, #64	; 0x40
 8009e44:	eba0 000a 	sub.w	r0, r0, sl
 8009e48:	fa03 f000 	lsl.w	r0, r3, r0
 8009e4c:	9b04      	ldr	r3, [sp, #16]
 8009e4e:	4303      	orrs	r3, r0
 8009e50:	3401      	adds	r4, #1
 8009e52:	9304      	str	r3, [sp, #16]
 8009e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e58:	482c      	ldr	r0, [pc, #176]	; (8009f0c <_vfiprintf_r+0x250>)
 8009e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e5e:	2206      	movs	r2, #6
 8009e60:	f7f6 f9be 	bl	80001e0 <memchr>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d03f      	beq.n	8009ee8 <_vfiprintf_r+0x22c>
 8009e68:	4b29      	ldr	r3, [pc, #164]	; (8009f10 <_vfiprintf_r+0x254>)
 8009e6a:	bb1b      	cbnz	r3, 8009eb4 <_vfiprintf_r+0x1f8>
 8009e6c:	9b03      	ldr	r3, [sp, #12]
 8009e6e:	3307      	adds	r3, #7
 8009e70:	f023 0307 	bic.w	r3, r3, #7
 8009e74:	3308      	adds	r3, #8
 8009e76:	9303      	str	r3, [sp, #12]
 8009e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e7a:	443b      	add	r3, r7
 8009e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e7e:	e767      	b.n	8009d50 <_vfiprintf_r+0x94>
 8009e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e84:	460c      	mov	r4, r1
 8009e86:	2001      	movs	r0, #1
 8009e88:	e7a5      	b.n	8009dd6 <_vfiprintf_r+0x11a>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	3401      	adds	r4, #1
 8009e8e:	9305      	str	r3, [sp, #20]
 8009e90:	4619      	mov	r1, r3
 8009e92:	f04f 0c0a 	mov.w	ip, #10
 8009e96:	4620      	mov	r0, r4
 8009e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e9c:	3a30      	subs	r2, #48	; 0x30
 8009e9e:	2a09      	cmp	r2, #9
 8009ea0:	d903      	bls.n	8009eaa <_vfiprintf_r+0x1ee>
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0c5      	beq.n	8009e32 <_vfiprintf_r+0x176>
 8009ea6:	9105      	str	r1, [sp, #20]
 8009ea8:	e7c3      	b.n	8009e32 <_vfiprintf_r+0x176>
 8009eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009eae:	4604      	mov	r4, r0
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e7f0      	b.n	8009e96 <_vfiprintf_r+0x1da>
 8009eb4:	ab03      	add	r3, sp, #12
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	462a      	mov	r2, r5
 8009eba:	4b16      	ldr	r3, [pc, #88]	; (8009f14 <_vfiprintf_r+0x258>)
 8009ebc:	a904      	add	r1, sp, #16
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	f7fd f97e 	bl	80071c0 <_printf_float>
 8009ec4:	4607      	mov	r7, r0
 8009ec6:	1c78      	adds	r0, r7, #1
 8009ec8:	d1d6      	bne.n	8009e78 <_vfiprintf_r+0x1bc>
 8009eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ecc:	07d9      	lsls	r1, r3, #31
 8009ece:	d405      	bmi.n	8009edc <_vfiprintf_r+0x220>
 8009ed0:	89ab      	ldrh	r3, [r5, #12]
 8009ed2:	059a      	lsls	r2, r3, #22
 8009ed4:	d402      	bmi.n	8009edc <_vfiprintf_r+0x220>
 8009ed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ed8:	f7ff f8c4 	bl	8009064 <__retarget_lock_release_recursive>
 8009edc:	89ab      	ldrh	r3, [r5, #12]
 8009ede:	065b      	lsls	r3, r3, #25
 8009ee0:	f53f af12 	bmi.w	8009d08 <_vfiprintf_r+0x4c>
 8009ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ee6:	e711      	b.n	8009d0c <_vfiprintf_r+0x50>
 8009ee8:	ab03      	add	r3, sp, #12
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	462a      	mov	r2, r5
 8009eee:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <_vfiprintf_r+0x258>)
 8009ef0:	a904      	add	r1, sp, #16
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f7fd fc08 	bl	8007708 <_printf_i>
 8009ef8:	e7e4      	b.n	8009ec4 <_vfiprintf_r+0x208>
 8009efa:	bf00      	nop
 8009efc:	0800aa58 	.word	0x0800aa58
 8009f00:	0800aa78 	.word	0x0800aa78
 8009f04:	0800aa38 	.word	0x0800aa38
 8009f08:	0800abf4 	.word	0x0800abf4
 8009f0c:	0800abfe 	.word	0x0800abfe
 8009f10:	080071c1 	.word	0x080071c1
 8009f14:	08009c99 	.word	0x08009c99
 8009f18:	0800abfa 	.word	0x0800abfa

08009f1c <_read_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4d07      	ldr	r5, [pc, #28]	; (8009f3c <_read_r+0x20>)
 8009f20:	4604      	mov	r4, r0
 8009f22:	4608      	mov	r0, r1
 8009f24:	4611      	mov	r1, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	602a      	str	r2, [r5, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f7f7 fd3c 	bl	80019a8 <_read>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d102      	bne.n	8009f3a <_read_r+0x1e>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	b103      	cbz	r3, 8009f3a <_read_r+0x1e>
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	20000644 	.word	0x20000644

08009f40 <__swbuf_r>:
 8009f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f42:	460e      	mov	r6, r1
 8009f44:	4614      	mov	r4, r2
 8009f46:	4605      	mov	r5, r0
 8009f48:	b118      	cbz	r0, 8009f52 <__swbuf_r+0x12>
 8009f4a:	6983      	ldr	r3, [r0, #24]
 8009f4c:	b90b      	cbnz	r3, 8009f52 <__swbuf_r+0x12>
 8009f4e:	f7fe ffe5 	bl	8008f1c <__sinit>
 8009f52:	4b21      	ldr	r3, [pc, #132]	; (8009fd8 <__swbuf_r+0x98>)
 8009f54:	429c      	cmp	r4, r3
 8009f56:	d12b      	bne.n	8009fb0 <__swbuf_r+0x70>
 8009f58:	686c      	ldr	r4, [r5, #4]
 8009f5a:	69a3      	ldr	r3, [r4, #24]
 8009f5c:	60a3      	str	r3, [r4, #8]
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	071a      	lsls	r2, r3, #28
 8009f62:	d52f      	bpl.n	8009fc4 <__swbuf_r+0x84>
 8009f64:	6923      	ldr	r3, [r4, #16]
 8009f66:	b36b      	cbz	r3, 8009fc4 <__swbuf_r+0x84>
 8009f68:	6923      	ldr	r3, [r4, #16]
 8009f6a:	6820      	ldr	r0, [r4, #0]
 8009f6c:	1ac0      	subs	r0, r0, r3
 8009f6e:	6963      	ldr	r3, [r4, #20]
 8009f70:	b2f6      	uxtb	r6, r6
 8009f72:	4283      	cmp	r3, r0
 8009f74:	4637      	mov	r7, r6
 8009f76:	dc04      	bgt.n	8009f82 <__swbuf_r+0x42>
 8009f78:	4621      	mov	r1, r4
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f7fe fefc 	bl	8008d78 <_fflush_r>
 8009f80:	bb30      	cbnz	r0, 8009fd0 <__swbuf_r+0x90>
 8009f82:	68a3      	ldr	r3, [r4, #8]
 8009f84:	3b01      	subs	r3, #1
 8009f86:	60a3      	str	r3, [r4, #8]
 8009f88:	6823      	ldr	r3, [r4, #0]
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	6022      	str	r2, [r4, #0]
 8009f8e:	701e      	strb	r6, [r3, #0]
 8009f90:	6963      	ldr	r3, [r4, #20]
 8009f92:	3001      	adds	r0, #1
 8009f94:	4283      	cmp	r3, r0
 8009f96:	d004      	beq.n	8009fa2 <__swbuf_r+0x62>
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	07db      	lsls	r3, r3, #31
 8009f9c:	d506      	bpl.n	8009fac <__swbuf_r+0x6c>
 8009f9e:	2e0a      	cmp	r6, #10
 8009fa0:	d104      	bne.n	8009fac <__swbuf_r+0x6c>
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	f7fe fee7 	bl	8008d78 <_fflush_r>
 8009faa:	b988      	cbnz	r0, 8009fd0 <__swbuf_r+0x90>
 8009fac:	4638      	mov	r0, r7
 8009fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb0:	4b0a      	ldr	r3, [pc, #40]	; (8009fdc <__swbuf_r+0x9c>)
 8009fb2:	429c      	cmp	r4, r3
 8009fb4:	d101      	bne.n	8009fba <__swbuf_r+0x7a>
 8009fb6:	68ac      	ldr	r4, [r5, #8]
 8009fb8:	e7cf      	b.n	8009f5a <__swbuf_r+0x1a>
 8009fba:	4b09      	ldr	r3, [pc, #36]	; (8009fe0 <__swbuf_r+0xa0>)
 8009fbc:	429c      	cmp	r4, r3
 8009fbe:	bf08      	it	eq
 8009fc0:	68ec      	ldreq	r4, [r5, #12]
 8009fc2:	e7ca      	b.n	8009f5a <__swbuf_r+0x1a>
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	f000 f81a 	bl	800a000 <__swsetup_r>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d0cb      	beq.n	8009f68 <__swbuf_r+0x28>
 8009fd0:	f04f 37ff 	mov.w	r7, #4294967295
 8009fd4:	e7ea      	b.n	8009fac <__swbuf_r+0x6c>
 8009fd6:	bf00      	nop
 8009fd8:	0800aa58 	.word	0x0800aa58
 8009fdc:	0800aa78 	.word	0x0800aa78
 8009fe0:	0800aa38 	.word	0x0800aa38

08009fe4 <__ascii_wctomb>:
 8009fe4:	b149      	cbz	r1, 8009ffa <__ascii_wctomb+0x16>
 8009fe6:	2aff      	cmp	r2, #255	; 0xff
 8009fe8:	bf85      	ittet	hi
 8009fea:	238a      	movhi	r3, #138	; 0x8a
 8009fec:	6003      	strhi	r3, [r0, #0]
 8009fee:	700a      	strbls	r2, [r1, #0]
 8009ff0:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ff4:	bf98      	it	ls
 8009ff6:	2001      	movls	r0, #1
 8009ff8:	4770      	bx	lr
 8009ffa:	4608      	mov	r0, r1
 8009ffc:	4770      	bx	lr
	...

0800a000 <__swsetup_r>:
 800a000:	4b32      	ldr	r3, [pc, #200]	; (800a0cc <__swsetup_r+0xcc>)
 800a002:	b570      	push	{r4, r5, r6, lr}
 800a004:	681d      	ldr	r5, [r3, #0]
 800a006:	4606      	mov	r6, r0
 800a008:	460c      	mov	r4, r1
 800a00a:	b125      	cbz	r5, 800a016 <__swsetup_r+0x16>
 800a00c:	69ab      	ldr	r3, [r5, #24]
 800a00e:	b913      	cbnz	r3, 800a016 <__swsetup_r+0x16>
 800a010:	4628      	mov	r0, r5
 800a012:	f7fe ff83 	bl	8008f1c <__sinit>
 800a016:	4b2e      	ldr	r3, [pc, #184]	; (800a0d0 <__swsetup_r+0xd0>)
 800a018:	429c      	cmp	r4, r3
 800a01a:	d10f      	bne.n	800a03c <__swsetup_r+0x3c>
 800a01c:	686c      	ldr	r4, [r5, #4]
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a024:	0719      	lsls	r1, r3, #28
 800a026:	d42c      	bmi.n	800a082 <__swsetup_r+0x82>
 800a028:	06dd      	lsls	r5, r3, #27
 800a02a:	d411      	bmi.n	800a050 <__swsetup_r+0x50>
 800a02c:	2309      	movs	r3, #9
 800a02e:	6033      	str	r3, [r6, #0]
 800a030:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a034:	81a3      	strh	r3, [r4, #12]
 800a036:	f04f 30ff 	mov.w	r0, #4294967295
 800a03a:	e03e      	b.n	800a0ba <__swsetup_r+0xba>
 800a03c:	4b25      	ldr	r3, [pc, #148]	; (800a0d4 <__swsetup_r+0xd4>)
 800a03e:	429c      	cmp	r4, r3
 800a040:	d101      	bne.n	800a046 <__swsetup_r+0x46>
 800a042:	68ac      	ldr	r4, [r5, #8]
 800a044:	e7eb      	b.n	800a01e <__swsetup_r+0x1e>
 800a046:	4b24      	ldr	r3, [pc, #144]	; (800a0d8 <__swsetup_r+0xd8>)
 800a048:	429c      	cmp	r4, r3
 800a04a:	bf08      	it	eq
 800a04c:	68ec      	ldreq	r4, [r5, #12]
 800a04e:	e7e6      	b.n	800a01e <__swsetup_r+0x1e>
 800a050:	0758      	lsls	r0, r3, #29
 800a052:	d512      	bpl.n	800a07a <__swsetup_r+0x7a>
 800a054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a056:	b141      	cbz	r1, 800a06a <__swsetup_r+0x6a>
 800a058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a05c:	4299      	cmp	r1, r3
 800a05e:	d002      	beq.n	800a066 <__swsetup_r+0x66>
 800a060:	4630      	mov	r0, r6
 800a062:	f7fc ff2d 	bl	8006ec0 <_free_r>
 800a066:	2300      	movs	r3, #0
 800a068:	6363      	str	r3, [r4, #52]	; 0x34
 800a06a:	89a3      	ldrh	r3, [r4, #12]
 800a06c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a070:	81a3      	strh	r3, [r4, #12]
 800a072:	2300      	movs	r3, #0
 800a074:	6063      	str	r3, [r4, #4]
 800a076:	6923      	ldr	r3, [r4, #16]
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	89a3      	ldrh	r3, [r4, #12]
 800a07c:	f043 0308 	orr.w	r3, r3, #8
 800a080:	81a3      	strh	r3, [r4, #12]
 800a082:	6923      	ldr	r3, [r4, #16]
 800a084:	b94b      	cbnz	r3, 800a09a <__swsetup_r+0x9a>
 800a086:	89a3      	ldrh	r3, [r4, #12]
 800a088:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a08c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a090:	d003      	beq.n	800a09a <__swsetup_r+0x9a>
 800a092:	4621      	mov	r1, r4
 800a094:	4630      	mov	r0, r6
 800a096:	f000 f847 	bl	800a128 <__smakebuf_r>
 800a09a:	89a0      	ldrh	r0, [r4, #12]
 800a09c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0a0:	f010 0301 	ands.w	r3, r0, #1
 800a0a4:	d00a      	beq.n	800a0bc <__swsetup_r+0xbc>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	60a3      	str	r3, [r4, #8]
 800a0aa:	6963      	ldr	r3, [r4, #20]
 800a0ac:	425b      	negs	r3, r3
 800a0ae:	61a3      	str	r3, [r4, #24]
 800a0b0:	6923      	ldr	r3, [r4, #16]
 800a0b2:	b943      	cbnz	r3, 800a0c6 <__swsetup_r+0xc6>
 800a0b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0b8:	d1ba      	bne.n	800a030 <__swsetup_r+0x30>
 800a0ba:	bd70      	pop	{r4, r5, r6, pc}
 800a0bc:	0781      	lsls	r1, r0, #30
 800a0be:	bf58      	it	pl
 800a0c0:	6963      	ldrpl	r3, [r4, #20]
 800a0c2:	60a3      	str	r3, [r4, #8]
 800a0c4:	e7f4      	b.n	800a0b0 <__swsetup_r+0xb0>
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	e7f7      	b.n	800a0ba <__swsetup_r+0xba>
 800a0ca:	bf00      	nop
 800a0cc:	2000003c 	.word	0x2000003c
 800a0d0:	0800aa58 	.word	0x0800aa58
 800a0d4:	0800aa78 	.word	0x0800aa78
 800a0d8:	0800aa38 	.word	0x0800aa38

0800a0dc <__swhatbuf_r>:
 800a0dc:	b570      	push	{r4, r5, r6, lr}
 800a0de:	460e      	mov	r6, r1
 800a0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e4:	2900      	cmp	r1, #0
 800a0e6:	b096      	sub	sp, #88	; 0x58
 800a0e8:	4614      	mov	r4, r2
 800a0ea:	461d      	mov	r5, r3
 800a0ec:	da08      	bge.n	800a100 <__swhatbuf_r+0x24>
 800a0ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	602a      	str	r2, [r5, #0]
 800a0f6:	061a      	lsls	r2, r3, #24
 800a0f8:	d410      	bmi.n	800a11c <__swhatbuf_r+0x40>
 800a0fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0fe:	e00e      	b.n	800a11e <__swhatbuf_r+0x42>
 800a100:	466a      	mov	r2, sp
 800a102:	f000 f859 	bl	800a1b8 <_fstat_r>
 800a106:	2800      	cmp	r0, #0
 800a108:	dbf1      	blt.n	800a0ee <__swhatbuf_r+0x12>
 800a10a:	9a01      	ldr	r2, [sp, #4]
 800a10c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a110:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a114:	425a      	negs	r2, r3
 800a116:	415a      	adcs	r2, r3
 800a118:	602a      	str	r2, [r5, #0]
 800a11a:	e7ee      	b.n	800a0fa <__swhatbuf_r+0x1e>
 800a11c:	2340      	movs	r3, #64	; 0x40
 800a11e:	2000      	movs	r0, #0
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	b016      	add	sp, #88	; 0x58
 800a124:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a128 <__smakebuf_r>:
 800a128:	898b      	ldrh	r3, [r1, #12]
 800a12a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a12c:	079d      	lsls	r5, r3, #30
 800a12e:	4606      	mov	r6, r0
 800a130:	460c      	mov	r4, r1
 800a132:	d507      	bpl.n	800a144 <__smakebuf_r+0x1c>
 800a134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	6123      	str	r3, [r4, #16]
 800a13c:	2301      	movs	r3, #1
 800a13e:	6163      	str	r3, [r4, #20]
 800a140:	b002      	add	sp, #8
 800a142:	bd70      	pop	{r4, r5, r6, pc}
 800a144:	ab01      	add	r3, sp, #4
 800a146:	466a      	mov	r2, sp
 800a148:	f7ff ffc8 	bl	800a0dc <__swhatbuf_r>
 800a14c:	9900      	ldr	r1, [sp, #0]
 800a14e:	4605      	mov	r5, r0
 800a150:	4630      	mov	r0, r6
 800a152:	f7fc ff21 	bl	8006f98 <_malloc_r>
 800a156:	b948      	cbnz	r0, 800a16c <__smakebuf_r+0x44>
 800a158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a15c:	059a      	lsls	r2, r3, #22
 800a15e:	d4ef      	bmi.n	800a140 <__smakebuf_r+0x18>
 800a160:	f023 0303 	bic.w	r3, r3, #3
 800a164:	f043 0302 	orr.w	r3, r3, #2
 800a168:	81a3      	strh	r3, [r4, #12]
 800a16a:	e7e3      	b.n	800a134 <__smakebuf_r+0xc>
 800a16c:	4b0d      	ldr	r3, [pc, #52]	; (800a1a4 <__smakebuf_r+0x7c>)
 800a16e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	6020      	str	r0, [r4, #0]
 800a174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a178:	81a3      	strh	r3, [r4, #12]
 800a17a:	9b00      	ldr	r3, [sp, #0]
 800a17c:	6163      	str	r3, [r4, #20]
 800a17e:	9b01      	ldr	r3, [sp, #4]
 800a180:	6120      	str	r0, [r4, #16]
 800a182:	b15b      	cbz	r3, 800a19c <__smakebuf_r+0x74>
 800a184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a188:	4630      	mov	r0, r6
 800a18a:	f000 f827 	bl	800a1dc <_isatty_r>
 800a18e:	b128      	cbz	r0, 800a19c <__smakebuf_r+0x74>
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	f023 0303 	bic.w	r3, r3, #3
 800a196:	f043 0301 	orr.w	r3, r3, #1
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	89a0      	ldrh	r0, [r4, #12]
 800a19e:	4305      	orrs	r5, r0
 800a1a0:	81a5      	strh	r5, [r4, #12]
 800a1a2:	e7cd      	b.n	800a140 <__smakebuf_r+0x18>
 800a1a4:	08008eb5 	.word	0x08008eb5

0800a1a8 <_malloc_usable_size_r>:
 800a1a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ac:	1f18      	subs	r0, r3, #4
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	bfbc      	itt	lt
 800a1b2:	580b      	ldrlt	r3, [r1, r0]
 800a1b4:	18c0      	addlt	r0, r0, r3
 800a1b6:	4770      	bx	lr

0800a1b8 <_fstat_r>:
 800a1b8:	b538      	push	{r3, r4, r5, lr}
 800a1ba:	4d07      	ldr	r5, [pc, #28]	; (800a1d8 <_fstat_r+0x20>)
 800a1bc:	2300      	movs	r3, #0
 800a1be:	4604      	mov	r4, r0
 800a1c0:	4608      	mov	r0, r1
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	602b      	str	r3, [r5, #0]
 800a1c6:	f7f7 fc34 	bl	8001a32 <_fstat>
 800a1ca:	1c43      	adds	r3, r0, #1
 800a1cc:	d102      	bne.n	800a1d4 <_fstat_r+0x1c>
 800a1ce:	682b      	ldr	r3, [r5, #0]
 800a1d0:	b103      	cbz	r3, 800a1d4 <_fstat_r+0x1c>
 800a1d2:	6023      	str	r3, [r4, #0]
 800a1d4:	bd38      	pop	{r3, r4, r5, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20000644 	.word	0x20000644

0800a1dc <_isatty_r>:
 800a1dc:	b538      	push	{r3, r4, r5, lr}
 800a1de:	4d06      	ldr	r5, [pc, #24]	; (800a1f8 <_isatty_r+0x1c>)
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	4608      	mov	r0, r1
 800a1e6:	602b      	str	r3, [r5, #0]
 800a1e8:	f7f7 fc33 	bl	8001a52 <_isatty>
 800a1ec:	1c43      	adds	r3, r0, #1
 800a1ee:	d102      	bne.n	800a1f6 <_isatty_r+0x1a>
 800a1f0:	682b      	ldr	r3, [r5, #0]
 800a1f2:	b103      	cbz	r3, 800a1f6 <_isatty_r+0x1a>
 800a1f4:	6023      	str	r3, [r4, #0]
 800a1f6:	bd38      	pop	{r3, r4, r5, pc}
 800a1f8:	20000644 	.word	0x20000644

0800a1fc <_init>:
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	bf00      	nop
 800a200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a202:	bc08      	pop	{r3}
 800a204:	469e      	mov	lr, r3
 800a206:	4770      	bx	lr

0800a208 <_fini>:
 800a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20a:	bf00      	nop
 800a20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20e:	bc08      	pop	{r3}
 800a210:	469e      	mov	lr, r3
 800a212:	4770      	bx	lr
