
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  0800ad38  0800ad38  0001ad38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b85c  0800b85c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b85c  0800b85c  0001b85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b864  0800b864  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b864  0800b864  0001b864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b86c  0800b86c  0001b86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800b870  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000210  0800ba7c  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800ba7c  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae09  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bef  00000000  00000000  0003b045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  0003ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  00040108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fe5  00000000  00000000  00041450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019725  00000000  00000000  00069435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de3cc  00000000  00000000  00082b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160f26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006934  00000000  00000000  00160f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad1c 	.word	0x0800ad1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800ad1c 	.word	0x0800ad1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_DMA_Init+0x38>)
 8000eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <MX_DMA_Init+0x38>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6493      	str	r3, [r2, #72]	; 0x48
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_DMA_Init+0x38>)
 8000ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2010      	movs	r0, #16
 8000ed0:	f001 ff01 	bl	8002cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ed4:	2010      	movs	r0, #16
 8000ed6:	f001 ff1a 	bl	8002d0e <HAL_NVIC_EnableIRQ>

}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB8   ------> S_TIM16_CH1
*/
void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b5c      	ldr	r3, [pc, #368]	; (8001070 <MX_GPIO_Init+0x188>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a5b      	ldr	r2, [pc, #364]	; (8001070 <MX_GPIO_Init+0x188>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b59      	ldr	r3, [pc, #356]	; (8001070 <MX_GPIO_Init+0x188>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f16:	4b56      	ldr	r3, [pc, #344]	; (8001070 <MX_GPIO_Init+0x188>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a55      	ldr	r2, [pc, #340]	; (8001070 <MX_GPIO_Init+0x188>)
 8000f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b53      	ldr	r3, [pc, #332]	; (8001070 <MX_GPIO_Init+0x188>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	4b50      	ldr	r3, [pc, #320]	; (8001070 <MX_GPIO_Init+0x188>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a4f      	ldr	r2, [pc, #316]	; (8001070 <MX_GPIO_Init+0x188>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b4d      	ldr	r3, [pc, #308]	; (8001070 <MX_GPIO_Init+0x188>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	4b4a      	ldr	r3, [pc, #296]	; (8001070 <MX_GPIO_Init+0x188>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a49      	ldr	r2, [pc, #292]	; (8001070 <MX_GPIO_Init+0x188>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b47      	ldr	r3, [pc, #284]	; (8001070 <MX_GPIO_Init+0x188>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f248 11b0 	movw	r1, #33200	; 0x81b0
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f002 fa4c 	bl	8003404 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f242 0160 	movw	r1, #8288	; 0x2060
 8000f72:	4840      	ldr	r0, [pc, #256]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f74:	f002 fa46 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2180      	movs	r1, #128	; 0x80
 8000f7c:	483e      	ldr	r0, [pc, #248]	; (8001078 <MX_GPIO_Init+0x190>)
 8000f7e:	f002 fa41 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f88:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	4837      	ldr	r0, [pc, #220]	; (8001078 <MX_GPIO_Init+0x190>)
 8000f9a:	f002 f8b9 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000f9e:	f248 13b0 	movw	r3, #33200	; 0x81b0
 8000fa2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fba:	f002 f8a9 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000fbe:	2340      	movs	r3, #64	; 0x40
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd4:	f002 f89c 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 8000fd8:	f242 0360 	movw	r3, #8288	; 0x2060
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4820      	ldr	r0, [pc, #128]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000ff2:	f002 f88d 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ff6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001008:	2305      	movs	r3, #5
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4818      	ldr	r0, [pc, #96]	; (8001074 <MX_GPIO_Init+0x18c>)
 8001014:	f002 f87c 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4812      	ldr	r0, [pc, #72]	; (8001078 <MX_GPIO_Init+0x190>)
 8001030:	f002 f86e 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001046:	230e      	movs	r3, #14
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4808      	ldr	r0, [pc, #32]	; (8001074 <MX_GPIO_Init+0x18c>)
 8001052:	f002 f85d 	bl	8003110 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2101      	movs	r1, #1
 800105a:	2028      	movs	r0, #40	; 0x28
 800105c:	f001 fe3b 	bl	8002cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001060:	2028      	movs	r0, #40	; 0x28
 8001062:	f001 fe54 	bl	8002d0e <HAL_NVIC_EnableIRQ>

}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000
 8001074:	48000400 	.word	0x48000400
 8001078:	48000800 	.word	0x48000800

0800107c <_ZN3PinC1Ev>:
    uint16_t pin;
    bool valid;
    TIM_HandleTypeDef* p_tim;
    unsigned int channel;

    Pin() : port(nullptr), pin(0), valid(false), p_tim(nullptr), channel(0) {}
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	809a      	strh	r2, [r3, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	719a      	strb	r2, [r3, #6]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <_ZN3PinC1EP12GPIO_TypeDeft>:
    Pin(GPIO_TypeDef* p, uint16_t pn) : port(p), pin(pn), valid(true), p_tim(nullptr), channel(0) {} // no timer
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	4613      	mov	r3, r2
 80010bc:	80fb      	strh	r3, [r7, #6]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	88fa      	ldrh	r2, [r7, #6]
 80010c8:	809a      	strh	r2, [r3, #4]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2201      	movs	r2, #1
 80010ce:	719a      	strb	r2, [r3, #6]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>:
    Pin(GPIO_TypeDef* p, uint16_t pn, TIM_HandleTypeDef* t, unsigned int c) : port(p), pin(pn), valid(true), p_tim(t), channel(c) {}
 80010ea:	b480      	push	{r7}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	4613      	mov	r3, r2
 80010f8:	80fb      	strh	r3, [r7, #6]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	88fa      	ldrh	r2, [r7, #6]
 8001104:	809a      	strh	r2, [r3, #4]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2201      	movs	r2, #1
 800110a:	719a      	strb	r2, [r3, #6]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <_Z5printPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff f84d 	bl	80001d0 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	b29a      	uxth	r2, r3
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <_Z5printPKc+0x2c>)
 8001142:	f005 f811 	bl	8006168 <HAL_UART_Transmit>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200005b8 	.word	0x200005b8

08001158 <printf>:
int printf(const char* s, ...){
 8001158:	b40f      	push	{r0, r1, r2, r3}
 800115a:	b580      	push	{r7, lr}
 800115c:	b0c2      	sub	sp, #264	; 0x108
 800115e:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 8001160:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001168:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800116c:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 800116e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001176:	f107 0008 	add.w	r0, r7, #8
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8001180:	f007 fc6c 	bl	8008a5c <vsiprintf>
	perror(buffer);
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	4618      	mov	r0, r3
 800118a:	f007 fa0d 	bl	80085a8 <perror>
	print(buffer);
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ffc8 	bl	8001128 <_Z5printPKc>
	va_end(args);
//	#endif
	return strlen(buffer);
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f817 	bl	80001d0 <strlen>
 80011a2:	4603      	mov	r3, r0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80011aa:	46bd      	mov	sp, r7
 80011ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011b0:	b004      	add	sp, #16
 80011b2:	4770      	bx	lr

080011b4 <_Z12print_CYTRONPc>:
Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin, &htim2, TIM_CHANNEL_2);
Pin AMT22_1(GPIOC, GPIO_PIN_7);
RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);
int button_counter = 0;

void print_CYTRON(char* msg){
 80011b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011b8:	b08f      	sub	sp, #60	; 0x3c
 80011ba:	af0a      	add	r7, sp, #40	; 0x28
 80011bc:	60f8      	str	r0, [r7, #12]
  current_angle = Wrist_Roll.get_current_angle();
 80011be:	481f      	ldr	r0, [pc, #124]	; (800123c <_Z12print_CYTRONPc+0x88>)
 80011c0:	f001 f8d2 	bl	8002368 <_ZN13RoverArmMotor17get_current_angleEv>
 80011c4:	eeb0 7a40 	vmov.f32	s14, s0
 80011c8:	eef0 7a60 	vmov.f32	s15, s1
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <_Z12print_CYTRONPc+0x8c>)
 80011ce:	ed83 7b00 	vstr	d7, [r3]
  current_angle_sw = Wrist_Roll.get_current_angle_sw();
 80011d2:	481a      	ldr	r0, [pc, #104]	; (800123c <_Z12print_CYTRONPc+0x88>)
 80011d4:	f001 f90e 	bl	80023f4 <_ZN13RoverArmMotor20get_current_angle_swEv>
 80011d8:	eeb0 7a40 	vmov.f32	s14, s0
 80011dc:	eef0 7a60 	vmov.f32	s15, s1
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <_Z12print_CYTRONPc+0x90>)
 80011e2:	ed83 7b00 	vstr	d7, [r3]
  printf("%s angle_raw %.2f, angle_sw %.2f, setpoint %.2f, zero_sw %.2f, _outputSum %.2f, output %.2f\r\n", 
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <_Z12print_CYTRONPc+0x8c>)
 80011e8:	ed93 7b00 	vldr	d7, [r3]
 80011ec:	ed87 7b00 	vstr	d7, [r7]
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <_Z12print_CYTRONPc+0x90>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	4911      	ldr	r1, [pc, #68]	; (800123c <_Z12print_CYTRONPc+0x88>)
 80011f8:	e9d1 0150 	ldrd	r0, r1, [r1, #320]	; 0x140
 80011fc:	4c0f      	ldr	r4, [pc, #60]	; (800123c <_Z12print_CYTRONPc+0x88>)
 80011fe:	e9d4 4558 	ldrd	r4, r5, [r4, #352]	; 0x160
 8001202:	4e0e      	ldr	r6, [pc, #56]	; (800123c <_Z12print_CYTRONPc+0x88>)
 8001204:	e9d6 8914 	ldrd	r8, r9, [r6, #80]	; 0x50
    msg, current_angle, current_angle_sw, Wrist_Roll.setpoint, Wrist_Roll.zero_angle_sw,
    Wrist_Roll.internalPIDInstance._outputSum, *Wrist_Roll.internalPIDInstance._myOutput);
 8001208:	4e0c      	ldr	r6, [pc, #48]	; (800123c <_Z12print_CYTRONPc+0x88>)
 800120a:	6c76      	ldr	r6, [r6, #68]	; 0x44
  printf("%s angle_raw %.2f, angle_sw %.2f, setpoint %.2f, zero_sw %.2f, _outputSum %.2f, output %.2f\r\n", 
 800120c:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8001210:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001214:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001218:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800121c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001220:	e9cd 2300 	strd	r2, r3, [sp]
 8001224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001228:	68f9      	ldr	r1, [r7, #12]
 800122a:	4807      	ldr	r0, [pc, #28]	; (8001248 <_Z12print_CYTRONPc+0x94>)
 800122c:	f7ff ff94 	bl	8001158 <printf>
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800123a:	bf00      	nop
 800123c:	20000278 	.word	0x20000278
 8001240:	20000230 	.word	0x20000230
 8001244:	20000238 	.word	0x20000238
 8001248:	0800ad38 	.word	0x0800ad38
 800124c:	00000000 	.word	0x00000000

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001256:	f001 fbc3 	bl	80029e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125a:	f000 f8a3 	bl	80013a4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125e:	f7ff fe43 	bl	8000ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001262:	f7ff fe23 	bl	8000eac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001266:	f000 fde3 	bl	8001e30 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800126a:	f000 f9d9 	bl	8001620 <MX_SPI1_Init>
//  MX_SPI2_Init();
  MX_SPI3_Init();
 800126e:	f000 fa15 	bl	800169c <MX_SPI3_Init>
  MX_TIM1_Init();
 8001272:	f000 fc09 	bl	8001a88 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001276:	f000 fcb3 	bl	8001be0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderData_1 = 99;
 800127a:	2363      	movs	r3, #99	; 0x63
 800127c:	82fb      	strh	r3, [r7, #22]
  uint16_t encoderData_2 = 99;
 800127e:	2363      	movs	r3, #99	; 0x63
 8001280:	82bb      	strh	r3, [r7, #20]
  uint16_t encoderData_3 = 99;
 8001282:	2363      	movs	r3, #99	; 0x63
 8001284:	827b      	strh	r3, [r7, #18]
  uint16_t encoder_max = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	823b      	strh	r3, [r7, #16]
  uint16_t encoder_min = 4100;
 800128a:	f241 0304 	movw	r3, #4100	; 0x1004
 800128e:	81fb      	strh	r3, [r7, #14]
  HAL_TIM_Base_Start(&htim1);
 8001290:	4837      	ldr	r0, [pc, #220]	; (8001370 <main+0x120>)
 8001292:	f003 ff31 	bl	80050f8 <HAL_TIM_Base_Start>

  /*---AMT22 setup---*/
  // resetAMT22(&hspi1, GPIOC, GPIO_PIN_7, &htim1);

  /*---ESC setup---*/
  int32_t  CH2_ESC = 1500-1;
 8001296:	f240 53db 	movw	r3, #1499	; 0x5db
 800129a:	60bb      	str	r3, [r7, #8]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800129c:	2104      	movs	r1, #4
 800129e:	4834      	ldr	r0, [pc, #208]	; (8001370 <main+0x120>)
 80012a0:	f003 ffd8 	bl	8005254 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 80012a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a8:	f001 fc16 	bl	8002ad8 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500-1);
 80012ac:	4b30      	ldr	r3, [pc, #192]	; (8001370 <main+0x120>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f240 52db 	movw	r2, #1499	; 0x5db
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(500);
 80012b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ba:	f001 fc0d 	bl	8002ad8 <HAL_Delay>




  /*---CYTRON setup---*/
  int32_t  CH2_DC = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012c2:	2104      	movs	r1, #4
 80012c4:	482b      	ldr	r0, [pc, #172]	; (8001374 <main+0x124>)
 80012c6:	f003 ffc5 	bl	8005254 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <main+0x124>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2200      	movs	r2, #0
 80012d0:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(10);
 80012d2:	200a      	movs	r0, #10
 80012d4:	f001 fc00 	bl	8002ad8 <HAL_Delay>
  Wrist_Roll.wrist_waist = 1;
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <main+0x128>)
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
  Wrist_Roll.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <main+0x12c>)
 80012e2:	ed93 7b00 	vldr	d7, [r3]
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <main+0x130>)
 80012e8:	ed93 6b00 	vldr	d6, [r3]
 80012ec:	4b25      	ldr	r3, [pc, #148]	; (8001384 <main+0x134>)
 80012ee:	ed93 2b00 	vldr	d2, [r3]
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <main+0x138>)
 80012f4:	ed93 3b00 	vldr	d3, [r3]
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <main+0x13c>)
 80012fa:	ed93 4b00 	vldr	d4, [r3]
 80012fe:	4b24      	ldr	r3, [pc, #144]	; (8001390 <main+0x140>)
 8001300:	ed93 5b00 	vldr	d5, [r3]
 8001304:	eeb0 1a46 	vmov.f32	s2, s12
 8001308:	eef0 1a66 	vmov.f32	s3, s13
 800130c:	eeb0 0a47 	vmov.f32	s0, s14
 8001310:	eef0 0a67 	vmov.f32	s1, s15
 8001314:	4818      	ldr	r0, [pc, #96]	; (8001378 <main+0x128>)
 8001316:	f000 ff33 	bl	8002180 <_ZN13RoverArmMotor5beginEdddddd>
  Wrist_Roll.setAngleLimits(2, 120.0f); //for angle limits test
 800131a:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001360 <main+0x110>
 800131e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001368 <main+0x118>
 8001322:	4815      	ldr	r0, [pc, #84]	; (8001378 <main+0x128>)
 8001324:	f000 ffbe 	bl	80022a4 <_ZN13RoverArmMotor14setAngleLimitsEdd>
  Wrist_Roll.reset_encoder();
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <main+0x128>)
 800132a:	f000 ffdf 	bl	80022ec <_ZN13RoverArmMotor13reset_encoderEv>
  // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 70);
  // current_angle = Wrist_Roll.get_current_angle();
  // printf("current angle is %f\r\n, current_angle");
  // Wrist_Roll.newSetpoint(current_angle + 150);

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 30);
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <main+0x124>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	221e      	movs	r2, #30
 8001334:	639a      	str	r2, [r3, #56]	; 0x38
  while(!brakeSet){
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <main+0x144>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d103      	bne.n	8001346 <main+0xf6>
    print_CYTRON("BRAKE");
 800133e:	4816      	ldr	r0, [pc, #88]	; (8001398 <main+0x148>)
 8001340:	f7ff ff38 	bl	80011b4 <_Z12print_CYTRONPc>
  while(!brakeSet){
 8001344:	e7f7      	b.n	8001336 <main+0xe6>
    // printf("waiting for brake set\r\n");
  }
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <main+0x124>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2200      	movs	r2, #0
 800134c:	639a      	str	r2, [r3, #56]	; 0x38


  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 800134e:	2201      	movs	r2, #1
 8001350:	4912      	ldr	r1, [pc, #72]	; (800139c <main+0x14c>)
 8001352:	4813      	ldr	r0, [pc, #76]	; (80013a0 <main+0x150>)
 8001354:	f004 ff9c 	bl	8006290 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001358:	e7fe      	b.n	8001358 <main+0x108>
 800135a:	bf00      	nop
 800135c:	f3af 8000 	nop.w
 8001360:	00000000 	.word	0x00000000
 8001364:	405e0000 	.word	0x405e0000
 8001368:	00000000 	.word	0x00000000
 800136c:	40000000 	.word	0x40000000
 8001370:	20000520 	.word	0x20000520
 8001374:	2000056c 	.word	0x2000056c
 8001378:	20000278 	.word	0x20000278
 800137c:	20000000 	.word	0x20000000
 8001380:	20000008 	.word	0x20000008
 8001384:	20000010 	.word	0x20000010
 8001388:	20000018 	.word	0x20000018
 800138c:	20000020 	.word	0x20000020
 8001390:	20000028 	.word	0x20000028
 8001394:	20000240 	.word	0x20000240
 8001398:	0800ad98 	.word	0x0800ad98
 800139c:	200003e4 	.word	0x200003e4
 80013a0:	200005b8 	.word	0x200005b8

080013a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b096      	sub	sp, #88	; 0x58
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2244      	movs	r2, #68	; 0x44
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f006 fb0c 	bl	80079d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013ca:	f002 f859 	bl	8003480 <HAL_PWREx_ControlVoltageScaling>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bf14      	ite	ne
 80013d4:	2301      	movne	r3, #1
 80013d6:	2300      	moveq	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80013de:	f000 f8ab 	bl	8001538 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e2:	2302      	movs	r3, #2
 80013e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ec:	2310      	movs	r3, #16
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f0:	2302      	movs	r3, #2
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f4:	2302      	movs	r3, #2
 80013f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013fc:	230a      	movs	r3, #10
 80013fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001400:	2307      	movs	r3, #7
 8001402:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001404:	2302      	movs	r3, #2
 8001406:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001408:	2302      	movs	r3, #2
 800140a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4618      	mov	r0, r3
 8001412:	f002 f88b 	bl	800352c <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf14      	ite	ne
 800141c:	2301      	movne	r3, #1
 800141e:	2300      	moveq	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8001426:	f000 f887 	bl	8001538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142a:	230f      	movs	r3, #15
 800142c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142e:	2303      	movs	r3, #3
 8001430:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	2104      	movs	r1, #4
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fc86 	bl	8003d54 <HAL_RCC_ClockConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	bf14      	ite	ne
 800144e:	2301      	movne	r3, #1
 8001450:	2300      	moveq	r3, #0
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8001458:	f000 f86e 	bl	8001538 <Error_Handler>
  }
}
 800145c:	bf00      	nop
 800145e:	3758      	adds	r7, #88	; 0x58
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
  // if(!brakeSet) {
    if(GPIO_Pin == B1_Pin) // INT Source is pin A9
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001474:	d115      	bne.n	80014a2 <HAL_GPIO_EXTI_Callback+0x3e>
    {
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);  // set encoder stationary
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_GPIO_EXTI_Callback+0x44>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2200      	movs	r2, #0
 800147c:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_Delay(100);  
 800147e:	2064      	movs	r0, #100	; 0x64
 8001480:	f001 fb2a 	bl	8002ad8 <HAL_Delay>
      button_counter++;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_GPIO_EXTI_Callback+0x48>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_GPIO_EXTI_Callback+0x48>)
 800148c:	6013      	str	r3, [r2, #0]
      Wrist_Roll.set_zero_angle_sw();
 800148e:	4808      	ldr	r0, [pc, #32]	; (80014b0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001490:	f000 ff40 	bl	8002314 <_ZN13RoverArmMotor17set_zero_angle_swEv>
      brakeSet = 1;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_GPIO_EXTI_Callback+0x50>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]
      HAL_Delay(100);
 800149a:	2064      	movs	r0, #100	; 0x64
 800149c:	f001 fb1c 	bl	8002ad8 <HAL_Delay>
      return;
 80014a0:	bf00      	nop
    }
  // }
}
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000056c 	.word	0x2000056c
 80014ac:	200003e0 	.word	0x200003e0
 80014b0:	20000278 	.word	0x20000278
 80014b4:	20000240 	.word	0x20000240

080014b8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  // if(huart->Instance == USART2)
  // {
    if(rx_index < RX_BUFFER_SIZE - 1) // check if buffer is not full
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_UART_RxCpltCallback+0x70>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b62      	cmp	r3, #98	; 0x62
 80014c6:	d819      	bhi.n	80014fc <HAL_UART_RxCpltCallback+0x44>
    {
      rx_buffer[rx_index++] = (uint8_t)rx_data[0]; // add received byte to buffer
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <HAL_UART_RxCpltCallback+0x70>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	4916      	ldr	r1, [pc, #88]	; (8001528 <HAL_UART_RxCpltCallback+0x70>)
 80014d0:	600a      	str	r2, [r1, #0]
 80014d2:	4a16      	ldr	r2, [pc, #88]	; (800152c <HAL_UART_RxCpltCallback+0x74>)
 80014d4:	7811      	ldrb	r1, [r2, #0]
 80014d6:	4a16      	ldr	r2, [pc, #88]	; (8001530 <HAL_UART_RxCpltCallback+0x78>)
 80014d8:	54d1      	strb	r1, [r2, r3]
      if(rx_data[0] == '\n' || rx_data[0] == '\r') // check for Enter key
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_UART_RxCpltCallback+0x74>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b0a      	cmp	r3, #10
 80014e0:	d003      	beq.n	80014ea <HAL_UART_RxCpltCallback+0x32>
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_UART_RxCpltCallback+0x74>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b0d      	cmp	r3, #13
 80014e8:	d114      	bne.n	8001514 <HAL_UART_RxCpltCallback+0x5c>
      {
        rx_buffer[rx_index] = '\0'; // add null terminator to make it a string
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <HAL_UART_RxCpltCallback+0x70>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <HAL_UART_RxCpltCallback+0x78>)
 80014f0:	2100      	movs	r1, #0
 80014f2:	54d1      	strb	r1, [r2, r3]
        rx_index = 0; // reset buffer index
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_UART_RxCpltCallback+0x70>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_UART_RxCpltCallback+0x5c>
        // do something with the received data
      }
    }
    else if (rx_index == RX_BUFFER_SIZE - 1) // buffer is full
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_UART_RxCpltCallback+0x70>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b63      	cmp	r3, #99	; 0x63
 8001502:	d107      	bne.n	8001514 <HAL_UART_RxCpltCallback+0x5c>
    {
      rx_buffer[rx_index] = '\0'; // add null terminator to make it a string
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <HAL_UART_RxCpltCallback+0x70>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a09      	ldr	r2, [pc, #36]	; (8001530 <HAL_UART_RxCpltCallback+0x78>)
 800150a:	2100      	movs	r1, #0
 800150c:	54d1      	strb	r1, [r2, r3]
      rx_index = 0; // reset buffer index
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_UART_RxCpltCallback+0x70>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
      // do something with the received data
    }
  // }
  HAL_UART_Receive_IT(&huart2, rx_data, 1); // start listening for next byte
 8001514:	2201      	movs	r2, #1
 8001516:	4905      	ldr	r1, [pc, #20]	; (800152c <HAL_UART_RxCpltCallback+0x74>)
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <HAL_UART_RxCpltCallback+0x7c>)
 800151a:	f004 feb9 	bl	8006290 <HAL_UART_Receive_IT>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000450 	.word	0x20000450
 800152c:	200003e4 	.word	0x200003e4
 8001530:	200003ec 	.word	0x200003ec
 8001534:	200005b8 	.word	0x200005b8

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>
 8001542:	0000      	movs	r0, r0
 8001544:	0000      	movs	r0, r0
	...

08001548 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b096      	sub	sp, #88	; 0x58
 800154c:	af10      	add	r7, sp, #64	; 0x40
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d13f      	bne.n	80015d8 <_Z41__static_initialization_and_destruction_0ii+0x90>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155e:	4293      	cmp	r3, r2
 8001560:	d13a      	bne.n	80015d8 <_Z41__static_initialization_and_destruction_0ii+0x90>
Pin CYTRON_DIR_1(CYTRON_DIR_1_GPIO_Port, CYTRON_DIR_1_Pin);
 8001562:	2220      	movs	r2, #32
 8001564:	4922      	ldr	r1, [pc, #136]	; (80015f0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001566:	4823      	ldr	r0, [pc, #140]	; (80015f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001568:	f7ff fda2 	bl	80010b0 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin, &htim2, TIM_CHANNEL_2);
 800156c:	2304      	movs	r3, #4
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001572:	2208      	movs	r2, #8
 8001574:	491e      	ldr	r1, [pc, #120]	; (80015f0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001576:	4821      	ldr	r0, [pc, #132]	; (80015fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001578:	f7ff fdb7 	bl	80010ea <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>
Pin AMT22_1(GPIOC, GPIO_PIN_7);
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	4920      	ldr	r1, [pc, #128]	; (8001600 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001580:	4820      	ldr	r0, [pc, #128]	; (8001604 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001582:	f7ff fd95 	bl	80010b0 <_ZN3PinC1EP12GPIO_TypeDeft>
RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fd76 	bl	800107c <_ZN3PinC1Ev>
 8001590:	4c1a      	ldr	r4, [pc, #104]	; (80015fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001592:	ad0b      	add	r5, sp, #44	; 0x2c
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800159a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800159e:	2300      	movs	r3, #0
 80015a0:	930a      	str	r3, [sp, #40]	; 0x28
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80015a4:	ad06      	add	r5, sp, #24
 80015a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80015ae:	ad02      	add	r5, sp, #8
 80015b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015b6:	466a      	mov	r2, sp
 80015b8:	f104 0308 	add.w	r3, r4, #8
 80015bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015c0:	e882 0003 	stmia.w	r2, {r0, r1}
 80015c4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015c8:	ed9f 1b05 	vldr	d1, [pc, #20]	; 80015e0 <_Z41__static_initialization_and_destruction_0ii+0x98>
 80015cc:	ed9f 0b06 	vldr	d0, [pc, #24]	; 80015e8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80015d0:	490d      	ldr	r1, [pc, #52]	; (8001608 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80015d2:	480e      	ldr	r0, [pc, #56]	; (800160c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80015d4:	f000 fd2b 	bl	800202e <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>
}
 80015d8:	bf00      	nop
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bdb0      	pop	{r4, r5, r7, pc}
 80015e0:	00000000 	.word	0x00000000
 80015e4:	40767000 	.word	0x40767000
	...
 80015f0:	48000400 	.word	0x48000400
 80015f4:	20000244 	.word	0x20000244
 80015f8:	2000056c 	.word	0x2000056c
 80015fc:	20000254 	.word	0x20000254
 8001600:	48000800 	.word	0x48000800
 8001604:	20000264 	.word	0x20000264
 8001608:	20000454 	.word	0x20000454
 800160c:	20000278 	.word	0x20000278

08001610 <_GLOBAL__sub_I_aggKp>:
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
 8001614:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001618:	2001      	movs	r0, #1
 800161a:	f7ff ff95 	bl	8001548 <_Z41__static_initialization_and_destruction_0ii>
 800161e:	bd80      	pop	{r7, pc}

08001620 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <MX_SPI1_Init+0x74>)
 8001626:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <MX_SPI1_Init+0x78>)
 8001628:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <MX_SPI1_Init+0x74>)
 800162c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001630:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <MX_SPI1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_SPI1_Init+0x74>)
 800163a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800163e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_SPI1_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <MX_SPI1_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_SPI1_Init+0x74>)
 800164e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001652:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_SPI1_Init+0x74>)
 8001656:	2228      	movs	r2, #40	; 0x28
 8001658:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_SPI1_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_SPI1_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MX_SPI1_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_SPI1_Init+0x74>)
 800166e:	2207      	movs	r2, #7
 8001670:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_SPI1_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_SPI1_Init+0x74>)
 800167a:	2208      	movs	r2, #8
 800167c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_SPI1_Init+0x74>)
 8001680:	f003 f8c8 	bl	8004814 <HAL_SPI_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800168a:	f7ff ff55 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000454 	.word	0x20000454
 8001698:	40013000 	.word	0x40013000

0800169c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <MX_SPI3_Init+0x74>)
 80016a2:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <MX_SPI3_Init+0x78>)
 80016a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <MX_SPI3_Init+0x74>)
 80016a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <MX_SPI3_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <MX_SPI3_Init+0x74>)
 80016b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016ba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_SPI3_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <MX_SPI3_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_SPI3_Init+0x74>)
 80016ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_SPI3_Init+0x74>)
 80016d2:	2220      	movs	r2, #32
 80016d4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_SPI3_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_SPI3_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_SPI3_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_SPI3_Init+0x74>)
 80016ea:	2207      	movs	r2, #7
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_SPI3_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_SPI3_Init+0x74>)
 80016f6:	2208      	movs	r2, #8
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_SPI3_Init+0x74>)
 80016fc:	f003 f88a 	bl	8004814 <HAL_SPI_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001706:	f7ff ff17 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200004b8 	.word	0x200004b8
 8001714:	40003c00 	.word	0x40003c00

08001718 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a2f      	ldr	r2, [pc, #188]	; (80017f4 <HAL_SPI_MspInit+0xdc>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d12a      	bne.n	8001790 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HAL_SPI_MspInit+0xe0>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173e:	4a2e      	ldr	r2, [pc, #184]	; (80017f8 <HAL_SPI_MspInit+0xe0>)
 8001740:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001744:	6613      	str	r3, [r2, #96]	; 0x60
 8001746:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <HAL_SPI_MspInit+0xe0>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174e:	61bb      	str	r3, [r7, #24]
 8001750:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <HAL_SPI_MspInit+0xe0>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <HAL_SPI_MspInit+0xe0>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_SPI_MspInit+0xe0>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800176a:	f641 0302 	movw	r3, #6146	; 0x1802
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800177c:	2305      	movs	r3, #5
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f001 fcc1 	bl	8003110 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800178e:	e02d      	b.n	80017ec <HAL_SPI_MspInit+0xd4>
  else if(spiHandle->Instance==SPI3)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a19      	ldr	r2, [pc, #100]	; (80017fc <HAL_SPI_MspInit+0xe4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d128      	bne.n	80017ec <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_SPI_MspInit+0xe0>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <HAL_SPI_MspInit+0xe0>)
 80017a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017a4:	6593      	str	r3, [r2, #88]	; 0x58
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <HAL_SPI_MspInit+0xe0>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_SPI_MspInit+0xe0>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <HAL_SPI_MspInit+0xe0>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <HAL_SPI_MspInit+0xe0>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017dc:	2306      	movs	r3, #6
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	4806      	ldr	r0, [pc, #24]	; (8001800 <HAL_SPI_MspInit+0xe8>)
 80017e8:	f001 fc92 	bl	8003110 <HAL_GPIO_Init>
}
 80017ec:	bf00      	nop
 80017ee:	3730      	adds	r7, #48	; 0x30
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40013000 	.word	0x40013000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40003c00 	.word	0x40003c00
 8001800:	48000800 	.word	0x48000800

08001804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_MspInit+0x44>)
 800180c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180e:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_MspInit+0x44>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6613      	str	r3, [r2, #96]	; 0x60
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_MspInit+0x44>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_MspInit+0x44>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <HAL_MspInit+0x44>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6593      	str	r3, [r2, #88]	; 0x58
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_MspInit+0x44>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <NMI_Handler+0x4>

08001852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <MemManage_Handler+0x4>

0800185e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <UsageFault_Handler+0x4>

0800186a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001898:	f001 f8fe 	bl	8002a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <DMA1_Channel6_IRQHandler+0x10>)
 80018a6:	f001 fb84 	bl	8002fb2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000063c 	.word	0x2000063c

080018b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <USART2_IRQHandler+0x10>)
 80018ba:	f004 fd3f 	bl	800633c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200005b8 	.word	0x200005b8

080018c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80018cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018d0:	f001 fdb0 	bl	8003434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return 1;
 80018dc:	2301      	movs	r3, #1
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_kill>:

int _kill(int pid, int sig)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018f2:	f006 f83b 	bl	800796c <__errno>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2216      	movs	r2, #22
 80018fa:	601a      	str	r2, [r3, #0]
  return -1;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_exit>:

void _exit (int status)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ffe7 	bl	80018e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800191a:	e7fe      	b.n	800191a <_exit+0x12>

0800191c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e00a      	b.n	8001944 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800192e:	f3af 8000 	nop.w
 8001932:	4601      	mov	r1, r0
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	60ba      	str	r2, [r7, #8]
 800193a:	b2ca      	uxtb	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	dbf0      	blt.n	800192e <_read+0x12>
  }

  return len;
 800194c:	687b      	ldr	r3, [r7, #4]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e009      	b.n	800197c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	60ba      	str	r2, [r7, #8]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	dbf1      	blt.n	8001968 <_write+0x12>
  }
  return len;
 8001984:	687b      	ldr	r3, [r7, #4]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_close>:

int _close(int file)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b6:	605a      	str	r2, [r3, #4]
  return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <_isatty>:

int _isatty(int file)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a00:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <_sbrk+0x5c>)
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <_sbrk+0x60>)
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_sbrk+0x64>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <_sbrk+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d207      	bcs.n	8001a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a28:	f005 ffa0 	bl	800796c <__errno>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	220c      	movs	r2, #12
 8001a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	e009      	b.n	8001a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <_sbrk+0x64>)
 8001a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20010000 	.word	0x20010000
 8001a58:	00000400 	.word	0x00000400
 8001a5c:	2000051c 	.word	0x2000051c
 8001a60:	200006a0 	.word	0x200006a0

08001a64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <SystemInit+0x20>)
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <SystemInit+0x20>)
 8001a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09a      	sub	sp, #104	; 0x68
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	615a      	str	r2, [r3, #20]
 8001aba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	222c      	movs	r2, #44	; 0x2c
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f005 ff84 	bl	80079d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ac8:	4b43      	ldr	r3, [pc, #268]	; (8001bd8 <MX_TIM1_Init+0x150>)
 8001aca:	4a44      	ldr	r2, [pc, #272]	; (8001bdc <MX_TIM1_Init+0x154>)
 8001acc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001ace:	4b42      	ldr	r3, [pc, #264]	; (8001bd8 <MX_TIM1_Init+0x150>)
 8001ad0:	224f      	movs	r2, #79	; 0x4f
 8001ad2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad4:	4b40      	ldr	r3, [pc, #256]	; (8001bd8 <MX_TIM1_Init+0x150>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500-1;
 8001ada:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <MX_TIM1_Init+0x150>)
 8001adc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001ae0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <MX_TIM1_Init+0x150>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ae8:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <MX_TIM1_Init+0x150>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aee:	4b3a      	ldr	r3, [pc, #232]	; (8001bd8 <MX_TIM1_Init+0x150>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001af4:	4838      	ldr	r0, [pc, #224]	; (8001bd8 <MX_TIM1_Init+0x150>)
 8001af6:	f003 faa7 	bl	8005048 <HAL_TIM_Base_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001b00:	f7ff fd1a 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b08:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4831      	ldr	r0, [pc, #196]	; (8001bd8 <MX_TIM1_Init+0x150>)
 8001b12:	f003 fd91 	bl	8005638 <HAL_TIM_ConfigClockSource>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001b1c:	f7ff fd0c 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b20:	482d      	ldr	r0, [pc, #180]	; (8001bd8 <MX_TIM1_Init+0x150>)
 8001b22:	f003 fb35 	bl	8005190 <HAL_TIM_PWM_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b2c:	f7ff fd04 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b40:	4619      	mov	r1, r3
 8001b42:	4825      	ldr	r0, [pc, #148]	; (8001bd8 <MX_TIM1_Init+0x150>)
 8001b44:	f004 f9e4 	bl	8005f10 <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001b4e:	f7ff fcf3 	bl	8001538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b52:	2360      	movs	r3, #96	; 0x60
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b72:	2204      	movs	r2, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	4818      	ldr	r0, [pc, #96]	; (8001bd8 <MX_TIM1_Init+0x150>)
 8001b78:	f003 fc4a 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001b82:	f7ff fcd9 	bl	8001538 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <MX_TIM1_Init+0x150>)
 8001bbc:	f004 fa0e 	bl	8005fdc <HAL_TIMEx_ConfigBreakDeadTime>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001bc6:	f7ff fcb7 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bca:	4803      	ldr	r0, [pc, #12]	; (8001bd8 <MX_TIM1_Init+0x150>)
 8001bcc:	f000 f8d4 	bl	8001d78 <HAL_TIM_MspPostInit>

}
 8001bd0:	bf00      	nop
 8001bd2:	3768      	adds	r7, #104	; 0x68
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000520 	.word	0x20000520
 8001bdc:	40012c00 	.word	0x40012c00

08001be0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08e      	sub	sp, #56	; 0x38
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c00:	463b      	mov	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]
 8001c0e:	615a      	str	r2, [r3, #20]
 8001c10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c12:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c1c:	224f      	movs	r2, #79	; 0x4f
 8001c1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001c26:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c28:	2263      	movs	r2, #99	; 0x63
 8001c2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c32:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c34:	2280      	movs	r2, #128	; 0x80
 8001c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c38:	4823      	ldr	r0, [pc, #140]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c3a:	f003 fa05 	bl	8005048 <HAL_TIM_Base_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c44:	f7ff fc78 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c52:	4619      	mov	r1, r3
 8001c54:	481c      	ldr	r0, [pc, #112]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c56:	f003 fcef 	bl	8005638 <HAL_TIM_ConfigClockSource>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c60:	f7ff fc6a 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c64:	4818      	ldr	r0, [pc, #96]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c66:	f003 fa93 	bl	8005190 <HAL_TIM_PWM_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c70:	f7ff fc62 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4619      	mov	r1, r3
 8001c82:	4811      	ldr	r0, [pc, #68]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c84:	f004 f944 	bl	8005f10 <HAL_TIMEx_MasterConfigSynchronization>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c8e:	f7ff fc53 	bl	8001538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c92:	2360      	movs	r3, #96	; 0x60
 8001c94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001caa:	f003 fbb1 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001cb4:	f7ff fc40 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cb8:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001cba:	f000 f85d 	bl	8001d78 <HAL_TIM_MspPostInit>

}
 8001cbe:	bf00      	nop
 8001cc0:	3738      	adds	r7, #56	; 0x38
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000056c 	.word	0x2000056c

08001ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a20      	ldr	r2, [pc, #128]	; (8001d6c <HAL_TIM_Base_MspInit+0xa0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10c      	bne.n	8001d08 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_TIM_Base_MspInit+0xa4>)
 8001cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf2:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_TIM_Base_MspInit+0xa4>)
 8001cf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_TIM_Base_MspInit+0xa4>)
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d06:	e02d      	b.n	8001d64 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d10:	d128      	bne.n	8001d64 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_TIM_Base_MspInit+0xa4>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	4a16      	ldr	r2, [pc, #88]	; (8001d70 <HAL_TIM_Base_MspInit+0xa4>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_TIM_Base_MspInit+0xa4>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_TIM_Base_MspInit+0xa4>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_TIM_Base_MspInit+0xa4>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_TIM_Base_MspInit+0xa4>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d54:	2301      	movs	r3, #1
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <HAL_TIM_Base_MspInit+0xa8>)
 8001d60:	f001 f9d6 	bl	8003110 <HAL_GPIO_Init>
}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	; 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40012c00 	.word	0x40012c00
 8001d70:	40021000 	.word	0x40021000
 8001d74:	48000400 	.word	0x48000400

08001d78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a23      	ldr	r2, [pc, #140]	; (8001e24 <HAL_TIM_MspPostInit+0xac>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d11e      	bne.n	8001dd8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_TIM_MspPostInit+0xb0>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <HAL_TIM_MspPostInit+0xb0>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_TIM_MspPostInit+0xb0>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 8001db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd2:	f001 f99d 	bl	8003110 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dd6:	e020      	b.n	8001e1a <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de0:	d11b      	bne.n	8001e1a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <HAL_TIM_MspPostInit+0xb0>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <HAL_TIM_MspPostInit+0xb0>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_TIM_MspPostInit+0xb0>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <HAL_TIM_MspPostInit+0xb4>)
 8001e16:	f001 f97b 	bl	8003110 <HAL_GPIO_Init>
}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	; 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40012c00 	.word	0x40012c00
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	48000400 	.word	0x48000400

08001e30 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MX_USART2_UART_Init+0x58>)
 8001e36:	4a15      	ldr	r2, [pc, #84]	; (8001e8c <MX_USART2_UART_Init+0x5c>)
 8001e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <MX_USART2_UART_Init+0x58>)
 8001e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_USART2_UART_Init+0x58>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <MX_USART2_UART_Init+0x58>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_USART2_UART_Init+0x58>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_USART2_UART_Init+0x58>)
 8001e56:	220c      	movs	r2, #12
 8001e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MX_USART2_UART_Init+0x58>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_USART2_UART_Init+0x58>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <MX_USART2_UART_Init+0x58>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_USART2_UART_Init+0x58>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_USART2_UART_Init+0x58>)
 8001e74:	f004 f92a 	bl	80060cc <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e7e:	f7ff fb5b 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200005b8 	.word	0x200005b8
 8001e8c:	40004400 	.word	0x40004400

08001e90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b0a2      	sub	sp, #136	; 0x88
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2260      	movs	r2, #96	; 0x60
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f005 fd8d 	bl	80079d0 <memset>
  if(uartHandle->Instance==USART2)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a38      	ldr	r2, [pc, #224]	; (8001f9c <HAL_UART_MspInit+0x10c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d169      	bne.n	8001f94 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f002 f965 	bl	800419c <HAL_RCCEx_PeriphCLKConfig>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ed8:	f7ff fb2e 	bl	8001538 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001edc:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_UART_MspInit+0x110>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <HAL_UART_MspInit+0x110>)
 8001ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_UART_MspInit+0x110>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <HAL_UART_MspInit+0x110>)
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef8:	4a29      	ldr	r2, [pc, #164]	; (8001fa0 <HAL_UART_MspInit+0x110>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f00:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <HAL_UART_MspInit+0x110>)
 8001f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f0c:	230c      	movs	r3, #12
 8001f0e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f1e:	2307      	movs	r3, #7
 8001f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2e:	f001 f8ef 	bl	8003110 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_UART_MspInit+0x114>)
 8001f34:	4a1c      	ldr	r2, [pc, #112]	; (8001fa8 <HAL_UART_MspInit+0x118>)
 8001f36:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_UART_MspInit+0x114>)
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f3e:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_UART_MspInit+0x114>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f44:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_UART_MspInit+0x114>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_UART_MspInit+0x114>)
 8001f4c:	2280      	movs	r2, #128	; 0x80
 8001f4e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_UART_MspInit+0x114>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_UART_MspInit+0x114>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_UART_MspInit+0x114>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_UART_MspInit+0x114>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f68:	480e      	ldr	r0, [pc, #56]	; (8001fa4 <HAL_UART_MspInit+0x114>)
 8001f6a:	f000 feeb 	bl	8002d44 <HAL_DMA_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001f74:	f7ff fae0 	bl	8001538 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <HAL_UART_MspInit+0x114>)
 8001f7c:	671a      	str	r2, [r3, #112]	; 0x70
 8001f7e:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_UART_MspInit+0x114>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	2026      	movs	r0, #38	; 0x26
 8001f8a:	f000 fea4 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f8e:	2026      	movs	r0, #38	; 0x26
 8001f90:	f000 febd 	bl	8002d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f94:	bf00      	nop
 8001f96:	3788      	adds	r7, #136	; 0x88
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40004400 	.word	0x40004400
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	2000063c 	.word	0x2000063c
 8001fa8:	4002006c 	.word	0x4002006c

08001fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb0:	f7ff fd58 	bl	8001a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb4:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fb6:	490d      	ldr	r1, [pc, #52]	; (8001fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ff0 <LoopForever+0xe>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fbc:	e002      	b.n	8001fc4 <LoopCopyDataInit>

08001fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc2:	3304      	adds	r3, #4

08001fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc8:	d3f9      	bcc.n	8001fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fcc:	4c0a      	ldr	r4, [pc, #40]	; (8001ff8 <LoopForever+0x16>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd0:	e001      	b.n	8001fd6 <LoopFillZerobss>

08001fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd4:	3204      	adds	r2, #4

08001fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd8:	d3fb      	bcc.n	8001fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fda:	f005 fccd 	bl	8007978 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fde:	f7ff f937 	bl	8001250 <main>

08001fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fe2:	e7fe      	b.n	8001fe2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fe4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fec:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001ff0:	0800b870 	.word	0x0800b870
  ldr r2, =_sbss
 8001ff4:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001ff8:	2000069c 	.word	0x2000069c

08001ffc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC1_IRQHandler>

08001ffe <_ZN9movingAvgC1Ei>:
#define MOVINGAVG_H_INCLUDED

class movingAvg
{
    public:
        movingAvg(int interval)
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
            : m_interval{interval}, m_nbrReadings{0}, m_sum{0}, m_next{0} {}
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>:

// TODO: Test this class with the old code, remember to create backup beforehand!
// I'm very suspicious of the way I handled user defined pointers...

// The motor will not move until begin() is called!
RoverArmMotor::RoverArmMotor(SPI_HandleTypeDef* spi_handle, Pin pwm_pin, Pin dir_pin, Pin encoder_pin, int esc_type, double minimum_angle, double maximum_angle, Pin brake_pin)
 800202e:	b082      	sub	sp, #8
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af02      	add	r7, sp, #8
 8002036:	6178      	str	r0, [r7, #20]
 8002038:	6139      	str	r1, [r7, #16]
 800203a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800203e:	e881 000c 	stmia.w	r1, {r2, r3}
 8002042:	ed87 0b02 	vstr	d0, [r7, #8]
 8002046:	ed87 1b00 	vstr	d1, [r7]
                :internalPIDInstance(&input, &output, &setpoint, regularKp, regularKi, regularKd, _PID_CD_DIRECT)
                ,internalAveragerInstance(15){
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8002070:	2300      	movs	r3, #0
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	eeb0 2a45 	vmov.f32	s4, s10
 8002078:	eef0 2a65 	vmov.f32	s5, s11
 800207c:	eeb0 1a46 	vmov.f32	s2, s12
 8002080:	eef0 1a66 	vmov.f32	s3, s13
 8002084:	eeb0 0a47 	vmov.f32	s0, s14
 8002088:	eef0 0a67 	vmov.f32	s1, s15
 800208c:	4623      	mov	r3, r4
 800208e:	f000 fabb 	bl	8002608 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3370      	adds	r3, #112	; 0x70
 8002096:	210f      	movs	r1, #15
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ffb0 	bl	8001ffe <_ZN9movingAvgC1Ei>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	33b8      	adds	r3, #184	; 0xb8
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe ffea 	bl	800107c <_ZN3PinC1Ev>
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	33c8      	adds	r3, #200	; 0xc8
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe ffe5 	bl	800107c <_ZN3PinC1Ev>
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	33d8      	adds	r3, #216	; 0xd8
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe ffe0 	bl	800107c <_ZN3PinC1Ev>
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	33e8      	adds	r3, #232	; 0xe8
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe ffdb 	bl	800107c <_ZN3PinC1Ev>

    //constructor
    spi = spi_handle;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    pwm = pwm_pin;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80020d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    dir = dir_pin;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80020e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    encoder = encoder_pin;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80020f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    brake = brake_pin;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8002104:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800210a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    escType = esc_type;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002112:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    lowestAngle = minimum_angle;
 8002116:	6979      	ldr	r1, [r7, #20]
 8002118:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800211c:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = maximum_angle;
 8002120:	6979      	ldr	r1, [r7, #20]
 8002122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002126:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108

    //clean up variables
    input = 0;
 800212a:	6979      	ldr	r1, [r7, #20]
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
    output = 0;
 8002138:	6979      	ldr	r1, [r7, #20]
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
    lastAngle = 0;
 8002146:	6979      	ldr	r1, [r7, #20]
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    sw_angle = 1;  //use software angle
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2201      	movs	r2, #1
 8002158:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    zero_angle_sw = 0;  //mn297
 800215c:	6979      	ldr	r1, [r7, #20]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
    
}
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	4618      	mov	r0, r3
 800216e:	371c      	adds	r7, #28
 8002170:	46bd      	mov	sp, r7
 8002172:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002176:	b002      	add	sp, #8
 8002178:	4770      	bx	lr
 800217a:	0000      	movs	r0, r0
 800217c:	0000      	movs	r0, r0
	...

08002180 <_ZN13RoverArmMotor5beginEdddddd>:

void RoverArmMotor::begin(double aggP, double aggI, double aggD, double regP, double regI, double regD){
 8002180:	b580      	push	{r7, lr}
 8002182:	b08e      	sub	sp, #56	; 0x38
 8002184:	af00      	add	r7, sp, #0
 8002186:	6378      	str	r0, [r7, #52]	; 0x34
 8002188:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800218c:	ed87 1b08 	vstr	d1, [r7, #32]
 8002190:	ed87 2b06 	vstr	d2, [r7, #24]
 8002194:	ed87 3b04 	vstr	d3, [r7, #16]
 8002198:	ed87 4b02 	vstr	d4, [r7, #8]
 800219c:	ed87 5b00 	vstr	d5, [r7]
    /*------------------Initialize pins------------------*/ 
    // Initialize given pins
    // pinMode(encoder, INPUT); // not needed since we use HAL library
    // pinMode(pwm, OUTPUT);

    if(escType == CYTRON){
 80021a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d107      	bne.n	80021ba <_ZN13RoverArmMotor5beginEdddddd+0x3a>
        // pinMode(dir, OUTPUT); // not needed since we use HAL library

        // Allow negative outputs, the sign will be interpreted as
        // the direction pin
        internalPIDInstance.SetOutputLimits(5, 99); // PWM duty cycle mn297 TOOD: check this
 80021aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ac:	ed9f 1b38 	vldr	d1, [pc, #224]	; 8002290 <_ZN13RoverArmMotor5beginEdddddd+0x110>
 80021b0:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8002298 <_ZN13RoverArmMotor5beginEdddddd+0x118>
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 faa2 	bl	80026fe <_ZN3PID15SetOutputLimitsEdd>
    //     // internalServoInstance.attach(pwm);
    //     internalServoInstance.attach(pwm, 1100, 1900, 1500); // mn297
    // }
    
    /*------------------Initialize moving average------------------*/
    internalAveragerInstance.begin();
 80021ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021bc:	3370      	adds	r3, #112	; 0x70
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f9bd 	bl	800253e <_ZN9movingAvg5beginEv>

    /*------------------Initialize PID------------------*/
    internalPIDInstance.Init();
 80021c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fa41 	bl	800264e <_ZN3PID4InitEv>
    internalPIDInstance.SetMode(_PID_MODE_AUTOMATIC);
 80021cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ce:	2101      	movs	r1, #1
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fa76 	bl	80026c2 <_ZN3PID7SetModeE15PIDMode_TypeDef>
    /*------------------Get setpoint------------------*/
    // Get current location and set it as setpoint. Essential to prevent jerkiness
    // as the microcontroller initializes.
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    //after setup, currentAngle is same as setpoint
    currentAngle = get_current_angle();    // fix setpoint not equal to current angle
 80021d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021d8:	f000 f8c6 	bl	8002368 <_ZN13RoverArmMotor17get_current_angleEv>
 80021dc:	eeb0 7a40 	vmov.f32	s14, s0
 80021e0:	eef0 7a60 	vmov.f32	s15, s1
 80021e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e6:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    setpoint = currentAngle;
 80021ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ec:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80021f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021f2:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140



    /*------------------Set PID parameters------------------*/
    regularKp = regP;
 80021f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021fc:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    regularKi = regI;
 8002200:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002202:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002206:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    regularKd = regD;
 800220a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800220c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002210:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    aggressiveKp = aggP;
 8002214:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002216:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800221a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    aggressiveKi = aggI;
 800221e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002220:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002224:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    aggressiveKd = aggD;
 8002228:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800222a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800222e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

    internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 8002232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002236:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800223a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223c:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002242:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8002246:	eeb0 2a45 	vmov.f32	s4, s10
 800224a:	eef0 2a65 	vmov.f32	s5, s11
 800224e:	eeb0 1a46 	vmov.f32	s2, s12
 8002252:	eef0 1a66 	vmov.f32	s3, s13
 8002256:	eeb0 0a47 	vmov.f32	s0, s14
 800225a:	eef0 0a67 	vmov.f32	s1, s15
 800225e:	4610      	mov	r0, r2
 8002260:	f000 fabb 	bl	80027da <_ZN3PID10SetTuningsEddd>
    // if(brake)  engageBrake(); //use brake if there is one
    if (brake.valid != 0)  engageBrake(); //use brake if there is one
 8002264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002266:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <_ZN13RoverArmMotor5beginEdddddd+0xf4>
 800226e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002270:	f000 f862 	bl	8002338 <_ZN13RoverArmMotor11engageBrakeEv>

    //initialize the multiplier bool to false and the multiplier to 1. 
    wrist_waist = false; 
 8002274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    //multiplier = 1;
    gearRatio = 1;  //TODO check if this is correct
 800227c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <_ZN13RoverArmMotor5beginEdddddd+0x120>)
 8002284:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150

}
 8002288:	bf00      	nop
 800228a:	3738      	adds	r7, #56	; 0x38
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	00000000 	.word	0x00000000
 8002294:	4058c000 	.word	0x4058c000
 8002298:	00000000 	.word	0x00000000
 800229c:	40140000 	.word	0x40140000
 80022a0:	3ff00000 	.word	0x3ff00000

080022a4 <_ZN13RoverArmMotor14setAngleLimitsEdd>:

// void RoverArmMotor::setGearRatio(double ratio){
//     gearRatio = ratio;
// }

void RoverArmMotor::setAngleLimits(double lowest, double highest){
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6178      	str	r0, [r7, #20]
 80022ac:	ed87 0b02 	vstr	d0, [r7, #8]
 80022b0:	ed87 1b00 	vstr	d1, [r7]
    lowestAngle = lowest * gearRatio;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 80022ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022be:	f7fe f99b 	bl	80005f8 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	6979      	ldr	r1, [r7, #20]
 80022c8:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = highest * gearRatio;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 80022d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022d6:	f7fe f98f 	bl	80005f8 <__aeabi_dmul>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	6979      	ldr	r1, [r7, #20]
 80022e0:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
}
 80022e4:	bf00      	nop
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_ZN13RoverArmMotor13reset_encoderEv>:

void RoverArmMotor::set_zero_angle(){
    setZeroSPI(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
}
void RoverArmMotor::reset_encoder(){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    resetAMT22(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 8002306:	2300      	movs	r3, #0
 8002308:	f005 fac9 	bl	800789e <resetAMT22>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <_ZN13RoverArmMotor17set_zero_angle_swEv>:
void RoverArmMotor::set_zero_angle_sw(){
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    zero_angle_sw = this->get_current_angle();
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f823 	bl	8002368 <_ZN13RoverArmMotor17get_current_angleEv>
 8002322:	eeb0 7a40 	vmov.f32	s14, s0
 8002326:	eef0 7a60 	vmov.f32	s15, s1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160
}  //mn297 software zero angle
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <_ZN13RoverArmMotor11engageBrakeEv>:
    //   digitalWrite(brake, LOW);  
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_RESET); //mn297
    }
}

void RoverArmMotor::engageBrake(){
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    if(brake.valid != 0){
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <_ZN13RoverArmMotor11engageBrakeEv+0x26>
    //    digitalWrite(brake, HIGH); 
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_SET); //mn297
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8002356:	2201      	movs	r2, #1
 8002358:	4619      	mov	r1, r3
 800235a:	f001 f853 	bl	8003404 <HAL_GPIO_WritePin>
    }
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <_ZN13RoverArmMotor17get_current_angleEv>:
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
    adcResult = internalAveragerInstance.reading(encoderData);  // implicit cast to int
    currentAngle = mapFloat((float) adcResult, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
    return currentAngle / gearRatio;
}
double RoverArmMotor::get_current_angle(){    //mn297
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af02      	add	r7, sp, #8
 800236e:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 8002382:	2300      	movs	r3, #0
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	230c      	movs	r3, #12
 8002388:	f005 f9f9 	bl	800777e <getPositionSPI>
 800238c:	4603      	mov	r3, r0
 800238e:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 8002390:	89fb      	ldrh	r3, [r7, #14]
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239a:	ed9f 2a13 	vldr	s4, [pc, #76]	; 80023e8 <_ZN13RoverArmMotor17get_current_angleEv+0x80>
 800239e:	eddf 1a13 	vldr	s3, [pc, #76]	; 80023ec <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 80023a2:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80023f0 <_ZN13RoverArmMotor17get_current_angleEv+0x88>
 80023a6:	eddf 0a11 	vldr	s1, [pc, #68]	; 80023ec <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 80023aa:	eeb0 0a67 	vmov.f32	s0, s15
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f88a 	bl	80024c8 <_ZN13RoverArmMotor8mapFloatEfffff>
 80023b4:	eeb0 7a40 	vmov.f32	s14, s0
 80023b8:	eef0 7a60 	vmov.f32	s15, s1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    return currentAngle / gearRatio;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80023ce:	f7fe fa3d 	bl	800084c <__aeabi_ddiv>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	ec43 2b17 	vmov	d7, r2, r3
}
 80023da:	eeb0 0a47 	vmov.f32	s0, s14
 80023de:	eef0 0a67 	vmov.f32	s1, s15
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	43b38000 	.word	0x43b38000
 80023ec:	00000000 	.word	0x00000000
 80023f0:	457ff000 	.word	0x457ff000

080023f4 <_ZN13RoverArmMotor20get_current_angle_swEv>:
double RoverArmMotor::get_current_angle_sw(){    //TODO mn297
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 800240e:	2300      	movs	r3, #0
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	230c      	movs	r3, #12
 8002414:	f005 f9b3 	bl	800777e <getPositionSPI>
 8002418:	4603      	mov	r3, r0
 800241a:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 800241c:	89fb      	ldrh	r3, [r7, #14]
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002426:	ed9f 2a24 	vldr	s4, [pc, #144]	; 80024b8 <_ZN13RoverArmMotor20get_current_angle_swEv+0xc4>
 800242a:	eddf 1a24 	vldr	s3, [pc, #144]	; 80024bc <_ZN13RoverArmMotor20get_current_angle_swEv+0xc8>
 800242e:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80024c0 <_ZN13RoverArmMotor20get_current_angle_swEv+0xcc>
 8002432:	eddf 0a22 	vldr	s1, [pc, #136]	; 80024bc <_ZN13RoverArmMotor20get_current_angle_swEv+0xc8>
 8002436:	eeb0 0a67 	vmov.f32	s0, s15
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f844 	bl	80024c8 <_ZN13RoverArmMotor8mapFloatEfffff>
 8002440:	eeb0 7a40 	vmov.f32	s14, s0
 8002444:	eef0 7a60 	vmov.f32	s15, s1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    
    double diff = currentAngle - zero_angle_sw;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 800245a:	f7fd ff15 	bl	8000288 <__aeabi_dsub>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if(diff < 0) diff += 360;
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002472:	f7fe fb33 	bl	8000adc <__aeabi_dcmplt>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <_ZN13RoverArmMotor20get_current_angle_swEv+0x9e>
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <_ZN13RoverArmMotor20get_current_angle_swEv+0xd0>)
 8002482:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002486:	f7fd ff01 	bl	800028c <__adddf3>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return diff / gearRatio;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8002498:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800249c:	f7fe f9d6 	bl	800084c <__aeabi_ddiv>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	ec43 2b17 	vmov	d7, r2, r3
}
 80024a8:	eeb0 0a47 	vmov.f32	s0, s14
 80024ac:	eef0 0a67 	vmov.f32	s1, s15
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	43b38000 	.word	0x43b38000
 80024bc:	00000000 	.word	0x00000000
 80024c0:	457ff000 	.word	0x457ff000
 80024c4:	40768000 	.word	0x40768000

080024c8 <_ZN13RoverArmMotor8mapFloatEfffff>:

double RoverArmMotor::getCurrentOutput(){
    return output;
}

double RoverArmMotor::mapFloat(float x, float in_min, float in_max, float out_min, float out_max){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6178      	str	r0, [r7, #20]
 80024d0:	ed87 0a04 	vstr	s0, [r7, #16]
 80024d4:	edc7 0a03 	vstr	s1, [r7, #12]
 80024d8:	ed87 1a02 	vstr	s2, [r7, #8]
 80024dc:	edc7 1a01 	vstr	s3, [r7, #4]
 80024e0:	ed87 2a00 	vstr	s4, [r7]
    double result = ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 80024e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80024e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024f0:	edd7 6a00 	vldr	s13, [r7]
 80024f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80024f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024fc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002500:	ed97 7a02 	vldr	s14, [r7, #8]
 8002504:	edd7 7a03 	vldr	s15, [r7, #12]
 8002508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800250c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002510:	edd7 7a01 	vldr	s15, [r7, #4]
 8002514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002518:	ee17 0a90 	vmov	r0, s15
 800251c:	f7fe f814 	bl	8000548 <__aeabi_f2d>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result; 
 8002528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800252c:	ec43 2b17 	vmov	d7, r2, r3
    }
 8002530:	eeb0 0a47 	vmov.f32	s0, s14
 8002534:	eef0 0a67 	vmov.f32	s1, s15
 8002538:	3720      	adds	r7, #32
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <_ZN9movingAvg5beginEv>:

#include <movingAvg.h>

// initialize - allocate the interval array
void movingAvg::begin()
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
    m_readings = new int[m_interval];
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800254e:	4293      	cmp	r3, r2
 8002550:	d201      	bcs.n	8002556 <_ZN9movingAvg5beginEv+0x18>
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	e001      	b.n	800255a <_ZN9movingAvg5beginEv+0x1c>
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	4618      	mov	r0, r3
 800255c:	f005 f9e2 	bl	8007924 <_Znaj>
 8002560:	4603      	mov	r3, r0
 8002562:	461a      	mov	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	611a      	str	r2, [r3, #16]
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~ Constructor ~~~~~~~~~~~~~~~~ */
PID::PID() { }

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6278      	str	r0, [r7, #36]	; 0x24
 8002578:	6239      	str	r1, [r7, #32]
 800257a:	61fa      	str	r2, [r7, #28]
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002582:	ed87 1b02 	vstr	d1, [r7, #8]
 8002586:	ed87 2b00 	vstr	d2, [r7]
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_myOutput   = Output;
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	645a      	str	r2, [r3, #68]	; 0x44
	_myInput    = Input;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	6a3a      	ldr	r2, [r7, #32]
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
	_mySetpoint = Setpoint;
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	649a      	str	r2, [r3, #72]	; 0x48
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	2200      	movs	r2, #0
 80025a0:	705a      	strb	r2, [r3, #1]
	
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 80025a2:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80025f8 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x88>
 80025a6:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002600 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x90>
 80025aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025ac:	f000 f8a7 	bl	80026fe <_ZN3PID15SetOutputLimitsEdd>
	
	_sampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	2264      	movs	r2, #100	; 0x64
 80025b4:	609a      	str	r2, [r3, #8]
	
	PID::SetControllerDirection(ControllerDirection);
 80025b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025ba:	4619      	mov	r1, r3
 80025bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025be:	f000 f9cf 	bl	8002960 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>
	PID::SetTunings(Kp, Ki, Kd, POn);
 80025c2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80025c6:	4619      	mov	r1, r3
 80025c8:	ed97 2b00 	vldr	d2, [r7]
 80025cc:	ed97 1b02 	vldr	d1, [r7, #8]
 80025d0:	ed97 0b04 	vldr	d0, [r7, #16]
 80025d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025d6:	f000 f91b 	bl	8002810 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
	
	_lastTime = GetTime() - _sampleTime;
 80025da:	f000 fa71 	bl	8002ac0 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	1ad2      	subs	r2, r2, r3
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	605a      	str	r2, [r3, #4]
	
}
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	4618      	mov	r0, r3
 80025ee:	3728      	adds	r7, #40	; 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	f3af 8000 	nop.w
 80025f8:	00000000 	.word	0x00000000
 80025fc:	406fe000 	.word	0x406fe000
	...

08002608 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>:

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection) : PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection)
 8002608:	b580      	push	{r7, lr}
 800260a:	b08c      	sub	sp, #48	; 0x30
 800260c:	af02      	add	r7, sp, #8
 800260e:	6278      	str	r0, [r7, #36]	; 0x24
 8002610:	6239      	str	r1, [r7, #32]
 8002612:	61fa      	str	r2, [r7, #28]
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	ed87 0b04 	vstr	d0, [r7, #16]
 800261a:	ed87 1b02 	vstr	d1, [r7, #8]
 800261e:	ed87 2b00 	vstr	d2, [r7]
 8002622:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	2301      	movs	r3, #1
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	ed97 2b00 	vldr	d2, [r7]
 8002630:	ed97 1b02 	vldr	d1, [r7, #8]
 8002634:	ed97 0b04 	vldr	d0, [r7, #16]
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	6a39      	ldr	r1, [r7, #32]
 800263e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002640:	f7ff ff96 	bl	8002570 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>
{ }
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	4618      	mov	r0, r3
 8002648:	3728      	adds	r7, #40	; 0x28
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_ZN3PID4InitEv>:



/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	_lastInput = *_myInput;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (_outputSum > _outMax)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800267e:	f7fe fa4b 	bl	8000b18 <__aeabi_dcmpgt>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <_ZN3PID4InitEv+0x48>
	{
		_outputSum = _outMax;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		_outputSum = _outMin;
	}
	else { }	
	
}
 8002694:	e011      	b.n	80026ba <_ZN3PID4InitEv+0x6c>
	else if (_outputSum < _outMin)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80026a2:	f7fe fa1b 	bl	8000adc <__aeabi_dcmplt>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d100      	bne.n	80026ae <_ZN3PID4InitEv+0x60>
}
 80026ac:	e005      	b.n	80026ba <_ZN3PID4InitEv+0x6c>
		_outputSum = _outMin;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <_ZN3PID7SetModeE15PIDMode_TypeDef>:
	
}

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID::SetMode(PIDMode_TypeDef Mode)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !_inAuto)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d006      	beq.n	80026f0 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	785b      	ldrb	r3, [r3, #1]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
	{
		Init();
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffaf 	bl	800264e <_ZN3PID4InitEv>
	}
	
	_inAuto = (PIDMode_TypeDef)newAuto;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	705a      	strb	r2, [r3, #1]
	
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_ZN3PID15SetOutputLimitsEdd>:
	return _inAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(double Min, double Max)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	6178      	str	r0, [r7, #20]
 8002706:	ed87 0b02 	vstr	d0, [r7, #8]
 800270a:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800270e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002716:	f7fe f9f5 	bl	8000b04 <__aeabi_dcmpge>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d158      	bne.n	80027d2 <_ZN3PID15SetOutputLimitsEdd+0xd4>
	{
		return;
	}
	
	_outMin = Min;
 8002720:	6979      	ldr	r1, [r7, #20]
 8002722:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002726:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	_outMax = Max;
 800272a:	6979      	ldr	r1, [r7, #20]
 800272c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002730:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	785b      	ldrb	r3, [r3, #1]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d04b      	beq.n	80027d4 <_ZN3PID15SetOutputLimitsEdd+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800274a:	f7fe f9e5 	bl	8000b18 <__aeabi_dcmpgt>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <_ZN3PID15SetOutputLimitsEdd+0x66>
		{
			*_myOutput = _outMax;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800275e:	e9c1 2300 	strd	r2, r3, [r1]
 8002762:	e012      	b.n	800278a <_ZN3PID15SetOutputLimitsEdd+0x8c>
		}
		else if (*_myOutput < _outMin)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	e9d3 0100 	ldrd	r0, r1, [r3]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002772:	f7fe f9b3 	bl	8000adc <__aeabi_dcmplt>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <_ZN3PID15SetOutputLimitsEdd+0x8c>
		{
			*_myOutput = _outMin;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002786:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002796:	f7fe f9bf 	bl	8000b18 <__aeabi_dcmpgt>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d006      	beq.n	80027ae <_ZN3PID15SetOutputLimitsEdd+0xb0>
		{
			_outputSum = _outMax;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80027a6:	6979      	ldr	r1, [r7, #20]
 80027a8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80027ac:	e012      	b.n	80027d4 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		}
		else if (_outputSum < _outMin)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80027ba:	f7fe f98f 	bl	8000adc <__aeabi_dcmplt>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		{
			_outputSum = _outMin;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80027ca:	6979      	ldr	r1, [r7, #20]
 80027cc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80027d0:	e000      	b.n	80027d4 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		return;
 80027d2:	bf00      	nop
		}
		else { }
		
	}
	
}
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_ZN3PID10SetTuningsEddd>:

/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID::SetTunings(double Kp, double Ki, double Kd)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b088      	sub	sp, #32
 80027de:	af00      	add	r7, sp, #0
 80027e0:	61f8      	str	r0, [r7, #28]
 80027e2:	ed87 0b04 	vstr	d0, [r7, #16]
 80027e6:	ed87 1b02 	vstr	d1, [r7, #8]
 80027ea:	ed87 2b00 	vstr	d2, [r7]
	PID::SetTunings(Kp, Ki, Kd, _pOn);
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	789b      	ldrb	r3, [r3, #2]
 80027f2:	4619      	mov	r1, r3
 80027f4:	ed97 2b00 	vldr	d2, [r7]
 80027f8:	ed97 1b02 	vldr	d1, [r7, #8]
 80027fc:	ed97 0b04 	vldr	d0, [r7, #16]
 8002800:	69f8      	ldr	r0, [r7, #28]
 8002802:	f000 f805 	bl	8002810 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
}
 8002806:	bf00      	nop
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>:
void PID::SetTunings(double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	61f8      	str	r0, [r7, #28]
 8002818:	ed87 0b04 	vstr	d0, [r7, #16]
 800281c:	ed87 1b02 	vstr	d1, [r7, #8]
 8002820:	ed87 2b00 	vstr	d2, [r7]
 8002824:	460b      	mov	r3, r1
 8002826:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002834:	f7fe f952 	bl	8000adc <__aeabi_dcmplt>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 8089 	bne.w	8002952 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800284c:	f7fe f946 	bl	8000adc <__aeabi_dcmplt>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d17d      	bne.n	8002952 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002862:	f7fe f93b 	bl	8000adc <__aeabi_dcmplt>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d172      	bne.n	8002952 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	_pOn    = POn;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	7efa      	ldrb	r2, [r7, #27]
 8002870:	709a      	strb	r2, [r3, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002872:	7efb      	ldrb	r3, [r7, #27]
 8002874:	2b01      	cmp	r3, #1
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	701a      	strb	r2, [r3, #0]

	_dispKp = Kp;
 8002884:	69f9      	ldr	r1, [r7, #28]
 8002886:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800288a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_dispKi = Ki;
 800288e:	69f9      	ldr	r1, [r7, #28]
 8002890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002894:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_dispKd = Kd;
 8002898:	69f9      	ldr	r1, [r7, #28]
 800289a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800289e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)_sampleTime) / 1000;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fe2c 	bl	8000504 <__aeabi_ui2d>
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	4b2a      	ldr	r3, [pc, #168]	; (800295c <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x14c>)
 80028b2:	f7fd ffcb 	bl	800084c <__aeabi_ddiv>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	_kp = Kp;
 80028be:	69f9      	ldr	r1, [r7, #28]
 80028c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028c4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	_ki = Ki * SampleTimeInSec;
 80028c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028d0:	f7fd fe92 	bl	80005f8 <__aeabi_dmul>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	69f9      	ldr	r1, [r7, #28]
 80028da:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	_kd = Kd / SampleTimeInSec;
 80028de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028e6:	f7fd ffb1 	bl	800084c <__aeabi_ddiv>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	69f9      	ldr	r1, [r7, #28]
 80028f0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (_controllerDirection == _PID_CD_REVERSE)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	78db      	ldrb	r3, [r3, #3]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d12b      	bne.n	8002954 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
	{
		
		_kp = (0 - _kp);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002902:	f04f 0000 	mov.w	r0, #0
 8002906:	f04f 0100 	mov.w	r1, #0
 800290a:	f7fd fcbd 	bl	8000288 <__aeabi_dsub>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	69f9      	ldr	r1, [r7, #28]
 8002914:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800291e:	f04f 0000 	mov.w	r0, #0
 8002922:	f04f 0100 	mov.w	r1, #0
 8002926:	f7fd fcaf 	bl	8000288 <__aeabi_dsub>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	69f9      	ldr	r1, [r7, #28]
 8002930:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800293a:	f04f 0000 	mov.w	r0, #0
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	f7fd fca1 	bl	8000288 <__aeabi_dsub>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	69f9      	ldr	r1, [r7, #28]
 800294c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002950:	e000      	b.n	8002954 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
		return;
 8002952:	bf00      	nop
		
	}
	
}
 8002954:	3728      	adds	r7, #40	; 0x28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	408f4000 	.word	0x408f4000

08002960 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	785b      	ldrb	r3, [r3, #1]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d02e      	beq.n	80029d2 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	78db      	ldrb	r3, [r3, #3]
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	429a      	cmp	r2, r3
 800297c:	d029      	beq.n	80029d2 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
	{
		
		_kp = (0 - _kp);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002984:	f04f 0000 	mov.w	r0, #0
 8002988:	f04f 0100 	mov.w	r1, #0
 800298c:	f7fd fc7c 	bl	8000288 <__aeabi_dsub>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80029a0:	f04f 0000 	mov.w	r0, #0
 80029a4:	f04f 0100 	mov.w	r1, #0
 80029a8:	f7fd fc6e 	bl	8000288 <__aeabi_dsub>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80029bc:	f04f 0000 	mov.w	r0, #0
 80029c0:	f04f 0100 	mov.w	r1, #0
 80029c4:	f7fd fc60 	bl	8000288 <__aeabi_dsub>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	_controllerDirection = Direction;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	70da      	strb	r2, [r3, #3]
	
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ea:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <HAL_Init+0x3c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <HAL_Init+0x3c>)
 80029f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f6:	2003      	movs	r0, #3
 80029f8:	f000 f962 	bl	8002cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029fc:	2000      	movs	r0, #0
 80029fe:	f000 f80f 	bl	8002a20 <HAL_InitTick>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	71fb      	strb	r3, [r7, #7]
 8002a0c:	e001      	b.n	8002a12 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a0e:	f7fe fef9 	bl	8001804 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a12:	79fb      	ldrb	r3, [r7, #7]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40022000 	.word	0x40022000

08002a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a2c:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <HAL_InitTick+0x6c>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d023      	beq.n	8002a7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a34:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_InitTick+0x70>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <HAL_InitTick+0x6c>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f96d 	bl	8002d2a <HAL_SYSTICK_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10f      	bne.n	8002a76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b0f      	cmp	r3, #15
 8002a5a:	d809      	bhi.n	8002a70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	f000 f937 	bl	8002cd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a68:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <HAL_InitTick+0x74>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e007      	b.n	8002a80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
 8002a74:	e004      	b.n	8002a80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
 8002a7a:	e001      	b.n	8002a80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000038 	.word	0x20000038
 8002a90:	20000030 	.word	0x20000030
 8002a94:	20000034 	.word	0x20000034

08002a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_IncTick+0x20>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_IncTick+0x24>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	4a04      	ldr	r2, [pc, #16]	; (8002abc <HAL_IncTick+0x24>)
 8002aaa:	6013      	str	r3, [r2, #0]
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000038 	.word	0x20000038
 8002abc:	20000684 	.word	0x20000684

08002ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <HAL_GetTick+0x14>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	20000684 	.word	0x20000684

08002ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ae0:	f7ff ffee 	bl	8002ac0 <HAL_GetTick>
 8002ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d005      	beq.n	8002afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_Delay+0x44>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4413      	add	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002afe:	bf00      	nop
 8002b00:	f7ff ffde 	bl	8002ac0 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d8f7      	bhi.n	8002b00 <HAL_Delay+0x28>
  {
  }
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000038 	.word	0x20000038

08002b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <__NVIC_SetPriorityGrouping+0x44>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b52:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <__NVIC_SetPriorityGrouping+0x44>)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	60d3      	str	r3, [r2, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <__NVIC_GetPriorityGrouping+0x18>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	f003 0307 	and.w	r3, r3, #7
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	db0b      	blt.n	8002bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	f003 021f 	and.w	r2, r3, #31
 8002b9c:	4907      	ldr	r1, [pc, #28]	; (8002bbc <__NVIC_EnableIRQ+0x38>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8002baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	db0a      	blt.n	8002bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	490c      	ldr	r1, [pc, #48]	; (8002c0c <__NVIC_SetPriority+0x4c>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	0112      	lsls	r2, r2, #4
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	440b      	add	r3, r1
 8002be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be8:	e00a      	b.n	8002c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4908      	ldr	r1, [pc, #32]	; (8002c10 <__NVIC_SetPriority+0x50>)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	3b04      	subs	r3, #4
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	761a      	strb	r2, [r3, #24]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000e100 	.word	0xe000e100
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	bf28      	it	cs
 8002c32:	2304      	movcs	r3, #4
 8002c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d902      	bls.n	8002c44 <NVIC_EncodePriority+0x30>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3b03      	subs	r3, #3
 8002c42:	e000      	b.n	8002c46 <NVIC_EncodePriority+0x32>
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	401a      	ands	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43d9      	mvns	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	4313      	orrs	r3, r2
         );
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c8c:	d301      	bcc.n	8002c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00f      	b.n	8002cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <SysTick_Config+0x40>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9a:	210f      	movs	r1, #15
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	f7ff ff8e 	bl	8002bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <SysTick_Config+0x40>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002caa:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <SysTick_Config+0x40>)
 8002cac:	2207      	movs	r2, #7
 8002cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	e000e010 	.word	0xe000e010

08002cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ff29 	bl	8002b20 <__NVIC_SetPriorityGrouping>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce8:	f7ff ff3e 	bl	8002b68 <__NVIC_GetPriorityGrouping>
 8002cec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	6978      	ldr	r0, [r7, #20]
 8002cf4:	f7ff ff8e 	bl	8002c14 <NVIC_EncodePriority>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff5d 	bl	8002bc0 <__NVIC_SetPriority>
}
 8002d06:	bf00      	nop
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff31 	bl	8002b84 <__NVIC_EnableIRQ>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ffa2 	bl	8002c7c <SysTick_Config>
 8002d38:	4603      	mov	r3, r0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e098      	b.n	8002e88 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b4d      	ldr	r3, [pc, #308]	; (8002e94 <HAL_DMA_Init+0x150>)
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d80f      	bhi.n	8002d82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	4b4b      	ldr	r3, [pc, #300]	; (8002e98 <HAL_DMA_Init+0x154>)
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a4b      	ldr	r2, [pc, #300]	; (8002e9c <HAL_DMA_Init+0x158>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	009a      	lsls	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a48      	ldr	r2, [pc, #288]	; (8002ea0 <HAL_DMA_Init+0x15c>)
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d80:	e00e      	b.n	8002da0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b46      	ldr	r3, [pc, #280]	; (8002ea4 <HAL_DMA_Init+0x160>)
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4a43      	ldr	r2, [pc, #268]	; (8002e9c <HAL_DMA_Init+0x158>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	009a      	lsls	r2, r3, #2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a42      	ldr	r2, [pc, #264]	; (8002ea8 <HAL_DMA_Init+0x164>)
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dfa:	d039      	beq.n	8002e70 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	4a27      	ldr	r2, [pc, #156]	; (8002ea0 <HAL_DMA_Init+0x15c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d11a      	bne.n	8002e3c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e06:	4b29      	ldr	r3, [pc, #164]	; (8002eac <HAL_DMA_Init+0x168>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	f003 031c 	and.w	r3, r3, #28
 8002e12:	210f      	movs	r1, #15
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	4924      	ldr	r1, [pc, #144]	; (8002eac <HAL_DMA_Init+0x168>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <HAL_DMA_Init+0x168>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2c:	f003 031c 	and.w	r3, r3, #28
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	491d      	ldr	r1, [pc, #116]	; (8002eac <HAL_DMA_Init+0x168>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
 8002e3a:	e019      	b.n	8002e70 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <HAL_DMA_Init+0x16c>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e44:	f003 031c 	and.w	r3, r3, #28
 8002e48:	210f      	movs	r1, #15
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	4917      	ldr	r1, [pc, #92]	; (8002eb0 <HAL_DMA_Init+0x16c>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e56:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <HAL_DMA_Init+0x16c>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6859      	ldr	r1, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f003 031c 	and.w	r3, r3, #28
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	4911      	ldr	r1, [pc, #68]	; (8002eb0 <HAL_DMA_Init+0x16c>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	40020407 	.word	0x40020407
 8002e98:	bffdfff8 	.word	0xbffdfff8
 8002e9c:	cccccccd 	.word	0xcccccccd
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	bffdfbf8 	.word	0xbffdfbf8
 8002ea8:	40020400 	.word	0x40020400
 8002eac:	400200a8 	.word	0x400200a8
 8002eb0:	400204a8 	.word	0x400204a8

08002eb4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d008      	beq.n	8002ede <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2204      	movs	r2, #4
 8002ed0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e022      	b.n	8002f24 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 020e 	bic.w	r2, r2, #14
 8002eec:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f003 021c 	and.w	r2, r3, #28
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f10:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d005      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
 8002f52:	e029      	b.n	8002fa8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 020e 	bic.w	r2, r2, #14
 8002f62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	f003 021c 	and.w	r2, r3, #28
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	2101      	movs	r1, #1
 8002f82:	fa01 f202 	lsl.w	r2, r1, r2
 8002f86:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
    }
  }
  return status;
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f003 031c 	and.w	r3, r3, #28
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d026      	beq.n	800302c <HAL_DMA_IRQHandler+0x7a>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d021      	beq.n	800302c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d107      	bne.n	8003006 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0204 	bic.w	r2, r2, #4
 8003004:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f003 021c 	and.w	r2, r3, #28
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	2104      	movs	r1, #4
 8003014:	fa01 f202 	lsl.w	r2, r1, r2
 8003018:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	2b00      	cmp	r3, #0
 8003020:	d071      	beq.n	8003106 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800302a:	e06c      	b.n	8003106 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	f003 031c 	and.w	r3, r3, #28
 8003034:	2202      	movs	r2, #2
 8003036:	409a      	lsls	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d02e      	beq.n	800309e <HAL_DMA_IRQHandler+0xec>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d029      	beq.n	800309e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 020a 	bic.w	r2, r2, #10
 8003066:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	f003 021c 	and.w	r2, r3, #28
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	2102      	movs	r1, #2
 800307e:	fa01 f202 	lsl.w	r2, r1, r2
 8003082:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d038      	beq.n	8003106 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800309c:	e033      	b.n	8003106 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	f003 031c 	and.w	r3, r3, #28
 80030a6:	2208      	movs	r2, #8
 80030a8:	409a      	lsls	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02a      	beq.n	8003108 <HAL_DMA_IRQHandler+0x156>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d025      	beq.n	8003108 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 020e 	bic.w	r2, r2, #14
 80030ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d0:	f003 021c 	and.w	r2, r3, #28
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	2101      	movs	r1, #1
 80030da:	fa01 f202 	lsl.w	r2, r1, r2
 80030de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003106:	bf00      	nop
 8003108:	bf00      	nop
}
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311e:	e154      	b.n	80033ca <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	2101      	movs	r1, #1
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8146 	beq.w	80033c4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d005      	beq.n	8003150 <HAL_GPIO_Init+0x40>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d130      	bne.n	80031b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4013      	ands	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003186:	2201      	movs	r2, #1
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 0201 	and.w	r2, r3, #1
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d017      	beq.n	80031ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	2203      	movs	r2, #3
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d123      	bne.n	8003242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	08da      	lsrs	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3208      	adds	r2, #8
 8003202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	220f      	movs	r2, #15
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	08da      	lsrs	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3208      	adds	r2, #8
 800323c:	6939      	ldr	r1, [r7, #16]
 800323e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	2203      	movs	r2, #3
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 0203 	and.w	r2, r3, #3
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80a0 	beq.w	80033c4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003284:	4b58      	ldr	r3, [pc, #352]	; (80033e8 <HAL_GPIO_Init+0x2d8>)
 8003286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003288:	4a57      	ldr	r2, [pc, #348]	; (80033e8 <HAL_GPIO_Init+0x2d8>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	6613      	str	r3, [r2, #96]	; 0x60
 8003290:	4b55      	ldr	r3, [pc, #340]	; (80033e8 <HAL_GPIO_Init+0x2d8>)
 8003292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800329c:	4a53      	ldr	r2, [pc, #332]	; (80033ec <HAL_GPIO_Init+0x2dc>)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	089b      	lsrs	r3, r3, #2
 80032a2:	3302      	adds	r3, #2
 80032a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	220f      	movs	r2, #15
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032c6:	d019      	beq.n	80032fc <HAL_GPIO_Init+0x1ec>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a49      	ldr	r2, [pc, #292]	; (80033f0 <HAL_GPIO_Init+0x2e0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <HAL_GPIO_Init+0x1e8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a48      	ldr	r2, [pc, #288]	; (80033f4 <HAL_GPIO_Init+0x2e4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00d      	beq.n	80032f4 <HAL_GPIO_Init+0x1e4>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a47      	ldr	r2, [pc, #284]	; (80033f8 <HAL_GPIO_Init+0x2e8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d007      	beq.n	80032f0 <HAL_GPIO_Init+0x1e0>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a46      	ldr	r2, [pc, #280]	; (80033fc <HAL_GPIO_Init+0x2ec>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d101      	bne.n	80032ec <HAL_GPIO_Init+0x1dc>
 80032e8:	2304      	movs	r3, #4
 80032ea:	e008      	b.n	80032fe <HAL_GPIO_Init+0x1ee>
 80032ec:	2307      	movs	r3, #7
 80032ee:	e006      	b.n	80032fe <HAL_GPIO_Init+0x1ee>
 80032f0:	2303      	movs	r3, #3
 80032f2:	e004      	b.n	80032fe <HAL_GPIO_Init+0x1ee>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e002      	b.n	80032fe <HAL_GPIO_Init+0x1ee>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <HAL_GPIO_Init+0x1ee>
 80032fc:	2300      	movs	r3, #0
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	f002 0203 	and.w	r2, r2, #3
 8003304:	0092      	lsls	r2, r2, #2
 8003306:	4093      	lsls	r3, r2
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800330e:	4937      	ldr	r1, [pc, #220]	; (80033ec <HAL_GPIO_Init+0x2dc>)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	089b      	lsrs	r3, r3, #2
 8003314:	3302      	adds	r3, #2
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800331c:	4b38      	ldr	r3, [pc, #224]	; (8003400 <HAL_GPIO_Init+0x2f0>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	43db      	mvns	r3, r3
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4013      	ands	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003340:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <HAL_GPIO_Init+0x2f0>)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003346:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <HAL_GPIO_Init+0x2f0>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	43db      	mvns	r3, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800336a:	4a25      	ldr	r2, [pc, #148]	; (8003400 <HAL_GPIO_Init+0x2f0>)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003370:	4b23      	ldr	r3, [pc, #140]	; (8003400 <HAL_GPIO_Init+0x2f0>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	43db      	mvns	r3, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4013      	ands	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003394:	4a1a      	ldr	r2, [pc, #104]	; (8003400 <HAL_GPIO_Init+0x2f0>)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800339a:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_GPIO_Init+0x2f0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033be:	4a10      	ldr	r2, [pc, #64]	; (8003400 <HAL_GPIO_Init+0x2f0>)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3301      	adds	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f47f aea3 	bne.w	8003120 <HAL_GPIO_Init+0x10>
  }
}
 80033da:	bf00      	nop
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40010000 	.word	0x40010000
 80033f0:	48000400 	.word	0x48000400
 80033f4:	48000800 	.word	0x48000800
 80033f8:	48000c00 	.word	0x48000c00
 80033fc:	48001000 	.word	0x48001000
 8003400:	40010400 	.word	0x40010400

08003404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
 8003410:	4613      	mov	r3, r2
 8003412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003414:	787b      	ldrb	r3, [r7, #1]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003420:	e002      	b.n	8003428 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003422:	887a      	ldrh	r2, [r7, #2]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800343e:	4b08      	ldr	r3, [pc, #32]	; (8003460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d006      	beq.n	8003458 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800344a:	4a05      	ldr	r2, [pc, #20]	; (8003460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe f806 	bl	8001464 <HAL_GPIO_EXTI_Callback>
  }
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40010400 	.word	0x40010400

08003464 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <HAL_PWREx_GetVoltageRange+0x18>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40007000 	.word	0x40007000

08003480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348e:	d130      	bne.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003490:	4b23      	ldr	r3, [pc, #140]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800349c:	d038      	beq.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800349e:	4b20      	ldr	r3, [pc, #128]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034ae:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2232      	movs	r2, #50	; 0x32
 80034b4:	fb02 f303 	mul.w	r3, r2, r3
 80034b8:	4a1b      	ldr	r2, [pc, #108]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	0c9b      	lsrs	r3, r3, #18
 80034c0:	3301      	adds	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c4:	e002      	b.n	80034cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d8:	d102      	bne.n	80034e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f2      	bne.n	80034c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ec:	d110      	bne.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e00f      	b.n	8003512 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fe:	d007      	beq.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003500:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003508:	4a05      	ldr	r2, [pc, #20]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800350e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40007000 	.word	0x40007000
 8003524:	20000030 	.word	0x20000030
 8003528:	431bde83 	.word	0x431bde83

0800352c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f000 bc02 	b.w	8003d44 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003540:	4b96      	ldr	r3, [pc, #600]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800354a:	4b94      	ldr	r3, [pc, #592]	; (800379c <HAL_RCC_OscConfig+0x270>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80e4 	beq.w	800372a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <HAL_RCC_OscConfig+0x4c>
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b0c      	cmp	r3, #12
 800356c:	f040 808b 	bne.w	8003686 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b01      	cmp	r3, #1
 8003574:	f040 8087 	bne.w	8003686 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003578:	4b88      	ldr	r3, [pc, #544]	; (800379c <HAL_RCC_OscConfig+0x270>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_OscConfig+0x64>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e3d9      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1a      	ldr	r2, [r3, #32]
 8003594:	4b81      	ldr	r3, [pc, #516]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <HAL_RCC_OscConfig+0x7e>
 80035a0:	4b7e      	ldr	r3, [pc, #504]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a8:	e005      	b.n	80035b6 <HAL_RCC_OscConfig+0x8a>
 80035aa:	4b7c      	ldr	r3, [pc, #496]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d223      	bcs.n	8003602 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fd8c 	bl	80040dc <RCC_SetFlashLatencyFromMSIRange>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e3ba      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ce:	4b73      	ldr	r3, [pc, #460]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a72      	ldr	r2, [pc, #456]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035d4:	f043 0308 	orr.w	r3, r3, #8
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b70      	ldr	r3, [pc, #448]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	496d      	ldr	r1, [pc, #436]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ec:	4b6b      	ldr	r3, [pc, #428]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	4968      	ldr	r1, [pc, #416]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]
 8003600:	e025      	b.n	800364e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003602:	4b66      	ldr	r3, [pc, #408]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a65      	ldr	r2, [pc, #404]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003608:	f043 0308 	orr.w	r3, r3, #8
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b63      	ldr	r3, [pc, #396]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4960      	ldr	r1, [pc, #384]	; (800379c <HAL_RCC_OscConfig+0x270>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003620:	4b5e      	ldr	r3, [pc, #376]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	495b      	ldr	r1, [pc, #364]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fd4c 	bl	80040dc <RCC_SetFlashLatencyFromMSIRange>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e37a      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800364e:	f000 fc81 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8003652:	4602      	mov	r2, r0
 8003654:	4b51      	ldr	r3, [pc, #324]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	4950      	ldr	r1, [pc, #320]	; (80037a0 <HAL_RCC_OscConfig+0x274>)
 8003660:	5ccb      	ldrb	r3, [r1, r3]
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	fa22 f303 	lsr.w	r3, r2, r3
 800366a:	4a4e      	ldr	r2, [pc, #312]	; (80037a4 <HAL_RCC_OscConfig+0x278>)
 800366c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800366e:	4b4e      	ldr	r3, [pc, #312]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff f9d4 	bl	8002a20 <HAL_InitTick>
 8003678:	4603      	mov	r3, r0
 800367a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d052      	beq.n	8003728 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	e35e      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d032      	beq.n	80036f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800368e:	4b43      	ldr	r3, [pc, #268]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a42      	ldr	r2, [pc, #264]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800369a:	f7ff fa11 	bl	8002ac0 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036a2:	f7ff fa0d 	bl	8002ac0 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e347      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036b4:	4b39      	ldr	r3, [pc, #228]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036c0:	4b36      	ldr	r3, [pc, #216]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a35      	ldr	r2, [pc, #212]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036c6:	f043 0308 	orr.w	r3, r3, #8
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	4b33      	ldr	r3, [pc, #204]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4930      	ldr	r1, [pc, #192]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036de:	4b2f      	ldr	r3, [pc, #188]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	492b      	ldr	r1, [pc, #172]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
 80036f2:	e01a      	b.n	800372a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036f4:	4b29      	ldr	r3, [pc, #164]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a28      	ldr	r2, [pc, #160]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003700:	f7ff f9de 	bl	8002ac0 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003708:	f7ff f9da 	bl	8002ac0 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e314      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <HAL_RCC_OscConfig+0x270>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x1dc>
 8003726:	e000      	b.n	800372a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003728:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d073      	beq.n	800381e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d005      	beq.n	8003748 <HAL_RCC_OscConfig+0x21c>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d10e      	bne.n	8003760 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d10b      	bne.n	8003760 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	4b14      	ldr	r3, [pc, #80]	; (800379c <HAL_RCC_OscConfig+0x270>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d063      	beq.n	800381c <HAL_RCC_OscConfig+0x2f0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d15f      	bne.n	800381c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e2f1      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003768:	d106      	bne.n	8003778 <HAL_RCC_OscConfig+0x24c>
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <HAL_RCC_OscConfig+0x270>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a0b      	ldr	r2, [pc, #44]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e025      	b.n	80037c4 <HAL_RCC_OscConfig+0x298>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003780:	d114      	bne.n	80037ac <HAL_RCC_OscConfig+0x280>
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a05      	ldr	r2, [pc, #20]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b03      	ldr	r3, [pc, #12]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a02      	ldr	r2, [pc, #8]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e013      	b.n	80037c4 <HAL_RCC_OscConfig+0x298>
 800379c:	40021000 	.word	0x40021000
 80037a0:	0800ada0 	.word	0x0800ada0
 80037a4:	20000030 	.word	0x20000030
 80037a8:	20000034 	.word	0x20000034
 80037ac:	4ba0      	ldr	r3, [pc, #640]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a9f      	ldr	r2, [pc, #636]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80037b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b9d      	ldr	r3, [pc, #628]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a9c      	ldr	r2, [pc, #624]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80037be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7ff f978 	bl	8002ac0 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d4:	f7ff f974 	bl	8002ac0 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e2ae      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e6:	4b92      	ldr	r3, [pc, #584]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x2a8>
 80037f2:	e014      	b.n	800381e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7ff f964 	bl	8002ac0 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037fc:	f7ff f960 	bl	8002ac0 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e29a      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800380e:	4b88      	ldr	r3, [pc, #544]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x2d0>
 800381a:	e000      	b.n	800381e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d060      	beq.n	80038ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b04      	cmp	r3, #4
 800382e:	d005      	beq.n	800383c <HAL_RCC_OscConfig+0x310>
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b0c      	cmp	r3, #12
 8003834:	d119      	bne.n	800386a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d116      	bne.n	800386a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383c:	4b7c      	ldr	r3, [pc, #496]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_OscConfig+0x328>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e277      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	061b      	lsls	r3, r3, #24
 8003862:	4973      	ldr	r1, [pc, #460]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003868:	e040      	b.n	80038ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d023      	beq.n	80038ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003872:	4b6f      	ldr	r3, [pc, #444]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6e      	ldr	r2, [pc, #440]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7ff f91f 	bl	8002ac0 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003886:	f7ff f91b 	bl	8002ac0 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e255      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003898:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a4:	4b62      	ldr	r3, [pc, #392]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	061b      	lsls	r3, r3, #24
 80038b2:	495f      	ldr	r1, [pc, #380]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]
 80038b8:	e018      	b.n	80038ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ba:	4b5d      	ldr	r3, [pc, #372]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a5c      	ldr	r2, [pc, #368]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80038c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c6:	f7ff f8fb 	bl	8002ac0 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ce:	f7ff f8f7 	bl	8002ac0 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e231      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f0      	bne.n	80038ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d03c      	beq.n	8003972 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01c      	beq.n	800393a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003900:	4b4b      	ldr	r3, [pc, #300]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003906:	4a4a      	ldr	r2, [pc, #296]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7ff f8d6 	bl	8002ac0 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003918:	f7ff f8d2 	bl	8002ac0 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e20c      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 800392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0ef      	beq.n	8003918 <HAL_RCC_OscConfig+0x3ec>
 8003938:	e01b      	b.n	8003972 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800393a:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 800393c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003940:	4a3b      	ldr	r2, [pc, #236]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394a:	f7ff f8b9 	bl	8002ac0 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003952:	f7ff f8b5 	bl	8002ac0 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e1ef      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003964:	4b32      	ldr	r3, [pc, #200]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1ef      	bne.n	8003952 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80a6 	beq.w	8003acc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003980:	2300      	movs	r3, #0
 8003982:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003984:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10d      	bne.n	80039ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003990:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	4a26      	ldr	r2, [pc, #152]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399a:	6593      	str	r3, [r2, #88]	; 0x58
 800399c:	4b24      	ldr	r3, [pc, #144]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a8:	2301      	movs	r3, #1
 80039aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ac:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <HAL_RCC_OscConfig+0x508>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d118      	bne.n	80039ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b8:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_RCC_OscConfig+0x508>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <HAL_RCC_OscConfig+0x508>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c4:	f7ff f87c 	bl	8002ac0 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039cc:	f7ff f878 	bl	8002ac0 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e1b2      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039de:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <HAL_RCC_OscConfig+0x508>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d108      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4d8>
 80039f2:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a02:	e029      	b.n	8003a58 <HAL_RCC_OscConfig+0x52c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d115      	bne.n	8003a38 <HAL_RCC_OscConfig+0x50c>
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003a14:	f043 0304 	orr.w	r3, r3, #4
 8003a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	4a03      	ldr	r2, [pc, #12]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a2c:	e014      	b.n	8003a58 <HAL_RCC_OscConfig+0x52c>
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40007000 	.word	0x40007000
 8003a38:	4b9a      	ldr	r3, [pc, #616]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	4a99      	ldr	r2, [pc, #612]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a48:	4b96      	ldr	r3, [pc, #600]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	4a95      	ldr	r2, [pc, #596]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d016      	beq.n	8003a8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7ff f82e 	bl	8002ac0 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a68:	f7ff f82a 	bl	8002ac0 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e162      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a7e:	4b89      	ldr	r3, [pc, #548]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0ed      	beq.n	8003a68 <HAL_RCC_OscConfig+0x53c>
 8003a8c:	e015      	b.n	8003aba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8e:	f7ff f817 	bl	8002ac0 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7ff f813 	bl	8002ac0 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e14b      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aac:	4b7d      	ldr	r3, [pc, #500]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1ed      	bne.n	8003a96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aba:	7ffb      	ldrb	r3, [r7, #31]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d105      	bne.n	8003acc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac0:	4b78      	ldr	r3, [pc, #480]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	4a77      	ldr	r2, [pc, #476]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d03c      	beq.n	8003b52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01c      	beq.n	8003b1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ae0:	4b70      	ldr	r3, [pc, #448]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae6:	4a6f      	ldr	r2, [pc, #444]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fe ffe6 	bl	8002ac0 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003af8:	f7fe ffe2 	bl	8002ac0 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e11c      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b0a:	4b66      	ldr	r3, [pc, #408]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ef      	beq.n	8003af8 <HAL_RCC_OscConfig+0x5cc>
 8003b18:	e01b      	b.n	8003b52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b1a:	4b62      	ldr	r3, [pc, #392]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b20:	4a60      	ldr	r2, [pc, #384]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2a:	f7fe ffc9 	bl	8002ac0 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b32:	f7fe ffc5 	bl	8002ac0 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e0ff      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b44:	4b57      	ldr	r3, [pc, #348]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1ef      	bne.n	8003b32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80f3 	beq.w	8003d42 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	f040 80c9 	bne.w	8003cf8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b66:	4b4f      	ldr	r3, [pc, #316]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f003 0203 	and.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d12c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	3b01      	subs	r3, #1
 8003b86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d123      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d113      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d109      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	085b      	lsrs	r3, r3, #1
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d06b      	beq.n	8003cac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b0c      	cmp	r3, #12
 8003bd8:	d062      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bda:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0ac      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bea:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bf6:	f7fe ff63 	bl	8002ac0 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfe:	f7fe ff5f 	bl	8002ac0 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e099      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c10:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f0      	bne.n	8003bfe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c1c:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	4b21      	ldr	r3, [pc, #132]	; (8003ca8 <HAL_RCC_OscConfig+0x77c>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c2c:	3a01      	subs	r2, #1
 8003c2e:	0112      	lsls	r2, r2, #4
 8003c30:	4311      	orrs	r1, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c36:	0212      	lsls	r2, r2, #8
 8003c38:	4311      	orrs	r1, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c3e:	0852      	lsrs	r2, r2, #1
 8003c40:	3a01      	subs	r2, #1
 8003c42:	0552      	lsls	r2, r2, #21
 8003c44:	4311      	orrs	r1, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c4a:	0852      	lsrs	r2, r2, #1
 8003c4c:	3a01      	subs	r2, #1
 8003c4e:	0652      	lsls	r2, r2, #25
 8003c50:	4311      	orrs	r1, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c56:	06d2      	lsls	r2, r2, #27
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	4912      	ldr	r1, [pc, #72]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c60:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0f      	ldr	r2, [pc, #60]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a0c      	ldr	r2, [pc, #48]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c78:	f7fe ff22 	bl	8002ac0 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fe ff1e 	bl	8002ac0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e058      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c92:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c9e:	e050      	b.n	8003d42 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e04f      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d144      	bne.n	8003d42 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cb8:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a23      	ldr	r2, [pc, #140]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cc4:	4b21      	ldr	r3, [pc, #132]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a20      	ldr	r2, [pc, #128]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cd0:	f7fe fef6 	bl	8002ac0 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fe fef2 	bl	8002ac0 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e02c      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cea:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x7ac>
 8003cf6:	e024      	b.n	8003d42 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2b0c      	cmp	r3, #12
 8003cfc:	d01f      	beq.n	8003d3e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfe:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a12      	ldr	r2, [pc, #72]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003d04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fe fed9 	bl	8002ac0 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d12:	f7fe fed5 	bl	8002ac0 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e00f      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f0      	bne.n	8003d12 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	4905      	ldr	r1, [pc, #20]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_RCC_OscConfig+0x824>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60cb      	str	r3, [r1, #12]
 8003d3c:	e001      	b.n	8003d42 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	feeefffc 	.word	0xfeeefffc

08003d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0e7      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d68:	4b75      	ldr	r3, [pc, #468]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d910      	bls.n	8003d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b72      	ldr	r3, [pc, #456]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f023 0207 	bic.w	r2, r3, #7
 8003d7e:	4970      	ldr	r1, [pc, #448]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d86:	4b6e      	ldr	r3, [pc, #440]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0cf      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d010      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	4b66      	ldr	r3, [pc, #408]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d908      	bls.n	8003dc6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db4:	4b63      	ldr	r3, [pc, #396]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4960      	ldr	r1, [pc, #384]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d04c      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d107      	bne.n	8003dea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dda:	4b5a      	ldr	r3, [pc, #360]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d121      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e0a6      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df2:	4b54      	ldr	r3, [pc, #336]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d115      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e09a      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d107      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e0a:	4b4e      	ldr	r3, [pc, #312]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e08e      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e1a:	4b4a      	ldr	r3, [pc, #296]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e086      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e2a:	4b46      	ldr	r3, [pc, #280]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 0203 	bic.w	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	4943      	ldr	r1, [pc, #268]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3c:	f7fe fe40 	bl	8002ac0 <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e44:	f7fe fe3c 	bl	8002ac0 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e06e      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	4b3a      	ldr	r3, [pc, #232]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 020c 	and.w	r2, r3, #12
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d1eb      	bne.n	8003e44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d010      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d208      	bcs.n	8003e9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e88:	4b2e      	ldr	r3, [pc, #184]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	492b      	ldr	r1, [pc, #172]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e9a:	4b29      	ldr	r3, [pc, #164]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d210      	bcs.n	8003eca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea8:	4b25      	ldr	r3, [pc, #148]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 0207 	bic.w	r2, r3, #7
 8003eb0:	4923      	ldr	r1, [pc, #140]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb8:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d001      	beq.n	8003eca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e036      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	4918      	ldr	r1, [pc, #96]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d009      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef4:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4910      	ldr	r1, [pc, #64]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f08:	f000 f824 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	490b      	ldr	r1, [pc, #44]	; (8003f48 <HAL_RCC_ClockConfig+0x1f4>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
 8003f24:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003f26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f28:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_RCC_ClockConfig+0x1fc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe fd77 	bl	8002a20 <HAL_InitTick>
 8003f32:	4603      	mov	r3, r0
 8003f34:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f36:	7afb      	ldrb	r3, [r7, #11]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40022000 	.word	0x40022000
 8003f44:	40021000 	.word	0x40021000
 8003f48:	0800ada0 	.word	0x0800ada0
 8003f4c:	20000030 	.word	0x20000030
 8003f50:	20000034 	.word	0x20000034

08003f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b089      	sub	sp, #36	; 0x24
 8003f58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f62:	4b3e      	ldr	r3, [pc, #248]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f6c:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x34>
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b0c      	cmp	r3, #12
 8003f80:	d121      	bne.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d11e      	bne.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f88:	4b34      	ldr	r3, [pc, #208]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d107      	bne.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f94:	4b31      	ldr	r3, [pc, #196]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f9a:	0a1b      	lsrs	r3, r3, #8
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	e005      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fa4:	4b2d      	ldr	r3, [pc, #180]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fb0:	4a2b      	ldr	r2, [pc, #172]	; (8004060 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10d      	bne.n	8003fdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d102      	bne.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fcc:	4b25      	ldr	r3, [pc, #148]	; (8004064 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fce:	61bb      	str	r3, [r7, #24]
 8003fd0:	e004      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d101      	bne.n	8003fdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fd8:	4b23      	ldr	r3, [pc, #140]	; (8004068 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d134      	bne.n	800404c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fe2:	4b1e      	ldr	r3, [pc, #120]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d003      	beq.n	8003ffa <HAL_RCC_GetSysClockFreq+0xa6>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d003      	beq.n	8004000 <HAL_RCC_GetSysClockFreq+0xac>
 8003ff8:	e005      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ffa:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ffc:	617b      	str	r3, [r7, #20]
      break;
 8003ffe:	e005      	b.n	800400c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004000:	4b19      	ldr	r3, [pc, #100]	; (8004068 <HAL_RCC_GetSysClockFreq+0x114>)
 8004002:	617b      	str	r3, [r7, #20]
      break;
 8004004:	e002      	b.n	800400c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	617b      	str	r3, [r7, #20]
      break;
 800400a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800400c:	4b13      	ldr	r3, [pc, #76]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	3301      	adds	r3, #1
 8004018:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800401a:	4b10      	ldr	r3, [pc, #64]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	fb03 f202 	mul.w	r2, r3, r2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	0e5b      	lsrs	r3, r3, #25
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	3301      	adds	r3, #1
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800404c:	69bb      	ldr	r3, [r7, #24]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3724      	adds	r7, #36	; 0x24
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40021000 	.word	0x40021000
 8004060:	0800adb8 	.word	0x0800adb8
 8004064:	00f42400 	.word	0x00f42400
 8004068:	007a1200 	.word	0x007a1200

0800406c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <HAL_RCC_GetHCLKFreq+0x14>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000030 	.word	0x20000030

08004084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004088:	f7ff fff0 	bl	800406c <HAL_RCC_GetHCLKFreq>
 800408c:	4602      	mov	r2, r0
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	0a1b      	lsrs	r3, r3, #8
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	4904      	ldr	r1, [pc, #16]	; (80040ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800409a:	5ccb      	ldrb	r3, [r1, r3]
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40021000 	.word	0x40021000
 80040ac:	0800adb0 	.word	0x0800adb0

080040b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040b4:	f7ff ffda 	bl	800406c <HAL_RCC_GetHCLKFreq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	0adb      	lsrs	r3, r3, #11
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	4904      	ldr	r1, [pc, #16]	; (80040d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040c6:	5ccb      	ldrb	r3, [r1, r3]
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40021000 	.word	0x40021000
 80040d8:	0800adb0 	.word	0x0800adb0

080040dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040e8:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040f4:	f7ff f9b6 	bl	8003464 <HAL_PWREx_GetVoltageRange>
 80040f8:	6178      	str	r0, [r7, #20]
 80040fa:	e014      	b.n	8004126 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040fc:	4b25      	ldr	r3, [pc, #148]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004100:	4a24      	ldr	r2, [pc, #144]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004106:	6593      	str	r3, [r2, #88]	; 0x58
 8004108:	4b22      	ldr	r3, [pc, #136]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004114:	f7ff f9a6 	bl	8003464 <HAL_PWREx_GetVoltageRange>
 8004118:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800411a:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411e:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004124:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412c:	d10b      	bne.n	8004146 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b80      	cmp	r3, #128	; 0x80
 8004132:	d919      	bls.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2ba0      	cmp	r3, #160	; 0xa0
 8004138:	d902      	bls.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800413a:	2302      	movs	r3, #2
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	e013      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004140:	2301      	movs	r3, #1
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	e010      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b80      	cmp	r3, #128	; 0x80
 800414a:	d902      	bls.n	8004152 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800414c:	2303      	movs	r3, #3
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	e00a      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b80      	cmp	r3, #128	; 0x80
 8004156:	d102      	bne.n	800415e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004158:	2302      	movs	r3, #2
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	e004      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b70      	cmp	r3, #112	; 0x70
 8004162:	d101      	bne.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004164:	2301      	movs	r3, #1
 8004166:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f023 0207 	bic.w	r2, r3, #7
 8004170:	4909      	ldr	r1, [pc, #36]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004178:	4b07      	ldr	r3, [pc, #28]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	429a      	cmp	r2, r3
 8004184:	d001      	beq.n	800418a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	40022000 	.word	0x40022000

0800419c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041a4:	2300      	movs	r3, #0
 80041a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041a8:	2300      	movs	r3, #0
 80041aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d031      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041c0:	d01a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80041c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041c6:	d814      	bhi.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d009      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041d0:	d10f      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80041d2:	4b5d      	ldr	r3, [pc, #372]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	4a5c      	ldr	r2, [pc, #368]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041de:	e00c      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fa22 	bl	8004630 <RCCEx_PLLSAI1_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041f0:	e003      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	74fb      	strb	r3, [r7, #19]
      break;
 80041f6:	e000      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80041f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fa:	7cfb      	ldrb	r3, [r7, #19]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004200:	4b51      	ldr	r3, [pc, #324]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	494e      	ldr	r1, [pc, #312]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004216:	e001      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 809e 	beq.w	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422a:	2300      	movs	r3, #0
 800422c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800422e:	4b46      	ldr	r3, [pc, #280]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800423e:	2300      	movs	r3, #0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00d      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004244:	4b40      	ldr	r3, [pc, #256]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	4a3f      	ldr	r2, [pc, #252]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800424a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424e:	6593      	str	r3, [r2, #88]	; 0x58
 8004250:	4b3d      	ldr	r3, [pc, #244]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800425c:	2301      	movs	r3, #1
 800425e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004260:	4b3a      	ldr	r3, [pc, #232]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a39      	ldr	r2, [pc, #228]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800426c:	f7fe fc28 	bl	8002ac0 <HAL_GetTick>
 8004270:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004272:	e009      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004274:	f7fe fc24 	bl	8002ac0 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d902      	bls.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	74fb      	strb	r3, [r7, #19]
        break;
 8004286:	e005      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004288:	4b30      	ldr	r3, [pc, #192]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0ef      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d15a      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800429a:	4b2b      	ldr	r3, [pc, #172]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01e      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d019      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042b6:	4b24      	ldr	r3, [pc, #144]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042c2:	4b21      	ldr	r3, [pc, #132]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c8:	4a1f      	ldr	r2, [pc, #124]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042d2:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042e2:	4a19      	ldr	r2, [pc, #100]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d016      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fe fbe4 	bl	8002ac0 <HAL_GetTick>
 80042f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042fa:	e00b      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fc:	f7fe fbe0 	bl	8002ac0 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	; 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d902      	bls.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	74fb      	strb	r3, [r7, #19]
            break;
 8004312:	e006      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004314:	4b0c      	ldr	r3, [pc, #48]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0ec      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004322:	7cfb      	ldrb	r3, [r7, #19]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004328:	4b07      	ldr	r3, [pc, #28]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004336:	4904      	ldr	r1, [pc, #16]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800433e:	e009      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	74bb      	strb	r3, [r7, #18]
 8004344:	e006      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
 800434c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004354:	7c7b      	ldrb	r3, [r7, #17]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d105      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435a:	4b8d      	ldr	r3, [pc, #564]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	4a8c      	ldr	r2, [pc, #560]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004364:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004372:	4b87      	ldr	r3, [pc, #540]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	f023 0203 	bic.w	r2, r3, #3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	4983      	ldr	r1, [pc, #524]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004394:	4b7e      	ldr	r3, [pc, #504]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	f023 020c 	bic.w	r2, r3, #12
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	497b      	ldr	r1, [pc, #492]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043b6:	4b76      	ldr	r3, [pc, #472]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	4972      	ldr	r1, [pc, #456]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043d8:	4b6d      	ldr	r3, [pc, #436]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	496a      	ldr	r1, [pc, #424]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043fa:	4b65      	ldr	r3, [pc, #404]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004408:	4961      	ldr	r1, [pc, #388]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800441c:	4b5c      	ldr	r3, [pc, #368]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	4959      	ldr	r1, [pc, #356]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800443e:	4b54      	ldr	r3, [pc, #336]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004444:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	4950      	ldr	r1, [pc, #320]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004460:	4b4b      	ldr	r3, [pc, #300]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004466:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446e:	4948      	ldr	r1, [pc, #288]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004482:	4b43      	ldr	r3, [pc, #268]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004488:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	493f      	ldr	r1, [pc, #252]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d028      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044a4:	4b3a      	ldr	r3, [pc, #232]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b2:	4937      	ldr	r1, [pc, #220]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044c2:	d106      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c4:	4b32      	ldr	r3, [pc, #200]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4a31      	ldr	r2, [pc, #196]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ce:	60d3      	str	r3, [r2, #12]
 80044d0:	e011      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044da:	d10c      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3304      	adds	r3, #4
 80044e0:	2101      	movs	r1, #1
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f8a4 	bl	8004630 <RCCEx_PLLSAI1_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80044f2:	7cfb      	ldrb	r3, [r7, #19]
 80044f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d028      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004502:	4b23      	ldr	r3, [pc, #140]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004508:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004510:	491f      	ldr	r1, [pc, #124]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004520:	d106      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004522:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	4a1a      	ldr	r2, [pc, #104]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800452c:	60d3      	str	r3, [r2, #12]
 800452e:	e011      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004538:	d10c      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3304      	adds	r3, #4
 800453e:	2101      	movs	r1, #1
 8004540:	4618      	mov	r0, r3
 8004542:	f000 f875 	bl	8004630 <RCCEx_PLLSAI1_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d02b      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456e:	4908      	ldr	r1, [pc, #32]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800457e:	d109      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4a02      	ldr	r2, [pc, #8]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800458a:	60d3      	str	r3, [r2, #12]
 800458c:	e014      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800458e:	bf00      	nop
 8004590:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800459c:	d10c      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2101      	movs	r1, #1
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 f843 	bl	8004630 <RCCEx_PLLSAI1_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ae:	7cfb      	ldrb	r3, [r7, #19]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80045b4:	7cfb      	ldrb	r3, [r7, #19]
 80045b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d01c      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045c4:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	4916      	ldr	r1, [pc, #88]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045e2:	d10c      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	2102      	movs	r1, #2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 f820 	bl	8004630 <RCCEx_PLLSAI1_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045f4:	7cfb      	ldrb	r3, [r7, #19]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80045fa:	7cfb      	ldrb	r3, [r7, #19]
 80045fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800460a:	4b08      	ldr	r3, [pc, #32]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004610:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	4904      	ldr	r1, [pc, #16]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004620:	7cbb      	ldrb	r3, [r7, #18]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000

08004630 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800463e:	4b74      	ldr	r3, [pc, #464]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d018      	beq.n	800467c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800464a:	4b71      	ldr	r3, [pc, #452]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f003 0203 	and.w	r2, r3, #3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d10d      	bne.n	8004676 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
       ||
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004662:	4b6b      	ldr	r3, [pc, #428]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
       ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d047      	beq.n	8004706 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
 800467a:	e044      	b.n	8004706 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d018      	beq.n	80046b6 <RCCEx_PLLSAI1_Config+0x86>
 8004684:	2b03      	cmp	r3, #3
 8004686:	d825      	bhi.n	80046d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004688:	2b01      	cmp	r3, #1
 800468a:	d002      	beq.n	8004692 <RCCEx_PLLSAI1_Config+0x62>
 800468c:	2b02      	cmp	r3, #2
 800468e:	d009      	beq.n	80046a4 <RCCEx_PLLSAI1_Config+0x74>
 8004690:	e020      	b.n	80046d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004692:	4b5f      	ldr	r3, [pc, #380]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d11d      	bne.n	80046da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a2:	e01a      	b.n	80046da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046a4:	4b5a      	ldr	r3, [pc, #360]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d116      	bne.n	80046de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b4:	e013      	b.n	80046de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046b6:	4b56      	ldr	r3, [pc, #344]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10f      	bne.n	80046e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046c2:	4b53      	ldr	r3, [pc, #332]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046d2:	e006      	b.n	80046e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
      break;
 80046d8:	e004      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046da:	bf00      	nop
 80046dc:	e002      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046de:	bf00      	nop
 80046e0:	e000      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10d      	bne.n	8004706 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ea:	4b49      	ldr	r3, [pc, #292]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6819      	ldr	r1, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	430b      	orrs	r3, r1
 8004700:	4943      	ldr	r1, [pc, #268]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004702:	4313      	orrs	r3, r2
 8004704:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d17c      	bne.n	8004806 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800470c:	4b40      	ldr	r3, [pc, #256]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a3f      	ldr	r2, [pc, #252]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004712:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004718:	f7fe f9d2 	bl	8002ac0 <HAL_GetTick>
 800471c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800471e:	e009      	b.n	8004734 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004720:	f7fe f9ce 	bl	8002ac0 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d902      	bls.n	8004734 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	73fb      	strb	r3, [r7, #15]
        break;
 8004732:	e005      	b.n	8004740 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004734:	4b36      	ldr	r3, [pc, #216]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1ef      	bne.n	8004720 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d15f      	bne.n	8004806 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d110      	bne.n	800476e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800474c:	4b30      	ldr	r3, [pc, #192]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004754:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6892      	ldr	r2, [r2, #8]
 800475c:	0211      	lsls	r1, r2, #8
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	68d2      	ldr	r2, [r2, #12]
 8004762:	06d2      	lsls	r2, r2, #27
 8004764:	430a      	orrs	r2, r1
 8004766:	492a      	ldr	r1, [pc, #168]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004768:	4313      	orrs	r3, r2
 800476a:	610b      	str	r3, [r1, #16]
 800476c:	e027      	b.n	80047be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d112      	bne.n	800479a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004774:	4b26      	ldr	r3, [pc, #152]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800477c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6892      	ldr	r2, [r2, #8]
 8004784:	0211      	lsls	r1, r2, #8
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6912      	ldr	r2, [r2, #16]
 800478a:	0852      	lsrs	r2, r2, #1
 800478c:	3a01      	subs	r2, #1
 800478e:	0552      	lsls	r2, r2, #21
 8004790:	430a      	orrs	r2, r1
 8004792:	491f      	ldr	r1, [pc, #124]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004794:	4313      	orrs	r3, r2
 8004796:	610b      	str	r3, [r1, #16]
 8004798:	e011      	b.n	80047be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800479a:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6892      	ldr	r2, [r2, #8]
 80047aa:	0211      	lsls	r1, r2, #8
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6952      	ldr	r2, [r2, #20]
 80047b0:	0852      	lsrs	r2, r2, #1
 80047b2:	3a01      	subs	r2, #1
 80047b4:	0652      	lsls	r2, r2, #25
 80047b6:	430a      	orrs	r2, r1
 80047b8:	4915      	ldr	r1, [pc, #84]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047be:	4b14      	ldr	r3, [pc, #80]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a13      	ldr	r2, [pc, #76]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ca:	f7fe f979 	bl	8002ac0 <HAL_GetTick>
 80047ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047d0:	e009      	b.n	80047e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047d2:	f7fe f975 	bl	8002ac0 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d902      	bls.n	80047e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	73fb      	strb	r3, [r7, #15]
          break;
 80047e4:	e005      	b.n	80047f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047e6:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0ef      	beq.n	80047d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d106      	bne.n	8004806 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	4903      	ldr	r1, [pc, #12]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004802:	4313      	orrs	r3, r2
 8004804:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000

08004814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e095      	b.n	8004952 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	2b00      	cmp	r3, #0
 800482c:	d108      	bne.n	8004840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004836:	d009      	beq.n	800484c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	61da      	str	r2, [r3, #28]
 800483e:	e005      	b.n	800484c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc ff56 	bl	8001718 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004882:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800488c:	d902      	bls.n	8004894 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	e002      	b.n	800489a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004898:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048a2:	d007      	beq.n	80048b4 <HAL_SPI_Init+0xa0>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048ac:	d002      	beq.n	80048b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f6:	ea42 0103 	orr.w	r1, r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	0c1b      	lsrs	r3, r3, #16
 8004910:	f003 0204 	and.w	r2, r3, #4
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004930:	ea42 0103 	orr.w	r1, r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b08a      	sub	sp, #40	; 0x28
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004968:	2301      	movs	r3, #1
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_SPI_TransmitReceive+0x26>
 800497c:	2302      	movs	r3, #2
 800497e:	e1fb      	b.n	8004d78 <HAL_SPI_TransmitReceive+0x41e>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004988:	f7fe f89a 	bl	8002ac0 <HAL_GetTick>
 800498c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004994:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800499c:	887b      	ldrh	r3, [r7, #2]
 800499e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80049a0:	887b      	ldrh	r3, [r7, #2]
 80049a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049a4:	7efb      	ldrb	r3, [r7, #27]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d00e      	beq.n	80049c8 <HAL_SPI_TransmitReceive+0x6e>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049b0:	d106      	bne.n	80049c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <HAL_SPI_TransmitReceive+0x66>
 80049ba:	7efb      	ldrb	r3, [r7, #27]
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d003      	beq.n	80049c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80049c0:	2302      	movs	r3, #2
 80049c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049c6:	e1cd      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <HAL_SPI_TransmitReceive+0x80>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_SPI_TransmitReceive+0x80>
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049e0:	e1c0      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d003      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2205      	movs	r2, #5
 80049f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	887a      	ldrh	r2, [r7, #2]
 8004a06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	887a      	ldrh	r2, [r7, #2]
 8004a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	887a      	ldrh	r2, [r7, #2]
 8004a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	887a      	ldrh	r2, [r7, #2]
 8004a22:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a38:	d802      	bhi.n	8004a40 <HAL_SPI_TransmitReceive+0xe6>
 8004a3a:	8a3b      	ldrh	r3, [r7, #16]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d908      	bls.n	8004a52 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a4e:	605a      	str	r2, [r3, #4]
 8004a50:	e007      	b.n	8004a62 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a60:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b40      	cmp	r3, #64	; 0x40
 8004a6e:	d007      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a88:	d97c      	bls.n	8004b84 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_SPI_TransmitReceive+0x13e>
 8004a92:	8a7b      	ldrh	r3, [r7, #18]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d169      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	881a      	ldrh	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	1c9a      	adds	r2, r3, #2
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004abc:	e056      	b.n	8004b6c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d11b      	bne.n	8004b04 <HAL_SPI_TransmitReceive+0x1aa>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d016      	beq.n	8004b04 <HAL_SPI_TransmitReceive+0x1aa>
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d113      	bne.n	8004b04 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	881a      	ldrh	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	1c9a      	adds	r2, r3, #2
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d11c      	bne.n	8004b4c <HAL_SPI_TransmitReceive+0x1f2>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	b292      	uxth	r2, r2
 8004b2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	1c9a      	adds	r2, r3, #2
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b4c:	f7fd ffb8 	bl	8002ac0 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d807      	bhi.n	8004b6c <HAL_SPI_TransmitReceive+0x212>
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b62:	d003      	beq.n	8004b6c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b6a:	e0fb      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1a3      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x164>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d19d      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x164>
 8004b82:	e0df      	b.n	8004d44 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_SPI_TransmitReceive+0x23a>
 8004b8c:	8a7b      	ldrh	r3, [r7, #18]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	f040 80cb 	bne.w	8004d2a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d912      	bls.n	8004bc4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	881a      	ldrh	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	1c9a      	adds	r2, r3, #2
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b02      	subs	r3, #2
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bc2:	e0b2      	b.n	8004d2a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	330c      	adds	r3, #12
 8004bce:	7812      	ldrb	r2, [r2, #0]
 8004bd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bea:	e09e      	b.n	8004d2a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d134      	bne.n	8004c64 <HAL_SPI_TransmitReceive+0x30a>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d02f      	beq.n	8004c64 <HAL_SPI_TransmitReceive+0x30a>
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d12c      	bne.n	8004c64 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d912      	bls.n	8004c3a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	881a      	ldrh	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	1c9a      	adds	r2, r3, #2
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b02      	subs	r3, #2
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c38:	e012      	b.n	8004c60 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	7812      	ldrb	r2, [r2, #0]
 8004c46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d148      	bne.n	8004d04 <HAL_SPI_TransmitReceive+0x3aa>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d042      	beq.n	8004d04 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d923      	bls.n	8004cd2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	b292      	uxth	r2, r2
 8004c96:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	1c9a      	adds	r2, r3, #2
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b02      	subs	r3, #2
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d81f      	bhi.n	8004d00 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cce:	605a      	str	r2, [r3, #4]
 8004cd0:	e016      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f103 020c 	add.w	r2, r3, #12
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	7812      	ldrb	r2, [r2, #0]
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d00:	2301      	movs	r3, #1
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d04:	f7fd fedc 	bl	8002ac0 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d803      	bhi.n	8004d1c <HAL_SPI_TransmitReceive+0x3c2>
 8004d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d102      	bne.n	8004d22 <HAL_SPI_TransmitReceive+0x3c8>
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d103      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d28:	e01c      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f47f af5b 	bne.w	8004bec <HAL_SPI_TransmitReceive+0x292>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f47f af54 	bne.w	8004bec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f937 	bl	8004fbc <SPI_EndRxTxTransaction>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d006      	beq.n	8004d62 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	661a      	str	r2, [r3, #96]	; 0x60
 8004d60:	e000      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004d62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3728      	adds	r7, #40	; 0x28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d90:	f7fd fe96 	bl	8002ac0 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004da0:	f7fd fe8e 	bl	8002ac0 <HAL_GetTick>
 8004da4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004da6:	4b39      	ldr	r3, [pc, #228]	; (8004e8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	015b      	lsls	r3, r3, #5
 8004dac:	0d1b      	lsrs	r3, r3, #20
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	fb02 f303 	mul.w	r3, r2, r3
 8004db4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004db6:	e054      	b.n	8004e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbe:	d050      	beq.n	8004e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dc0:	f7fd fe7e 	bl	8002ac0 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d902      	bls.n	8004dd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d13d      	bne.n	8004e52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004de4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dee:	d111      	bne.n	8004e14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df8:	d004      	beq.n	8004e04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e02:	d107      	bne.n	8004e14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1c:	d10f      	bne.n	8004e3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e017      	b.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	bf0c      	ite	eq
 8004e72:	2301      	moveq	r3, #1
 8004e74:	2300      	movne	r3, #0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	461a      	mov	r2, r3
 8004e7a:	79fb      	ldrb	r3, [r7, #7]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d19b      	bne.n	8004db8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3720      	adds	r7, #32
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000030 	.word	0x20000030

08004e90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	; 0x28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ea2:	f7fd fe0d 	bl	8002ac0 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	4413      	add	r3, r2
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004eb2:	f7fd fe05 	bl	8002ac0 <HAL_GetTick>
 8004eb6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	330c      	adds	r3, #12
 8004ebe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ec0:	4b3d      	ldr	r3, [pc, #244]	; (8004fb8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	00da      	lsls	r2, r3, #3
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	0d1b      	lsrs	r3, r3, #20
 8004ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed2:	fb02 f303 	mul.w	r3, r2, r3
 8004ed6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ed8:	e060      	b.n	8004f9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ee0:	d107      	bne.n	8004ef2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d104      	bne.n	8004ef2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef8:	d050      	beq.n	8004f9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004efa:	f7fd fde1 	bl	8002ac0 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d902      	bls.n	8004f10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d13d      	bne.n	8004f8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f28:	d111      	bne.n	8004f4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f32:	d004      	beq.n	8004f3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3c:	d107      	bne.n	8004f4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f56:	d10f      	bne.n	8004f78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e010      	b.n	8004fae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d196      	bne.n	8004eda <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3728      	adds	r7, #40	; 0x28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000030 	.word	0x20000030

08004fbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af02      	add	r7, sp, #8
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff ff5b 	bl	8004e90 <SPI_WaitFifoStateUntilTimeout>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d007      	beq.n	8004ff0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe4:	f043 0220 	orr.w	r2, r3, #32
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e027      	b.n	8005040 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2180      	movs	r1, #128	; 0x80
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff fec0 	bl	8004d80 <SPI_WaitFlagStateUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500a:	f043 0220 	orr.w	r2, r3, #32
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e014      	b.n	8005040 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2200      	movs	r2, #0
 800501e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7ff ff34 	bl	8004e90 <SPI_WaitFifoStateUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d007      	beq.n	800503e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e000      	b.n	8005040 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e049      	b.n	80050ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc fe2c 	bl	8001ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3304      	adds	r3, #4
 8005084:	4619      	mov	r1, r3
 8005086:	4610      	mov	r0, r2
 8005088:	f000 fba0 	bl	80057cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d001      	beq.n	8005110 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e033      	b.n	8005178 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a19      	ldr	r2, [pc, #100]	; (8005184 <HAL_TIM_Base_Start+0x8c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_TIM_Base_Start+0x3e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512a:	d004      	beq.n	8005136 <HAL_TIM_Base_Start+0x3e>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a15      	ldr	r2, [pc, #84]	; (8005188 <HAL_TIM_Base_Start+0x90>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d115      	bne.n	8005162 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	4b13      	ldr	r3, [pc, #76]	; (800518c <HAL_TIM_Base_Start+0x94>)
 800513e:	4013      	ands	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b06      	cmp	r3, #6
 8005146:	d015      	beq.n	8005174 <HAL_TIM_Base_Start+0x7c>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514e:	d011      	beq.n	8005174 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005160:	e008      	b.n	8005174 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0201 	orr.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	e000      	b.n	8005176 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005174:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40014000 	.word	0x40014000
 800518c:	00010007 	.word	0x00010007

08005190 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e049      	b.n	8005236 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f841 	bl	800523e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f000 fafc 	bl	80057cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
	...

08005254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <HAL_TIM_PWM_Start+0x24>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	bf14      	ite	ne
 8005270:	2301      	movne	r3, #1
 8005272:	2300      	moveq	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	e03c      	b.n	80052f2 <HAL_TIM_PWM_Start+0x9e>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b04      	cmp	r3, #4
 800527c:	d109      	bne.n	8005292 <HAL_TIM_PWM_Start+0x3e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b01      	cmp	r3, #1
 8005288:	bf14      	ite	ne
 800528a:	2301      	movne	r3, #1
 800528c:	2300      	moveq	r3, #0
 800528e:	b2db      	uxtb	r3, r3
 8005290:	e02f      	b.n	80052f2 <HAL_TIM_PWM_Start+0x9e>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d109      	bne.n	80052ac <HAL_TIM_PWM_Start+0x58>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	bf14      	ite	ne
 80052a4:	2301      	movne	r3, #1
 80052a6:	2300      	moveq	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	e022      	b.n	80052f2 <HAL_TIM_PWM_Start+0x9e>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b0c      	cmp	r3, #12
 80052b0:	d109      	bne.n	80052c6 <HAL_TIM_PWM_Start+0x72>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	bf14      	ite	ne
 80052be:	2301      	movne	r3, #1
 80052c0:	2300      	moveq	r3, #0
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	e015      	b.n	80052f2 <HAL_TIM_PWM_Start+0x9e>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d109      	bne.n	80052e0 <HAL_TIM_PWM_Start+0x8c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	e008      	b.n	80052f2 <HAL_TIM_PWM_Start+0x9e>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	bf14      	ite	ne
 80052ec:	2301      	movne	r3, #1
 80052ee:	2300      	moveq	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e07e      	b.n	80053f8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <HAL_TIM_PWM_Start+0xb6>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005308:	e023      	b.n	8005352 <HAL_TIM_PWM_Start+0xfe>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b04      	cmp	r3, #4
 800530e:	d104      	bne.n	800531a <HAL_TIM_PWM_Start+0xc6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005318:	e01b      	b.n	8005352 <HAL_TIM_PWM_Start+0xfe>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d104      	bne.n	800532a <HAL_TIM_PWM_Start+0xd6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005328:	e013      	b.n	8005352 <HAL_TIM_PWM_Start+0xfe>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b0c      	cmp	r3, #12
 800532e:	d104      	bne.n	800533a <HAL_TIM_PWM_Start+0xe6>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005338:	e00b      	b.n	8005352 <HAL_TIM_PWM_Start+0xfe>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b10      	cmp	r3, #16
 800533e:	d104      	bne.n	800534a <HAL_TIM_PWM_Start+0xf6>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005348:	e003      	b.n	8005352 <HAL_TIM_PWM_Start+0xfe>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2202      	movs	r2, #2
 800534e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2201      	movs	r2, #1
 8005358:	6839      	ldr	r1, [r7, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fdb2 	bl	8005ec4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a26      	ldr	r2, [pc, #152]	; (8005400 <HAL_TIM_PWM_Start+0x1ac>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d009      	beq.n	800537e <HAL_TIM_PWM_Start+0x12a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a25      	ldr	r2, [pc, #148]	; (8005404 <HAL_TIM_PWM_Start+0x1b0>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <HAL_TIM_PWM_Start+0x12a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a23      	ldr	r2, [pc, #140]	; (8005408 <HAL_TIM_PWM_Start+0x1b4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d101      	bne.n	8005382 <HAL_TIM_PWM_Start+0x12e>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <HAL_TIM_PWM_Start+0x130>
 8005382:	2300      	movs	r3, #0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d007      	beq.n	8005398 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005396:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a18      	ldr	r2, [pc, #96]	; (8005400 <HAL_TIM_PWM_Start+0x1ac>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d009      	beq.n	80053b6 <HAL_TIM_PWM_Start+0x162>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053aa:	d004      	beq.n	80053b6 <HAL_TIM_PWM_Start+0x162>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a14      	ldr	r2, [pc, #80]	; (8005404 <HAL_TIM_PWM_Start+0x1b0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d115      	bne.n	80053e2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	4b13      	ldr	r3, [pc, #76]	; (800540c <HAL_TIM_PWM_Start+0x1b8>)
 80053be:	4013      	ands	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b06      	cmp	r3, #6
 80053c6:	d015      	beq.n	80053f4 <HAL_TIM_PWM_Start+0x1a0>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ce:	d011      	beq.n	80053f4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e0:	e008      	b.n	80053f4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0201 	orr.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e000      	b.n	80053f6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40014000 	.word	0x40014000
 8005408:	40014400 	.word	0x40014400
 800540c:	00010007 	.word	0x00010007

08005410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800542a:	2302      	movs	r3, #2
 800542c:	e0ff      	b.n	800562e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b14      	cmp	r3, #20
 800543a:	f200 80f0 	bhi.w	800561e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800543e:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	08005499 	.word	0x08005499
 8005448:	0800561f 	.word	0x0800561f
 800544c:	0800561f 	.word	0x0800561f
 8005450:	0800561f 	.word	0x0800561f
 8005454:	080054d9 	.word	0x080054d9
 8005458:	0800561f 	.word	0x0800561f
 800545c:	0800561f 	.word	0x0800561f
 8005460:	0800561f 	.word	0x0800561f
 8005464:	0800551b 	.word	0x0800551b
 8005468:	0800561f 	.word	0x0800561f
 800546c:	0800561f 	.word	0x0800561f
 8005470:	0800561f 	.word	0x0800561f
 8005474:	0800555b 	.word	0x0800555b
 8005478:	0800561f 	.word	0x0800561f
 800547c:	0800561f 	.word	0x0800561f
 8005480:	0800561f 	.word	0x0800561f
 8005484:	0800559d 	.word	0x0800559d
 8005488:	0800561f 	.word	0x0800561f
 800548c:	0800561f 	.word	0x0800561f
 8005490:	0800561f 	.word	0x0800561f
 8005494:	080055dd 	.word	0x080055dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f9f8 	bl	8005894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0208 	orr.w	r2, r2, #8
 80054b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0204 	bic.w	r2, r2, #4
 80054c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6999      	ldr	r1, [r3, #24]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	619a      	str	r2, [r3, #24]
      break;
 80054d6:	e0a5      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fa54 	bl	800598c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6999      	ldr	r1, [r3, #24]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	021a      	lsls	r2, r3, #8
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	619a      	str	r2, [r3, #24]
      break;
 8005518:	e084      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	4618      	mov	r0, r3
 8005522:	f000 faad 	bl	8005a80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0208 	orr.w	r2, r2, #8
 8005534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0204 	bic.w	r2, r2, #4
 8005544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69d9      	ldr	r1, [r3, #28]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	61da      	str	r2, [r3, #28]
      break;
 8005558:	e064      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fb05 	bl	8005b70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69da      	ldr	r2, [r3, #28]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69d9      	ldr	r1, [r3, #28]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	021a      	lsls	r2, r3, #8
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	61da      	str	r2, [r3, #28]
      break;
 800559a:	e043      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fb42 	bl	8005c2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0208 	orr.w	r2, r2, #8
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0204 	bic.w	r2, r2, #4
 80055c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055da:	e023      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 fb7a 	bl	8005cdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005606:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	021a      	lsls	r2, r3, #8
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800561c:	e002      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	75fb      	strb	r3, [r7, #23]
      break;
 8005622:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800562c:	7dfb      	ldrb	r3, [r7, #23]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop

08005638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_TIM_ConfigClockSource+0x1c>
 8005650:	2302      	movs	r3, #2
 8005652:	e0b6      	b.n	80057c2 <HAL_TIM_ConfigClockSource+0x18a>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005672:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005690:	d03e      	beq.n	8005710 <HAL_TIM_ConfigClockSource+0xd8>
 8005692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005696:	f200 8087 	bhi.w	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569e:	f000 8086 	beq.w	80057ae <HAL_TIM_ConfigClockSource+0x176>
 80056a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a6:	d87f      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 80056a8:	2b70      	cmp	r3, #112	; 0x70
 80056aa:	d01a      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0xaa>
 80056ac:	2b70      	cmp	r3, #112	; 0x70
 80056ae:	d87b      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 80056b0:	2b60      	cmp	r3, #96	; 0x60
 80056b2:	d050      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x11e>
 80056b4:	2b60      	cmp	r3, #96	; 0x60
 80056b6:	d877      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 80056b8:	2b50      	cmp	r3, #80	; 0x50
 80056ba:	d03c      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0xfe>
 80056bc:	2b50      	cmp	r3, #80	; 0x50
 80056be:	d873      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 80056c0:	2b40      	cmp	r3, #64	; 0x40
 80056c2:	d058      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x13e>
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	d86f      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 80056c8:	2b30      	cmp	r3, #48	; 0x30
 80056ca:	d064      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x15e>
 80056cc:	2b30      	cmp	r3, #48	; 0x30
 80056ce:	d86b      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d060      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x15e>
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d867      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d05c      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x15e>
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d05a      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x15e>
 80056e0:	e062      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6899      	ldr	r1, [r3, #8]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f000 fbc7 	bl	8005e84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	609a      	str	r2, [r3, #8]
      break;
 800570e:	e04f      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	6899      	ldr	r1, [r3, #8]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f000 fbb0 	bl	8005e84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005732:	609a      	str	r2, [r3, #8]
      break;
 8005734:	e03c      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6859      	ldr	r1, [r3, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	461a      	mov	r2, r3
 8005744:	f000 fb24 	bl	8005d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2150      	movs	r1, #80	; 0x50
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fb7d 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005754:	e02c      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6859      	ldr	r1, [r3, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	461a      	mov	r2, r3
 8005764:	f000 fb43 	bl	8005dee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2160      	movs	r1, #96	; 0x60
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fb6d 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005774:	e01c      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6859      	ldr	r1, [r3, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	461a      	mov	r2, r3
 8005784:	f000 fb04 	bl	8005d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2140      	movs	r1, #64	; 0x40
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fb5d 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005794:	e00c      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4619      	mov	r1, r3
 80057a0:	4610      	mov	r0, r2
 80057a2:	f000 fb54 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 80057a6:	e003      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
      break;
 80057ac:	e000      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80057ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <TIM_Base_SetConfig+0xbc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_Base_SetConfig+0x20>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ea:	d108      	bne.n	80057fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a21      	ldr	r2, [pc, #132]	; (8005888 <TIM_Base_SetConfig+0xbc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00b      	beq.n	800581e <TIM_Base_SetConfig+0x52>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580c:	d007      	beq.n	800581e <TIM_Base_SetConfig+0x52>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a1e      	ldr	r2, [pc, #120]	; (800588c <TIM_Base_SetConfig+0xc0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d003      	beq.n	800581e <TIM_Base_SetConfig+0x52>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <TIM_Base_SetConfig+0xc4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d108      	bne.n	8005830 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a0c      	ldr	r2, [pc, #48]	; (8005888 <TIM_Base_SetConfig+0xbc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d007      	beq.n	800586c <TIM_Base_SetConfig+0xa0>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a0b      	ldr	r2, [pc, #44]	; (800588c <TIM_Base_SetConfig+0xc0>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_Base_SetConfig+0xa0>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <TIM_Base_SetConfig+0xc4>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d103      	bne.n	8005874 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	615a      	str	r2, [r3, #20]
}
 800587a:	bf00      	nop
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40012c00 	.word	0x40012c00
 800588c:	40014000 	.word	0x40014000
 8005890:	40014400 	.word	0x40014400

08005894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	f023 0201 	bic.w	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0303 	bic.w	r3, r3, #3
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f023 0302 	bic.w	r3, r3, #2
 80058e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a24      	ldr	r2, [pc, #144]	; (8005980 <TIM_OC1_SetConfig+0xec>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d007      	beq.n	8005904 <TIM_OC1_SetConfig+0x70>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a23      	ldr	r2, [pc, #140]	; (8005984 <TIM_OC1_SetConfig+0xf0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_OC1_SetConfig+0x70>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a22      	ldr	r2, [pc, #136]	; (8005988 <TIM_OC1_SetConfig+0xf4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d10c      	bne.n	800591e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f023 0308 	bic.w	r3, r3, #8
 800590a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f023 0304 	bic.w	r3, r3, #4
 800591c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a17      	ldr	r2, [pc, #92]	; (8005980 <TIM_OC1_SetConfig+0xec>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d007      	beq.n	8005936 <TIM_OC1_SetConfig+0xa2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a16      	ldr	r2, [pc, #88]	; (8005984 <TIM_OC1_SetConfig+0xf0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d003      	beq.n	8005936 <TIM_OC1_SetConfig+0xa2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a15      	ldr	r2, [pc, #84]	; (8005988 <TIM_OC1_SetConfig+0xf4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d111      	bne.n	800595a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800593c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	621a      	str	r2, [r3, #32]
}
 8005974:	bf00      	nop
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40014000 	.word	0x40014000
 8005988:	40014400 	.word	0x40014400

0800598c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f023 0210 	bic.w	r2, r3, #16
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f023 0320 	bic.w	r3, r3, #32
 80059da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a22      	ldr	r2, [pc, #136]	; (8005a74 <TIM_OC2_SetConfig+0xe8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d10d      	bne.n	8005a0c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a19      	ldr	r2, [pc, #100]	; (8005a74 <TIM_OC2_SetConfig+0xe8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d007      	beq.n	8005a24 <TIM_OC2_SetConfig+0x98>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <TIM_OC2_SetConfig+0xec>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_OC2_SetConfig+0x98>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a17      	ldr	r2, [pc, #92]	; (8005a7c <TIM_OC2_SetConfig+0xf0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d113      	bne.n	8005a4c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40014400 	.word	0x40014400

08005a80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a21      	ldr	r2, [pc, #132]	; (8005b64 <TIM_OC3_SetConfig+0xe4>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d10d      	bne.n	8005afe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <TIM_OC3_SetConfig+0xe4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <TIM_OC3_SetConfig+0x96>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a17      	ldr	r2, [pc, #92]	; (8005b68 <TIM_OC3_SetConfig+0xe8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <TIM_OC3_SetConfig+0x96>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a16      	ldr	r2, [pc, #88]	; (8005b6c <TIM_OC3_SetConfig+0xec>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d113      	bne.n	8005b3e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	621a      	str	r2, [r3, #32]
}
 8005b58:	bf00      	nop
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40014400 	.word	0x40014400

08005b70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	031b      	lsls	r3, r3, #12
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a14      	ldr	r2, [pc, #80]	; (8005c20 <TIM_OC4_SetConfig+0xb0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d007      	beq.n	8005be4 <TIM_OC4_SetConfig+0x74>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a13      	ldr	r2, [pc, #76]	; (8005c24 <TIM_OC4_SetConfig+0xb4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d003      	beq.n	8005be4 <TIM_OC4_SetConfig+0x74>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a12      	ldr	r2, [pc, #72]	; (8005c28 <TIM_OC4_SetConfig+0xb8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d109      	bne.n	8005bf8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	019b      	lsls	r3, r3, #6
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	621a      	str	r2, [r3, #32]
}
 8005c12:	bf00      	nop
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40012c00 	.word	0x40012c00
 8005c24:	40014000 	.word	0x40014000
 8005c28:	40014400 	.word	0x40014400

08005c2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	041b      	lsls	r3, r3, #16
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a13      	ldr	r2, [pc, #76]	; (8005cd0 <TIM_OC5_SetConfig+0xa4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d007      	beq.n	8005c96 <TIM_OC5_SetConfig+0x6a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a12      	ldr	r2, [pc, #72]	; (8005cd4 <TIM_OC5_SetConfig+0xa8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d003      	beq.n	8005c96 <TIM_OC5_SetConfig+0x6a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a11      	ldr	r2, [pc, #68]	; (8005cd8 <TIM_OC5_SetConfig+0xac>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d109      	bne.n	8005caa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	021b      	lsls	r3, r3, #8
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	621a      	str	r2, [r3, #32]
}
 8005cc4:	bf00      	nop
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	40012c00 	.word	0x40012c00
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40014400 	.word	0x40014400

08005cdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	051b      	lsls	r3, r3, #20
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a14      	ldr	r2, [pc, #80]	; (8005d84 <TIM_OC6_SetConfig+0xa8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d007      	beq.n	8005d48 <TIM_OC6_SetConfig+0x6c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a13      	ldr	r2, [pc, #76]	; (8005d88 <TIM_OC6_SetConfig+0xac>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_OC6_SetConfig+0x6c>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a12      	ldr	r2, [pc, #72]	; (8005d8c <TIM_OC6_SetConfig+0xb0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d109      	bne.n	8005d5c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	029b      	lsls	r3, r3, #10
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40012c00 	.word	0x40012c00
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400

08005d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f023 0201 	bic.w	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 030a 	bic.w	r3, r3, #10
 8005dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b087      	sub	sp, #28
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	f023 0210 	bic.w	r2, r3, #16
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	031b      	lsls	r3, r3, #12
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b085      	sub	sp, #20
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f043 0307 	orr.w	r3, r3, #7
 8005e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	021a      	lsls	r2, r3, #8
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	609a      	str	r2, [r3, #8]
}
 8005eb8:	bf00      	nop
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 031f 	and.w	r3, r3, #31
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8005edc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1a      	ldr	r2, [r3, #32]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	401a      	ands	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a1a      	ldr	r2, [r3, #32]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8005efc:	431a      	orrs	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	621a      	str	r2, [r3, #32]
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
	...

08005f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e04f      	b.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a21      	ldr	r2, [pc, #132]	; (8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d108      	bne.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a14      	ldr	r2, [pc, #80]	; (8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d009      	beq.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f90:	d004      	beq.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a10      	ldr	r2, [pc, #64]	; (8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d10c      	bne.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	40012c00 	.word	0x40012c00
 8005fd8:	40014000 	.word	0x40014000

08005fdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e060      	b.n	80060ba <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	041b      	lsls	r3, r3, #16
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a14      	ldr	r2, [pc, #80]	; (80060c8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d115      	bne.n	80060a8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	051b      	lsls	r3, r3, #20
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40012c00 	.word	0x40012c00

080060cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e040      	b.n	8006160 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7fb fece 	bl	8001e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2224      	movs	r2, #36	; 0x24
 80060f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fc18 	bl	8006940 <UART_SetConfig>
 8006110:	4603      	mov	r3, r0
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e022      	b.n	8006160 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fe66 	bl	8006df4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 feed 	bl	8006f38 <UART_CheckIdleState>
 800615e:	4603      	mov	r3, r0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	4613      	mov	r3, r2
 8006176:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800617c:	2b20      	cmp	r3, #32
 800617e:	f040 8082 	bne.w	8006286 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_UART_Transmit+0x26>
 8006188:	88fb      	ldrh	r3, [r7, #6]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e07a      	b.n	8006288 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006198:	2b01      	cmp	r3, #1
 800619a:	d101      	bne.n	80061a0 <HAL_UART_Transmit+0x38>
 800619c:	2302      	movs	r3, #2
 800619e:	e073      	b.n	8006288 <HAL_UART_Transmit+0x120>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2221      	movs	r2, #33	; 0x21
 80061b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061b6:	f7fc fc83 	bl	8002ac0 <HAL_GetTick>
 80061ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	88fa      	ldrh	r2, [r7, #6]
 80061c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d4:	d108      	bne.n	80061e8 <HAL_UART_Transmit+0x80>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d104      	bne.n	80061e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	e003      	b.n	80061f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80061f8:	e02d      	b.n	8006256 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2200      	movs	r2, #0
 8006202:	2180      	movs	r1, #128	; 0x80
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fee0 	bl	8006fca <UART_WaitOnFlagUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e039      	b.n	8006288 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	881a      	ldrh	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006226:	b292      	uxth	r2, r2
 8006228:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	3302      	adds	r3, #2
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	e008      	b.n	8006244 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	781a      	ldrb	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	b292      	uxth	r2, r2
 800623c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	3301      	adds	r3, #1
 8006242:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800624a:	b29b      	uxth	r3, r3
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800625c:	b29b      	uxth	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1cb      	bne.n	80061fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2200      	movs	r2, #0
 800626a:	2140      	movs	r1, #64	; 0x40
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 feac 	bl	8006fca <UART_WaitOnFlagUntilTimeout>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e005      	b.n	8006288 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2220      	movs	r2, #32
 8006280:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	e000      	b.n	8006288 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006286:	2302      	movs	r3, #2
  }
}
 8006288:	4618      	mov	r0, r3
 800628a:	3720      	adds	r7, #32
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d142      	bne.n	800632c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <HAL_UART_Receive_IT+0x22>
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e03b      	b.n	800632e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_UART_Receive_IT+0x34>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e034      	b.n	800632e <HAL_UART_Receive_IT+0x9e>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a18      	ldr	r2, [pc, #96]	; (8006338 <HAL_UART_Receive_IT+0xa8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d01f      	beq.n	800631c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d018      	beq.n	800631c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	613b      	str	r3, [r7, #16]
   return(result);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	623b      	str	r3, [r7, #32]
 800630a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	69f9      	ldr	r1, [r7, #28]
 800630e:	6a3a      	ldr	r2, [r7, #32]
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	61bb      	str	r3, [r7, #24]
   return(result);
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e6      	bne.n	80062ea <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	461a      	mov	r2, r3
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 ff16 	bl	8007154 <UART_Start_Receive_IT>
 8006328:	4603      	mov	r3, r0
 800632a:	e000      	b.n	800632e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800632c:	2302      	movs	r3, #2
  }
}
 800632e:	4618      	mov	r0, r3
 8006330:	3728      	adds	r7, #40	; 0x28
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	40008000 	.word	0x40008000

0800633c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b0ba      	sub	sp, #232	; 0xe8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006362:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006366:	f640 030f 	movw	r3, #2063	; 0x80f
 800636a:	4013      	ands	r3, r2
 800636c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d115      	bne.n	80063a4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00f      	beq.n	80063a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006388:	f003 0320 	and.w	r3, r3, #32
 800638c:	2b00      	cmp	r3, #0
 800638e:	d009      	beq.n	80063a4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 82a6 	beq.w	80068e6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
      }
      return;
 80063a2:	e2a0      	b.n	80068e6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80063a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 8117 	beq.w	80065dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80063ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80063ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80063be:	4b85      	ldr	r3, [pc, #532]	; (80065d4 <HAL_UART_IRQHandler+0x298>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 810a 	beq.w	80065dc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d011      	beq.n	80063f8 <HAL_UART_IRQHandler+0xbc>
 80063d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2201      	movs	r2, #1
 80063e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ee:	f043 0201 	orr.w	r2, r3, #1
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d011      	beq.n	8006428 <HAL_UART_IRQHandler+0xec>
 8006404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00b      	beq.n	8006428 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2202      	movs	r2, #2
 8006416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800641e:	f043 0204 	orr.w	r2, r3, #4
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d011      	beq.n	8006458 <HAL_UART_IRQHandler+0x11c>
 8006434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2204      	movs	r2, #4
 8006446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800644e:	f043 0202 	orr.w	r2, r3, #2
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b00      	cmp	r3, #0
 8006462:	d017      	beq.n	8006494 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d105      	bne.n	800647c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006474:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00b      	beq.n	8006494 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2208      	movs	r2, #8
 8006482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800648a:	f043 0208 	orr.w	r2, r3, #8
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800649c:	2b00      	cmp	r3, #0
 800649e:	d012      	beq.n	80064c6 <HAL_UART_IRQHandler+0x18a>
 80064a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00c      	beq.n	80064c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064bc:	f043 0220 	orr.w	r2, r3, #32
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 820c 	beq.w	80068ea <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00d      	beq.n	80064fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d007      	beq.n	80064fa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006500:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	d005      	beq.n	800651e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006516:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800651a:	2b00      	cmp	r3, #0
 800651c:	d04f      	beq.n	80065be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fee2 	bl	80072e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652e:	2b40      	cmp	r3, #64	; 0x40
 8006530:	d141      	bne.n	80065b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3308      	adds	r3, #8
 8006538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800654c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3308      	adds	r3, #8
 800655a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800655e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800656a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1d9      	bne.n	8006532 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006582:	2b00      	cmp	r3, #0
 8006584:	d013      	beq.n	80065ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	4a13      	ldr	r2, [pc, #76]	; (80065d8 <HAL_UART_IRQHandler+0x29c>)
 800658c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006592:	4618      	mov	r0, r3
 8006594:	f7fc fccc 	bl	8002f30 <HAL_DMA_Abort_IT>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d017      	beq.n	80065ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80065a8:	4610      	mov	r0, r2
 80065aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ac:	e00f      	b.n	80065ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f9b0 	bl	8006914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b4:	e00b      	b.n	80065ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f9ac 	bl	8006914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065bc:	e007      	b.n	80065ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f9a8 	bl	8006914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80065cc:	e18d      	b.n	80068ea <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ce:	bf00      	nop
    return;
 80065d0:	e18b      	b.n	80068ea <HAL_UART_IRQHandler+0x5ae>
 80065d2:	bf00      	nop
 80065d4:	04000120 	.word	0x04000120
 80065d8:	080073af 	.word	0x080073af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	f040 8146 	bne.w	8006872 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ea:	f003 0310 	and.w	r3, r3, #16
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 813f 	beq.w	8006872 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f8:	f003 0310 	and.w	r3, r3, #16
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8138 	beq.w	8006872 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2210      	movs	r2, #16
 8006608:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006614:	2b40      	cmp	r3, #64	; 0x40
 8006616:	f040 80b4 	bne.w	8006782 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006626:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 815f 	beq.w	80068ee <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800663a:	429a      	cmp	r2, r3
 800663c:	f080 8157 	bcs.w	80068ee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006646:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 8085 	bne.w	8006766 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006670:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006686:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800668a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006692:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800669e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1da      	bne.n	800665c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3308      	adds	r3, #8
 80066ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066b8:	f023 0301 	bic.w	r3, r3, #1
 80066bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e1      	bne.n	80066a6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3308      	adds	r3, #8
 80066e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3308      	adds	r3, #8
 8006702:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006706:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006708:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800670c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e3      	bne.n	80066e2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006736:	f023 0310 	bic.w	r3, r3, #16
 800673a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006748:	65bb      	str	r3, [r7, #88]	; 0x58
 800674a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800674e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e4      	bne.n	8006726 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	4618      	mov	r0, r3
 8006762:	f7fc fba7 	bl	8002eb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006772:	b29b      	uxth	r3, r3
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	b29b      	uxth	r3, r3
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f8d4 	bl	8006928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006780:	e0b5      	b.n	80068ee <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800678e:	b29b      	uxth	r3, r3
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 80a7 	beq.w	80068f2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80067a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 80a2 	beq.w	80068f2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067d0:	647b      	str	r3, [r7, #68]	; 0x44
 80067d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e4      	bne.n	80067ae <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3308      	adds	r3, #8
 80067ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	623b      	str	r3, [r7, #32]
   return(result);
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	f023 0301 	bic.w	r3, r3, #1
 80067fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3308      	adds	r3, #8
 8006804:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006808:	633a      	str	r2, [r7, #48]	; 0x30
 800680a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800680e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e3      	bne.n	80067e4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2220      	movs	r2, #32
 8006820:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	60fb      	str	r3, [r7, #12]
   return(result);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0310 	bic.w	r3, r3, #16
 8006842:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006850:	61fb      	str	r3, [r7, #28]
 8006852:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	69b9      	ldr	r1, [r7, #24]
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	617b      	str	r3, [r7, #20]
   return(result);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e4      	bne.n	800682e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f85c 	bl	8006928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006870:	e03f      	b.n	80068f2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00e      	beq.n	800689c <HAL_UART_IRQHandler+0x560>
 800687e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d008      	beq.n	800689c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006892:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 ff2a 	bl	80076ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800689a:	e02d      	b.n	80068f8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800689c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00e      	beq.n	80068c6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80068a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d008      	beq.n	80068c6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01c      	beq.n	80068f6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	4798      	blx	r3
    }
    return;
 80068c4:	e017      	b.n	80068f6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d012      	beq.n	80068f8 <HAL_UART_IRQHandler+0x5bc>
 80068d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00c      	beq.n	80068f8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fd7b 	bl	80073da <UART_EndTransmit_IT>
    return;
 80068e4:	e008      	b.n	80068f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80068e6:	bf00      	nop
 80068e8:	e006      	b.n	80068f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80068ea:	bf00      	nop
 80068ec:	e004      	b.n	80068f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80068ee:	bf00      	nop
 80068f0:	e002      	b.n	80068f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80068f2:	bf00      	nop
 80068f4:	e000      	b.n	80068f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80068f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80068f8:	37e8      	adds	r7, #232	; 0xe8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop

08006900 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006944:	b08a      	sub	sp, #40	; 0x28
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	431a      	orrs	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	431a      	orrs	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	4313      	orrs	r3, r2
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4b9e      	ldr	r3, [pc, #632]	; (8006be8 <UART_SetConfig+0x2a8>)
 8006970:	4013      	ands	r3, r2
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006978:	430b      	orrs	r3, r1
 800697a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a93      	ldr	r2, [pc, #588]	; (8006bec <UART_SetConfig+0x2ac>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d004      	beq.n	80069ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a8:	4313      	orrs	r3, r2
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069bc:	430a      	orrs	r2, r1
 80069be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a8a      	ldr	r2, [pc, #552]	; (8006bf0 <UART_SetConfig+0x2b0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d126      	bne.n	8006a18 <UART_SetConfig+0xd8>
 80069ca:	4b8a      	ldr	r3, [pc, #552]	; (8006bf4 <UART_SetConfig+0x2b4>)
 80069cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d0:	f003 0303 	and.w	r3, r3, #3
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d81b      	bhi.n	8006a10 <UART_SetConfig+0xd0>
 80069d8:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <UART_SetConfig+0xa0>)
 80069da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069de:	bf00      	nop
 80069e0:	080069f1 	.word	0x080069f1
 80069e4:	08006a01 	.word	0x08006a01
 80069e8:	080069f9 	.word	0x080069f9
 80069ec:	08006a09 	.word	0x08006a09
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f6:	e0ab      	b.n	8006b50 <UART_SetConfig+0x210>
 80069f8:	2302      	movs	r3, #2
 80069fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fe:	e0a7      	b.n	8006b50 <UART_SetConfig+0x210>
 8006a00:	2304      	movs	r3, #4
 8006a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a06:	e0a3      	b.n	8006b50 <UART_SetConfig+0x210>
 8006a08:	2308      	movs	r3, #8
 8006a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a0e:	e09f      	b.n	8006b50 <UART_SetConfig+0x210>
 8006a10:	2310      	movs	r3, #16
 8006a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a16:	e09b      	b.n	8006b50 <UART_SetConfig+0x210>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a76      	ldr	r2, [pc, #472]	; (8006bf8 <UART_SetConfig+0x2b8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d138      	bne.n	8006a94 <UART_SetConfig+0x154>
 8006a22:	4b74      	ldr	r3, [pc, #464]	; (8006bf4 <UART_SetConfig+0x2b4>)
 8006a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a28:	f003 030c 	and.w	r3, r3, #12
 8006a2c:	2b0c      	cmp	r3, #12
 8006a2e:	d82d      	bhi.n	8006a8c <UART_SetConfig+0x14c>
 8006a30:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <UART_SetConfig+0xf8>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006a6d 	.word	0x08006a6d
 8006a3c:	08006a8d 	.word	0x08006a8d
 8006a40:	08006a8d 	.word	0x08006a8d
 8006a44:	08006a8d 	.word	0x08006a8d
 8006a48:	08006a7d 	.word	0x08006a7d
 8006a4c:	08006a8d 	.word	0x08006a8d
 8006a50:	08006a8d 	.word	0x08006a8d
 8006a54:	08006a8d 	.word	0x08006a8d
 8006a58:	08006a75 	.word	0x08006a75
 8006a5c:	08006a8d 	.word	0x08006a8d
 8006a60:	08006a8d 	.word	0x08006a8d
 8006a64:	08006a8d 	.word	0x08006a8d
 8006a68:	08006a85 	.word	0x08006a85
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a72:	e06d      	b.n	8006b50 <UART_SetConfig+0x210>
 8006a74:	2302      	movs	r3, #2
 8006a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7a:	e069      	b.n	8006b50 <UART_SetConfig+0x210>
 8006a7c:	2304      	movs	r3, #4
 8006a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a82:	e065      	b.n	8006b50 <UART_SetConfig+0x210>
 8006a84:	2308      	movs	r3, #8
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8a:	e061      	b.n	8006b50 <UART_SetConfig+0x210>
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a92:	e05d      	b.n	8006b50 <UART_SetConfig+0x210>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a58      	ldr	r2, [pc, #352]	; (8006bfc <UART_SetConfig+0x2bc>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d125      	bne.n	8006aea <UART_SetConfig+0x1aa>
 8006a9e:	4b55      	ldr	r3, [pc, #340]	; (8006bf4 <UART_SetConfig+0x2b4>)
 8006aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006aa8:	2b30      	cmp	r3, #48	; 0x30
 8006aaa:	d016      	beq.n	8006ada <UART_SetConfig+0x19a>
 8006aac:	2b30      	cmp	r3, #48	; 0x30
 8006aae:	d818      	bhi.n	8006ae2 <UART_SetConfig+0x1a2>
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d00a      	beq.n	8006aca <UART_SetConfig+0x18a>
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	d814      	bhi.n	8006ae2 <UART_SetConfig+0x1a2>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <UART_SetConfig+0x182>
 8006abc:	2b10      	cmp	r3, #16
 8006abe:	d008      	beq.n	8006ad2 <UART_SetConfig+0x192>
 8006ac0:	e00f      	b.n	8006ae2 <UART_SetConfig+0x1a2>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac8:	e042      	b.n	8006b50 <UART_SetConfig+0x210>
 8006aca:	2302      	movs	r3, #2
 8006acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad0:	e03e      	b.n	8006b50 <UART_SetConfig+0x210>
 8006ad2:	2304      	movs	r3, #4
 8006ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad8:	e03a      	b.n	8006b50 <UART_SetConfig+0x210>
 8006ada:	2308      	movs	r3, #8
 8006adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae0:	e036      	b.n	8006b50 <UART_SetConfig+0x210>
 8006ae2:	2310      	movs	r3, #16
 8006ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae8:	e032      	b.n	8006b50 <UART_SetConfig+0x210>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a3f      	ldr	r2, [pc, #252]	; (8006bec <UART_SetConfig+0x2ac>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d12a      	bne.n	8006b4a <UART_SetConfig+0x20a>
 8006af4:	4b3f      	ldr	r3, [pc, #252]	; (8006bf4 <UART_SetConfig+0x2b4>)
 8006af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006afa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006afe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b02:	d01a      	beq.n	8006b3a <UART_SetConfig+0x1fa>
 8006b04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b08:	d81b      	bhi.n	8006b42 <UART_SetConfig+0x202>
 8006b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b0e:	d00c      	beq.n	8006b2a <UART_SetConfig+0x1ea>
 8006b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b14:	d815      	bhi.n	8006b42 <UART_SetConfig+0x202>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <UART_SetConfig+0x1e2>
 8006b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b1e:	d008      	beq.n	8006b32 <UART_SetConfig+0x1f2>
 8006b20:	e00f      	b.n	8006b42 <UART_SetConfig+0x202>
 8006b22:	2300      	movs	r3, #0
 8006b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b28:	e012      	b.n	8006b50 <UART_SetConfig+0x210>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b30:	e00e      	b.n	8006b50 <UART_SetConfig+0x210>
 8006b32:	2304      	movs	r3, #4
 8006b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b38:	e00a      	b.n	8006b50 <UART_SetConfig+0x210>
 8006b3a:	2308      	movs	r3, #8
 8006b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b40:	e006      	b.n	8006b50 <UART_SetConfig+0x210>
 8006b42:	2310      	movs	r3, #16
 8006b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b48:	e002      	b.n	8006b50 <UART_SetConfig+0x210>
 8006b4a:	2310      	movs	r3, #16
 8006b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a25      	ldr	r2, [pc, #148]	; (8006bec <UART_SetConfig+0x2ac>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	f040 808a 	bne.w	8006c70 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d824      	bhi.n	8006bae <UART_SetConfig+0x26e>
 8006b64:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <UART_SetConfig+0x22c>)
 8006b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6a:	bf00      	nop
 8006b6c:	08006b91 	.word	0x08006b91
 8006b70:	08006baf 	.word	0x08006baf
 8006b74:	08006b99 	.word	0x08006b99
 8006b78:	08006baf 	.word	0x08006baf
 8006b7c:	08006b9f 	.word	0x08006b9f
 8006b80:	08006baf 	.word	0x08006baf
 8006b84:	08006baf 	.word	0x08006baf
 8006b88:	08006baf 	.word	0x08006baf
 8006b8c:	08006ba7 	.word	0x08006ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b90:	f7fd fa78 	bl	8004084 <HAL_RCC_GetPCLK1Freq>
 8006b94:	61f8      	str	r0, [r7, #28]
        break;
 8006b96:	e010      	b.n	8006bba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b98:	4b19      	ldr	r3, [pc, #100]	; (8006c00 <UART_SetConfig+0x2c0>)
 8006b9a:	61fb      	str	r3, [r7, #28]
        break;
 8006b9c:	e00d      	b.n	8006bba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b9e:	f7fd f9d9 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8006ba2:	61f8      	str	r0, [r7, #28]
        break;
 8006ba4:	e009      	b.n	8006bba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006baa:	61fb      	str	r3, [r7, #28]
        break;
 8006bac:	e005      	b.n	8006bba <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006bb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8109 	beq.w	8006dd4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	4413      	add	r3, r2
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d305      	bcc.n	8006bde <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d912      	bls.n	8006c04 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006be4:	e0f6      	b.n	8006dd4 <UART_SetConfig+0x494>
 8006be6:	bf00      	nop
 8006be8:	efff69f3 	.word	0xefff69f3
 8006bec:	40008000 	.word	0x40008000
 8006bf0:	40013800 	.word	0x40013800
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	40004400 	.word	0x40004400
 8006bfc:	40004800 	.word	0x40004800
 8006c00:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	2200      	movs	r2, #0
 8006c08:	461c      	mov	r4, r3
 8006c0a:	4615      	mov	r5, r2
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	022b      	lsls	r3, r5, #8
 8006c16:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c1a:	0222      	lsls	r2, r4, #8
 8006c1c:	68f9      	ldr	r1, [r7, #12]
 8006c1e:	6849      	ldr	r1, [r1, #4]
 8006c20:	0849      	lsrs	r1, r1, #1
 8006c22:	2000      	movs	r0, #0
 8006c24:	4688      	mov	r8, r1
 8006c26:	4681      	mov	r9, r0
 8006c28:	eb12 0a08 	adds.w	sl, r2, r8
 8006c2c:	eb43 0b09 	adc.w	fp, r3, r9
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	603b      	str	r3, [r7, #0]
 8006c38:	607a      	str	r2, [r7, #4]
 8006c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c3e:	4650      	mov	r0, sl
 8006c40:	4659      	mov	r1, fp
 8006c42:	f7f9 ffb1 	bl	8000ba8 <__aeabi_uldivmod>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c54:	d308      	bcc.n	8006c68 <UART_SetConfig+0x328>
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c5c:	d204      	bcs.n	8006c68 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	60da      	str	r2, [r3, #12]
 8006c66:	e0b5      	b.n	8006dd4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c6e:	e0b1      	b.n	8006dd4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c78:	d15d      	bne.n	8006d36 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c7e:	2b08      	cmp	r3, #8
 8006c80:	d827      	bhi.n	8006cd2 <UART_SetConfig+0x392>
 8006c82:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <UART_SetConfig+0x348>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006cad 	.word	0x08006cad
 8006c8c:	08006cb5 	.word	0x08006cb5
 8006c90:	08006cbd 	.word	0x08006cbd
 8006c94:	08006cd3 	.word	0x08006cd3
 8006c98:	08006cc3 	.word	0x08006cc3
 8006c9c:	08006cd3 	.word	0x08006cd3
 8006ca0:	08006cd3 	.word	0x08006cd3
 8006ca4:	08006cd3 	.word	0x08006cd3
 8006ca8:	08006ccb 	.word	0x08006ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cac:	f7fd f9ea 	bl	8004084 <HAL_RCC_GetPCLK1Freq>
 8006cb0:	61f8      	str	r0, [r7, #28]
        break;
 8006cb2:	e014      	b.n	8006cde <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cb4:	f7fd f9fc 	bl	80040b0 <HAL_RCC_GetPCLK2Freq>
 8006cb8:	61f8      	str	r0, [r7, #28]
        break;
 8006cba:	e010      	b.n	8006cde <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cbc:	4b4c      	ldr	r3, [pc, #304]	; (8006df0 <UART_SetConfig+0x4b0>)
 8006cbe:	61fb      	str	r3, [r7, #28]
        break;
 8006cc0:	e00d      	b.n	8006cde <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc2:	f7fd f947 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8006cc6:	61f8      	str	r0, [r7, #28]
        break;
 8006cc8:	e009      	b.n	8006cde <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cce:	61fb      	str	r3, [r7, #28]
        break;
 8006cd0:	e005      	b.n	8006cde <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006cdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d077      	beq.n	8006dd4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	005a      	lsls	r2, r3, #1
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	085b      	lsrs	r3, r3, #1
 8006cee:	441a      	add	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	2b0f      	cmp	r3, #15
 8006cfe:	d916      	bls.n	8006d2e <UART_SetConfig+0x3ee>
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d06:	d212      	bcs.n	8006d2e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f023 030f 	bic.w	r3, r3, #15
 8006d10:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	085b      	lsrs	r3, r3, #1
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	8afb      	ldrh	r3, [r7, #22]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	8afa      	ldrh	r2, [r7, #22]
 8006d2a:	60da      	str	r2, [r3, #12]
 8006d2c:	e052      	b.n	8006dd4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d34:	e04e      	b.n	8006dd4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d827      	bhi.n	8006d8e <UART_SetConfig+0x44e>
 8006d3e:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <UART_SetConfig+0x404>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006d69 	.word	0x08006d69
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d79 	.word	0x08006d79
 8006d50:	08006d8f 	.word	0x08006d8f
 8006d54:	08006d7f 	.word	0x08006d7f
 8006d58:	08006d8f 	.word	0x08006d8f
 8006d5c:	08006d8f 	.word	0x08006d8f
 8006d60:	08006d8f 	.word	0x08006d8f
 8006d64:	08006d87 	.word	0x08006d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d68:	f7fd f98c 	bl	8004084 <HAL_RCC_GetPCLK1Freq>
 8006d6c:	61f8      	str	r0, [r7, #28]
        break;
 8006d6e:	e014      	b.n	8006d9a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d70:	f7fd f99e 	bl	80040b0 <HAL_RCC_GetPCLK2Freq>
 8006d74:	61f8      	str	r0, [r7, #28]
        break;
 8006d76:	e010      	b.n	8006d9a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d78:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <UART_SetConfig+0x4b0>)
 8006d7a:	61fb      	str	r3, [r7, #28]
        break;
 8006d7c:	e00d      	b.n	8006d9a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d7e:	f7fd f8e9 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8006d82:	61f8      	str	r0, [r7, #28]
        break;
 8006d84:	e009      	b.n	8006d9a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d8a:	61fb      	str	r3, [r7, #28]
        break;
 8006d8c:	e005      	b.n	8006d9a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d98:	bf00      	nop
    }

    if (pclk != 0U)
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d019      	beq.n	8006dd4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	085a      	lsrs	r2, r3, #1
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	441a      	add	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b0f      	cmp	r3, #15
 8006db8:	d909      	bls.n	8006dce <UART_SetConfig+0x48e>
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc0:	d205      	bcs.n	8006dce <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60da      	str	r2, [r3, #12]
 8006dcc:	e002      	b.n	8006dd4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006de0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3728      	adds	r7, #40	; 0x28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dee:	bf00      	nop
 8006df0:	00f42400 	.word	0x00f42400

08006df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	f003 0310 	and.w	r3, r3, #16
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00a      	beq.n	8006ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01a      	beq.n	8006f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ef2:	d10a      	bne.n	8006f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	605a      	str	r2, [r3, #4]
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af02      	add	r7, sp, #8
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f48:	f7fb fdba 	bl	8002ac0 <HAL_GetTick>
 8006f4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d10e      	bne.n	8006f7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f82d 	bl	8006fca <UART_WaitOnFlagUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e023      	b.n	8006fc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	d10e      	bne.n	8006fa6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f817 	bl	8006fca <UART_WaitOnFlagUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e00d      	b.n	8006fc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b09c      	sub	sp, #112	; 0x70
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	603b      	str	r3, [r7, #0]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fda:	e0a5      	b.n	8007128 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe2:	f000 80a1 	beq.w	8007128 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe6:	f7fb fd6b 	bl	8002ac0 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d302      	bcc.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x32>
 8006ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d13e      	bne.n	800707a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007004:	e853 3f00 	ldrex	r3, [r3]
 8007008:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800700a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800700c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007010:	667b      	str	r3, [r7, #100]	; 0x64
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800701a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800701c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007020:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1e6      	bne.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3308      	adds	r3, #8
 8007034:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007040:	f023 0301 	bic.w	r3, r3, #1
 8007044:	663b      	str	r3, [r7, #96]	; 0x60
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3308      	adds	r3, #8
 800704c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800704e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007050:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800705c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e5      	bne.n	800702e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2220      	movs	r2, #32
 8007066:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e067      	b.n	800714a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d04f      	beq.n	8007128 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007096:	d147      	bne.n	8007128 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070a0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c0:	637b      	str	r3, [r7, #52]	; 0x34
 80070c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e6      	bne.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3308      	adds	r3, #8
 80070da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	e853 3f00 	ldrex	r3, [r3]
 80070e2:	613b      	str	r3, [r7, #16]
   return(result);
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f023 0301 	bic.w	r3, r3, #1
 80070ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3308      	adds	r3, #8
 80070f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070f4:	623a      	str	r2, [r7, #32]
 80070f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	69f9      	ldr	r1, [r7, #28]
 80070fa:	6a3a      	ldr	r2, [r7, #32]
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	61bb      	str	r3, [r7, #24]
   return(result);
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e5      	bne.n	80070d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2220      	movs	r2, #32
 800710c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2220      	movs	r2, #32
 8007112:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2220      	movs	r2, #32
 8007118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e010      	b.n	800714a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	69da      	ldr	r2, [r3, #28]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	4013      	ands	r3, r2
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	429a      	cmp	r2, r3
 8007136:	bf0c      	ite	eq
 8007138:	2301      	moveq	r3, #1
 800713a:	2300      	movne	r3, #0
 800713c:	b2db      	uxtb	r3, r3
 800713e:	461a      	mov	r2, r3
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	429a      	cmp	r2, r3
 8007144:	f43f af4a 	beq.w	8006fdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3770      	adds	r7, #112	; 0x70
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007154:	b480      	push	{r7}
 8007156:	b097      	sub	sp, #92	; 0x5c
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	4613      	mov	r3, r2
 8007160:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	88fa      	ldrh	r2, [r7, #6]
 800716c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	88fa      	ldrh	r2, [r7, #6]
 8007174:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007186:	d10e      	bne.n	80071a6 <UART_Start_Receive_IT+0x52>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d105      	bne.n	800719c <UART_Start_Receive_IT+0x48>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007196:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800719a:	e02d      	b.n	80071f8 <UART_Start_Receive_IT+0xa4>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	22ff      	movs	r2, #255	; 0xff
 80071a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071a4:	e028      	b.n	80071f8 <UART_Start_Receive_IT+0xa4>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10d      	bne.n	80071ca <UART_Start_Receive_IT+0x76>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <UART_Start_Receive_IT+0x6c>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	22ff      	movs	r2, #255	; 0xff
 80071ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071be:	e01b      	b.n	80071f8 <UART_Start_Receive_IT+0xa4>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	227f      	movs	r2, #127	; 0x7f
 80071c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071c8:	e016      	b.n	80071f8 <UART_Start_Receive_IT+0xa4>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071d2:	d10d      	bne.n	80071f0 <UART_Start_Receive_IT+0x9c>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d104      	bne.n	80071e6 <UART_Start_Receive_IT+0x92>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	227f      	movs	r2, #127	; 0x7f
 80071e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071e4:	e008      	b.n	80071f8 <UART_Start_Receive_IT+0xa4>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	223f      	movs	r2, #63	; 0x3f
 80071ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071ee:	e003      	b.n	80071f8 <UART_Start_Receive_IT+0xa4>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2222      	movs	r2, #34	; 0x22
 8007204:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3308      	adds	r3, #8
 800720c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	f043 0301 	orr.w	r3, r3, #1
 800721c:	657b      	str	r3, [r7, #84]	; 0x54
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3308      	adds	r3, #8
 8007224:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007226:	64ba      	str	r2, [r7, #72]	; 0x48
 8007228:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800722c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e5      	bne.n	8007206 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007242:	d107      	bne.n	8007254 <UART_Start_Receive_IT+0x100>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d103      	bne.n	8007254 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4a24      	ldr	r2, [pc, #144]	; (80072e0 <UART_Start_Receive_IT+0x18c>)
 8007250:	665a      	str	r2, [r3, #100]	; 0x64
 8007252:	e002      	b.n	800725a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4a23      	ldr	r2, [pc, #140]	; (80072e4 <UART_Start_Receive_IT+0x190>)
 8007258:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d019      	beq.n	800729e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800727e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007288:	637b      	str	r3, [r7, #52]	; 0x34
 800728a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800728e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e6      	bne.n	800726a <UART_Start_Receive_IT+0x116>
 800729c:	e018      	b.n	80072d0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	613b      	str	r3, [r7, #16]
   return(result);
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f043 0320 	orr.w	r3, r3, #32
 80072b2:	653b      	str	r3, [r7, #80]	; 0x50
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072bc:	623b      	str	r3, [r7, #32]
 80072be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	69f9      	ldr	r1, [r7, #28]
 80072c2:	6a3a      	ldr	r2, [r7, #32]
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e6      	bne.n	800729e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	375c      	adds	r7, #92	; 0x5c
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	0800758f 	.word	0x0800758f
 80072e4:	0800742f 	.word	0x0800742f

080072e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b095      	sub	sp, #84	; 0x54
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007304:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800730e:	643b      	str	r3, [r7, #64]	; 0x40
 8007310:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007314:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e6      	bne.n	80072f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3308      	adds	r3, #8
 8007328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	61fb      	str	r3, [r7, #28]
   return(result);
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	f023 0301 	bic.w	r3, r3, #1
 8007338:	64bb      	str	r3, [r7, #72]	; 0x48
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3308      	adds	r3, #8
 8007340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007344:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800734a:	e841 2300 	strex	r3, r2, [r1]
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e5      	bne.n	8007322 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800735a:	2b01      	cmp	r3, #1
 800735c:	d118      	bne.n	8007390 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	e853 3f00 	ldrex	r3, [r3]
 800736a:	60bb      	str	r3, [r7, #8]
   return(result);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f023 0310 	bic.w	r3, r3, #16
 8007372:	647b      	str	r3, [r7, #68]	; 0x44
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800737c:	61bb      	str	r3, [r7, #24]
 800737e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	6979      	ldr	r1, [r7, #20]
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	613b      	str	r3, [r7, #16]
   return(result);
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e6      	bne.n	800735e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2220      	movs	r2, #32
 8007394:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80073a2:	bf00      	nop
 80073a4:	3754      	adds	r7, #84	; 0x54
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f7ff faa1 	bl	8006914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073d2:	bf00      	nop
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b088      	sub	sp, #32
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	e853 3f00 	ldrex	r3, [r3]
 80073ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f6:	61fb      	str	r3, [r7, #28]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	461a      	mov	r2, r3
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	61bb      	str	r3, [r7, #24]
 8007402:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007404:	6979      	ldr	r1, [r7, #20]
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	e841 2300 	strex	r3, r2, [r1]
 800740c:	613b      	str	r3, [r7, #16]
   return(result);
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1e6      	bne.n	80073e2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2220      	movs	r2, #32
 8007418:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff fa6d 	bl	8006900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007426:	bf00      	nop
 8007428:	3720      	adds	r7, #32
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b096      	sub	sp, #88	; 0x58
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800743c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007444:	2b22      	cmp	r3, #34	; 0x22
 8007446:	f040 8094 	bne.w	8007572 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007450:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007454:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007458:	b2d9      	uxtb	r1, r3
 800745a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800745e:	b2da      	uxtb	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007464:	400a      	ands	r2, r1
 8007466:	b2d2      	uxtb	r2, r2
 8007468:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800747a:	b29b      	uxth	r3, r3
 800747c:	3b01      	subs	r3, #1
 800747e:	b29a      	uxth	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d179      	bne.n	8007586 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074a6:	653b      	str	r3, [r7, #80]	; 0x50
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074b0:	647b      	str	r3, [r7, #68]	; 0x44
 80074b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e6      	bne.n	8007492 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3308      	adds	r3, #8
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	623b      	str	r3, [r7, #32]
   return(result);
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	f023 0301 	bic.w	r3, r3, #1
 80074da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3308      	adds	r3, #8
 80074e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074e4:	633a      	str	r2, [r7, #48]	; 0x30
 80074e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e5      	bne.n	80074c4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2220      	movs	r2, #32
 80074fc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007508:	2b01      	cmp	r3, #1
 800750a:	d12e      	bne.n	800756a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	e853 3f00 	ldrex	r3, [r3]
 800751e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0310 	bic.w	r3, r3, #16
 8007526:	64bb      	str	r3, [r7, #72]	; 0x48
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007530:	61fb      	str	r3, [r7, #28]
 8007532:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	69b9      	ldr	r1, [r7, #24]
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	e841 2300 	strex	r3, r2, [r1]
 800753c:	617b      	str	r3, [r7, #20]
   return(result);
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1e6      	bne.n	8007512 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	f003 0310 	and.w	r3, r3, #16
 800754e:	2b10      	cmp	r3, #16
 8007550:	d103      	bne.n	800755a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2210      	movs	r2, #16
 8007558:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff f9e0 	bl	8006928 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007568:	e00d      	b.n	8007586 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7f9 ffa4 	bl	80014b8 <HAL_UART_RxCpltCallback>
}
 8007570:	e009      	b.n	8007586 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	8b1b      	ldrh	r3, [r3, #24]
 8007578:	b29a      	uxth	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0208 	orr.w	r2, r2, #8
 8007582:	b292      	uxth	r2, r2
 8007584:	831a      	strh	r2, [r3, #24]
}
 8007586:	bf00      	nop
 8007588:	3758      	adds	r7, #88	; 0x58
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b096      	sub	sp, #88	; 0x58
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800759c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075a4:	2b22      	cmp	r3, #34	; 0x22
 80075a6:	f040 8094 	bne.w	80076d2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075b0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80075ba:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80075be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075c2:	4013      	ands	r3, r2
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ce:	1c9a      	adds	r2, r3, #2
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075da:	b29b      	uxth	r3, r3
 80075dc:	3b01      	subs	r3, #1
 80075de:	b29a      	uxth	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d179      	bne.n	80076e6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007610:	643b      	str	r3, [r7, #64]	; 0x40
 8007612:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007614:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007618:	e841 2300 	strex	r3, r2, [r1]
 800761c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e6      	bne.n	80075f2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3308      	adds	r3, #8
 800762a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	6a3b      	ldr	r3, [r7, #32]
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	61fb      	str	r3, [r7, #28]
   return(result);
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	f023 0301 	bic.w	r3, r3, #1
 800763a:	64bb      	str	r3, [r7, #72]	; 0x48
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3308      	adds	r3, #8
 8007642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800764a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764c:	e841 2300 	strex	r3, r2, [r1]
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e5      	bne.n	8007624 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007668:	2b01      	cmp	r3, #1
 800766a:	d12e      	bne.n	80076ca <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f023 0310 	bic.w	r3, r3, #16
 8007686:	647b      	str	r3, [r7, #68]	; 0x44
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007690:	61bb      	str	r3, [r7, #24]
 8007692:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6979      	ldr	r1, [r7, #20]
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	613b      	str	r3, [r7, #16]
   return(result);
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e6      	bne.n	8007672 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	f003 0310 	and.w	r3, r3, #16
 80076ae:	2b10      	cmp	r3, #16
 80076b0:	d103      	bne.n	80076ba <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2210      	movs	r2, #16
 80076b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff f930 	bl	8006928 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076c8:	e00d      	b.n	80076e6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7f9 fef4 	bl	80014b8 <HAL_UART_RxCpltCallback>
}
 80076d0:	e009      	b.n	80076e6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	8b1b      	ldrh	r3, [r3, #24]
 80076d8:	b29a      	uxth	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0208 	orr.w	r2, r2, #8
 80076e2:	b292      	uxth	r2, r2
 80076e4:	831a      	strh	r2, [r3, #24]
}
 80076e6:	bf00      	nop
 80076e8:	3758      	adds	r7, #88	; 0x58
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <setCSLine>:
#define RES14           14

#define AMT22_DELAY     10

void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	460b      	mov	r3, r1
 800770c:	807b      	strh	r3, [r7, #2]
 800770e:	4613      	mov	r3, r2
 8007710:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8007712:	787a      	ldrb	r2, [r7, #1]
 8007714:	887b      	ldrh	r3, [r7, #2]
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7fb fe73 	bl	8003404 <HAL_GPIO_WritePin>
}
 800771e:	bf00      	nop
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b088      	sub	sp, #32
 800772a:	af02      	add	r7, sp, #8
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	461a      	mov	r2, r3
 8007732:	460b      	mov	r3, r1
 8007734:	72fb      	strb	r3, [r7, #11]
 8007736:	4613      	mov	r3, r2
 8007738:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 800773a:	893b      	ldrh	r3, [r7, #8]
 800773c:	2200      	movs	r2, #0
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff ffde 	bl	8007702 <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8007746:	200a      	movs	r0, #10
 8007748:	f000 f8d2 	bl	80078f0 <delay_us_AMT22>

  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 800774c:	f107 0217 	add.w	r2, r7, #23
 8007750:	f107 010b 	add.w	r1, r7, #11
 8007754:	230a      	movs	r3, #10
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	2301      	movs	r3, #1
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7fd f8fd 	bl	800495a <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  //  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8007760:	200a      	movs	r0, #10
 8007762:	f000 f8c5 	bl	80078f0 <delay_us_AMT22>

  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 8007766:	f897 2020 	ldrb.w	r2, [r7, #32]
 800776a:	893b      	ldrh	r3, [r7, #8]
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff ffc7 	bl	8007702 <setCSLine>

  return data;
 8007774:	7dfb      	ldrb	r3, [r7, #23]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b08c      	sub	sp, #48	; 0x30
 8007782:	af02      	add	r7, sp, #8
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	4611      	mov	r1, r2
 800778a:	461a      	mov	r2, r3
 800778c:	460b      	mov	r3, r1
 800778e:	80fb      	strh	r3, [r7, #6]
 8007790:	4613      	mov	r3, r2
 8007792:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8;
 8007794:	88fa      	ldrh	r2, [r7, #6]
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	2300      	movs	r3, #0
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	4613      	mov	r3, r2
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	2100      	movs	r1, #0
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f7ff ffbe 	bl	8007726 <spiWriteRead>
 80077aa:	4603      	mov	r3, r0
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	021b      	lsls	r3, r3, #8
 80077b0:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 80077b2:	200a      	movs	r0, #10
 80077b4:	f000 f89c 	bl	80078f0 <delay_us_AMT22>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer);
 80077b8:	88fa      	ldrh	r2, [r7, #6]
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	2301      	movs	r3, #1
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	4613      	mov	r3, r2
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	2100      	movs	r1, #0
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f7ff ffac 	bl	8007726 <spiWriteRead>
 80077ce:	4603      	mov	r3, r0
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077d4:	4313      	orrs	r3, r2
 80077d6:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 80077d8:	2300      	movs	r3, #0
 80077da:	623b      	str	r3, [r7, #32]
 80077dc:	e010      	b.n	8007800 <getPositionSPI+0x82>
 80077de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	fa42 f303 	asr.w	r3, r2, r3
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	b2d9      	uxtb	r1, r3
 80077ee:	f107 0210 	add.w	r2, r7, #16
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	4413      	add	r3, r2
 80077f6:	460a      	mov	r2, r1
 80077f8:	701a      	strb	r2, [r3, #0]
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	3301      	adds	r3, #1
 80077fe:	623b      	str	r3, [r7, #32]
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	2b0f      	cmp	r3, #15
 8007804:	ddeb      	ble.n	80077de <getPositionSPI+0x60>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
 if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8007806:	7ffb      	ldrb	r3, [r7, #31]
 8007808:	4619      	mov	r1, r3
 800780a:	7f7a      	ldrb	r2, [r7, #29]
 800780c:	7efb      	ldrb	r3, [r7, #27]
 800780e:	4053      	eors	r3, r2
 8007810:	b2da      	uxtb	r2, r3
 8007812:	7e7b      	ldrb	r3, [r7, #25]
 8007814:	4053      	eors	r3, r2
 8007816:	b2da      	uxtb	r2, r3
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	4053      	eors	r3, r2
 800781c:	b2da      	uxtb	r2, r3
 800781e:	7d7b      	ldrb	r3, [r7, #21]
 8007820:	4053      	eors	r3, r2
 8007822:	b2da      	uxtb	r2, r3
 8007824:	7cfb      	ldrb	r3, [r7, #19]
 8007826:	4053      	eors	r3, r2
 8007828:	b2da      	uxtb	r2, r3
 800782a:	7c7b      	ldrb	r3, [r7, #17]
 800782c:	429a      	cmp	r2, r3
 800782e:	bf0c      	ite	eq
 8007830:	2301      	moveq	r3, #1
 8007832:	2300      	movne	r3, #0
 8007834:	b2db      	uxtb	r3, r3
 8007836:	4299      	cmp	r1, r3
 8007838:	d11e      	bne.n	8007878 <getPositionSPI+0xfa>
         && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 800783a:	7fbb      	ldrb	r3, [r7, #30]
 800783c:	4619      	mov	r1, r3
 800783e:	7f3a      	ldrb	r2, [r7, #28]
 8007840:	7ebb      	ldrb	r3, [r7, #26]
 8007842:	4053      	eors	r3, r2
 8007844:	b2da      	uxtb	r2, r3
 8007846:	7e3b      	ldrb	r3, [r7, #24]
 8007848:	4053      	eors	r3, r2
 800784a:	b2da      	uxtb	r2, r3
 800784c:	7dbb      	ldrb	r3, [r7, #22]
 800784e:	4053      	eors	r3, r2
 8007850:	b2da      	uxtb	r2, r3
 8007852:	7d3b      	ldrb	r3, [r7, #20]
 8007854:	4053      	eors	r3, r2
 8007856:	b2da      	uxtb	r2, r3
 8007858:	7cbb      	ldrb	r3, [r7, #18]
 800785a:	4053      	eors	r3, r2
 800785c:	b2da      	uxtb	r2, r3
 800785e:	7c3b      	ldrb	r3, [r7, #16]
 8007860:	429a      	cmp	r2, r3
 8007862:	bf0c      	ite	eq
 8007864:	2301      	moveq	r3, #1
 8007866:	2300      	movne	r3, #0
 8007868:	b2db      	uxtb	r3, r3
 800786a:	4299      	cmp	r1, r3
 800786c:	d104      	bne.n	8007878 <getPositionSPI+0xfa>
   {
     //we got back a good position, so just mask away the checkbits
     currentPosition &= 0x3FFF;
 800786e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007870:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007874:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007876:	e002      	b.n	800787e <getPositionSPI+0x100>
   }
 else
 {
   currentPosition = 0xFFFF; //bad position
 8007878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800787c:	84fb      	strh	r3, [r7, #38]	; 0x26
 }
  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 800787e:	797b      	ldrb	r3, [r7, #5]
 8007880:	2b0c      	cmp	r3, #12
 8007882:	d107      	bne.n	8007894 <getPositionSPI+0x116>
 8007884:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800788a:	4293      	cmp	r3, r2
 800788c:	d002      	beq.n	8007894 <getPositionSPI+0x116>
 800788e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007890:	089b      	lsrs	r3, r3, #2
 8007892:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 8007894:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8007896:	4618      	mov	r0, r3
 8007898:	3728      	adds	r7, #40	; 0x28
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <resetAMT22>:
  //power on delay is 200ms
  HAL_Delay(250);
}

void resetAMT22(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, TIM_HandleTypeDef *timer)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b086      	sub	sp, #24
 80078a2:	af02      	add	r7, sp, #8
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	603b      	str	r3, [r7, #0]
 80078aa:	4613      	mov	r3, r2
 80078ac:	80fb      	strh	r3, [r7, #6]
  spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer);
 80078ae:	88fa      	ldrh	r2, [r7, #6]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	2300      	movs	r3, #0
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4613      	mov	r3, r2
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	2100      	movs	r1, #0
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f7ff ff31 	bl	8007726 <spiWriteRead>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 80078c4:	200a      	movs	r0, #10
 80078c6:	f000 f813 	bl	80078f0 <delay_us_AMT22>

  spiWriteRead(hspi, AMT22_RESET, encoderPort, encoderPin, 1, timer);
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	2301      	movs	r3, #1
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	4613      	mov	r3, r2
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	2160      	movs	r1, #96	; 0x60
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f7ff ff23 	bl	8007726 <spiWriteRead>

//  delay(timer, 250);
  // delay_us_AMT22(250);
  //power on delay is 200ms
  HAL_Delay(250);
 80078e0:	20fa      	movs	r0, #250	; 0xfa
 80078e2:	f7fb f8f9 	bl	8002ad8 <HAL_Delay>
}
 80078e6:	bf00      	nop
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <delay_us_AMT22>:
			passedTime +=timer->Init.Period;
		}
	}
}
void delay_us_AMT22 (uint16_t us)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80078fa:	4b09      	ldr	r3, [pc, #36]	; (8007920 <delay_us_AMT22+0x30>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2200      	movs	r2, #0
 8007900:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8007902:	bf00      	nop
 8007904:	4b06      	ldr	r3, [pc, #24]	; (8007920 <delay_us_AMT22+0x30>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	429a      	cmp	r2, r3
 800790e:	d3f9      	bcc.n	8007904 <delay_us_AMT22+0x14>
}
 8007910:	bf00      	nop
 8007912:	bf00      	nop
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	20000520 	.word	0x20000520

08007924 <_Znaj>:
 8007924:	f000 b800 	b.w	8007928 <_Znwj>

08007928 <_Znwj>:
 8007928:	2801      	cmp	r0, #1
 800792a:	bf38      	it	cc
 800792c:	2001      	movcc	r0, #1
 800792e:	b510      	push	{r4, lr}
 8007930:	4604      	mov	r4, r0
 8007932:	4620      	mov	r0, r4
 8007934:	f000 f844 	bl	80079c0 <malloc>
 8007938:	b930      	cbnz	r0, 8007948 <_Znwj+0x20>
 800793a:	f000 f807 	bl	800794c <_ZSt15get_new_handlerv>
 800793e:	b908      	cbnz	r0, 8007944 <_Znwj+0x1c>
 8007940:	f000 f80c 	bl	800795c <abort>
 8007944:	4780      	blx	r0
 8007946:	e7f4      	b.n	8007932 <_Znwj+0xa>
 8007948:	bd10      	pop	{r4, pc}
	...

0800794c <_ZSt15get_new_handlerv>:
 800794c:	4b02      	ldr	r3, [pc, #8]	; (8007958 <_ZSt15get_new_handlerv+0xc>)
 800794e:	6818      	ldr	r0, [r3, #0]
 8007950:	f3bf 8f5b 	dmb	ish
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	20000688 	.word	0x20000688

0800795c <abort>:
 800795c:	b508      	push	{r3, lr}
 800795e:	2006      	movs	r0, #6
 8007960:	f000 fe62 	bl	8008628 <raise>
 8007964:	2001      	movs	r0, #1
 8007966:	f7f9 ffcf 	bl	8001908 <_exit>
	...

0800796c <__errno>:
 800796c:	4b01      	ldr	r3, [pc, #4]	; (8007974 <__errno+0x8>)
 800796e:	6818      	ldr	r0, [r3, #0]
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	2000003c 	.word	0x2000003c

08007978 <__libc_init_array>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	4d0d      	ldr	r5, [pc, #52]	; (80079b0 <__libc_init_array+0x38>)
 800797c:	4c0d      	ldr	r4, [pc, #52]	; (80079b4 <__libc_init_array+0x3c>)
 800797e:	1b64      	subs	r4, r4, r5
 8007980:	10a4      	asrs	r4, r4, #2
 8007982:	2600      	movs	r6, #0
 8007984:	42a6      	cmp	r6, r4
 8007986:	d109      	bne.n	800799c <__libc_init_array+0x24>
 8007988:	4d0b      	ldr	r5, [pc, #44]	; (80079b8 <__libc_init_array+0x40>)
 800798a:	4c0c      	ldr	r4, [pc, #48]	; (80079bc <__libc_init_array+0x44>)
 800798c:	f003 f9c6 	bl	800ad1c <_init>
 8007990:	1b64      	subs	r4, r4, r5
 8007992:	10a4      	asrs	r4, r4, #2
 8007994:	2600      	movs	r6, #0
 8007996:	42a6      	cmp	r6, r4
 8007998:	d105      	bne.n	80079a6 <__libc_init_array+0x2e>
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a0:	4798      	blx	r3
 80079a2:	3601      	adds	r6, #1
 80079a4:	e7ee      	b.n	8007984 <__libc_init_array+0xc>
 80079a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079aa:	4798      	blx	r3
 80079ac:	3601      	adds	r6, #1
 80079ae:	e7f2      	b.n	8007996 <__libc_init_array+0x1e>
 80079b0:	0800b864 	.word	0x0800b864
 80079b4:	0800b864 	.word	0x0800b864
 80079b8:	0800b864 	.word	0x0800b864
 80079bc:	0800b86c 	.word	0x0800b86c

080079c0 <malloc>:
 80079c0:	4b02      	ldr	r3, [pc, #8]	; (80079cc <malloc+0xc>)
 80079c2:	4601      	mov	r1, r0
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	f000 b877 	b.w	8007ab8 <_malloc_r>
 80079ca:	bf00      	nop
 80079cc:	2000003c 	.word	0x2000003c

080079d0 <memset>:
 80079d0:	4402      	add	r2, r0
 80079d2:	4603      	mov	r3, r0
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d100      	bne.n	80079da <memset+0xa>
 80079d8:	4770      	bx	lr
 80079da:	f803 1b01 	strb.w	r1, [r3], #1
 80079de:	e7f9      	b.n	80079d4 <memset+0x4>

080079e0 <_free_r>:
 80079e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079e2:	2900      	cmp	r1, #0
 80079e4:	d044      	beq.n	8007a70 <_free_r+0x90>
 80079e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ea:	9001      	str	r0, [sp, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f1a1 0404 	sub.w	r4, r1, #4
 80079f2:	bfb8      	it	lt
 80079f4:	18e4      	addlt	r4, r4, r3
 80079f6:	f002 f8d5 	bl	8009ba4 <__malloc_lock>
 80079fa:	4a1e      	ldr	r2, [pc, #120]	; (8007a74 <_free_r+0x94>)
 80079fc:	9801      	ldr	r0, [sp, #4]
 80079fe:	6813      	ldr	r3, [r2, #0]
 8007a00:	b933      	cbnz	r3, 8007a10 <_free_r+0x30>
 8007a02:	6063      	str	r3, [r4, #4]
 8007a04:	6014      	str	r4, [r2, #0]
 8007a06:	b003      	add	sp, #12
 8007a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a0c:	f002 b8d0 	b.w	8009bb0 <__malloc_unlock>
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	d908      	bls.n	8007a26 <_free_r+0x46>
 8007a14:	6825      	ldr	r5, [r4, #0]
 8007a16:	1961      	adds	r1, r4, r5
 8007a18:	428b      	cmp	r3, r1
 8007a1a:	bf01      	itttt	eq
 8007a1c:	6819      	ldreq	r1, [r3, #0]
 8007a1e:	685b      	ldreq	r3, [r3, #4]
 8007a20:	1949      	addeq	r1, r1, r5
 8007a22:	6021      	streq	r1, [r4, #0]
 8007a24:	e7ed      	b.n	8007a02 <_free_r+0x22>
 8007a26:	461a      	mov	r2, r3
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	b10b      	cbz	r3, 8007a30 <_free_r+0x50>
 8007a2c:	42a3      	cmp	r3, r4
 8007a2e:	d9fa      	bls.n	8007a26 <_free_r+0x46>
 8007a30:	6811      	ldr	r1, [r2, #0]
 8007a32:	1855      	adds	r5, r2, r1
 8007a34:	42a5      	cmp	r5, r4
 8007a36:	d10b      	bne.n	8007a50 <_free_r+0x70>
 8007a38:	6824      	ldr	r4, [r4, #0]
 8007a3a:	4421      	add	r1, r4
 8007a3c:	1854      	adds	r4, r2, r1
 8007a3e:	42a3      	cmp	r3, r4
 8007a40:	6011      	str	r1, [r2, #0]
 8007a42:	d1e0      	bne.n	8007a06 <_free_r+0x26>
 8007a44:	681c      	ldr	r4, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	6053      	str	r3, [r2, #4]
 8007a4a:	4421      	add	r1, r4
 8007a4c:	6011      	str	r1, [r2, #0]
 8007a4e:	e7da      	b.n	8007a06 <_free_r+0x26>
 8007a50:	d902      	bls.n	8007a58 <_free_r+0x78>
 8007a52:	230c      	movs	r3, #12
 8007a54:	6003      	str	r3, [r0, #0]
 8007a56:	e7d6      	b.n	8007a06 <_free_r+0x26>
 8007a58:	6825      	ldr	r5, [r4, #0]
 8007a5a:	1961      	adds	r1, r4, r5
 8007a5c:	428b      	cmp	r3, r1
 8007a5e:	bf04      	itt	eq
 8007a60:	6819      	ldreq	r1, [r3, #0]
 8007a62:	685b      	ldreq	r3, [r3, #4]
 8007a64:	6063      	str	r3, [r4, #4]
 8007a66:	bf04      	itt	eq
 8007a68:	1949      	addeq	r1, r1, r5
 8007a6a:	6021      	streq	r1, [r4, #0]
 8007a6c:	6054      	str	r4, [r2, #4]
 8007a6e:	e7ca      	b.n	8007a06 <_free_r+0x26>
 8007a70:	b003      	add	sp, #12
 8007a72:	bd30      	pop	{r4, r5, pc}
 8007a74:	2000068c 	.word	0x2000068c

08007a78 <sbrk_aligned>:
 8007a78:	b570      	push	{r4, r5, r6, lr}
 8007a7a:	4e0e      	ldr	r6, [pc, #56]	; (8007ab4 <sbrk_aligned+0x3c>)
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	6831      	ldr	r1, [r6, #0]
 8007a80:	4605      	mov	r5, r0
 8007a82:	b911      	cbnz	r1, 8007a8a <sbrk_aligned+0x12>
 8007a84:	f000 fd98 	bl	80085b8 <_sbrk_r>
 8007a88:	6030      	str	r0, [r6, #0]
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f000 fd93 	bl	80085b8 <_sbrk_r>
 8007a92:	1c43      	adds	r3, r0, #1
 8007a94:	d00a      	beq.n	8007aac <sbrk_aligned+0x34>
 8007a96:	1cc4      	adds	r4, r0, #3
 8007a98:	f024 0403 	bic.w	r4, r4, #3
 8007a9c:	42a0      	cmp	r0, r4
 8007a9e:	d007      	beq.n	8007ab0 <sbrk_aligned+0x38>
 8007aa0:	1a21      	subs	r1, r4, r0
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f000 fd88 	bl	80085b8 <_sbrk_r>
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d101      	bne.n	8007ab0 <sbrk_aligned+0x38>
 8007aac:	f04f 34ff 	mov.w	r4, #4294967295
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	bd70      	pop	{r4, r5, r6, pc}
 8007ab4:	20000690 	.word	0x20000690

08007ab8 <_malloc_r>:
 8007ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007abc:	1ccd      	adds	r5, r1, #3
 8007abe:	f025 0503 	bic.w	r5, r5, #3
 8007ac2:	3508      	adds	r5, #8
 8007ac4:	2d0c      	cmp	r5, #12
 8007ac6:	bf38      	it	cc
 8007ac8:	250c      	movcc	r5, #12
 8007aca:	2d00      	cmp	r5, #0
 8007acc:	4607      	mov	r7, r0
 8007ace:	db01      	blt.n	8007ad4 <_malloc_r+0x1c>
 8007ad0:	42a9      	cmp	r1, r5
 8007ad2:	d905      	bls.n	8007ae0 <_malloc_r+0x28>
 8007ad4:	230c      	movs	r3, #12
 8007ad6:	603b      	str	r3, [r7, #0]
 8007ad8:	2600      	movs	r6, #0
 8007ada:	4630      	mov	r0, r6
 8007adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ae0:	4e2e      	ldr	r6, [pc, #184]	; (8007b9c <_malloc_r+0xe4>)
 8007ae2:	f002 f85f 	bl	8009ba4 <__malloc_lock>
 8007ae6:	6833      	ldr	r3, [r6, #0]
 8007ae8:	461c      	mov	r4, r3
 8007aea:	bb34      	cbnz	r4, 8007b3a <_malloc_r+0x82>
 8007aec:	4629      	mov	r1, r5
 8007aee:	4638      	mov	r0, r7
 8007af0:	f7ff ffc2 	bl	8007a78 <sbrk_aligned>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	4604      	mov	r4, r0
 8007af8:	d14d      	bne.n	8007b96 <_malloc_r+0xde>
 8007afa:	6834      	ldr	r4, [r6, #0]
 8007afc:	4626      	mov	r6, r4
 8007afe:	2e00      	cmp	r6, #0
 8007b00:	d140      	bne.n	8007b84 <_malloc_r+0xcc>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	4631      	mov	r1, r6
 8007b06:	4638      	mov	r0, r7
 8007b08:	eb04 0803 	add.w	r8, r4, r3
 8007b0c:	f000 fd54 	bl	80085b8 <_sbrk_r>
 8007b10:	4580      	cmp	r8, r0
 8007b12:	d13a      	bne.n	8007b8a <_malloc_r+0xd2>
 8007b14:	6821      	ldr	r1, [r4, #0]
 8007b16:	3503      	adds	r5, #3
 8007b18:	1a6d      	subs	r5, r5, r1
 8007b1a:	f025 0503 	bic.w	r5, r5, #3
 8007b1e:	3508      	adds	r5, #8
 8007b20:	2d0c      	cmp	r5, #12
 8007b22:	bf38      	it	cc
 8007b24:	250c      	movcc	r5, #12
 8007b26:	4629      	mov	r1, r5
 8007b28:	4638      	mov	r0, r7
 8007b2a:	f7ff ffa5 	bl	8007a78 <sbrk_aligned>
 8007b2e:	3001      	adds	r0, #1
 8007b30:	d02b      	beq.n	8007b8a <_malloc_r+0xd2>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	442b      	add	r3, r5
 8007b36:	6023      	str	r3, [r4, #0]
 8007b38:	e00e      	b.n	8007b58 <_malloc_r+0xa0>
 8007b3a:	6822      	ldr	r2, [r4, #0]
 8007b3c:	1b52      	subs	r2, r2, r5
 8007b3e:	d41e      	bmi.n	8007b7e <_malloc_r+0xc6>
 8007b40:	2a0b      	cmp	r2, #11
 8007b42:	d916      	bls.n	8007b72 <_malloc_r+0xba>
 8007b44:	1961      	adds	r1, r4, r5
 8007b46:	42a3      	cmp	r3, r4
 8007b48:	6025      	str	r5, [r4, #0]
 8007b4a:	bf18      	it	ne
 8007b4c:	6059      	strne	r1, [r3, #4]
 8007b4e:	6863      	ldr	r3, [r4, #4]
 8007b50:	bf08      	it	eq
 8007b52:	6031      	streq	r1, [r6, #0]
 8007b54:	5162      	str	r2, [r4, r5]
 8007b56:	604b      	str	r3, [r1, #4]
 8007b58:	4638      	mov	r0, r7
 8007b5a:	f104 060b 	add.w	r6, r4, #11
 8007b5e:	f002 f827 	bl	8009bb0 <__malloc_unlock>
 8007b62:	f026 0607 	bic.w	r6, r6, #7
 8007b66:	1d23      	adds	r3, r4, #4
 8007b68:	1af2      	subs	r2, r6, r3
 8007b6a:	d0b6      	beq.n	8007ada <_malloc_r+0x22>
 8007b6c:	1b9b      	subs	r3, r3, r6
 8007b6e:	50a3      	str	r3, [r4, r2]
 8007b70:	e7b3      	b.n	8007ada <_malloc_r+0x22>
 8007b72:	6862      	ldr	r2, [r4, #4]
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	bf0c      	ite	eq
 8007b78:	6032      	streq	r2, [r6, #0]
 8007b7a:	605a      	strne	r2, [r3, #4]
 8007b7c:	e7ec      	b.n	8007b58 <_malloc_r+0xa0>
 8007b7e:	4623      	mov	r3, r4
 8007b80:	6864      	ldr	r4, [r4, #4]
 8007b82:	e7b2      	b.n	8007aea <_malloc_r+0x32>
 8007b84:	4634      	mov	r4, r6
 8007b86:	6876      	ldr	r6, [r6, #4]
 8007b88:	e7b9      	b.n	8007afe <_malloc_r+0x46>
 8007b8a:	230c      	movs	r3, #12
 8007b8c:	603b      	str	r3, [r7, #0]
 8007b8e:	4638      	mov	r0, r7
 8007b90:	f002 f80e 	bl	8009bb0 <__malloc_unlock>
 8007b94:	e7a1      	b.n	8007ada <_malloc_r+0x22>
 8007b96:	6025      	str	r5, [r4, #0]
 8007b98:	e7de      	b.n	8007b58 <_malloc_r+0xa0>
 8007b9a:	bf00      	nop
 8007b9c:	2000068c 	.word	0x2000068c

08007ba0 <__cvt>:
 8007ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba4:	ec55 4b10 	vmov	r4, r5, d0
 8007ba8:	2d00      	cmp	r5, #0
 8007baa:	460e      	mov	r6, r1
 8007bac:	4619      	mov	r1, r3
 8007bae:	462b      	mov	r3, r5
 8007bb0:	bfbb      	ittet	lt
 8007bb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007bb6:	461d      	movlt	r5, r3
 8007bb8:	2300      	movge	r3, #0
 8007bba:	232d      	movlt	r3, #45	; 0x2d
 8007bbc:	700b      	strb	r3, [r1, #0]
 8007bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007bc4:	4691      	mov	r9, r2
 8007bc6:	f023 0820 	bic.w	r8, r3, #32
 8007bca:	bfbc      	itt	lt
 8007bcc:	4622      	movlt	r2, r4
 8007bce:	4614      	movlt	r4, r2
 8007bd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bd4:	d005      	beq.n	8007be2 <__cvt+0x42>
 8007bd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007bda:	d100      	bne.n	8007bde <__cvt+0x3e>
 8007bdc:	3601      	adds	r6, #1
 8007bde:	2102      	movs	r1, #2
 8007be0:	e000      	b.n	8007be4 <__cvt+0x44>
 8007be2:	2103      	movs	r1, #3
 8007be4:	ab03      	add	r3, sp, #12
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	ab02      	add	r3, sp, #8
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	ec45 4b10 	vmov	d0, r4, r5
 8007bf0:	4653      	mov	r3, sl
 8007bf2:	4632      	mov	r2, r6
 8007bf4:	f000 ffdc 	bl	8008bb0 <_dtoa_r>
 8007bf8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007bfc:	4607      	mov	r7, r0
 8007bfe:	d102      	bne.n	8007c06 <__cvt+0x66>
 8007c00:	f019 0f01 	tst.w	r9, #1
 8007c04:	d022      	beq.n	8007c4c <__cvt+0xac>
 8007c06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c0a:	eb07 0906 	add.w	r9, r7, r6
 8007c0e:	d110      	bne.n	8007c32 <__cvt+0x92>
 8007c10:	783b      	ldrb	r3, [r7, #0]
 8007c12:	2b30      	cmp	r3, #48	; 0x30
 8007c14:	d10a      	bne.n	8007c2c <__cvt+0x8c>
 8007c16:	2200      	movs	r2, #0
 8007c18:	2300      	movs	r3, #0
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	f7f8 ff53 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c22:	b918      	cbnz	r0, 8007c2c <__cvt+0x8c>
 8007c24:	f1c6 0601 	rsb	r6, r6, #1
 8007c28:	f8ca 6000 	str.w	r6, [sl]
 8007c2c:	f8da 3000 	ldr.w	r3, [sl]
 8007c30:	4499      	add	r9, r3
 8007c32:	2200      	movs	r2, #0
 8007c34:	2300      	movs	r3, #0
 8007c36:	4620      	mov	r0, r4
 8007c38:	4629      	mov	r1, r5
 8007c3a:	f7f8 ff45 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c3e:	b108      	cbz	r0, 8007c44 <__cvt+0xa4>
 8007c40:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c44:	2230      	movs	r2, #48	; 0x30
 8007c46:	9b03      	ldr	r3, [sp, #12]
 8007c48:	454b      	cmp	r3, r9
 8007c4a:	d307      	bcc.n	8007c5c <__cvt+0xbc>
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c50:	1bdb      	subs	r3, r3, r7
 8007c52:	4638      	mov	r0, r7
 8007c54:	6013      	str	r3, [r2, #0]
 8007c56:	b004      	add	sp, #16
 8007c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5c:	1c59      	adds	r1, r3, #1
 8007c5e:	9103      	str	r1, [sp, #12]
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	e7f0      	b.n	8007c46 <__cvt+0xa6>

08007c64 <__exponent>:
 8007c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c66:	4603      	mov	r3, r0
 8007c68:	2900      	cmp	r1, #0
 8007c6a:	bfb8      	it	lt
 8007c6c:	4249      	neglt	r1, r1
 8007c6e:	f803 2b02 	strb.w	r2, [r3], #2
 8007c72:	bfb4      	ite	lt
 8007c74:	222d      	movlt	r2, #45	; 0x2d
 8007c76:	222b      	movge	r2, #43	; 0x2b
 8007c78:	2909      	cmp	r1, #9
 8007c7a:	7042      	strb	r2, [r0, #1]
 8007c7c:	dd2a      	ble.n	8007cd4 <__exponent+0x70>
 8007c7e:	f10d 0407 	add.w	r4, sp, #7
 8007c82:	46a4      	mov	ip, r4
 8007c84:	270a      	movs	r7, #10
 8007c86:	46a6      	mov	lr, r4
 8007c88:	460a      	mov	r2, r1
 8007c8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c8e:	fb07 1516 	mls	r5, r7, r6, r1
 8007c92:	3530      	adds	r5, #48	; 0x30
 8007c94:	2a63      	cmp	r2, #99	; 0x63
 8007c96:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	dcf1      	bgt.n	8007c86 <__exponent+0x22>
 8007ca2:	3130      	adds	r1, #48	; 0x30
 8007ca4:	f1ae 0502 	sub.w	r5, lr, #2
 8007ca8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007cac:	1c44      	adds	r4, r0, #1
 8007cae:	4629      	mov	r1, r5
 8007cb0:	4561      	cmp	r1, ip
 8007cb2:	d30a      	bcc.n	8007cca <__exponent+0x66>
 8007cb4:	f10d 0209 	add.w	r2, sp, #9
 8007cb8:	eba2 020e 	sub.w	r2, r2, lr
 8007cbc:	4565      	cmp	r5, ip
 8007cbe:	bf88      	it	hi
 8007cc0:	2200      	movhi	r2, #0
 8007cc2:	4413      	add	r3, r2
 8007cc4:	1a18      	subs	r0, r3, r0
 8007cc6:	b003      	add	sp, #12
 8007cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cce:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007cd2:	e7ed      	b.n	8007cb0 <__exponent+0x4c>
 8007cd4:	2330      	movs	r3, #48	; 0x30
 8007cd6:	3130      	adds	r1, #48	; 0x30
 8007cd8:	7083      	strb	r3, [r0, #2]
 8007cda:	70c1      	strb	r1, [r0, #3]
 8007cdc:	1d03      	adds	r3, r0, #4
 8007cde:	e7f1      	b.n	8007cc4 <__exponent+0x60>

08007ce0 <_printf_float>:
 8007ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce4:	ed2d 8b02 	vpush	{d8}
 8007ce8:	b08d      	sub	sp, #52	; 0x34
 8007cea:	460c      	mov	r4, r1
 8007cec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007cf0:	4616      	mov	r6, r2
 8007cf2:	461f      	mov	r7, r3
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	f001 ff3f 	bl	8009b78 <_localeconv_r>
 8007cfa:	f8d0 a000 	ldr.w	sl, [r0]
 8007cfe:	4650      	mov	r0, sl
 8007d00:	f7f8 fa66 	bl	80001d0 <strlen>
 8007d04:	2300      	movs	r3, #0
 8007d06:	930a      	str	r3, [sp, #40]	; 0x28
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	9305      	str	r3, [sp, #20]
 8007d0c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d14:	3307      	adds	r3, #7
 8007d16:	f023 0307 	bic.w	r3, r3, #7
 8007d1a:	f103 0208 	add.w	r2, r3, #8
 8007d1e:	f8c8 2000 	str.w	r2, [r8]
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007d2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d32:	9307      	str	r3, [sp, #28]
 8007d34:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d38:	ee08 0a10 	vmov	s16, r0
 8007d3c:	4b9f      	ldr	r3, [pc, #636]	; (8007fbc <_printf_float+0x2dc>)
 8007d3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d42:	f04f 32ff 	mov.w	r2, #4294967295
 8007d46:	f7f8 fef1 	bl	8000b2c <__aeabi_dcmpun>
 8007d4a:	bb88      	cbnz	r0, 8007db0 <_printf_float+0xd0>
 8007d4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d50:	4b9a      	ldr	r3, [pc, #616]	; (8007fbc <_printf_float+0x2dc>)
 8007d52:	f04f 32ff 	mov.w	r2, #4294967295
 8007d56:	f7f8 fecb 	bl	8000af0 <__aeabi_dcmple>
 8007d5a:	bb48      	cbnz	r0, 8007db0 <_printf_float+0xd0>
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2300      	movs	r3, #0
 8007d60:	4640      	mov	r0, r8
 8007d62:	4649      	mov	r1, r9
 8007d64:	f7f8 feba 	bl	8000adc <__aeabi_dcmplt>
 8007d68:	b110      	cbz	r0, 8007d70 <_printf_float+0x90>
 8007d6a:	232d      	movs	r3, #45	; 0x2d
 8007d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d70:	4b93      	ldr	r3, [pc, #588]	; (8007fc0 <_printf_float+0x2e0>)
 8007d72:	4894      	ldr	r0, [pc, #592]	; (8007fc4 <_printf_float+0x2e4>)
 8007d74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d78:	bf94      	ite	ls
 8007d7a:	4698      	movls	r8, r3
 8007d7c:	4680      	movhi	r8, r0
 8007d7e:	2303      	movs	r3, #3
 8007d80:	6123      	str	r3, [r4, #16]
 8007d82:	9b05      	ldr	r3, [sp, #20]
 8007d84:	f023 0204 	bic.w	r2, r3, #4
 8007d88:	6022      	str	r2, [r4, #0]
 8007d8a:	f04f 0900 	mov.w	r9, #0
 8007d8e:	9700      	str	r7, [sp, #0]
 8007d90:	4633      	mov	r3, r6
 8007d92:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d94:	4621      	mov	r1, r4
 8007d96:	4628      	mov	r0, r5
 8007d98:	f000 f9d8 	bl	800814c <_printf_common>
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	f040 8090 	bne.w	8007ec2 <_printf_float+0x1e2>
 8007da2:	f04f 30ff 	mov.w	r0, #4294967295
 8007da6:	b00d      	add	sp, #52	; 0x34
 8007da8:	ecbd 8b02 	vpop	{d8}
 8007dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db0:	4642      	mov	r2, r8
 8007db2:	464b      	mov	r3, r9
 8007db4:	4640      	mov	r0, r8
 8007db6:	4649      	mov	r1, r9
 8007db8:	f7f8 feb8 	bl	8000b2c <__aeabi_dcmpun>
 8007dbc:	b140      	cbz	r0, 8007dd0 <_printf_float+0xf0>
 8007dbe:	464b      	mov	r3, r9
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	bfbc      	itt	lt
 8007dc4:	232d      	movlt	r3, #45	; 0x2d
 8007dc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007dca:	487f      	ldr	r0, [pc, #508]	; (8007fc8 <_printf_float+0x2e8>)
 8007dcc:	4b7f      	ldr	r3, [pc, #508]	; (8007fcc <_printf_float+0x2ec>)
 8007dce:	e7d1      	b.n	8007d74 <_printf_float+0x94>
 8007dd0:	6863      	ldr	r3, [r4, #4]
 8007dd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007dd6:	9206      	str	r2, [sp, #24]
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	d13f      	bne.n	8007e5c <_printf_float+0x17c>
 8007ddc:	2306      	movs	r3, #6
 8007dde:	6063      	str	r3, [r4, #4]
 8007de0:	9b05      	ldr	r3, [sp, #20]
 8007de2:	6861      	ldr	r1, [r4, #4]
 8007de4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007de8:	2300      	movs	r3, #0
 8007dea:	9303      	str	r3, [sp, #12]
 8007dec:	ab0a      	add	r3, sp, #40	; 0x28
 8007dee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007df2:	ab09      	add	r3, sp, #36	; 0x24
 8007df4:	ec49 8b10 	vmov	d0, r8, r9
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	6022      	str	r2, [r4, #0]
 8007dfc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e00:	4628      	mov	r0, r5
 8007e02:	f7ff fecd 	bl	8007ba0 <__cvt>
 8007e06:	9b06      	ldr	r3, [sp, #24]
 8007e08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e0a:	2b47      	cmp	r3, #71	; 0x47
 8007e0c:	4680      	mov	r8, r0
 8007e0e:	d108      	bne.n	8007e22 <_printf_float+0x142>
 8007e10:	1cc8      	adds	r0, r1, #3
 8007e12:	db02      	blt.n	8007e1a <_printf_float+0x13a>
 8007e14:	6863      	ldr	r3, [r4, #4]
 8007e16:	4299      	cmp	r1, r3
 8007e18:	dd41      	ble.n	8007e9e <_printf_float+0x1be>
 8007e1a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007e1e:	fa5f fb8b 	uxtb.w	fp, fp
 8007e22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e26:	d820      	bhi.n	8007e6a <_printf_float+0x18a>
 8007e28:	3901      	subs	r1, #1
 8007e2a:	465a      	mov	r2, fp
 8007e2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e30:	9109      	str	r1, [sp, #36]	; 0x24
 8007e32:	f7ff ff17 	bl	8007c64 <__exponent>
 8007e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e38:	1813      	adds	r3, r2, r0
 8007e3a:	2a01      	cmp	r2, #1
 8007e3c:	4681      	mov	r9, r0
 8007e3e:	6123      	str	r3, [r4, #16]
 8007e40:	dc02      	bgt.n	8007e48 <_printf_float+0x168>
 8007e42:	6822      	ldr	r2, [r4, #0]
 8007e44:	07d2      	lsls	r2, r2, #31
 8007e46:	d501      	bpl.n	8007e4c <_printf_float+0x16c>
 8007e48:	3301      	adds	r3, #1
 8007e4a:	6123      	str	r3, [r4, #16]
 8007e4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d09c      	beq.n	8007d8e <_printf_float+0xae>
 8007e54:	232d      	movs	r3, #45	; 0x2d
 8007e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e5a:	e798      	b.n	8007d8e <_printf_float+0xae>
 8007e5c:	9a06      	ldr	r2, [sp, #24]
 8007e5e:	2a47      	cmp	r2, #71	; 0x47
 8007e60:	d1be      	bne.n	8007de0 <_printf_float+0x100>
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1bc      	bne.n	8007de0 <_printf_float+0x100>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e7b9      	b.n	8007dde <_printf_float+0xfe>
 8007e6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e6e:	d118      	bne.n	8007ea2 <_printf_float+0x1c2>
 8007e70:	2900      	cmp	r1, #0
 8007e72:	6863      	ldr	r3, [r4, #4]
 8007e74:	dd0b      	ble.n	8007e8e <_printf_float+0x1ae>
 8007e76:	6121      	str	r1, [r4, #16]
 8007e78:	b913      	cbnz	r3, 8007e80 <_printf_float+0x1a0>
 8007e7a:	6822      	ldr	r2, [r4, #0]
 8007e7c:	07d0      	lsls	r0, r2, #31
 8007e7e:	d502      	bpl.n	8007e86 <_printf_float+0x1a6>
 8007e80:	3301      	adds	r3, #1
 8007e82:	440b      	add	r3, r1
 8007e84:	6123      	str	r3, [r4, #16]
 8007e86:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e88:	f04f 0900 	mov.w	r9, #0
 8007e8c:	e7de      	b.n	8007e4c <_printf_float+0x16c>
 8007e8e:	b913      	cbnz	r3, 8007e96 <_printf_float+0x1b6>
 8007e90:	6822      	ldr	r2, [r4, #0]
 8007e92:	07d2      	lsls	r2, r2, #31
 8007e94:	d501      	bpl.n	8007e9a <_printf_float+0x1ba>
 8007e96:	3302      	adds	r3, #2
 8007e98:	e7f4      	b.n	8007e84 <_printf_float+0x1a4>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e7f2      	b.n	8007e84 <_printf_float+0x1a4>
 8007e9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea4:	4299      	cmp	r1, r3
 8007ea6:	db05      	blt.n	8007eb4 <_printf_float+0x1d4>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	6121      	str	r1, [r4, #16]
 8007eac:	07d8      	lsls	r0, r3, #31
 8007eae:	d5ea      	bpl.n	8007e86 <_printf_float+0x1a6>
 8007eb0:	1c4b      	adds	r3, r1, #1
 8007eb2:	e7e7      	b.n	8007e84 <_printf_float+0x1a4>
 8007eb4:	2900      	cmp	r1, #0
 8007eb6:	bfd4      	ite	le
 8007eb8:	f1c1 0202 	rsble	r2, r1, #2
 8007ebc:	2201      	movgt	r2, #1
 8007ebe:	4413      	add	r3, r2
 8007ec0:	e7e0      	b.n	8007e84 <_printf_float+0x1a4>
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	055a      	lsls	r2, r3, #21
 8007ec6:	d407      	bmi.n	8007ed8 <_printf_float+0x1f8>
 8007ec8:	6923      	ldr	r3, [r4, #16]
 8007eca:	4642      	mov	r2, r8
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4628      	mov	r0, r5
 8007ed0:	47b8      	blx	r7
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	d12c      	bne.n	8007f30 <_printf_float+0x250>
 8007ed6:	e764      	b.n	8007da2 <_printf_float+0xc2>
 8007ed8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007edc:	f240 80e0 	bls.w	80080a0 <_printf_float+0x3c0>
 8007ee0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f7f8 fdee 	bl	8000ac8 <__aeabi_dcmpeq>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d034      	beq.n	8007f5a <_printf_float+0x27a>
 8007ef0:	4a37      	ldr	r2, [pc, #220]	; (8007fd0 <_printf_float+0x2f0>)
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	4631      	mov	r1, r6
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	47b8      	blx	r7
 8007efa:	3001      	adds	r0, #1
 8007efc:	f43f af51 	beq.w	8007da2 <_printf_float+0xc2>
 8007f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f04:	429a      	cmp	r2, r3
 8007f06:	db02      	blt.n	8007f0e <_printf_float+0x22e>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	07d8      	lsls	r0, r3, #31
 8007f0c:	d510      	bpl.n	8007f30 <_printf_float+0x250>
 8007f0e:	ee18 3a10 	vmov	r3, s16
 8007f12:	4652      	mov	r2, sl
 8007f14:	4631      	mov	r1, r6
 8007f16:	4628      	mov	r0, r5
 8007f18:	47b8      	blx	r7
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	f43f af41 	beq.w	8007da2 <_printf_float+0xc2>
 8007f20:	f04f 0800 	mov.w	r8, #0
 8007f24:	f104 091a 	add.w	r9, r4, #26
 8007f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	4543      	cmp	r3, r8
 8007f2e:	dc09      	bgt.n	8007f44 <_printf_float+0x264>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	079b      	lsls	r3, r3, #30
 8007f34:	f100 8105 	bmi.w	8008142 <_printf_float+0x462>
 8007f38:	68e0      	ldr	r0, [r4, #12]
 8007f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f3c:	4298      	cmp	r0, r3
 8007f3e:	bfb8      	it	lt
 8007f40:	4618      	movlt	r0, r3
 8007f42:	e730      	b.n	8007da6 <_printf_float+0xc6>
 8007f44:	2301      	movs	r3, #1
 8007f46:	464a      	mov	r2, r9
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	47b8      	blx	r7
 8007f4e:	3001      	adds	r0, #1
 8007f50:	f43f af27 	beq.w	8007da2 <_printf_float+0xc2>
 8007f54:	f108 0801 	add.w	r8, r8, #1
 8007f58:	e7e6      	b.n	8007f28 <_printf_float+0x248>
 8007f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dc39      	bgt.n	8007fd4 <_printf_float+0x2f4>
 8007f60:	4a1b      	ldr	r2, [pc, #108]	; (8007fd0 <_printf_float+0x2f0>)
 8007f62:	2301      	movs	r3, #1
 8007f64:	4631      	mov	r1, r6
 8007f66:	4628      	mov	r0, r5
 8007f68:	47b8      	blx	r7
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	f43f af19 	beq.w	8007da2 <_printf_float+0xc2>
 8007f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f74:	4313      	orrs	r3, r2
 8007f76:	d102      	bne.n	8007f7e <_printf_float+0x29e>
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	07d9      	lsls	r1, r3, #31
 8007f7c:	d5d8      	bpl.n	8007f30 <_printf_float+0x250>
 8007f7e:	ee18 3a10 	vmov	r3, s16
 8007f82:	4652      	mov	r2, sl
 8007f84:	4631      	mov	r1, r6
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b8      	blx	r7
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	f43f af09 	beq.w	8007da2 <_printf_float+0xc2>
 8007f90:	f04f 0900 	mov.w	r9, #0
 8007f94:	f104 0a1a 	add.w	sl, r4, #26
 8007f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9a:	425b      	negs	r3, r3
 8007f9c:	454b      	cmp	r3, r9
 8007f9e:	dc01      	bgt.n	8007fa4 <_printf_float+0x2c4>
 8007fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa2:	e792      	b.n	8007eca <_printf_float+0x1ea>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	4652      	mov	r2, sl
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4628      	mov	r0, r5
 8007fac:	47b8      	blx	r7
 8007fae:	3001      	adds	r0, #1
 8007fb0:	f43f aef7 	beq.w	8007da2 <_printf_float+0xc2>
 8007fb4:	f109 0901 	add.w	r9, r9, #1
 8007fb8:	e7ee      	b.n	8007f98 <_printf_float+0x2b8>
 8007fba:	bf00      	nop
 8007fbc:	7fefffff 	.word	0x7fefffff
 8007fc0:	0800adec 	.word	0x0800adec
 8007fc4:	0800adf0 	.word	0x0800adf0
 8007fc8:	0800adf8 	.word	0x0800adf8
 8007fcc:	0800adf4 	.word	0x0800adf4
 8007fd0:	0800adfc 	.word	0x0800adfc
 8007fd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	bfa8      	it	ge
 8007fdc:	461a      	movge	r2, r3
 8007fde:	2a00      	cmp	r2, #0
 8007fe0:	4691      	mov	r9, r2
 8007fe2:	dc37      	bgt.n	8008054 <_printf_float+0x374>
 8007fe4:	f04f 0b00 	mov.w	fp, #0
 8007fe8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fec:	f104 021a 	add.w	r2, r4, #26
 8007ff0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ff2:	9305      	str	r3, [sp, #20]
 8007ff4:	eba3 0309 	sub.w	r3, r3, r9
 8007ff8:	455b      	cmp	r3, fp
 8007ffa:	dc33      	bgt.n	8008064 <_printf_float+0x384>
 8007ffc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008000:	429a      	cmp	r2, r3
 8008002:	db3b      	blt.n	800807c <_printf_float+0x39c>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	07da      	lsls	r2, r3, #31
 8008008:	d438      	bmi.n	800807c <_printf_float+0x39c>
 800800a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800800c:	9a05      	ldr	r2, [sp, #20]
 800800e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008010:	1a9a      	subs	r2, r3, r2
 8008012:	eba3 0901 	sub.w	r9, r3, r1
 8008016:	4591      	cmp	r9, r2
 8008018:	bfa8      	it	ge
 800801a:	4691      	movge	r9, r2
 800801c:	f1b9 0f00 	cmp.w	r9, #0
 8008020:	dc35      	bgt.n	800808e <_printf_float+0x3ae>
 8008022:	f04f 0800 	mov.w	r8, #0
 8008026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800802a:	f104 0a1a 	add.w	sl, r4, #26
 800802e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008032:	1a9b      	subs	r3, r3, r2
 8008034:	eba3 0309 	sub.w	r3, r3, r9
 8008038:	4543      	cmp	r3, r8
 800803a:	f77f af79 	ble.w	8007f30 <_printf_float+0x250>
 800803e:	2301      	movs	r3, #1
 8008040:	4652      	mov	r2, sl
 8008042:	4631      	mov	r1, r6
 8008044:	4628      	mov	r0, r5
 8008046:	47b8      	blx	r7
 8008048:	3001      	adds	r0, #1
 800804a:	f43f aeaa 	beq.w	8007da2 <_printf_float+0xc2>
 800804e:	f108 0801 	add.w	r8, r8, #1
 8008052:	e7ec      	b.n	800802e <_printf_float+0x34e>
 8008054:	4613      	mov	r3, r2
 8008056:	4631      	mov	r1, r6
 8008058:	4642      	mov	r2, r8
 800805a:	4628      	mov	r0, r5
 800805c:	47b8      	blx	r7
 800805e:	3001      	adds	r0, #1
 8008060:	d1c0      	bne.n	8007fe4 <_printf_float+0x304>
 8008062:	e69e      	b.n	8007da2 <_printf_float+0xc2>
 8008064:	2301      	movs	r3, #1
 8008066:	4631      	mov	r1, r6
 8008068:	4628      	mov	r0, r5
 800806a:	9205      	str	r2, [sp, #20]
 800806c:	47b8      	blx	r7
 800806e:	3001      	adds	r0, #1
 8008070:	f43f ae97 	beq.w	8007da2 <_printf_float+0xc2>
 8008074:	9a05      	ldr	r2, [sp, #20]
 8008076:	f10b 0b01 	add.w	fp, fp, #1
 800807a:	e7b9      	b.n	8007ff0 <_printf_float+0x310>
 800807c:	ee18 3a10 	vmov	r3, s16
 8008080:	4652      	mov	r2, sl
 8008082:	4631      	mov	r1, r6
 8008084:	4628      	mov	r0, r5
 8008086:	47b8      	blx	r7
 8008088:	3001      	adds	r0, #1
 800808a:	d1be      	bne.n	800800a <_printf_float+0x32a>
 800808c:	e689      	b.n	8007da2 <_printf_float+0xc2>
 800808e:	9a05      	ldr	r2, [sp, #20]
 8008090:	464b      	mov	r3, r9
 8008092:	4442      	add	r2, r8
 8008094:	4631      	mov	r1, r6
 8008096:	4628      	mov	r0, r5
 8008098:	47b8      	blx	r7
 800809a:	3001      	adds	r0, #1
 800809c:	d1c1      	bne.n	8008022 <_printf_float+0x342>
 800809e:	e680      	b.n	8007da2 <_printf_float+0xc2>
 80080a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080a2:	2a01      	cmp	r2, #1
 80080a4:	dc01      	bgt.n	80080aa <_printf_float+0x3ca>
 80080a6:	07db      	lsls	r3, r3, #31
 80080a8:	d538      	bpl.n	800811c <_printf_float+0x43c>
 80080aa:	2301      	movs	r3, #1
 80080ac:	4642      	mov	r2, r8
 80080ae:	4631      	mov	r1, r6
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b8      	blx	r7
 80080b4:	3001      	adds	r0, #1
 80080b6:	f43f ae74 	beq.w	8007da2 <_printf_float+0xc2>
 80080ba:	ee18 3a10 	vmov	r3, s16
 80080be:	4652      	mov	r2, sl
 80080c0:	4631      	mov	r1, r6
 80080c2:	4628      	mov	r0, r5
 80080c4:	47b8      	blx	r7
 80080c6:	3001      	adds	r0, #1
 80080c8:	f43f ae6b 	beq.w	8007da2 <_printf_float+0xc2>
 80080cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080d0:	2200      	movs	r2, #0
 80080d2:	2300      	movs	r3, #0
 80080d4:	f7f8 fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80080d8:	b9d8      	cbnz	r0, 8008112 <_printf_float+0x432>
 80080da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080dc:	f108 0201 	add.w	r2, r8, #1
 80080e0:	3b01      	subs	r3, #1
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	d10e      	bne.n	800810a <_printf_float+0x42a>
 80080ec:	e659      	b.n	8007da2 <_printf_float+0xc2>
 80080ee:	2301      	movs	r3, #1
 80080f0:	4652      	mov	r2, sl
 80080f2:	4631      	mov	r1, r6
 80080f4:	4628      	mov	r0, r5
 80080f6:	47b8      	blx	r7
 80080f8:	3001      	adds	r0, #1
 80080fa:	f43f ae52 	beq.w	8007da2 <_printf_float+0xc2>
 80080fe:	f108 0801 	add.w	r8, r8, #1
 8008102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008104:	3b01      	subs	r3, #1
 8008106:	4543      	cmp	r3, r8
 8008108:	dcf1      	bgt.n	80080ee <_printf_float+0x40e>
 800810a:	464b      	mov	r3, r9
 800810c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008110:	e6dc      	b.n	8007ecc <_printf_float+0x1ec>
 8008112:	f04f 0800 	mov.w	r8, #0
 8008116:	f104 0a1a 	add.w	sl, r4, #26
 800811a:	e7f2      	b.n	8008102 <_printf_float+0x422>
 800811c:	2301      	movs	r3, #1
 800811e:	4642      	mov	r2, r8
 8008120:	e7df      	b.n	80080e2 <_printf_float+0x402>
 8008122:	2301      	movs	r3, #1
 8008124:	464a      	mov	r2, r9
 8008126:	4631      	mov	r1, r6
 8008128:	4628      	mov	r0, r5
 800812a:	47b8      	blx	r7
 800812c:	3001      	adds	r0, #1
 800812e:	f43f ae38 	beq.w	8007da2 <_printf_float+0xc2>
 8008132:	f108 0801 	add.w	r8, r8, #1
 8008136:	68e3      	ldr	r3, [r4, #12]
 8008138:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800813a:	1a5b      	subs	r3, r3, r1
 800813c:	4543      	cmp	r3, r8
 800813e:	dcf0      	bgt.n	8008122 <_printf_float+0x442>
 8008140:	e6fa      	b.n	8007f38 <_printf_float+0x258>
 8008142:	f04f 0800 	mov.w	r8, #0
 8008146:	f104 0919 	add.w	r9, r4, #25
 800814a:	e7f4      	b.n	8008136 <_printf_float+0x456>

0800814c <_printf_common>:
 800814c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008150:	4616      	mov	r6, r2
 8008152:	4699      	mov	r9, r3
 8008154:	688a      	ldr	r2, [r1, #8]
 8008156:	690b      	ldr	r3, [r1, #16]
 8008158:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800815c:	4293      	cmp	r3, r2
 800815e:	bfb8      	it	lt
 8008160:	4613      	movlt	r3, r2
 8008162:	6033      	str	r3, [r6, #0]
 8008164:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008168:	4607      	mov	r7, r0
 800816a:	460c      	mov	r4, r1
 800816c:	b10a      	cbz	r2, 8008172 <_printf_common+0x26>
 800816e:	3301      	adds	r3, #1
 8008170:	6033      	str	r3, [r6, #0]
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	0699      	lsls	r1, r3, #26
 8008176:	bf42      	ittt	mi
 8008178:	6833      	ldrmi	r3, [r6, #0]
 800817a:	3302      	addmi	r3, #2
 800817c:	6033      	strmi	r3, [r6, #0]
 800817e:	6825      	ldr	r5, [r4, #0]
 8008180:	f015 0506 	ands.w	r5, r5, #6
 8008184:	d106      	bne.n	8008194 <_printf_common+0x48>
 8008186:	f104 0a19 	add.w	sl, r4, #25
 800818a:	68e3      	ldr	r3, [r4, #12]
 800818c:	6832      	ldr	r2, [r6, #0]
 800818e:	1a9b      	subs	r3, r3, r2
 8008190:	42ab      	cmp	r3, r5
 8008192:	dc26      	bgt.n	80081e2 <_printf_common+0x96>
 8008194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008198:	1e13      	subs	r3, r2, #0
 800819a:	6822      	ldr	r2, [r4, #0]
 800819c:	bf18      	it	ne
 800819e:	2301      	movne	r3, #1
 80081a0:	0692      	lsls	r2, r2, #26
 80081a2:	d42b      	bmi.n	80081fc <_printf_common+0xb0>
 80081a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081a8:	4649      	mov	r1, r9
 80081aa:	4638      	mov	r0, r7
 80081ac:	47c0      	blx	r8
 80081ae:	3001      	adds	r0, #1
 80081b0:	d01e      	beq.n	80081f0 <_printf_common+0xa4>
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	68e5      	ldr	r5, [r4, #12]
 80081b6:	6832      	ldr	r2, [r6, #0]
 80081b8:	f003 0306 	and.w	r3, r3, #6
 80081bc:	2b04      	cmp	r3, #4
 80081be:	bf08      	it	eq
 80081c0:	1aad      	subeq	r5, r5, r2
 80081c2:	68a3      	ldr	r3, [r4, #8]
 80081c4:	6922      	ldr	r2, [r4, #16]
 80081c6:	bf0c      	ite	eq
 80081c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081cc:	2500      	movne	r5, #0
 80081ce:	4293      	cmp	r3, r2
 80081d0:	bfc4      	itt	gt
 80081d2:	1a9b      	subgt	r3, r3, r2
 80081d4:	18ed      	addgt	r5, r5, r3
 80081d6:	2600      	movs	r6, #0
 80081d8:	341a      	adds	r4, #26
 80081da:	42b5      	cmp	r5, r6
 80081dc:	d11a      	bne.n	8008214 <_printf_common+0xc8>
 80081de:	2000      	movs	r0, #0
 80081e0:	e008      	b.n	80081f4 <_printf_common+0xa8>
 80081e2:	2301      	movs	r3, #1
 80081e4:	4652      	mov	r2, sl
 80081e6:	4649      	mov	r1, r9
 80081e8:	4638      	mov	r0, r7
 80081ea:	47c0      	blx	r8
 80081ec:	3001      	adds	r0, #1
 80081ee:	d103      	bne.n	80081f8 <_printf_common+0xac>
 80081f0:	f04f 30ff 	mov.w	r0, #4294967295
 80081f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f8:	3501      	adds	r5, #1
 80081fa:	e7c6      	b.n	800818a <_printf_common+0x3e>
 80081fc:	18e1      	adds	r1, r4, r3
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	2030      	movs	r0, #48	; 0x30
 8008202:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008206:	4422      	add	r2, r4
 8008208:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800820c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008210:	3302      	adds	r3, #2
 8008212:	e7c7      	b.n	80081a4 <_printf_common+0x58>
 8008214:	2301      	movs	r3, #1
 8008216:	4622      	mov	r2, r4
 8008218:	4649      	mov	r1, r9
 800821a:	4638      	mov	r0, r7
 800821c:	47c0      	blx	r8
 800821e:	3001      	adds	r0, #1
 8008220:	d0e6      	beq.n	80081f0 <_printf_common+0xa4>
 8008222:	3601      	adds	r6, #1
 8008224:	e7d9      	b.n	80081da <_printf_common+0x8e>
	...

08008228 <_printf_i>:
 8008228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800822c:	7e0f      	ldrb	r7, [r1, #24]
 800822e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008230:	2f78      	cmp	r7, #120	; 0x78
 8008232:	4691      	mov	r9, r2
 8008234:	4680      	mov	r8, r0
 8008236:	460c      	mov	r4, r1
 8008238:	469a      	mov	sl, r3
 800823a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800823e:	d807      	bhi.n	8008250 <_printf_i+0x28>
 8008240:	2f62      	cmp	r7, #98	; 0x62
 8008242:	d80a      	bhi.n	800825a <_printf_i+0x32>
 8008244:	2f00      	cmp	r7, #0
 8008246:	f000 80d8 	beq.w	80083fa <_printf_i+0x1d2>
 800824a:	2f58      	cmp	r7, #88	; 0x58
 800824c:	f000 80a3 	beq.w	8008396 <_printf_i+0x16e>
 8008250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008254:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008258:	e03a      	b.n	80082d0 <_printf_i+0xa8>
 800825a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800825e:	2b15      	cmp	r3, #21
 8008260:	d8f6      	bhi.n	8008250 <_printf_i+0x28>
 8008262:	a101      	add	r1, pc, #4	; (adr r1, 8008268 <_printf_i+0x40>)
 8008264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008268:	080082c1 	.word	0x080082c1
 800826c:	080082d5 	.word	0x080082d5
 8008270:	08008251 	.word	0x08008251
 8008274:	08008251 	.word	0x08008251
 8008278:	08008251 	.word	0x08008251
 800827c:	08008251 	.word	0x08008251
 8008280:	080082d5 	.word	0x080082d5
 8008284:	08008251 	.word	0x08008251
 8008288:	08008251 	.word	0x08008251
 800828c:	08008251 	.word	0x08008251
 8008290:	08008251 	.word	0x08008251
 8008294:	080083e1 	.word	0x080083e1
 8008298:	08008305 	.word	0x08008305
 800829c:	080083c3 	.word	0x080083c3
 80082a0:	08008251 	.word	0x08008251
 80082a4:	08008251 	.word	0x08008251
 80082a8:	08008403 	.word	0x08008403
 80082ac:	08008251 	.word	0x08008251
 80082b0:	08008305 	.word	0x08008305
 80082b4:	08008251 	.word	0x08008251
 80082b8:	08008251 	.word	0x08008251
 80082bc:	080083cb 	.word	0x080083cb
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	1d1a      	adds	r2, r3, #4
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	602a      	str	r2, [r5, #0]
 80082c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082d0:	2301      	movs	r3, #1
 80082d2:	e0a3      	b.n	800841c <_printf_i+0x1f4>
 80082d4:	6820      	ldr	r0, [r4, #0]
 80082d6:	6829      	ldr	r1, [r5, #0]
 80082d8:	0606      	lsls	r6, r0, #24
 80082da:	f101 0304 	add.w	r3, r1, #4
 80082de:	d50a      	bpl.n	80082f6 <_printf_i+0xce>
 80082e0:	680e      	ldr	r6, [r1, #0]
 80082e2:	602b      	str	r3, [r5, #0]
 80082e4:	2e00      	cmp	r6, #0
 80082e6:	da03      	bge.n	80082f0 <_printf_i+0xc8>
 80082e8:	232d      	movs	r3, #45	; 0x2d
 80082ea:	4276      	negs	r6, r6
 80082ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f0:	485e      	ldr	r0, [pc, #376]	; (800846c <_printf_i+0x244>)
 80082f2:	230a      	movs	r3, #10
 80082f4:	e019      	b.n	800832a <_printf_i+0x102>
 80082f6:	680e      	ldr	r6, [r1, #0]
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082fe:	bf18      	it	ne
 8008300:	b236      	sxthne	r6, r6
 8008302:	e7ef      	b.n	80082e4 <_printf_i+0xbc>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	6820      	ldr	r0, [r4, #0]
 8008308:	1d19      	adds	r1, r3, #4
 800830a:	6029      	str	r1, [r5, #0]
 800830c:	0601      	lsls	r1, r0, #24
 800830e:	d501      	bpl.n	8008314 <_printf_i+0xec>
 8008310:	681e      	ldr	r6, [r3, #0]
 8008312:	e002      	b.n	800831a <_printf_i+0xf2>
 8008314:	0646      	lsls	r6, r0, #25
 8008316:	d5fb      	bpl.n	8008310 <_printf_i+0xe8>
 8008318:	881e      	ldrh	r6, [r3, #0]
 800831a:	4854      	ldr	r0, [pc, #336]	; (800846c <_printf_i+0x244>)
 800831c:	2f6f      	cmp	r7, #111	; 0x6f
 800831e:	bf0c      	ite	eq
 8008320:	2308      	moveq	r3, #8
 8008322:	230a      	movne	r3, #10
 8008324:	2100      	movs	r1, #0
 8008326:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800832a:	6865      	ldr	r5, [r4, #4]
 800832c:	60a5      	str	r5, [r4, #8]
 800832e:	2d00      	cmp	r5, #0
 8008330:	bfa2      	ittt	ge
 8008332:	6821      	ldrge	r1, [r4, #0]
 8008334:	f021 0104 	bicge.w	r1, r1, #4
 8008338:	6021      	strge	r1, [r4, #0]
 800833a:	b90e      	cbnz	r6, 8008340 <_printf_i+0x118>
 800833c:	2d00      	cmp	r5, #0
 800833e:	d04d      	beq.n	80083dc <_printf_i+0x1b4>
 8008340:	4615      	mov	r5, r2
 8008342:	fbb6 f1f3 	udiv	r1, r6, r3
 8008346:	fb03 6711 	mls	r7, r3, r1, r6
 800834a:	5dc7      	ldrb	r7, [r0, r7]
 800834c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008350:	4637      	mov	r7, r6
 8008352:	42bb      	cmp	r3, r7
 8008354:	460e      	mov	r6, r1
 8008356:	d9f4      	bls.n	8008342 <_printf_i+0x11a>
 8008358:	2b08      	cmp	r3, #8
 800835a:	d10b      	bne.n	8008374 <_printf_i+0x14c>
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	07de      	lsls	r6, r3, #31
 8008360:	d508      	bpl.n	8008374 <_printf_i+0x14c>
 8008362:	6923      	ldr	r3, [r4, #16]
 8008364:	6861      	ldr	r1, [r4, #4]
 8008366:	4299      	cmp	r1, r3
 8008368:	bfde      	ittt	le
 800836a:	2330      	movle	r3, #48	; 0x30
 800836c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008370:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008374:	1b52      	subs	r2, r2, r5
 8008376:	6122      	str	r2, [r4, #16]
 8008378:	f8cd a000 	str.w	sl, [sp]
 800837c:	464b      	mov	r3, r9
 800837e:	aa03      	add	r2, sp, #12
 8008380:	4621      	mov	r1, r4
 8008382:	4640      	mov	r0, r8
 8008384:	f7ff fee2 	bl	800814c <_printf_common>
 8008388:	3001      	adds	r0, #1
 800838a:	d14c      	bne.n	8008426 <_printf_i+0x1fe>
 800838c:	f04f 30ff 	mov.w	r0, #4294967295
 8008390:	b004      	add	sp, #16
 8008392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008396:	4835      	ldr	r0, [pc, #212]	; (800846c <_printf_i+0x244>)
 8008398:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800839c:	6829      	ldr	r1, [r5, #0]
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80083a4:	6029      	str	r1, [r5, #0]
 80083a6:	061d      	lsls	r5, r3, #24
 80083a8:	d514      	bpl.n	80083d4 <_printf_i+0x1ac>
 80083aa:	07df      	lsls	r7, r3, #31
 80083ac:	bf44      	itt	mi
 80083ae:	f043 0320 	orrmi.w	r3, r3, #32
 80083b2:	6023      	strmi	r3, [r4, #0]
 80083b4:	b91e      	cbnz	r6, 80083be <_printf_i+0x196>
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	f023 0320 	bic.w	r3, r3, #32
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	2310      	movs	r3, #16
 80083c0:	e7b0      	b.n	8008324 <_printf_i+0xfc>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	f043 0320 	orr.w	r3, r3, #32
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	2378      	movs	r3, #120	; 0x78
 80083cc:	4828      	ldr	r0, [pc, #160]	; (8008470 <_printf_i+0x248>)
 80083ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083d2:	e7e3      	b.n	800839c <_printf_i+0x174>
 80083d4:	0659      	lsls	r1, r3, #25
 80083d6:	bf48      	it	mi
 80083d8:	b2b6      	uxthmi	r6, r6
 80083da:	e7e6      	b.n	80083aa <_printf_i+0x182>
 80083dc:	4615      	mov	r5, r2
 80083de:	e7bb      	b.n	8008358 <_printf_i+0x130>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	6826      	ldr	r6, [r4, #0]
 80083e4:	6961      	ldr	r1, [r4, #20]
 80083e6:	1d18      	adds	r0, r3, #4
 80083e8:	6028      	str	r0, [r5, #0]
 80083ea:	0635      	lsls	r5, r6, #24
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	d501      	bpl.n	80083f4 <_printf_i+0x1cc>
 80083f0:	6019      	str	r1, [r3, #0]
 80083f2:	e002      	b.n	80083fa <_printf_i+0x1d2>
 80083f4:	0670      	lsls	r0, r6, #25
 80083f6:	d5fb      	bpl.n	80083f0 <_printf_i+0x1c8>
 80083f8:	8019      	strh	r1, [r3, #0]
 80083fa:	2300      	movs	r3, #0
 80083fc:	6123      	str	r3, [r4, #16]
 80083fe:	4615      	mov	r5, r2
 8008400:	e7ba      	b.n	8008378 <_printf_i+0x150>
 8008402:	682b      	ldr	r3, [r5, #0]
 8008404:	1d1a      	adds	r2, r3, #4
 8008406:	602a      	str	r2, [r5, #0]
 8008408:	681d      	ldr	r5, [r3, #0]
 800840a:	6862      	ldr	r2, [r4, #4]
 800840c:	2100      	movs	r1, #0
 800840e:	4628      	mov	r0, r5
 8008410:	f7f7 fee6 	bl	80001e0 <memchr>
 8008414:	b108      	cbz	r0, 800841a <_printf_i+0x1f2>
 8008416:	1b40      	subs	r0, r0, r5
 8008418:	6060      	str	r0, [r4, #4]
 800841a:	6863      	ldr	r3, [r4, #4]
 800841c:	6123      	str	r3, [r4, #16]
 800841e:	2300      	movs	r3, #0
 8008420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008424:	e7a8      	b.n	8008378 <_printf_i+0x150>
 8008426:	6923      	ldr	r3, [r4, #16]
 8008428:	462a      	mov	r2, r5
 800842a:	4649      	mov	r1, r9
 800842c:	4640      	mov	r0, r8
 800842e:	47d0      	blx	sl
 8008430:	3001      	adds	r0, #1
 8008432:	d0ab      	beq.n	800838c <_printf_i+0x164>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	079b      	lsls	r3, r3, #30
 8008438:	d413      	bmi.n	8008462 <_printf_i+0x23a>
 800843a:	68e0      	ldr	r0, [r4, #12]
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	4298      	cmp	r0, r3
 8008440:	bfb8      	it	lt
 8008442:	4618      	movlt	r0, r3
 8008444:	e7a4      	b.n	8008390 <_printf_i+0x168>
 8008446:	2301      	movs	r3, #1
 8008448:	4632      	mov	r2, r6
 800844a:	4649      	mov	r1, r9
 800844c:	4640      	mov	r0, r8
 800844e:	47d0      	blx	sl
 8008450:	3001      	adds	r0, #1
 8008452:	d09b      	beq.n	800838c <_printf_i+0x164>
 8008454:	3501      	adds	r5, #1
 8008456:	68e3      	ldr	r3, [r4, #12]
 8008458:	9903      	ldr	r1, [sp, #12]
 800845a:	1a5b      	subs	r3, r3, r1
 800845c:	42ab      	cmp	r3, r5
 800845e:	dcf2      	bgt.n	8008446 <_printf_i+0x21e>
 8008460:	e7eb      	b.n	800843a <_printf_i+0x212>
 8008462:	2500      	movs	r5, #0
 8008464:	f104 0619 	add.w	r6, r4, #25
 8008468:	e7f5      	b.n	8008456 <_printf_i+0x22e>
 800846a:	bf00      	nop
 800846c:	0800adfe 	.word	0x0800adfe
 8008470:	0800ae0f 	.word	0x0800ae0f

08008474 <_perror_r>:
 8008474:	6983      	ldr	r3, [r0, #24]
 8008476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008478:	68c4      	ldr	r4, [r0, #12]
 800847a:	4605      	mov	r5, r0
 800847c:	460e      	mov	r6, r1
 800847e:	b90b      	cbnz	r3, 8008484 <_perror_r+0x10>
 8008480:	f001 fadc 	bl	8009a3c <__sinit>
 8008484:	4b43      	ldr	r3, [pc, #268]	; (8008594 <_perror_r+0x120>)
 8008486:	429c      	cmp	r4, r3
 8008488:	d132      	bne.n	80084f0 <_perror_r+0x7c>
 800848a:	686c      	ldr	r4, [r5, #4]
 800848c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800848e:	07d8      	lsls	r0, r3, #31
 8008490:	d405      	bmi.n	800849e <_perror_r+0x2a>
 8008492:	89a3      	ldrh	r3, [r4, #12]
 8008494:	0599      	lsls	r1, r3, #22
 8008496:	d402      	bmi.n	800849e <_perror_r+0x2a>
 8008498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800849a:	f001 fb72 	bl	8009b82 <__retarget_lock_acquire_recursive>
 800849e:	4621      	mov	r1, r4
 80084a0:	4628      	mov	r0, r5
 80084a2:	f001 f9f9 	bl	8009898 <_fflush_r>
 80084a6:	bb6e      	cbnz	r6, 8008504 <_perror_r+0x90>
 80084a8:	6829      	ldr	r1, [r5, #0]
 80084aa:	ab01      	add	r3, sp, #4
 80084ac:	2201      	movs	r2, #1
 80084ae:	4628      	mov	r0, r5
 80084b0:	f000 f8d6 	bl	8008660 <_strerror_r>
 80084b4:	4607      	mov	r7, r0
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d14f      	bne.n	800855a <_perror_r+0xe6>
 80084ba:	4837      	ldr	r0, [pc, #220]	; (8008598 <_perror_r+0x124>)
 80084bc:	4f36      	ldr	r7, [pc, #216]	; (8008598 <_perror_r+0x124>)
 80084be:	f7f7 fe87 	bl	80001d0 <strlen>
 80084c2:	4606      	mov	r6, r0
 80084c4:	b156      	cbz	r6, 80084dc <_perror_r+0x68>
 80084c6:	4620      	mov	r0, r4
 80084c8:	f001 fa22 	bl	8009910 <fileno>
 80084cc:	4633      	mov	r3, r6
 80084ce:	4601      	mov	r1, r0
 80084d0:	463a      	mov	r2, r7
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 facc 	bl	8008a70 <_write_r>
 80084d8:	2800      	cmp	r0, #0
 80084da:	da51      	bge.n	8008580 <_perror_r+0x10c>
 80084dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084e6:	07d2      	lsls	r2, r2, #31
 80084e8:	81a3      	strh	r3, [r4, #12]
 80084ea:	d54c      	bpl.n	8008586 <_perror_r+0x112>
 80084ec:	b003      	add	sp, #12
 80084ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084f0:	4b2a      	ldr	r3, [pc, #168]	; (800859c <_perror_r+0x128>)
 80084f2:	429c      	cmp	r4, r3
 80084f4:	d101      	bne.n	80084fa <_perror_r+0x86>
 80084f6:	68ac      	ldr	r4, [r5, #8]
 80084f8:	e7c8      	b.n	800848c <_perror_r+0x18>
 80084fa:	4b29      	ldr	r3, [pc, #164]	; (80085a0 <_perror_r+0x12c>)
 80084fc:	429c      	cmp	r4, r3
 80084fe:	bf08      	it	eq
 8008500:	68ec      	ldreq	r4, [r5, #12]
 8008502:	e7c3      	b.n	800848c <_perror_r+0x18>
 8008504:	7833      	ldrb	r3, [r6, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d0ce      	beq.n	80084a8 <_perror_r+0x34>
 800850a:	4630      	mov	r0, r6
 800850c:	f7f7 fe60 	bl	80001d0 <strlen>
 8008510:	4607      	mov	r7, r0
 8008512:	b157      	cbz	r7, 800852a <_perror_r+0xb6>
 8008514:	4620      	mov	r0, r4
 8008516:	f001 f9fb 	bl	8009910 <fileno>
 800851a:	463b      	mov	r3, r7
 800851c:	4601      	mov	r1, r0
 800851e:	4632      	mov	r2, r6
 8008520:	4628      	mov	r0, r5
 8008522:	f000 faa5 	bl	8008a70 <_write_r>
 8008526:	2800      	cmp	r0, #0
 8008528:	da14      	bge.n	8008554 <_perror_r+0xe0>
 800852a:	481e      	ldr	r0, [pc, #120]	; (80085a4 <_perror_r+0x130>)
 800852c:	4f1d      	ldr	r7, [pc, #116]	; (80085a4 <_perror_r+0x130>)
 800852e:	f7f7 fe4f 	bl	80001d0 <strlen>
 8008532:	4606      	mov	r6, r0
 8008534:	2e00      	cmp	r6, #0
 8008536:	d0b7      	beq.n	80084a8 <_perror_r+0x34>
 8008538:	4620      	mov	r0, r4
 800853a:	f001 f9e9 	bl	8009910 <fileno>
 800853e:	4633      	mov	r3, r6
 8008540:	4601      	mov	r1, r0
 8008542:	463a      	mov	r2, r7
 8008544:	4628      	mov	r0, r5
 8008546:	f000 fa93 	bl	8008a70 <_write_r>
 800854a:	2800      	cmp	r0, #0
 800854c:	dbac      	blt.n	80084a8 <_perror_r+0x34>
 800854e:	1a36      	subs	r6, r6, r0
 8008550:	4407      	add	r7, r0
 8008552:	e7ef      	b.n	8008534 <_perror_r+0xc0>
 8008554:	1a3f      	subs	r7, r7, r0
 8008556:	4406      	add	r6, r0
 8008558:	e7db      	b.n	8008512 <_perror_r+0x9e>
 800855a:	f7f7 fe39 	bl	80001d0 <strlen>
 800855e:	4606      	mov	r6, r0
 8008560:	2e00      	cmp	r6, #0
 8008562:	d0aa      	beq.n	80084ba <_perror_r+0x46>
 8008564:	4620      	mov	r0, r4
 8008566:	f001 f9d3 	bl	8009910 <fileno>
 800856a:	4633      	mov	r3, r6
 800856c:	4601      	mov	r1, r0
 800856e:	463a      	mov	r2, r7
 8008570:	4628      	mov	r0, r5
 8008572:	f000 fa7d 	bl	8008a70 <_write_r>
 8008576:	2800      	cmp	r0, #0
 8008578:	db9f      	blt.n	80084ba <_perror_r+0x46>
 800857a:	1a36      	subs	r6, r6, r0
 800857c:	4407      	add	r7, r0
 800857e:	e7ef      	b.n	8008560 <_perror_r+0xec>
 8008580:	1a36      	subs	r6, r6, r0
 8008582:	4407      	add	r7, r0
 8008584:	e79e      	b.n	80084c4 <_perror_r+0x50>
 8008586:	059b      	lsls	r3, r3, #22
 8008588:	d4b0      	bmi.n	80084ec <_perror_r+0x78>
 800858a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800858c:	f001 fafa 	bl	8009b84 <__retarget_lock_release_recursive>
 8008590:	e7ac      	b.n	80084ec <_perror_r+0x78>
 8008592:	bf00      	nop
 8008594:	0800b568 	.word	0x0800b568
 8008598:	0800b74f 	.word	0x0800b74f
 800859c:	0800b588 	.word	0x0800b588
 80085a0:	0800b548 	.word	0x0800b548
 80085a4:	0800b71f 	.word	0x0800b71f

080085a8 <perror>:
 80085a8:	4b02      	ldr	r3, [pc, #8]	; (80085b4 <perror+0xc>)
 80085aa:	4601      	mov	r1, r0
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	f7ff bf61 	b.w	8008474 <_perror_r>
 80085b2:	bf00      	nop
 80085b4:	2000003c 	.word	0x2000003c

080085b8 <_sbrk_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4d06      	ldr	r5, [pc, #24]	; (80085d4 <_sbrk_r+0x1c>)
 80085bc:	2300      	movs	r3, #0
 80085be:	4604      	mov	r4, r0
 80085c0:	4608      	mov	r0, r1
 80085c2:	602b      	str	r3, [r5, #0]
 80085c4:	f7f9 fa18 	bl	80019f8 <_sbrk>
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	d102      	bne.n	80085d2 <_sbrk_r+0x1a>
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	b103      	cbz	r3, 80085d2 <_sbrk_r+0x1a>
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	20000698 	.word	0x20000698

080085d8 <_raise_r>:
 80085d8:	291f      	cmp	r1, #31
 80085da:	b538      	push	{r3, r4, r5, lr}
 80085dc:	4604      	mov	r4, r0
 80085de:	460d      	mov	r5, r1
 80085e0:	d904      	bls.n	80085ec <_raise_r+0x14>
 80085e2:	2316      	movs	r3, #22
 80085e4:	6003      	str	r3, [r0, #0]
 80085e6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085ee:	b112      	cbz	r2, 80085f6 <_raise_r+0x1e>
 80085f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085f4:	b94b      	cbnz	r3, 800860a <_raise_r+0x32>
 80085f6:	4620      	mov	r0, r4
 80085f8:	f000 f830 	bl	800865c <_getpid_r>
 80085fc:	462a      	mov	r2, r5
 80085fe:	4601      	mov	r1, r0
 8008600:	4620      	mov	r0, r4
 8008602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008606:	f000 b817 	b.w	8008638 <_kill_r>
 800860a:	2b01      	cmp	r3, #1
 800860c:	d00a      	beq.n	8008624 <_raise_r+0x4c>
 800860e:	1c59      	adds	r1, r3, #1
 8008610:	d103      	bne.n	800861a <_raise_r+0x42>
 8008612:	2316      	movs	r3, #22
 8008614:	6003      	str	r3, [r0, #0]
 8008616:	2001      	movs	r0, #1
 8008618:	e7e7      	b.n	80085ea <_raise_r+0x12>
 800861a:	2400      	movs	r4, #0
 800861c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008620:	4628      	mov	r0, r5
 8008622:	4798      	blx	r3
 8008624:	2000      	movs	r0, #0
 8008626:	e7e0      	b.n	80085ea <_raise_r+0x12>

08008628 <raise>:
 8008628:	4b02      	ldr	r3, [pc, #8]	; (8008634 <raise+0xc>)
 800862a:	4601      	mov	r1, r0
 800862c:	6818      	ldr	r0, [r3, #0]
 800862e:	f7ff bfd3 	b.w	80085d8 <_raise_r>
 8008632:	bf00      	nop
 8008634:	2000003c 	.word	0x2000003c

08008638 <_kill_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4d07      	ldr	r5, [pc, #28]	; (8008658 <_kill_r+0x20>)
 800863c:	2300      	movs	r3, #0
 800863e:	4604      	mov	r4, r0
 8008640:	4608      	mov	r0, r1
 8008642:	4611      	mov	r1, r2
 8008644:	602b      	str	r3, [r5, #0]
 8008646:	f7f9 f94f 	bl	80018e8 <_kill>
 800864a:	1c43      	adds	r3, r0, #1
 800864c:	d102      	bne.n	8008654 <_kill_r+0x1c>
 800864e:	682b      	ldr	r3, [r5, #0]
 8008650:	b103      	cbz	r3, 8008654 <_kill_r+0x1c>
 8008652:	6023      	str	r3, [r4, #0]
 8008654:	bd38      	pop	{r3, r4, r5, pc}
 8008656:	bf00      	nop
 8008658:	20000698 	.word	0x20000698

0800865c <_getpid_r>:
 800865c:	f7f9 b93c 	b.w	80018d8 <_getpid>

08008660 <_strerror_r>:
 8008660:	b510      	push	{r4, lr}
 8008662:	4604      	mov	r4, r0
 8008664:	4608      	mov	r0, r1
 8008666:	4611      	mov	r1, r2
 8008668:	288e      	cmp	r0, #142	; 0x8e
 800866a:	f200 8130 	bhi.w	80088ce <_strerror_r+0x26e>
 800866e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8008672:	0139      	.short	0x0139
 8008674:	0092008f 	.word	0x0092008f
 8008678:	00960094 	.word	0x00960094
 800867c:	009a0098 	.word	0x009a0098
 8008680:	009e009c 	.word	0x009e009c
 8008684:	00a400a2 	.word	0x00a400a2
 8008688:	00aa00a8 	.word	0x00aa00a8
 800868c:	00ae00ac 	.word	0x00ae00ac
 8008690:	00b0012e 	.word	0x00b0012e
 8008694:	00b400b2 	.word	0x00b400b2
 8008698:	00b800b6 	.word	0x00b800b6
 800869c:	00c000be 	.word	0x00c000be
 80086a0:	00c800c6 	.word	0x00c800c6
 80086a4:	00cc00ca 	.word	0x00cc00ca
 80086a8:	00d200ce 	.word	0x00d200ce
 80086ac:	00d800d6 	.word	0x00d800d6
 80086b0:	00dc00da 	.word	0x00dc00da
 80086b4:	00e000de 	.word	0x00e000de
 80086b8:	00e400e2 	.word	0x00e400e2
 80086bc:	012e012e 	.word	0x012e012e
 80086c0:	012e012e 	.word	0x012e012e
 80086c4:	012e012e 	.word	0x012e012e
 80086c8:	012e012e 	.word	0x012e012e
 80086cc:	00ec00e8 	.word	0x00ec00e8
 80086d0:	012e012e 	.word	0x012e012e
 80086d4:	012e012e 	.word	0x012e012e
 80086d8:	012e012e 	.word	0x012e012e
 80086dc:	012e012e 	.word	0x012e012e
 80086e0:	012e012e 	.word	0x012e012e
 80086e4:	012e012e 	.word	0x012e012e
 80086e8:	00ee012e 	.word	0x00ee012e
 80086ec:	00f00108 	.word	0x00f00108
 80086f0:	012e00f2 	.word	0x012e00f2
 80086f4:	012e012e 	.word	0x012e012e
 80086f8:	012e00f4 	.word	0x012e00f4
 80086fc:	012e012e 	.word	0x012e012e
 8008700:	012e00f6 	.word	0x012e00f6
 8008704:	00fa012e 	.word	0x00fa012e
 8008708:	012e012e 	.word	0x012e012e
 800870c:	012e00fc 	.word	0x012e00fc
 8008710:	012e012e 	.word	0x012e012e
 8008714:	012e012e 	.word	0x012e012e
 8008718:	012e012e 	.word	0x012e012e
 800871c:	012e012e 	.word	0x012e012e
 8008720:	00fe012e 	.word	0x00fe012e
 8008724:	0100012e 	.word	0x0100012e
 8008728:	01040102 	.word	0x01040102
 800872c:	012e012e 	.word	0x012e012e
 8008730:	012e0126 	.word	0x012e0126
 8008734:	012e012e 	.word	0x012e012e
 8008738:	012e012e 	.word	0x012e012e
 800873c:	012e012e 	.word	0x012e012e
 8008740:	0114012e 	.word	0x0114012e
 8008744:	010a0106 	.word	0x010a0106
 8008748:	010e010c 	.word	0x010e010c
 800874c:	012e0110 	.word	0x012e0110
 8008750:	01160112 	.word	0x01160112
 8008754:	00ea011a 	.word	0x00ea011a
 8008758:	012c00c2 	.word	0x012c00c2
 800875c:	00d000ba 	.word	0x00d000ba
 8008760:	00a000bc 	.word	0x00a000bc
 8008764:	012a00a6 	.word	0x012a00a6
 8008768:	012e00f8 	.word	0x012e00f8
 800876c:	00c40118 	.word	0x00c40118
 8008770:	011c011e 	.word	0x011c011e
 8008774:	012e012e 	.word	0x012e012e
 8008778:	012e012e 	.word	0x012e012e
 800877c:	00d4012e 	.word	0x00d4012e
 8008780:	012e012e 	.word	0x012e012e
 8008784:	00e6012e 	.word	0x00e6012e
 8008788:	01200128 	.word	0x01200128
 800878c:	01240122 	.word	0x01240122
 8008790:	4b55      	ldr	r3, [pc, #340]	; (80088e8 <_strerror_r+0x288>)
 8008792:	4618      	mov	r0, r3
 8008794:	bd10      	pop	{r4, pc}
 8008796:	4b55      	ldr	r3, [pc, #340]	; (80088ec <_strerror_r+0x28c>)
 8008798:	e7fb      	b.n	8008792 <_strerror_r+0x132>
 800879a:	4b55      	ldr	r3, [pc, #340]	; (80088f0 <_strerror_r+0x290>)
 800879c:	e7f9      	b.n	8008792 <_strerror_r+0x132>
 800879e:	4b55      	ldr	r3, [pc, #340]	; (80088f4 <_strerror_r+0x294>)
 80087a0:	e7f7      	b.n	8008792 <_strerror_r+0x132>
 80087a2:	4b55      	ldr	r3, [pc, #340]	; (80088f8 <_strerror_r+0x298>)
 80087a4:	e7f5      	b.n	8008792 <_strerror_r+0x132>
 80087a6:	4b55      	ldr	r3, [pc, #340]	; (80088fc <_strerror_r+0x29c>)
 80087a8:	e7f3      	b.n	8008792 <_strerror_r+0x132>
 80087aa:	4b55      	ldr	r3, [pc, #340]	; (8008900 <_strerror_r+0x2a0>)
 80087ac:	e7f1      	b.n	8008792 <_strerror_r+0x132>
 80087ae:	4b55      	ldr	r3, [pc, #340]	; (8008904 <_strerror_r+0x2a4>)
 80087b0:	e7ef      	b.n	8008792 <_strerror_r+0x132>
 80087b2:	4b55      	ldr	r3, [pc, #340]	; (8008908 <_strerror_r+0x2a8>)
 80087b4:	e7ed      	b.n	8008792 <_strerror_r+0x132>
 80087b6:	4b55      	ldr	r3, [pc, #340]	; (800890c <_strerror_r+0x2ac>)
 80087b8:	e7eb      	b.n	8008792 <_strerror_r+0x132>
 80087ba:	4b55      	ldr	r3, [pc, #340]	; (8008910 <_strerror_r+0x2b0>)
 80087bc:	e7e9      	b.n	8008792 <_strerror_r+0x132>
 80087be:	4b55      	ldr	r3, [pc, #340]	; (8008914 <_strerror_r+0x2b4>)
 80087c0:	e7e7      	b.n	8008792 <_strerror_r+0x132>
 80087c2:	4b55      	ldr	r3, [pc, #340]	; (8008918 <_strerror_r+0x2b8>)
 80087c4:	e7e5      	b.n	8008792 <_strerror_r+0x132>
 80087c6:	4b55      	ldr	r3, [pc, #340]	; (800891c <_strerror_r+0x2bc>)
 80087c8:	e7e3      	b.n	8008792 <_strerror_r+0x132>
 80087ca:	4b55      	ldr	r3, [pc, #340]	; (8008920 <_strerror_r+0x2c0>)
 80087cc:	e7e1      	b.n	8008792 <_strerror_r+0x132>
 80087ce:	4b55      	ldr	r3, [pc, #340]	; (8008924 <_strerror_r+0x2c4>)
 80087d0:	e7df      	b.n	8008792 <_strerror_r+0x132>
 80087d2:	4b55      	ldr	r3, [pc, #340]	; (8008928 <_strerror_r+0x2c8>)
 80087d4:	e7dd      	b.n	8008792 <_strerror_r+0x132>
 80087d6:	4b55      	ldr	r3, [pc, #340]	; (800892c <_strerror_r+0x2cc>)
 80087d8:	e7db      	b.n	8008792 <_strerror_r+0x132>
 80087da:	4b55      	ldr	r3, [pc, #340]	; (8008930 <_strerror_r+0x2d0>)
 80087dc:	e7d9      	b.n	8008792 <_strerror_r+0x132>
 80087de:	4b55      	ldr	r3, [pc, #340]	; (8008934 <_strerror_r+0x2d4>)
 80087e0:	e7d7      	b.n	8008792 <_strerror_r+0x132>
 80087e2:	4b55      	ldr	r3, [pc, #340]	; (8008938 <_strerror_r+0x2d8>)
 80087e4:	e7d5      	b.n	8008792 <_strerror_r+0x132>
 80087e6:	4b55      	ldr	r3, [pc, #340]	; (800893c <_strerror_r+0x2dc>)
 80087e8:	e7d3      	b.n	8008792 <_strerror_r+0x132>
 80087ea:	4b55      	ldr	r3, [pc, #340]	; (8008940 <_strerror_r+0x2e0>)
 80087ec:	e7d1      	b.n	8008792 <_strerror_r+0x132>
 80087ee:	4b55      	ldr	r3, [pc, #340]	; (8008944 <_strerror_r+0x2e4>)
 80087f0:	e7cf      	b.n	8008792 <_strerror_r+0x132>
 80087f2:	4b55      	ldr	r3, [pc, #340]	; (8008948 <_strerror_r+0x2e8>)
 80087f4:	e7cd      	b.n	8008792 <_strerror_r+0x132>
 80087f6:	4b55      	ldr	r3, [pc, #340]	; (800894c <_strerror_r+0x2ec>)
 80087f8:	e7cb      	b.n	8008792 <_strerror_r+0x132>
 80087fa:	4b55      	ldr	r3, [pc, #340]	; (8008950 <_strerror_r+0x2f0>)
 80087fc:	e7c9      	b.n	8008792 <_strerror_r+0x132>
 80087fe:	4b55      	ldr	r3, [pc, #340]	; (8008954 <_strerror_r+0x2f4>)
 8008800:	e7c7      	b.n	8008792 <_strerror_r+0x132>
 8008802:	4b55      	ldr	r3, [pc, #340]	; (8008958 <_strerror_r+0x2f8>)
 8008804:	e7c5      	b.n	8008792 <_strerror_r+0x132>
 8008806:	4b55      	ldr	r3, [pc, #340]	; (800895c <_strerror_r+0x2fc>)
 8008808:	e7c3      	b.n	8008792 <_strerror_r+0x132>
 800880a:	4b55      	ldr	r3, [pc, #340]	; (8008960 <_strerror_r+0x300>)
 800880c:	e7c1      	b.n	8008792 <_strerror_r+0x132>
 800880e:	4b55      	ldr	r3, [pc, #340]	; (8008964 <_strerror_r+0x304>)
 8008810:	e7bf      	b.n	8008792 <_strerror_r+0x132>
 8008812:	4b55      	ldr	r3, [pc, #340]	; (8008968 <_strerror_r+0x308>)
 8008814:	e7bd      	b.n	8008792 <_strerror_r+0x132>
 8008816:	4b55      	ldr	r3, [pc, #340]	; (800896c <_strerror_r+0x30c>)
 8008818:	e7bb      	b.n	8008792 <_strerror_r+0x132>
 800881a:	4b55      	ldr	r3, [pc, #340]	; (8008970 <_strerror_r+0x310>)
 800881c:	e7b9      	b.n	8008792 <_strerror_r+0x132>
 800881e:	4b55      	ldr	r3, [pc, #340]	; (8008974 <_strerror_r+0x314>)
 8008820:	e7b7      	b.n	8008792 <_strerror_r+0x132>
 8008822:	4b55      	ldr	r3, [pc, #340]	; (8008978 <_strerror_r+0x318>)
 8008824:	e7b5      	b.n	8008792 <_strerror_r+0x132>
 8008826:	4b55      	ldr	r3, [pc, #340]	; (800897c <_strerror_r+0x31c>)
 8008828:	e7b3      	b.n	8008792 <_strerror_r+0x132>
 800882a:	4b55      	ldr	r3, [pc, #340]	; (8008980 <_strerror_r+0x320>)
 800882c:	e7b1      	b.n	8008792 <_strerror_r+0x132>
 800882e:	4b55      	ldr	r3, [pc, #340]	; (8008984 <_strerror_r+0x324>)
 8008830:	e7af      	b.n	8008792 <_strerror_r+0x132>
 8008832:	4b55      	ldr	r3, [pc, #340]	; (8008988 <_strerror_r+0x328>)
 8008834:	e7ad      	b.n	8008792 <_strerror_r+0x132>
 8008836:	4b55      	ldr	r3, [pc, #340]	; (800898c <_strerror_r+0x32c>)
 8008838:	e7ab      	b.n	8008792 <_strerror_r+0x132>
 800883a:	4b55      	ldr	r3, [pc, #340]	; (8008990 <_strerror_r+0x330>)
 800883c:	e7a9      	b.n	8008792 <_strerror_r+0x132>
 800883e:	4b55      	ldr	r3, [pc, #340]	; (8008994 <_strerror_r+0x334>)
 8008840:	e7a7      	b.n	8008792 <_strerror_r+0x132>
 8008842:	4b55      	ldr	r3, [pc, #340]	; (8008998 <_strerror_r+0x338>)
 8008844:	e7a5      	b.n	8008792 <_strerror_r+0x132>
 8008846:	4b55      	ldr	r3, [pc, #340]	; (800899c <_strerror_r+0x33c>)
 8008848:	e7a3      	b.n	8008792 <_strerror_r+0x132>
 800884a:	4b55      	ldr	r3, [pc, #340]	; (80089a0 <_strerror_r+0x340>)
 800884c:	e7a1      	b.n	8008792 <_strerror_r+0x132>
 800884e:	4b55      	ldr	r3, [pc, #340]	; (80089a4 <_strerror_r+0x344>)
 8008850:	e79f      	b.n	8008792 <_strerror_r+0x132>
 8008852:	4b55      	ldr	r3, [pc, #340]	; (80089a8 <_strerror_r+0x348>)
 8008854:	e79d      	b.n	8008792 <_strerror_r+0x132>
 8008856:	4b55      	ldr	r3, [pc, #340]	; (80089ac <_strerror_r+0x34c>)
 8008858:	e79b      	b.n	8008792 <_strerror_r+0x132>
 800885a:	4b55      	ldr	r3, [pc, #340]	; (80089b0 <_strerror_r+0x350>)
 800885c:	e799      	b.n	8008792 <_strerror_r+0x132>
 800885e:	4b55      	ldr	r3, [pc, #340]	; (80089b4 <_strerror_r+0x354>)
 8008860:	e797      	b.n	8008792 <_strerror_r+0x132>
 8008862:	4b55      	ldr	r3, [pc, #340]	; (80089b8 <_strerror_r+0x358>)
 8008864:	e795      	b.n	8008792 <_strerror_r+0x132>
 8008866:	4b55      	ldr	r3, [pc, #340]	; (80089bc <_strerror_r+0x35c>)
 8008868:	e793      	b.n	8008792 <_strerror_r+0x132>
 800886a:	4b55      	ldr	r3, [pc, #340]	; (80089c0 <_strerror_r+0x360>)
 800886c:	e791      	b.n	8008792 <_strerror_r+0x132>
 800886e:	4b55      	ldr	r3, [pc, #340]	; (80089c4 <_strerror_r+0x364>)
 8008870:	e78f      	b.n	8008792 <_strerror_r+0x132>
 8008872:	4b55      	ldr	r3, [pc, #340]	; (80089c8 <_strerror_r+0x368>)
 8008874:	e78d      	b.n	8008792 <_strerror_r+0x132>
 8008876:	4b55      	ldr	r3, [pc, #340]	; (80089cc <_strerror_r+0x36c>)
 8008878:	e78b      	b.n	8008792 <_strerror_r+0x132>
 800887a:	4b55      	ldr	r3, [pc, #340]	; (80089d0 <_strerror_r+0x370>)
 800887c:	e789      	b.n	8008792 <_strerror_r+0x132>
 800887e:	4b55      	ldr	r3, [pc, #340]	; (80089d4 <_strerror_r+0x374>)
 8008880:	e787      	b.n	8008792 <_strerror_r+0x132>
 8008882:	4b55      	ldr	r3, [pc, #340]	; (80089d8 <_strerror_r+0x378>)
 8008884:	e785      	b.n	8008792 <_strerror_r+0x132>
 8008886:	4b55      	ldr	r3, [pc, #340]	; (80089dc <_strerror_r+0x37c>)
 8008888:	e783      	b.n	8008792 <_strerror_r+0x132>
 800888a:	4b55      	ldr	r3, [pc, #340]	; (80089e0 <_strerror_r+0x380>)
 800888c:	e781      	b.n	8008792 <_strerror_r+0x132>
 800888e:	4b55      	ldr	r3, [pc, #340]	; (80089e4 <_strerror_r+0x384>)
 8008890:	e77f      	b.n	8008792 <_strerror_r+0x132>
 8008892:	4b55      	ldr	r3, [pc, #340]	; (80089e8 <_strerror_r+0x388>)
 8008894:	e77d      	b.n	8008792 <_strerror_r+0x132>
 8008896:	4b55      	ldr	r3, [pc, #340]	; (80089ec <_strerror_r+0x38c>)
 8008898:	e77b      	b.n	8008792 <_strerror_r+0x132>
 800889a:	4b55      	ldr	r3, [pc, #340]	; (80089f0 <_strerror_r+0x390>)
 800889c:	e779      	b.n	8008792 <_strerror_r+0x132>
 800889e:	4b55      	ldr	r3, [pc, #340]	; (80089f4 <_strerror_r+0x394>)
 80088a0:	e777      	b.n	8008792 <_strerror_r+0x132>
 80088a2:	4b55      	ldr	r3, [pc, #340]	; (80089f8 <_strerror_r+0x398>)
 80088a4:	e775      	b.n	8008792 <_strerror_r+0x132>
 80088a6:	4b55      	ldr	r3, [pc, #340]	; (80089fc <_strerror_r+0x39c>)
 80088a8:	e773      	b.n	8008792 <_strerror_r+0x132>
 80088aa:	4b55      	ldr	r3, [pc, #340]	; (8008a00 <_strerror_r+0x3a0>)
 80088ac:	e771      	b.n	8008792 <_strerror_r+0x132>
 80088ae:	4b55      	ldr	r3, [pc, #340]	; (8008a04 <_strerror_r+0x3a4>)
 80088b0:	e76f      	b.n	8008792 <_strerror_r+0x132>
 80088b2:	4b55      	ldr	r3, [pc, #340]	; (8008a08 <_strerror_r+0x3a8>)
 80088b4:	e76d      	b.n	8008792 <_strerror_r+0x132>
 80088b6:	4b55      	ldr	r3, [pc, #340]	; (8008a0c <_strerror_r+0x3ac>)
 80088b8:	e76b      	b.n	8008792 <_strerror_r+0x132>
 80088ba:	4b55      	ldr	r3, [pc, #340]	; (8008a10 <_strerror_r+0x3b0>)
 80088bc:	e769      	b.n	8008792 <_strerror_r+0x132>
 80088be:	4b55      	ldr	r3, [pc, #340]	; (8008a14 <_strerror_r+0x3b4>)
 80088c0:	e767      	b.n	8008792 <_strerror_r+0x132>
 80088c2:	4b55      	ldr	r3, [pc, #340]	; (8008a18 <_strerror_r+0x3b8>)
 80088c4:	e765      	b.n	8008792 <_strerror_r+0x132>
 80088c6:	4b55      	ldr	r3, [pc, #340]	; (8008a1c <_strerror_r+0x3bc>)
 80088c8:	e763      	b.n	8008792 <_strerror_r+0x132>
 80088ca:	4b55      	ldr	r3, [pc, #340]	; (8008a20 <_strerror_r+0x3c0>)
 80088cc:	e761      	b.n	8008792 <_strerror_r+0x132>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	bf14      	ite	ne
 80088d2:	461a      	movne	r2, r3
 80088d4:	4622      	moveq	r2, r4
 80088d6:	f000 f8a9 	bl	8008a2c <_user_strerror>
 80088da:	4b52      	ldr	r3, [pc, #328]	; (8008a24 <_strerror_r+0x3c4>)
 80088dc:	2800      	cmp	r0, #0
 80088de:	bf18      	it	ne
 80088e0:	4603      	movne	r3, r0
 80088e2:	e756      	b.n	8008792 <_strerror_r+0x132>
 80088e4:	4b50      	ldr	r3, [pc, #320]	; (8008a28 <_strerror_r+0x3c8>)
 80088e6:	e754      	b.n	8008792 <_strerror_r+0x132>
 80088e8:	0800ae20 	.word	0x0800ae20
 80088ec:	0800ae2a 	.word	0x0800ae2a
 80088f0:	0800ae44 	.word	0x0800ae44
 80088f4:	0800ae54 	.word	0x0800ae54
 80088f8:	0800ae6c 	.word	0x0800ae6c
 80088fc:	0800ae76 	.word	0x0800ae76
 8008900:	0800ae90 	.word	0x0800ae90
 8008904:	0800aea2 	.word	0x0800aea2
 8008908:	0800aeb4 	.word	0x0800aeb4
 800890c:	0800aecd 	.word	0x0800aecd
 8008910:	0800aedd 	.word	0x0800aedd
 8008914:	0800aee9 	.word	0x0800aee9
 8008918:	0800af06 	.word	0x0800af06
 800891c:	0800af18 	.word	0x0800af18
 8008920:	0800af29 	.word	0x0800af29
 8008924:	0800af3b 	.word	0x0800af3b
 8008928:	0800af47 	.word	0x0800af47
 800892c:	0800af5f 	.word	0x0800af5f
 8008930:	0800af6b 	.word	0x0800af6b
 8008934:	0800af7d 	.word	0x0800af7d
 8008938:	0800af8c 	.word	0x0800af8c
 800893c:	0800af9c 	.word	0x0800af9c
 8008940:	0800afa9 	.word	0x0800afa9
 8008944:	0800afc8 	.word	0x0800afc8
 8008948:	0800afd7 	.word	0x0800afd7
 800894c:	0800afe8 	.word	0x0800afe8
 8008950:	0800b00c 	.word	0x0800b00c
 8008954:	0800b02a 	.word	0x0800b02a
 8008958:	0800b048 	.word	0x0800b048
 800895c:	0800b068 	.word	0x0800b068
 8008960:	0800b07f 	.word	0x0800b07f
 8008964:	0800b08e 	.word	0x0800b08e
 8008968:	0800b09d 	.word	0x0800b09d
 800896c:	0800b0b1 	.word	0x0800b0b1
 8008970:	0800b0c9 	.word	0x0800b0c9
 8008974:	0800b0d7 	.word	0x0800b0d7
 8008978:	0800b0e4 	.word	0x0800b0e4
 800897c:	0800b0fa 	.word	0x0800b0fa
 8008980:	0800b109 	.word	0x0800b109
 8008984:	0800b115 	.word	0x0800b115
 8008988:	0800b144 	.word	0x0800b144
 800898c:	0800b155 	.word	0x0800b155
 8008990:	0800b170 	.word	0x0800b170
 8008994:	0800b183 	.word	0x0800b183
 8008998:	0800b199 	.word	0x0800b199
 800899c:	0800b1a2 	.word	0x0800b1a2
 80089a0:	0800b1b9 	.word	0x0800b1b9
 80089a4:	0800b1c1 	.word	0x0800b1c1
 80089a8:	0800b1ce 	.word	0x0800b1ce
 80089ac:	0800b1e3 	.word	0x0800b1e3
 80089b0:	0800b1f7 	.word	0x0800b1f7
 80089b4:	0800b20f 	.word	0x0800b20f
 80089b8:	0800b21e 	.word	0x0800b21e
 80089bc:	0800b22f 	.word	0x0800b22f
 80089c0:	0800b242 	.word	0x0800b242
 80089c4:	0800b24e 	.word	0x0800b24e
 80089c8:	0800b267 	.word	0x0800b267
 80089cc:	0800b27b 	.word	0x0800b27b
 80089d0:	0800b296 	.word	0x0800b296
 80089d4:	0800b2ae 	.word	0x0800b2ae
 80089d8:	0800b2c8 	.word	0x0800b2c8
 80089dc:	0800b2d0 	.word	0x0800b2d0
 80089e0:	0800b300 	.word	0x0800b300
 80089e4:	0800b31f 	.word	0x0800b31f
 80089e8:	0800b33e 	.word	0x0800b33e
 80089ec:	0800b355 	.word	0x0800b355
 80089f0:	0800b368 	.word	0x0800b368
 80089f4:	0800b381 	.word	0x0800b381
 80089f8:	0800b398 	.word	0x0800b398
 80089fc:	0800b3ae 	.word	0x0800b3ae
 8008a00:	0800b3cf 	.word	0x0800b3cf
 8008a04:	0800b3e7 	.word	0x0800b3e7
 8008a08:	0800b403 	.word	0x0800b403
 8008a0c:	0800b416 	.word	0x0800b416
 8008a10:	0800b42c 	.word	0x0800b42c
 8008a14:	0800b440 	.word	0x0800b440
 8008a18:	0800b462 	.word	0x0800b462
 8008a1c:	0800b488 	.word	0x0800b488
 8008a20:	0800b499 	.word	0x0800b499
 8008a24:	0800b750 	.word	0x0800b750
 8008a28:	0800b4ae 	.word	0x0800b4ae

08008a2c <_user_strerror>:
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	4770      	bx	lr

08008a30 <_vsiprintf_r>:
 8008a30:	b500      	push	{lr}
 8008a32:	b09b      	sub	sp, #108	; 0x6c
 8008a34:	9100      	str	r1, [sp, #0]
 8008a36:	9104      	str	r1, [sp, #16]
 8008a38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a3c:	9105      	str	r1, [sp, #20]
 8008a3e:	9102      	str	r1, [sp, #8]
 8008a40:	4905      	ldr	r1, [pc, #20]	; (8008a58 <_vsiprintf_r+0x28>)
 8008a42:	9103      	str	r1, [sp, #12]
 8008a44:	4669      	mov	r1, sp
 8008a46:	f001 fcaf 	bl	800a3a8 <_svfiprintf_r>
 8008a4a:	9b00      	ldr	r3, [sp, #0]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	701a      	strb	r2, [r3, #0]
 8008a50:	b01b      	add	sp, #108	; 0x6c
 8008a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a56:	bf00      	nop
 8008a58:	ffff0208 	.word	0xffff0208

08008a5c <vsiprintf>:
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	460a      	mov	r2, r1
 8008a60:	4601      	mov	r1, r0
 8008a62:	4802      	ldr	r0, [pc, #8]	; (8008a6c <vsiprintf+0x10>)
 8008a64:	6800      	ldr	r0, [r0, #0]
 8008a66:	f7ff bfe3 	b.w	8008a30 <_vsiprintf_r>
 8008a6a:	bf00      	nop
 8008a6c:	2000003c 	.word	0x2000003c

08008a70 <_write_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4d07      	ldr	r5, [pc, #28]	; (8008a90 <_write_r+0x20>)
 8008a74:	4604      	mov	r4, r0
 8008a76:	4608      	mov	r0, r1
 8008a78:	4611      	mov	r1, r2
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	602a      	str	r2, [r5, #0]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	f7f8 ff69 	bl	8001956 <_write>
 8008a84:	1c43      	adds	r3, r0, #1
 8008a86:	d102      	bne.n	8008a8e <_write_r+0x1e>
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	b103      	cbz	r3, 8008a8e <_write_r+0x1e>
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	bd38      	pop	{r3, r4, r5, pc}
 8008a90:	20000698 	.word	0x20000698

08008a94 <quorem>:
 8008a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a98:	6903      	ldr	r3, [r0, #16]
 8008a9a:	690c      	ldr	r4, [r1, #16]
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	4607      	mov	r7, r0
 8008aa0:	f2c0 8081 	blt.w	8008ba6 <quorem+0x112>
 8008aa4:	3c01      	subs	r4, #1
 8008aa6:	f101 0814 	add.w	r8, r1, #20
 8008aaa:	f100 0514 	add.w	r5, r0, #20
 8008aae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ab2:	9301      	str	r3, [sp, #4]
 8008ab4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ab8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008abc:	3301      	adds	r3, #1
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ac4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ac8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008acc:	d331      	bcc.n	8008b32 <quorem+0x9e>
 8008ace:	f04f 0e00 	mov.w	lr, #0
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	46ac      	mov	ip, r5
 8008ad6:	46f2      	mov	sl, lr
 8008ad8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008adc:	b293      	uxth	r3, r2
 8008ade:	fb06 e303 	mla	r3, r6, r3, lr
 8008ae2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	ebaa 0303 	sub.w	r3, sl, r3
 8008aec:	f8dc a000 	ldr.w	sl, [ip]
 8008af0:	0c12      	lsrs	r2, r2, #16
 8008af2:	fa13 f38a 	uxtah	r3, r3, sl
 8008af6:	fb06 e202 	mla	r2, r6, r2, lr
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	9b00      	ldr	r3, [sp, #0]
 8008afe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b02:	b292      	uxth	r2, r2
 8008b04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b0c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b10:	4581      	cmp	r9, r0
 8008b12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b16:	f84c 3b04 	str.w	r3, [ip], #4
 8008b1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b1e:	d2db      	bcs.n	8008ad8 <quorem+0x44>
 8008b20:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b24:	b92b      	cbnz	r3, 8008b32 <quorem+0x9e>
 8008b26:	9b01      	ldr	r3, [sp, #4]
 8008b28:	3b04      	subs	r3, #4
 8008b2a:	429d      	cmp	r5, r3
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	d32e      	bcc.n	8008b8e <quorem+0xfa>
 8008b30:	613c      	str	r4, [r7, #16]
 8008b32:	4638      	mov	r0, r7
 8008b34:	f001 fac4 	bl	800a0c0 <__mcmp>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	db24      	blt.n	8008b86 <quorem+0xf2>
 8008b3c:	3601      	adds	r6, #1
 8008b3e:	4628      	mov	r0, r5
 8008b40:	f04f 0c00 	mov.w	ip, #0
 8008b44:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b48:	f8d0 e000 	ldr.w	lr, [r0]
 8008b4c:	b293      	uxth	r3, r2
 8008b4e:	ebac 0303 	sub.w	r3, ip, r3
 8008b52:	0c12      	lsrs	r2, r2, #16
 8008b54:	fa13 f38e 	uxtah	r3, r3, lr
 8008b58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b66:	45c1      	cmp	r9, r8
 8008b68:	f840 3b04 	str.w	r3, [r0], #4
 8008b6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b70:	d2e8      	bcs.n	8008b44 <quorem+0xb0>
 8008b72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b7a:	b922      	cbnz	r2, 8008b86 <quorem+0xf2>
 8008b7c:	3b04      	subs	r3, #4
 8008b7e:	429d      	cmp	r5, r3
 8008b80:	461a      	mov	r2, r3
 8008b82:	d30a      	bcc.n	8008b9a <quorem+0x106>
 8008b84:	613c      	str	r4, [r7, #16]
 8008b86:	4630      	mov	r0, r6
 8008b88:	b003      	add	sp, #12
 8008b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8e:	6812      	ldr	r2, [r2, #0]
 8008b90:	3b04      	subs	r3, #4
 8008b92:	2a00      	cmp	r2, #0
 8008b94:	d1cc      	bne.n	8008b30 <quorem+0x9c>
 8008b96:	3c01      	subs	r4, #1
 8008b98:	e7c7      	b.n	8008b2a <quorem+0x96>
 8008b9a:	6812      	ldr	r2, [r2, #0]
 8008b9c:	3b04      	subs	r3, #4
 8008b9e:	2a00      	cmp	r2, #0
 8008ba0:	d1f0      	bne.n	8008b84 <quorem+0xf0>
 8008ba2:	3c01      	subs	r4, #1
 8008ba4:	e7eb      	b.n	8008b7e <quorem+0xea>
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	e7ee      	b.n	8008b88 <quorem+0xf4>
 8008baa:	0000      	movs	r0, r0
 8008bac:	0000      	movs	r0, r0
	...

08008bb0 <_dtoa_r>:
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	ed2d 8b04 	vpush	{d8-d9}
 8008bb8:	ec57 6b10 	vmov	r6, r7, d0
 8008bbc:	b093      	sub	sp, #76	; 0x4c
 8008bbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008bc4:	9106      	str	r1, [sp, #24]
 8008bc6:	ee10 aa10 	vmov	sl, s0
 8008bca:	4604      	mov	r4, r0
 8008bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8008bce:	930c      	str	r3, [sp, #48]	; 0x30
 8008bd0:	46bb      	mov	fp, r7
 8008bd2:	b975      	cbnz	r5, 8008bf2 <_dtoa_r+0x42>
 8008bd4:	2010      	movs	r0, #16
 8008bd6:	f7fe fef3 	bl	80079c0 <malloc>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	6260      	str	r0, [r4, #36]	; 0x24
 8008bde:	b920      	cbnz	r0, 8008bea <_dtoa_r+0x3a>
 8008be0:	4ba7      	ldr	r3, [pc, #668]	; (8008e80 <_dtoa_r+0x2d0>)
 8008be2:	21ea      	movs	r1, #234	; 0xea
 8008be4:	48a7      	ldr	r0, [pc, #668]	; (8008e84 <_dtoa_r+0x2d4>)
 8008be6:	f001 fd23 	bl	800a630 <__assert_func>
 8008bea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008bee:	6005      	str	r5, [r0, #0]
 8008bf0:	60c5      	str	r5, [r0, #12]
 8008bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bf4:	6819      	ldr	r1, [r3, #0]
 8008bf6:	b151      	cbz	r1, 8008c0e <_dtoa_r+0x5e>
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	604a      	str	r2, [r1, #4]
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	4093      	lsls	r3, r2
 8008c00:	608b      	str	r3, [r1, #8]
 8008c02:	4620      	mov	r0, r4
 8008c04:	f001 f81a 	bl	8009c3c <_Bfree>
 8008c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	601a      	str	r2, [r3, #0]
 8008c0e:	1e3b      	subs	r3, r7, #0
 8008c10:	bfaa      	itet	ge
 8008c12:	2300      	movge	r3, #0
 8008c14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c18:	f8c8 3000 	strge.w	r3, [r8]
 8008c1c:	4b9a      	ldr	r3, [pc, #616]	; (8008e88 <_dtoa_r+0x2d8>)
 8008c1e:	bfbc      	itt	lt
 8008c20:	2201      	movlt	r2, #1
 8008c22:	f8c8 2000 	strlt.w	r2, [r8]
 8008c26:	ea33 030b 	bics.w	r3, r3, fp
 8008c2a:	d11b      	bne.n	8008c64 <_dtoa_r+0xb4>
 8008c2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c38:	4333      	orrs	r3, r6
 8008c3a:	f000 8592 	beq.w	8009762 <_dtoa_r+0xbb2>
 8008c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c40:	b963      	cbnz	r3, 8008c5c <_dtoa_r+0xac>
 8008c42:	4b92      	ldr	r3, [pc, #584]	; (8008e8c <_dtoa_r+0x2dc>)
 8008c44:	e022      	b.n	8008c8c <_dtoa_r+0xdc>
 8008c46:	4b92      	ldr	r3, [pc, #584]	; (8008e90 <_dtoa_r+0x2e0>)
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	9801      	ldr	r0, [sp, #4]
 8008c52:	b013      	add	sp, #76	; 0x4c
 8008c54:	ecbd 8b04 	vpop	{d8-d9}
 8008c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5c:	4b8b      	ldr	r3, [pc, #556]	; (8008e8c <_dtoa_r+0x2dc>)
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	3303      	adds	r3, #3
 8008c62:	e7f3      	b.n	8008c4c <_dtoa_r+0x9c>
 8008c64:	2200      	movs	r2, #0
 8008c66:	2300      	movs	r3, #0
 8008c68:	4650      	mov	r0, sl
 8008c6a:	4659      	mov	r1, fp
 8008c6c:	f7f7 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c70:	ec4b ab19 	vmov	d9, sl, fp
 8008c74:	4680      	mov	r8, r0
 8008c76:	b158      	cbz	r0, 8008c90 <_dtoa_r+0xe0>
 8008c78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	6013      	str	r3, [r2, #0]
 8008c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f000 856b 	beq.w	800975c <_dtoa_r+0xbac>
 8008c86:	4883      	ldr	r0, [pc, #524]	; (8008e94 <_dtoa_r+0x2e4>)
 8008c88:	6018      	str	r0, [r3, #0]
 8008c8a:	1e43      	subs	r3, r0, #1
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	e7df      	b.n	8008c50 <_dtoa_r+0xa0>
 8008c90:	ec4b ab10 	vmov	d0, sl, fp
 8008c94:	aa10      	add	r2, sp, #64	; 0x40
 8008c96:	a911      	add	r1, sp, #68	; 0x44
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f001 fab7 	bl	800a20c <__d2b>
 8008c9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008ca2:	ee08 0a10 	vmov	s16, r0
 8008ca6:	2d00      	cmp	r5, #0
 8008ca8:	f000 8084 	beq.w	8008db4 <_dtoa_r+0x204>
 8008cac:	ee19 3a90 	vmov	r3, s19
 8008cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008cb8:	4656      	mov	r6, sl
 8008cba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008cc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008cc6:	4b74      	ldr	r3, [pc, #464]	; (8008e98 <_dtoa_r+0x2e8>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	4630      	mov	r0, r6
 8008ccc:	4639      	mov	r1, r7
 8008cce:	f7f7 fadb 	bl	8000288 <__aeabi_dsub>
 8008cd2:	a365      	add	r3, pc, #404	; (adr r3, 8008e68 <_dtoa_r+0x2b8>)
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	f7f7 fc8e 	bl	80005f8 <__aeabi_dmul>
 8008cdc:	a364      	add	r3, pc, #400	; (adr r3, 8008e70 <_dtoa_r+0x2c0>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f7f7 fad3 	bl	800028c <__adddf3>
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	4628      	mov	r0, r5
 8008cea:	460f      	mov	r7, r1
 8008cec:	f7f7 fc1a 	bl	8000524 <__aeabi_i2d>
 8008cf0:	a361      	add	r3, pc, #388	; (adr r3, 8008e78 <_dtoa_r+0x2c8>)
 8008cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf6:	f7f7 fc7f 	bl	80005f8 <__aeabi_dmul>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4630      	mov	r0, r6
 8008d00:	4639      	mov	r1, r7
 8008d02:	f7f7 fac3 	bl	800028c <__adddf3>
 8008d06:	4606      	mov	r6, r0
 8008d08:	460f      	mov	r7, r1
 8008d0a:	f7f7 ff25 	bl	8000b58 <__aeabi_d2iz>
 8008d0e:	2200      	movs	r2, #0
 8008d10:	9000      	str	r0, [sp, #0]
 8008d12:	2300      	movs	r3, #0
 8008d14:	4630      	mov	r0, r6
 8008d16:	4639      	mov	r1, r7
 8008d18:	f7f7 fee0 	bl	8000adc <__aeabi_dcmplt>
 8008d1c:	b150      	cbz	r0, 8008d34 <_dtoa_r+0x184>
 8008d1e:	9800      	ldr	r0, [sp, #0]
 8008d20:	f7f7 fc00 	bl	8000524 <__aeabi_i2d>
 8008d24:	4632      	mov	r2, r6
 8008d26:	463b      	mov	r3, r7
 8008d28:	f7f7 fece 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d2c:	b910      	cbnz	r0, 8008d34 <_dtoa_r+0x184>
 8008d2e:	9b00      	ldr	r3, [sp, #0]
 8008d30:	3b01      	subs	r3, #1
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	9b00      	ldr	r3, [sp, #0]
 8008d36:	2b16      	cmp	r3, #22
 8008d38:	d85a      	bhi.n	8008df0 <_dtoa_r+0x240>
 8008d3a:	9a00      	ldr	r2, [sp, #0]
 8008d3c:	4b57      	ldr	r3, [pc, #348]	; (8008e9c <_dtoa_r+0x2ec>)
 8008d3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d46:	ec51 0b19 	vmov	r0, r1, d9
 8008d4a:	f7f7 fec7 	bl	8000adc <__aeabi_dcmplt>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d050      	beq.n	8008df4 <_dtoa_r+0x244>
 8008d52:	9b00      	ldr	r3, [sp, #0]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d5e:	1b5d      	subs	r5, r3, r5
 8008d60:	1e6b      	subs	r3, r5, #1
 8008d62:	9305      	str	r3, [sp, #20]
 8008d64:	bf45      	ittet	mi
 8008d66:	f1c5 0301 	rsbmi	r3, r5, #1
 8008d6a:	9304      	strmi	r3, [sp, #16]
 8008d6c:	2300      	movpl	r3, #0
 8008d6e:	2300      	movmi	r3, #0
 8008d70:	bf4c      	ite	mi
 8008d72:	9305      	strmi	r3, [sp, #20]
 8008d74:	9304      	strpl	r3, [sp, #16]
 8008d76:	9b00      	ldr	r3, [sp, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	db3d      	blt.n	8008df8 <_dtoa_r+0x248>
 8008d7c:	9b05      	ldr	r3, [sp, #20]
 8008d7e:	9a00      	ldr	r2, [sp, #0]
 8008d80:	920a      	str	r2, [sp, #40]	; 0x28
 8008d82:	4413      	add	r3, r2
 8008d84:	9305      	str	r3, [sp, #20]
 8008d86:	2300      	movs	r3, #0
 8008d88:	9307      	str	r3, [sp, #28]
 8008d8a:	9b06      	ldr	r3, [sp, #24]
 8008d8c:	2b09      	cmp	r3, #9
 8008d8e:	f200 8089 	bhi.w	8008ea4 <_dtoa_r+0x2f4>
 8008d92:	2b05      	cmp	r3, #5
 8008d94:	bfc4      	itt	gt
 8008d96:	3b04      	subgt	r3, #4
 8008d98:	9306      	strgt	r3, [sp, #24]
 8008d9a:	9b06      	ldr	r3, [sp, #24]
 8008d9c:	f1a3 0302 	sub.w	r3, r3, #2
 8008da0:	bfcc      	ite	gt
 8008da2:	2500      	movgt	r5, #0
 8008da4:	2501      	movle	r5, #1
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	f200 8087 	bhi.w	8008eba <_dtoa_r+0x30a>
 8008dac:	e8df f003 	tbb	[pc, r3]
 8008db0:	59383a2d 	.word	0x59383a2d
 8008db4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008db8:	441d      	add	r5, r3
 8008dba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008dbe:	2b20      	cmp	r3, #32
 8008dc0:	bfc1      	itttt	gt
 8008dc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008dc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008dca:	fa0b f303 	lslgt.w	r3, fp, r3
 8008dce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008dd2:	bfda      	itte	le
 8008dd4:	f1c3 0320 	rsble	r3, r3, #32
 8008dd8:	fa06 f003 	lslle.w	r0, r6, r3
 8008ddc:	4318      	orrgt	r0, r3
 8008dde:	f7f7 fb91 	bl	8000504 <__aeabi_ui2d>
 8008de2:	2301      	movs	r3, #1
 8008de4:	4606      	mov	r6, r0
 8008de6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008dea:	3d01      	subs	r5, #1
 8008dec:	930e      	str	r3, [sp, #56]	; 0x38
 8008dee:	e76a      	b.n	8008cc6 <_dtoa_r+0x116>
 8008df0:	2301      	movs	r3, #1
 8008df2:	e7b2      	b.n	8008d5a <_dtoa_r+0x1aa>
 8008df4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008df6:	e7b1      	b.n	8008d5c <_dtoa_r+0x1ac>
 8008df8:	9b04      	ldr	r3, [sp, #16]
 8008dfa:	9a00      	ldr	r2, [sp, #0]
 8008dfc:	1a9b      	subs	r3, r3, r2
 8008dfe:	9304      	str	r3, [sp, #16]
 8008e00:	4253      	negs	r3, r2
 8008e02:	9307      	str	r3, [sp, #28]
 8008e04:	2300      	movs	r3, #0
 8008e06:	930a      	str	r3, [sp, #40]	; 0x28
 8008e08:	e7bf      	b.n	8008d8a <_dtoa_r+0x1da>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	9308      	str	r3, [sp, #32]
 8008e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	dc55      	bgt.n	8008ec0 <_dtoa_r+0x310>
 8008e14:	2301      	movs	r3, #1
 8008e16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e1e:	e00c      	b.n	8008e3a <_dtoa_r+0x28a>
 8008e20:	2301      	movs	r3, #1
 8008e22:	e7f3      	b.n	8008e0c <_dtoa_r+0x25c>
 8008e24:	2300      	movs	r3, #0
 8008e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e28:	9308      	str	r3, [sp, #32]
 8008e2a:	9b00      	ldr	r3, [sp, #0]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	9302      	str	r3, [sp, #8]
 8008e30:	3301      	adds	r3, #1
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	9303      	str	r3, [sp, #12]
 8008e36:	bfb8      	it	lt
 8008e38:	2301      	movlt	r3, #1
 8008e3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	6042      	str	r2, [r0, #4]
 8008e40:	2204      	movs	r2, #4
 8008e42:	f102 0614 	add.w	r6, r2, #20
 8008e46:	429e      	cmp	r6, r3
 8008e48:	6841      	ldr	r1, [r0, #4]
 8008e4a:	d93d      	bls.n	8008ec8 <_dtoa_r+0x318>
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f000 feb5 	bl	8009bbc <_Balloc>
 8008e52:	9001      	str	r0, [sp, #4]
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d13b      	bne.n	8008ed0 <_dtoa_r+0x320>
 8008e58:	4b11      	ldr	r3, [pc, #68]	; (8008ea0 <_dtoa_r+0x2f0>)
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e60:	e6c0      	b.n	8008be4 <_dtoa_r+0x34>
 8008e62:	2301      	movs	r3, #1
 8008e64:	e7df      	b.n	8008e26 <_dtoa_r+0x276>
 8008e66:	bf00      	nop
 8008e68:	636f4361 	.word	0x636f4361
 8008e6c:	3fd287a7 	.word	0x3fd287a7
 8008e70:	8b60c8b3 	.word	0x8b60c8b3
 8008e74:	3fc68a28 	.word	0x3fc68a28
 8008e78:	509f79fb 	.word	0x509f79fb
 8008e7c:	3fd34413 	.word	0x3fd34413
 8008e80:	0800b4c3 	.word	0x0800b4c3
 8008e84:	0800b4da 	.word	0x0800b4da
 8008e88:	7ff00000 	.word	0x7ff00000
 8008e8c:	0800b4bf 	.word	0x0800b4bf
 8008e90:	0800b4b6 	.word	0x0800b4b6
 8008e94:	0800adfd 	.word	0x0800adfd
 8008e98:	3ff80000 	.word	0x3ff80000
 8008e9c:	0800b630 	.word	0x0800b630
 8008ea0:	0800b535 	.word	0x0800b535
 8008ea4:	2501      	movs	r5, #1
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9306      	str	r3, [sp, #24]
 8008eaa:	9508      	str	r5, [sp, #32]
 8008eac:	f04f 33ff 	mov.w	r3, #4294967295
 8008eb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2312      	movs	r3, #18
 8008eb8:	e7b0      	b.n	8008e1c <_dtoa_r+0x26c>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	9308      	str	r3, [sp, #32]
 8008ebe:	e7f5      	b.n	8008eac <_dtoa_r+0x2fc>
 8008ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ec6:	e7b8      	b.n	8008e3a <_dtoa_r+0x28a>
 8008ec8:	3101      	adds	r1, #1
 8008eca:	6041      	str	r1, [r0, #4]
 8008ecc:	0052      	lsls	r2, r2, #1
 8008ece:	e7b8      	b.n	8008e42 <_dtoa_r+0x292>
 8008ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ed2:	9a01      	ldr	r2, [sp, #4]
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	9b03      	ldr	r3, [sp, #12]
 8008ed8:	2b0e      	cmp	r3, #14
 8008eda:	f200 809d 	bhi.w	8009018 <_dtoa_r+0x468>
 8008ede:	2d00      	cmp	r5, #0
 8008ee0:	f000 809a 	beq.w	8009018 <_dtoa_r+0x468>
 8008ee4:	9b00      	ldr	r3, [sp, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	dd32      	ble.n	8008f50 <_dtoa_r+0x3a0>
 8008eea:	4ab7      	ldr	r2, [pc, #732]	; (80091c8 <_dtoa_r+0x618>)
 8008eec:	f003 030f 	and.w	r3, r3, #15
 8008ef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ef8:	9b00      	ldr	r3, [sp, #0]
 8008efa:	05d8      	lsls	r0, r3, #23
 8008efc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f00:	d516      	bpl.n	8008f30 <_dtoa_r+0x380>
 8008f02:	4bb2      	ldr	r3, [pc, #712]	; (80091cc <_dtoa_r+0x61c>)
 8008f04:	ec51 0b19 	vmov	r0, r1, d9
 8008f08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f0c:	f7f7 fc9e 	bl	800084c <__aeabi_ddiv>
 8008f10:	f007 070f 	and.w	r7, r7, #15
 8008f14:	4682      	mov	sl, r0
 8008f16:	468b      	mov	fp, r1
 8008f18:	2503      	movs	r5, #3
 8008f1a:	4eac      	ldr	r6, [pc, #688]	; (80091cc <_dtoa_r+0x61c>)
 8008f1c:	b957      	cbnz	r7, 8008f34 <_dtoa_r+0x384>
 8008f1e:	4642      	mov	r2, r8
 8008f20:	464b      	mov	r3, r9
 8008f22:	4650      	mov	r0, sl
 8008f24:	4659      	mov	r1, fp
 8008f26:	f7f7 fc91 	bl	800084c <__aeabi_ddiv>
 8008f2a:	4682      	mov	sl, r0
 8008f2c:	468b      	mov	fp, r1
 8008f2e:	e028      	b.n	8008f82 <_dtoa_r+0x3d2>
 8008f30:	2502      	movs	r5, #2
 8008f32:	e7f2      	b.n	8008f1a <_dtoa_r+0x36a>
 8008f34:	07f9      	lsls	r1, r7, #31
 8008f36:	d508      	bpl.n	8008f4a <_dtoa_r+0x39a>
 8008f38:	4640      	mov	r0, r8
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f40:	f7f7 fb5a 	bl	80005f8 <__aeabi_dmul>
 8008f44:	3501      	adds	r5, #1
 8008f46:	4680      	mov	r8, r0
 8008f48:	4689      	mov	r9, r1
 8008f4a:	107f      	asrs	r7, r7, #1
 8008f4c:	3608      	adds	r6, #8
 8008f4e:	e7e5      	b.n	8008f1c <_dtoa_r+0x36c>
 8008f50:	f000 809b 	beq.w	800908a <_dtoa_r+0x4da>
 8008f54:	9b00      	ldr	r3, [sp, #0]
 8008f56:	4f9d      	ldr	r7, [pc, #628]	; (80091cc <_dtoa_r+0x61c>)
 8008f58:	425e      	negs	r6, r3
 8008f5a:	4b9b      	ldr	r3, [pc, #620]	; (80091c8 <_dtoa_r+0x618>)
 8008f5c:	f006 020f 	and.w	r2, r6, #15
 8008f60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	ec51 0b19 	vmov	r0, r1, d9
 8008f6c:	f7f7 fb44 	bl	80005f8 <__aeabi_dmul>
 8008f70:	1136      	asrs	r6, r6, #4
 8008f72:	4682      	mov	sl, r0
 8008f74:	468b      	mov	fp, r1
 8008f76:	2300      	movs	r3, #0
 8008f78:	2502      	movs	r5, #2
 8008f7a:	2e00      	cmp	r6, #0
 8008f7c:	d17a      	bne.n	8009074 <_dtoa_r+0x4c4>
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1d3      	bne.n	8008f2a <_dtoa_r+0x37a>
 8008f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 8082 	beq.w	800908e <_dtoa_r+0x4de>
 8008f8a:	4b91      	ldr	r3, [pc, #580]	; (80091d0 <_dtoa_r+0x620>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	4650      	mov	r0, sl
 8008f90:	4659      	mov	r1, fp
 8008f92:	f7f7 fda3 	bl	8000adc <__aeabi_dcmplt>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d079      	beq.n	800908e <_dtoa_r+0x4de>
 8008f9a:	9b03      	ldr	r3, [sp, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d076      	beq.n	800908e <_dtoa_r+0x4de>
 8008fa0:	9b02      	ldr	r3, [sp, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	dd36      	ble.n	8009014 <_dtoa_r+0x464>
 8008fa6:	9b00      	ldr	r3, [sp, #0]
 8008fa8:	4650      	mov	r0, sl
 8008faa:	4659      	mov	r1, fp
 8008fac:	1e5f      	subs	r7, r3, #1
 8008fae:	2200      	movs	r2, #0
 8008fb0:	4b88      	ldr	r3, [pc, #544]	; (80091d4 <_dtoa_r+0x624>)
 8008fb2:	f7f7 fb21 	bl	80005f8 <__aeabi_dmul>
 8008fb6:	9e02      	ldr	r6, [sp, #8]
 8008fb8:	4682      	mov	sl, r0
 8008fba:	468b      	mov	fp, r1
 8008fbc:	3501      	adds	r5, #1
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f7f7 fab0 	bl	8000524 <__aeabi_i2d>
 8008fc4:	4652      	mov	r2, sl
 8008fc6:	465b      	mov	r3, fp
 8008fc8:	f7f7 fb16 	bl	80005f8 <__aeabi_dmul>
 8008fcc:	4b82      	ldr	r3, [pc, #520]	; (80091d8 <_dtoa_r+0x628>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f7f7 f95c 	bl	800028c <__adddf3>
 8008fd4:	46d0      	mov	r8, sl
 8008fd6:	46d9      	mov	r9, fp
 8008fd8:	4682      	mov	sl, r0
 8008fda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008fde:	2e00      	cmp	r6, #0
 8008fe0:	d158      	bne.n	8009094 <_dtoa_r+0x4e4>
 8008fe2:	4b7e      	ldr	r3, [pc, #504]	; (80091dc <_dtoa_r+0x62c>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	4640      	mov	r0, r8
 8008fe8:	4649      	mov	r1, r9
 8008fea:	f7f7 f94d 	bl	8000288 <__aeabi_dsub>
 8008fee:	4652      	mov	r2, sl
 8008ff0:	465b      	mov	r3, fp
 8008ff2:	4680      	mov	r8, r0
 8008ff4:	4689      	mov	r9, r1
 8008ff6:	f7f7 fd8f 	bl	8000b18 <__aeabi_dcmpgt>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	f040 8295 	bne.w	800952a <_dtoa_r+0x97a>
 8009000:	4652      	mov	r2, sl
 8009002:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 fd67 	bl	8000adc <__aeabi_dcmplt>
 800900e:	2800      	cmp	r0, #0
 8009010:	f040 8289 	bne.w	8009526 <_dtoa_r+0x976>
 8009014:	ec5b ab19 	vmov	sl, fp, d9
 8009018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800901a:	2b00      	cmp	r3, #0
 800901c:	f2c0 8148 	blt.w	80092b0 <_dtoa_r+0x700>
 8009020:	9a00      	ldr	r2, [sp, #0]
 8009022:	2a0e      	cmp	r2, #14
 8009024:	f300 8144 	bgt.w	80092b0 <_dtoa_r+0x700>
 8009028:	4b67      	ldr	r3, [pc, #412]	; (80091c8 <_dtoa_r+0x618>)
 800902a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800902e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009034:	2b00      	cmp	r3, #0
 8009036:	f280 80d5 	bge.w	80091e4 <_dtoa_r+0x634>
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	f300 80d1 	bgt.w	80091e4 <_dtoa_r+0x634>
 8009042:	f040 826f 	bne.w	8009524 <_dtoa_r+0x974>
 8009046:	4b65      	ldr	r3, [pc, #404]	; (80091dc <_dtoa_r+0x62c>)
 8009048:	2200      	movs	r2, #0
 800904a:	4640      	mov	r0, r8
 800904c:	4649      	mov	r1, r9
 800904e:	f7f7 fad3 	bl	80005f8 <__aeabi_dmul>
 8009052:	4652      	mov	r2, sl
 8009054:	465b      	mov	r3, fp
 8009056:	f7f7 fd55 	bl	8000b04 <__aeabi_dcmpge>
 800905a:	9e03      	ldr	r6, [sp, #12]
 800905c:	4637      	mov	r7, r6
 800905e:	2800      	cmp	r0, #0
 8009060:	f040 8245 	bne.w	80094ee <_dtoa_r+0x93e>
 8009064:	9d01      	ldr	r5, [sp, #4]
 8009066:	2331      	movs	r3, #49	; 0x31
 8009068:	f805 3b01 	strb.w	r3, [r5], #1
 800906c:	9b00      	ldr	r3, [sp, #0]
 800906e:	3301      	adds	r3, #1
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	e240      	b.n	80094f6 <_dtoa_r+0x946>
 8009074:	07f2      	lsls	r2, r6, #31
 8009076:	d505      	bpl.n	8009084 <_dtoa_r+0x4d4>
 8009078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800907c:	f7f7 fabc 	bl	80005f8 <__aeabi_dmul>
 8009080:	3501      	adds	r5, #1
 8009082:	2301      	movs	r3, #1
 8009084:	1076      	asrs	r6, r6, #1
 8009086:	3708      	adds	r7, #8
 8009088:	e777      	b.n	8008f7a <_dtoa_r+0x3ca>
 800908a:	2502      	movs	r5, #2
 800908c:	e779      	b.n	8008f82 <_dtoa_r+0x3d2>
 800908e:	9f00      	ldr	r7, [sp, #0]
 8009090:	9e03      	ldr	r6, [sp, #12]
 8009092:	e794      	b.n	8008fbe <_dtoa_r+0x40e>
 8009094:	9901      	ldr	r1, [sp, #4]
 8009096:	4b4c      	ldr	r3, [pc, #304]	; (80091c8 <_dtoa_r+0x618>)
 8009098:	4431      	add	r1, r6
 800909a:	910d      	str	r1, [sp, #52]	; 0x34
 800909c:	9908      	ldr	r1, [sp, #32]
 800909e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090a6:	2900      	cmp	r1, #0
 80090a8:	d043      	beq.n	8009132 <_dtoa_r+0x582>
 80090aa:	494d      	ldr	r1, [pc, #308]	; (80091e0 <_dtoa_r+0x630>)
 80090ac:	2000      	movs	r0, #0
 80090ae:	f7f7 fbcd 	bl	800084c <__aeabi_ddiv>
 80090b2:	4652      	mov	r2, sl
 80090b4:	465b      	mov	r3, fp
 80090b6:	f7f7 f8e7 	bl	8000288 <__aeabi_dsub>
 80090ba:	9d01      	ldr	r5, [sp, #4]
 80090bc:	4682      	mov	sl, r0
 80090be:	468b      	mov	fp, r1
 80090c0:	4649      	mov	r1, r9
 80090c2:	4640      	mov	r0, r8
 80090c4:	f7f7 fd48 	bl	8000b58 <__aeabi_d2iz>
 80090c8:	4606      	mov	r6, r0
 80090ca:	f7f7 fa2b 	bl	8000524 <__aeabi_i2d>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	4640      	mov	r0, r8
 80090d4:	4649      	mov	r1, r9
 80090d6:	f7f7 f8d7 	bl	8000288 <__aeabi_dsub>
 80090da:	3630      	adds	r6, #48	; 0x30
 80090dc:	f805 6b01 	strb.w	r6, [r5], #1
 80090e0:	4652      	mov	r2, sl
 80090e2:	465b      	mov	r3, fp
 80090e4:	4680      	mov	r8, r0
 80090e6:	4689      	mov	r9, r1
 80090e8:	f7f7 fcf8 	bl	8000adc <__aeabi_dcmplt>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d163      	bne.n	80091b8 <_dtoa_r+0x608>
 80090f0:	4642      	mov	r2, r8
 80090f2:	464b      	mov	r3, r9
 80090f4:	4936      	ldr	r1, [pc, #216]	; (80091d0 <_dtoa_r+0x620>)
 80090f6:	2000      	movs	r0, #0
 80090f8:	f7f7 f8c6 	bl	8000288 <__aeabi_dsub>
 80090fc:	4652      	mov	r2, sl
 80090fe:	465b      	mov	r3, fp
 8009100:	f7f7 fcec 	bl	8000adc <__aeabi_dcmplt>
 8009104:	2800      	cmp	r0, #0
 8009106:	f040 80b5 	bne.w	8009274 <_dtoa_r+0x6c4>
 800910a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800910c:	429d      	cmp	r5, r3
 800910e:	d081      	beq.n	8009014 <_dtoa_r+0x464>
 8009110:	4b30      	ldr	r3, [pc, #192]	; (80091d4 <_dtoa_r+0x624>)
 8009112:	2200      	movs	r2, #0
 8009114:	4650      	mov	r0, sl
 8009116:	4659      	mov	r1, fp
 8009118:	f7f7 fa6e 	bl	80005f8 <__aeabi_dmul>
 800911c:	4b2d      	ldr	r3, [pc, #180]	; (80091d4 <_dtoa_r+0x624>)
 800911e:	4682      	mov	sl, r0
 8009120:	468b      	mov	fp, r1
 8009122:	4640      	mov	r0, r8
 8009124:	4649      	mov	r1, r9
 8009126:	2200      	movs	r2, #0
 8009128:	f7f7 fa66 	bl	80005f8 <__aeabi_dmul>
 800912c:	4680      	mov	r8, r0
 800912e:	4689      	mov	r9, r1
 8009130:	e7c6      	b.n	80090c0 <_dtoa_r+0x510>
 8009132:	4650      	mov	r0, sl
 8009134:	4659      	mov	r1, fp
 8009136:	f7f7 fa5f 	bl	80005f8 <__aeabi_dmul>
 800913a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800913c:	9d01      	ldr	r5, [sp, #4]
 800913e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009140:	4682      	mov	sl, r0
 8009142:	468b      	mov	fp, r1
 8009144:	4649      	mov	r1, r9
 8009146:	4640      	mov	r0, r8
 8009148:	f7f7 fd06 	bl	8000b58 <__aeabi_d2iz>
 800914c:	4606      	mov	r6, r0
 800914e:	f7f7 f9e9 	bl	8000524 <__aeabi_i2d>
 8009152:	3630      	adds	r6, #48	; 0x30
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	4640      	mov	r0, r8
 800915a:	4649      	mov	r1, r9
 800915c:	f7f7 f894 	bl	8000288 <__aeabi_dsub>
 8009160:	f805 6b01 	strb.w	r6, [r5], #1
 8009164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009166:	429d      	cmp	r5, r3
 8009168:	4680      	mov	r8, r0
 800916a:	4689      	mov	r9, r1
 800916c:	f04f 0200 	mov.w	r2, #0
 8009170:	d124      	bne.n	80091bc <_dtoa_r+0x60c>
 8009172:	4b1b      	ldr	r3, [pc, #108]	; (80091e0 <_dtoa_r+0x630>)
 8009174:	4650      	mov	r0, sl
 8009176:	4659      	mov	r1, fp
 8009178:	f7f7 f888 	bl	800028c <__adddf3>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4640      	mov	r0, r8
 8009182:	4649      	mov	r1, r9
 8009184:	f7f7 fcc8 	bl	8000b18 <__aeabi_dcmpgt>
 8009188:	2800      	cmp	r0, #0
 800918a:	d173      	bne.n	8009274 <_dtoa_r+0x6c4>
 800918c:	4652      	mov	r2, sl
 800918e:	465b      	mov	r3, fp
 8009190:	4913      	ldr	r1, [pc, #76]	; (80091e0 <_dtoa_r+0x630>)
 8009192:	2000      	movs	r0, #0
 8009194:	f7f7 f878 	bl	8000288 <__aeabi_dsub>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4640      	mov	r0, r8
 800919e:	4649      	mov	r1, r9
 80091a0:	f7f7 fc9c 	bl	8000adc <__aeabi_dcmplt>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	f43f af35 	beq.w	8009014 <_dtoa_r+0x464>
 80091aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091ac:	1e6b      	subs	r3, r5, #1
 80091ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80091b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091b4:	2b30      	cmp	r3, #48	; 0x30
 80091b6:	d0f8      	beq.n	80091aa <_dtoa_r+0x5fa>
 80091b8:	9700      	str	r7, [sp, #0]
 80091ba:	e049      	b.n	8009250 <_dtoa_r+0x6a0>
 80091bc:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <_dtoa_r+0x624>)
 80091be:	f7f7 fa1b 	bl	80005f8 <__aeabi_dmul>
 80091c2:	4680      	mov	r8, r0
 80091c4:	4689      	mov	r9, r1
 80091c6:	e7bd      	b.n	8009144 <_dtoa_r+0x594>
 80091c8:	0800b630 	.word	0x0800b630
 80091cc:	0800b608 	.word	0x0800b608
 80091d0:	3ff00000 	.word	0x3ff00000
 80091d4:	40240000 	.word	0x40240000
 80091d8:	401c0000 	.word	0x401c0000
 80091dc:	40140000 	.word	0x40140000
 80091e0:	3fe00000 	.word	0x3fe00000
 80091e4:	9d01      	ldr	r5, [sp, #4]
 80091e6:	4656      	mov	r6, sl
 80091e8:	465f      	mov	r7, fp
 80091ea:	4642      	mov	r2, r8
 80091ec:	464b      	mov	r3, r9
 80091ee:	4630      	mov	r0, r6
 80091f0:	4639      	mov	r1, r7
 80091f2:	f7f7 fb2b 	bl	800084c <__aeabi_ddiv>
 80091f6:	f7f7 fcaf 	bl	8000b58 <__aeabi_d2iz>
 80091fa:	4682      	mov	sl, r0
 80091fc:	f7f7 f992 	bl	8000524 <__aeabi_i2d>
 8009200:	4642      	mov	r2, r8
 8009202:	464b      	mov	r3, r9
 8009204:	f7f7 f9f8 	bl	80005f8 <__aeabi_dmul>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	4630      	mov	r0, r6
 800920e:	4639      	mov	r1, r7
 8009210:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009214:	f7f7 f838 	bl	8000288 <__aeabi_dsub>
 8009218:	f805 6b01 	strb.w	r6, [r5], #1
 800921c:	9e01      	ldr	r6, [sp, #4]
 800921e:	9f03      	ldr	r7, [sp, #12]
 8009220:	1bae      	subs	r6, r5, r6
 8009222:	42b7      	cmp	r7, r6
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	d135      	bne.n	8009296 <_dtoa_r+0x6e6>
 800922a:	f7f7 f82f 	bl	800028c <__adddf3>
 800922e:	4642      	mov	r2, r8
 8009230:	464b      	mov	r3, r9
 8009232:	4606      	mov	r6, r0
 8009234:	460f      	mov	r7, r1
 8009236:	f7f7 fc6f 	bl	8000b18 <__aeabi_dcmpgt>
 800923a:	b9d0      	cbnz	r0, 8009272 <_dtoa_r+0x6c2>
 800923c:	4642      	mov	r2, r8
 800923e:	464b      	mov	r3, r9
 8009240:	4630      	mov	r0, r6
 8009242:	4639      	mov	r1, r7
 8009244:	f7f7 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 8009248:	b110      	cbz	r0, 8009250 <_dtoa_r+0x6a0>
 800924a:	f01a 0f01 	tst.w	sl, #1
 800924e:	d110      	bne.n	8009272 <_dtoa_r+0x6c2>
 8009250:	4620      	mov	r0, r4
 8009252:	ee18 1a10 	vmov	r1, s16
 8009256:	f000 fcf1 	bl	8009c3c <_Bfree>
 800925a:	2300      	movs	r3, #0
 800925c:	9800      	ldr	r0, [sp, #0]
 800925e:	702b      	strb	r3, [r5, #0]
 8009260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009262:	3001      	adds	r0, #1
 8009264:	6018      	str	r0, [r3, #0]
 8009266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009268:	2b00      	cmp	r3, #0
 800926a:	f43f acf1 	beq.w	8008c50 <_dtoa_r+0xa0>
 800926e:	601d      	str	r5, [r3, #0]
 8009270:	e4ee      	b.n	8008c50 <_dtoa_r+0xa0>
 8009272:	9f00      	ldr	r7, [sp, #0]
 8009274:	462b      	mov	r3, r5
 8009276:	461d      	mov	r5, r3
 8009278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800927c:	2a39      	cmp	r2, #57	; 0x39
 800927e:	d106      	bne.n	800928e <_dtoa_r+0x6de>
 8009280:	9a01      	ldr	r2, [sp, #4]
 8009282:	429a      	cmp	r2, r3
 8009284:	d1f7      	bne.n	8009276 <_dtoa_r+0x6c6>
 8009286:	9901      	ldr	r1, [sp, #4]
 8009288:	2230      	movs	r2, #48	; 0x30
 800928a:	3701      	adds	r7, #1
 800928c:	700a      	strb	r2, [r1, #0]
 800928e:	781a      	ldrb	r2, [r3, #0]
 8009290:	3201      	adds	r2, #1
 8009292:	701a      	strb	r2, [r3, #0]
 8009294:	e790      	b.n	80091b8 <_dtoa_r+0x608>
 8009296:	4ba6      	ldr	r3, [pc, #664]	; (8009530 <_dtoa_r+0x980>)
 8009298:	2200      	movs	r2, #0
 800929a:	f7f7 f9ad 	bl	80005f8 <__aeabi_dmul>
 800929e:	2200      	movs	r2, #0
 80092a0:	2300      	movs	r3, #0
 80092a2:	4606      	mov	r6, r0
 80092a4:	460f      	mov	r7, r1
 80092a6:	f7f7 fc0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d09d      	beq.n	80091ea <_dtoa_r+0x63a>
 80092ae:	e7cf      	b.n	8009250 <_dtoa_r+0x6a0>
 80092b0:	9a08      	ldr	r2, [sp, #32]
 80092b2:	2a00      	cmp	r2, #0
 80092b4:	f000 80d7 	beq.w	8009466 <_dtoa_r+0x8b6>
 80092b8:	9a06      	ldr	r2, [sp, #24]
 80092ba:	2a01      	cmp	r2, #1
 80092bc:	f300 80ba 	bgt.w	8009434 <_dtoa_r+0x884>
 80092c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092c2:	2a00      	cmp	r2, #0
 80092c4:	f000 80b2 	beq.w	800942c <_dtoa_r+0x87c>
 80092c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092cc:	9e07      	ldr	r6, [sp, #28]
 80092ce:	9d04      	ldr	r5, [sp, #16]
 80092d0:	9a04      	ldr	r2, [sp, #16]
 80092d2:	441a      	add	r2, r3
 80092d4:	9204      	str	r2, [sp, #16]
 80092d6:	9a05      	ldr	r2, [sp, #20]
 80092d8:	2101      	movs	r1, #1
 80092da:	441a      	add	r2, r3
 80092dc:	4620      	mov	r0, r4
 80092de:	9205      	str	r2, [sp, #20]
 80092e0:	f000 fd64 	bl	8009dac <__i2b>
 80092e4:	4607      	mov	r7, r0
 80092e6:	2d00      	cmp	r5, #0
 80092e8:	dd0c      	ble.n	8009304 <_dtoa_r+0x754>
 80092ea:	9b05      	ldr	r3, [sp, #20]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	dd09      	ble.n	8009304 <_dtoa_r+0x754>
 80092f0:	42ab      	cmp	r3, r5
 80092f2:	9a04      	ldr	r2, [sp, #16]
 80092f4:	bfa8      	it	ge
 80092f6:	462b      	movge	r3, r5
 80092f8:	1ad2      	subs	r2, r2, r3
 80092fa:	9204      	str	r2, [sp, #16]
 80092fc:	9a05      	ldr	r2, [sp, #20]
 80092fe:	1aed      	subs	r5, r5, r3
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	9305      	str	r3, [sp, #20]
 8009304:	9b07      	ldr	r3, [sp, #28]
 8009306:	b31b      	cbz	r3, 8009350 <_dtoa_r+0x7a0>
 8009308:	9b08      	ldr	r3, [sp, #32]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 80af 	beq.w	800946e <_dtoa_r+0x8be>
 8009310:	2e00      	cmp	r6, #0
 8009312:	dd13      	ble.n	800933c <_dtoa_r+0x78c>
 8009314:	4639      	mov	r1, r7
 8009316:	4632      	mov	r2, r6
 8009318:	4620      	mov	r0, r4
 800931a:	f000 fe07 	bl	8009f2c <__pow5mult>
 800931e:	ee18 2a10 	vmov	r2, s16
 8009322:	4601      	mov	r1, r0
 8009324:	4607      	mov	r7, r0
 8009326:	4620      	mov	r0, r4
 8009328:	f000 fd56 	bl	8009dd8 <__multiply>
 800932c:	ee18 1a10 	vmov	r1, s16
 8009330:	4680      	mov	r8, r0
 8009332:	4620      	mov	r0, r4
 8009334:	f000 fc82 	bl	8009c3c <_Bfree>
 8009338:	ee08 8a10 	vmov	s16, r8
 800933c:	9b07      	ldr	r3, [sp, #28]
 800933e:	1b9a      	subs	r2, r3, r6
 8009340:	d006      	beq.n	8009350 <_dtoa_r+0x7a0>
 8009342:	ee18 1a10 	vmov	r1, s16
 8009346:	4620      	mov	r0, r4
 8009348:	f000 fdf0 	bl	8009f2c <__pow5mult>
 800934c:	ee08 0a10 	vmov	s16, r0
 8009350:	2101      	movs	r1, #1
 8009352:	4620      	mov	r0, r4
 8009354:	f000 fd2a 	bl	8009dac <__i2b>
 8009358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800935a:	2b00      	cmp	r3, #0
 800935c:	4606      	mov	r6, r0
 800935e:	f340 8088 	ble.w	8009472 <_dtoa_r+0x8c2>
 8009362:	461a      	mov	r2, r3
 8009364:	4601      	mov	r1, r0
 8009366:	4620      	mov	r0, r4
 8009368:	f000 fde0 	bl	8009f2c <__pow5mult>
 800936c:	9b06      	ldr	r3, [sp, #24]
 800936e:	2b01      	cmp	r3, #1
 8009370:	4606      	mov	r6, r0
 8009372:	f340 8081 	ble.w	8009478 <_dtoa_r+0x8c8>
 8009376:	f04f 0800 	mov.w	r8, #0
 800937a:	6933      	ldr	r3, [r6, #16]
 800937c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009380:	6918      	ldr	r0, [r3, #16]
 8009382:	f000 fcc3 	bl	8009d0c <__hi0bits>
 8009386:	f1c0 0020 	rsb	r0, r0, #32
 800938a:	9b05      	ldr	r3, [sp, #20]
 800938c:	4418      	add	r0, r3
 800938e:	f010 001f 	ands.w	r0, r0, #31
 8009392:	f000 8092 	beq.w	80094ba <_dtoa_r+0x90a>
 8009396:	f1c0 0320 	rsb	r3, r0, #32
 800939a:	2b04      	cmp	r3, #4
 800939c:	f340 808a 	ble.w	80094b4 <_dtoa_r+0x904>
 80093a0:	f1c0 001c 	rsb	r0, r0, #28
 80093a4:	9b04      	ldr	r3, [sp, #16]
 80093a6:	4403      	add	r3, r0
 80093a8:	9304      	str	r3, [sp, #16]
 80093aa:	9b05      	ldr	r3, [sp, #20]
 80093ac:	4403      	add	r3, r0
 80093ae:	4405      	add	r5, r0
 80093b0:	9305      	str	r3, [sp, #20]
 80093b2:	9b04      	ldr	r3, [sp, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	dd07      	ble.n	80093c8 <_dtoa_r+0x818>
 80093b8:	ee18 1a10 	vmov	r1, s16
 80093bc:	461a      	mov	r2, r3
 80093be:	4620      	mov	r0, r4
 80093c0:	f000 fe0e 	bl	8009fe0 <__lshift>
 80093c4:	ee08 0a10 	vmov	s16, r0
 80093c8:	9b05      	ldr	r3, [sp, #20]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	dd05      	ble.n	80093da <_dtoa_r+0x82a>
 80093ce:	4631      	mov	r1, r6
 80093d0:	461a      	mov	r2, r3
 80093d2:	4620      	mov	r0, r4
 80093d4:	f000 fe04 	bl	8009fe0 <__lshift>
 80093d8:	4606      	mov	r6, r0
 80093da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d06e      	beq.n	80094be <_dtoa_r+0x90e>
 80093e0:	ee18 0a10 	vmov	r0, s16
 80093e4:	4631      	mov	r1, r6
 80093e6:	f000 fe6b 	bl	800a0c0 <__mcmp>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	da67      	bge.n	80094be <_dtoa_r+0x90e>
 80093ee:	9b00      	ldr	r3, [sp, #0]
 80093f0:	3b01      	subs	r3, #1
 80093f2:	ee18 1a10 	vmov	r1, s16
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	220a      	movs	r2, #10
 80093fa:	2300      	movs	r3, #0
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 fc3f 	bl	8009c80 <__multadd>
 8009402:	9b08      	ldr	r3, [sp, #32]
 8009404:	ee08 0a10 	vmov	s16, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	f000 81b1 	beq.w	8009770 <_dtoa_r+0xbc0>
 800940e:	2300      	movs	r3, #0
 8009410:	4639      	mov	r1, r7
 8009412:	220a      	movs	r2, #10
 8009414:	4620      	mov	r0, r4
 8009416:	f000 fc33 	bl	8009c80 <__multadd>
 800941a:	9b02      	ldr	r3, [sp, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	4607      	mov	r7, r0
 8009420:	f300 808e 	bgt.w	8009540 <_dtoa_r+0x990>
 8009424:	9b06      	ldr	r3, [sp, #24]
 8009426:	2b02      	cmp	r3, #2
 8009428:	dc51      	bgt.n	80094ce <_dtoa_r+0x91e>
 800942a:	e089      	b.n	8009540 <_dtoa_r+0x990>
 800942c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800942e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009432:	e74b      	b.n	80092cc <_dtoa_r+0x71c>
 8009434:	9b03      	ldr	r3, [sp, #12]
 8009436:	1e5e      	subs	r6, r3, #1
 8009438:	9b07      	ldr	r3, [sp, #28]
 800943a:	42b3      	cmp	r3, r6
 800943c:	bfbf      	itttt	lt
 800943e:	9b07      	ldrlt	r3, [sp, #28]
 8009440:	9607      	strlt	r6, [sp, #28]
 8009442:	1af2      	sublt	r2, r6, r3
 8009444:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009446:	bfb6      	itet	lt
 8009448:	189b      	addlt	r3, r3, r2
 800944a:	1b9e      	subge	r6, r3, r6
 800944c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800944e:	9b03      	ldr	r3, [sp, #12]
 8009450:	bfb8      	it	lt
 8009452:	2600      	movlt	r6, #0
 8009454:	2b00      	cmp	r3, #0
 8009456:	bfb7      	itett	lt
 8009458:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800945c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009460:	1a9d      	sublt	r5, r3, r2
 8009462:	2300      	movlt	r3, #0
 8009464:	e734      	b.n	80092d0 <_dtoa_r+0x720>
 8009466:	9e07      	ldr	r6, [sp, #28]
 8009468:	9d04      	ldr	r5, [sp, #16]
 800946a:	9f08      	ldr	r7, [sp, #32]
 800946c:	e73b      	b.n	80092e6 <_dtoa_r+0x736>
 800946e:	9a07      	ldr	r2, [sp, #28]
 8009470:	e767      	b.n	8009342 <_dtoa_r+0x792>
 8009472:	9b06      	ldr	r3, [sp, #24]
 8009474:	2b01      	cmp	r3, #1
 8009476:	dc18      	bgt.n	80094aa <_dtoa_r+0x8fa>
 8009478:	f1ba 0f00 	cmp.w	sl, #0
 800947c:	d115      	bne.n	80094aa <_dtoa_r+0x8fa>
 800947e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009482:	b993      	cbnz	r3, 80094aa <_dtoa_r+0x8fa>
 8009484:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009488:	0d1b      	lsrs	r3, r3, #20
 800948a:	051b      	lsls	r3, r3, #20
 800948c:	b183      	cbz	r3, 80094b0 <_dtoa_r+0x900>
 800948e:	9b04      	ldr	r3, [sp, #16]
 8009490:	3301      	adds	r3, #1
 8009492:	9304      	str	r3, [sp, #16]
 8009494:	9b05      	ldr	r3, [sp, #20]
 8009496:	3301      	adds	r3, #1
 8009498:	9305      	str	r3, [sp, #20]
 800949a:	f04f 0801 	mov.w	r8, #1
 800949e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f47f af6a 	bne.w	800937a <_dtoa_r+0x7ca>
 80094a6:	2001      	movs	r0, #1
 80094a8:	e76f      	b.n	800938a <_dtoa_r+0x7da>
 80094aa:	f04f 0800 	mov.w	r8, #0
 80094ae:	e7f6      	b.n	800949e <_dtoa_r+0x8ee>
 80094b0:	4698      	mov	r8, r3
 80094b2:	e7f4      	b.n	800949e <_dtoa_r+0x8ee>
 80094b4:	f43f af7d 	beq.w	80093b2 <_dtoa_r+0x802>
 80094b8:	4618      	mov	r0, r3
 80094ba:	301c      	adds	r0, #28
 80094bc:	e772      	b.n	80093a4 <_dtoa_r+0x7f4>
 80094be:	9b03      	ldr	r3, [sp, #12]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	dc37      	bgt.n	8009534 <_dtoa_r+0x984>
 80094c4:	9b06      	ldr	r3, [sp, #24]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	dd34      	ble.n	8009534 <_dtoa_r+0x984>
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	9302      	str	r3, [sp, #8]
 80094ce:	9b02      	ldr	r3, [sp, #8]
 80094d0:	b96b      	cbnz	r3, 80094ee <_dtoa_r+0x93e>
 80094d2:	4631      	mov	r1, r6
 80094d4:	2205      	movs	r2, #5
 80094d6:	4620      	mov	r0, r4
 80094d8:	f000 fbd2 	bl	8009c80 <__multadd>
 80094dc:	4601      	mov	r1, r0
 80094de:	4606      	mov	r6, r0
 80094e0:	ee18 0a10 	vmov	r0, s16
 80094e4:	f000 fdec 	bl	800a0c0 <__mcmp>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	f73f adbb 	bgt.w	8009064 <_dtoa_r+0x4b4>
 80094ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f0:	9d01      	ldr	r5, [sp, #4]
 80094f2:	43db      	mvns	r3, r3
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	f04f 0800 	mov.w	r8, #0
 80094fa:	4631      	mov	r1, r6
 80094fc:	4620      	mov	r0, r4
 80094fe:	f000 fb9d 	bl	8009c3c <_Bfree>
 8009502:	2f00      	cmp	r7, #0
 8009504:	f43f aea4 	beq.w	8009250 <_dtoa_r+0x6a0>
 8009508:	f1b8 0f00 	cmp.w	r8, #0
 800950c:	d005      	beq.n	800951a <_dtoa_r+0x96a>
 800950e:	45b8      	cmp	r8, r7
 8009510:	d003      	beq.n	800951a <_dtoa_r+0x96a>
 8009512:	4641      	mov	r1, r8
 8009514:	4620      	mov	r0, r4
 8009516:	f000 fb91 	bl	8009c3c <_Bfree>
 800951a:	4639      	mov	r1, r7
 800951c:	4620      	mov	r0, r4
 800951e:	f000 fb8d 	bl	8009c3c <_Bfree>
 8009522:	e695      	b.n	8009250 <_dtoa_r+0x6a0>
 8009524:	2600      	movs	r6, #0
 8009526:	4637      	mov	r7, r6
 8009528:	e7e1      	b.n	80094ee <_dtoa_r+0x93e>
 800952a:	9700      	str	r7, [sp, #0]
 800952c:	4637      	mov	r7, r6
 800952e:	e599      	b.n	8009064 <_dtoa_r+0x4b4>
 8009530:	40240000 	.word	0x40240000
 8009534:	9b08      	ldr	r3, [sp, #32]
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 80ca 	beq.w	80096d0 <_dtoa_r+0xb20>
 800953c:	9b03      	ldr	r3, [sp, #12]
 800953e:	9302      	str	r3, [sp, #8]
 8009540:	2d00      	cmp	r5, #0
 8009542:	dd05      	ble.n	8009550 <_dtoa_r+0x9a0>
 8009544:	4639      	mov	r1, r7
 8009546:	462a      	mov	r2, r5
 8009548:	4620      	mov	r0, r4
 800954a:	f000 fd49 	bl	8009fe0 <__lshift>
 800954e:	4607      	mov	r7, r0
 8009550:	f1b8 0f00 	cmp.w	r8, #0
 8009554:	d05b      	beq.n	800960e <_dtoa_r+0xa5e>
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	4620      	mov	r0, r4
 800955a:	f000 fb2f 	bl	8009bbc <_Balloc>
 800955e:	4605      	mov	r5, r0
 8009560:	b928      	cbnz	r0, 800956e <_dtoa_r+0x9be>
 8009562:	4b87      	ldr	r3, [pc, #540]	; (8009780 <_dtoa_r+0xbd0>)
 8009564:	4602      	mov	r2, r0
 8009566:	f240 21ea 	movw	r1, #746	; 0x2ea
 800956a:	f7ff bb3b 	b.w	8008be4 <_dtoa_r+0x34>
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	3202      	adds	r2, #2
 8009572:	0092      	lsls	r2, r2, #2
 8009574:	f107 010c 	add.w	r1, r7, #12
 8009578:	300c      	adds	r0, #12
 800957a:	f000 fb04 	bl	8009b86 <memcpy>
 800957e:	2201      	movs	r2, #1
 8009580:	4629      	mov	r1, r5
 8009582:	4620      	mov	r0, r4
 8009584:	f000 fd2c 	bl	8009fe0 <__lshift>
 8009588:	9b01      	ldr	r3, [sp, #4]
 800958a:	f103 0901 	add.w	r9, r3, #1
 800958e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009592:	4413      	add	r3, r2
 8009594:	9305      	str	r3, [sp, #20]
 8009596:	f00a 0301 	and.w	r3, sl, #1
 800959a:	46b8      	mov	r8, r7
 800959c:	9304      	str	r3, [sp, #16]
 800959e:	4607      	mov	r7, r0
 80095a0:	4631      	mov	r1, r6
 80095a2:	ee18 0a10 	vmov	r0, s16
 80095a6:	f7ff fa75 	bl	8008a94 <quorem>
 80095aa:	4641      	mov	r1, r8
 80095ac:	9002      	str	r0, [sp, #8]
 80095ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80095b2:	ee18 0a10 	vmov	r0, s16
 80095b6:	f000 fd83 	bl	800a0c0 <__mcmp>
 80095ba:	463a      	mov	r2, r7
 80095bc:	9003      	str	r0, [sp, #12]
 80095be:	4631      	mov	r1, r6
 80095c0:	4620      	mov	r0, r4
 80095c2:	f000 fd99 	bl	800a0f8 <__mdiff>
 80095c6:	68c2      	ldr	r2, [r0, #12]
 80095c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80095cc:	4605      	mov	r5, r0
 80095ce:	bb02      	cbnz	r2, 8009612 <_dtoa_r+0xa62>
 80095d0:	4601      	mov	r1, r0
 80095d2:	ee18 0a10 	vmov	r0, s16
 80095d6:	f000 fd73 	bl	800a0c0 <__mcmp>
 80095da:	4602      	mov	r2, r0
 80095dc:	4629      	mov	r1, r5
 80095de:	4620      	mov	r0, r4
 80095e0:	9207      	str	r2, [sp, #28]
 80095e2:	f000 fb2b 	bl	8009c3c <_Bfree>
 80095e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80095ea:	ea43 0102 	orr.w	r1, r3, r2
 80095ee:	9b04      	ldr	r3, [sp, #16]
 80095f0:	430b      	orrs	r3, r1
 80095f2:	464d      	mov	r5, r9
 80095f4:	d10f      	bne.n	8009616 <_dtoa_r+0xa66>
 80095f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095fa:	d02a      	beq.n	8009652 <_dtoa_r+0xaa2>
 80095fc:	9b03      	ldr	r3, [sp, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	dd02      	ble.n	8009608 <_dtoa_r+0xa58>
 8009602:	9b02      	ldr	r3, [sp, #8]
 8009604:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009608:	f88b a000 	strb.w	sl, [fp]
 800960c:	e775      	b.n	80094fa <_dtoa_r+0x94a>
 800960e:	4638      	mov	r0, r7
 8009610:	e7ba      	b.n	8009588 <_dtoa_r+0x9d8>
 8009612:	2201      	movs	r2, #1
 8009614:	e7e2      	b.n	80095dc <_dtoa_r+0xa2c>
 8009616:	9b03      	ldr	r3, [sp, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	db04      	blt.n	8009626 <_dtoa_r+0xa76>
 800961c:	9906      	ldr	r1, [sp, #24]
 800961e:	430b      	orrs	r3, r1
 8009620:	9904      	ldr	r1, [sp, #16]
 8009622:	430b      	orrs	r3, r1
 8009624:	d122      	bne.n	800966c <_dtoa_r+0xabc>
 8009626:	2a00      	cmp	r2, #0
 8009628:	ddee      	ble.n	8009608 <_dtoa_r+0xa58>
 800962a:	ee18 1a10 	vmov	r1, s16
 800962e:	2201      	movs	r2, #1
 8009630:	4620      	mov	r0, r4
 8009632:	f000 fcd5 	bl	8009fe0 <__lshift>
 8009636:	4631      	mov	r1, r6
 8009638:	ee08 0a10 	vmov	s16, r0
 800963c:	f000 fd40 	bl	800a0c0 <__mcmp>
 8009640:	2800      	cmp	r0, #0
 8009642:	dc03      	bgt.n	800964c <_dtoa_r+0xa9c>
 8009644:	d1e0      	bne.n	8009608 <_dtoa_r+0xa58>
 8009646:	f01a 0f01 	tst.w	sl, #1
 800964a:	d0dd      	beq.n	8009608 <_dtoa_r+0xa58>
 800964c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009650:	d1d7      	bne.n	8009602 <_dtoa_r+0xa52>
 8009652:	2339      	movs	r3, #57	; 0x39
 8009654:	f88b 3000 	strb.w	r3, [fp]
 8009658:	462b      	mov	r3, r5
 800965a:	461d      	mov	r5, r3
 800965c:	3b01      	subs	r3, #1
 800965e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009662:	2a39      	cmp	r2, #57	; 0x39
 8009664:	d071      	beq.n	800974a <_dtoa_r+0xb9a>
 8009666:	3201      	adds	r2, #1
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	e746      	b.n	80094fa <_dtoa_r+0x94a>
 800966c:	2a00      	cmp	r2, #0
 800966e:	dd07      	ble.n	8009680 <_dtoa_r+0xad0>
 8009670:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009674:	d0ed      	beq.n	8009652 <_dtoa_r+0xaa2>
 8009676:	f10a 0301 	add.w	r3, sl, #1
 800967a:	f88b 3000 	strb.w	r3, [fp]
 800967e:	e73c      	b.n	80094fa <_dtoa_r+0x94a>
 8009680:	9b05      	ldr	r3, [sp, #20]
 8009682:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009686:	4599      	cmp	r9, r3
 8009688:	d047      	beq.n	800971a <_dtoa_r+0xb6a>
 800968a:	ee18 1a10 	vmov	r1, s16
 800968e:	2300      	movs	r3, #0
 8009690:	220a      	movs	r2, #10
 8009692:	4620      	mov	r0, r4
 8009694:	f000 faf4 	bl	8009c80 <__multadd>
 8009698:	45b8      	cmp	r8, r7
 800969a:	ee08 0a10 	vmov	s16, r0
 800969e:	f04f 0300 	mov.w	r3, #0
 80096a2:	f04f 020a 	mov.w	r2, #10
 80096a6:	4641      	mov	r1, r8
 80096a8:	4620      	mov	r0, r4
 80096aa:	d106      	bne.n	80096ba <_dtoa_r+0xb0a>
 80096ac:	f000 fae8 	bl	8009c80 <__multadd>
 80096b0:	4680      	mov	r8, r0
 80096b2:	4607      	mov	r7, r0
 80096b4:	f109 0901 	add.w	r9, r9, #1
 80096b8:	e772      	b.n	80095a0 <_dtoa_r+0x9f0>
 80096ba:	f000 fae1 	bl	8009c80 <__multadd>
 80096be:	4639      	mov	r1, r7
 80096c0:	4680      	mov	r8, r0
 80096c2:	2300      	movs	r3, #0
 80096c4:	220a      	movs	r2, #10
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 fada 	bl	8009c80 <__multadd>
 80096cc:	4607      	mov	r7, r0
 80096ce:	e7f1      	b.n	80096b4 <_dtoa_r+0xb04>
 80096d0:	9b03      	ldr	r3, [sp, #12]
 80096d2:	9302      	str	r3, [sp, #8]
 80096d4:	9d01      	ldr	r5, [sp, #4]
 80096d6:	ee18 0a10 	vmov	r0, s16
 80096da:	4631      	mov	r1, r6
 80096dc:	f7ff f9da 	bl	8008a94 <quorem>
 80096e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80096e4:	9b01      	ldr	r3, [sp, #4]
 80096e6:	f805 ab01 	strb.w	sl, [r5], #1
 80096ea:	1aea      	subs	r2, r5, r3
 80096ec:	9b02      	ldr	r3, [sp, #8]
 80096ee:	4293      	cmp	r3, r2
 80096f0:	dd09      	ble.n	8009706 <_dtoa_r+0xb56>
 80096f2:	ee18 1a10 	vmov	r1, s16
 80096f6:	2300      	movs	r3, #0
 80096f8:	220a      	movs	r2, #10
 80096fa:	4620      	mov	r0, r4
 80096fc:	f000 fac0 	bl	8009c80 <__multadd>
 8009700:	ee08 0a10 	vmov	s16, r0
 8009704:	e7e7      	b.n	80096d6 <_dtoa_r+0xb26>
 8009706:	9b02      	ldr	r3, [sp, #8]
 8009708:	2b00      	cmp	r3, #0
 800970a:	bfc8      	it	gt
 800970c:	461d      	movgt	r5, r3
 800970e:	9b01      	ldr	r3, [sp, #4]
 8009710:	bfd8      	it	le
 8009712:	2501      	movle	r5, #1
 8009714:	441d      	add	r5, r3
 8009716:	f04f 0800 	mov.w	r8, #0
 800971a:	ee18 1a10 	vmov	r1, s16
 800971e:	2201      	movs	r2, #1
 8009720:	4620      	mov	r0, r4
 8009722:	f000 fc5d 	bl	8009fe0 <__lshift>
 8009726:	4631      	mov	r1, r6
 8009728:	ee08 0a10 	vmov	s16, r0
 800972c:	f000 fcc8 	bl	800a0c0 <__mcmp>
 8009730:	2800      	cmp	r0, #0
 8009732:	dc91      	bgt.n	8009658 <_dtoa_r+0xaa8>
 8009734:	d102      	bne.n	800973c <_dtoa_r+0xb8c>
 8009736:	f01a 0f01 	tst.w	sl, #1
 800973a:	d18d      	bne.n	8009658 <_dtoa_r+0xaa8>
 800973c:	462b      	mov	r3, r5
 800973e:	461d      	mov	r5, r3
 8009740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009744:	2a30      	cmp	r2, #48	; 0x30
 8009746:	d0fa      	beq.n	800973e <_dtoa_r+0xb8e>
 8009748:	e6d7      	b.n	80094fa <_dtoa_r+0x94a>
 800974a:	9a01      	ldr	r2, [sp, #4]
 800974c:	429a      	cmp	r2, r3
 800974e:	d184      	bne.n	800965a <_dtoa_r+0xaaa>
 8009750:	9b00      	ldr	r3, [sp, #0]
 8009752:	3301      	adds	r3, #1
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	2331      	movs	r3, #49	; 0x31
 8009758:	7013      	strb	r3, [r2, #0]
 800975a:	e6ce      	b.n	80094fa <_dtoa_r+0x94a>
 800975c:	4b09      	ldr	r3, [pc, #36]	; (8009784 <_dtoa_r+0xbd4>)
 800975e:	f7ff ba95 	b.w	8008c8c <_dtoa_r+0xdc>
 8009762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009764:	2b00      	cmp	r3, #0
 8009766:	f47f aa6e 	bne.w	8008c46 <_dtoa_r+0x96>
 800976a:	4b07      	ldr	r3, [pc, #28]	; (8009788 <_dtoa_r+0xbd8>)
 800976c:	f7ff ba8e 	b.w	8008c8c <_dtoa_r+0xdc>
 8009770:	9b02      	ldr	r3, [sp, #8]
 8009772:	2b00      	cmp	r3, #0
 8009774:	dcae      	bgt.n	80096d4 <_dtoa_r+0xb24>
 8009776:	9b06      	ldr	r3, [sp, #24]
 8009778:	2b02      	cmp	r3, #2
 800977a:	f73f aea8 	bgt.w	80094ce <_dtoa_r+0x91e>
 800977e:	e7a9      	b.n	80096d4 <_dtoa_r+0xb24>
 8009780:	0800b535 	.word	0x0800b535
 8009784:	0800adfc 	.word	0x0800adfc
 8009788:	0800b4b6 	.word	0x0800b4b6

0800978c <__sflush_r>:
 800978c:	898a      	ldrh	r2, [r1, #12]
 800978e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009792:	4605      	mov	r5, r0
 8009794:	0710      	lsls	r0, r2, #28
 8009796:	460c      	mov	r4, r1
 8009798:	d458      	bmi.n	800984c <__sflush_r+0xc0>
 800979a:	684b      	ldr	r3, [r1, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	dc05      	bgt.n	80097ac <__sflush_r+0x20>
 80097a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	dc02      	bgt.n	80097ac <__sflush_r+0x20>
 80097a6:	2000      	movs	r0, #0
 80097a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097ae:	2e00      	cmp	r6, #0
 80097b0:	d0f9      	beq.n	80097a6 <__sflush_r+0x1a>
 80097b2:	2300      	movs	r3, #0
 80097b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097b8:	682f      	ldr	r7, [r5, #0]
 80097ba:	602b      	str	r3, [r5, #0]
 80097bc:	d032      	beq.n	8009824 <__sflush_r+0x98>
 80097be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	075a      	lsls	r2, r3, #29
 80097c4:	d505      	bpl.n	80097d2 <__sflush_r+0x46>
 80097c6:	6863      	ldr	r3, [r4, #4]
 80097c8:	1ac0      	subs	r0, r0, r3
 80097ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097cc:	b10b      	cbz	r3, 80097d2 <__sflush_r+0x46>
 80097ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097d0:	1ac0      	subs	r0, r0, r3
 80097d2:	2300      	movs	r3, #0
 80097d4:	4602      	mov	r2, r0
 80097d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097d8:	6a21      	ldr	r1, [r4, #32]
 80097da:	4628      	mov	r0, r5
 80097dc:	47b0      	blx	r6
 80097de:	1c43      	adds	r3, r0, #1
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	d106      	bne.n	80097f2 <__sflush_r+0x66>
 80097e4:	6829      	ldr	r1, [r5, #0]
 80097e6:	291d      	cmp	r1, #29
 80097e8:	d82c      	bhi.n	8009844 <__sflush_r+0xb8>
 80097ea:	4a2a      	ldr	r2, [pc, #168]	; (8009894 <__sflush_r+0x108>)
 80097ec:	40ca      	lsrs	r2, r1
 80097ee:	07d6      	lsls	r6, r2, #31
 80097f0:	d528      	bpl.n	8009844 <__sflush_r+0xb8>
 80097f2:	2200      	movs	r2, #0
 80097f4:	6062      	str	r2, [r4, #4]
 80097f6:	04d9      	lsls	r1, r3, #19
 80097f8:	6922      	ldr	r2, [r4, #16]
 80097fa:	6022      	str	r2, [r4, #0]
 80097fc:	d504      	bpl.n	8009808 <__sflush_r+0x7c>
 80097fe:	1c42      	adds	r2, r0, #1
 8009800:	d101      	bne.n	8009806 <__sflush_r+0x7a>
 8009802:	682b      	ldr	r3, [r5, #0]
 8009804:	b903      	cbnz	r3, 8009808 <__sflush_r+0x7c>
 8009806:	6560      	str	r0, [r4, #84]	; 0x54
 8009808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800980a:	602f      	str	r7, [r5, #0]
 800980c:	2900      	cmp	r1, #0
 800980e:	d0ca      	beq.n	80097a6 <__sflush_r+0x1a>
 8009810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009814:	4299      	cmp	r1, r3
 8009816:	d002      	beq.n	800981e <__sflush_r+0x92>
 8009818:	4628      	mov	r0, r5
 800981a:	f7fe f8e1 	bl	80079e0 <_free_r>
 800981e:	2000      	movs	r0, #0
 8009820:	6360      	str	r0, [r4, #52]	; 0x34
 8009822:	e7c1      	b.n	80097a8 <__sflush_r+0x1c>
 8009824:	6a21      	ldr	r1, [r4, #32]
 8009826:	2301      	movs	r3, #1
 8009828:	4628      	mov	r0, r5
 800982a:	47b0      	blx	r6
 800982c:	1c41      	adds	r1, r0, #1
 800982e:	d1c7      	bne.n	80097c0 <__sflush_r+0x34>
 8009830:	682b      	ldr	r3, [r5, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0c4      	beq.n	80097c0 <__sflush_r+0x34>
 8009836:	2b1d      	cmp	r3, #29
 8009838:	d001      	beq.n	800983e <__sflush_r+0xb2>
 800983a:	2b16      	cmp	r3, #22
 800983c:	d101      	bne.n	8009842 <__sflush_r+0xb6>
 800983e:	602f      	str	r7, [r5, #0]
 8009840:	e7b1      	b.n	80097a6 <__sflush_r+0x1a>
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009848:	81a3      	strh	r3, [r4, #12]
 800984a:	e7ad      	b.n	80097a8 <__sflush_r+0x1c>
 800984c:	690f      	ldr	r7, [r1, #16]
 800984e:	2f00      	cmp	r7, #0
 8009850:	d0a9      	beq.n	80097a6 <__sflush_r+0x1a>
 8009852:	0793      	lsls	r3, r2, #30
 8009854:	680e      	ldr	r6, [r1, #0]
 8009856:	bf08      	it	eq
 8009858:	694b      	ldreq	r3, [r1, #20]
 800985a:	600f      	str	r7, [r1, #0]
 800985c:	bf18      	it	ne
 800985e:	2300      	movne	r3, #0
 8009860:	eba6 0807 	sub.w	r8, r6, r7
 8009864:	608b      	str	r3, [r1, #8]
 8009866:	f1b8 0f00 	cmp.w	r8, #0
 800986a:	dd9c      	ble.n	80097a6 <__sflush_r+0x1a>
 800986c:	6a21      	ldr	r1, [r4, #32]
 800986e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009870:	4643      	mov	r3, r8
 8009872:	463a      	mov	r2, r7
 8009874:	4628      	mov	r0, r5
 8009876:	47b0      	blx	r6
 8009878:	2800      	cmp	r0, #0
 800987a:	dc06      	bgt.n	800988a <__sflush_r+0xfe>
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009882:	81a3      	strh	r3, [r4, #12]
 8009884:	f04f 30ff 	mov.w	r0, #4294967295
 8009888:	e78e      	b.n	80097a8 <__sflush_r+0x1c>
 800988a:	4407      	add	r7, r0
 800988c:	eba8 0800 	sub.w	r8, r8, r0
 8009890:	e7e9      	b.n	8009866 <__sflush_r+0xda>
 8009892:	bf00      	nop
 8009894:	20400001 	.word	0x20400001

08009898 <_fflush_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	690b      	ldr	r3, [r1, #16]
 800989c:	4605      	mov	r5, r0
 800989e:	460c      	mov	r4, r1
 80098a0:	b913      	cbnz	r3, 80098a8 <_fflush_r+0x10>
 80098a2:	2500      	movs	r5, #0
 80098a4:	4628      	mov	r0, r5
 80098a6:	bd38      	pop	{r3, r4, r5, pc}
 80098a8:	b118      	cbz	r0, 80098b2 <_fflush_r+0x1a>
 80098aa:	6983      	ldr	r3, [r0, #24]
 80098ac:	b90b      	cbnz	r3, 80098b2 <_fflush_r+0x1a>
 80098ae:	f000 f8c5 	bl	8009a3c <__sinit>
 80098b2:	4b14      	ldr	r3, [pc, #80]	; (8009904 <_fflush_r+0x6c>)
 80098b4:	429c      	cmp	r4, r3
 80098b6:	d11b      	bne.n	80098f0 <_fflush_r+0x58>
 80098b8:	686c      	ldr	r4, [r5, #4]
 80098ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d0ef      	beq.n	80098a2 <_fflush_r+0xa>
 80098c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098c4:	07d0      	lsls	r0, r2, #31
 80098c6:	d404      	bmi.n	80098d2 <_fflush_r+0x3a>
 80098c8:	0599      	lsls	r1, r3, #22
 80098ca:	d402      	bmi.n	80098d2 <_fflush_r+0x3a>
 80098cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ce:	f000 f958 	bl	8009b82 <__retarget_lock_acquire_recursive>
 80098d2:	4628      	mov	r0, r5
 80098d4:	4621      	mov	r1, r4
 80098d6:	f7ff ff59 	bl	800978c <__sflush_r>
 80098da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098dc:	07da      	lsls	r2, r3, #31
 80098de:	4605      	mov	r5, r0
 80098e0:	d4e0      	bmi.n	80098a4 <_fflush_r+0xc>
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	059b      	lsls	r3, r3, #22
 80098e6:	d4dd      	bmi.n	80098a4 <_fflush_r+0xc>
 80098e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ea:	f000 f94b 	bl	8009b84 <__retarget_lock_release_recursive>
 80098ee:	e7d9      	b.n	80098a4 <_fflush_r+0xc>
 80098f0:	4b05      	ldr	r3, [pc, #20]	; (8009908 <_fflush_r+0x70>)
 80098f2:	429c      	cmp	r4, r3
 80098f4:	d101      	bne.n	80098fa <_fflush_r+0x62>
 80098f6:	68ac      	ldr	r4, [r5, #8]
 80098f8:	e7df      	b.n	80098ba <_fflush_r+0x22>
 80098fa:	4b04      	ldr	r3, [pc, #16]	; (800990c <_fflush_r+0x74>)
 80098fc:	429c      	cmp	r4, r3
 80098fe:	bf08      	it	eq
 8009900:	68ec      	ldreq	r4, [r5, #12]
 8009902:	e7da      	b.n	80098ba <_fflush_r+0x22>
 8009904:	0800b568 	.word	0x0800b568
 8009908:	0800b588 	.word	0x0800b588
 800990c:	0800b548 	.word	0x0800b548

08009910 <fileno>:
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	4e1a      	ldr	r6, [pc, #104]	; (800997c <fileno+0x6c>)
 8009914:	6835      	ldr	r5, [r6, #0]
 8009916:	4604      	mov	r4, r0
 8009918:	b125      	cbz	r5, 8009924 <fileno+0x14>
 800991a:	69ab      	ldr	r3, [r5, #24]
 800991c:	b913      	cbnz	r3, 8009924 <fileno+0x14>
 800991e:	4628      	mov	r0, r5
 8009920:	f000 f88c 	bl	8009a3c <__sinit>
 8009924:	4b16      	ldr	r3, [pc, #88]	; (8009980 <fileno+0x70>)
 8009926:	429c      	cmp	r4, r3
 8009928:	d118      	bne.n	800995c <fileno+0x4c>
 800992a:	686c      	ldr	r4, [r5, #4]
 800992c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800992e:	07d8      	lsls	r0, r3, #31
 8009930:	d405      	bmi.n	800993e <fileno+0x2e>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	0599      	lsls	r1, r3, #22
 8009936:	d402      	bmi.n	800993e <fileno+0x2e>
 8009938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800993a:	f000 f922 	bl	8009b82 <__retarget_lock_acquire_recursive>
 800993e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009942:	b1ab      	cbz	r3, 8009970 <fileno+0x60>
 8009944:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8009948:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800994a:	07d2      	lsls	r2, r2, #31
 800994c:	d404      	bmi.n	8009958 <fileno+0x48>
 800994e:	059b      	lsls	r3, r3, #22
 8009950:	d402      	bmi.n	8009958 <fileno+0x48>
 8009952:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009954:	f000 f916 	bl	8009b84 <__retarget_lock_release_recursive>
 8009958:	4628      	mov	r0, r5
 800995a:	bd70      	pop	{r4, r5, r6, pc}
 800995c:	4b09      	ldr	r3, [pc, #36]	; (8009984 <fileno+0x74>)
 800995e:	429c      	cmp	r4, r3
 8009960:	d101      	bne.n	8009966 <fileno+0x56>
 8009962:	68ac      	ldr	r4, [r5, #8]
 8009964:	e7e2      	b.n	800992c <fileno+0x1c>
 8009966:	4b08      	ldr	r3, [pc, #32]	; (8009988 <fileno+0x78>)
 8009968:	429c      	cmp	r4, r3
 800996a:	bf08      	it	eq
 800996c:	68ec      	ldreq	r4, [r5, #12]
 800996e:	e7dd      	b.n	800992c <fileno+0x1c>
 8009970:	6832      	ldr	r2, [r6, #0]
 8009972:	2109      	movs	r1, #9
 8009974:	6011      	str	r1, [r2, #0]
 8009976:	f04f 35ff 	mov.w	r5, #4294967295
 800997a:	e7e5      	b.n	8009948 <fileno+0x38>
 800997c:	2000003c 	.word	0x2000003c
 8009980:	0800b568 	.word	0x0800b568
 8009984:	0800b588 	.word	0x0800b588
 8009988:	0800b548 	.word	0x0800b548

0800998c <std>:
 800998c:	2300      	movs	r3, #0
 800998e:	b510      	push	{r4, lr}
 8009990:	4604      	mov	r4, r0
 8009992:	e9c0 3300 	strd	r3, r3, [r0]
 8009996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800999a:	6083      	str	r3, [r0, #8]
 800999c:	8181      	strh	r1, [r0, #12]
 800999e:	6643      	str	r3, [r0, #100]	; 0x64
 80099a0:	81c2      	strh	r2, [r0, #14]
 80099a2:	6183      	str	r3, [r0, #24]
 80099a4:	4619      	mov	r1, r3
 80099a6:	2208      	movs	r2, #8
 80099a8:	305c      	adds	r0, #92	; 0x5c
 80099aa:	f7fe f811 	bl	80079d0 <memset>
 80099ae:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <std+0x38>)
 80099b0:	6263      	str	r3, [r4, #36]	; 0x24
 80099b2:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <std+0x3c>)
 80099b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80099b6:	4b05      	ldr	r3, [pc, #20]	; (80099cc <std+0x40>)
 80099b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099ba:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <std+0x44>)
 80099bc:	6224      	str	r4, [r4, #32]
 80099be:	6323      	str	r3, [r4, #48]	; 0x30
 80099c0:	bd10      	pop	{r4, pc}
 80099c2:	bf00      	nop
 80099c4:	0800a5a9 	.word	0x0800a5a9
 80099c8:	0800a5cb 	.word	0x0800a5cb
 80099cc:	0800a603 	.word	0x0800a603
 80099d0:	0800a627 	.word	0x0800a627

080099d4 <_cleanup_r>:
 80099d4:	4901      	ldr	r1, [pc, #4]	; (80099dc <_cleanup_r+0x8>)
 80099d6:	f000 b8af 	b.w	8009b38 <_fwalk_reent>
 80099da:	bf00      	nop
 80099dc:	08009899 	.word	0x08009899

080099e0 <__sfmoreglue>:
 80099e0:	b570      	push	{r4, r5, r6, lr}
 80099e2:	2268      	movs	r2, #104	; 0x68
 80099e4:	1e4d      	subs	r5, r1, #1
 80099e6:	4355      	muls	r5, r2
 80099e8:	460e      	mov	r6, r1
 80099ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099ee:	f7fe f863 	bl	8007ab8 <_malloc_r>
 80099f2:	4604      	mov	r4, r0
 80099f4:	b140      	cbz	r0, 8009a08 <__sfmoreglue+0x28>
 80099f6:	2100      	movs	r1, #0
 80099f8:	e9c0 1600 	strd	r1, r6, [r0]
 80099fc:	300c      	adds	r0, #12
 80099fe:	60a0      	str	r0, [r4, #8]
 8009a00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a04:	f7fd ffe4 	bl	80079d0 <memset>
 8009a08:	4620      	mov	r0, r4
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}

08009a0c <__sfp_lock_acquire>:
 8009a0c:	4801      	ldr	r0, [pc, #4]	; (8009a14 <__sfp_lock_acquire+0x8>)
 8009a0e:	f000 b8b8 	b.w	8009b82 <__retarget_lock_acquire_recursive>
 8009a12:	bf00      	nop
 8009a14:	20000695 	.word	0x20000695

08009a18 <__sfp_lock_release>:
 8009a18:	4801      	ldr	r0, [pc, #4]	; (8009a20 <__sfp_lock_release+0x8>)
 8009a1a:	f000 b8b3 	b.w	8009b84 <__retarget_lock_release_recursive>
 8009a1e:	bf00      	nop
 8009a20:	20000695 	.word	0x20000695

08009a24 <__sinit_lock_acquire>:
 8009a24:	4801      	ldr	r0, [pc, #4]	; (8009a2c <__sinit_lock_acquire+0x8>)
 8009a26:	f000 b8ac 	b.w	8009b82 <__retarget_lock_acquire_recursive>
 8009a2a:	bf00      	nop
 8009a2c:	20000696 	.word	0x20000696

08009a30 <__sinit_lock_release>:
 8009a30:	4801      	ldr	r0, [pc, #4]	; (8009a38 <__sinit_lock_release+0x8>)
 8009a32:	f000 b8a7 	b.w	8009b84 <__retarget_lock_release_recursive>
 8009a36:	bf00      	nop
 8009a38:	20000696 	.word	0x20000696

08009a3c <__sinit>:
 8009a3c:	b510      	push	{r4, lr}
 8009a3e:	4604      	mov	r4, r0
 8009a40:	f7ff fff0 	bl	8009a24 <__sinit_lock_acquire>
 8009a44:	69a3      	ldr	r3, [r4, #24]
 8009a46:	b11b      	cbz	r3, 8009a50 <__sinit+0x14>
 8009a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a4c:	f7ff bff0 	b.w	8009a30 <__sinit_lock_release>
 8009a50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a54:	6523      	str	r3, [r4, #80]	; 0x50
 8009a56:	4b13      	ldr	r3, [pc, #76]	; (8009aa4 <__sinit+0x68>)
 8009a58:	4a13      	ldr	r2, [pc, #76]	; (8009aa8 <__sinit+0x6c>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a5e:	42a3      	cmp	r3, r4
 8009a60:	bf04      	itt	eq
 8009a62:	2301      	moveq	r3, #1
 8009a64:	61a3      	streq	r3, [r4, #24]
 8009a66:	4620      	mov	r0, r4
 8009a68:	f000 f820 	bl	8009aac <__sfp>
 8009a6c:	6060      	str	r0, [r4, #4]
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f000 f81c 	bl	8009aac <__sfp>
 8009a74:	60a0      	str	r0, [r4, #8]
 8009a76:	4620      	mov	r0, r4
 8009a78:	f000 f818 	bl	8009aac <__sfp>
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	60e0      	str	r0, [r4, #12]
 8009a80:	2104      	movs	r1, #4
 8009a82:	6860      	ldr	r0, [r4, #4]
 8009a84:	f7ff ff82 	bl	800998c <std>
 8009a88:	68a0      	ldr	r0, [r4, #8]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	2109      	movs	r1, #9
 8009a8e:	f7ff ff7d 	bl	800998c <std>
 8009a92:	68e0      	ldr	r0, [r4, #12]
 8009a94:	2202      	movs	r2, #2
 8009a96:	2112      	movs	r1, #18
 8009a98:	f7ff ff78 	bl	800998c <std>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	61a3      	str	r3, [r4, #24]
 8009aa0:	e7d2      	b.n	8009a48 <__sinit+0xc>
 8009aa2:	bf00      	nop
 8009aa4:	0800ade8 	.word	0x0800ade8
 8009aa8:	080099d5 	.word	0x080099d5

08009aac <__sfp>:
 8009aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aae:	4607      	mov	r7, r0
 8009ab0:	f7ff ffac 	bl	8009a0c <__sfp_lock_acquire>
 8009ab4:	4b1e      	ldr	r3, [pc, #120]	; (8009b30 <__sfp+0x84>)
 8009ab6:	681e      	ldr	r6, [r3, #0]
 8009ab8:	69b3      	ldr	r3, [r6, #24]
 8009aba:	b913      	cbnz	r3, 8009ac2 <__sfp+0x16>
 8009abc:	4630      	mov	r0, r6
 8009abe:	f7ff ffbd 	bl	8009a3c <__sinit>
 8009ac2:	3648      	adds	r6, #72	; 0x48
 8009ac4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	d503      	bpl.n	8009ad4 <__sfp+0x28>
 8009acc:	6833      	ldr	r3, [r6, #0]
 8009ace:	b30b      	cbz	r3, 8009b14 <__sfp+0x68>
 8009ad0:	6836      	ldr	r6, [r6, #0]
 8009ad2:	e7f7      	b.n	8009ac4 <__sfp+0x18>
 8009ad4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ad8:	b9d5      	cbnz	r5, 8009b10 <__sfp+0x64>
 8009ada:	4b16      	ldr	r3, [pc, #88]	; (8009b34 <__sfp+0x88>)
 8009adc:	60e3      	str	r3, [r4, #12]
 8009ade:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ae2:	6665      	str	r5, [r4, #100]	; 0x64
 8009ae4:	f000 f84c 	bl	8009b80 <__retarget_lock_init_recursive>
 8009ae8:	f7ff ff96 	bl	8009a18 <__sfp_lock_release>
 8009aec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009af0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009af4:	6025      	str	r5, [r4, #0]
 8009af6:	61a5      	str	r5, [r4, #24]
 8009af8:	2208      	movs	r2, #8
 8009afa:	4629      	mov	r1, r5
 8009afc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b00:	f7fd ff66 	bl	80079d0 <memset>
 8009b04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b10:	3468      	adds	r4, #104	; 0x68
 8009b12:	e7d9      	b.n	8009ac8 <__sfp+0x1c>
 8009b14:	2104      	movs	r1, #4
 8009b16:	4638      	mov	r0, r7
 8009b18:	f7ff ff62 	bl	80099e0 <__sfmoreglue>
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	6030      	str	r0, [r6, #0]
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d1d5      	bne.n	8009ad0 <__sfp+0x24>
 8009b24:	f7ff ff78 	bl	8009a18 <__sfp_lock_release>
 8009b28:	230c      	movs	r3, #12
 8009b2a:	603b      	str	r3, [r7, #0]
 8009b2c:	e7ee      	b.n	8009b0c <__sfp+0x60>
 8009b2e:	bf00      	nop
 8009b30:	0800ade8 	.word	0x0800ade8
 8009b34:	ffff0001 	.word	0xffff0001

08009b38 <_fwalk_reent>:
 8009b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b3c:	4606      	mov	r6, r0
 8009b3e:	4688      	mov	r8, r1
 8009b40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b44:	2700      	movs	r7, #0
 8009b46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b4a:	f1b9 0901 	subs.w	r9, r9, #1
 8009b4e:	d505      	bpl.n	8009b5c <_fwalk_reent+0x24>
 8009b50:	6824      	ldr	r4, [r4, #0]
 8009b52:	2c00      	cmp	r4, #0
 8009b54:	d1f7      	bne.n	8009b46 <_fwalk_reent+0xe>
 8009b56:	4638      	mov	r0, r7
 8009b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b5c:	89ab      	ldrh	r3, [r5, #12]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d907      	bls.n	8009b72 <_fwalk_reent+0x3a>
 8009b62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b66:	3301      	adds	r3, #1
 8009b68:	d003      	beq.n	8009b72 <_fwalk_reent+0x3a>
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	47c0      	blx	r8
 8009b70:	4307      	orrs	r7, r0
 8009b72:	3568      	adds	r5, #104	; 0x68
 8009b74:	e7e9      	b.n	8009b4a <_fwalk_reent+0x12>
	...

08009b78 <_localeconv_r>:
 8009b78:	4800      	ldr	r0, [pc, #0]	; (8009b7c <_localeconv_r+0x4>)
 8009b7a:	4770      	bx	lr
 8009b7c:	20000190 	.word	0x20000190

08009b80 <__retarget_lock_init_recursive>:
 8009b80:	4770      	bx	lr

08009b82 <__retarget_lock_acquire_recursive>:
 8009b82:	4770      	bx	lr

08009b84 <__retarget_lock_release_recursive>:
 8009b84:	4770      	bx	lr

08009b86 <memcpy>:
 8009b86:	440a      	add	r2, r1
 8009b88:	4291      	cmp	r1, r2
 8009b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b8e:	d100      	bne.n	8009b92 <memcpy+0xc>
 8009b90:	4770      	bx	lr
 8009b92:	b510      	push	{r4, lr}
 8009b94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b9c:	4291      	cmp	r1, r2
 8009b9e:	d1f9      	bne.n	8009b94 <memcpy+0xe>
 8009ba0:	bd10      	pop	{r4, pc}
	...

08009ba4 <__malloc_lock>:
 8009ba4:	4801      	ldr	r0, [pc, #4]	; (8009bac <__malloc_lock+0x8>)
 8009ba6:	f7ff bfec 	b.w	8009b82 <__retarget_lock_acquire_recursive>
 8009baa:	bf00      	nop
 8009bac:	20000694 	.word	0x20000694

08009bb0 <__malloc_unlock>:
 8009bb0:	4801      	ldr	r0, [pc, #4]	; (8009bb8 <__malloc_unlock+0x8>)
 8009bb2:	f7ff bfe7 	b.w	8009b84 <__retarget_lock_release_recursive>
 8009bb6:	bf00      	nop
 8009bb8:	20000694 	.word	0x20000694

08009bbc <_Balloc>:
 8009bbc:	b570      	push	{r4, r5, r6, lr}
 8009bbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	460d      	mov	r5, r1
 8009bc4:	b976      	cbnz	r6, 8009be4 <_Balloc+0x28>
 8009bc6:	2010      	movs	r0, #16
 8009bc8:	f7fd fefa 	bl	80079c0 <malloc>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	6260      	str	r0, [r4, #36]	; 0x24
 8009bd0:	b920      	cbnz	r0, 8009bdc <_Balloc+0x20>
 8009bd2:	4b18      	ldr	r3, [pc, #96]	; (8009c34 <_Balloc+0x78>)
 8009bd4:	4818      	ldr	r0, [pc, #96]	; (8009c38 <_Balloc+0x7c>)
 8009bd6:	2166      	movs	r1, #102	; 0x66
 8009bd8:	f000 fd2a 	bl	800a630 <__assert_func>
 8009bdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009be0:	6006      	str	r6, [r0, #0]
 8009be2:	60c6      	str	r6, [r0, #12]
 8009be4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009be6:	68f3      	ldr	r3, [r6, #12]
 8009be8:	b183      	cbz	r3, 8009c0c <_Balloc+0x50>
 8009bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bf2:	b9b8      	cbnz	r0, 8009c24 <_Balloc+0x68>
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	fa01 f605 	lsl.w	r6, r1, r5
 8009bfa:	1d72      	adds	r2, r6, #5
 8009bfc:	0092      	lsls	r2, r2, #2
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f000 fb60 	bl	800a2c4 <_calloc_r>
 8009c04:	b160      	cbz	r0, 8009c20 <_Balloc+0x64>
 8009c06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c0a:	e00e      	b.n	8009c2a <_Balloc+0x6e>
 8009c0c:	2221      	movs	r2, #33	; 0x21
 8009c0e:	2104      	movs	r1, #4
 8009c10:	4620      	mov	r0, r4
 8009c12:	f000 fb57 	bl	800a2c4 <_calloc_r>
 8009c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c18:	60f0      	str	r0, [r6, #12]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1e4      	bne.n	8009bea <_Balloc+0x2e>
 8009c20:	2000      	movs	r0, #0
 8009c22:	bd70      	pop	{r4, r5, r6, pc}
 8009c24:	6802      	ldr	r2, [r0, #0]
 8009c26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c30:	e7f7      	b.n	8009c22 <_Balloc+0x66>
 8009c32:	bf00      	nop
 8009c34:	0800b4c3 	.word	0x0800b4c3
 8009c38:	0800b5a8 	.word	0x0800b5a8

08009c3c <_Bfree>:
 8009c3c:	b570      	push	{r4, r5, r6, lr}
 8009c3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c40:	4605      	mov	r5, r0
 8009c42:	460c      	mov	r4, r1
 8009c44:	b976      	cbnz	r6, 8009c64 <_Bfree+0x28>
 8009c46:	2010      	movs	r0, #16
 8009c48:	f7fd feba 	bl	80079c0 <malloc>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	6268      	str	r0, [r5, #36]	; 0x24
 8009c50:	b920      	cbnz	r0, 8009c5c <_Bfree+0x20>
 8009c52:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <_Bfree+0x3c>)
 8009c54:	4809      	ldr	r0, [pc, #36]	; (8009c7c <_Bfree+0x40>)
 8009c56:	218a      	movs	r1, #138	; 0x8a
 8009c58:	f000 fcea 	bl	800a630 <__assert_func>
 8009c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c60:	6006      	str	r6, [r0, #0]
 8009c62:	60c6      	str	r6, [r0, #12]
 8009c64:	b13c      	cbz	r4, 8009c76 <_Bfree+0x3a>
 8009c66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c68:	6862      	ldr	r2, [r4, #4]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c70:	6021      	str	r1, [r4, #0]
 8009c72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c76:	bd70      	pop	{r4, r5, r6, pc}
 8009c78:	0800b4c3 	.word	0x0800b4c3
 8009c7c:	0800b5a8 	.word	0x0800b5a8

08009c80 <__multadd>:
 8009c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c84:	690d      	ldr	r5, [r1, #16]
 8009c86:	4607      	mov	r7, r0
 8009c88:	460c      	mov	r4, r1
 8009c8a:	461e      	mov	r6, r3
 8009c8c:	f101 0c14 	add.w	ip, r1, #20
 8009c90:	2000      	movs	r0, #0
 8009c92:	f8dc 3000 	ldr.w	r3, [ip]
 8009c96:	b299      	uxth	r1, r3
 8009c98:	fb02 6101 	mla	r1, r2, r1, r6
 8009c9c:	0c1e      	lsrs	r6, r3, #16
 8009c9e:	0c0b      	lsrs	r3, r1, #16
 8009ca0:	fb02 3306 	mla	r3, r2, r6, r3
 8009ca4:	b289      	uxth	r1, r1
 8009ca6:	3001      	adds	r0, #1
 8009ca8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009cac:	4285      	cmp	r5, r0
 8009cae:	f84c 1b04 	str.w	r1, [ip], #4
 8009cb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009cb6:	dcec      	bgt.n	8009c92 <__multadd+0x12>
 8009cb8:	b30e      	cbz	r6, 8009cfe <__multadd+0x7e>
 8009cba:	68a3      	ldr	r3, [r4, #8]
 8009cbc:	42ab      	cmp	r3, r5
 8009cbe:	dc19      	bgt.n	8009cf4 <__multadd+0x74>
 8009cc0:	6861      	ldr	r1, [r4, #4]
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	3101      	adds	r1, #1
 8009cc6:	f7ff ff79 	bl	8009bbc <_Balloc>
 8009cca:	4680      	mov	r8, r0
 8009ccc:	b928      	cbnz	r0, 8009cda <__multadd+0x5a>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	4b0c      	ldr	r3, [pc, #48]	; (8009d04 <__multadd+0x84>)
 8009cd2:	480d      	ldr	r0, [pc, #52]	; (8009d08 <__multadd+0x88>)
 8009cd4:	21b5      	movs	r1, #181	; 0xb5
 8009cd6:	f000 fcab 	bl	800a630 <__assert_func>
 8009cda:	6922      	ldr	r2, [r4, #16]
 8009cdc:	3202      	adds	r2, #2
 8009cde:	f104 010c 	add.w	r1, r4, #12
 8009ce2:	0092      	lsls	r2, r2, #2
 8009ce4:	300c      	adds	r0, #12
 8009ce6:	f7ff ff4e 	bl	8009b86 <memcpy>
 8009cea:	4621      	mov	r1, r4
 8009cec:	4638      	mov	r0, r7
 8009cee:	f7ff ffa5 	bl	8009c3c <_Bfree>
 8009cf2:	4644      	mov	r4, r8
 8009cf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009cf8:	3501      	adds	r5, #1
 8009cfa:	615e      	str	r6, [r3, #20]
 8009cfc:	6125      	str	r5, [r4, #16]
 8009cfe:	4620      	mov	r0, r4
 8009d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d04:	0800b535 	.word	0x0800b535
 8009d08:	0800b5a8 	.word	0x0800b5a8

08009d0c <__hi0bits>:
 8009d0c:	0c03      	lsrs	r3, r0, #16
 8009d0e:	041b      	lsls	r3, r3, #16
 8009d10:	b9d3      	cbnz	r3, 8009d48 <__hi0bits+0x3c>
 8009d12:	0400      	lsls	r0, r0, #16
 8009d14:	2310      	movs	r3, #16
 8009d16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d1a:	bf04      	itt	eq
 8009d1c:	0200      	lsleq	r0, r0, #8
 8009d1e:	3308      	addeq	r3, #8
 8009d20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d24:	bf04      	itt	eq
 8009d26:	0100      	lsleq	r0, r0, #4
 8009d28:	3304      	addeq	r3, #4
 8009d2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d2e:	bf04      	itt	eq
 8009d30:	0080      	lsleq	r0, r0, #2
 8009d32:	3302      	addeq	r3, #2
 8009d34:	2800      	cmp	r0, #0
 8009d36:	db05      	blt.n	8009d44 <__hi0bits+0x38>
 8009d38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d3c:	f103 0301 	add.w	r3, r3, #1
 8009d40:	bf08      	it	eq
 8009d42:	2320      	moveq	r3, #32
 8009d44:	4618      	mov	r0, r3
 8009d46:	4770      	bx	lr
 8009d48:	2300      	movs	r3, #0
 8009d4a:	e7e4      	b.n	8009d16 <__hi0bits+0xa>

08009d4c <__lo0bits>:
 8009d4c:	6803      	ldr	r3, [r0, #0]
 8009d4e:	f013 0207 	ands.w	r2, r3, #7
 8009d52:	4601      	mov	r1, r0
 8009d54:	d00b      	beq.n	8009d6e <__lo0bits+0x22>
 8009d56:	07da      	lsls	r2, r3, #31
 8009d58:	d423      	bmi.n	8009da2 <__lo0bits+0x56>
 8009d5a:	0798      	lsls	r0, r3, #30
 8009d5c:	bf49      	itett	mi
 8009d5e:	085b      	lsrmi	r3, r3, #1
 8009d60:	089b      	lsrpl	r3, r3, #2
 8009d62:	2001      	movmi	r0, #1
 8009d64:	600b      	strmi	r3, [r1, #0]
 8009d66:	bf5c      	itt	pl
 8009d68:	600b      	strpl	r3, [r1, #0]
 8009d6a:	2002      	movpl	r0, #2
 8009d6c:	4770      	bx	lr
 8009d6e:	b298      	uxth	r0, r3
 8009d70:	b9a8      	cbnz	r0, 8009d9e <__lo0bits+0x52>
 8009d72:	0c1b      	lsrs	r3, r3, #16
 8009d74:	2010      	movs	r0, #16
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	b90a      	cbnz	r2, 8009d7e <__lo0bits+0x32>
 8009d7a:	3008      	adds	r0, #8
 8009d7c:	0a1b      	lsrs	r3, r3, #8
 8009d7e:	071a      	lsls	r2, r3, #28
 8009d80:	bf04      	itt	eq
 8009d82:	091b      	lsreq	r3, r3, #4
 8009d84:	3004      	addeq	r0, #4
 8009d86:	079a      	lsls	r2, r3, #30
 8009d88:	bf04      	itt	eq
 8009d8a:	089b      	lsreq	r3, r3, #2
 8009d8c:	3002      	addeq	r0, #2
 8009d8e:	07da      	lsls	r2, r3, #31
 8009d90:	d403      	bmi.n	8009d9a <__lo0bits+0x4e>
 8009d92:	085b      	lsrs	r3, r3, #1
 8009d94:	f100 0001 	add.w	r0, r0, #1
 8009d98:	d005      	beq.n	8009da6 <__lo0bits+0x5a>
 8009d9a:	600b      	str	r3, [r1, #0]
 8009d9c:	4770      	bx	lr
 8009d9e:	4610      	mov	r0, r2
 8009da0:	e7e9      	b.n	8009d76 <__lo0bits+0x2a>
 8009da2:	2000      	movs	r0, #0
 8009da4:	4770      	bx	lr
 8009da6:	2020      	movs	r0, #32
 8009da8:	4770      	bx	lr
	...

08009dac <__i2b>:
 8009dac:	b510      	push	{r4, lr}
 8009dae:	460c      	mov	r4, r1
 8009db0:	2101      	movs	r1, #1
 8009db2:	f7ff ff03 	bl	8009bbc <_Balloc>
 8009db6:	4602      	mov	r2, r0
 8009db8:	b928      	cbnz	r0, 8009dc6 <__i2b+0x1a>
 8009dba:	4b05      	ldr	r3, [pc, #20]	; (8009dd0 <__i2b+0x24>)
 8009dbc:	4805      	ldr	r0, [pc, #20]	; (8009dd4 <__i2b+0x28>)
 8009dbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009dc2:	f000 fc35 	bl	800a630 <__assert_func>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	6144      	str	r4, [r0, #20]
 8009dca:	6103      	str	r3, [r0, #16]
 8009dcc:	bd10      	pop	{r4, pc}
 8009dce:	bf00      	nop
 8009dd0:	0800b535 	.word	0x0800b535
 8009dd4:	0800b5a8 	.word	0x0800b5a8

08009dd8 <__multiply>:
 8009dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	4691      	mov	r9, r2
 8009dde:	690a      	ldr	r2, [r1, #16]
 8009de0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	bfb8      	it	lt
 8009de8:	460b      	movlt	r3, r1
 8009dea:	460c      	mov	r4, r1
 8009dec:	bfbc      	itt	lt
 8009dee:	464c      	movlt	r4, r9
 8009df0:	4699      	movlt	r9, r3
 8009df2:	6927      	ldr	r7, [r4, #16]
 8009df4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009df8:	68a3      	ldr	r3, [r4, #8]
 8009dfa:	6861      	ldr	r1, [r4, #4]
 8009dfc:	eb07 060a 	add.w	r6, r7, sl
 8009e00:	42b3      	cmp	r3, r6
 8009e02:	b085      	sub	sp, #20
 8009e04:	bfb8      	it	lt
 8009e06:	3101      	addlt	r1, #1
 8009e08:	f7ff fed8 	bl	8009bbc <_Balloc>
 8009e0c:	b930      	cbnz	r0, 8009e1c <__multiply+0x44>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	4b44      	ldr	r3, [pc, #272]	; (8009f24 <__multiply+0x14c>)
 8009e12:	4845      	ldr	r0, [pc, #276]	; (8009f28 <__multiply+0x150>)
 8009e14:	f240 115d 	movw	r1, #349	; 0x15d
 8009e18:	f000 fc0a 	bl	800a630 <__assert_func>
 8009e1c:	f100 0514 	add.w	r5, r0, #20
 8009e20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e24:	462b      	mov	r3, r5
 8009e26:	2200      	movs	r2, #0
 8009e28:	4543      	cmp	r3, r8
 8009e2a:	d321      	bcc.n	8009e70 <__multiply+0x98>
 8009e2c:	f104 0314 	add.w	r3, r4, #20
 8009e30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e34:	f109 0314 	add.w	r3, r9, #20
 8009e38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e3c:	9202      	str	r2, [sp, #8]
 8009e3e:	1b3a      	subs	r2, r7, r4
 8009e40:	3a15      	subs	r2, #21
 8009e42:	f022 0203 	bic.w	r2, r2, #3
 8009e46:	3204      	adds	r2, #4
 8009e48:	f104 0115 	add.w	r1, r4, #21
 8009e4c:	428f      	cmp	r7, r1
 8009e4e:	bf38      	it	cc
 8009e50:	2204      	movcc	r2, #4
 8009e52:	9201      	str	r2, [sp, #4]
 8009e54:	9a02      	ldr	r2, [sp, #8]
 8009e56:	9303      	str	r3, [sp, #12]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d80c      	bhi.n	8009e76 <__multiply+0x9e>
 8009e5c:	2e00      	cmp	r6, #0
 8009e5e:	dd03      	ble.n	8009e68 <__multiply+0x90>
 8009e60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d05a      	beq.n	8009f1e <__multiply+0x146>
 8009e68:	6106      	str	r6, [r0, #16]
 8009e6a:	b005      	add	sp, #20
 8009e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	f843 2b04 	str.w	r2, [r3], #4
 8009e74:	e7d8      	b.n	8009e28 <__multiply+0x50>
 8009e76:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e7a:	f1ba 0f00 	cmp.w	sl, #0
 8009e7e:	d024      	beq.n	8009eca <__multiply+0xf2>
 8009e80:	f104 0e14 	add.w	lr, r4, #20
 8009e84:	46a9      	mov	r9, r5
 8009e86:	f04f 0c00 	mov.w	ip, #0
 8009e8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e8e:	f8d9 1000 	ldr.w	r1, [r9]
 8009e92:	fa1f fb82 	uxth.w	fp, r2
 8009e96:	b289      	uxth	r1, r1
 8009e98:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ea0:	f8d9 2000 	ldr.w	r2, [r9]
 8009ea4:	4461      	add	r1, ip
 8009ea6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009eaa:	fb0a c20b 	mla	r2, sl, fp, ip
 8009eae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009eb2:	b289      	uxth	r1, r1
 8009eb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009eb8:	4577      	cmp	r7, lr
 8009eba:	f849 1b04 	str.w	r1, [r9], #4
 8009ebe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ec2:	d8e2      	bhi.n	8009e8a <__multiply+0xb2>
 8009ec4:	9a01      	ldr	r2, [sp, #4]
 8009ec6:	f845 c002 	str.w	ip, [r5, r2]
 8009eca:	9a03      	ldr	r2, [sp, #12]
 8009ecc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	f1b9 0f00 	cmp.w	r9, #0
 8009ed6:	d020      	beq.n	8009f1a <__multiply+0x142>
 8009ed8:	6829      	ldr	r1, [r5, #0]
 8009eda:	f104 0c14 	add.w	ip, r4, #20
 8009ede:	46ae      	mov	lr, r5
 8009ee0:	f04f 0a00 	mov.w	sl, #0
 8009ee4:	f8bc b000 	ldrh.w	fp, [ip]
 8009ee8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009eec:	fb09 220b 	mla	r2, r9, fp, r2
 8009ef0:	4492      	add	sl, r2
 8009ef2:	b289      	uxth	r1, r1
 8009ef4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009ef8:	f84e 1b04 	str.w	r1, [lr], #4
 8009efc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f00:	f8be 1000 	ldrh.w	r1, [lr]
 8009f04:	0c12      	lsrs	r2, r2, #16
 8009f06:	fb09 1102 	mla	r1, r9, r2, r1
 8009f0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009f0e:	4567      	cmp	r7, ip
 8009f10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f14:	d8e6      	bhi.n	8009ee4 <__multiply+0x10c>
 8009f16:	9a01      	ldr	r2, [sp, #4]
 8009f18:	50a9      	str	r1, [r5, r2]
 8009f1a:	3504      	adds	r5, #4
 8009f1c:	e79a      	b.n	8009e54 <__multiply+0x7c>
 8009f1e:	3e01      	subs	r6, #1
 8009f20:	e79c      	b.n	8009e5c <__multiply+0x84>
 8009f22:	bf00      	nop
 8009f24:	0800b535 	.word	0x0800b535
 8009f28:	0800b5a8 	.word	0x0800b5a8

08009f2c <__pow5mult>:
 8009f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f30:	4615      	mov	r5, r2
 8009f32:	f012 0203 	ands.w	r2, r2, #3
 8009f36:	4606      	mov	r6, r0
 8009f38:	460f      	mov	r7, r1
 8009f3a:	d007      	beq.n	8009f4c <__pow5mult+0x20>
 8009f3c:	4c25      	ldr	r4, [pc, #148]	; (8009fd4 <__pow5mult+0xa8>)
 8009f3e:	3a01      	subs	r2, #1
 8009f40:	2300      	movs	r3, #0
 8009f42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f46:	f7ff fe9b 	bl	8009c80 <__multadd>
 8009f4a:	4607      	mov	r7, r0
 8009f4c:	10ad      	asrs	r5, r5, #2
 8009f4e:	d03d      	beq.n	8009fcc <__pow5mult+0xa0>
 8009f50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f52:	b97c      	cbnz	r4, 8009f74 <__pow5mult+0x48>
 8009f54:	2010      	movs	r0, #16
 8009f56:	f7fd fd33 	bl	80079c0 <malloc>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	6270      	str	r0, [r6, #36]	; 0x24
 8009f5e:	b928      	cbnz	r0, 8009f6c <__pow5mult+0x40>
 8009f60:	4b1d      	ldr	r3, [pc, #116]	; (8009fd8 <__pow5mult+0xac>)
 8009f62:	481e      	ldr	r0, [pc, #120]	; (8009fdc <__pow5mult+0xb0>)
 8009f64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f68:	f000 fb62 	bl	800a630 <__assert_func>
 8009f6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f70:	6004      	str	r4, [r0, #0]
 8009f72:	60c4      	str	r4, [r0, #12]
 8009f74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f7c:	b94c      	cbnz	r4, 8009f92 <__pow5mult+0x66>
 8009f7e:	f240 2171 	movw	r1, #625	; 0x271
 8009f82:	4630      	mov	r0, r6
 8009f84:	f7ff ff12 	bl	8009dac <__i2b>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f8e:	4604      	mov	r4, r0
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	f04f 0900 	mov.w	r9, #0
 8009f96:	07eb      	lsls	r3, r5, #31
 8009f98:	d50a      	bpl.n	8009fb0 <__pow5mult+0x84>
 8009f9a:	4639      	mov	r1, r7
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	f7ff ff1a 	bl	8009dd8 <__multiply>
 8009fa4:	4639      	mov	r1, r7
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff fe47 	bl	8009c3c <_Bfree>
 8009fae:	4647      	mov	r7, r8
 8009fb0:	106d      	asrs	r5, r5, #1
 8009fb2:	d00b      	beq.n	8009fcc <__pow5mult+0xa0>
 8009fb4:	6820      	ldr	r0, [r4, #0]
 8009fb6:	b938      	cbnz	r0, 8009fc8 <__pow5mult+0x9c>
 8009fb8:	4622      	mov	r2, r4
 8009fba:	4621      	mov	r1, r4
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	f7ff ff0b 	bl	8009dd8 <__multiply>
 8009fc2:	6020      	str	r0, [r4, #0]
 8009fc4:	f8c0 9000 	str.w	r9, [r0]
 8009fc8:	4604      	mov	r4, r0
 8009fca:	e7e4      	b.n	8009f96 <__pow5mult+0x6a>
 8009fcc:	4638      	mov	r0, r7
 8009fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd2:	bf00      	nop
 8009fd4:	0800b6f8 	.word	0x0800b6f8
 8009fd8:	0800b4c3 	.word	0x0800b4c3
 8009fdc:	0800b5a8 	.word	0x0800b5a8

08009fe0 <__lshift>:
 8009fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	6849      	ldr	r1, [r1, #4]
 8009fe8:	6923      	ldr	r3, [r4, #16]
 8009fea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fee:	68a3      	ldr	r3, [r4, #8]
 8009ff0:	4607      	mov	r7, r0
 8009ff2:	4691      	mov	r9, r2
 8009ff4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ff8:	f108 0601 	add.w	r6, r8, #1
 8009ffc:	42b3      	cmp	r3, r6
 8009ffe:	db0b      	blt.n	800a018 <__lshift+0x38>
 800a000:	4638      	mov	r0, r7
 800a002:	f7ff fddb 	bl	8009bbc <_Balloc>
 800a006:	4605      	mov	r5, r0
 800a008:	b948      	cbnz	r0, 800a01e <__lshift+0x3e>
 800a00a:	4602      	mov	r2, r0
 800a00c:	4b2a      	ldr	r3, [pc, #168]	; (800a0b8 <__lshift+0xd8>)
 800a00e:	482b      	ldr	r0, [pc, #172]	; (800a0bc <__lshift+0xdc>)
 800a010:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a014:	f000 fb0c 	bl	800a630 <__assert_func>
 800a018:	3101      	adds	r1, #1
 800a01a:	005b      	lsls	r3, r3, #1
 800a01c:	e7ee      	b.n	8009ffc <__lshift+0x1c>
 800a01e:	2300      	movs	r3, #0
 800a020:	f100 0114 	add.w	r1, r0, #20
 800a024:	f100 0210 	add.w	r2, r0, #16
 800a028:	4618      	mov	r0, r3
 800a02a:	4553      	cmp	r3, sl
 800a02c:	db37      	blt.n	800a09e <__lshift+0xbe>
 800a02e:	6920      	ldr	r0, [r4, #16]
 800a030:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a034:	f104 0314 	add.w	r3, r4, #20
 800a038:	f019 091f 	ands.w	r9, r9, #31
 800a03c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a040:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a044:	d02f      	beq.n	800a0a6 <__lshift+0xc6>
 800a046:	f1c9 0e20 	rsb	lr, r9, #32
 800a04a:	468a      	mov	sl, r1
 800a04c:	f04f 0c00 	mov.w	ip, #0
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	fa02 f209 	lsl.w	r2, r2, r9
 800a056:	ea42 020c 	orr.w	r2, r2, ip
 800a05a:	f84a 2b04 	str.w	r2, [sl], #4
 800a05e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a062:	4298      	cmp	r0, r3
 800a064:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a068:	d8f2      	bhi.n	800a050 <__lshift+0x70>
 800a06a:	1b03      	subs	r3, r0, r4
 800a06c:	3b15      	subs	r3, #21
 800a06e:	f023 0303 	bic.w	r3, r3, #3
 800a072:	3304      	adds	r3, #4
 800a074:	f104 0215 	add.w	r2, r4, #21
 800a078:	4290      	cmp	r0, r2
 800a07a:	bf38      	it	cc
 800a07c:	2304      	movcc	r3, #4
 800a07e:	f841 c003 	str.w	ip, [r1, r3]
 800a082:	f1bc 0f00 	cmp.w	ip, #0
 800a086:	d001      	beq.n	800a08c <__lshift+0xac>
 800a088:	f108 0602 	add.w	r6, r8, #2
 800a08c:	3e01      	subs	r6, #1
 800a08e:	4638      	mov	r0, r7
 800a090:	612e      	str	r6, [r5, #16]
 800a092:	4621      	mov	r1, r4
 800a094:	f7ff fdd2 	bl	8009c3c <_Bfree>
 800a098:	4628      	mov	r0, r5
 800a09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a09e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	e7c1      	b.n	800a02a <__lshift+0x4a>
 800a0a6:	3904      	subs	r1, #4
 800a0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0b0:	4298      	cmp	r0, r3
 800a0b2:	d8f9      	bhi.n	800a0a8 <__lshift+0xc8>
 800a0b4:	e7ea      	b.n	800a08c <__lshift+0xac>
 800a0b6:	bf00      	nop
 800a0b8:	0800b535 	.word	0x0800b535
 800a0bc:	0800b5a8 	.word	0x0800b5a8

0800a0c0 <__mcmp>:
 800a0c0:	b530      	push	{r4, r5, lr}
 800a0c2:	6902      	ldr	r2, [r0, #16]
 800a0c4:	690c      	ldr	r4, [r1, #16]
 800a0c6:	1b12      	subs	r2, r2, r4
 800a0c8:	d10e      	bne.n	800a0e8 <__mcmp+0x28>
 800a0ca:	f100 0314 	add.w	r3, r0, #20
 800a0ce:	3114      	adds	r1, #20
 800a0d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a0d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a0e0:	42a5      	cmp	r5, r4
 800a0e2:	d003      	beq.n	800a0ec <__mcmp+0x2c>
 800a0e4:	d305      	bcc.n	800a0f2 <__mcmp+0x32>
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	bd30      	pop	{r4, r5, pc}
 800a0ec:	4283      	cmp	r3, r0
 800a0ee:	d3f3      	bcc.n	800a0d8 <__mcmp+0x18>
 800a0f0:	e7fa      	b.n	800a0e8 <__mcmp+0x28>
 800a0f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f6:	e7f7      	b.n	800a0e8 <__mcmp+0x28>

0800a0f8 <__mdiff>:
 800a0f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	460c      	mov	r4, r1
 800a0fe:	4606      	mov	r6, r0
 800a100:	4611      	mov	r1, r2
 800a102:	4620      	mov	r0, r4
 800a104:	4690      	mov	r8, r2
 800a106:	f7ff ffdb 	bl	800a0c0 <__mcmp>
 800a10a:	1e05      	subs	r5, r0, #0
 800a10c:	d110      	bne.n	800a130 <__mdiff+0x38>
 800a10e:	4629      	mov	r1, r5
 800a110:	4630      	mov	r0, r6
 800a112:	f7ff fd53 	bl	8009bbc <_Balloc>
 800a116:	b930      	cbnz	r0, 800a126 <__mdiff+0x2e>
 800a118:	4b3a      	ldr	r3, [pc, #232]	; (800a204 <__mdiff+0x10c>)
 800a11a:	4602      	mov	r2, r0
 800a11c:	f240 2132 	movw	r1, #562	; 0x232
 800a120:	4839      	ldr	r0, [pc, #228]	; (800a208 <__mdiff+0x110>)
 800a122:	f000 fa85 	bl	800a630 <__assert_func>
 800a126:	2301      	movs	r3, #1
 800a128:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a12c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a130:	bfa4      	itt	ge
 800a132:	4643      	movge	r3, r8
 800a134:	46a0      	movge	r8, r4
 800a136:	4630      	mov	r0, r6
 800a138:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a13c:	bfa6      	itte	ge
 800a13e:	461c      	movge	r4, r3
 800a140:	2500      	movge	r5, #0
 800a142:	2501      	movlt	r5, #1
 800a144:	f7ff fd3a 	bl	8009bbc <_Balloc>
 800a148:	b920      	cbnz	r0, 800a154 <__mdiff+0x5c>
 800a14a:	4b2e      	ldr	r3, [pc, #184]	; (800a204 <__mdiff+0x10c>)
 800a14c:	4602      	mov	r2, r0
 800a14e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a152:	e7e5      	b.n	800a120 <__mdiff+0x28>
 800a154:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a158:	6926      	ldr	r6, [r4, #16]
 800a15a:	60c5      	str	r5, [r0, #12]
 800a15c:	f104 0914 	add.w	r9, r4, #20
 800a160:	f108 0514 	add.w	r5, r8, #20
 800a164:	f100 0e14 	add.w	lr, r0, #20
 800a168:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a16c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a170:	f108 0210 	add.w	r2, r8, #16
 800a174:	46f2      	mov	sl, lr
 800a176:	2100      	movs	r1, #0
 800a178:	f859 3b04 	ldr.w	r3, [r9], #4
 800a17c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a180:	fa1f f883 	uxth.w	r8, r3
 800a184:	fa11 f18b 	uxtah	r1, r1, fp
 800a188:	0c1b      	lsrs	r3, r3, #16
 800a18a:	eba1 0808 	sub.w	r8, r1, r8
 800a18e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a192:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a196:	fa1f f888 	uxth.w	r8, r8
 800a19a:	1419      	asrs	r1, r3, #16
 800a19c:	454e      	cmp	r6, r9
 800a19e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a1a2:	f84a 3b04 	str.w	r3, [sl], #4
 800a1a6:	d8e7      	bhi.n	800a178 <__mdiff+0x80>
 800a1a8:	1b33      	subs	r3, r6, r4
 800a1aa:	3b15      	subs	r3, #21
 800a1ac:	f023 0303 	bic.w	r3, r3, #3
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	3415      	adds	r4, #21
 800a1b4:	42a6      	cmp	r6, r4
 800a1b6:	bf38      	it	cc
 800a1b8:	2304      	movcc	r3, #4
 800a1ba:	441d      	add	r5, r3
 800a1bc:	4473      	add	r3, lr
 800a1be:	469e      	mov	lr, r3
 800a1c0:	462e      	mov	r6, r5
 800a1c2:	4566      	cmp	r6, ip
 800a1c4:	d30e      	bcc.n	800a1e4 <__mdiff+0xec>
 800a1c6:	f10c 0203 	add.w	r2, ip, #3
 800a1ca:	1b52      	subs	r2, r2, r5
 800a1cc:	f022 0203 	bic.w	r2, r2, #3
 800a1d0:	3d03      	subs	r5, #3
 800a1d2:	45ac      	cmp	ip, r5
 800a1d4:	bf38      	it	cc
 800a1d6:	2200      	movcc	r2, #0
 800a1d8:	441a      	add	r2, r3
 800a1da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a1de:	b17b      	cbz	r3, 800a200 <__mdiff+0x108>
 800a1e0:	6107      	str	r7, [r0, #16]
 800a1e2:	e7a3      	b.n	800a12c <__mdiff+0x34>
 800a1e4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a1e8:	fa11 f288 	uxtah	r2, r1, r8
 800a1ec:	1414      	asrs	r4, r2, #16
 800a1ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a1f2:	b292      	uxth	r2, r2
 800a1f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a1f8:	f84e 2b04 	str.w	r2, [lr], #4
 800a1fc:	1421      	asrs	r1, r4, #16
 800a1fe:	e7e0      	b.n	800a1c2 <__mdiff+0xca>
 800a200:	3f01      	subs	r7, #1
 800a202:	e7ea      	b.n	800a1da <__mdiff+0xe2>
 800a204:	0800b535 	.word	0x0800b535
 800a208:	0800b5a8 	.word	0x0800b5a8

0800a20c <__d2b>:
 800a20c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a210:	4689      	mov	r9, r1
 800a212:	2101      	movs	r1, #1
 800a214:	ec57 6b10 	vmov	r6, r7, d0
 800a218:	4690      	mov	r8, r2
 800a21a:	f7ff fccf 	bl	8009bbc <_Balloc>
 800a21e:	4604      	mov	r4, r0
 800a220:	b930      	cbnz	r0, 800a230 <__d2b+0x24>
 800a222:	4602      	mov	r2, r0
 800a224:	4b25      	ldr	r3, [pc, #148]	; (800a2bc <__d2b+0xb0>)
 800a226:	4826      	ldr	r0, [pc, #152]	; (800a2c0 <__d2b+0xb4>)
 800a228:	f240 310a 	movw	r1, #778	; 0x30a
 800a22c:	f000 fa00 	bl	800a630 <__assert_func>
 800a230:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a234:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a238:	bb35      	cbnz	r5, 800a288 <__d2b+0x7c>
 800a23a:	2e00      	cmp	r6, #0
 800a23c:	9301      	str	r3, [sp, #4]
 800a23e:	d028      	beq.n	800a292 <__d2b+0x86>
 800a240:	4668      	mov	r0, sp
 800a242:	9600      	str	r6, [sp, #0]
 800a244:	f7ff fd82 	bl	8009d4c <__lo0bits>
 800a248:	9900      	ldr	r1, [sp, #0]
 800a24a:	b300      	cbz	r0, 800a28e <__d2b+0x82>
 800a24c:	9a01      	ldr	r2, [sp, #4]
 800a24e:	f1c0 0320 	rsb	r3, r0, #32
 800a252:	fa02 f303 	lsl.w	r3, r2, r3
 800a256:	430b      	orrs	r3, r1
 800a258:	40c2      	lsrs	r2, r0
 800a25a:	6163      	str	r3, [r4, #20]
 800a25c:	9201      	str	r2, [sp, #4]
 800a25e:	9b01      	ldr	r3, [sp, #4]
 800a260:	61a3      	str	r3, [r4, #24]
 800a262:	2b00      	cmp	r3, #0
 800a264:	bf14      	ite	ne
 800a266:	2202      	movne	r2, #2
 800a268:	2201      	moveq	r2, #1
 800a26a:	6122      	str	r2, [r4, #16]
 800a26c:	b1d5      	cbz	r5, 800a2a4 <__d2b+0x98>
 800a26e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a272:	4405      	add	r5, r0
 800a274:	f8c9 5000 	str.w	r5, [r9]
 800a278:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a27c:	f8c8 0000 	str.w	r0, [r8]
 800a280:	4620      	mov	r0, r4
 800a282:	b003      	add	sp, #12
 800a284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a28c:	e7d5      	b.n	800a23a <__d2b+0x2e>
 800a28e:	6161      	str	r1, [r4, #20]
 800a290:	e7e5      	b.n	800a25e <__d2b+0x52>
 800a292:	a801      	add	r0, sp, #4
 800a294:	f7ff fd5a 	bl	8009d4c <__lo0bits>
 800a298:	9b01      	ldr	r3, [sp, #4]
 800a29a:	6163      	str	r3, [r4, #20]
 800a29c:	2201      	movs	r2, #1
 800a29e:	6122      	str	r2, [r4, #16]
 800a2a0:	3020      	adds	r0, #32
 800a2a2:	e7e3      	b.n	800a26c <__d2b+0x60>
 800a2a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2ac:	f8c9 0000 	str.w	r0, [r9]
 800a2b0:	6918      	ldr	r0, [r3, #16]
 800a2b2:	f7ff fd2b 	bl	8009d0c <__hi0bits>
 800a2b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2ba:	e7df      	b.n	800a27c <__d2b+0x70>
 800a2bc:	0800b535 	.word	0x0800b535
 800a2c0:	0800b5a8 	.word	0x0800b5a8

0800a2c4 <_calloc_r>:
 800a2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2c6:	fba1 2402 	umull	r2, r4, r1, r2
 800a2ca:	b94c      	cbnz	r4, 800a2e0 <_calloc_r+0x1c>
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	9201      	str	r2, [sp, #4]
 800a2d0:	f7fd fbf2 	bl	8007ab8 <_malloc_r>
 800a2d4:	9a01      	ldr	r2, [sp, #4]
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	b930      	cbnz	r0, 800a2e8 <_calloc_r+0x24>
 800a2da:	4628      	mov	r0, r5
 800a2dc:	b003      	add	sp, #12
 800a2de:	bd30      	pop	{r4, r5, pc}
 800a2e0:	220c      	movs	r2, #12
 800a2e2:	6002      	str	r2, [r0, #0]
 800a2e4:	2500      	movs	r5, #0
 800a2e6:	e7f8      	b.n	800a2da <_calloc_r+0x16>
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	f7fd fb71 	bl	80079d0 <memset>
 800a2ee:	e7f4      	b.n	800a2da <_calloc_r+0x16>

0800a2f0 <__ssputs_r>:
 800a2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f4:	688e      	ldr	r6, [r1, #8]
 800a2f6:	429e      	cmp	r6, r3
 800a2f8:	4682      	mov	sl, r0
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	4690      	mov	r8, r2
 800a2fe:	461f      	mov	r7, r3
 800a300:	d838      	bhi.n	800a374 <__ssputs_r+0x84>
 800a302:	898a      	ldrh	r2, [r1, #12]
 800a304:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a308:	d032      	beq.n	800a370 <__ssputs_r+0x80>
 800a30a:	6825      	ldr	r5, [r4, #0]
 800a30c:	6909      	ldr	r1, [r1, #16]
 800a30e:	eba5 0901 	sub.w	r9, r5, r1
 800a312:	6965      	ldr	r5, [r4, #20]
 800a314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a318:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a31c:	3301      	adds	r3, #1
 800a31e:	444b      	add	r3, r9
 800a320:	106d      	asrs	r5, r5, #1
 800a322:	429d      	cmp	r5, r3
 800a324:	bf38      	it	cc
 800a326:	461d      	movcc	r5, r3
 800a328:	0553      	lsls	r3, r2, #21
 800a32a:	d531      	bpl.n	800a390 <__ssputs_r+0xa0>
 800a32c:	4629      	mov	r1, r5
 800a32e:	f7fd fbc3 	bl	8007ab8 <_malloc_r>
 800a332:	4606      	mov	r6, r0
 800a334:	b950      	cbnz	r0, 800a34c <__ssputs_r+0x5c>
 800a336:	230c      	movs	r3, #12
 800a338:	f8ca 3000 	str.w	r3, [sl]
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a342:	81a3      	strh	r3, [r4, #12]
 800a344:	f04f 30ff 	mov.w	r0, #4294967295
 800a348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a34c:	6921      	ldr	r1, [r4, #16]
 800a34e:	464a      	mov	r2, r9
 800a350:	f7ff fc19 	bl	8009b86 <memcpy>
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a35a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a35e:	81a3      	strh	r3, [r4, #12]
 800a360:	6126      	str	r6, [r4, #16]
 800a362:	6165      	str	r5, [r4, #20]
 800a364:	444e      	add	r6, r9
 800a366:	eba5 0509 	sub.w	r5, r5, r9
 800a36a:	6026      	str	r6, [r4, #0]
 800a36c:	60a5      	str	r5, [r4, #8]
 800a36e:	463e      	mov	r6, r7
 800a370:	42be      	cmp	r6, r7
 800a372:	d900      	bls.n	800a376 <__ssputs_r+0x86>
 800a374:	463e      	mov	r6, r7
 800a376:	6820      	ldr	r0, [r4, #0]
 800a378:	4632      	mov	r2, r6
 800a37a:	4641      	mov	r1, r8
 800a37c:	f000 f9bc 	bl	800a6f8 <memmove>
 800a380:	68a3      	ldr	r3, [r4, #8]
 800a382:	1b9b      	subs	r3, r3, r6
 800a384:	60a3      	str	r3, [r4, #8]
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	4433      	add	r3, r6
 800a38a:	6023      	str	r3, [r4, #0]
 800a38c:	2000      	movs	r0, #0
 800a38e:	e7db      	b.n	800a348 <__ssputs_r+0x58>
 800a390:	462a      	mov	r2, r5
 800a392:	f000 f9cb 	bl	800a72c <_realloc_r>
 800a396:	4606      	mov	r6, r0
 800a398:	2800      	cmp	r0, #0
 800a39a:	d1e1      	bne.n	800a360 <__ssputs_r+0x70>
 800a39c:	6921      	ldr	r1, [r4, #16]
 800a39e:	4650      	mov	r0, sl
 800a3a0:	f7fd fb1e 	bl	80079e0 <_free_r>
 800a3a4:	e7c7      	b.n	800a336 <__ssputs_r+0x46>
	...

0800a3a8 <_svfiprintf_r>:
 800a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	4698      	mov	r8, r3
 800a3ae:	898b      	ldrh	r3, [r1, #12]
 800a3b0:	061b      	lsls	r3, r3, #24
 800a3b2:	b09d      	sub	sp, #116	; 0x74
 800a3b4:	4607      	mov	r7, r0
 800a3b6:	460d      	mov	r5, r1
 800a3b8:	4614      	mov	r4, r2
 800a3ba:	d50e      	bpl.n	800a3da <_svfiprintf_r+0x32>
 800a3bc:	690b      	ldr	r3, [r1, #16]
 800a3be:	b963      	cbnz	r3, 800a3da <_svfiprintf_r+0x32>
 800a3c0:	2140      	movs	r1, #64	; 0x40
 800a3c2:	f7fd fb79 	bl	8007ab8 <_malloc_r>
 800a3c6:	6028      	str	r0, [r5, #0]
 800a3c8:	6128      	str	r0, [r5, #16]
 800a3ca:	b920      	cbnz	r0, 800a3d6 <_svfiprintf_r+0x2e>
 800a3cc:	230c      	movs	r3, #12
 800a3ce:	603b      	str	r3, [r7, #0]
 800a3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d4:	e0d1      	b.n	800a57a <_svfiprintf_r+0x1d2>
 800a3d6:	2340      	movs	r3, #64	; 0x40
 800a3d8:	616b      	str	r3, [r5, #20]
 800a3da:	2300      	movs	r3, #0
 800a3dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3de:	2320      	movs	r3, #32
 800a3e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3e8:	2330      	movs	r3, #48	; 0x30
 800a3ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a594 <_svfiprintf_r+0x1ec>
 800a3ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3f2:	f04f 0901 	mov.w	r9, #1
 800a3f6:	4623      	mov	r3, r4
 800a3f8:	469a      	mov	sl, r3
 800a3fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3fe:	b10a      	cbz	r2, 800a404 <_svfiprintf_r+0x5c>
 800a400:	2a25      	cmp	r2, #37	; 0x25
 800a402:	d1f9      	bne.n	800a3f8 <_svfiprintf_r+0x50>
 800a404:	ebba 0b04 	subs.w	fp, sl, r4
 800a408:	d00b      	beq.n	800a422 <_svfiprintf_r+0x7a>
 800a40a:	465b      	mov	r3, fp
 800a40c:	4622      	mov	r2, r4
 800a40e:	4629      	mov	r1, r5
 800a410:	4638      	mov	r0, r7
 800a412:	f7ff ff6d 	bl	800a2f0 <__ssputs_r>
 800a416:	3001      	adds	r0, #1
 800a418:	f000 80aa 	beq.w	800a570 <_svfiprintf_r+0x1c8>
 800a41c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a41e:	445a      	add	r2, fp
 800a420:	9209      	str	r2, [sp, #36]	; 0x24
 800a422:	f89a 3000 	ldrb.w	r3, [sl]
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 80a2 	beq.w	800a570 <_svfiprintf_r+0x1c8>
 800a42c:	2300      	movs	r3, #0
 800a42e:	f04f 32ff 	mov.w	r2, #4294967295
 800a432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a436:	f10a 0a01 	add.w	sl, sl, #1
 800a43a:	9304      	str	r3, [sp, #16]
 800a43c:	9307      	str	r3, [sp, #28]
 800a43e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a442:	931a      	str	r3, [sp, #104]	; 0x68
 800a444:	4654      	mov	r4, sl
 800a446:	2205      	movs	r2, #5
 800a448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a44c:	4851      	ldr	r0, [pc, #324]	; (800a594 <_svfiprintf_r+0x1ec>)
 800a44e:	f7f5 fec7 	bl	80001e0 <memchr>
 800a452:	9a04      	ldr	r2, [sp, #16]
 800a454:	b9d8      	cbnz	r0, 800a48e <_svfiprintf_r+0xe6>
 800a456:	06d0      	lsls	r0, r2, #27
 800a458:	bf44      	itt	mi
 800a45a:	2320      	movmi	r3, #32
 800a45c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a460:	0711      	lsls	r1, r2, #28
 800a462:	bf44      	itt	mi
 800a464:	232b      	movmi	r3, #43	; 0x2b
 800a466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a46a:	f89a 3000 	ldrb.w	r3, [sl]
 800a46e:	2b2a      	cmp	r3, #42	; 0x2a
 800a470:	d015      	beq.n	800a49e <_svfiprintf_r+0xf6>
 800a472:	9a07      	ldr	r2, [sp, #28]
 800a474:	4654      	mov	r4, sl
 800a476:	2000      	movs	r0, #0
 800a478:	f04f 0c0a 	mov.w	ip, #10
 800a47c:	4621      	mov	r1, r4
 800a47e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a482:	3b30      	subs	r3, #48	; 0x30
 800a484:	2b09      	cmp	r3, #9
 800a486:	d94e      	bls.n	800a526 <_svfiprintf_r+0x17e>
 800a488:	b1b0      	cbz	r0, 800a4b8 <_svfiprintf_r+0x110>
 800a48a:	9207      	str	r2, [sp, #28]
 800a48c:	e014      	b.n	800a4b8 <_svfiprintf_r+0x110>
 800a48e:	eba0 0308 	sub.w	r3, r0, r8
 800a492:	fa09 f303 	lsl.w	r3, r9, r3
 800a496:	4313      	orrs	r3, r2
 800a498:	9304      	str	r3, [sp, #16]
 800a49a:	46a2      	mov	sl, r4
 800a49c:	e7d2      	b.n	800a444 <_svfiprintf_r+0x9c>
 800a49e:	9b03      	ldr	r3, [sp, #12]
 800a4a0:	1d19      	adds	r1, r3, #4
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	9103      	str	r1, [sp, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	bfbb      	ittet	lt
 800a4aa:	425b      	neglt	r3, r3
 800a4ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a4b0:	9307      	strge	r3, [sp, #28]
 800a4b2:	9307      	strlt	r3, [sp, #28]
 800a4b4:	bfb8      	it	lt
 800a4b6:	9204      	strlt	r2, [sp, #16]
 800a4b8:	7823      	ldrb	r3, [r4, #0]
 800a4ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a4bc:	d10c      	bne.n	800a4d8 <_svfiprintf_r+0x130>
 800a4be:	7863      	ldrb	r3, [r4, #1]
 800a4c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c2:	d135      	bne.n	800a530 <_svfiprintf_r+0x188>
 800a4c4:	9b03      	ldr	r3, [sp, #12]
 800a4c6:	1d1a      	adds	r2, r3, #4
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	9203      	str	r2, [sp, #12]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	bfb8      	it	lt
 800a4d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4d4:	3402      	adds	r4, #2
 800a4d6:	9305      	str	r3, [sp, #20]
 800a4d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5a4 <_svfiprintf_r+0x1fc>
 800a4dc:	7821      	ldrb	r1, [r4, #0]
 800a4de:	2203      	movs	r2, #3
 800a4e0:	4650      	mov	r0, sl
 800a4e2:	f7f5 fe7d 	bl	80001e0 <memchr>
 800a4e6:	b140      	cbz	r0, 800a4fa <_svfiprintf_r+0x152>
 800a4e8:	2340      	movs	r3, #64	; 0x40
 800a4ea:	eba0 000a 	sub.w	r0, r0, sl
 800a4ee:	fa03 f000 	lsl.w	r0, r3, r0
 800a4f2:	9b04      	ldr	r3, [sp, #16]
 800a4f4:	4303      	orrs	r3, r0
 800a4f6:	3401      	adds	r4, #1
 800a4f8:	9304      	str	r3, [sp, #16]
 800a4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fe:	4826      	ldr	r0, [pc, #152]	; (800a598 <_svfiprintf_r+0x1f0>)
 800a500:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a504:	2206      	movs	r2, #6
 800a506:	f7f5 fe6b 	bl	80001e0 <memchr>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d038      	beq.n	800a580 <_svfiprintf_r+0x1d8>
 800a50e:	4b23      	ldr	r3, [pc, #140]	; (800a59c <_svfiprintf_r+0x1f4>)
 800a510:	bb1b      	cbnz	r3, 800a55a <_svfiprintf_r+0x1b2>
 800a512:	9b03      	ldr	r3, [sp, #12]
 800a514:	3307      	adds	r3, #7
 800a516:	f023 0307 	bic.w	r3, r3, #7
 800a51a:	3308      	adds	r3, #8
 800a51c:	9303      	str	r3, [sp, #12]
 800a51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a520:	4433      	add	r3, r6
 800a522:	9309      	str	r3, [sp, #36]	; 0x24
 800a524:	e767      	b.n	800a3f6 <_svfiprintf_r+0x4e>
 800a526:	fb0c 3202 	mla	r2, ip, r2, r3
 800a52a:	460c      	mov	r4, r1
 800a52c:	2001      	movs	r0, #1
 800a52e:	e7a5      	b.n	800a47c <_svfiprintf_r+0xd4>
 800a530:	2300      	movs	r3, #0
 800a532:	3401      	adds	r4, #1
 800a534:	9305      	str	r3, [sp, #20]
 800a536:	4619      	mov	r1, r3
 800a538:	f04f 0c0a 	mov.w	ip, #10
 800a53c:	4620      	mov	r0, r4
 800a53e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a542:	3a30      	subs	r2, #48	; 0x30
 800a544:	2a09      	cmp	r2, #9
 800a546:	d903      	bls.n	800a550 <_svfiprintf_r+0x1a8>
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d0c5      	beq.n	800a4d8 <_svfiprintf_r+0x130>
 800a54c:	9105      	str	r1, [sp, #20]
 800a54e:	e7c3      	b.n	800a4d8 <_svfiprintf_r+0x130>
 800a550:	fb0c 2101 	mla	r1, ip, r1, r2
 800a554:	4604      	mov	r4, r0
 800a556:	2301      	movs	r3, #1
 800a558:	e7f0      	b.n	800a53c <_svfiprintf_r+0x194>
 800a55a:	ab03      	add	r3, sp, #12
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	462a      	mov	r2, r5
 800a560:	4b0f      	ldr	r3, [pc, #60]	; (800a5a0 <_svfiprintf_r+0x1f8>)
 800a562:	a904      	add	r1, sp, #16
 800a564:	4638      	mov	r0, r7
 800a566:	f7fd fbbb 	bl	8007ce0 <_printf_float>
 800a56a:	1c42      	adds	r2, r0, #1
 800a56c:	4606      	mov	r6, r0
 800a56e:	d1d6      	bne.n	800a51e <_svfiprintf_r+0x176>
 800a570:	89ab      	ldrh	r3, [r5, #12]
 800a572:	065b      	lsls	r3, r3, #25
 800a574:	f53f af2c 	bmi.w	800a3d0 <_svfiprintf_r+0x28>
 800a578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a57a:	b01d      	add	sp, #116	; 0x74
 800a57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a580:	ab03      	add	r3, sp, #12
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	462a      	mov	r2, r5
 800a586:	4b06      	ldr	r3, [pc, #24]	; (800a5a0 <_svfiprintf_r+0x1f8>)
 800a588:	a904      	add	r1, sp, #16
 800a58a:	4638      	mov	r0, r7
 800a58c:	f7fd fe4c 	bl	8008228 <_printf_i>
 800a590:	e7eb      	b.n	800a56a <_svfiprintf_r+0x1c2>
 800a592:	bf00      	nop
 800a594:	0800b704 	.word	0x0800b704
 800a598:	0800b70e 	.word	0x0800b70e
 800a59c:	08007ce1 	.word	0x08007ce1
 800a5a0:	0800a2f1 	.word	0x0800a2f1
 800a5a4:	0800b70a 	.word	0x0800b70a

0800a5a8 <__sread>:
 800a5a8:	b510      	push	{r4, lr}
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b0:	f000 fa44 	bl	800aa3c <_read_r>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	bfab      	itete	ge
 800a5b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ba:	89a3      	ldrhlt	r3, [r4, #12]
 800a5bc:	181b      	addge	r3, r3, r0
 800a5be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5c2:	bfac      	ite	ge
 800a5c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5c6:	81a3      	strhlt	r3, [r4, #12]
 800a5c8:	bd10      	pop	{r4, pc}

0800a5ca <__swrite>:
 800a5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ce:	461f      	mov	r7, r3
 800a5d0:	898b      	ldrh	r3, [r1, #12]
 800a5d2:	05db      	lsls	r3, r3, #23
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	4616      	mov	r6, r2
 800a5da:	d505      	bpl.n	800a5e8 <__swrite+0x1e>
 800a5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f000 f864 	bl	800a6b0 <_lseek_r>
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5f2:	81a3      	strh	r3, [r4, #12]
 800a5f4:	4632      	mov	r2, r6
 800a5f6:	463b      	mov	r3, r7
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5fe:	f7fe ba37 	b.w	8008a70 <_write_r>

0800a602 <__sseek>:
 800a602:	b510      	push	{r4, lr}
 800a604:	460c      	mov	r4, r1
 800a606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60a:	f000 f851 	bl	800a6b0 <_lseek_r>
 800a60e:	1c43      	adds	r3, r0, #1
 800a610:	89a3      	ldrh	r3, [r4, #12]
 800a612:	bf15      	itete	ne
 800a614:	6560      	strne	r0, [r4, #84]	; 0x54
 800a616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a61a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a61e:	81a3      	strheq	r3, [r4, #12]
 800a620:	bf18      	it	ne
 800a622:	81a3      	strhne	r3, [r4, #12]
 800a624:	bd10      	pop	{r4, pc}

0800a626 <__sclose>:
 800a626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62a:	f000 b81f 	b.w	800a66c <_close_r>
	...

0800a630 <__assert_func>:
 800a630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a632:	4614      	mov	r4, r2
 800a634:	461a      	mov	r2, r3
 800a636:	4b09      	ldr	r3, [pc, #36]	; (800a65c <__assert_func+0x2c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4605      	mov	r5, r0
 800a63c:	68d8      	ldr	r0, [r3, #12]
 800a63e:	b14c      	cbz	r4, 800a654 <__assert_func+0x24>
 800a640:	4b07      	ldr	r3, [pc, #28]	; (800a660 <__assert_func+0x30>)
 800a642:	9100      	str	r1, [sp, #0]
 800a644:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a648:	4906      	ldr	r1, [pc, #24]	; (800a664 <__assert_func+0x34>)
 800a64a:	462b      	mov	r3, r5
 800a64c:	f000 f81e 	bl	800a68c <fiprintf>
 800a650:	f7fd f984 	bl	800795c <abort>
 800a654:	4b04      	ldr	r3, [pc, #16]	; (800a668 <__assert_func+0x38>)
 800a656:	461c      	mov	r4, r3
 800a658:	e7f3      	b.n	800a642 <__assert_func+0x12>
 800a65a:	bf00      	nop
 800a65c:	2000003c 	.word	0x2000003c
 800a660:	0800b715 	.word	0x0800b715
 800a664:	0800b722 	.word	0x0800b722
 800a668:	0800b750 	.word	0x0800b750

0800a66c <_close_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4d06      	ldr	r5, [pc, #24]	; (800a688 <_close_r+0x1c>)
 800a670:	2300      	movs	r3, #0
 800a672:	4604      	mov	r4, r0
 800a674:	4608      	mov	r0, r1
 800a676:	602b      	str	r3, [r5, #0]
 800a678:	f7f7 f989 	bl	800198e <_close>
 800a67c:	1c43      	adds	r3, r0, #1
 800a67e:	d102      	bne.n	800a686 <_close_r+0x1a>
 800a680:	682b      	ldr	r3, [r5, #0]
 800a682:	b103      	cbz	r3, 800a686 <_close_r+0x1a>
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	bd38      	pop	{r3, r4, r5, pc}
 800a688:	20000698 	.word	0x20000698

0800a68c <fiprintf>:
 800a68c:	b40e      	push	{r1, r2, r3}
 800a68e:	b503      	push	{r0, r1, lr}
 800a690:	4601      	mov	r1, r0
 800a692:	ab03      	add	r3, sp, #12
 800a694:	4805      	ldr	r0, [pc, #20]	; (800a6ac <fiprintf+0x20>)
 800a696:	f853 2b04 	ldr.w	r2, [r3], #4
 800a69a:	6800      	ldr	r0, [r0, #0]
 800a69c:	9301      	str	r3, [sp, #4]
 800a69e:	f000 f89d 	bl	800a7dc <_vfiprintf_r>
 800a6a2:	b002      	add	sp, #8
 800a6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6a8:	b003      	add	sp, #12
 800a6aa:	4770      	bx	lr
 800a6ac:	2000003c 	.word	0x2000003c

0800a6b0 <_lseek_r>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	4d07      	ldr	r5, [pc, #28]	; (800a6d0 <_lseek_r+0x20>)
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	4608      	mov	r0, r1
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	602a      	str	r2, [r5, #0]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f7f7 f98c 	bl	80019dc <_lseek>
 800a6c4:	1c43      	adds	r3, r0, #1
 800a6c6:	d102      	bne.n	800a6ce <_lseek_r+0x1e>
 800a6c8:	682b      	ldr	r3, [r5, #0]
 800a6ca:	b103      	cbz	r3, 800a6ce <_lseek_r+0x1e>
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	bd38      	pop	{r3, r4, r5, pc}
 800a6d0:	20000698 	.word	0x20000698

0800a6d4 <__ascii_mbtowc>:
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	b901      	cbnz	r1, 800a6da <__ascii_mbtowc+0x6>
 800a6d8:	a901      	add	r1, sp, #4
 800a6da:	b142      	cbz	r2, 800a6ee <__ascii_mbtowc+0x1a>
 800a6dc:	b14b      	cbz	r3, 800a6f2 <__ascii_mbtowc+0x1e>
 800a6de:	7813      	ldrb	r3, [r2, #0]
 800a6e0:	600b      	str	r3, [r1, #0]
 800a6e2:	7812      	ldrb	r2, [r2, #0]
 800a6e4:	1e10      	subs	r0, r2, #0
 800a6e6:	bf18      	it	ne
 800a6e8:	2001      	movne	r0, #1
 800a6ea:	b002      	add	sp, #8
 800a6ec:	4770      	bx	lr
 800a6ee:	4610      	mov	r0, r2
 800a6f0:	e7fb      	b.n	800a6ea <__ascii_mbtowc+0x16>
 800a6f2:	f06f 0001 	mvn.w	r0, #1
 800a6f6:	e7f8      	b.n	800a6ea <__ascii_mbtowc+0x16>

0800a6f8 <memmove>:
 800a6f8:	4288      	cmp	r0, r1
 800a6fa:	b510      	push	{r4, lr}
 800a6fc:	eb01 0402 	add.w	r4, r1, r2
 800a700:	d902      	bls.n	800a708 <memmove+0x10>
 800a702:	4284      	cmp	r4, r0
 800a704:	4623      	mov	r3, r4
 800a706:	d807      	bhi.n	800a718 <memmove+0x20>
 800a708:	1e43      	subs	r3, r0, #1
 800a70a:	42a1      	cmp	r1, r4
 800a70c:	d008      	beq.n	800a720 <memmove+0x28>
 800a70e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a712:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a716:	e7f8      	b.n	800a70a <memmove+0x12>
 800a718:	4402      	add	r2, r0
 800a71a:	4601      	mov	r1, r0
 800a71c:	428a      	cmp	r2, r1
 800a71e:	d100      	bne.n	800a722 <memmove+0x2a>
 800a720:	bd10      	pop	{r4, pc}
 800a722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a72a:	e7f7      	b.n	800a71c <memmove+0x24>

0800a72c <_realloc_r>:
 800a72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a730:	4680      	mov	r8, r0
 800a732:	4614      	mov	r4, r2
 800a734:	460e      	mov	r6, r1
 800a736:	b921      	cbnz	r1, 800a742 <_realloc_r+0x16>
 800a738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a73c:	4611      	mov	r1, r2
 800a73e:	f7fd b9bb 	b.w	8007ab8 <_malloc_r>
 800a742:	b92a      	cbnz	r2, 800a750 <_realloc_r+0x24>
 800a744:	f7fd f94c 	bl	80079e0 <_free_r>
 800a748:	4625      	mov	r5, r4
 800a74a:	4628      	mov	r0, r5
 800a74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a750:	f000 faba 	bl	800acc8 <_malloc_usable_size_r>
 800a754:	4284      	cmp	r4, r0
 800a756:	4607      	mov	r7, r0
 800a758:	d802      	bhi.n	800a760 <_realloc_r+0x34>
 800a75a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a75e:	d812      	bhi.n	800a786 <_realloc_r+0x5a>
 800a760:	4621      	mov	r1, r4
 800a762:	4640      	mov	r0, r8
 800a764:	f7fd f9a8 	bl	8007ab8 <_malloc_r>
 800a768:	4605      	mov	r5, r0
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d0ed      	beq.n	800a74a <_realloc_r+0x1e>
 800a76e:	42bc      	cmp	r4, r7
 800a770:	4622      	mov	r2, r4
 800a772:	4631      	mov	r1, r6
 800a774:	bf28      	it	cs
 800a776:	463a      	movcs	r2, r7
 800a778:	f7ff fa05 	bl	8009b86 <memcpy>
 800a77c:	4631      	mov	r1, r6
 800a77e:	4640      	mov	r0, r8
 800a780:	f7fd f92e 	bl	80079e0 <_free_r>
 800a784:	e7e1      	b.n	800a74a <_realloc_r+0x1e>
 800a786:	4635      	mov	r5, r6
 800a788:	e7df      	b.n	800a74a <_realloc_r+0x1e>

0800a78a <__sfputc_r>:
 800a78a:	6893      	ldr	r3, [r2, #8]
 800a78c:	3b01      	subs	r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	b410      	push	{r4}
 800a792:	6093      	str	r3, [r2, #8]
 800a794:	da08      	bge.n	800a7a8 <__sfputc_r+0x1e>
 800a796:	6994      	ldr	r4, [r2, #24]
 800a798:	42a3      	cmp	r3, r4
 800a79a:	db01      	blt.n	800a7a0 <__sfputc_r+0x16>
 800a79c:	290a      	cmp	r1, #10
 800a79e:	d103      	bne.n	800a7a8 <__sfputc_r+0x1e>
 800a7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a4:	f000 b95c 	b.w	800aa60 <__swbuf_r>
 800a7a8:	6813      	ldr	r3, [r2, #0]
 800a7aa:	1c58      	adds	r0, r3, #1
 800a7ac:	6010      	str	r0, [r2, #0]
 800a7ae:	7019      	strb	r1, [r3, #0]
 800a7b0:	4608      	mov	r0, r1
 800a7b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <__sfputs_r>:
 800a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	460f      	mov	r7, r1
 800a7be:	4614      	mov	r4, r2
 800a7c0:	18d5      	adds	r5, r2, r3
 800a7c2:	42ac      	cmp	r4, r5
 800a7c4:	d101      	bne.n	800a7ca <__sfputs_r+0x12>
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	e007      	b.n	800a7da <__sfputs_r+0x22>
 800a7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ce:	463a      	mov	r2, r7
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	f7ff ffda 	bl	800a78a <__sfputc_r>
 800a7d6:	1c43      	adds	r3, r0, #1
 800a7d8:	d1f3      	bne.n	800a7c2 <__sfputs_r+0xa>
 800a7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7dc <_vfiprintf_r>:
 800a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e0:	460d      	mov	r5, r1
 800a7e2:	b09d      	sub	sp, #116	; 0x74
 800a7e4:	4614      	mov	r4, r2
 800a7e6:	4698      	mov	r8, r3
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	b118      	cbz	r0, 800a7f4 <_vfiprintf_r+0x18>
 800a7ec:	6983      	ldr	r3, [r0, #24]
 800a7ee:	b90b      	cbnz	r3, 800a7f4 <_vfiprintf_r+0x18>
 800a7f0:	f7ff f924 	bl	8009a3c <__sinit>
 800a7f4:	4b89      	ldr	r3, [pc, #548]	; (800aa1c <_vfiprintf_r+0x240>)
 800a7f6:	429d      	cmp	r5, r3
 800a7f8:	d11b      	bne.n	800a832 <_vfiprintf_r+0x56>
 800a7fa:	6875      	ldr	r5, [r6, #4]
 800a7fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7fe:	07d9      	lsls	r1, r3, #31
 800a800:	d405      	bmi.n	800a80e <_vfiprintf_r+0x32>
 800a802:	89ab      	ldrh	r3, [r5, #12]
 800a804:	059a      	lsls	r2, r3, #22
 800a806:	d402      	bmi.n	800a80e <_vfiprintf_r+0x32>
 800a808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a80a:	f7ff f9ba 	bl	8009b82 <__retarget_lock_acquire_recursive>
 800a80e:	89ab      	ldrh	r3, [r5, #12]
 800a810:	071b      	lsls	r3, r3, #28
 800a812:	d501      	bpl.n	800a818 <_vfiprintf_r+0x3c>
 800a814:	692b      	ldr	r3, [r5, #16]
 800a816:	b9eb      	cbnz	r3, 800a854 <_vfiprintf_r+0x78>
 800a818:	4629      	mov	r1, r5
 800a81a:	4630      	mov	r0, r6
 800a81c:	f000 f980 	bl	800ab20 <__swsetup_r>
 800a820:	b1c0      	cbz	r0, 800a854 <_vfiprintf_r+0x78>
 800a822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a824:	07dc      	lsls	r4, r3, #31
 800a826:	d50e      	bpl.n	800a846 <_vfiprintf_r+0x6a>
 800a828:	f04f 30ff 	mov.w	r0, #4294967295
 800a82c:	b01d      	add	sp, #116	; 0x74
 800a82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a832:	4b7b      	ldr	r3, [pc, #492]	; (800aa20 <_vfiprintf_r+0x244>)
 800a834:	429d      	cmp	r5, r3
 800a836:	d101      	bne.n	800a83c <_vfiprintf_r+0x60>
 800a838:	68b5      	ldr	r5, [r6, #8]
 800a83a:	e7df      	b.n	800a7fc <_vfiprintf_r+0x20>
 800a83c:	4b79      	ldr	r3, [pc, #484]	; (800aa24 <_vfiprintf_r+0x248>)
 800a83e:	429d      	cmp	r5, r3
 800a840:	bf08      	it	eq
 800a842:	68f5      	ldreq	r5, [r6, #12]
 800a844:	e7da      	b.n	800a7fc <_vfiprintf_r+0x20>
 800a846:	89ab      	ldrh	r3, [r5, #12]
 800a848:	0598      	lsls	r0, r3, #22
 800a84a:	d4ed      	bmi.n	800a828 <_vfiprintf_r+0x4c>
 800a84c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a84e:	f7ff f999 	bl	8009b84 <__retarget_lock_release_recursive>
 800a852:	e7e9      	b.n	800a828 <_vfiprintf_r+0x4c>
 800a854:	2300      	movs	r3, #0
 800a856:	9309      	str	r3, [sp, #36]	; 0x24
 800a858:	2320      	movs	r3, #32
 800a85a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a85e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a862:	2330      	movs	r3, #48	; 0x30
 800a864:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa28 <_vfiprintf_r+0x24c>
 800a868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a86c:	f04f 0901 	mov.w	r9, #1
 800a870:	4623      	mov	r3, r4
 800a872:	469a      	mov	sl, r3
 800a874:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a878:	b10a      	cbz	r2, 800a87e <_vfiprintf_r+0xa2>
 800a87a:	2a25      	cmp	r2, #37	; 0x25
 800a87c:	d1f9      	bne.n	800a872 <_vfiprintf_r+0x96>
 800a87e:	ebba 0b04 	subs.w	fp, sl, r4
 800a882:	d00b      	beq.n	800a89c <_vfiprintf_r+0xc0>
 800a884:	465b      	mov	r3, fp
 800a886:	4622      	mov	r2, r4
 800a888:	4629      	mov	r1, r5
 800a88a:	4630      	mov	r0, r6
 800a88c:	f7ff ff94 	bl	800a7b8 <__sfputs_r>
 800a890:	3001      	adds	r0, #1
 800a892:	f000 80aa 	beq.w	800a9ea <_vfiprintf_r+0x20e>
 800a896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a898:	445a      	add	r2, fp
 800a89a:	9209      	str	r2, [sp, #36]	; 0x24
 800a89c:	f89a 3000 	ldrb.w	r3, [sl]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 80a2 	beq.w	800a9ea <_vfiprintf_r+0x20e>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8b0:	f10a 0a01 	add.w	sl, sl, #1
 800a8b4:	9304      	str	r3, [sp, #16]
 800a8b6:	9307      	str	r3, [sp, #28]
 800a8b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a8be:	4654      	mov	r4, sl
 800a8c0:	2205      	movs	r2, #5
 800a8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c6:	4858      	ldr	r0, [pc, #352]	; (800aa28 <_vfiprintf_r+0x24c>)
 800a8c8:	f7f5 fc8a 	bl	80001e0 <memchr>
 800a8cc:	9a04      	ldr	r2, [sp, #16]
 800a8ce:	b9d8      	cbnz	r0, 800a908 <_vfiprintf_r+0x12c>
 800a8d0:	06d1      	lsls	r1, r2, #27
 800a8d2:	bf44      	itt	mi
 800a8d4:	2320      	movmi	r3, #32
 800a8d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8da:	0713      	lsls	r3, r2, #28
 800a8dc:	bf44      	itt	mi
 800a8de:	232b      	movmi	r3, #43	; 0x2b
 800a8e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ea:	d015      	beq.n	800a918 <_vfiprintf_r+0x13c>
 800a8ec:	9a07      	ldr	r2, [sp, #28]
 800a8ee:	4654      	mov	r4, sl
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	f04f 0c0a 	mov.w	ip, #10
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8fc:	3b30      	subs	r3, #48	; 0x30
 800a8fe:	2b09      	cmp	r3, #9
 800a900:	d94e      	bls.n	800a9a0 <_vfiprintf_r+0x1c4>
 800a902:	b1b0      	cbz	r0, 800a932 <_vfiprintf_r+0x156>
 800a904:	9207      	str	r2, [sp, #28]
 800a906:	e014      	b.n	800a932 <_vfiprintf_r+0x156>
 800a908:	eba0 0308 	sub.w	r3, r0, r8
 800a90c:	fa09 f303 	lsl.w	r3, r9, r3
 800a910:	4313      	orrs	r3, r2
 800a912:	9304      	str	r3, [sp, #16]
 800a914:	46a2      	mov	sl, r4
 800a916:	e7d2      	b.n	800a8be <_vfiprintf_r+0xe2>
 800a918:	9b03      	ldr	r3, [sp, #12]
 800a91a:	1d19      	adds	r1, r3, #4
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	9103      	str	r1, [sp, #12]
 800a920:	2b00      	cmp	r3, #0
 800a922:	bfbb      	ittet	lt
 800a924:	425b      	neglt	r3, r3
 800a926:	f042 0202 	orrlt.w	r2, r2, #2
 800a92a:	9307      	strge	r3, [sp, #28]
 800a92c:	9307      	strlt	r3, [sp, #28]
 800a92e:	bfb8      	it	lt
 800a930:	9204      	strlt	r2, [sp, #16]
 800a932:	7823      	ldrb	r3, [r4, #0]
 800a934:	2b2e      	cmp	r3, #46	; 0x2e
 800a936:	d10c      	bne.n	800a952 <_vfiprintf_r+0x176>
 800a938:	7863      	ldrb	r3, [r4, #1]
 800a93a:	2b2a      	cmp	r3, #42	; 0x2a
 800a93c:	d135      	bne.n	800a9aa <_vfiprintf_r+0x1ce>
 800a93e:	9b03      	ldr	r3, [sp, #12]
 800a940:	1d1a      	adds	r2, r3, #4
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	9203      	str	r2, [sp, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	bfb8      	it	lt
 800a94a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a94e:	3402      	adds	r4, #2
 800a950:	9305      	str	r3, [sp, #20]
 800a952:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa38 <_vfiprintf_r+0x25c>
 800a956:	7821      	ldrb	r1, [r4, #0]
 800a958:	2203      	movs	r2, #3
 800a95a:	4650      	mov	r0, sl
 800a95c:	f7f5 fc40 	bl	80001e0 <memchr>
 800a960:	b140      	cbz	r0, 800a974 <_vfiprintf_r+0x198>
 800a962:	2340      	movs	r3, #64	; 0x40
 800a964:	eba0 000a 	sub.w	r0, r0, sl
 800a968:	fa03 f000 	lsl.w	r0, r3, r0
 800a96c:	9b04      	ldr	r3, [sp, #16]
 800a96e:	4303      	orrs	r3, r0
 800a970:	3401      	adds	r4, #1
 800a972:	9304      	str	r3, [sp, #16]
 800a974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a978:	482c      	ldr	r0, [pc, #176]	; (800aa2c <_vfiprintf_r+0x250>)
 800a97a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a97e:	2206      	movs	r2, #6
 800a980:	f7f5 fc2e 	bl	80001e0 <memchr>
 800a984:	2800      	cmp	r0, #0
 800a986:	d03f      	beq.n	800aa08 <_vfiprintf_r+0x22c>
 800a988:	4b29      	ldr	r3, [pc, #164]	; (800aa30 <_vfiprintf_r+0x254>)
 800a98a:	bb1b      	cbnz	r3, 800a9d4 <_vfiprintf_r+0x1f8>
 800a98c:	9b03      	ldr	r3, [sp, #12]
 800a98e:	3307      	adds	r3, #7
 800a990:	f023 0307 	bic.w	r3, r3, #7
 800a994:	3308      	adds	r3, #8
 800a996:	9303      	str	r3, [sp, #12]
 800a998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a99a:	443b      	add	r3, r7
 800a99c:	9309      	str	r3, [sp, #36]	; 0x24
 800a99e:	e767      	b.n	800a870 <_vfiprintf_r+0x94>
 800a9a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	e7a5      	b.n	800a8f6 <_vfiprintf_r+0x11a>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	3401      	adds	r4, #1
 800a9ae:	9305      	str	r3, [sp, #20]
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	f04f 0c0a 	mov.w	ip, #10
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9bc:	3a30      	subs	r2, #48	; 0x30
 800a9be:	2a09      	cmp	r2, #9
 800a9c0:	d903      	bls.n	800a9ca <_vfiprintf_r+0x1ee>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d0c5      	beq.n	800a952 <_vfiprintf_r+0x176>
 800a9c6:	9105      	str	r1, [sp, #20]
 800a9c8:	e7c3      	b.n	800a952 <_vfiprintf_r+0x176>
 800a9ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e7f0      	b.n	800a9b6 <_vfiprintf_r+0x1da>
 800a9d4:	ab03      	add	r3, sp, #12
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	462a      	mov	r2, r5
 800a9da:	4b16      	ldr	r3, [pc, #88]	; (800aa34 <_vfiprintf_r+0x258>)
 800a9dc:	a904      	add	r1, sp, #16
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f7fd f97e 	bl	8007ce0 <_printf_float>
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	1c78      	adds	r0, r7, #1
 800a9e8:	d1d6      	bne.n	800a998 <_vfiprintf_r+0x1bc>
 800a9ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ec:	07d9      	lsls	r1, r3, #31
 800a9ee:	d405      	bmi.n	800a9fc <_vfiprintf_r+0x220>
 800a9f0:	89ab      	ldrh	r3, [r5, #12]
 800a9f2:	059a      	lsls	r2, r3, #22
 800a9f4:	d402      	bmi.n	800a9fc <_vfiprintf_r+0x220>
 800a9f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9f8:	f7ff f8c4 	bl	8009b84 <__retarget_lock_release_recursive>
 800a9fc:	89ab      	ldrh	r3, [r5, #12]
 800a9fe:	065b      	lsls	r3, r3, #25
 800aa00:	f53f af12 	bmi.w	800a828 <_vfiprintf_r+0x4c>
 800aa04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa06:	e711      	b.n	800a82c <_vfiprintf_r+0x50>
 800aa08:	ab03      	add	r3, sp, #12
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	462a      	mov	r2, r5
 800aa0e:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <_vfiprintf_r+0x258>)
 800aa10:	a904      	add	r1, sp, #16
 800aa12:	4630      	mov	r0, r6
 800aa14:	f7fd fc08 	bl	8008228 <_printf_i>
 800aa18:	e7e4      	b.n	800a9e4 <_vfiprintf_r+0x208>
 800aa1a:	bf00      	nop
 800aa1c:	0800b568 	.word	0x0800b568
 800aa20:	0800b588 	.word	0x0800b588
 800aa24:	0800b548 	.word	0x0800b548
 800aa28:	0800b704 	.word	0x0800b704
 800aa2c:	0800b70e 	.word	0x0800b70e
 800aa30:	08007ce1 	.word	0x08007ce1
 800aa34:	0800a7b9 	.word	0x0800a7b9
 800aa38:	0800b70a 	.word	0x0800b70a

0800aa3c <_read_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	4d07      	ldr	r5, [pc, #28]	; (800aa5c <_read_r+0x20>)
 800aa40:	4604      	mov	r4, r0
 800aa42:	4608      	mov	r0, r1
 800aa44:	4611      	mov	r1, r2
 800aa46:	2200      	movs	r2, #0
 800aa48:	602a      	str	r2, [r5, #0]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	f7f6 ff66 	bl	800191c <_read>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d102      	bne.n	800aa5a <_read_r+0x1e>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	b103      	cbz	r3, 800aa5a <_read_r+0x1e>
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
 800aa5c:	20000698 	.word	0x20000698

0800aa60 <__swbuf_r>:
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa62:	460e      	mov	r6, r1
 800aa64:	4614      	mov	r4, r2
 800aa66:	4605      	mov	r5, r0
 800aa68:	b118      	cbz	r0, 800aa72 <__swbuf_r+0x12>
 800aa6a:	6983      	ldr	r3, [r0, #24]
 800aa6c:	b90b      	cbnz	r3, 800aa72 <__swbuf_r+0x12>
 800aa6e:	f7fe ffe5 	bl	8009a3c <__sinit>
 800aa72:	4b21      	ldr	r3, [pc, #132]	; (800aaf8 <__swbuf_r+0x98>)
 800aa74:	429c      	cmp	r4, r3
 800aa76:	d12b      	bne.n	800aad0 <__swbuf_r+0x70>
 800aa78:	686c      	ldr	r4, [r5, #4]
 800aa7a:	69a3      	ldr	r3, [r4, #24]
 800aa7c:	60a3      	str	r3, [r4, #8]
 800aa7e:	89a3      	ldrh	r3, [r4, #12]
 800aa80:	071a      	lsls	r2, r3, #28
 800aa82:	d52f      	bpl.n	800aae4 <__swbuf_r+0x84>
 800aa84:	6923      	ldr	r3, [r4, #16]
 800aa86:	b36b      	cbz	r3, 800aae4 <__swbuf_r+0x84>
 800aa88:	6923      	ldr	r3, [r4, #16]
 800aa8a:	6820      	ldr	r0, [r4, #0]
 800aa8c:	1ac0      	subs	r0, r0, r3
 800aa8e:	6963      	ldr	r3, [r4, #20]
 800aa90:	b2f6      	uxtb	r6, r6
 800aa92:	4283      	cmp	r3, r0
 800aa94:	4637      	mov	r7, r6
 800aa96:	dc04      	bgt.n	800aaa2 <__swbuf_r+0x42>
 800aa98:	4621      	mov	r1, r4
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	f7fe fefc 	bl	8009898 <_fflush_r>
 800aaa0:	bb30      	cbnz	r0, 800aaf0 <__swbuf_r+0x90>
 800aaa2:	68a3      	ldr	r3, [r4, #8]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	60a3      	str	r3, [r4, #8]
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	1c5a      	adds	r2, r3, #1
 800aaac:	6022      	str	r2, [r4, #0]
 800aaae:	701e      	strb	r6, [r3, #0]
 800aab0:	6963      	ldr	r3, [r4, #20]
 800aab2:	3001      	adds	r0, #1
 800aab4:	4283      	cmp	r3, r0
 800aab6:	d004      	beq.n	800aac2 <__swbuf_r+0x62>
 800aab8:	89a3      	ldrh	r3, [r4, #12]
 800aaba:	07db      	lsls	r3, r3, #31
 800aabc:	d506      	bpl.n	800aacc <__swbuf_r+0x6c>
 800aabe:	2e0a      	cmp	r6, #10
 800aac0:	d104      	bne.n	800aacc <__swbuf_r+0x6c>
 800aac2:	4621      	mov	r1, r4
 800aac4:	4628      	mov	r0, r5
 800aac6:	f7fe fee7 	bl	8009898 <_fflush_r>
 800aaca:	b988      	cbnz	r0, 800aaf0 <__swbuf_r+0x90>
 800aacc:	4638      	mov	r0, r7
 800aace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aad0:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <__swbuf_r+0x9c>)
 800aad2:	429c      	cmp	r4, r3
 800aad4:	d101      	bne.n	800aada <__swbuf_r+0x7a>
 800aad6:	68ac      	ldr	r4, [r5, #8]
 800aad8:	e7cf      	b.n	800aa7a <__swbuf_r+0x1a>
 800aada:	4b09      	ldr	r3, [pc, #36]	; (800ab00 <__swbuf_r+0xa0>)
 800aadc:	429c      	cmp	r4, r3
 800aade:	bf08      	it	eq
 800aae0:	68ec      	ldreq	r4, [r5, #12]
 800aae2:	e7ca      	b.n	800aa7a <__swbuf_r+0x1a>
 800aae4:	4621      	mov	r1, r4
 800aae6:	4628      	mov	r0, r5
 800aae8:	f000 f81a 	bl	800ab20 <__swsetup_r>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d0cb      	beq.n	800aa88 <__swbuf_r+0x28>
 800aaf0:	f04f 37ff 	mov.w	r7, #4294967295
 800aaf4:	e7ea      	b.n	800aacc <__swbuf_r+0x6c>
 800aaf6:	bf00      	nop
 800aaf8:	0800b568 	.word	0x0800b568
 800aafc:	0800b588 	.word	0x0800b588
 800ab00:	0800b548 	.word	0x0800b548

0800ab04 <__ascii_wctomb>:
 800ab04:	b149      	cbz	r1, 800ab1a <__ascii_wctomb+0x16>
 800ab06:	2aff      	cmp	r2, #255	; 0xff
 800ab08:	bf85      	ittet	hi
 800ab0a:	238a      	movhi	r3, #138	; 0x8a
 800ab0c:	6003      	strhi	r3, [r0, #0]
 800ab0e:	700a      	strbls	r2, [r1, #0]
 800ab10:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab14:	bf98      	it	ls
 800ab16:	2001      	movls	r0, #1
 800ab18:	4770      	bx	lr
 800ab1a:	4608      	mov	r0, r1
 800ab1c:	4770      	bx	lr
	...

0800ab20 <__swsetup_r>:
 800ab20:	4b32      	ldr	r3, [pc, #200]	; (800abec <__swsetup_r+0xcc>)
 800ab22:	b570      	push	{r4, r5, r6, lr}
 800ab24:	681d      	ldr	r5, [r3, #0]
 800ab26:	4606      	mov	r6, r0
 800ab28:	460c      	mov	r4, r1
 800ab2a:	b125      	cbz	r5, 800ab36 <__swsetup_r+0x16>
 800ab2c:	69ab      	ldr	r3, [r5, #24]
 800ab2e:	b913      	cbnz	r3, 800ab36 <__swsetup_r+0x16>
 800ab30:	4628      	mov	r0, r5
 800ab32:	f7fe ff83 	bl	8009a3c <__sinit>
 800ab36:	4b2e      	ldr	r3, [pc, #184]	; (800abf0 <__swsetup_r+0xd0>)
 800ab38:	429c      	cmp	r4, r3
 800ab3a:	d10f      	bne.n	800ab5c <__swsetup_r+0x3c>
 800ab3c:	686c      	ldr	r4, [r5, #4]
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab44:	0719      	lsls	r1, r3, #28
 800ab46:	d42c      	bmi.n	800aba2 <__swsetup_r+0x82>
 800ab48:	06dd      	lsls	r5, r3, #27
 800ab4a:	d411      	bmi.n	800ab70 <__swsetup_r+0x50>
 800ab4c:	2309      	movs	r3, #9
 800ab4e:	6033      	str	r3, [r6, #0]
 800ab50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab54:	81a3      	strh	r3, [r4, #12]
 800ab56:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5a:	e03e      	b.n	800abda <__swsetup_r+0xba>
 800ab5c:	4b25      	ldr	r3, [pc, #148]	; (800abf4 <__swsetup_r+0xd4>)
 800ab5e:	429c      	cmp	r4, r3
 800ab60:	d101      	bne.n	800ab66 <__swsetup_r+0x46>
 800ab62:	68ac      	ldr	r4, [r5, #8]
 800ab64:	e7eb      	b.n	800ab3e <__swsetup_r+0x1e>
 800ab66:	4b24      	ldr	r3, [pc, #144]	; (800abf8 <__swsetup_r+0xd8>)
 800ab68:	429c      	cmp	r4, r3
 800ab6a:	bf08      	it	eq
 800ab6c:	68ec      	ldreq	r4, [r5, #12]
 800ab6e:	e7e6      	b.n	800ab3e <__swsetup_r+0x1e>
 800ab70:	0758      	lsls	r0, r3, #29
 800ab72:	d512      	bpl.n	800ab9a <__swsetup_r+0x7a>
 800ab74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab76:	b141      	cbz	r1, 800ab8a <__swsetup_r+0x6a>
 800ab78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab7c:	4299      	cmp	r1, r3
 800ab7e:	d002      	beq.n	800ab86 <__swsetup_r+0x66>
 800ab80:	4630      	mov	r0, r6
 800ab82:	f7fc ff2d 	bl	80079e0 <_free_r>
 800ab86:	2300      	movs	r3, #0
 800ab88:	6363      	str	r3, [r4, #52]	; 0x34
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab90:	81a3      	strh	r3, [r4, #12]
 800ab92:	2300      	movs	r3, #0
 800ab94:	6063      	str	r3, [r4, #4]
 800ab96:	6923      	ldr	r3, [r4, #16]
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	f043 0308 	orr.w	r3, r3, #8
 800aba0:	81a3      	strh	r3, [r4, #12]
 800aba2:	6923      	ldr	r3, [r4, #16]
 800aba4:	b94b      	cbnz	r3, 800abba <__swsetup_r+0x9a>
 800aba6:	89a3      	ldrh	r3, [r4, #12]
 800aba8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abb0:	d003      	beq.n	800abba <__swsetup_r+0x9a>
 800abb2:	4621      	mov	r1, r4
 800abb4:	4630      	mov	r0, r6
 800abb6:	f000 f847 	bl	800ac48 <__smakebuf_r>
 800abba:	89a0      	ldrh	r0, [r4, #12]
 800abbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abc0:	f010 0301 	ands.w	r3, r0, #1
 800abc4:	d00a      	beq.n	800abdc <__swsetup_r+0xbc>
 800abc6:	2300      	movs	r3, #0
 800abc8:	60a3      	str	r3, [r4, #8]
 800abca:	6963      	ldr	r3, [r4, #20]
 800abcc:	425b      	negs	r3, r3
 800abce:	61a3      	str	r3, [r4, #24]
 800abd0:	6923      	ldr	r3, [r4, #16]
 800abd2:	b943      	cbnz	r3, 800abe6 <__swsetup_r+0xc6>
 800abd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abd8:	d1ba      	bne.n	800ab50 <__swsetup_r+0x30>
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	0781      	lsls	r1, r0, #30
 800abde:	bf58      	it	pl
 800abe0:	6963      	ldrpl	r3, [r4, #20]
 800abe2:	60a3      	str	r3, [r4, #8]
 800abe4:	e7f4      	b.n	800abd0 <__swsetup_r+0xb0>
 800abe6:	2000      	movs	r0, #0
 800abe8:	e7f7      	b.n	800abda <__swsetup_r+0xba>
 800abea:	bf00      	nop
 800abec:	2000003c 	.word	0x2000003c
 800abf0:	0800b568 	.word	0x0800b568
 800abf4:	0800b588 	.word	0x0800b588
 800abf8:	0800b548 	.word	0x0800b548

0800abfc <__swhatbuf_r>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	460e      	mov	r6, r1
 800ac00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac04:	2900      	cmp	r1, #0
 800ac06:	b096      	sub	sp, #88	; 0x58
 800ac08:	4614      	mov	r4, r2
 800ac0a:	461d      	mov	r5, r3
 800ac0c:	da08      	bge.n	800ac20 <__swhatbuf_r+0x24>
 800ac0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	602a      	str	r2, [r5, #0]
 800ac16:	061a      	lsls	r2, r3, #24
 800ac18:	d410      	bmi.n	800ac3c <__swhatbuf_r+0x40>
 800ac1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac1e:	e00e      	b.n	800ac3e <__swhatbuf_r+0x42>
 800ac20:	466a      	mov	r2, sp
 800ac22:	f000 f859 	bl	800acd8 <_fstat_r>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	dbf1      	blt.n	800ac0e <__swhatbuf_r+0x12>
 800ac2a:	9a01      	ldr	r2, [sp, #4]
 800ac2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac34:	425a      	negs	r2, r3
 800ac36:	415a      	adcs	r2, r3
 800ac38:	602a      	str	r2, [r5, #0]
 800ac3a:	e7ee      	b.n	800ac1a <__swhatbuf_r+0x1e>
 800ac3c:	2340      	movs	r3, #64	; 0x40
 800ac3e:	2000      	movs	r0, #0
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	b016      	add	sp, #88	; 0x58
 800ac44:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac48 <__smakebuf_r>:
 800ac48:	898b      	ldrh	r3, [r1, #12]
 800ac4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac4c:	079d      	lsls	r5, r3, #30
 800ac4e:	4606      	mov	r6, r0
 800ac50:	460c      	mov	r4, r1
 800ac52:	d507      	bpl.n	800ac64 <__smakebuf_r+0x1c>
 800ac54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	6123      	str	r3, [r4, #16]
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	6163      	str	r3, [r4, #20]
 800ac60:	b002      	add	sp, #8
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	ab01      	add	r3, sp, #4
 800ac66:	466a      	mov	r2, sp
 800ac68:	f7ff ffc8 	bl	800abfc <__swhatbuf_r>
 800ac6c:	9900      	ldr	r1, [sp, #0]
 800ac6e:	4605      	mov	r5, r0
 800ac70:	4630      	mov	r0, r6
 800ac72:	f7fc ff21 	bl	8007ab8 <_malloc_r>
 800ac76:	b948      	cbnz	r0, 800ac8c <__smakebuf_r+0x44>
 800ac78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac7c:	059a      	lsls	r2, r3, #22
 800ac7e:	d4ef      	bmi.n	800ac60 <__smakebuf_r+0x18>
 800ac80:	f023 0303 	bic.w	r3, r3, #3
 800ac84:	f043 0302 	orr.w	r3, r3, #2
 800ac88:	81a3      	strh	r3, [r4, #12]
 800ac8a:	e7e3      	b.n	800ac54 <__smakebuf_r+0xc>
 800ac8c:	4b0d      	ldr	r3, [pc, #52]	; (800acc4 <__smakebuf_r+0x7c>)
 800ac8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	6020      	str	r0, [r4, #0]
 800ac94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac98:	81a3      	strh	r3, [r4, #12]
 800ac9a:	9b00      	ldr	r3, [sp, #0]
 800ac9c:	6163      	str	r3, [r4, #20]
 800ac9e:	9b01      	ldr	r3, [sp, #4]
 800aca0:	6120      	str	r0, [r4, #16]
 800aca2:	b15b      	cbz	r3, 800acbc <__smakebuf_r+0x74>
 800aca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aca8:	4630      	mov	r0, r6
 800acaa:	f000 f827 	bl	800acfc <_isatty_r>
 800acae:	b128      	cbz	r0, 800acbc <__smakebuf_r+0x74>
 800acb0:	89a3      	ldrh	r3, [r4, #12]
 800acb2:	f023 0303 	bic.w	r3, r3, #3
 800acb6:	f043 0301 	orr.w	r3, r3, #1
 800acba:	81a3      	strh	r3, [r4, #12]
 800acbc:	89a0      	ldrh	r0, [r4, #12]
 800acbe:	4305      	orrs	r5, r0
 800acc0:	81a5      	strh	r5, [r4, #12]
 800acc2:	e7cd      	b.n	800ac60 <__smakebuf_r+0x18>
 800acc4:	080099d5 	.word	0x080099d5

0800acc8 <_malloc_usable_size_r>:
 800acc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800accc:	1f18      	subs	r0, r3, #4
 800acce:	2b00      	cmp	r3, #0
 800acd0:	bfbc      	itt	lt
 800acd2:	580b      	ldrlt	r3, [r1, r0]
 800acd4:	18c0      	addlt	r0, r0, r3
 800acd6:	4770      	bx	lr

0800acd8 <_fstat_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4d07      	ldr	r5, [pc, #28]	; (800acf8 <_fstat_r+0x20>)
 800acdc:	2300      	movs	r3, #0
 800acde:	4604      	mov	r4, r0
 800ace0:	4608      	mov	r0, r1
 800ace2:	4611      	mov	r1, r2
 800ace4:	602b      	str	r3, [r5, #0]
 800ace6:	f7f6 fe5e 	bl	80019a6 <_fstat>
 800acea:	1c43      	adds	r3, r0, #1
 800acec:	d102      	bne.n	800acf4 <_fstat_r+0x1c>
 800acee:	682b      	ldr	r3, [r5, #0]
 800acf0:	b103      	cbz	r3, 800acf4 <_fstat_r+0x1c>
 800acf2:	6023      	str	r3, [r4, #0]
 800acf4:	bd38      	pop	{r3, r4, r5, pc}
 800acf6:	bf00      	nop
 800acf8:	20000698 	.word	0x20000698

0800acfc <_isatty_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4d06      	ldr	r5, [pc, #24]	; (800ad18 <_isatty_r+0x1c>)
 800ad00:	2300      	movs	r3, #0
 800ad02:	4604      	mov	r4, r0
 800ad04:	4608      	mov	r0, r1
 800ad06:	602b      	str	r3, [r5, #0]
 800ad08:	f7f6 fe5d 	bl	80019c6 <_isatty>
 800ad0c:	1c43      	adds	r3, r0, #1
 800ad0e:	d102      	bne.n	800ad16 <_isatty_r+0x1a>
 800ad10:	682b      	ldr	r3, [r5, #0]
 800ad12:	b103      	cbz	r3, 800ad16 <_isatty_r+0x1a>
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	bd38      	pop	{r3, r4, r5, pc}
 800ad18:	20000698 	.word	0x20000698

0800ad1c <_init>:
 800ad1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1e:	bf00      	nop
 800ad20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad22:	bc08      	pop	{r3}
 800ad24:	469e      	mov	lr, r3
 800ad26:	4770      	bx	lr

0800ad28 <_fini>:
 800ad28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2a:	bf00      	nop
 800ad2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad2e:	bc08      	pop	{r3}
 800ad30:	469e      	mov	lr, r3
 800ad32:	4770      	bx	lr
