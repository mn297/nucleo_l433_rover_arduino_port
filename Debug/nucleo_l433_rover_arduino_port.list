
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b2c  0800a108  0800a108  0001a108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac34  0800ac34  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac34  0800ac34  0001ac34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac3c  0800ac3c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ac3c  0800ac3c  0001ac3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac44  0800ac44  0001ac44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800ac48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  20000210  0800ae54  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  0800ae54  0002062c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186ed  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003573  00000000  00000000  00038929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0003bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  0003d218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279f2  00000000  00000000  0003e438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174eb  00000000  00000000  00065e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dde31  00000000  00000000  0007d315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b146  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063e4  00000000  00000000  0015b198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0ec 	.word	0x0800a0ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800a0ec 	.word	0x0800a0ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB8   ------> S_TIM16_CH1
*/
void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b52      	ldr	r3, [pc, #328]	; (800100c <MX_GPIO_Init+0x160>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a51      	ldr	r2, [pc, #324]	; (800100c <MX_GPIO_Init+0x160>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b4f      	ldr	r3, [pc, #316]	; (800100c <MX_GPIO_Init+0x160>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	4b4c      	ldr	r3, [pc, #304]	; (800100c <MX_GPIO_Init+0x160>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a4b      	ldr	r2, [pc, #300]	; (800100c <MX_GPIO_Init+0x160>)
 8000ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b49      	ldr	r3, [pc, #292]	; (800100c <MX_GPIO_Init+0x160>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b46      	ldr	r3, [pc, #280]	; (800100c <MX_GPIO_Init+0x160>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a45      	ldr	r2, [pc, #276]	; (800100c <MX_GPIO_Init+0x160>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b43      	ldr	r3, [pc, #268]	; (800100c <MX_GPIO_Init+0x160>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b40      	ldr	r3, [pc, #256]	; (800100c <MX_GPIO_Init+0x160>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a3f      	ldr	r2, [pc, #252]	; (800100c <MX_GPIO_Init+0x160>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b3d      	ldr	r3, [pc, #244]	; (800100c <MX_GPIO_Init+0x160>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000f22:	2200      	movs	r2, #0
 8000f24:	f248 11b0 	movw	r1, #33200	; 0x81b0
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f002 fa5c 	bl	80033e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	4836      	ldr	r0, [pc, #216]	; (8001010 <MX_GPIO_Init+0x164>)
 8000f36:	f002 fa57 	bl	80033e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2160      	movs	r1, #96	; 0x60
 8000f3e:	4835      	ldr	r0, [pc, #212]	; (8001014 <MX_GPIO_Init+0x168>)
 8000f40:	f002 fa52 	bl	80033e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	482d      	ldr	r0, [pc, #180]	; (8001010 <MX_GPIO_Init+0x164>)
 8000f5c:	f002 f8ca 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000f60:	f248 13b0 	movw	r3, #33200	; 0x81b0
 8000f64:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f002 f8ba 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000f80:	2340      	movs	r3, #64	; 0x40
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f002 f8ad 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4817      	ldr	r0, [pc, #92]	; (8001010 <MX_GPIO_Init+0x164>)
 8000fb2:	f002 f89f 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 8000fb6:	2360      	movs	r3, #96	; 0x60
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4811      	ldr	r0, [pc, #68]	; (8001014 <MX_GPIO_Init+0x168>)
 8000fce:	f002 f891 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000fe4:	230e      	movs	r3, #14
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <MX_GPIO_Init+0x168>)
 8000ff0:	f002 f880 	bl	80030f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2028      	movs	r0, #40	; 0x28
 8000ffa:	f002 f844 	bl	8003086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ffe:	2028      	movs	r0, #40	; 0x28
 8001000:	f002 f85d 	bl	80030be <HAL_NVIC_EnableIRQ>

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	48000800 	.word	0x48000800
 8001014:	48000400 	.word	0x48000400

08001018 <_ZN3PinC1Ev>:
    uint16_t pin;
    bool valid;
    TIM_HandleTypeDef* p_tim;
    unsigned int channel;

    Pin() : port(nullptr), pin(0), valid(false), p_tim(nullptr), channel(0) {}
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	809a      	strh	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	719a      	strb	r2, [r3, #6]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_ZN3PinC1EP12GPIO_TypeDeft>:
    Pin(GPIO_TypeDef* p, uint16_t pn) : port(p), pin(pn), valid(true), p_tim(nullptr), channel(0) {} // no timer
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	4613      	mov	r3, r2
 8001058:	80fb      	strh	r3, [r7, #6]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	88fa      	ldrh	r2, [r7, #6]
 8001064:	809a      	strh	r2, [r3, #4]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2201      	movs	r2, #1
 800106a:	719a      	strb	r2, [r3, #6]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>:
    Pin(GPIO_TypeDef* p, uint16_t pn, TIM_HandleTypeDef* t, unsigned int c) : port(p), pin(pn), valid(true), p_tim(t), channel(c) {}
 8001086:	b480      	push	{r7}
 8001088:	b085      	sub	sp, #20
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4613      	mov	r3, r2
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	809a      	strh	r2, [r3, #4]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2201      	movs	r2, #1
 80010a6:	719a      	strb	r2, [r3, #6]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <_Z5printPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff f87f 	bl	80001d0 <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <_Z5printPKc+0x2c>)
 80010de:	f005 f835 	bl	800614c <HAL_UART_Transmit>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000590 	.word	0x20000590

080010f4 <printf>:
int printf(const char* s, ...){
 80010f4:	b40f      	push	{r0, r1, r2, r3}
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b0c2      	sub	sp, #264	; 0x108
 80010fa:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 80010fc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001104:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001108:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 800110a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800110e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001112:	f107 0008 	add.w	r0, r7, #8
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800111c:	f006 fe88 	bl	8007e30 <vsiprintf>
	perror(buffer);
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	4618      	mov	r0, r3
 8001126:	f006 fc29 	bl	800797c <perror>
	print(buffer);
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ffc8 	bl	80010c4 <_Z5printPKc>
	va_end(args);
//	#endif
	return strlen(buffer);
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f849 	bl	80001d0 <strlen>
 800113e:	4603      	mov	r3, r0
}
 8001140:	4618      	mov	r0, r3
 8001142:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001146:	46bd      	mov	sp, r7
 8001148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800114c:	b004      	add	sp, #16
 800114e:	4770      	bx	lr

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f001 fe1b 	bl	8002d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115a:	f000 f92b 	bl	80013b4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115e:	f7ff fea5 	bl	8000eac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001162:	f000 fe77 	bl	8001e54 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001166:	f000 fa0f 	bl	8001588 <MX_SPI1_Init>
  MX_SPI2_Init();
 800116a:	f000 fa4b 	bl	8001604 <MX_SPI2_Init>
  MX_SPI3_Init();
 800116e:	f000 fa87 	bl	8001680 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001172:	f000 fc9b 	bl	8001aac <MX_TIM1_Init>
  MX_TIM2_Init();
 8001176:	f000 fd45 	bl	8001c04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderData_1 = 99;
 800117a:	2363      	movs	r3, #99	; 0x63
 800117c:	82fb      	strh	r3, [r7, #22]
  uint16_t encoderData_2 = 99;
 800117e:	2363      	movs	r3, #99	; 0x63
 8001180:	82bb      	strh	r3, [r7, #20]
  uint16_t encoderData_3 = 99;
 8001182:	2363      	movs	r3, #99	; 0x63
 8001184:	827b      	strh	r3, [r7, #18]
  uint16_t encoder_max = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	823b      	strh	r3, [r7, #16]
  uint16_t encoder_min = 4100;
 800118a:	f241 0304 	movw	r3, #4100	; 0x1004
 800118e:	81fb      	strh	r3, [r7, #14]
  HAL_TIM_Base_Start(&htim1);
 8001190:	4877      	ldr	r0, [pc, #476]	; (8001370 <main+0x220>)
 8001192:	f003 ffa3 	bl	80050dc <HAL_TIM_Base_Start>




  /*---AMT22 setup---*/
  resetAMT22(&hspi1, GPIOC, GPIO_PIN_7, &htim1);
 8001196:	4b76      	ldr	r3, [pc, #472]	; (8001370 <main+0x220>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	4976      	ldr	r1, [pc, #472]	; (8001374 <main+0x224>)
 800119c:	4876      	ldr	r0, [pc, #472]	; (8001378 <main+0x228>)
 800119e:	f005 fd68 	bl	8006c72 <resetAMT22>

  /*---ESC setup---*/
  int32_t  CH2_ESC = 1500-1;
 80011a2:	f240 53db 	movw	r3, #1499	; 0x5db
 80011a6:	60bb      	str	r3, [r7, #8]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011a8:	2104      	movs	r1, #4
 80011aa:	4871      	ldr	r0, [pc, #452]	; (8001370 <main+0x220>)
 80011ac:	f004 f844 	bl	8005238 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 80011b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b4:	f001 fe68 	bl	8002e88 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500-1);
 80011b8:	4b6d      	ldr	r3, [pc, #436]	; (8001370 <main+0x220>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f240 52db 	movw	r2, #1499	; 0x5db
 80011c0:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(500);
 80011c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c6:	f001 fe5f 	bl	8002e88 <HAL_Delay>
//  HAL_Delay(500);



    /*---CYTRON setup---*/
    int32_t  CH2_DC = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011ce:	2104      	movs	r1, #4
 80011d0:	486a      	ldr	r0, [pc, #424]	; (800137c <main+0x22c>)
 80011d2:	f004 f831 	bl	8005238 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80011d6:	4b69      	ldr	r3, [pc, #420]	; (800137c <main+0x22c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(10);
 80011de:	200a      	movs	r0, #10
 80011e0:	f001 fe52 	bl	8002e88 <HAL_Delay>
    Wrist_Roll.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
 80011e4:	4b66      	ldr	r3, [pc, #408]	; (8001380 <main+0x230>)
 80011e6:	ed93 7b00 	vldr	d7, [r3]
 80011ea:	4b66      	ldr	r3, [pc, #408]	; (8001384 <main+0x234>)
 80011ec:	ed93 6b00 	vldr	d6, [r3]
 80011f0:	4b65      	ldr	r3, [pc, #404]	; (8001388 <main+0x238>)
 80011f2:	ed93 2b00 	vldr	d2, [r3]
 80011f6:	4b65      	ldr	r3, [pc, #404]	; (800138c <main+0x23c>)
 80011f8:	ed93 3b00 	vldr	d3, [r3]
 80011fc:	4b64      	ldr	r3, [pc, #400]	; (8001390 <main+0x240>)
 80011fe:	ed93 4b00 	vldr	d4, [r3]
 8001202:	4b64      	ldr	r3, [pc, #400]	; (8001394 <main+0x244>)
 8001204:	ed93 5b00 	vldr	d5, [r3]
 8001208:	eeb0 1a46 	vmov.f32	s2, s12
 800120c:	eef0 1a66 	vmov.f32	s3, s13
 8001210:	eeb0 0a47 	vmov.f32	s0, s14
 8001214:	eef0 0a67 	vmov.f32	s1, s15
 8001218:	485f      	ldr	r0, [pc, #380]	; (8001398 <main+0x248>)
 800121a:	f000 ff7d 	bl	8002118 <_ZN13RoverArmMotor5beginEdddddd>
    Wrist_Roll.setAngleLimits(2, 120.0f); //for angle limits test
 800121e:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8001360 <main+0x210>
 8001222:	ed9f 0b51 	vldr	d0, [pc, #324]	; 8001368 <main+0x218>
 8001226:	485c      	ldr	r0, [pc, #368]	; (8001398 <main+0x248>)
 8001228:	f001 f98b 	bl	8002542 <_ZN13RoverArmMotor14setAngleLimitsEdd>
    // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 70);
    // current_angle = Wrist_Roll.get_current_angle();
    // printf("current angle is %f\r\n, current_angle");
    // Wrist_Roll.newSetpoint(current_angle + 150);

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 30);
 800122c:	4b53      	ldr	r3, [pc, #332]	; (800137c <main+0x22c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	221e      	movs	r2, #30
 8001232:	639a      	str	r2, [r3, #56]	; 0x38
    while(!brakeSet){
 8001234:	4b59      	ldr	r3, [pc, #356]	; (800139c <main+0x24c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d108      	bne.n	800124e <main+0xfe>
      printf("waiting for brake set, current %f\r\n", Wrist_Roll.get_current_angle());
 800123c:	4856      	ldr	r0, [pc, #344]	; (8001398 <main+0x248>)
 800123e:	f001 f9cf 	bl	80025e0 <_ZN13RoverArmMotor17get_current_angleEv>
 8001242:	ec53 2b10 	vmov	r2, r3, d0
 8001246:	4856      	ldr	r0, [pc, #344]	; (80013a0 <main+0x250>)
 8001248:	f7ff ff54 	bl	80010f4 <printf>
    while(!brakeSet){
 800124c:	e7f2      	b.n	8001234 <main+0xe4>
    // Wrist_Roll.tick();
    // HAL_Delay(1); // safety delay

    /*--------------------------------------CYTRON angle limit test--------------------------------------*/

    Wrist_Roll.newSetpoint(Wrist_Roll.lowestAngle);
 800124e:	4b52      	ldr	r3, [pc, #328]	; (8001398 <main+0x248>)
 8001250:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8001254:	eeb0 0a47 	vmov.f32	s0, s14
 8001258:	eef0 0a67 	vmov.f32	s1, s15
 800125c:	484e      	ldr	r0, [pc, #312]	; (8001398 <main+0x248>)
 800125e:	f001 f93f 	bl	80024e0 <_ZN13RoverArmMotor11newSetpointEd>
    while(true) {
      current_angle = Wrist_Roll.get_current_angle();
 8001262:	484d      	ldr	r0, [pc, #308]	; (8001398 <main+0x248>)
 8001264:	f001 f9bc 	bl	80025e0 <_ZN13RoverArmMotor17get_current_angleEv>
 8001268:	eeb0 7a40 	vmov.f32	s14, s0
 800126c:	eef0 7a60 	vmov.f32	s15, s1
 8001270:	4b4c      	ldr	r3, [pc, #304]	; (80013a4 <main+0x254>)
 8001272:	ed83 7b00 	vstr	d7, [r3]
      if (!(current_angle <= Wrist_Roll.lowestAngle + 1.0)) {
 8001276:	4b48      	ldr	r3, [pc, #288]	; (8001398 <main+0x248>)
 8001278:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	; 0x100
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	4b49      	ldr	r3, [pc, #292]	; (80013a8 <main+0x258>)
 8001282:	f7ff f803 	bl	800028c <__adddf3>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <main+0x254>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	2401      	movs	r4, #1
 8001296:	f7ff fc35 	bl	8000b04 <__aeabi_dcmpge>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <main+0x154>
 80012a0:	2300      	movs	r3, #0
 80012a2:	461c      	mov	r4, r3
 80012a4:	b2e3      	uxtb	r3, r4
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d010      	beq.n	80012d2 <main+0x182>
        printf("DOWN current angle: %f, setpoint: %f\r\n", current_angle, Wrist_Roll.setpoint);
 80012b0:	4b3c      	ldr	r3, [pc, #240]	; (80013a4 <main+0x254>)
 80012b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012b6:	4b38      	ldr	r3, [pc, #224]	; (8001398 <main+0x248>)
 80012b8:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 80012bc:	e9cd 2300 	strd	r2, r3, [sp]
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4839      	ldr	r0, [pc, #228]	; (80013ac <main+0x25c>)
 80012c6:	f7ff ff15 	bl	80010f4 <printf>
        Wrist_Roll.tick();
 80012ca:	4833      	ldr	r0, [pc, #204]	; (8001398 <main+0x248>)
 80012cc:	f000 ffdc 	bl	8002288 <_ZN13RoverArmMotor4tickEv>
      current_angle = Wrist_Roll.get_current_angle();
 80012d0:	e7c7      	b.n	8001262 <main+0x112>
      }
      else {
        break;
 80012d2:	bf00      	nop
      }
    }
    Wrist_Roll.newSetpoint(Wrist_Roll.highestAngle);
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <main+0x248>)
 80012d6:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 80012da:	eeb0 0a47 	vmov.f32	s0, s14
 80012de:	eef0 0a67 	vmov.f32	s1, s15
 80012e2:	482d      	ldr	r0, [pc, #180]	; (8001398 <main+0x248>)
 80012e4:	f001 f8fc 	bl	80024e0 <_ZN13RoverArmMotor11newSetpointEd>
    while(true) {
      current_angle = Wrist_Roll.get_current_angle();
 80012e8:	482b      	ldr	r0, [pc, #172]	; (8001398 <main+0x248>)
 80012ea:	f001 f979 	bl	80025e0 <_ZN13RoverArmMotor17get_current_angleEv>
 80012ee:	eeb0 7a40 	vmov.f32	s14, s0
 80012f2:	eef0 7a60 	vmov.f32	s15, s1
 80012f6:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <main+0x254>)
 80012f8:	ed83 7b00 	vstr	d7, [r3]
      if (!(current_angle >= Wrist_Roll.highestAngle - 1.0)) {
 80012fc:	4b26      	ldr	r3, [pc, #152]	; (8001398 <main+0x248>)
 80012fe:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	; 0x108
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <main+0x258>)
 8001308:	f7fe ffbe 	bl	8000288 <__aeabi_dsub>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <main+0x254>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	2401      	movs	r4, #1
 800131c:	f7ff fbe8 	bl	8000af0 <__aeabi_dcmple>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <main+0x1da>
 8001326:	2300      	movs	r3, #0
 8001328:	461c      	mov	r4, r3
 800132a:	b2e3      	uxtb	r3, r4
 800132c:	f083 0301 	eor.w	r3, r3, #1
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d010      	beq.n	8001358 <main+0x208>
        printf("UP current angle: %f, setpoint: %f\r\n", current_angle, Wrist_Roll.setpoint);
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <main+0x254>)
 8001338:	e9d3 0100 	ldrd	r0, r1, [r3]
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <main+0x248>)
 800133e:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 8001342:	e9cd 2300 	strd	r2, r3, [sp]
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4819      	ldr	r0, [pc, #100]	; (80013b0 <main+0x260>)
 800134c:	f7ff fed2 	bl	80010f4 <printf>
        Wrist_Roll.tick();
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <main+0x248>)
 8001352:	f000 ff99 	bl	8002288 <_ZN13RoverArmMotor4tickEv>
      current_angle = Wrist_Roll.get_current_angle();
 8001356:	e7c7      	b.n	80012e8 <main+0x198>
      }
      else {
        break;
 8001358:	bf00      	nop
    Wrist_Roll.newSetpoint(Wrist_Roll.lowestAngle);
 800135a:	e778      	b.n	800124e <main+0xfe>
 800135c:	f3af 8000 	nop.w
 8001360:	00000000 	.word	0x00000000
 8001364:	405e0000 	.word	0x405e0000
 8001368:	00000000 	.word	0x00000000
 800136c:	40000000 	.word	0x40000000
 8001370:	200004f8 	.word	0x200004f8
 8001374:	48000800 	.word	0x48000800
 8001378:	200003c8 	.word	0x200003c8
 800137c:	20000544 	.word	0x20000544
 8001380:	20000000 	.word	0x20000000
 8001384:	20000008 	.word	0x20000008
 8001388:	20000010 	.word	0x20000010
 800138c:	20000018 	.word	0x20000018
 8001390:	20000020 	.word	0x20000020
 8001394:	20000028 	.word	0x20000028
 8001398:	20000270 	.word	0x20000270
 800139c:	20000238 	.word	0x20000238
 80013a0:	0800a108 	.word	0x0800a108
 80013a4:	20000230 	.word	0x20000230
 80013a8:	3ff00000 	.word	0x3ff00000
 80013ac:	0800a12c 	.word	0x0800a12c
 80013b0:	0800a154 	.word	0x0800a154

080013b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b096      	sub	sp, #88	; 0x58
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2244      	movs	r2, #68	; 0x44
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f005 fcee 	bl	8006da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013da:	f002 f843 	bl	8003464 <HAL_PWREx_ControlVoltageScaling>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2301      	movne	r3, #1
 80013e6:	2300      	moveq	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80013ee:	f000 f859 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f2:	2302      	movs	r3, #2
 80013f4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013fc:	2310      	movs	r3, #16
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001400:	2302      	movs	r3, #2
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001404:	2302      	movs	r3, #2
 8001406:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001408:	2301      	movs	r3, #1
 800140a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800140c:	230a      	movs	r3, #10
 800140e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001410:	2307      	movs	r3, #7
 8001412:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001414:	2302      	movs	r3, #2
 8001416:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001418:	2302      	movs	r3, #2
 800141a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4618      	mov	r0, r3
 8001422:	f002 f875 	bl	8003510 <HAL_RCC_OscConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf14      	ite	ne
 800142c:	2301      	movne	r3, #1
 800142e:	2300      	moveq	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8001436:	f000 f835 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143a:	230f      	movs	r3, #15
 800143c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143e:	2303      	movs	r3, #3
 8001440:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	2104      	movs	r1, #4
 8001452:	4618      	mov	r0, r3
 8001454:	f002 fc70 	bl	8003d38 <HAL_RCC_ClockConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	bf14      	ite	ne
 800145e:	2301      	movne	r3, #1
 8001460:	2300      	moveq	r3, #0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8001468:	f000 f81c 	bl	80014a4 <Error_Handler>
  }
}
 800146c:	bf00      	nop
 800146e:	3758      	adds	r7, #88	; 0x58
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == B1_Pin) // INT Source is pin A9
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001484:	d106      	bne.n	8001494 <HAL_GPIO_EXTI_Callback+0x20>
      // printf("INTERRUPT\r\n");
      // current_angle = Wrist_Roll.get_current_angle();
      // printf("current angle is %f\r\n, current_angle");
      // Wrist_Roll.newSetpoint(current_angle + 150);

      Wrist_Roll.set_zero_angle();
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <HAL_GPIO_EXTI_Callback+0x28>)
 8001488:	f001 f87f 	bl	800258a <_ZN13RoverArmMotor14set_zero_angleEv>
      brakeSet = 1;
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <HAL_GPIO_EXTI_Callback+0x2c>)
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]
      return;
 8001492:	bf00      	nop
    }
}
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000270 	.word	0x20000270
 80014a0:	20000238 	.word	0x20000238

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	e7fe      	b.n	80014ac <Error_Handler+0x8>
	...

080014b0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b096      	sub	sp, #88	; 0x58
 80014b4:	af10      	add	r7, sp, #64	; 0x40
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d13f      	bne.n	8001540 <_Z41__static_initialization_and_destruction_0ii+0x90>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d13a      	bne.n	8001540 <_Z41__static_initialization_and_destruction_0ii+0x90>
Pin CYTRON_DIR_1(CYTRON_DIR_1_GPIO_Port, CYTRON_DIR_1_Pin);
 80014ca:	2220      	movs	r2, #32
 80014cc:	4922      	ldr	r1, [pc, #136]	; (8001558 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80014ce:	4823      	ldr	r0, [pc, #140]	; (800155c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80014d0:	f7ff fdbc 	bl	800104c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin, &htim2, TIM_CHANNEL_2);
 80014d4:	2304      	movs	r3, #4
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80014da:	2208      	movs	r2, #8
 80014dc:	491e      	ldr	r1, [pc, #120]	; (8001558 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80014de:	4821      	ldr	r0, [pc, #132]	; (8001564 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80014e0:	f7ff fdd1 	bl	8001086 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>
Pin AMT22_1(GPIOC, GPIO_PIN_7);
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	4920      	ldr	r1, [pc, #128]	; (8001568 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80014e8:	4820      	ldr	r0, [pc, #128]	; (800156c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80014ea:	f7ff fdaf 	bl	800104c <_ZN3PinC1EP12GPIO_TypeDeft>
RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fd90 	bl	8001018 <_ZN3PinC1Ev>
 80014f8:	4c1a      	ldr	r4, [pc, #104]	; (8001564 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80014fa:	ad0b      	add	r5, sp, #44	; 0x2c
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001502:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001506:	2300      	movs	r3, #0
 8001508:	930a      	str	r3, [sp, #40]	; 0x28
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800150c:	ad06      	add	r5, sp, #24
 800150e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001510:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001516:	ad02      	add	r5, sp, #8
 8001518:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800151a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800151e:	466a      	mov	r2, sp
 8001520:	f104 0308 	add.w	r3, r4, #8
 8001524:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001528:	e882 0003 	stmia.w	r2, {r0, r1}
 800152c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001530:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8001548 <_Z41__static_initialization_and_destruction_0ii+0x98>
 8001534:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8001550 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8001538:	490d      	ldr	r1, [pc, #52]	; (8001570 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800153a:	480e      	ldr	r0, [pc, #56]	; (8001574 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800153c:	f000 fd55 	bl	8001fea <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>
}
 8001540:	bf00      	nop
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bdb0      	pop	{r4, r5, r7, pc}
 8001548:	00000000 	.word	0x00000000
 800154c:	40767000 	.word	0x40767000
	...
 8001558:	48000400 	.word	0x48000400
 800155c:	2000023c 	.word	0x2000023c
 8001560:	20000544 	.word	0x20000544
 8001564:	2000024c 	.word	0x2000024c
 8001568:	48000800 	.word	0x48000800
 800156c:	2000025c 	.word	0x2000025c
 8001570:	200003c8 	.word	0x200003c8
 8001574:	20000270 	.word	0x20000270

08001578 <_GLOBAL__sub_I_aggKp>:
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
 800157c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001580:	2001      	movs	r0, #1
 8001582:	f7ff ff95 	bl	80014b0 <_Z41__static_initialization_and_destruction_0ii>
 8001586:	bd80      	pop	{r7, pc}

08001588 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <MX_SPI1_Init+0x74>)
 800158e:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <MX_SPI1_Init+0x78>)
 8001590:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <MX_SPI1_Init+0x74>)
 8001594:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001598:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <MX_SPI1_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <MX_SPI1_Init+0x74>)
 80015a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_SPI1_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <MX_SPI1_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_SPI1_Init+0x74>)
 80015b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <MX_SPI1_Init+0x74>)
 80015be:	2220      	movs	r2, #32
 80015c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_SPI1_Init+0x74>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_SPI1_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_SPI1_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_SPI1_Init+0x74>)
 80015d6:	2207      	movs	r2, #7
 80015d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_SPI1_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_SPI1_Init+0x74>)
 80015e2:	2208      	movs	r2, #8
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_SPI1_Init+0x74>)
 80015e8:	f003 f906 	bl	80047f8 <HAL_SPI_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015f2:	f7ff ff57 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200003c8 	.word	0x200003c8
 8001600:	40013000 	.word	0x40013000

08001604 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <MX_SPI2_Init+0x74>)
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <MX_SPI2_Init+0x78>)
 800160c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_SPI2_Init+0x74>)
 8001610:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001614:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_SPI2_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_SPI2_Init+0x74>)
 800161e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001622:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_SPI2_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_SPI2_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_SPI2_Init+0x74>)
 8001632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001636:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_SPI2_Init+0x74>)
 800163a:	2220      	movs	r2, #32
 800163c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_SPI2_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_SPI2_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MX_SPI2_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_SPI2_Init+0x74>)
 8001652:	2207      	movs	r2, #7
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <MX_SPI2_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_SPI2_Init+0x74>)
 800165e:	2208      	movs	r2, #8
 8001660:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_SPI2_Init+0x74>)
 8001664:	f003 f8c8 	bl	80047f8 <HAL_SPI_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800166e:	f7ff ff19 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2000042c 	.word	0x2000042c
 800167c:	40003800 	.word	0x40003800

08001680 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <MX_SPI3_Init+0x74>)
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <MX_SPI3_Init+0x78>)
 8001688:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_SPI3_Init+0x74>)
 800168c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001690:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_SPI3_Init+0x74>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <MX_SPI3_Init+0x74>)
 800169a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800169e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_SPI3_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <MX_SPI3_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_SPI3_Init+0x74>)
 80016ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_SPI3_Init+0x74>)
 80016b6:	2220      	movs	r2, #32
 80016b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_SPI3_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_SPI3_Init+0x74>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_SPI3_Init+0x74>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_SPI3_Init+0x74>)
 80016ce:	2207      	movs	r2, #7
 80016d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MX_SPI3_Init+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_SPI3_Init+0x74>)
 80016da:	2208      	movs	r2, #8
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_SPI3_Init+0x74>)
 80016e0:	f003 f88a 	bl	80047f8 <HAL_SPI_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80016ea:	f7ff fedb 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000490 	.word	0x20000490
 80016f8:	40003c00 	.word	0x40003c00

080016fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08e      	sub	sp, #56	; 0x38
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a47      	ldr	r2, [pc, #284]	; (8001838 <HAL_SPI_MspInit+0x13c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d12a      	bne.n	8001774 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800171e:	4b47      	ldr	r3, [pc, #284]	; (800183c <HAL_SPI_MspInit+0x140>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001722:	4a46      	ldr	r2, [pc, #280]	; (800183c <HAL_SPI_MspInit+0x140>)
 8001724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001728:	6613      	str	r3, [r2, #96]	; 0x60
 800172a:	4b44      	ldr	r3, [pc, #272]	; (800183c <HAL_SPI_MspInit+0x140>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001732:	623b      	str	r3, [r7, #32]
 8001734:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <HAL_SPI_MspInit+0x140>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	4a40      	ldr	r2, [pc, #256]	; (800183c <HAL_SPI_MspInit+0x140>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001742:	4b3e      	ldr	r3, [pc, #248]	; (800183c <HAL_SPI_MspInit+0x140>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800174e:	f641 0302 	movw	r3, #6146	; 0x1802
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001760:	2305      	movs	r3, #5
 8001762:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001768:	4619      	mov	r1, r3
 800176a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176e:	f001 fcc1 	bl	80030f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001772:	e05c      	b.n	800182e <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a31      	ldr	r2, [pc, #196]	; (8001840 <HAL_SPI_MspInit+0x144>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d129      	bne.n	80017d2 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800177e:	4b2f      	ldr	r3, [pc, #188]	; (800183c <HAL_SPI_MspInit+0x140>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	4a2e      	ldr	r2, [pc, #184]	; (800183c <HAL_SPI_MspInit+0x140>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001788:	6593      	str	r3, [r2, #88]	; 0x58
 800178a:	4b2c      	ldr	r3, [pc, #176]	; (800183c <HAL_SPI_MspInit+0x140>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	4b29      	ldr	r3, [pc, #164]	; (800183c <HAL_SPI_MspInit+0x140>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4a28      	ldr	r2, [pc, #160]	; (800183c <HAL_SPI_MspInit+0x140>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_SPI_MspInit+0x140>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017c0:	2305      	movs	r3, #5
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	4619      	mov	r1, r3
 80017ca:	481e      	ldr	r0, [pc, #120]	; (8001844 <HAL_SPI_MspInit+0x148>)
 80017cc:	f001 fc92 	bl	80030f4 <HAL_GPIO_Init>
}
 80017d0:	e02d      	b.n	800182e <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI3)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <HAL_SPI_MspInit+0x14c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d128      	bne.n	800182e <HAL_SPI_MspInit+0x132>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017dc:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_SPI_MspInit+0x140>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	4a16      	ldr	r2, [pc, #88]	; (800183c <HAL_SPI_MspInit+0x140>)
 80017e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e6:	6593      	str	r3, [r2, #88]	; 0x58
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_SPI_MspInit+0x140>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_SPI_MspInit+0x140>)
 80017f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f8:	4a10      	ldr	r2, [pc, #64]	; (800183c <HAL_SPI_MspInit+0x140>)
 80017fa:	f043 0304 	orr.w	r3, r3, #4
 80017fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_SPI_MspInit+0x140>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800180c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800181e:	2306      	movs	r3, #6
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	4619      	mov	r1, r3
 8001828:	4808      	ldr	r0, [pc, #32]	; (800184c <HAL_SPI_MspInit+0x150>)
 800182a:	f001 fc63 	bl	80030f4 <HAL_GPIO_Init>
}
 800182e:	bf00      	nop
 8001830:	3738      	adds	r7, #56	; 0x38
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40013000 	.word	0x40013000
 800183c:	40021000 	.word	0x40021000
 8001840:	40003800 	.word	0x40003800
 8001844:	48000400 	.word	0x48000400
 8001848:	40003c00 	.word	0x40003c00
 800184c:	48000800 	.word	0x48000800

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_MspInit+0x44>)
 8001858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <HAL_MspInit+0x44>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6613      	str	r3, [r2, #96]	; 0x60
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_MspInit+0x44>)
 8001864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_MspInit+0x44>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_MspInit+0x44>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	6593      	str	r3, [r2, #88]	; 0x58
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_MspInit+0x44>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800189c:	e7fe      	b.n	800189c <NMI_Handler+0x4>

0800189e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <MemManage_Handler+0x4>

080018aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e4:	f001 fab0 	bl	8002e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80018f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018f4:	f001 fd90 	bl	8003418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return 1;
 8001900:	2301      	movs	r3, #1
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_kill>:

int _kill(int pid, int sig)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001916:	f005 fa13 	bl	8006d40 <__errno>
 800191a:	4603      	mov	r3, r0
 800191c:	2216      	movs	r2, #22
 800191e:	601a      	str	r2, [r3, #0]
  return -1;
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_exit>:

void _exit (int status)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ffe7 	bl	800190c <_kill>
  while (1) {}    /* Make sure we hang here */
 800193e:	e7fe      	b.n	800193e <_exit+0x12>

08001940 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	e00a      	b.n	8001968 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001952:	f3af 8000 	nop.w
 8001956:	4601      	mov	r1, r0
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	b2ca      	uxtb	r2, r1
 8001960:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	dbf0      	blt.n	8001952 <_read+0x12>
  }

  return len;
 8001970:	687b      	ldr	r3, [r7, #4]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e009      	b.n	80019a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	60ba      	str	r2, [r7, #8]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf1      	blt.n	800198c <_write+0x12>
  }
  return len;
 80019a8:	687b      	ldr	r3, [r7, #4]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_close>:

int _close(int file)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019da:	605a      	str	r2, [r3, #4]
  return 0;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_isatty>:

int _isatty(int file)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <_sbrk+0x5c>)
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <_sbrk+0x60>)
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <_sbrk+0x64>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <_sbrk+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d207      	bcs.n	8001a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a4c:	f005 f978 	bl	8006d40 <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	220c      	movs	r2, #12
 8001a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	e009      	b.n	8001a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <_sbrk+0x64>)
 8001a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20010000 	.word	0x20010000
 8001a7c:	00000400 	.word	0x00000400
 8001a80:	200004f4 	.word	0x200004f4
 8001a84:	20000630 	.word	0x20000630

08001a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <SystemInit+0x20>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <SystemInit+0x20>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b09a      	sub	sp, #104	; 0x68
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001acc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
 8001adc:	615a      	str	r2, [r3, #20]
 8001ade:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	222c      	movs	r2, #44	; 0x2c
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f005 f95c 	bl	8006da4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aec:	4b43      	ldr	r3, [pc, #268]	; (8001bfc <MX_TIM1_Init+0x150>)
 8001aee:	4a44      	ldr	r2, [pc, #272]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001af0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001af2:	4b42      	ldr	r3, [pc, #264]	; (8001bfc <MX_TIM1_Init+0x150>)
 8001af4:	224f      	movs	r2, #79	; 0x4f
 8001af6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af8:	4b40      	ldr	r3, [pc, #256]	; (8001bfc <MX_TIM1_Init+0x150>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500-1;
 8001afe:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <MX_TIM1_Init+0x150>)
 8001b00:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001b04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <MX_TIM1_Init+0x150>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b0c:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <MX_TIM1_Init+0x150>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b3a      	ldr	r3, [pc, #232]	; (8001bfc <MX_TIM1_Init+0x150>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b18:	4838      	ldr	r0, [pc, #224]	; (8001bfc <MX_TIM1_Init+0x150>)
 8001b1a:	f003 fa87 	bl	800502c <HAL_TIM_Base_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001b24:	f7ff fcbe 	bl	80014a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b32:	4619      	mov	r1, r3
 8001b34:	4831      	ldr	r0, [pc, #196]	; (8001bfc <MX_TIM1_Init+0x150>)
 8001b36:	f003 fd71 	bl	800561c <HAL_TIM_ConfigClockSource>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001b40:	f7ff fcb0 	bl	80014a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b44:	482d      	ldr	r0, [pc, #180]	; (8001bfc <MX_TIM1_Init+0x150>)
 8001b46:	f003 fb15 	bl	8005174 <HAL_TIM_PWM_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b50:	f7ff fca8 	bl	80014a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b64:	4619      	mov	r1, r3
 8001b66:	4825      	ldr	r0, [pc, #148]	; (8001bfc <MX_TIM1_Init+0x150>)
 8001b68:	f004 f9c4 	bl	8005ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001b72:	f7ff fc97 	bl	80014a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b76:	2360      	movs	r3, #96	; 0x60
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b82:	2300      	movs	r3, #0
 8001b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b96:	2204      	movs	r2, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4818      	ldr	r0, [pc, #96]	; (8001bfc <MX_TIM1_Init+0x150>)
 8001b9c:	f003 fc2a 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001ba6:	f7ff fc7d 	bl	80014a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4807      	ldr	r0, [pc, #28]	; (8001bfc <MX_TIM1_Init+0x150>)
 8001be0:	f004 f9ee 	bl	8005fc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001bea:	f7ff fc5b 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bee:	4803      	ldr	r0, [pc, #12]	; (8001bfc <MX_TIM1_Init+0x150>)
 8001bf0:	f000 f8d4 	bl	8001d9c <HAL_TIM_MspPostInit>

}
 8001bf4:	bf00      	nop
 8001bf6:	3768      	adds	r7, #104	; 0x68
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200004f8 	.word	0x200004f8
 8001c00:	40012c00 	.word	0x40012c00

08001c04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08e      	sub	sp, #56	; 0x38
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c24:	463b      	mov	r3, r7
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]
 8001c32:	615a      	str	r2, [r3, #20]
 8001c34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <MX_TIM2_Init+0xe8>)
 8001c38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <MX_TIM2_Init+0xe8>)
 8001c40:	224f      	movs	r2, #79	; 0x4f
 8001c42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c44:	4b29      	ldr	r3, [pc, #164]	; (8001cec <MX_TIM2_Init+0xe8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001c4a:	4b28      	ldr	r3, [pc, #160]	; (8001cec <MX_TIM2_Init+0xe8>)
 8001c4c:	2263      	movs	r2, #99	; 0x63
 8001c4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c50:	4b26      	ldr	r3, [pc, #152]	; (8001cec <MX_TIM2_Init+0xe8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <MX_TIM2_Init+0xe8>)
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c5c:	4823      	ldr	r0, [pc, #140]	; (8001cec <MX_TIM2_Init+0xe8>)
 8001c5e:	f003 f9e5 	bl	800502c <HAL_TIM_Base_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c68:	f7ff fc1c 	bl	80014a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c76:	4619      	mov	r1, r3
 8001c78:	481c      	ldr	r0, [pc, #112]	; (8001cec <MX_TIM2_Init+0xe8>)
 8001c7a:	f003 fccf 	bl	800561c <HAL_TIM_ConfigClockSource>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c84:	f7ff fc0e 	bl	80014a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c88:	4818      	ldr	r0, [pc, #96]	; (8001cec <MX_TIM2_Init+0xe8>)
 8001c8a:	f003 fa73 	bl	8005174 <HAL_TIM_PWM_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c94:	f7ff fc06 	bl	80014a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4811      	ldr	r0, [pc, #68]	; (8001cec <MX_TIM2_Init+0xe8>)
 8001ca8:	f004 f924 	bl	8005ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cb2:	f7ff fbf7 	bl	80014a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb6:	2360      	movs	r3, #96	; 0x60
 8001cb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	2204      	movs	r2, #4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4807      	ldr	r0, [pc, #28]	; (8001cec <MX_TIM2_Init+0xe8>)
 8001cce:	f003 fb91 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001cd8:	f7ff fbe4 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cdc:	4803      	ldr	r0, [pc, #12]	; (8001cec <MX_TIM2_Init+0xe8>)
 8001cde:	f000 f85d 	bl	8001d9c <HAL_TIM_MspPostInit>

}
 8001ce2:	bf00      	nop
 8001ce4:	3738      	adds	r7, #56	; 0x38
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000544 	.word	0x20000544

08001cf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a20      	ldr	r2, [pc, #128]	; (8001d90 <HAL_TIM_Base_MspInit+0xa0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d10c      	bne.n	8001d2c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_TIM_Base_MspInit+0xa4>)
 8001d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_TIM_Base_MspInit+0xa4>)
 8001d18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_TIM_Base_MspInit+0xa4>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d2a:	e02d      	b.n	8001d88 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d34:	d128      	bne.n	8001d88 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_TIM_Base_MspInit+0xa4>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <HAL_TIM_Base_MspInit+0xa4>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6593      	str	r3, [r2, #88]	; 0x58
 8001d42:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <HAL_TIM_Base_MspInit+0xa4>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_TIM_Base_MspInit+0xa4>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a10      	ldr	r2, [pc, #64]	; (8001d94 <HAL_TIM_Base_MspInit+0xa4>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_TIM_Base_MspInit+0xa4>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <HAL_TIM_Base_MspInit+0xa8>)
 8001d84:	f001 f9b6 	bl	80030f4 <HAL_GPIO_Init>
}
 8001d88:	bf00      	nop
 8001d8a:	3728      	adds	r7, #40	; 0x28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40012c00 	.word	0x40012c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000400 	.word	0x48000400

08001d9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a23      	ldr	r2, [pc, #140]	; (8001e48 <HAL_TIM_MspPostInit+0xac>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d11e      	bne.n	8001dfc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_TIM_MspPostInit+0xb0>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	4a22      	ldr	r2, [pc, #136]	; (8001e4c <HAL_TIM_MspPostInit+0xb0>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_TIM_MspPostInit+0xb0>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 8001dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df6:	f001 f97d 	bl	80030f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dfa:	e020      	b.n	8001e3e <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e04:	d11b      	bne.n	8001e3e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_TIM_MspPostInit+0xb0>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_TIM_MspPostInit+0xb0>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_TIM_MspPostInit+0xb0>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 8001e1e:	2308      	movs	r3, #8
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4805      	ldr	r0, [pc, #20]	; (8001e50 <HAL_TIM_MspPostInit+0xb4>)
 8001e3a:	f001 f95b 	bl	80030f4 <HAL_GPIO_Init>
}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	; 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40012c00 	.word	0x40012c00
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	48000400 	.word	0x48000400

08001e54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <MX_USART2_UART_Init+0x58>)
 8001e5a:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <MX_USART2_UART_Init+0x5c>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <MX_USART2_UART_Init+0x58>)
 8001e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <MX_USART2_UART_Init+0x58>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <MX_USART2_UART_Init+0x58>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <MX_USART2_UART_Init+0x58>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <MX_USART2_UART_Init+0x58>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <MX_USART2_UART_Init+0x58>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <MX_USART2_UART_Init+0x58>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <MX_USART2_UART_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <MX_USART2_UART_Init+0x58>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <MX_USART2_UART_Init+0x58>)
 8001e98:	f004 f90a 	bl	80060b0 <HAL_UART_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ea2:	f7ff faff 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000590 	.word	0x20000590
 8001eb0:	40004400 	.word	0x40004400

08001eb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b0a2      	sub	sp, #136	; 0x88
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2260      	movs	r2, #96	; 0x60
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f004 ff65 	bl	8006da4 <memset>
  if(uartHandle->Instance==USART2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a20      	ldr	r2, [pc, #128]	; (8001f60 <HAL_UART_MspInit+0xac>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d138      	bne.n	8001f56 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f002 f945 	bl	8004180 <HAL_RCCEx_PeriphCLKConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001efc:	f7ff fad2 	bl	80014a4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_UART_MspInit+0xb0>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_UART_MspInit+0xb0>)
 8001f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_UART_MspInit+0xb0>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_UART_MspInit+0xb0>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1c:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <HAL_UART_MspInit+0xb0>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_UART_MspInit+0xb0>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f30:	230c      	movs	r3, #12
 8001f32:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f42:	2307      	movs	r3, #7
 8001f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f52:	f001 f8cf 	bl	80030f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f56:	bf00      	nop
 8001f58:	3788      	adds	r7, #136	; 0x88
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40004400 	.word	0x40004400
 8001f64:	40021000 	.word	0x40021000

08001f68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f6c:	f7ff fd8c 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f70:	480c      	ldr	r0, [pc, #48]	; (8001fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f72:	490d      	ldr	r1, [pc, #52]	; (8001fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <LoopForever+0xe>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f78:	e002      	b.n	8001f80 <LoopCopyDataInit>

08001f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7e:	3304      	adds	r3, #4

08001f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f84:	d3f9      	bcc.n	8001f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f88:	4c0a      	ldr	r4, [pc, #40]	; (8001fb4 <LoopForever+0x16>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f8c:	e001      	b.n	8001f92 <LoopFillZerobss>

08001f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f90:	3204      	adds	r2, #4

08001f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f94:	d3fb      	bcc.n	8001f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f96:	f004 fed9 	bl	8006d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f9a:	f7ff f8d9 	bl	8001150 <main>

08001f9e <LoopForever>:

LoopForever:
    b LoopForever
 8001f9e:	e7fe      	b.n	8001f9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fa0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001fac:	0800ac48 	.word	0x0800ac48
  ldr r2, =_sbss
 8001fb0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001fb4:	2000062c 	.word	0x2000062c

08001fb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC1_IRQHandler>

08001fba <_ZN9movingAvgC1Ei>:
#define MOVINGAVG_H_INCLUDED

class movingAvg
{
    public:
        movingAvg(int interval)
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
            : m_interval{interval}, m_nbrReadings{0}, m_sum{0}, m_next{0} {}
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>:

// TODO: Test this class with the old code, remember to create backup beforehand!
// I'm very suspicious of the way I handled user defined pointers...

// The motor will not move until begin() is called!
RoverArmMotor::RoverArmMotor(SPI_HandleTypeDef* spi_handle, Pin pwm_pin, Pin dir_pin, Pin encoder_pin, int esc_type, double minimum_angle, double maximum_angle, Pin brake_pin)
 8001fea:	b082      	sub	sp, #8
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	6178      	str	r0, [r7, #20]
 8001ff4:	6139      	str	r1, [r7, #16]
 8001ff6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ffa:	e881 000c 	stmia.w	r1, {r2, r3}
 8001ffe:	ed87 0b02 	vstr	d0, [r7, #8]
 8002002:	ed87 1b00 	vstr	d1, [r7]
                :internalPIDInstance(&input, &output, &setpoint, regularKp, regularKi, regularKd, _PID_CD_DIRECT)
                ,internalAveragerInstance(15){
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 800202c:	2300      	movs	r3, #0
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	eeb0 2a45 	vmov.f32	s4, s10
 8002034:	eef0 2a65 	vmov.f32	s5, s11
 8002038:	eeb0 1a46 	vmov.f32	s2, s12
 800203c:	eef0 1a66 	vmov.f32	s3, s13
 8002040:	eeb0 0a47 	vmov.f32	s0, s14
 8002044:	eef0 0a67 	vmov.f32	s1, s15
 8002048:	4623      	mov	r3, r4
 800204a:	f000 fbb1 	bl	80027b0 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3370      	adds	r3, #112	; 0x70
 8002052:	210f      	movs	r1, #15
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ffb0 	bl	8001fba <_ZN9movingAvgC1Ei>
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	33b8      	adds	r3, #184	; 0xb8
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe ffda 	bl	8001018 <_ZN3PinC1Ev>
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	33c8      	adds	r3, #200	; 0xc8
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe ffd5 	bl	8001018 <_ZN3PinC1Ev>
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	33d8      	adds	r3, #216	; 0xd8
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe ffd0 	bl	8001018 <_ZN3PinC1Ev>
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	33e8      	adds	r3, #232	; 0xe8
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe ffcb 	bl	8001018 <_ZN3PinC1Ev>

    //constructor
    spi = spi_handle;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    pwm = pwm_pin;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8002090:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    dir = dir_pin;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80020a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    encoder = encoder_pin;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80020b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    brake = brake_pin;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 80020c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    escType = esc_type;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020ce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    lowestAngle = minimum_angle;
 80020d2:	6979      	ldr	r1, [r7, #20]
 80020d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020d8:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = maximum_angle;
 80020dc:	6979      	ldr	r1, [r7, #20]
 80020de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020e2:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108

    //clean up variables
    input = 0;
 80020e6:	6979      	ldr	r1, [r7, #20]
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
    output = 0;
 80020f4:	6979      	ldr	r1, [r7, #20]
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
    
}
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	4618      	mov	r0, r3
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800210e:	b002      	add	sp, #8
 8002110:	4770      	bx	lr
 8002112:	0000      	movs	r0, r0
 8002114:	0000      	movs	r0, r0
	...

08002118 <_ZN13RoverArmMotor5beginEdddddd>:

void RoverArmMotor::begin(double aggP, double aggI, double aggD, double regP, double regI, double regD){
 8002118:	b580      	push	{r7, lr}
 800211a:	b08e      	sub	sp, #56	; 0x38
 800211c:	af00      	add	r7, sp, #0
 800211e:	6378      	str	r0, [r7, #52]	; 0x34
 8002120:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8002124:	ed87 1b08 	vstr	d1, [r7, #32]
 8002128:	ed87 2b06 	vstr	d2, [r7, #24]
 800212c:	ed87 3b04 	vstr	d3, [r7, #16]
 8002130:	ed87 4b02 	vstr	d4, [r7, #8]
 8002134:	ed87 5b00 	vstr	d5, [r7]
    /*------------------Initialize pins------------------*/ 
    // Initialize given pins
    // pinMode(encoder, INPUT); // not needed since we use HAL library
    // pinMode(pwm, OUTPUT);

    if(escType == CYTRON){
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800213e:	2b00      	cmp	r3, #0
 8002140:	d107      	bne.n	8002152 <_ZN13RoverArmMotor5beginEdddddd+0x3a>
        // pinMode(dir, OUTPUT); // not needed since we use HAL library

        // Allow negative outputs, the sign will be interpreted as
        // the direction pin
        internalPIDInstance.SetOutputLimits(5, 99); // PWM duty cycle mn297 TOOD: check this
 8002142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002144:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8002268 <_ZN13RoverArmMotor5beginEdddddd+0x150>
 8002148:	ed9f 0b49 	vldr	d0, [pc, #292]	; 8002270 <_ZN13RoverArmMotor5beginEdddddd+0x158>
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fcae 	bl	8002aae <_ZN3PID15SetOutputLimitsEdd>
    //     // internalServoInstance.attach(pwm);
    //     internalServoInstance.attach(pwm, 1100, 1900, 1500); // mn297
    // }
    
    /*------------------Initialize moving average------------------*/
    internalAveragerInstance.begin();
 8002152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002154:	3370      	adds	r3, #112	; 0x70
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fac3 	bl	80026e2 <_ZN9movingAvg5beginEv>

    /*------------------Initialize PID------------------*/
    internalPIDInstance.Init();
 800215c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fb49 	bl	80027f6 <_ZN3PID4InitEv>
    internalPIDInstance.SetMode(_PID_MODE_AUTOMATIC);
 8002164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002166:	2101      	movs	r1, #1
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fc82 	bl	8002a72 <_ZN3PID7SetModeE15PIDMode_TypeDef>
    /*------------------Get setpoint------------------*/
    // Get current location and set it as setpoint. Essential to prevent jerkiness
    // as the microcontroller initializes.
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    //after setup, currentAngle is same as setpoint
    adcResult = get_current_angle();    // fix setpoint not equal to current angle
 800216e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002170:	f000 fa36 	bl	80025e0 <_ZN13RoverArmMotor17get_current_angleEv>
 8002174:	ec53 2b10 	vmov	r2, r3, d0
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	f7fe fcec 	bl	8000b58 <__aeabi_d2iz>
 8002180:	4602      	mov	r2, r0
 8002182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002184:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    currentAngle = mapFloat((float) adcResult, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f);
 8002188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800218e:	ee07 3a90 	vmov	s15, r3
 8002192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002196:	ed9f 2a38 	vldr	s4, [pc, #224]	; 8002278 <_ZN13RoverArmMotor5beginEdddddd+0x160>
 800219a:	eddf 1a38 	vldr	s3, [pc, #224]	; 800227c <_ZN13RoverArmMotor5beginEdddddd+0x164>
 800219e:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8002280 <_ZN13RoverArmMotor5beginEdddddd+0x168>
 80021a2:	eddf 0a36 	vldr	s1, [pc, #216]	; 800227c <_ZN13RoverArmMotor5beginEdddddd+0x164>
 80021a6:	eeb0 0a67 	vmov.f32	s0, s15
 80021aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021ac:	f000 fa5e 	bl	800266c <_ZN13RoverArmMotor8mapFloatEfffff>
 80021b0:	eeb0 7a40 	vmov.f32	s14, s0
 80021b4:	eef0 7a60 	vmov.f32	s15, s1
 80021b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ba:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    setpoint = currentAngle;
 80021be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c0:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80021c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021c6:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140



    /*------------------Set PID parameters------------------*/
    regularKp = regP;
 80021ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021d0:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    regularKi = regI;
 80021d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021da:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    regularKd = regD;
 80021de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021e4:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    aggressiveKp = aggP;
 80021e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021ee:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    aggressiveKi = aggI;
 80021f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021f8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    aggressiveKd = aggD;
 80021fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002202:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

    internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 8002206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220a:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800220e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002210:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002216:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 800221a:	eeb0 2a45 	vmov.f32	s4, s10
 800221e:	eef0 2a65 	vmov.f32	s5, s11
 8002222:	eeb0 1a46 	vmov.f32	s2, s12
 8002226:	eef0 1a66 	vmov.f32	s3, s13
 800222a:	eeb0 0a47 	vmov.f32	s0, s14
 800222e:	eef0 0a67 	vmov.f32	s1, s15
 8002232:	4610      	mov	r0, r2
 8002234:	f000 fca9 	bl	8002b8a <_ZN3PID10SetTuningsEddd>
    // if(brake)  engageBrake(); //use brake if there is one
    if (brake.valid != 0)  engageBrake(); //use brake if there is one
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223a:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <_ZN13RoverArmMotor5beginEdddddd+0x130>
 8002242:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002244:	f000 f9b5 	bl	80025b2 <_ZN13RoverArmMotor11engageBrakeEv>

    //initialize the multiplier bool to false and the multiplier to 1. 
    wrist_waist = false; 
 8002248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    //multiplier = 1;
    gearRatio = 1;  //TODO check if this is correct
 8002250:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <_ZN13RoverArmMotor5beginEdddddd+0x16c>)
 8002258:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150

}
 800225c:	bf00      	nop
 800225e:	3738      	adds	r7, #56	; 0x38
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	f3af 8000 	nop.w
 8002268:	00000000 	.word	0x00000000
 800226c:	4058c000 	.word	0x4058c000
 8002270:	00000000 	.word	0x00000000
 8002274:	40140000 	.word	0x40140000
 8002278:	43b38000 	.word	0x43b38000
 800227c:	00000000 	.word	0x00000000
 8002280:	457ff000 	.word	0x457ff000
 8002284:	3ff00000 	.word	0x3ff00000

08002288 <_ZN13RoverArmMotor4tickEv>:

int positive_rezeros = 0;
double real_angle = 0;

// Needs to be called in each loop
void RoverArmMotor::tick(){
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

    /*------------------Get current angle------------------*/
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    currentAngle = get_current_angle(); //TODO avg or not?
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f9a5 	bl	80025e0 <_ZN13RoverArmMotor17get_current_angleEv>
 8002296:	eeb0 7a40 	vmov.f32	s14, s0
 800229a:	eef0 7a60 	vmov.f32	s15, s1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118

      // Measurement deadband - ignore sub-degree noise
    if(abs(currentAngle - lastAngle) < 1.0){
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 80022b0:	f7fd ffea 	bl	8000288 <__aeabi_dsub>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	f7fe fc4c 	bl	8000b58 <__aeabi_d2iz>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bfb8      	it	lt
 80022c6:	425b      	neglt	r3, r3
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe f92b 	bl	8000524 <__aeabi_i2d>
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	4b80      	ldr	r3, [pc, #512]	; (80024d4 <_ZN13RoverArmMotor4tickEv+0x24c>)
 80022d4:	f7fe fc02 	bl	8000adc <__aeabi_dcmplt>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <_ZN13RoverArmMotor4tickEv+0x62>
        currentAngle = lastAngle;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
    }
    input = currentAngle; // range [0,359]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
   //------------------Compute PID------------------//
    // Compute distance, retune PID if necessary. Less aggressive tuning params for small errors
    // Find the shortest from the current position to the set point
    double gap; //mn297 could be negative

    if(wrist_waist){
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d052      	beq.n	80023a6 <_ZN13RoverArmMotor4tickEv+0x11e>
        (abs(setpoint-input) < abs((setpoint + 360.0f)-input)) ? //mn297 uesless cause always true
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800230c:	f7fd ffbc 	bl	8000288 <__aeabi_dsub>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	f7fe fc1e 	bl	8000b58 <__aeabi_d2iz>
 800231c:	4603      	mov	r3, r0
 800231e:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8002322:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	4b69      	ldr	r3, [pc, #420]	; (80024d8 <_ZN13RoverArmMotor4tickEv+0x250>)
 8002332:	f7fd ffab 	bl	800028c <__adddf3>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8002344:	f7fd ffa0 	bl	8000288 <__aeabi_dsub>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f7fe fc02 	bl	8000b58 <__aeabi_d2iz>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	bfb8      	it	lt
 800235a:	425b      	neglt	r3, r3
 800235c:	429c      	cmp	r4, r3
 800235e:	da0c      	bge.n	800237a <_ZN13RoverArmMotor4tickEv+0xf2>
        gap = setpoint - input : gap = (setpoint + 360.0f) - input; 
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800236c:	f7fd ff8c 	bl	8000288 <__aeabi_dsub>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002378:	e021      	b.n	80023be <_ZN13RoverArmMotor4tickEv+0x136>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	4b54      	ldr	r3, [pc, #336]	; (80024d8 <_ZN13RoverArmMotor4tickEv+0x250>)
 8002386:	f7fd ff81 	bl	800028c <__adddf3>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8002398:	f7fd ff76 	bl	8000288 <__aeabi_dsub>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80023a4:	e00b      	b.n	80023be <_ZN13RoverArmMotor4tickEv+0x136>
    }else{
        gap = setpoint - input;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80023b2:	f7fd ff69 	bl	8000288 <__aeabi_dsub>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
    // if(input <= lowestAngle || input >= highestAngle){
    //     setpoint = gearRatio * (lowestAngle + highestAngle) / 2 ;
    // }

    // Tone down P and I as the motor hones onto position
    if (abs(gap) < 10){
 80023be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023c2:	f7fe fbc9 	bl	8000b58 <__aeabi_d2iz>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bfb8      	it	lt
 80023cc:	425b      	neglt	r3, r3
 80023ce:	2b09      	cmp	r3, #9
 80023d0:	dc19      	bgt.n	8002406 <_ZN13RoverArmMotor4tickEv+0x17e>
        internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 80023e6:	eeb0 2a45 	vmov.f32	s4, s10
 80023ea:	eef0 2a65 	vmov.f32	s5, s11
 80023ee:	eeb0 1a46 	vmov.f32	s2, s12
 80023f2:	eef0 1a66 	vmov.f32	s3, s13
 80023f6:	eeb0 0a47 	vmov.f32	s0, s14
 80023fa:	eef0 0a67 	vmov.f32	s1, s15
 80023fe:	4610      	mov	r0, r2
 8002400:	f000 fbc3 	bl	8002b8a <_ZN3PID10SetTuningsEddd>
 8002404:	e018      	b.n	8002438 <_ZN13RoverArmMotor4tickEv+0x1b0>
    }else{
        internalPIDInstance.SetTunings(aggressiveKp, aggressiveKi, aggressiveKd);
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	ed93 5b26 	vldr	d5, [r3, #152]	; 0x98
 800241a:	eeb0 2a45 	vmov.f32	s4, s10
 800241e:	eef0 2a65 	vmov.f32	s5, s11
 8002422:	eeb0 1a46 	vmov.f32	s2, s12
 8002426:	eef0 1a66 	vmov.f32	s3, s13
 800242a:	eeb0 0a47 	vmov.f32	s0, s14
 800242e:	eef0 0a67 	vmov.f32	s1, s15
 8002432:	4610      	mov	r0, r2
 8002434:	f000 fba9 	bl	8002b8a <_ZN3PID10SetTuningsEddd>
    }
    internalPIDInstance.Compute(); // return value stored in output
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fa15 	bl	800286a <_ZN3PID7ComputeEv>
    // Make sure we aren't snapping our tendons - move back a little bit if we are
    // if(currentAngle >= (highestAngle - 2) && currentAngle <= (lowestAngle + 2)) output = 0.0;


    //------------------Write to motor------------------//
    if(escType == CYTRON){
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002446:	2b00      	cmp	r3, #0
 8002448:	d139      	bne.n	80024be <_ZN13RoverArmMotor4tickEv+0x236>

        // Interpret sign of the error signal as the direction pin value
        // (gap > 0) ? digitalWrite(dir, HIGH) : digitalWrite(dir, LOW); // invert if needed mn297
        if (gap > 0) {
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002456:	f7fe fb5f 	bl	8000b18 <__aeabi_dcmpgt>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <_ZN13RoverArmMotor4tickEv+0x1ee>
            HAL_GPIO_WritePin(dir.port, dir.pin, GPIO_PIN_SET); //mn297
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800246c:	2201      	movs	r2, #1
 800246e:	4619      	mov	r1, r3
 8002470:	f000 ffba 	bl	80033e8 <HAL_GPIO_WritePin>
 8002474:	e009      	b.n	800248a <_ZN13RoverArmMotor4tickEv+0x202>
        }
        else {
            HAL_GPIO_WritePin(dir.port, dir.pin, GPIO_PIN_RESET); //mn297
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002482:	2200      	movs	r2, #0
 8002484:	4619      	mov	r1, r3
 8002486:	f000 ffaf 	bl	80033e8 <HAL_GPIO_WritePin>
        }
        // Write to PWM pin
        //TODO port to HAL
        // analogWrite(pwm, abs(output)); //mn297 function execute quickly and jumps to next tick()
        double test_output = abs(output);     //smoothing
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	f7fe fb60 	bl	8000b58 <__aeabi_d2iz>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	bfb8      	it	lt
 800249e:	425b      	neglt	r3, r3
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f83f 	bl	8000524 <__aeabi_i2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (int) test_output);
 80024ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024b2:	f7fe fb51 	bl	8000b58 <__aeabi_d2iz>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <_ZN13RoverArmMotor4tickEv+0x254>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
    //     internalServoInstance.writeMicroseconds(output);
    // }


    //------------------Update angle------------------//
    lastAngle = currentAngle;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    
}
 80024ca:	bf00      	nop
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd90      	pop	{r4, r7, pc}
 80024d2:	bf00      	nop
 80024d4:	3ff00000 	.word	0x3ff00000
 80024d8:	40768000 	.word	0x40768000
 80024dc:	20000544 	.word	0x20000544

080024e0 <_ZN13RoverArmMotor11newSetpointEd>:
// For display purposes
double RoverArmMotor::getSetpoint(){
    return setpoint / gearRatio;
}

bool RoverArmMotor::newSetpoint(double angl){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	ed87 0b00 	vstr	d0, [r7]
    double setpoint_test = angl * gearRatio;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80024f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024f6:	f7fe f87f 	bl	80005f8 <__aeabi_dmul>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if(setpoint_test >= lowestAngle && setpoint_test <= highestAngle){
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8002508:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800250c:	f7fe fafa 	bl	8000b04 <__aeabi_dcmpge>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d010      	beq.n	8002538 <_ZN13RoverArmMotor11newSetpointEd+0x58>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 800251c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002520:	f7fe fae6 	bl	8000af0 <__aeabi_dcmple>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d006      	beq.n	8002538 <_ZN13RoverArmMotor11newSetpointEd+0x58>
        setpoint = setpoint_test;
 800252a:	68f9      	ldr	r1, [r7, #12]
 800252c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002530:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
        return true;
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <_ZN13RoverArmMotor11newSetpointEd+0x5a>
    }else{
        return false;
 8002538:	2300      	movs	r3, #0
    }
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_ZN13RoverArmMotor14setAngleLimitsEdd>:

// void RoverArmMotor::setGearRatio(double ratio){
//     gearRatio = ratio;
// }

void RoverArmMotor::setAngleLimits(double lowest, double highest){
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	6178      	str	r0, [r7, #20]
 800254a:	ed87 0b02 	vstr	d0, [r7, #8]
 800254e:	ed87 1b00 	vstr	d1, [r7]
    lowestAngle = lowest * gearRatio;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 8002558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800255c:	f7fe f84c 	bl	80005f8 <__aeabi_dmul>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	6979      	ldr	r1, [r7, #20]
 8002566:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = highest * gearRatio;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 8002570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002574:	f7fe f840 	bl	80005f8 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	6979      	ldr	r1, [r7, #20]
 800257e:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_ZN13RoverArmMotor14set_zero_angleEv>:

void RoverArmMotor::set_zero_angle(){
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
    setZeroSPI(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 80025a4:	2300      	movs	r3, #0
 80025a6:	f004 fb3c 	bl	8006c22 <setZeroSPI>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <_ZN13RoverArmMotor11engageBrakeEv>:
    //   digitalWrite(brake, LOW);  
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_RESET); //mn297
    }
}

void RoverArmMotor::engageBrake(){
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
    if(brake.valid != 0){
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d009      	beq.n	80025d8 <_ZN13RoverArmMotor11engageBrakeEv+0x26>
    //    digitalWrite(brake, HIGH); 
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_SET); //mn297
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80025d0:	2201      	movs	r2, #1
 80025d2:	4619      	mov	r1, r3
 80025d4:	f000 ff08 	bl	80033e8 <HAL_GPIO_WritePin>
    }
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_ZN13RoverArmMotor17get_current_angleEv>:
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
    adcResult = internalAveragerInstance.reading(encoderData);  // implicit cast to int
    currentAngle = mapFloat((float) adcResult, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
    return currentAngle / gearRatio;
}
double RoverArmMotor::get_current_angle(){    //mn297
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 80025fa:	2300      	movs	r3, #0
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	230c      	movs	r3, #12
 8002600:	f004 fa7f 	bl	8006b02 <getPositionSPI>
 8002604:	4603      	mov	r3, r0
 8002606:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 8002608:	89fb      	ldrh	r3, [r7, #14]
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002612:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8002660 <_ZN13RoverArmMotor17get_current_angleEv+0x80>
 8002616:	eddf 1a13 	vldr	s3, [pc, #76]	; 8002664 <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 800261a:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8002668 <_ZN13RoverArmMotor17get_current_angleEv+0x88>
 800261e:	eddf 0a11 	vldr	s1, [pc, #68]	; 8002664 <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 8002622:	eeb0 0a67 	vmov.f32	s0, s15
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f820 	bl	800266c <_ZN13RoverArmMotor8mapFloatEfffff>
 800262c:	eeb0 7a40 	vmov.f32	s14, s0
 8002630:	eef0 7a60 	vmov.f32	s15, s1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    return currentAngle / gearRatio;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8002646:	f7fe f901 	bl	800084c <__aeabi_ddiv>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002652:	eeb0 0a47 	vmov.f32	s0, s14
 8002656:	eef0 0a67 	vmov.f32	s1, s15
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	43b38000 	.word	0x43b38000
 8002664:	00000000 	.word	0x00000000
 8002668:	457ff000 	.word	0x457ff000

0800266c <_ZN13RoverArmMotor8mapFloatEfffff>:
double RoverArmMotor::getCurrentOutput(){
    return output;
}

double RoverArmMotor::mapFloat(float x, float in_min, float in_max, float out_min, float out_max){
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	6178      	str	r0, [r7, #20]
 8002674:	ed87 0a04 	vstr	s0, [r7, #16]
 8002678:	edc7 0a03 	vstr	s1, [r7, #12]
 800267c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002680:	edc7 1a01 	vstr	s3, [r7, #4]
 8002684:	ed87 2a00 	vstr	s4, [r7]
    double result = ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8002688:	ed97 7a04 	vldr	s14, [r7, #16]
 800268c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002690:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002694:	edd7 6a00 	vldr	s13, [r7]
 8002698:	edd7 7a01 	vldr	s15, [r7, #4]
 800269c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80026a0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80026a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80026a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80026ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80026b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026bc:	ee17 0a90 	vmov	r0, s15
 80026c0:	f7fd ff42 	bl	8000548 <__aeabi_f2d>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result; 
 80026cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d0:	ec43 2b17 	vmov	d7, r2, r3
    }
 80026d4:	eeb0 0a47 	vmov.f32	s0, s14
 80026d8:	eef0 0a67 	vmov.f32	s1, s15
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <_ZN9movingAvg5beginEv>:

#include <movingAvg.h>

// initialize - allocate the interval array
void movingAvg::begin()
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
    m_readings = new int[m_interval];
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d201      	bcs.n	80026fa <_ZN9movingAvg5beginEv+0x18>
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	e001      	b.n	80026fe <_ZN9movingAvg5beginEv+0x1c>
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295
 80026fe:	4618      	mov	r0, r3
 8002700:	f004 fafa 	bl	8006cf8 <_Znaj>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	611a      	str	r2, [r3, #16]
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	0000      	movs	r0, r0
	...

08002718 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~ Constructor ~~~~~~~~~~~~~~~~ */
PID::PID() { }

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6278      	str	r0, [r7, #36]	; 0x24
 8002720:	6239      	str	r1, [r7, #32]
 8002722:	61fa      	str	r2, [r7, #28]
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	ed87 0b04 	vstr	d0, [r7, #16]
 800272a:	ed87 1b02 	vstr	d1, [r7, #8]
 800272e:	ed87 2b00 	vstr	d2, [r7]
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_myOutput   = Output;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	645a      	str	r2, [r3, #68]	; 0x44
	_myInput    = Input;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	6a3a      	ldr	r2, [r7, #32]
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
	_mySetpoint = Setpoint;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	649a      	str	r2, [r3, #72]	; 0x48
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	2200      	movs	r2, #0
 8002748:	705a      	strb	r2, [r3, #1]
	
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 800274a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80027a0 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x88>
 800274e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80027a8 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x90>
 8002752:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002754:	f000 f9ab 	bl	8002aae <_ZN3PID15SetOutputLimitsEdd>
	
	_sampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	2264      	movs	r2, #100	; 0x64
 800275c:	609a      	str	r2, [r3, #8]
	
	PID::SetControllerDirection(ControllerDirection);
 800275e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002762:	4619      	mov	r1, r3
 8002764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002766:	f000 fad3 	bl	8002d10 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>
	PID::SetTunings(Kp, Ki, Kd, POn);
 800276a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800276e:	4619      	mov	r1, r3
 8002770:	ed97 2b00 	vldr	d2, [r7]
 8002774:	ed97 1b02 	vldr	d1, [r7, #8]
 8002778:	ed97 0b04 	vldr	d0, [r7, #16]
 800277c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800277e:	f000 fa1f 	bl	8002bc0 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
	
	_lastTime = GetTime() - _sampleTime;
 8002782:	f000 fb75 	bl	8002e70 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	1ad2      	subs	r2, r2, r3
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	605a      	str	r2, [r3, #4]
	
}
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	4618      	mov	r0, r3
 8002796:	3728      	adds	r7, #40	; 0x28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	f3af 8000 	nop.w
 80027a0:	00000000 	.word	0x00000000
 80027a4:	406fe000 	.word	0x406fe000
	...

080027b0 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>:

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection) : PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection)
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	; 0x30
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	6278      	str	r0, [r7, #36]	; 0x24
 80027b8:	6239      	str	r1, [r7, #32]
 80027ba:	61fa      	str	r2, [r7, #28]
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	ed87 0b04 	vstr	d0, [r7, #16]
 80027c2:	ed87 1b02 	vstr	d1, [r7, #8]
 80027c6:	ed87 2b00 	vstr	d2, [r7]
 80027ca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	2301      	movs	r3, #1
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	ed97 2b00 	vldr	d2, [r7]
 80027d8:	ed97 1b02 	vldr	d1, [r7, #8]
 80027dc:	ed97 0b04 	vldr	d0, [r7, #16]
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	6a39      	ldr	r1, [r7, #32]
 80027e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027e8:	f7ff ff96 	bl	8002718 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>
{ }
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	4618      	mov	r0, r3
 80027f0:	3728      	adds	r7, #40	; 0x28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_ZN3PID4InitEv>:



/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	_lastInput = *_myInput;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (_outputSum > _outMax)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002826:	f7fe f977 	bl	8000b18 <__aeabi_dcmpgt>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <_ZN3PID4InitEv+0x48>
	{
		_outputSum = _outMax;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		_outputSum = _outMin;
	}
	else { }	
	
}
 800283c:	e011      	b.n	8002862 <_ZN3PID4InitEv+0x6c>
	else if (_outputSum < _outMin)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800284a:	f7fe f947 	bl	8000adc <__aeabi_dcmplt>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d100      	bne.n	8002856 <_ZN3PID4InitEv+0x60>
}
 8002854:	e005      	b.n	8002862 <_ZN3PID4InitEv+0x6c>
		_outputSum = _outMin;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <_ZN3PID7ComputeEv>:
	PID::Init(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID::Compute(void)
{
 800286a:	b5b0      	push	{r4, r5, r7, lr}
 800286c:	b08c      	sub	sp, #48	; 0x30
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!_inAuto)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	785b      	ldrb	r3, [r3, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <_ZN3PID7ComputeEv+0x14>
	{
		return _FALSE;
 800287a:	2300      	movs	r3, #0
 800287c:	e0f5      	b.n	8002a6a <_ZN3PID7ComputeEv+0x200>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 800287e:	f000 faf7 	bl	8002e70 <HAL_GetTick>
 8002882:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - _lastTime);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= _sampleTime)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	6a3a      	ldr	r2, [r7, #32]
 8002894:	429a      	cmp	r2, r3
 8002896:	f0c0 80e7 	bcc.w	8002a68 <_ZN3PID7ComputeEv+0x1fe>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *_myInput;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = abs(*_mySetpoint - input);	//mn297 fix
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028b2:	f7fd fce9 	bl	8000288 <__aeabi_dsub>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f7fe f94b 	bl	8000b58 <__aeabi_d2iz>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bfb8      	it	lt
 80028c8:	425b      	neglt	r3, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fe2a 	bl	8000524 <__aeabi_i2d>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = abs(input - _lastInput);		//mn297 fix TODO: check if this is correct
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80028de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028e2:	f7fd fcd1 	bl	8000288 <__aeabi_dsub>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7fe f933 	bl	8000b58 <__aeabi_d2iz>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bfb8      	it	lt
 80028f8:	425b      	neglt	r3, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fe12 	bl	8000524 <__aeabi_i2d>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		_outputSum += (_ki * error);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002914:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002918:	f7fd fe6e 	bl	80005f8 <__aeabi_dmul>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4620      	mov	r0, r4
 8002922:	4629      	mov	r1, r5
 8002924:	f7fd fcb2 	bl	800028c <__adddf3>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!_pOnE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d114      	bne.n	8002964 <_ZN3PID7ComputeEv+0xfa>
		{
			_outputSum -= _kp * dInput;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002946:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800294a:	f7fd fe55 	bl	80005f8 <__aeabi_dmul>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4620      	mov	r0, r4
 8002954:	4629      	mov	r1, r5
 8002956:	f7fd fc97 	bl	8000288 <__aeabi_dsub>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (_outputSum > _outMax)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002970:	f7fe f8d2 	bl	8000b18 <__aeabi_dcmpgt>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <_ZN3PID7ComputeEv+0x11e>
		{
			_outputSum = _outMax;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002986:	e010      	b.n	80029aa <_ZN3PID7ComputeEv+0x140>
		}
		else if (_outputSum < _outMin)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002994:	f7fe f8a2 	bl	8000adc <__aeabi_dcmplt>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <_ZN3PID7ComputeEv+0x140>
		{
			_outputSum = _outMin;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (_pOnE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <_ZN3PID7ComputeEv+0x160>
		{
			output = _kp * error;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80029b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029bc:	f7fd fe1c 	bl	80005f8 <__aeabi_dmul>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80029c8:	e005      	b.n	80029d6 <_ZN3PID7ComputeEv+0x16c>
		}
		else
		{
			output = 0;
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += _outputSum - _kd * dInput;		//TODO check if this is correct mn297
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80029e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029e6:	f7fd fe07 	bl	80005f8 <__aeabi_dmul>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4620      	mov	r0, r4
 80029f0:	4629      	mov	r1, r5
 80029f2:	f7fd fc49 	bl	8000288 <__aeabi_dsub>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029fe:	f7fd fc45 	bl	800028c <__adddf3>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > _outMax)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a14:	f7fe f880 	bl	8000b18 <__aeabi_dcmpgt>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <_ZN3PID7ComputeEv+0x1c0>
		{
			output = _outMax;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a24:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002a28:	e00e      	b.n	8002a48 <_ZN3PID7ComputeEv+0x1de>
		}
		else if (output < _outMin)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a30:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a34:	f7fe f852 	bl	8000adc <__aeabi_dcmplt>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <_ZN3PID7ComputeEv+0x1de>
		{
			output = _outMin;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a44:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*_myOutput = output;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a50:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		_lastInput = input;
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a5a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		_lastTime  = now;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a62:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <_ZN3PID7ComputeEv+0x200>
		
	}
	else
	{
		return _FALSE;
 8002a68:	2300      	movs	r3, #0
	}
	
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3730      	adds	r7, #48	; 0x30
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bdb0      	pop	{r4, r5, r7, pc}

08002a72 <_ZN3PID7SetModeE15PIDMode_TypeDef>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID::SetMode(PIDMode_TypeDef Mode)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !_inAuto)
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d006      	beq.n	8002aa0 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	785b      	ldrb	r3, [r3, #1]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
	{
		Init();
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff feab 	bl	80027f6 <_ZN3PID4InitEv>
	}
	
	_inAuto = (PIDMode_TypeDef)newAuto;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	705a      	strb	r2, [r3, #1]
	
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <_ZN3PID15SetOutputLimitsEdd>:
	return _inAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(double Min, double Max)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b086      	sub	sp, #24
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6178      	str	r0, [r7, #20]
 8002ab6:	ed87 0b02 	vstr	d0, [r7, #8]
 8002aba:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002abe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ac2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ac6:	f7fe f81d 	bl	8000b04 <__aeabi_dcmpge>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d158      	bne.n	8002b82 <_ZN3PID15SetOutputLimitsEdd+0xd4>
	{
		return;
	}
	
	_outMin = Min;
 8002ad0:	6979      	ldr	r1, [r7, #20]
 8002ad2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	_outMax = Max;
 8002ada:	6979      	ldr	r1, [r7, #20]
 8002adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ae0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	785b      	ldrb	r3, [r3, #1]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d04b      	beq.n	8002b84 <_ZN3PID15SetOutputLimitsEdd+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002afa:	f7fe f80d 	bl	8000b18 <__aeabi_dcmpgt>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <_ZN3PID15SetOutputLimitsEdd+0x66>
		{
			*_myOutput = _outMax;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002b0e:	e9c1 2300 	strd	r2, r3, [r1]
 8002b12:	e012      	b.n	8002b3a <_ZN3PID15SetOutputLimitsEdd+0x8c>
		}
		else if (*_myOutput < _outMin)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002b22:	f7fd ffdb 	bl	8000adc <__aeabi_dcmplt>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d006      	beq.n	8002b3a <_ZN3PID15SetOutputLimitsEdd+0x8c>
		{
			*_myOutput = _outMin;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002b36:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002b46:	f7fd ffe7 	bl	8000b18 <__aeabi_dcmpgt>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d006      	beq.n	8002b5e <_ZN3PID15SetOutputLimitsEdd+0xb0>
		{
			_outputSum = _outMax;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002b56:	6979      	ldr	r1, [r7, #20]
 8002b58:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002b5c:	e012      	b.n	8002b84 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		}
		else if (_outputSum < _outMin)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002b6a:	f7fd ffb7 	bl	8000adc <__aeabi_dcmplt>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		{
			_outputSum = _outMin;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002b7a:	6979      	ldr	r1, [r7, #20]
 8002b7c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002b80:	e000      	b.n	8002b84 <_ZN3PID15SetOutputLimitsEdd+0xd6>
		return;
 8002b82:	bf00      	nop
		}
		else { }
		
	}
	
}
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <_ZN3PID10SetTuningsEddd>:

/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID::SetTunings(double Kp, double Ki, double Kd)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b088      	sub	sp, #32
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	61f8      	str	r0, [r7, #28]
 8002b92:	ed87 0b04 	vstr	d0, [r7, #16]
 8002b96:	ed87 1b02 	vstr	d1, [r7, #8]
 8002b9a:	ed87 2b00 	vstr	d2, [r7]
	PID::SetTunings(Kp, Ki, Kd, _pOn);
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	789b      	ldrb	r3, [r3, #2]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	ed97 2b00 	vldr	d2, [r7]
 8002ba8:	ed97 1b02 	vldr	d1, [r7, #8]
 8002bac:	ed97 0b04 	vldr	d0, [r7, #16]
 8002bb0:	69f8      	ldr	r0, [r7, #28]
 8002bb2:	f000 f805 	bl	8002bc0 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
}
 8002bb6:	bf00      	nop
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>:
void PID::SetTunings(double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	61f8      	str	r0, [r7, #28]
 8002bc8:	ed87 0b04 	vstr	d0, [r7, #16]
 8002bcc:	ed87 1b02 	vstr	d1, [r7, #8]
 8002bd0:	ed87 2b00 	vstr	d2, [r7]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002be4:	f7fd ff7a 	bl	8000adc <__aeabi_dcmplt>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 8089 	bne.w	8002d02 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bfc:	f7fd ff6e 	bl	8000adc <__aeabi_dcmplt>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d17d      	bne.n	8002d02 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c12:	f7fd ff63 	bl	8000adc <__aeabi_dcmplt>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d172      	bne.n	8002d02 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	_pOn    = POn;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	7efa      	ldrb	r2, [r7, #27]
 8002c20:	709a      	strb	r2, [r3, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002c22:	7efb      	ldrb	r3, [r7, #27]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	701a      	strb	r2, [r3, #0]

	_dispKp = Kp;
 8002c34:	69f9      	ldr	r1, [r7, #28]
 8002c36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c3a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_dispKi = Ki;
 8002c3e:	69f9      	ldr	r1, [r7, #28]
 8002c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c44:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_dispKd = Kd;
 8002c48:	69f9      	ldr	r1, [r7, #28]
 8002c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c4e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)_sampleTime) / 1000;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fc54 	bl	8000504 <__aeabi_ui2d>
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x14c>)
 8002c62:	f7fd fdf3 	bl	800084c <__aeabi_ddiv>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	_kp = Kp;
 8002c6e:	69f9      	ldr	r1, [r7, #28]
 8002c70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c74:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	_ki = Ki * SampleTimeInSec;
 8002c78:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c80:	f7fd fcba 	bl	80005f8 <__aeabi_dmul>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	69f9      	ldr	r1, [r7, #28]
 8002c8a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	_kd = Kd / SampleTimeInSec;
 8002c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c96:	f7fd fdd9 	bl	800084c <__aeabi_ddiv>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	69f9      	ldr	r1, [r7, #28]
 8002ca0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (_controllerDirection == _PID_CD_REVERSE)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	78db      	ldrb	r3, [r3, #3]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d12b      	bne.n	8002d04 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
	{
		
		_kp = (0 - _kp);
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002cb2:	f04f 0000 	mov.w	r0, #0
 8002cb6:	f04f 0100 	mov.w	r1, #0
 8002cba:	f7fd fae5 	bl	8000288 <__aeabi_dsub>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	69f9      	ldr	r1, [r7, #28]
 8002cc4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002cce:	f04f 0000 	mov.w	r0, #0
 8002cd2:	f04f 0100 	mov.w	r1, #0
 8002cd6:	f7fd fad7 	bl	8000288 <__aeabi_dsub>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	69f9      	ldr	r1, [r7, #28]
 8002ce0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002cea:	f04f 0000 	mov.w	r0, #0
 8002cee:	f04f 0100 	mov.w	r1, #0
 8002cf2:	f7fd fac9 	bl	8000288 <__aeabi_dsub>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	69f9      	ldr	r1, [r7, #28]
 8002cfc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002d00:	e000      	b.n	8002d04 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
		return;
 8002d02:	bf00      	nop
		
	}
	
}
 8002d04:	3728      	adds	r7, #40	; 0x28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	408f4000 	.word	0x408f4000

08002d10 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	785b      	ldrb	r3, [r3, #1]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d02e      	beq.n	8002d82 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	78db      	ldrb	r3, [r3, #3]
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d029      	beq.n	8002d82 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
	{
		
		_kp = (0 - _kp);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002d34:	f04f 0000 	mov.w	r0, #0
 8002d38:	f04f 0100 	mov.w	r1, #0
 8002d3c:	f7fd faa4 	bl	8000288 <__aeabi_dsub>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002d50:	f04f 0000 	mov.w	r0, #0
 8002d54:	f04f 0100 	mov.w	r1, #0
 8002d58:	f7fd fa96 	bl	8000288 <__aeabi_dsub>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d6c:	f04f 0000 	mov.w	r0, #0
 8002d70:	f04f 0100 	mov.w	r1, #0
 8002d74:	f7fd fa88 	bl	8000288 <__aeabi_dsub>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	_controllerDirection = Direction;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	70da      	strb	r2, [r3, #3]
	
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <HAL_Init+0x3c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <HAL_Init+0x3c>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da6:	2003      	movs	r0, #3
 8002da8:	f000 f962 	bl	8003070 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dac:	2000      	movs	r0, #0
 8002dae:	f000 f80f 	bl	8002dd0 <HAL_InitTick>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	71fb      	strb	r3, [r7, #7]
 8002dbc:	e001      	b.n	8002dc2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dbe:	f7fe fd47 	bl	8001850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40022000 	.word	0x40022000

08002dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ddc:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <HAL_InitTick+0x6c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d023      	beq.n	8002e2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_InitTick+0x70>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <HAL_InitTick+0x6c>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4619      	mov	r1, r3
 8002dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f96d 	bl	80030da <HAL_SYSTICK_Config>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10f      	bne.n	8002e26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d809      	bhi.n	8002e20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f000 f937 	bl	8003086 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e18:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <HAL_InitTick+0x74>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e007      	b.n	8002e30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e004      	b.n	8002e30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	e001      	b.n	8002e30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000038 	.word	0x20000038
 8002e40:	20000030 	.word	0x20000030
 8002e44:	20000034 	.word	0x20000034

08002e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_IncTick+0x20>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_IncTick+0x24>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <HAL_IncTick+0x24>)
 8002e5a:	6013      	str	r3, [r2, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000038 	.word	0x20000038
 8002e6c:	20000614 	.word	0x20000614

08002e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return uwTick;
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <HAL_GetTick+0x14>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000614 	.word	0x20000614

08002e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7ff ffee 	bl	8002e70 <HAL_GetTick>
 8002e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d005      	beq.n	8002eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <HAL_Delay+0x44>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eae:	bf00      	nop
 8002eb0:	f7ff ffde 	bl	8002e70 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d8f7      	bhi.n	8002eb0 <HAL_Delay+0x28>
  {
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000038 	.word	0x20000038

08002ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eec:	4013      	ands	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f02:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	60d3      	str	r3, [r2, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <__NVIC_GetPriorityGrouping+0x18>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	f003 0307 	and.w	r3, r3, #7
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db0b      	blt.n	8002f5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	f003 021f 	and.w	r2, r3, #31
 8002f4c:	4907      	ldr	r1, [pc, #28]	; (8002f6c <__NVIC_EnableIRQ+0x38>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2001      	movs	r0, #1
 8002f56:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	db0a      	blt.n	8002f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	490c      	ldr	r1, [pc, #48]	; (8002fbc <__NVIC_SetPriority+0x4c>)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	0112      	lsls	r2, r2, #4
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	440b      	add	r3, r1
 8002f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f98:	e00a      	b.n	8002fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	4908      	ldr	r1, [pc, #32]	; (8002fc0 <__NVIC_SetPriority+0x50>)
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	3b04      	subs	r3, #4
 8002fa8:	0112      	lsls	r2, r2, #4
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	440b      	add	r3, r1
 8002fae:	761a      	strb	r2, [r3, #24]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000e100 	.word	0xe000e100
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f1c3 0307 	rsb	r3, r3, #7
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	bf28      	it	cs
 8002fe2:	2304      	movcs	r3, #4
 8002fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d902      	bls.n	8002ff4 <NVIC_EncodePriority+0x30>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3b03      	subs	r3, #3
 8002ff2:	e000      	b.n	8002ff6 <NVIC_EncodePriority+0x32>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43da      	mvns	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	401a      	ands	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800300c:	f04f 31ff 	mov.w	r1, #4294967295
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa01 f303 	lsl.w	r3, r1, r3
 8003016:	43d9      	mvns	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	4313      	orrs	r3, r2
         );
}
 800301e:	4618      	mov	r0, r3
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800303c:	d301      	bcc.n	8003042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800303e:	2301      	movs	r3, #1
 8003040:	e00f      	b.n	8003062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <SysTick_Config+0x40>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800304a:	210f      	movs	r1, #15
 800304c:	f04f 30ff 	mov.w	r0, #4294967295
 8003050:	f7ff ff8e 	bl	8002f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <SysTick_Config+0x40>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800305a:	4b04      	ldr	r3, [pc, #16]	; (800306c <SysTick_Config+0x40>)
 800305c:	2207      	movs	r2, #7
 800305e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	e000e010 	.word	0xe000e010

08003070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ff29 	bl	8002ed0 <__NVIC_SetPriorityGrouping>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003098:	f7ff ff3e 	bl	8002f18 <__NVIC_GetPriorityGrouping>
 800309c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f7ff ff8e 	bl	8002fc4 <NVIC_EncodePriority>
 80030a8:	4602      	mov	r2, r0
 80030aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff5d 	bl	8002f70 <__NVIC_SetPriority>
}
 80030b6:	bf00      	nop
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	4603      	mov	r3, r0
 80030c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff31 	bl	8002f34 <__NVIC_EnableIRQ>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ffa2 	bl	800302c <SysTick_Config>
 80030e8:	4603      	mov	r3, r0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003102:	e154      	b.n	80033ae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	4013      	ands	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8146 	beq.w	80033a8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d005      	beq.n	8003134 <HAL_GPIO_Init+0x40>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d130      	bne.n	8003196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	2203      	movs	r2, #3
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800316a:	2201      	movs	r2, #1
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f003 0201 	and.w	r2, r3, #1
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d017      	beq.n	80031d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	2203      	movs	r2, #3
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d123      	bne.n	8003226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	08da      	lsrs	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3208      	adds	r2, #8
 80031e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	220f      	movs	r2, #15
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	08da      	lsrs	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3208      	adds	r2, #8
 8003220:	6939      	ldr	r1, [r7, #16]
 8003222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	2203      	movs	r2, #3
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0203 	and.w	r2, r3, #3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80a0 	beq.w	80033a8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003268:	4b58      	ldr	r3, [pc, #352]	; (80033cc <HAL_GPIO_Init+0x2d8>)
 800326a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326c:	4a57      	ldr	r2, [pc, #348]	; (80033cc <HAL_GPIO_Init+0x2d8>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6613      	str	r3, [r2, #96]	; 0x60
 8003274:	4b55      	ldr	r3, [pc, #340]	; (80033cc <HAL_GPIO_Init+0x2d8>)
 8003276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003280:	4a53      	ldr	r2, [pc, #332]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	3302      	adds	r3, #2
 8003288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	220f      	movs	r2, #15
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032aa:	d019      	beq.n	80032e0 <HAL_GPIO_Init+0x1ec>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a49      	ldr	r2, [pc, #292]	; (80033d4 <HAL_GPIO_Init+0x2e0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d013      	beq.n	80032dc <HAL_GPIO_Init+0x1e8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a48      	ldr	r2, [pc, #288]	; (80033d8 <HAL_GPIO_Init+0x2e4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00d      	beq.n	80032d8 <HAL_GPIO_Init+0x1e4>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a47      	ldr	r2, [pc, #284]	; (80033dc <HAL_GPIO_Init+0x2e8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d007      	beq.n	80032d4 <HAL_GPIO_Init+0x1e0>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a46      	ldr	r2, [pc, #280]	; (80033e0 <HAL_GPIO_Init+0x2ec>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_GPIO_Init+0x1dc>
 80032cc:	2304      	movs	r3, #4
 80032ce:	e008      	b.n	80032e2 <HAL_GPIO_Init+0x1ee>
 80032d0:	2307      	movs	r3, #7
 80032d2:	e006      	b.n	80032e2 <HAL_GPIO_Init+0x1ee>
 80032d4:	2303      	movs	r3, #3
 80032d6:	e004      	b.n	80032e2 <HAL_GPIO_Init+0x1ee>
 80032d8:	2302      	movs	r3, #2
 80032da:	e002      	b.n	80032e2 <HAL_GPIO_Init+0x1ee>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <HAL_GPIO_Init+0x1ee>
 80032e0:	2300      	movs	r3, #0
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	f002 0203 	and.w	r2, r2, #3
 80032e8:	0092      	lsls	r2, r2, #2
 80032ea:	4093      	lsls	r3, r2
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032f2:	4937      	ldr	r1, [pc, #220]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	089b      	lsrs	r3, r3, #2
 80032f8:	3302      	adds	r3, #2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003300:	4b38      	ldr	r3, [pc, #224]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43db      	mvns	r3, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003324:	4a2f      	ldr	r2, [pc, #188]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800332a:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800334e:	4a25      	ldr	r2, [pc, #148]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003354:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	43db      	mvns	r3, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003378:	4a1a      	ldr	r2, [pc, #104]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800337e:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033a2:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	3301      	adds	r3, #1
 80033ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f47f aea3 	bne.w	8003104 <HAL_GPIO_Init+0x10>
  }
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40010000 	.word	0x40010000
 80033d4:	48000400 	.word	0x48000400
 80033d8:	48000800 	.word	0x48000800
 80033dc:	48000c00 	.word	0x48000c00
 80033e0:	48001000 	.word	0x48001000
 80033e4:	40010400 	.word	0x40010400

080033e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	807b      	strh	r3, [r7, #2]
 80033f4:	4613      	mov	r3, r2
 80033f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f8:	787b      	ldrb	r3, [r7, #1]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033fe:	887a      	ldrh	r2, [r7, #2]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003404:	e002      	b.n	800340c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800342e:	4a05      	ldr	r2, [pc, #20]	; (8003444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe f81c 	bl	8001474 <HAL_GPIO_EXTI_Callback>
  }
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40010400 	.word	0x40010400

08003448 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <HAL_PWREx_GetVoltageRange+0x18>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40007000 	.word	0x40007000

08003464 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003472:	d130      	bne.n	80034d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003474:	4b23      	ldr	r3, [pc, #140]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800347c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003480:	d038      	beq.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800348a:	4a1e      	ldr	r2, [pc, #120]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800348c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003490:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2232      	movs	r2, #50	; 0x32
 8003498:	fb02 f303 	mul.w	r3, r2, r3
 800349c:	4a1b      	ldr	r2, [pc, #108]	; (800350c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	0c9b      	lsrs	r3, r3, #18
 80034a4:	3301      	adds	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a8:	e002      	b.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034b0:	4b14      	ldr	r3, [pc, #80]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034bc:	d102      	bne.n	80034c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f2      	bne.n	80034aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d0:	d110      	bne.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e00f      	b.n	80034f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e2:	d007      	beq.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034e4:	4b07      	ldr	r3, [pc, #28]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034ec:	4a05      	ldr	r2, [pc, #20]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40007000 	.word	0x40007000
 8003508:	20000030 	.word	0x20000030
 800350c:	431bde83 	.word	0x431bde83

08003510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f000 bc02 	b.w	8003d28 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003524:	4b96      	ldr	r3, [pc, #600]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800352e:	4b94      	ldr	r3, [pc, #592]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80e4 	beq.w	800370e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <HAL_RCC_OscConfig+0x4c>
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b0c      	cmp	r3, #12
 8003550:	f040 808b 	bne.w	800366a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2b01      	cmp	r3, #1
 8003558:	f040 8087 	bne.w	800366a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800355c:	4b88      	ldr	r3, [pc, #544]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_OscConfig+0x64>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e3d9      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1a      	ldr	r2, [r3, #32]
 8003578:	4b81      	ldr	r3, [pc, #516]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d004      	beq.n	800358e <HAL_RCC_OscConfig+0x7e>
 8003584:	4b7e      	ldr	r3, [pc, #504]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800358c:	e005      	b.n	800359a <HAL_RCC_OscConfig+0x8a>
 800358e:	4b7c      	ldr	r3, [pc, #496]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800359a:	4293      	cmp	r3, r2
 800359c:	d223      	bcs.n	80035e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fd8c 	bl	80040c0 <RCC_SetFlashLatencyFromMSIRange>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e3ba      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035b2:	4b73      	ldr	r3, [pc, #460]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a72      	ldr	r2, [pc, #456]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80035b8:	f043 0308 	orr.w	r3, r3, #8
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b70      	ldr	r3, [pc, #448]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	496d      	ldr	r1, [pc, #436]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035d0:	4b6b      	ldr	r3, [pc, #428]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	4968      	ldr	r1, [pc, #416]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
 80035e4:	e025      	b.n	8003632 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e6:	4b66      	ldr	r3, [pc, #408]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a65      	ldr	r2, [pc, #404]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80035ec:	f043 0308 	orr.w	r3, r3, #8
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	4b63      	ldr	r3, [pc, #396]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	4960      	ldr	r1, [pc, #384]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003604:	4b5e      	ldr	r3, [pc, #376]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	495b      	ldr	r1, [pc, #364]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fd4c 	bl	80040c0 <RCC_SetFlashLatencyFromMSIRange>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e37a      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003632:	f000 fc81 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 8003636:	4602      	mov	r2, r0
 8003638:	4b51      	ldr	r3, [pc, #324]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	4950      	ldr	r1, [pc, #320]	; (8003784 <HAL_RCC_OscConfig+0x274>)
 8003644:	5ccb      	ldrb	r3, [r1, r3]
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	fa22 f303 	lsr.w	r3, r2, r3
 800364e:	4a4e      	ldr	r2, [pc, #312]	; (8003788 <HAL_RCC_OscConfig+0x278>)
 8003650:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003652:	4b4e      	ldr	r3, [pc, #312]	; (800378c <HAL_RCC_OscConfig+0x27c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fbba 	bl	8002dd0 <HAL_InitTick>
 800365c:	4603      	mov	r3, r0
 800365e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d052      	beq.n	800370c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	e35e      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d032      	beq.n	80036d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003672:	4b43      	ldr	r3, [pc, #268]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a42      	ldr	r2, [pc, #264]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800367e:	f7ff fbf7 	bl	8002e70 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003686:	f7ff fbf3 	bl	8002e70 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e347      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003698:	4b39      	ldr	r3, [pc, #228]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036a4:	4b36      	ldr	r3, [pc, #216]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a35      	ldr	r2, [pc, #212]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80036aa:	f043 0308 	orr.w	r3, r3, #8
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b33      	ldr	r3, [pc, #204]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4930      	ldr	r1, [pc, #192]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036c2:	4b2f      	ldr	r3, [pc, #188]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	492b      	ldr	r1, [pc, #172]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]
 80036d6:	e01a      	b.n	800370e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036d8:	4b29      	ldr	r3, [pc, #164]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a28      	ldr	r2, [pc, #160]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036e4:	f7ff fbc4 	bl	8002e70 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036ec:	f7ff fbc0 	bl	8002e70 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e314      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x1dc>
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800370c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d073      	beq.n	8003802 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d005      	beq.n	800372c <HAL_RCC_OscConfig+0x21c>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d10e      	bne.n	8003744 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d10b      	bne.n	8003744 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d063      	beq.n	8003800 <HAL_RCC_OscConfig+0x2f0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d15f      	bne.n	8003800 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e2f1      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374c:	d106      	bne.n	800375c <HAL_RCC_OscConfig+0x24c>
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a0b      	ldr	r2, [pc, #44]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e025      	b.n	80037a8 <HAL_RCC_OscConfig+0x298>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003764:	d114      	bne.n	8003790 <HAL_RCC_OscConfig+0x280>
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a05      	ldr	r2, [pc, #20]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 800376c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b03      	ldr	r3, [pc, #12]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a02      	ldr	r2, [pc, #8]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e013      	b.n	80037a8 <HAL_RCC_OscConfig+0x298>
 8003780:	40021000 	.word	0x40021000
 8003784:	0800a17c 	.word	0x0800a17c
 8003788:	20000030 	.word	0x20000030
 800378c:	20000034 	.word	0x20000034
 8003790:	4ba0      	ldr	r3, [pc, #640]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a9f      	ldr	r2, [pc, #636]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 8003796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	4b9d      	ldr	r3, [pc, #628]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a9c      	ldr	r2, [pc, #624]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 80037a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d013      	beq.n	80037d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7ff fb5e 	bl	8002e70 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b8:	f7ff fb5a 	bl	8002e70 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e2ae      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ca:	4b92      	ldr	r3, [pc, #584]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x2a8>
 80037d6:	e014      	b.n	8003802 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7ff fb4a 	bl	8002e70 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e0:	f7ff fb46 	bl	8002e70 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e29a      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037f2:	4b88      	ldr	r3, [pc, #544]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x2d0>
 80037fe:	e000      	b.n	8003802 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d060      	beq.n	80038d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b04      	cmp	r3, #4
 8003812:	d005      	beq.n	8003820 <HAL_RCC_OscConfig+0x310>
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d119      	bne.n	800384e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d116      	bne.n	800384e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003820:	4b7c      	ldr	r3, [pc, #496]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_OscConfig+0x328>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e277      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003838:	4b76      	ldr	r3, [pc, #472]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	4973      	ldr	r1, [pc, #460]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800384c:	e040      	b.n	80038d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d023      	beq.n	800389e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003856:	4b6f      	ldr	r3, [pc, #444]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a6e      	ldr	r2, [pc, #440]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 800385c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003862:	f7ff fb05 	bl	8002e70 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800386a:	f7ff fb01 	bl	8002e70 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e255      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800387c:	4b65      	ldr	r3, [pc, #404]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f0      	beq.n	800386a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003888:	4b62      	ldr	r3, [pc, #392]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	061b      	lsls	r3, r3, #24
 8003896:	495f      	ldr	r1, [pc, #380]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]
 800389c:	e018      	b.n	80038d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800389e:	4b5d      	ldr	r3, [pc, #372]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a5c      	ldr	r2, [pc, #368]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 80038a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7ff fae1 	bl	8002e70 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b2:	f7ff fadd 	bl	8002e70 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e231      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038c4:	4b53      	ldr	r3, [pc, #332]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f0      	bne.n	80038b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d03c      	beq.n	8003956 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01c      	beq.n	800391e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e4:	4b4b      	ldr	r3, [pc, #300]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 80038e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ea:	4a4a      	ldr	r2, [pc, #296]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7ff fabc 	bl	8002e70 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038fc:	f7ff fab8 	bl	8002e70 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e20c      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800390e:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 8003910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ef      	beq.n	80038fc <HAL_RCC_OscConfig+0x3ec>
 800391c:	e01b      	b.n	8003956 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391e:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 8003920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003924:	4a3b      	ldr	r2, [pc, #236]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392e:	f7ff fa9f 	bl	8002e70 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003936:	f7ff fa9b 	bl	8002e70 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e1ef      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003948:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 800394a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1ef      	bne.n	8003936 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80a6 	beq.w	8003ab0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003964:	2300      	movs	r3, #0
 8003966:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003968:	4b2a      	ldr	r3, [pc, #168]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10d      	bne.n	8003990 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003974:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	4a26      	ldr	r2, [pc, #152]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 800397a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397e:	6593      	str	r3, [r2, #88]	; 0x58
 8003980:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800398c:	2301      	movs	r3, #1
 800398e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003990:	4b21      	ldr	r3, [pc, #132]	; (8003a18 <HAL_RCC_OscConfig+0x508>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d118      	bne.n	80039ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800399c:	4b1e      	ldr	r3, [pc, #120]	; (8003a18 <HAL_RCC_OscConfig+0x508>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1d      	ldr	r2, [pc, #116]	; (8003a18 <HAL_RCC_OscConfig+0x508>)
 80039a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a8:	f7ff fa62 	bl	8002e70 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b0:	f7ff fa5e 	bl	8002e70 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e1b2      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <HAL_RCC_OscConfig+0x508>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d108      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4d8>
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039dc:	4a0d      	ldr	r2, [pc, #52]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039e6:	e029      	b.n	8003a3c <HAL_RCC_OscConfig+0x52c>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b05      	cmp	r3, #5
 80039ee:	d115      	bne.n	8003a1c <HAL_RCC_OscConfig+0x50c>
 80039f0:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 80039f8:	f043 0304 	orr.w	r3, r3, #4
 80039fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	4a03      	ldr	r2, [pc, #12]	; (8003a14 <HAL_RCC_OscConfig+0x504>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a10:	e014      	b.n	8003a3c <HAL_RCC_OscConfig+0x52c>
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	4b9a      	ldr	r3, [pc, #616]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	4a99      	ldr	r2, [pc, #612]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a2c:	4b96      	ldr	r3, [pc, #600]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a32:	4a95      	ldr	r2, [pc, #596]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d016      	beq.n	8003a72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a44:	f7ff fa14 	bl	8002e70 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a4a:	e00a      	b.n	8003a62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4c:	f7ff fa10 	bl	8002e70 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e162      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a62:	4b89      	ldr	r3, [pc, #548]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0ed      	beq.n	8003a4c <HAL_RCC_OscConfig+0x53c>
 8003a70:	e015      	b.n	8003a9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a72:	f7ff f9fd 	bl	8002e70 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a78:	e00a      	b.n	8003a90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7ff f9f9 	bl	8002e70 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e14b      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a90:	4b7d      	ldr	r3, [pc, #500]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1ed      	bne.n	8003a7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a9e:	7ffb      	ldrb	r3, [r7, #31]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d105      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa4:	4b78      	ldr	r3, [pc, #480]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	4a77      	ldr	r2, [pc, #476]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d03c      	beq.n	8003b36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01c      	beq.n	8003afe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ac4:	4b70      	ldr	r3, [pc, #448]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aca:	4a6f      	ldr	r2, [pc, #444]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7ff f9cc 	bl	8002e70 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003adc:	f7ff f9c8 	bl	8002e70 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e11c      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aee:	4b66      	ldr	r3, [pc, #408]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ef      	beq.n	8003adc <HAL_RCC_OscConfig+0x5cc>
 8003afc:	e01b      	b.n	8003b36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003afe:	4b62      	ldr	r3, [pc, #392]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b04:	4a60      	ldr	r2, [pc, #384]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0e:	f7ff f9af 	bl	8002e70 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b16:	f7ff f9ab 	bl	8002e70 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e0ff      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b28:	4b57      	ldr	r3, [pc, #348]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1ef      	bne.n	8003b16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80f3 	beq.w	8003d26 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	f040 80c9 	bne.w	8003cdc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b4a:	4b4f      	ldr	r3, [pc, #316]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 0203 	and.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d12c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d123      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d113      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	085b      	lsrs	r3, r3, #1
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d109      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	085b      	lsrs	r3, r3, #1
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d06b      	beq.n	8003c90 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d062      	beq.n	8003c84 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bbe:	4b32      	ldr	r3, [pc, #200]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0ac      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bce:	4b2e      	ldr	r3, [pc, #184]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a2d      	ldr	r2, [pc, #180]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003bd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bda:	f7ff f949 	bl	8002e70 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be2:	f7ff f945 	bl	8002e70 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e099      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf4:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1f0      	bne.n	8003be2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c00:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <HAL_RCC_OscConfig+0x77c>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c10:	3a01      	subs	r2, #1
 8003c12:	0112      	lsls	r2, r2, #4
 8003c14:	4311      	orrs	r1, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c1a:	0212      	lsls	r2, r2, #8
 8003c1c:	4311      	orrs	r1, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c22:	0852      	lsrs	r2, r2, #1
 8003c24:	3a01      	subs	r2, #1
 8003c26:	0552      	lsls	r2, r2, #21
 8003c28:	4311      	orrs	r1, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c2e:	0852      	lsrs	r2, r2, #1
 8003c30:	3a01      	subs	r2, #1
 8003c32:	0652      	lsls	r2, r2, #25
 8003c34:	4311      	orrs	r1, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c3a:	06d2      	lsls	r2, r2, #27
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	4912      	ldr	r1, [pc, #72]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c44:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a0f      	ldr	r2, [pc, #60]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4a0c      	ldr	r2, [pc, #48]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c5c:	f7ff f908 	bl	8002e70 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c64:	f7ff f904 	bl	8002e70 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e058      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c76:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c82:	e050      	b.n	8003d26 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e04f      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c90:	4b27      	ldr	r3, [pc, #156]	; (8003d30 <HAL_RCC_OscConfig+0x820>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d144      	bne.n	8003d26 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c9c:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <HAL_RCC_OscConfig+0x820>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a23      	ldr	r2, [pc, #140]	; (8003d30 <HAL_RCC_OscConfig+0x820>)
 8003ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <HAL_RCC_OscConfig+0x820>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4a20      	ldr	r2, [pc, #128]	; (8003d30 <HAL_RCC_OscConfig+0x820>)
 8003cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cb4:	f7ff f8dc 	bl	8002e70 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7ff f8d8 	bl	8002e70 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e02c      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cce:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <HAL_RCC_OscConfig+0x820>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x7ac>
 8003cda:	e024      	b.n	8003d26 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b0c      	cmp	r3, #12
 8003ce0:	d01f      	beq.n	8003d22 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce2:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <HAL_RCC_OscConfig+0x820>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <HAL_RCC_OscConfig+0x820>)
 8003ce8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cee:	f7ff f8bf 	bl	8002e70 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf6:	f7ff f8bb 	bl	8002e70 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e00f      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <HAL_RCC_OscConfig+0x820>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f0      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_RCC_OscConfig+0x820>)
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	4905      	ldr	r1, [pc, #20]	; (8003d30 <HAL_RCC_OscConfig+0x820>)
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_RCC_OscConfig+0x824>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60cb      	str	r3, [r1, #12]
 8003d20:	e001      	b.n	8003d26 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3720      	adds	r7, #32
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40021000 	.word	0x40021000
 8003d34:	feeefffc 	.word	0xfeeefffc

08003d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0e7      	b.n	8003f1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b75      	ldr	r3, [pc, #468]	; (8003f24 <HAL_RCC_ClockConfig+0x1ec>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d910      	bls.n	8003d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b72      	ldr	r3, [pc, #456]	; (8003f24 <HAL_RCC_ClockConfig+0x1ec>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 0207 	bic.w	r2, r3, #7
 8003d62:	4970      	ldr	r1, [pc, #448]	; (8003f24 <HAL_RCC_ClockConfig+0x1ec>)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	4b6e      	ldr	r3, [pc, #440]	; (8003f24 <HAL_RCC_ClockConfig+0x1ec>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0cf      	b.n	8003f1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d010      	beq.n	8003daa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	4b66      	ldr	r3, [pc, #408]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d908      	bls.n	8003daa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	4b63      	ldr	r3, [pc, #396]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4960      	ldr	r1, [pc, #384]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d04c      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dbe:	4b5a      	ldr	r3, [pc, #360]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d121      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0a6      	b.n	8003f1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dd6:	4b54      	ldr	r3, [pc, #336]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d115      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e09a      	b.n	8003f1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dee:	4b4e      	ldr	r3, [pc, #312]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e08e      	b.n	8003f1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dfe:	4b4a      	ldr	r3, [pc, #296]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e086      	b.n	8003f1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e0e:	4b46      	ldr	r3, [pc, #280]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f023 0203 	bic.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4943      	ldr	r1, [pc, #268]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e20:	f7ff f826 	bl	8002e70 <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e28:	f7ff f822 	bl	8002e70 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e06e      	b.n	8003f1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	4b3a      	ldr	r3, [pc, #232]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 020c 	and.w	r2, r3, #12
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d1eb      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d010      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d208      	bcs.n	8003e7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6c:	4b2e      	ldr	r3, [pc, #184]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	492b      	ldr	r1, [pc, #172]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e7e:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <HAL_RCC_ClockConfig+0x1ec>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d210      	bcs.n	8003eae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8c:	4b25      	ldr	r3, [pc, #148]	; (8003f24 <HAL_RCC_ClockConfig+0x1ec>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 0207 	bic.w	r2, r3, #7
 8003e94:	4923      	ldr	r1, [pc, #140]	; (8003f24 <HAL_RCC_ClockConfig+0x1ec>)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9c:	4b21      	ldr	r3, [pc, #132]	; (8003f24 <HAL_RCC_ClockConfig+0x1ec>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d001      	beq.n	8003eae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e036      	b.n	8003f1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eba:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	4918      	ldr	r1, [pc, #96]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d009      	beq.n	8003eec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ed8:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4910      	ldr	r1, [pc, #64]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eec:	f000 f824 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	490b      	ldr	r1, [pc, #44]	; (8003f2c <HAL_RCC_ClockConfig+0x1f4>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
 8003f08:	4a09      	ldr	r2, [pc, #36]	; (8003f30 <HAL_RCC_ClockConfig+0x1f8>)
 8003f0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_RCC_ClockConfig+0x1fc>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe ff5d 	bl	8002dd0 <HAL_InitTick>
 8003f16:	4603      	mov	r3, r0
 8003f18:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f1a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40022000 	.word	0x40022000
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	0800a17c 	.word	0x0800a17c
 8003f30:	20000030 	.word	0x20000030
 8003f34:	20000034 	.word	0x20000034

08003f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b089      	sub	sp, #36	; 0x24
 8003f3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
 8003f42:	2300      	movs	r3, #0
 8003f44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f46:	4b3e      	ldr	r3, [pc, #248]	; (8004040 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f50:	4b3b      	ldr	r3, [pc, #236]	; (8004040 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0x34>
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b0c      	cmp	r3, #12
 8003f64:	d121      	bne.n	8003faa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d11e      	bne.n	8003faa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f6c:	4b34      	ldr	r3, [pc, #208]	; (8004040 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d107      	bne.n	8003f88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f78:	4b31      	ldr	r3, [pc, #196]	; (8004040 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	e005      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f88:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f94:	4a2b      	ldr	r2, [pc, #172]	; (8004044 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10d      	bne.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fa8:	e00a      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d102      	bne.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fb0:	4b25      	ldr	r3, [pc, #148]	; (8004048 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	e004      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fbc:	4b23      	ldr	r3, [pc, #140]	; (800404c <HAL_RCC_GetSysClockFreq+0x114>)
 8003fbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d134      	bne.n	8004030 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fc6:	4b1e      	ldr	r3, [pc, #120]	; (8004040 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d003      	beq.n	8003fde <HAL_RCC_GetSysClockFreq+0xa6>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d003      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0xac>
 8003fdc:	e005      	b.n	8003fea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fde:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fe0:	617b      	str	r3, [r7, #20]
      break;
 8003fe2:	e005      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_RCC_GetSysClockFreq+0x114>)
 8003fe6:	617b      	str	r3, [r7, #20]
      break;
 8003fe8:	e002      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	617b      	str	r3, [r7, #20]
      break;
 8003fee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ff0:	4b13      	ldr	r3, [pc, #76]	; (8004040 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ffe:	4b10      	ldr	r3, [pc, #64]	; (8004040 <HAL_RCC_GetSysClockFreq+0x108>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	fb03 f202 	mul.w	r2, r3, r2
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004016:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <HAL_RCC_GetSysClockFreq+0x108>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	0e5b      	lsrs	r3, r3, #25
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	3301      	adds	r3, #1
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	fbb2 f3f3 	udiv	r3, r2, r3
 800402e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004030:	69bb      	ldr	r3, [r7, #24]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3724      	adds	r7, #36	; 0x24
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000
 8004044:	0800a194 	.word	0x0800a194
 8004048:	00f42400 	.word	0x00f42400
 800404c:	007a1200 	.word	0x007a1200

08004050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_RCC_GetHCLKFreq+0x14>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000030 	.word	0x20000030

08004068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800406c:	f7ff fff0 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4904      	ldr	r1, [pc, #16]	; (8004090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021000 	.word	0x40021000
 8004090:	0800a18c 	.word	0x0800a18c

08004094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004098:	f7ff ffda 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	0adb      	lsrs	r3, r3, #11
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4904      	ldr	r1, [pc, #16]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40021000 	.word	0x40021000
 80040bc:	0800a18c 	.word	0x0800a18c

080040c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040cc:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040d8:	f7ff f9b6 	bl	8003448 <HAL_PWREx_GetVoltageRange>
 80040dc:	6178      	str	r0, [r7, #20]
 80040de:	e014      	b.n	800410a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e0:	4b25      	ldr	r3, [pc, #148]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	4a24      	ldr	r2, [pc, #144]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ea:	6593      	str	r3, [r2, #88]	; 0x58
 80040ec:	4b22      	ldr	r3, [pc, #136]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040f8:	f7ff f9a6 	bl	8003448 <HAL_PWREx_GetVoltageRange>
 80040fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040fe:	4b1e      	ldr	r3, [pc, #120]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	4a1d      	ldr	r2, [pc, #116]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004108:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004110:	d10b      	bne.n	800412a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d919      	bls.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2ba0      	cmp	r3, #160	; 0xa0
 800411c:	d902      	bls.n	8004124 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800411e:	2302      	movs	r3, #2
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	e013      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004124:	2301      	movs	r3, #1
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	e010      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b80      	cmp	r3, #128	; 0x80
 800412e:	d902      	bls.n	8004136 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004130:	2303      	movs	r3, #3
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	e00a      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b80      	cmp	r3, #128	; 0x80
 800413a:	d102      	bne.n	8004142 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800413c:	2302      	movs	r3, #2
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	e004      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b70      	cmp	r3, #112	; 0x70
 8004146:	d101      	bne.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004148:	2301      	movs	r3, #1
 800414a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 0207 	bic.w	r2, r3, #7
 8004154:	4909      	ldr	r1, [pc, #36]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	429a      	cmp	r2, r3
 8004168:	d001      	beq.n	800416e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000
 800417c:	40022000 	.word	0x40022000

08004180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004188:	2300      	movs	r3, #0
 800418a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800418c:	2300      	movs	r3, #0
 800418e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004198:	2b00      	cmp	r3, #0
 800419a:	d031      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041a4:	d01a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80041a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041aa:	d814      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d009      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041b4:	d10f      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80041b6:	4b5d      	ldr	r3, [pc, #372]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	4a5c      	ldr	r2, [pc, #368]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041c2:	e00c      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	2100      	movs	r1, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fa22 	bl	8004614 <RCCEx_PLLSAI1_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041d4:	e003      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	74fb      	strb	r3, [r7, #19]
      break;
 80041da:	e000      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80041dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041de:	7cfb      	ldrb	r3, [r7, #19]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10b      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041e4:	4b51      	ldr	r3, [pc, #324]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	494e      	ldr	r1, [pc, #312]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041fa:	e001      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	7cfb      	ldrb	r3, [r7, #19]
 80041fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 809e 	beq.w	800434a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800420e:	2300      	movs	r3, #0
 8004210:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004212:	4b46      	ldr	r3, [pc, #280]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004228:	4b40      	ldr	r3, [pc, #256]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422c:	4a3f      	ldr	r2, [pc, #252]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800422e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004232:	6593      	str	r3, [r2, #88]	; 0x58
 8004234:	4b3d      	ldr	r3, [pc, #244]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004240:	2301      	movs	r3, #1
 8004242:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004244:	4b3a      	ldr	r3, [pc, #232]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a39      	ldr	r2, [pc, #228]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800424a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800424e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004250:	f7fe fe0e 	bl	8002e70 <HAL_GetTick>
 8004254:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004256:	e009      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004258:	f7fe fe0a 	bl	8002e70 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d902      	bls.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	74fb      	strb	r3, [r7, #19]
        break;
 800426a:	e005      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800426c:	4b30      	ldr	r3, [pc, #192]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0ef      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004278:	7cfb      	ldrb	r3, [r7, #19]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d15a      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800427e:	4b2b      	ldr	r3, [pc, #172]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004288:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01e      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	429a      	cmp	r2, r3
 8004298:	d019      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800429a:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042a6:	4b21      	ldr	r3, [pc, #132]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ac:	4a1f      	ldr	r2, [pc, #124]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042bc:	4a1b      	ldr	r2, [pc, #108]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042c6:	4a19      	ldr	r2, [pc, #100]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d016      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d8:	f7fe fdca 	bl	8002e70 <HAL_GetTick>
 80042dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042de:	e00b      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e0:	f7fe fdc6 	bl	8002e70 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d902      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	74fb      	strb	r3, [r7, #19]
            break;
 80042f6:	e006      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0ec      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10b      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800430c:	4b07      	ldr	r3, [pc, #28]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431a:	4904      	ldr	r1, [pc, #16]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004322:	e009      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	74bb      	strb	r3, [r7, #18]
 8004328:	e006      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000
 8004330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004338:	7c7b      	ldrb	r3, [r7, #17]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d105      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800433e:	4b8d      	ldr	r3, [pc, #564]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004342:	4a8c      	ldr	r2, [pc, #560]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004348:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004356:	4b87      	ldr	r3, [pc, #540]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435c:	f023 0203 	bic.w	r2, r3, #3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	4983      	ldr	r1, [pc, #524]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004378:	4b7e      	ldr	r3, [pc, #504]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f023 020c 	bic.w	r2, r3, #12
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	497b      	ldr	r1, [pc, #492]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800439a:	4b76      	ldr	r3, [pc, #472]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a8:	4972      	ldr	r1, [pc, #456]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043bc:	4b6d      	ldr	r3, [pc, #436]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	496a      	ldr	r1, [pc, #424]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043de:	4b65      	ldr	r3, [pc, #404]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ec:	4961      	ldr	r1, [pc, #388]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004400:	4b5c      	ldr	r3, [pc, #368]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	4959      	ldr	r1, [pc, #356]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004422:	4b54      	ldr	r3, [pc, #336]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	4950      	ldr	r1, [pc, #320]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004444:	4b4b      	ldr	r3, [pc, #300]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004452:	4948      	ldr	r1, [pc, #288]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004466:	4b43      	ldr	r3, [pc, #268]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	493f      	ldr	r1, [pc, #252]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d028      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004488:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004496:	4937      	ldr	r1, [pc, #220]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a6:	d106      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a8:	4b32      	ldr	r3, [pc, #200]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a31      	ldr	r2, [pc, #196]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044b2:	60d3      	str	r3, [r2, #12]
 80044b4:	e011      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044be:	d10c      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3304      	adds	r3, #4
 80044c4:	2101      	movs	r1, #1
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f8a4 	bl	8004614 <RCCEx_PLLSAI1_Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
 80044d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d028      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044e6:	4b23      	ldr	r3, [pc, #140]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f4:	491f      	ldr	r1, [pc, #124]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004504:	d106      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004506:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	4a1a      	ldr	r2, [pc, #104]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800450c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004510:	60d3      	str	r3, [r2, #12]
 8004512:	e011      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800451c:	d10c      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	2101      	movs	r1, #1
 8004524:	4618      	mov	r0, r3
 8004526:	f000 f875 	bl	8004614 <RCCEx_PLLSAI1_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800452e:	7cfb      	ldrb	r3, [r7, #19]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004534:	7cfb      	ldrb	r3, [r7, #19]
 8004536:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d02b      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004552:	4908      	ldr	r1, [pc, #32]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004562:	d109      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4a02      	ldr	r2, [pc, #8]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800456a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800456e:	60d3      	str	r3, [r2, #12]
 8004570:	e014      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004580:	d10c      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3304      	adds	r3, #4
 8004586:	2101      	movs	r1, #1
 8004588:	4618      	mov	r0, r3
 800458a:	f000 f843 	bl	8004614 <RCCEx_PLLSAI1_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004592:	7cfb      	ldrb	r3, [r7, #19]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01c      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b6:	4916      	ldr	r1, [pc, #88]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045c6:	d10c      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3304      	adds	r3, #4
 80045cc:	2102      	movs	r1, #2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f820 	bl	8004614 <RCCEx_PLLSAI1_Config>
 80045d4:	4603      	mov	r3, r0
 80045d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045d8:	7cfb      	ldrb	r3, [r7, #19]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80045de:	7cfb      	ldrb	r3, [r7, #19]
 80045e0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045ee:	4b08      	ldr	r3, [pc, #32]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fc:	4904      	ldr	r1, [pc, #16]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004604:	7cbb      	ldrb	r3, [r7, #18]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000

08004614 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004622:	4b74      	ldr	r3, [pc, #464]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d018      	beq.n	8004660 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800462e:	4b71      	ldr	r3, [pc, #452]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0203 	and.w	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d10d      	bne.n	800465a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
       ||
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004646:	4b6b      	ldr	r3, [pc, #428]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
       ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d047      	beq.n	80046ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
 800465e:	e044      	b.n	80046ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b03      	cmp	r3, #3
 8004666:	d018      	beq.n	800469a <RCCEx_PLLSAI1_Config+0x86>
 8004668:	2b03      	cmp	r3, #3
 800466a:	d825      	bhi.n	80046b8 <RCCEx_PLLSAI1_Config+0xa4>
 800466c:	2b01      	cmp	r3, #1
 800466e:	d002      	beq.n	8004676 <RCCEx_PLLSAI1_Config+0x62>
 8004670:	2b02      	cmp	r3, #2
 8004672:	d009      	beq.n	8004688 <RCCEx_PLLSAI1_Config+0x74>
 8004674:	e020      	b.n	80046b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004676:	4b5f      	ldr	r3, [pc, #380]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d11d      	bne.n	80046be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004686:	e01a      	b.n	80046be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004688:	4b5a      	ldr	r3, [pc, #360]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004690:	2b00      	cmp	r3, #0
 8004692:	d116      	bne.n	80046c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004698:	e013      	b.n	80046c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800469a:	4b56      	ldr	r3, [pc, #344]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10f      	bne.n	80046c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046a6:	4b53      	ldr	r3, [pc, #332]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046b6:	e006      	b.n	80046c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      break;
 80046bc:	e004      	b.n	80046c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046be:	bf00      	nop
 80046c0:	e002      	b.n	80046c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10d      	bne.n	80046ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ce:	4b49      	ldr	r3, [pc, #292]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	3b01      	subs	r3, #1
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	430b      	orrs	r3, r1
 80046e4:	4943      	ldr	r1, [pc, #268]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d17c      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046f0:	4b40      	ldr	r3, [pc, #256]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a3f      	ldr	r2, [pc, #252]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fc:	f7fe fbb8 	bl	8002e70 <HAL_GetTick>
 8004700:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004702:	e009      	b.n	8004718 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004704:	f7fe fbb4 	bl	8002e70 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d902      	bls.n	8004718 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	73fb      	strb	r3, [r7, #15]
        break;
 8004716:	e005      	b.n	8004724 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004718:	4b36      	ldr	r3, [pc, #216]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1ef      	bne.n	8004704 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d15f      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d110      	bne.n	8004752 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004730:	4b30      	ldr	r3, [pc, #192]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004738:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6892      	ldr	r2, [r2, #8]
 8004740:	0211      	lsls	r1, r2, #8
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68d2      	ldr	r2, [r2, #12]
 8004746:	06d2      	lsls	r2, r2, #27
 8004748:	430a      	orrs	r2, r1
 800474a:	492a      	ldr	r1, [pc, #168]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800474c:	4313      	orrs	r3, r2
 800474e:	610b      	str	r3, [r1, #16]
 8004750:	e027      	b.n	80047a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d112      	bne.n	800477e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004758:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004760:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6892      	ldr	r2, [r2, #8]
 8004768:	0211      	lsls	r1, r2, #8
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6912      	ldr	r2, [r2, #16]
 800476e:	0852      	lsrs	r2, r2, #1
 8004770:	3a01      	subs	r2, #1
 8004772:	0552      	lsls	r2, r2, #21
 8004774:	430a      	orrs	r2, r1
 8004776:	491f      	ldr	r1, [pc, #124]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004778:	4313      	orrs	r3, r2
 800477a:	610b      	str	r3, [r1, #16]
 800477c:	e011      	b.n	80047a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800477e:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004786:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6892      	ldr	r2, [r2, #8]
 800478e:	0211      	lsls	r1, r2, #8
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6952      	ldr	r2, [r2, #20]
 8004794:	0852      	lsrs	r2, r2, #1
 8004796:	3a01      	subs	r2, #1
 8004798:	0652      	lsls	r2, r2, #25
 800479a:	430a      	orrs	r2, r1
 800479c:	4915      	ldr	r1, [pc, #84]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047a2:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fe fb5f 	bl	8002e70 <HAL_GetTick>
 80047b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047b4:	e009      	b.n	80047ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047b6:	f7fe fb5b 	bl	8002e70 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d902      	bls.n	80047ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	73fb      	strb	r3, [r7, #15]
          break;
 80047c8:	e005      	b.n	80047d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0ef      	beq.n	80047b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	4903      	ldr	r1, [pc, #12]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40021000 	.word	0x40021000

080047f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e095      	b.n	8004936 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	d108      	bne.n	8004824 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800481a:	d009      	beq.n	8004830 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	61da      	str	r2, [r3, #28]
 8004822:	e005      	b.n	8004830 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc ff56 	bl	80016fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004866:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004870:	d902      	bls.n	8004878 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	e002      	b.n	800487e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800487c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004886:	d007      	beq.n	8004898 <HAL_SPI_Init+0xa0>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004890:	d002      	beq.n	8004898 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048da:	ea42 0103 	orr.w	r1, r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	0c1b      	lsrs	r3, r3, #16
 80048f4:	f003 0204 	and.w	r2, r3, #4
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004914:	ea42 0103 	orr.w	r1, r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b08a      	sub	sp, #40	; 0x28
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800494c:	2301      	movs	r3, #1
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004950:	2300      	movs	r3, #0
 8004952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x26>
 8004960:	2302      	movs	r3, #2
 8004962:	e1fb      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x41e>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800496c:	f7fe fa80 	bl	8002e70 <HAL_GetTick>
 8004970:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004978:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004980:	887b      	ldrh	r3, [r7, #2]
 8004982:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004984:	887b      	ldrh	r3, [r7, #2]
 8004986:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004988:	7efb      	ldrb	r3, [r7, #27]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d00e      	beq.n	80049ac <HAL_SPI_TransmitReceive+0x6e>
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004994:	d106      	bne.n	80049a4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <HAL_SPI_TransmitReceive+0x66>
 800499e:	7efb      	ldrb	r3, [r7, #27]
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d003      	beq.n	80049ac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80049a4:	2302      	movs	r3, #2
 80049a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049aa:	e1cd      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_SPI_TransmitReceive+0x80>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <HAL_SPI_TransmitReceive+0x80>
 80049b8:	887b      	ldrh	r3, [r7, #2]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d103      	bne.n	80049c6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049c4:	e1c0      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d003      	beq.n	80049da <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2205      	movs	r2, #5
 80049d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	887a      	ldrh	r2, [r7, #2]
 80049ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	887a      	ldrh	r2, [r7, #2]
 80049f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	887a      	ldrh	r2, [r7, #2]
 8004a00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	887a      	ldrh	r2, [r7, #2]
 8004a06:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a1c:	d802      	bhi.n	8004a24 <HAL_SPI_TransmitReceive+0xe6>
 8004a1e:	8a3b      	ldrh	r3, [r7, #16]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d908      	bls.n	8004a36 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a32:	605a      	str	r2, [r3, #4]
 8004a34:	e007      	b.n	8004a46 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a44:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d007      	beq.n	8004a64 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a6c:	d97c      	bls.n	8004b68 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_SPI_TransmitReceive+0x13e>
 8004a76:	8a7b      	ldrh	r3, [r7, #18]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d169      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	881a      	ldrh	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	1c9a      	adds	r2, r3, #2
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa0:	e056      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d11b      	bne.n	8004ae8 <HAL_SPI_TransmitReceive+0x1aa>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d016      	beq.n	8004ae8 <HAL_SPI_TransmitReceive+0x1aa>
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d113      	bne.n	8004ae8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	881a      	ldrh	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	1c9a      	adds	r2, r3, #2
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d11c      	bne.n	8004b30 <HAL_SPI_TransmitReceive+0x1f2>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d016      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	b292      	uxth	r2, r2
 8004b0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	1c9a      	adds	r2, r3, #2
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b30:	f7fe f99e 	bl	8002e70 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d807      	bhi.n	8004b50 <HAL_SPI_TransmitReceive+0x212>
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b46:	d003      	beq.n	8004b50 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b4e:	e0fb      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1a3      	bne.n	8004aa2 <HAL_SPI_TransmitReceive+0x164>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d19d      	bne.n	8004aa2 <HAL_SPI_TransmitReceive+0x164>
 8004b66:	e0df      	b.n	8004d28 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_SPI_TransmitReceive+0x23a>
 8004b70:	8a7b      	ldrh	r3, [r7, #18]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	f040 80cb 	bne.w	8004d0e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d912      	bls.n	8004ba8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	881a      	ldrh	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	1c9a      	adds	r2, r3, #2
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b02      	subs	r3, #2
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ba6:	e0b2      	b.n	8004d0e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	7812      	ldrb	r2, [r2, #0]
 8004bb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bce:	e09e      	b.n	8004d0e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d134      	bne.n	8004c48 <HAL_SPI_TransmitReceive+0x30a>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d02f      	beq.n	8004c48 <HAL_SPI_TransmitReceive+0x30a>
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d12c      	bne.n	8004c48 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d912      	bls.n	8004c1e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	881a      	ldrh	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	1c9a      	adds	r2, r3, #2
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b02      	subs	r3, #2
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c1c:	e012      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	330c      	adds	r3, #12
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d148      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x3aa>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d042      	beq.n	8004ce8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d923      	bls.n	8004cb6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	b292      	uxth	r2, r2
 8004c7a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	1c9a      	adds	r2, r3, #2
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b02      	subs	r3, #2
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d81f      	bhi.n	8004ce4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cb2:	605a      	str	r2, [r3, #4]
 8004cb4:	e016      	b.n	8004ce4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f103 020c 	add.w	r2, r3, #12
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	7812      	ldrb	r2, [r2, #0]
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ce8:	f7fe f8c2 	bl	8002e70 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d803      	bhi.n	8004d00 <HAL_SPI_TransmitReceive+0x3c2>
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d102      	bne.n	8004d06 <HAL_SPI_TransmitReceive+0x3c8>
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d0c:	e01c      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f47f af5b 	bne.w	8004bd0 <HAL_SPI_TransmitReceive+0x292>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f47f af54 	bne.w	8004bd0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f937 	bl	8004fa0 <SPI_EndRxTxTransaction>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d006      	beq.n	8004d46 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	661a      	str	r2, [r3, #96]	; 0x60
 8004d44:	e000      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004d46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3728      	adds	r7, #40	; 0x28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	4613      	mov	r3, r2
 8004d72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d74:	f7fe f87c 	bl	8002e70 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	4413      	add	r3, r2
 8004d82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d84:	f7fe f874 	bl	8002e70 <HAL_GetTick>
 8004d88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d8a:	4b39      	ldr	r3, [pc, #228]	; (8004e70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	015b      	lsls	r3, r3, #5
 8004d90:	0d1b      	lsrs	r3, r3, #20
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	fb02 f303 	mul.w	r3, r2, r3
 8004d98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d9a:	e054      	b.n	8004e46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	d050      	beq.n	8004e46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004da4:	f7fe f864 	bl	8002e70 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d902      	bls.n	8004dba <SPI_WaitFlagStateUntilTimeout+0x56>
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d13d      	bne.n	8004e36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004dc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dd2:	d111      	bne.n	8004df8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ddc:	d004      	beq.n	8004de8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de6:	d107      	bne.n	8004df8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e00:	d10f      	bne.n	8004e22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e017      	b.n	8004e66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	bf0c      	ite	eq
 8004e56:	2301      	moveq	r3, #1
 8004e58:	2300      	movne	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d19b      	bne.n	8004d9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000030 	.word	0x20000030

08004e74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e86:	f7fd fff3 	bl	8002e70 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	4413      	add	r3, r2
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e96:	f7fd ffeb 	bl	8002e70 <HAL_GetTick>
 8004e9a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ea4:	4b3d      	ldr	r3, [pc, #244]	; (8004f9c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	00da      	lsls	r2, r3, #3
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	0d1b      	lsrs	r3, r3, #20
 8004eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ebc:	e060      	b.n	8004f80 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ec4:	d107      	bne.n	8004ed6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d104      	bne.n	8004ed6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d050      	beq.n	8004f80 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ede:	f7fd ffc7 	bl	8002e70 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d902      	bls.n	8004ef4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d13d      	bne.n	8004f70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f0c:	d111      	bne.n	8004f32 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f16:	d004      	beq.n	8004f22 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f20:	d107      	bne.n	8004f32 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3a:	d10f      	bne.n	8004f5c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e010      	b.n	8004f92 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d196      	bne.n	8004ebe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3728      	adds	r7, #40	; 0x28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000030 	.word	0x20000030

08004fa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f7ff ff5b 	bl	8004e74 <SPI_WaitFifoStateUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc8:	f043 0220 	orr.w	r2, r3, #32
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e027      	b.n	8005024 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2180      	movs	r1, #128	; 0x80
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f7ff fec0 	bl	8004d64 <SPI_WaitFlagStateUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fee:	f043 0220 	orr.w	r2, r3, #32
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e014      	b.n	8005024 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2200      	movs	r2, #0
 8005002:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f7ff ff34 	bl	8004e74 <SPI_WaitFifoStateUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005016:	f043 0220 	orr.w	r2, r3, #32
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e000      	b.n	8005024 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e049      	b.n	80050d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fc fe4c 	bl	8001cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3304      	adds	r3, #4
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f000 fba0 	bl	80057b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d001      	beq.n	80050f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e033      	b.n	800515c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a19      	ldr	r2, [pc, #100]	; (8005168 <HAL_TIM_Base_Start+0x8c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d009      	beq.n	800511a <HAL_TIM_Base_Start+0x3e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510e:	d004      	beq.n	800511a <HAL_TIM_Base_Start+0x3e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a15      	ldr	r2, [pc, #84]	; (800516c <HAL_TIM_Base_Start+0x90>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d115      	bne.n	8005146 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	4b13      	ldr	r3, [pc, #76]	; (8005170 <HAL_TIM_Base_Start+0x94>)
 8005122:	4013      	ands	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b06      	cmp	r3, #6
 800512a:	d015      	beq.n	8005158 <HAL_TIM_Base_Start+0x7c>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005132:	d011      	beq.n	8005158 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005144:	e008      	b.n	8005158 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0201 	orr.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	e000      	b.n	800515a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005158:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	40012c00 	.word	0x40012c00
 800516c:	40014000 	.word	0x40014000
 8005170:	00010007 	.word	0x00010007

08005174 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e049      	b.n	800521a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f841 	bl	8005222 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f000 fafc 	bl	80057b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <HAL_TIM_PWM_Start+0x24>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e03c      	b.n	80052d6 <HAL_TIM_PWM_Start+0x9e>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b04      	cmp	r3, #4
 8005260:	d109      	bne.n	8005276 <HAL_TIM_PWM_Start+0x3e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	bf14      	ite	ne
 800526e:	2301      	movne	r3, #1
 8005270:	2300      	moveq	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	e02f      	b.n	80052d6 <HAL_TIM_PWM_Start+0x9e>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d109      	bne.n	8005290 <HAL_TIM_PWM_Start+0x58>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	bf14      	ite	ne
 8005288:	2301      	movne	r3, #1
 800528a:	2300      	moveq	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e022      	b.n	80052d6 <HAL_TIM_PWM_Start+0x9e>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b0c      	cmp	r3, #12
 8005294:	d109      	bne.n	80052aa <HAL_TIM_PWM_Start+0x72>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b01      	cmp	r3, #1
 80052a0:	bf14      	ite	ne
 80052a2:	2301      	movne	r3, #1
 80052a4:	2300      	moveq	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	e015      	b.n	80052d6 <HAL_TIM_PWM_Start+0x9e>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d109      	bne.n	80052c4 <HAL_TIM_PWM_Start+0x8c>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	bf14      	ite	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	2300      	moveq	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	e008      	b.n	80052d6 <HAL_TIM_PWM_Start+0x9e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	bf14      	ite	ne
 80052d0:	2301      	movne	r3, #1
 80052d2:	2300      	moveq	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e07e      	b.n	80053dc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_PWM_Start+0xb6>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ec:	e023      	b.n	8005336 <HAL_TIM_PWM_Start+0xfe>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d104      	bne.n	80052fe <HAL_TIM_PWM_Start+0xc6>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052fc:	e01b      	b.n	8005336 <HAL_TIM_PWM_Start+0xfe>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b08      	cmp	r3, #8
 8005302:	d104      	bne.n	800530e <HAL_TIM_PWM_Start+0xd6>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800530c:	e013      	b.n	8005336 <HAL_TIM_PWM_Start+0xfe>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b0c      	cmp	r3, #12
 8005312:	d104      	bne.n	800531e <HAL_TIM_PWM_Start+0xe6>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800531c:	e00b      	b.n	8005336 <HAL_TIM_PWM_Start+0xfe>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b10      	cmp	r3, #16
 8005322:	d104      	bne.n	800532e <HAL_TIM_PWM_Start+0xf6>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800532c:	e003      	b.n	8005336 <HAL_TIM_PWM_Start+0xfe>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2201      	movs	r2, #1
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fdb2 	bl	8005ea8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a26      	ldr	r2, [pc, #152]	; (80053e4 <HAL_TIM_PWM_Start+0x1ac>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d009      	beq.n	8005362 <HAL_TIM_PWM_Start+0x12a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a25      	ldr	r2, [pc, #148]	; (80053e8 <HAL_TIM_PWM_Start+0x1b0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d004      	beq.n	8005362 <HAL_TIM_PWM_Start+0x12a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a23      	ldr	r2, [pc, #140]	; (80053ec <HAL_TIM_PWM_Start+0x1b4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d101      	bne.n	8005366 <HAL_TIM_PWM_Start+0x12e>
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <HAL_TIM_PWM_Start+0x130>
 8005366:	2300      	movs	r3, #0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d007      	beq.n	800537c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800537a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <HAL_TIM_PWM_Start+0x1ac>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d009      	beq.n	800539a <HAL_TIM_PWM_Start+0x162>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538e:	d004      	beq.n	800539a <HAL_TIM_PWM_Start+0x162>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <HAL_TIM_PWM_Start+0x1b0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d115      	bne.n	80053c6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	4b13      	ldr	r3, [pc, #76]	; (80053f0 <HAL_TIM_PWM_Start+0x1b8>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b06      	cmp	r3, #6
 80053aa:	d015      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x1a0>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b2:	d011      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c4:	e008      	b.n	80053d8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0201 	orr.w	r2, r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e000      	b.n	80053da <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40014400 	.word	0x40014400
 80053f0:	00010007 	.word	0x00010007

080053f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800540e:	2302      	movs	r3, #2
 8005410:	e0ff      	b.n	8005612 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b14      	cmp	r3, #20
 800541e:	f200 80f0 	bhi.w	8005602 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005422:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	0800547d 	.word	0x0800547d
 800542c:	08005603 	.word	0x08005603
 8005430:	08005603 	.word	0x08005603
 8005434:	08005603 	.word	0x08005603
 8005438:	080054bd 	.word	0x080054bd
 800543c:	08005603 	.word	0x08005603
 8005440:	08005603 	.word	0x08005603
 8005444:	08005603 	.word	0x08005603
 8005448:	080054ff 	.word	0x080054ff
 800544c:	08005603 	.word	0x08005603
 8005450:	08005603 	.word	0x08005603
 8005454:	08005603 	.word	0x08005603
 8005458:	0800553f 	.word	0x0800553f
 800545c:	08005603 	.word	0x08005603
 8005460:	08005603 	.word	0x08005603
 8005464:	08005603 	.word	0x08005603
 8005468:	08005581 	.word	0x08005581
 800546c:	08005603 	.word	0x08005603
 8005470:	08005603 	.word	0x08005603
 8005474:	08005603 	.word	0x08005603
 8005478:	080055c1 	.word	0x080055c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 f9f8 	bl	8005878 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0208 	orr.w	r2, r2, #8
 8005496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0204 	bic.w	r2, r2, #4
 80054a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6999      	ldr	r1, [r3, #24]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	619a      	str	r2, [r3, #24]
      break;
 80054ba:	e0a5      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fa54 	bl	8005970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6999      	ldr	r1, [r3, #24]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	021a      	lsls	r2, r3, #8
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	619a      	str	r2, [r3, #24]
      break;
 80054fc:	e084      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	4618      	mov	r0, r3
 8005506:	f000 faad 	bl	8005a64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0208 	orr.w	r2, r2, #8
 8005518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0204 	bic.w	r2, r2, #4
 8005528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69d9      	ldr	r1, [r3, #28]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	61da      	str	r2, [r3, #28]
      break;
 800553c:	e064      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fb05 	bl	8005b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69d9      	ldr	r1, [r3, #28]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	021a      	lsls	r2, r3, #8
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	61da      	str	r2, [r3, #28]
      break;
 800557e:	e043      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fb42 	bl	8005c10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0208 	orr.w	r2, r2, #8
 800559a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0204 	bic.w	r2, r2, #4
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055be:	e023      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fb7a 	bl	8005cc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	021a      	lsls	r2, r3, #8
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005600:	e002      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
      break;
 8005606:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop

0800561c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_TIM_ConfigClockSource+0x1c>
 8005634:	2302      	movs	r3, #2
 8005636:	e0b6      	b.n	80057a6 <HAL_TIM_ConfigClockSource+0x18a>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005656:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800565a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005662:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005674:	d03e      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0xd8>
 8005676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800567a:	f200 8087 	bhi.w	800578c <HAL_TIM_ConfigClockSource+0x170>
 800567e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005682:	f000 8086 	beq.w	8005792 <HAL_TIM_ConfigClockSource+0x176>
 8005686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568a:	d87f      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x170>
 800568c:	2b70      	cmp	r3, #112	; 0x70
 800568e:	d01a      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0xaa>
 8005690:	2b70      	cmp	r3, #112	; 0x70
 8005692:	d87b      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x170>
 8005694:	2b60      	cmp	r3, #96	; 0x60
 8005696:	d050      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x11e>
 8005698:	2b60      	cmp	r3, #96	; 0x60
 800569a:	d877      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x170>
 800569c:	2b50      	cmp	r3, #80	; 0x50
 800569e:	d03c      	beq.n	800571a <HAL_TIM_ConfigClockSource+0xfe>
 80056a0:	2b50      	cmp	r3, #80	; 0x50
 80056a2:	d873      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x170>
 80056a4:	2b40      	cmp	r3, #64	; 0x40
 80056a6:	d058      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x13e>
 80056a8:	2b40      	cmp	r3, #64	; 0x40
 80056aa:	d86f      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x170>
 80056ac:	2b30      	cmp	r3, #48	; 0x30
 80056ae:	d064      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x15e>
 80056b0:	2b30      	cmp	r3, #48	; 0x30
 80056b2:	d86b      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x170>
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d060      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x15e>
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d867      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x170>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d05c      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x15e>
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d05a      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x15e>
 80056c4:	e062      	b.n	800578c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6899      	ldr	r1, [r3, #8]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f000 fbc7 	bl	8005e68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	609a      	str	r2, [r3, #8]
      break;
 80056f2:	e04f      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	6899      	ldr	r1, [r3, #8]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f000 fbb0 	bl	8005e68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005716:	609a      	str	r2, [r3, #8]
      break;
 8005718:	e03c      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6859      	ldr	r1, [r3, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	461a      	mov	r2, r3
 8005728:	f000 fb24 	bl	8005d74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2150      	movs	r1, #80	; 0x50
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fb7d 	bl	8005e32 <TIM_ITRx_SetConfig>
      break;
 8005738:	e02c      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6859      	ldr	r1, [r3, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	461a      	mov	r2, r3
 8005748:	f000 fb43 	bl	8005dd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2160      	movs	r1, #96	; 0x60
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fb6d 	bl	8005e32 <TIM_ITRx_SetConfig>
      break;
 8005758:	e01c      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6859      	ldr	r1, [r3, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	461a      	mov	r2, r3
 8005768:	f000 fb04 	bl	8005d74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2140      	movs	r1, #64	; 0x40
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fb5d 	bl	8005e32 <TIM_ITRx_SetConfig>
      break;
 8005778:	e00c      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4619      	mov	r1, r3
 8005784:	4610      	mov	r0, r2
 8005786:	f000 fb54 	bl	8005e32 <TIM_ITRx_SetConfig>
      break;
 800578a:	e003      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
      break;
 8005790:	e000      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a2a      	ldr	r2, [pc, #168]	; (800586c <TIM_Base_SetConfig+0xbc>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_Base_SetConfig+0x20>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ce:	d108      	bne.n	80057e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a21      	ldr	r2, [pc, #132]	; (800586c <TIM_Base_SetConfig+0xbc>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00b      	beq.n	8005802 <TIM_Base_SetConfig+0x52>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f0:	d007      	beq.n	8005802 <TIM_Base_SetConfig+0x52>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1e      	ldr	r2, [pc, #120]	; (8005870 <TIM_Base_SetConfig+0xc0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d003      	beq.n	8005802 <TIM_Base_SetConfig+0x52>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <TIM_Base_SetConfig+0xc4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d108      	bne.n	8005814 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a0c      	ldr	r2, [pc, #48]	; (800586c <TIM_Base_SetConfig+0xbc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d007      	beq.n	8005850 <TIM_Base_SetConfig+0xa0>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a0b      	ldr	r2, [pc, #44]	; (8005870 <TIM_Base_SetConfig+0xc0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_Base_SetConfig+0xa0>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a0a      	ldr	r2, [pc, #40]	; (8005874 <TIM_Base_SetConfig+0xc4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d103      	bne.n	8005858 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	615a      	str	r2, [r3, #20]
}
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40014000 	.word	0x40014000
 8005874:	40014400 	.word	0x40014400

08005878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	f023 0201 	bic.w	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0303 	bic.w	r3, r3, #3
 80058b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f023 0302 	bic.w	r3, r3, #2
 80058c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a24      	ldr	r2, [pc, #144]	; (8005964 <TIM_OC1_SetConfig+0xec>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_OC1_SetConfig+0x70>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a23      	ldr	r2, [pc, #140]	; (8005968 <TIM_OC1_SetConfig+0xf0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_OC1_SetConfig+0x70>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a22      	ldr	r2, [pc, #136]	; (800596c <TIM_OC1_SetConfig+0xf4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d10c      	bne.n	8005902 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f023 0308 	bic.w	r3, r3, #8
 80058ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f023 0304 	bic.w	r3, r3, #4
 8005900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a17      	ldr	r2, [pc, #92]	; (8005964 <TIM_OC1_SetConfig+0xec>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d007      	beq.n	800591a <TIM_OC1_SetConfig+0xa2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a16      	ldr	r2, [pc, #88]	; (8005968 <TIM_OC1_SetConfig+0xf0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d003      	beq.n	800591a <TIM_OC1_SetConfig+0xa2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a15      	ldr	r2, [pc, #84]	; (800596c <TIM_OC1_SetConfig+0xf4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d111      	bne.n	800593e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	621a      	str	r2, [r3, #32]
}
 8005958:	bf00      	nop
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	40012c00 	.word	0x40012c00
 8005968:	40014000 	.word	0x40014000
 800596c:	40014400 	.word	0x40014400

08005970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	f023 0210 	bic.w	r2, r3, #16
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800599e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	021b      	lsls	r3, r3, #8
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f023 0320 	bic.w	r3, r3, #32
 80059be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a22      	ldr	r2, [pc, #136]	; (8005a58 <TIM_OC2_SetConfig+0xe8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d10d      	bne.n	80059f0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <TIM_OC2_SetConfig+0xe8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d007      	beq.n	8005a08 <TIM_OC2_SetConfig+0x98>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a18      	ldr	r2, [pc, #96]	; (8005a5c <TIM_OC2_SetConfig+0xec>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d003      	beq.n	8005a08 <TIM_OC2_SetConfig+0x98>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a17      	ldr	r2, [pc, #92]	; (8005a60 <TIM_OC2_SetConfig+0xf0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d113      	bne.n	8005a30 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	621a      	str	r2, [r3, #32]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40014400 	.word	0x40014400

08005a64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0303 	bic.w	r3, r3, #3
 8005a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a21      	ldr	r2, [pc, #132]	; (8005b48 <TIM_OC3_SetConfig+0xe4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d10d      	bne.n	8005ae2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005acc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a18      	ldr	r2, [pc, #96]	; (8005b48 <TIM_OC3_SetConfig+0xe4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d007      	beq.n	8005afa <TIM_OC3_SetConfig+0x96>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a17      	ldr	r2, [pc, #92]	; (8005b4c <TIM_OC3_SetConfig+0xe8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d003      	beq.n	8005afa <TIM_OC3_SetConfig+0x96>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a16      	ldr	r2, [pc, #88]	; (8005b50 <TIM_OC3_SetConfig+0xec>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d113      	bne.n	8005b22 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	621a      	str	r2, [r3, #32]
}
 8005b3c:	bf00      	nop
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	40012c00 	.word	0x40012c00
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40014400 	.word	0x40014400

08005b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	031b      	lsls	r3, r3, #12
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a14      	ldr	r2, [pc, #80]	; (8005c04 <TIM_OC4_SetConfig+0xb0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d007      	beq.n	8005bc8 <TIM_OC4_SetConfig+0x74>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a13      	ldr	r2, [pc, #76]	; (8005c08 <TIM_OC4_SetConfig+0xb4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_OC4_SetConfig+0x74>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a12      	ldr	r2, [pc, #72]	; (8005c0c <TIM_OC4_SetConfig+0xb8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d109      	bne.n	8005bdc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	019b      	lsls	r3, r3, #6
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40014400 	.word	0x40014400

08005c10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	041b      	lsls	r3, r3, #16
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a13      	ldr	r2, [pc, #76]	; (8005cb4 <TIM_OC5_SetConfig+0xa4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d007      	beq.n	8005c7a <TIM_OC5_SetConfig+0x6a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a12      	ldr	r2, [pc, #72]	; (8005cb8 <TIM_OC5_SetConfig+0xa8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_OC5_SetConfig+0x6a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a11      	ldr	r2, [pc, #68]	; (8005cbc <TIM_OC5_SetConfig+0xac>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d109      	bne.n	8005c8e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	621a      	str	r2, [r3, #32]
}
 8005ca8:	bf00      	nop
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	40012c00 	.word	0x40012c00
 8005cb8:	40014000 	.word	0x40014000
 8005cbc:	40014400 	.word	0x40014400

08005cc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	051b      	lsls	r3, r3, #20
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <TIM_OC6_SetConfig+0xa8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d007      	beq.n	8005d2c <TIM_OC6_SetConfig+0x6c>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a13      	ldr	r2, [pc, #76]	; (8005d6c <TIM_OC6_SetConfig+0xac>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_OC6_SetConfig+0x6c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a12      	ldr	r2, [pc, #72]	; (8005d70 <TIM_OC6_SetConfig+0xb0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d109      	bne.n	8005d40 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	029b      	lsls	r3, r3, #10
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40012c00 	.word	0x40012c00
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	40014400 	.word	0x40014400

08005d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f023 0201 	bic.w	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f023 030a 	bic.w	r3, r3, #10
 8005db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b087      	sub	sp, #28
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f023 0210 	bic.w	r2, r3, #16
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	031b      	lsls	r3, r3, #12
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	621a      	str	r2, [r3, #32]
}
 8005e26:	bf00      	nop
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b085      	sub	sp, #20
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f043 0307 	orr.w	r3, r3, #7
 8005e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	609a      	str	r2, [r3, #8]
}
 8005e5c:	bf00      	nop
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	021a      	lsls	r2, r3, #8
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	609a      	str	r2, [r3, #8]
}
 8005e9c:	bf00      	nop
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f003 031f 	and.w	r3, r3, #31
 8005eba:	2201      	movs	r2, #1
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a1a      	ldr	r2, [r3, #32]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	401a      	ands	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a1a      	ldr	r2, [r3, #32]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	621a      	str	r2, [r3, #32]
}
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e04f      	b.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a21      	ldr	r2, [pc, #132]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d108      	bne.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a14      	ldr	r2, [pc, #80]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d009      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f74:	d004      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a10      	ldr	r2, [pc, #64]	; (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d10c      	bne.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	40012c00 	.word	0x40012c00
 8005fbc:	40014000 	.word	0x40014000

08005fc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e060      	b.n	800609e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	041b      	lsls	r3, r3, #16
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a14      	ldr	r2, [pc, #80]	; (80060ac <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d115      	bne.n	800608c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	051b      	lsls	r3, r3, #20
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40012c00 	.word	0x40012c00

080060b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e040      	b.n	8006144 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fb feee 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2224      	movs	r2, #36	; 0x24
 80060dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0201 	bic.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f8c0 	bl	8006274 <UART_SetConfig>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d101      	bne.n	80060fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e022      	b.n	8006144 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fb0e 	bl	8006728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800611a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689a      	ldr	r2, [r3, #8]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800612a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fb95 	bl	800686c <UART_CheckIdleState>
 8006142:	4603      	mov	r3, r0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
 8006150:	af02      	add	r7, sp, #8
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	4613      	mov	r3, r2
 800615a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006160:	2b20      	cmp	r3, #32
 8006162:	f040 8082 	bne.w	800626a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_UART_Transmit+0x26>
 800616c:	88fb      	ldrh	r3, [r7, #6]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e07a      	b.n	800626c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_UART_Transmit+0x38>
 8006180:	2302      	movs	r3, #2
 8006182:	e073      	b.n	800626c <HAL_UART_Transmit+0x120>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2221      	movs	r2, #33	; 0x21
 8006198:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800619a:	f7fc fe69 	bl	8002e70 <HAL_GetTick>
 800619e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	88fa      	ldrh	r2, [r7, #6]
 80061a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	88fa      	ldrh	r2, [r7, #6]
 80061ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b8:	d108      	bne.n	80061cc <HAL_UART_Transmit+0x80>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	e003      	b.n	80061d4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80061dc:	e02d      	b.n	800623a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2200      	movs	r2, #0
 80061e6:	2180      	movs	r1, #128	; 0x80
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fb88 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e039      	b.n	800626c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	881a      	ldrh	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800620a:	b292      	uxth	r2, r2
 800620c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	3302      	adds	r3, #2
 8006212:	61bb      	str	r3, [r7, #24]
 8006214:	e008      	b.n	8006228 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	781a      	ldrb	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	b292      	uxth	r2, r2
 8006220:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	3301      	adds	r3, #1
 8006226:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1cb      	bne.n	80061de <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2200      	movs	r2, #0
 800624e:	2140      	movs	r1, #64	; 0x40
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fb54 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e005      	b.n	800626c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	e000      	b.n	800626c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800626a:	2302      	movs	r3, #2
  }
}
 800626c:	4618      	mov	r0, r3
 800626e:	3720      	adds	r7, #32
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006278:	b08a      	sub	sp, #40	; 0x28
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	431a      	orrs	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	431a      	orrs	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	4313      	orrs	r3, r2
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4b9e      	ldr	r3, [pc, #632]	; (800651c <UART_SetConfig+0x2a8>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	6812      	ldr	r2, [r2, #0]
 80062aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062ac:	430b      	orrs	r3, r1
 80062ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a93      	ldr	r2, [pc, #588]	; (8006520 <UART_SetConfig+0x2ac>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d004      	beq.n	80062e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062dc:	4313      	orrs	r3, r2
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f0:	430a      	orrs	r2, r1
 80062f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a8a      	ldr	r2, [pc, #552]	; (8006524 <UART_SetConfig+0x2b0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d126      	bne.n	800634c <UART_SetConfig+0xd8>
 80062fe:	4b8a      	ldr	r3, [pc, #552]	; (8006528 <UART_SetConfig+0x2b4>)
 8006300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006304:	f003 0303 	and.w	r3, r3, #3
 8006308:	2b03      	cmp	r3, #3
 800630a:	d81b      	bhi.n	8006344 <UART_SetConfig+0xd0>
 800630c:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <UART_SetConfig+0xa0>)
 800630e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006312:	bf00      	nop
 8006314:	08006325 	.word	0x08006325
 8006318:	08006335 	.word	0x08006335
 800631c:	0800632d 	.word	0x0800632d
 8006320:	0800633d 	.word	0x0800633d
 8006324:	2301      	movs	r3, #1
 8006326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800632a:	e0ab      	b.n	8006484 <UART_SetConfig+0x210>
 800632c:	2302      	movs	r3, #2
 800632e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006332:	e0a7      	b.n	8006484 <UART_SetConfig+0x210>
 8006334:	2304      	movs	r3, #4
 8006336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800633a:	e0a3      	b.n	8006484 <UART_SetConfig+0x210>
 800633c:	2308      	movs	r3, #8
 800633e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006342:	e09f      	b.n	8006484 <UART_SetConfig+0x210>
 8006344:	2310      	movs	r3, #16
 8006346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800634a:	e09b      	b.n	8006484 <UART_SetConfig+0x210>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a76      	ldr	r2, [pc, #472]	; (800652c <UART_SetConfig+0x2b8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d138      	bne.n	80063c8 <UART_SetConfig+0x154>
 8006356:	4b74      	ldr	r3, [pc, #464]	; (8006528 <UART_SetConfig+0x2b4>)
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635c:	f003 030c 	and.w	r3, r3, #12
 8006360:	2b0c      	cmp	r3, #12
 8006362:	d82d      	bhi.n	80063c0 <UART_SetConfig+0x14c>
 8006364:	a201      	add	r2, pc, #4	; (adr r2, 800636c <UART_SetConfig+0xf8>)
 8006366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636a:	bf00      	nop
 800636c:	080063a1 	.word	0x080063a1
 8006370:	080063c1 	.word	0x080063c1
 8006374:	080063c1 	.word	0x080063c1
 8006378:	080063c1 	.word	0x080063c1
 800637c:	080063b1 	.word	0x080063b1
 8006380:	080063c1 	.word	0x080063c1
 8006384:	080063c1 	.word	0x080063c1
 8006388:	080063c1 	.word	0x080063c1
 800638c:	080063a9 	.word	0x080063a9
 8006390:	080063c1 	.word	0x080063c1
 8006394:	080063c1 	.word	0x080063c1
 8006398:	080063c1 	.word	0x080063c1
 800639c:	080063b9 	.word	0x080063b9
 80063a0:	2300      	movs	r3, #0
 80063a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063a6:	e06d      	b.n	8006484 <UART_SetConfig+0x210>
 80063a8:	2302      	movs	r3, #2
 80063aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ae:	e069      	b.n	8006484 <UART_SetConfig+0x210>
 80063b0:	2304      	movs	r3, #4
 80063b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063b6:	e065      	b.n	8006484 <UART_SetConfig+0x210>
 80063b8:	2308      	movs	r3, #8
 80063ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063be:	e061      	b.n	8006484 <UART_SetConfig+0x210>
 80063c0:	2310      	movs	r3, #16
 80063c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063c6:	e05d      	b.n	8006484 <UART_SetConfig+0x210>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a58      	ldr	r2, [pc, #352]	; (8006530 <UART_SetConfig+0x2bc>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d125      	bne.n	800641e <UART_SetConfig+0x1aa>
 80063d2:	4b55      	ldr	r3, [pc, #340]	; (8006528 <UART_SetConfig+0x2b4>)
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063dc:	2b30      	cmp	r3, #48	; 0x30
 80063de:	d016      	beq.n	800640e <UART_SetConfig+0x19a>
 80063e0:	2b30      	cmp	r3, #48	; 0x30
 80063e2:	d818      	bhi.n	8006416 <UART_SetConfig+0x1a2>
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d00a      	beq.n	80063fe <UART_SetConfig+0x18a>
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d814      	bhi.n	8006416 <UART_SetConfig+0x1a2>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <UART_SetConfig+0x182>
 80063f0:	2b10      	cmp	r3, #16
 80063f2:	d008      	beq.n	8006406 <UART_SetConfig+0x192>
 80063f4:	e00f      	b.n	8006416 <UART_SetConfig+0x1a2>
 80063f6:	2300      	movs	r3, #0
 80063f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063fc:	e042      	b.n	8006484 <UART_SetConfig+0x210>
 80063fe:	2302      	movs	r3, #2
 8006400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006404:	e03e      	b.n	8006484 <UART_SetConfig+0x210>
 8006406:	2304      	movs	r3, #4
 8006408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800640c:	e03a      	b.n	8006484 <UART_SetConfig+0x210>
 800640e:	2308      	movs	r3, #8
 8006410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006414:	e036      	b.n	8006484 <UART_SetConfig+0x210>
 8006416:	2310      	movs	r3, #16
 8006418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800641c:	e032      	b.n	8006484 <UART_SetConfig+0x210>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a3f      	ldr	r2, [pc, #252]	; (8006520 <UART_SetConfig+0x2ac>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d12a      	bne.n	800647e <UART_SetConfig+0x20a>
 8006428:	4b3f      	ldr	r3, [pc, #252]	; (8006528 <UART_SetConfig+0x2b4>)
 800642a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006432:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006436:	d01a      	beq.n	800646e <UART_SetConfig+0x1fa>
 8006438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800643c:	d81b      	bhi.n	8006476 <UART_SetConfig+0x202>
 800643e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006442:	d00c      	beq.n	800645e <UART_SetConfig+0x1ea>
 8006444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006448:	d815      	bhi.n	8006476 <UART_SetConfig+0x202>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <UART_SetConfig+0x1e2>
 800644e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006452:	d008      	beq.n	8006466 <UART_SetConfig+0x1f2>
 8006454:	e00f      	b.n	8006476 <UART_SetConfig+0x202>
 8006456:	2300      	movs	r3, #0
 8006458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800645c:	e012      	b.n	8006484 <UART_SetConfig+0x210>
 800645e:	2302      	movs	r3, #2
 8006460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006464:	e00e      	b.n	8006484 <UART_SetConfig+0x210>
 8006466:	2304      	movs	r3, #4
 8006468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800646c:	e00a      	b.n	8006484 <UART_SetConfig+0x210>
 800646e:	2308      	movs	r3, #8
 8006470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006474:	e006      	b.n	8006484 <UART_SetConfig+0x210>
 8006476:	2310      	movs	r3, #16
 8006478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800647c:	e002      	b.n	8006484 <UART_SetConfig+0x210>
 800647e:	2310      	movs	r3, #16
 8006480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a25      	ldr	r2, [pc, #148]	; (8006520 <UART_SetConfig+0x2ac>)
 800648a:	4293      	cmp	r3, r2
 800648c:	f040 808a 	bne.w	80065a4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006490:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006494:	2b08      	cmp	r3, #8
 8006496:	d824      	bhi.n	80064e2 <UART_SetConfig+0x26e>
 8006498:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <UART_SetConfig+0x22c>)
 800649a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649e:	bf00      	nop
 80064a0:	080064c5 	.word	0x080064c5
 80064a4:	080064e3 	.word	0x080064e3
 80064a8:	080064cd 	.word	0x080064cd
 80064ac:	080064e3 	.word	0x080064e3
 80064b0:	080064d3 	.word	0x080064d3
 80064b4:	080064e3 	.word	0x080064e3
 80064b8:	080064e3 	.word	0x080064e3
 80064bc:	080064e3 	.word	0x080064e3
 80064c0:	080064db 	.word	0x080064db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c4:	f7fd fdd0 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 80064c8:	61f8      	str	r0, [r7, #28]
        break;
 80064ca:	e010      	b.n	80064ee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064cc:	4b19      	ldr	r3, [pc, #100]	; (8006534 <UART_SetConfig+0x2c0>)
 80064ce:	61fb      	str	r3, [r7, #28]
        break;
 80064d0:	e00d      	b.n	80064ee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d2:	f7fd fd31 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 80064d6:	61f8      	str	r0, [r7, #28]
        break;
 80064d8:	e009      	b.n	80064ee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064de:	61fb      	str	r3, [r7, #28]
        break;
 80064e0:	e005      	b.n	80064ee <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 8109 	beq.w	8006708 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	4413      	add	r3, r2
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	429a      	cmp	r2, r3
 8006504:	d305      	bcc.n	8006512 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	429a      	cmp	r2, r3
 8006510:	d912      	bls.n	8006538 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006518:	e0f6      	b.n	8006708 <UART_SetConfig+0x494>
 800651a:	bf00      	nop
 800651c:	efff69f3 	.word	0xefff69f3
 8006520:	40008000 	.word	0x40008000
 8006524:	40013800 	.word	0x40013800
 8006528:	40021000 	.word	0x40021000
 800652c:	40004400 	.word	0x40004400
 8006530:	40004800 	.word	0x40004800
 8006534:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	2200      	movs	r2, #0
 800653c:	461c      	mov	r4, r3
 800653e:	4615      	mov	r5, r2
 8006540:	f04f 0200 	mov.w	r2, #0
 8006544:	f04f 0300 	mov.w	r3, #0
 8006548:	022b      	lsls	r3, r5, #8
 800654a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800654e:	0222      	lsls	r2, r4, #8
 8006550:	68f9      	ldr	r1, [r7, #12]
 8006552:	6849      	ldr	r1, [r1, #4]
 8006554:	0849      	lsrs	r1, r1, #1
 8006556:	2000      	movs	r0, #0
 8006558:	4688      	mov	r8, r1
 800655a:	4681      	mov	r9, r0
 800655c:	eb12 0a08 	adds.w	sl, r2, r8
 8006560:	eb43 0b09 	adc.w	fp, r3, r9
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	607a      	str	r2, [r7, #4]
 800656e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006572:	4650      	mov	r0, sl
 8006574:	4659      	mov	r1, fp
 8006576:	f7fa fb17 	bl	8000ba8 <__aeabi_uldivmod>
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	4613      	mov	r3, r2
 8006580:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006588:	d308      	bcc.n	800659c <UART_SetConfig+0x328>
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006590:	d204      	bcs.n	800659c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	60da      	str	r2, [r3, #12]
 800659a:	e0b5      	b.n	8006708 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80065a2:	e0b1      	b.n	8006708 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ac:	d15d      	bne.n	800666a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80065ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065b2:	2b08      	cmp	r3, #8
 80065b4:	d827      	bhi.n	8006606 <UART_SetConfig+0x392>
 80065b6:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <UART_SetConfig+0x348>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065e1 	.word	0x080065e1
 80065c0:	080065e9 	.word	0x080065e9
 80065c4:	080065f1 	.word	0x080065f1
 80065c8:	08006607 	.word	0x08006607
 80065cc:	080065f7 	.word	0x080065f7
 80065d0:	08006607 	.word	0x08006607
 80065d4:	08006607 	.word	0x08006607
 80065d8:	08006607 	.word	0x08006607
 80065dc:	080065ff 	.word	0x080065ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e0:	f7fd fd42 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 80065e4:	61f8      	str	r0, [r7, #28]
        break;
 80065e6:	e014      	b.n	8006612 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065e8:	f7fd fd54 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 80065ec:	61f8      	str	r0, [r7, #28]
        break;
 80065ee:	e010      	b.n	8006612 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065f0:	4b4c      	ldr	r3, [pc, #304]	; (8006724 <UART_SetConfig+0x4b0>)
 80065f2:	61fb      	str	r3, [r7, #28]
        break;
 80065f4:	e00d      	b.n	8006612 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065f6:	f7fd fc9f 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 80065fa:	61f8      	str	r0, [r7, #28]
        break;
 80065fc:	e009      	b.n	8006612 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006602:	61fb      	str	r3, [r7, #28]
        break;
 8006604:	e005      	b.n	8006612 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006610:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d077      	beq.n	8006708 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	005a      	lsls	r2, r3, #1
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	085b      	lsrs	r3, r3, #1
 8006622:	441a      	add	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	fbb2 f3f3 	udiv	r3, r2, r3
 800662c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	2b0f      	cmp	r3, #15
 8006632:	d916      	bls.n	8006662 <UART_SetConfig+0x3ee>
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800663a:	d212      	bcs.n	8006662 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	b29b      	uxth	r3, r3
 8006640:	f023 030f 	bic.w	r3, r3, #15
 8006644:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	085b      	lsrs	r3, r3, #1
 800664a:	b29b      	uxth	r3, r3
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	b29a      	uxth	r2, r3
 8006652:	8afb      	ldrh	r3, [r7, #22]
 8006654:	4313      	orrs	r3, r2
 8006656:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	8afa      	ldrh	r2, [r7, #22]
 800665e:	60da      	str	r2, [r3, #12]
 8006660:	e052      	b.n	8006708 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006668:	e04e      	b.n	8006708 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800666a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800666e:	2b08      	cmp	r3, #8
 8006670:	d827      	bhi.n	80066c2 <UART_SetConfig+0x44e>
 8006672:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <UART_SetConfig+0x404>)
 8006674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006678:	0800669d 	.word	0x0800669d
 800667c:	080066a5 	.word	0x080066a5
 8006680:	080066ad 	.word	0x080066ad
 8006684:	080066c3 	.word	0x080066c3
 8006688:	080066b3 	.word	0x080066b3
 800668c:	080066c3 	.word	0x080066c3
 8006690:	080066c3 	.word	0x080066c3
 8006694:	080066c3 	.word	0x080066c3
 8006698:	080066bb 	.word	0x080066bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800669c:	f7fd fce4 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 80066a0:	61f8      	str	r0, [r7, #28]
        break;
 80066a2:	e014      	b.n	80066ce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066a4:	f7fd fcf6 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 80066a8:	61f8      	str	r0, [r7, #28]
        break;
 80066aa:	e010      	b.n	80066ce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066ac:	4b1d      	ldr	r3, [pc, #116]	; (8006724 <UART_SetConfig+0x4b0>)
 80066ae:	61fb      	str	r3, [r7, #28]
        break;
 80066b0:	e00d      	b.n	80066ce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066b2:	f7fd fc41 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 80066b6:	61f8      	str	r0, [r7, #28]
        break;
 80066b8:	e009      	b.n	80066ce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066be:	61fb      	str	r3, [r7, #28]
        break;
 80066c0:	e005      	b.n	80066ce <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066cc:	bf00      	nop
    }

    if (pclk != 0U)
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d019      	beq.n	8006708 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	085a      	lsrs	r2, r3, #1
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	441a      	add	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	2b0f      	cmp	r3, #15
 80066ec:	d909      	bls.n	8006702 <UART_SetConfig+0x48e>
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f4:	d205      	bcs.n	8006702 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60da      	str	r2, [r3, #12]
 8006700:	e002      	b.n	8006708 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006714:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006718:	4618      	mov	r0, r3
 800671a:	3728      	adds	r7, #40	; 0x28
 800671c:	46bd      	mov	sp, r7
 800671e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006722:	bf00      	nop
 8006724:	00f42400 	.word	0x00f42400

08006728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	f003 0308 	and.w	r3, r3, #8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01a      	beq.n	800683e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006826:	d10a      	bne.n	800683e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	605a      	str	r2, [r3, #4]
  }
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af02      	add	r7, sp, #8
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800687c:	f7fc faf8 	bl	8002e70 <HAL_GetTick>
 8006880:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b08      	cmp	r3, #8
 800688e:	d10e      	bne.n	80068ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f82d 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e023      	b.n	80068f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d10e      	bne.n	80068da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f817 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e00d      	b.n	80068f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b09c      	sub	sp, #112	; 0x70
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	603b      	str	r3, [r7, #0]
 800690a:	4613      	mov	r3, r2
 800690c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800690e:	e0a5      	b.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006916:	f000 80a1 	beq.w	8006a5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800691a:	f7fc faa9 	bl	8002e70 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006926:	429a      	cmp	r2, r3
 8006928:	d302      	bcc.n	8006930 <UART_WaitOnFlagUntilTimeout+0x32>
 800692a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800692c:	2b00      	cmp	r3, #0
 800692e:	d13e      	bne.n	80069ae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800693e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006940:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006944:	667b      	str	r3, [r7, #100]	; 0x64
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800694e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006950:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006954:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800695c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e6      	bne.n	8006930 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3308      	adds	r3, #8
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	663b      	str	r3, [r7, #96]	; 0x60
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3308      	adds	r3, #8
 8006980:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006982:	64ba      	str	r2, [r7, #72]	; 0x48
 8006984:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e5      	bne.n	8006962 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e067      	b.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d04f      	beq.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ca:	d147      	bne.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069d4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	e853 3f00 	ldrex	r3, [r3]
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	461a      	mov	r2, r3
 80069f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f4:	637b      	str	r3, [r7, #52]	; 0x34
 80069f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e6      	bne.n	80069d6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	613b      	str	r3, [r7, #16]
   return(result);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f023 0301 	bic.w	r3, r3, #1
 8006a1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a28:	623a      	str	r2, [r7, #32]
 8006a2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	69f9      	ldr	r1, [r7, #28]
 8006a2e:	6a3a      	ldr	r2, [r7, #32]
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e5      	bne.n	8006a08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e010      	b.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69da      	ldr	r2, [r3, #28]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	4013      	ands	r3, r2
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2301      	moveq	r3, #1
 8006a6e:	2300      	movne	r3, #0
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	f43f af4a 	beq.w	8006910 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3770      	adds	r7, #112	; 0x70
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <setCSLine>:
#define RES14           14

#define AMT22_DELAY     10

void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b082      	sub	sp, #8
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	460b      	mov	r3, r1
 8006a90:	807b      	strh	r3, [r7, #2]
 8006a92:	4613      	mov	r3, r2
 8006a94:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8006a96:	787a      	ldrb	r2, [r7, #1]
 8006a98:	887b      	ldrh	r3, [r7, #2]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7fc fca3 	bl	80033e8 <HAL_GPIO_WritePin>
}
 8006aa2:	bf00      	nop
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b088      	sub	sp, #32
 8006aae:	af02      	add	r7, sp, #8
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	607a      	str	r2, [r7, #4]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	72fb      	strb	r3, [r7, #11]
 8006aba:	4613      	mov	r3, r2
 8006abc:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 8006abe:	893b      	ldrh	r3, [r7, #8]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff ffde 	bl	8006a86 <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006aca:	200a      	movs	r0, #10
 8006acc:	f000 f8fa 	bl	8006cc4 <delay_us_AMT22>

  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8006ad0:	f107 0217 	add.w	r2, r7, #23
 8006ad4:	f107 010b 	add.w	r1, r7, #11
 8006ad8:	230a      	movs	r3, #10
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	2301      	movs	r3, #1
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f7fd ff2d 	bl	800493e <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  //  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006ae4:	200a      	movs	r0, #10
 8006ae6:	f000 f8ed 	bl	8006cc4 <delay_us_AMT22>

  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 8006aea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006aee:	893b      	ldrh	r3, [r7, #8]
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff ffc7 	bl	8006a86 <setCSLine>

  return data;
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b08c      	sub	sp, #48	; 0x30
 8006b06:	af02      	add	r7, sp, #8
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	461a      	mov	r2, r3
 8006b10:	460b      	mov	r3, r1
 8006b12:	80fb      	strh	r3, [r7, #6]
 8006b14:	4613      	mov	r3, r2
 8006b16:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8;
 8006b18:	88fa      	ldrh	r2, [r7, #6]
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	4613      	mov	r3, r2
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	2100      	movs	r1, #0
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f7ff ffbe 	bl	8006aaa <spiWriteRead>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006b36:	200a      	movs	r0, #10
 8006b38:	f000 f8c4 	bl	8006cc4 <delay_us_AMT22>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer);
 8006b3c:	88fa      	ldrh	r2, [r7, #6]
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	9301      	str	r3, [sp, #4]
 8006b42:	2301      	movs	r3, #1
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	4613      	mov	r3, r2
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7ff ffac 	bl	8006aaa <spiWriteRead>
 8006b52:	4603      	mov	r3, r0
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	623b      	str	r3, [r7, #32]
 8006b60:	e010      	b.n	8006b84 <getPositionSPI+0x82>
 8006b62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	fa42 f303 	asr.w	r3, r2, r3
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	b2d9      	uxtb	r1, r3
 8006b72:	f107 0210 	add.w	r2, r7, #16
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	4413      	add	r3, r2
 8006b7a:	460a      	mov	r2, r1
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	3301      	adds	r3, #1
 8006b82:	623b      	str	r3, [r7, #32]
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	2b0f      	cmp	r3, #15
 8006b88:	ddeb      	ble.n	8006b62 <getPositionSPI+0x60>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
 if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8006b8a:	7ffb      	ldrb	r3, [r7, #31]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	7f7a      	ldrb	r2, [r7, #29]
 8006b90:	7efb      	ldrb	r3, [r7, #27]
 8006b92:	4053      	eors	r3, r2
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	7e7b      	ldrb	r3, [r7, #25]
 8006b98:	4053      	eors	r3, r2
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
 8006b9e:	4053      	eors	r3, r2
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	7d7b      	ldrb	r3, [r7, #21]
 8006ba4:	4053      	eors	r3, r2
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	7cfb      	ldrb	r3, [r7, #19]
 8006baa:	4053      	eors	r3, r2
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	7c7b      	ldrb	r3, [r7, #17]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	bf0c      	ite	eq
 8006bb4:	2301      	moveq	r3, #1
 8006bb6:	2300      	movne	r3, #0
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	4299      	cmp	r1, r3
 8006bbc:	d11e      	bne.n	8006bfc <getPositionSPI+0xfa>
         && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8006bbe:	7fbb      	ldrb	r3, [r7, #30]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	7f3a      	ldrb	r2, [r7, #28]
 8006bc4:	7ebb      	ldrb	r3, [r7, #26]
 8006bc6:	4053      	eors	r3, r2
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	7e3b      	ldrb	r3, [r7, #24]
 8006bcc:	4053      	eors	r3, r2
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	7dbb      	ldrb	r3, [r7, #22]
 8006bd2:	4053      	eors	r3, r2
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	7d3b      	ldrb	r3, [r7, #20]
 8006bd8:	4053      	eors	r3, r2
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	7cbb      	ldrb	r3, [r7, #18]
 8006bde:	4053      	eors	r3, r2
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	7c3b      	ldrb	r3, [r7, #16]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	bf0c      	ite	eq
 8006be8:	2301      	moveq	r3, #1
 8006bea:	2300      	movne	r3, #0
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	4299      	cmp	r1, r3
 8006bf0:	d104      	bne.n	8006bfc <getPositionSPI+0xfa>
   {
     //we got back a good position, so just mask away the checkbits
     currentPosition &= 0x3FFF;
 8006bf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bf4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006bf8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bfa:	e002      	b.n	8006c02 <getPositionSPI+0x100>
   }
 else
 {
   currentPosition = 0xFFFF; //bad position
 8006bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c00:	84fb      	strh	r3, [r7, #38]	; 0x26
 }
  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 8006c02:	797b      	ldrb	r3, [r7, #5]
 8006c04:	2b0c      	cmp	r3, #12
 8006c06:	d107      	bne.n	8006c18 <getPositionSPI+0x116>
 8006c08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d002      	beq.n	8006c18 <getPositionSPI+0x116>
 8006c12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c14:	089b      	lsrs	r3, r3, #2
 8006c16:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 8006c18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3728      	adds	r7, #40	; 0x28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <setZeroSPI>:

void setZeroSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, TIM_HandleTypeDef *timer)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b086      	sub	sp, #24
 8006c26:	af02      	add	r7, sp, #8
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	603b      	str	r3, [r7, #0]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	80fb      	strh	r3, [r7, #6]
  spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer);
 8006c32:	88fa      	ldrh	r2, [r7, #6]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	2100      	movs	r1, #0
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7ff ff31 	bl	8006aaa <spiWriteRead>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
//  delay(timer, 3);
  delay_us_AMT22(3);
 8006c48:	2003      	movs	r0, #3
 8006c4a:	f000 f83b 	bl	8006cc4 <delay_us_AMT22>

  spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1, timer);
 8006c4e:	88fa      	ldrh	r2, [r7, #6]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	9301      	str	r3, [sp, #4]
 8006c54:	2301      	movs	r3, #1
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	2170      	movs	r1, #112	; 0x70
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f7ff ff23 	bl	8006aaa <spiWriteRead>


//  delay(timer, 250);
  delay_us_AMT22(250);
 8006c64:	20fa      	movs	r0, #250	; 0xfa
 8006c66:	f000 f82d 	bl	8006cc4 <delay_us_AMT22>
}
 8006c6a:	bf00      	nop
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <resetAMT22>:

void resetAMT22(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, TIM_HandleTypeDef *timer)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b086      	sub	sp, #24
 8006c76:	af02      	add	r7, sp, #8
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	603b      	str	r3, [r7, #0]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	80fb      	strh	r3, [r7, #6]
  spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer);
 8006c82:	88fa      	ldrh	r2, [r7, #6]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	2100      	movs	r1, #0
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f7ff ff09 	bl	8006aaa <spiWriteRead>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8006c98:	200a      	movs	r0, #10
 8006c9a:	f000 f813 	bl	8006cc4 <delay_us_AMT22>

  spiWriteRead(hspi, AMT22_RESET, encoderPort, encoderPin, 1, timer);
 8006c9e:	88fa      	ldrh	r2, [r7, #6]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	9301      	str	r3, [sp, #4]
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	2160      	movs	r1, #96	; 0x60
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f7ff fefb 	bl	8006aaa <spiWriteRead>

//  delay(timer, 250);
  delay_us_AMT22(250);
 8006cb4:	20fa      	movs	r0, #250	; 0xfa
 8006cb6:	f000 f805 	bl	8006cc4 <delay_us_AMT22>
}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <delay_us_AMT22>:
			passedTime +=timer->Init.Period;
		}
	}
}
void delay_us_AMT22 (uint16_t us)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8006cce:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <delay_us_AMT22+0x30>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8006cd6:	bf00      	nop
 8006cd8:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <delay_us_AMT22+0x30>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cde:	88fb      	ldrh	r3, [r7, #6]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d3f9      	bcc.n	8006cd8 <delay_us_AMT22+0x14>
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	200004f8 	.word	0x200004f8

08006cf8 <_Znaj>:
 8006cf8:	f000 b800 	b.w	8006cfc <_Znwj>

08006cfc <_Znwj>:
 8006cfc:	2801      	cmp	r0, #1
 8006cfe:	bf38      	it	cc
 8006d00:	2001      	movcc	r0, #1
 8006d02:	b510      	push	{r4, lr}
 8006d04:	4604      	mov	r4, r0
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 f844 	bl	8006d94 <malloc>
 8006d0c:	b930      	cbnz	r0, 8006d1c <_Znwj+0x20>
 8006d0e:	f000 f807 	bl	8006d20 <_ZSt15get_new_handlerv>
 8006d12:	b908      	cbnz	r0, 8006d18 <_Znwj+0x1c>
 8006d14:	f000 f80c 	bl	8006d30 <abort>
 8006d18:	4780      	blx	r0
 8006d1a:	e7f4      	b.n	8006d06 <_Znwj+0xa>
 8006d1c:	bd10      	pop	{r4, pc}
	...

08006d20 <_ZSt15get_new_handlerv>:
 8006d20:	4b02      	ldr	r3, [pc, #8]	; (8006d2c <_ZSt15get_new_handlerv+0xc>)
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	f3bf 8f5b 	dmb	ish
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	20000618 	.word	0x20000618

08006d30 <abort>:
 8006d30:	b508      	push	{r3, lr}
 8006d32:	2006      	movs	r0, #6
 8006d34:	f000 fe62 	bl	80079fc <raise>
 8006d38:	2001      	movs	r0, #1
 8006d3a:	f7fa fdf7 	bl	800192c <_exit>
	...

08006d40 <__errno>:
 8006d40:	4b01      	ldr	r3, [pc, #4]	; (8006d48 <__errno+0x8>)
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	2000003c 	.word	0x2000003c

08006d4c <__libc_init_array>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	4d0d      	ldr	r5, [pc, #52]	; (8006d84 <__libc_init_array+0x38>)
 8006d50:	4c0d      	ldr	r4, [pc, #52]	; (8006d88 <__libc_init_array+0x3c>)
 8006d52:	1b64      	subs	r4, r4, r5
 8006d54:	10a4      	asrs	r4, r4, #2
 8006d56:	2600      	movs	r6, #0
 8006d58:	42a6      	cmp	r6, r4
 8006d5a:	d109      	bne.n	8006d70 <__libc_init_array+0x24>
 8006d5c:	4d0b      	ldr	r5, [pc, #44]	; (8006d8c <__libc_init_array+0x40>)
 8006d5e:	4c0c      	ldr	r4, [pc, #48]	; (8006d90 <__libc_init_array+0x44>)
 8006d60:	f003 f9c4 	bl	800a0ec <_init>
 8006d64:	1b64      	subs	r4, r4, r5
 8006d66:	10a4      	asrs	r4, r4, #2
 8006d68:	2600      	movs	r6, #0
 8006d6a:	42a6      	cmp	r6, r4
 8006d6c:	d105      	bne.n	8006d7a <__libc_init_array+0x2e>
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}
 8006d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d74:	4798      	blx	r3
 8006d76:	3601      	adds	r6, #1
 8006d78:	e7ee      	b.n	8006d58 <__libc_init_array+0xc>
 8006d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d7e:	4798      	blx	r3
 8006d80:	3601      	adds	r6, #1
 8006d82:	e7f2      	b.n	8006d6a <__libc_init_array+0x1e>
 8006d84:	0800ac3c 	.word	0x0800ac3c
 8006d88:	0800ac3c 	.word	0x0800ac3c
 8006d8c:	0800ac3c 	.word	0x0800ac3c
 8006d90:	0800ac44 	.word	0x0800ac44

08006d94 <malloc>:
 8006d94:	4b02      	ldr	r3, [pc, #8]	; (8006da0 <malloc+0xc>)
 8006d96:	4601      	mov	r1, r0
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	f000 b877 	b.w	8006e8c <_malloc_r>
 8006d9e:	bf00      	nop
 8006da0:	2000003c 	.word	0x2000003c

08006da4 <memset>:
 8006da4:	4402      	add	r2, r0
 8006da6:	4603      	mov	r3, r0
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d100      	bne.n	8006dae <memset+0xa>
 8006dac:	4770      	bx	lr
 8006dae:	f803 1b01 	strb.w	r1, [r3], #1
 8006db2:	e7f9      	b.n	8006da8 <memset+0x4>

08006db4 <_free_r>:
 8006db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006db6:	2900      	cmp	r1, #0
 8006db8:	d044      	beq.n	8006e44 <_free_r+0x90>
 8006dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dbe:	9001      	str	r0, [sp, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f1a1 0404 	sub.w	r4, r1, #4
 8006dc6:	bfb8      	it	lt
 8006dc8:	18e4      	addlt	r4, r4, r3
 8006dca:	f002 f8d3 	bl	8008f74 <__malloc_lock>
 8006dce:	4a1e      	ldr	r2, [pc, #120]	; (8006e48 <_free_r+0x94>)
 8006dd0:	9801      	ldr	r0, [sp, #4]
 8006dd2:	6813      	ldr	r3, [r2, #0]
 8006dd4:	b933      	cbnz	r3, 8006de4 <_free_r+0x30>
 8006dd6:	6063      	str	r3, [r4, #4]
 8006dd8:	6014      	str	r4, [r2, #0]
 8006dda:	b003      	add	sp, #12
 8006ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006de0:	f002 b8ce 	b.w	8008f80 <__malloc_unlock>
 8006de4:	42a3      	cmp	r3, r4
 8006de6:	d908      	bls.n	8006dfa <_free_r+0x46>
 8006de8:	6825      	ldr	r5, [r4, #0]
 8006dea:	1961      	adds	r1, r4, r5
 8006dec:	428b      	cmp	r3, r1
 8006dee:	bf01      	itttt	eq
 8006df0:	6819      	ldreq	r1, [r3, #0]
 8006df2:	685b      	ldreq	r3, [r3, #4]
 8006df4:	1949      	addeq	r1, r1, r5
 8006df6:	6021      	streq	r1, [r4, #0]
 8006df8:	e7ed      	b.n	8006dd6 <_free_r+0x22>
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	b10b      	cbz	r3, 8006e04 <_free_r+0x50>
 8006e00:	42a3      	cmp	r3, r4
 8006e02:	d9fa      	bls.n	8006dfa <_free_r+0x46>
 8006e04:	6811      	ldr	r1, [r2, #0]
 8006e06:	1855      	adds	r5, r2, r1
 8006e08:	42a5      	cmp	r5, r4
 8006e0a:	d10b      	bne.n	8006e24 <_free_r+0x70>
 8006e0c:	6824      	ldr	r4, [r4, #0]
 8006e0e:	4421      	add	r1, r4
 8006e10:	1854      	adds	r4, r2, r1
 8006e12:	42a3      	cmp	r3, r4
 8006e14:	6011      	str	r1, [r2, #0]
 8006e16:	d1e0      	bne.n	8006dda <_free_r+0x26>
 8006e18:	681c      	ldr	r4, [r3, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	6053      	str	r3, [r2, #4]
 8006e1e:	4421      	add	r1, r4
 8006e20:	6011      	str	r1, [r2, #0]
 8006e22:	e7da      	b.n	8006dda <_free_r+0x26>
 8006e24:	d902      	bls.n	8006e2c <_free_r+0x78>
 8006e26:	230c      	movs	r3, #12
 8006e28:	6003      	str	r3, [r0, #0]
 8006e2a:	e7d6      	b.n	8006dda <_free_r+0x26>
 8006e2c:	6825      	ldr	r5, [r4, #0]
 8006e2e:	1961      	adds	r1, r4, r5
 8006e30:	428b      	cmp	r3, r1
 8006e32:	bf04      	itt	eq
 8006e34:	6819      	ldreq	r1, [r3, #0]
 8006e36:	685b      	ldreq	r3, [r3, #4]
 8006e38:	6063      	str	r3, [r4, #4]
 8006e3a:	bf04      	itt	eq
 8006e3c:	1949      	addeq	r1, r1, r5
 8006e3e:	6021      	streq	r1, [r4, #0]
 8006e40:	6054      	str	r4, [r2, #4]
 8006e42:	e7ca      	b.n	8006dda <_free_r+0x26>
 8006e44:	b003      	add	sp, #12
 8006e46:	bd30      	pop	{r4, r5, pc}
 8006e48:	2000061c 	.word	0x2000061c

08006e4c <sbrk_aligned>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	4e0e      	ldr	r6, [pc, #56]	; (8006e88 <sbrk_aligned+0x3c>)
 8006e50:	460c      	mov	r4, r1
 8006e52:	6831      	ldr	r1, [r6, #0]
 8006e54:	4605      	mov	r5, r0
 8006e56:	b911      	cbnz	r1, 8006e5e <sbrk_aligned+0x12>
 8006e58:	f000 fd98 	bl	800798c <_sbrk_r>
 8006e5c:	6030      	str	r0, [r6, #0]
 8006e5e:	4621      	mov	r1, r4
 8006e60:	4628      	mov	r0, r5
 8006e62:	f000 fd93 	bl	800798c <_sbrk_r>
 8006e66:	1c43      	adds	r3, r0, #1
 8006e68:	d00a      	beq.n	8006e80 <sbrk_aligned+0x34>
 8006e6a:	1cc4      	adds	r4, r0, #3
 8006e6c:	f024 0403 	bic.w	r4, r4, #3
 8006e70:	42a0      	cmp	r0, r4
 8006e72:	d007      	beq.n	8006e84 <sbrk_aligned+0x38>
 8006e74:	1a21      	subs	r1, r4, r0
 8006e76:	4628      	mov	r0, r5
 8006e78:	f000 fd88 	bl	800798c <_sbrk_r>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d101      	bne.n	8006e84 <sbrk_aligned+0x38>
 8006e80:	f04f 34ff 	mov.w	r4, #4294967295
 8006e84:	4620      	mov	r0, r4
 8006e86:	bd70      	pop	{r4, r5, r6, pc}
 8006e88:	20000620 	.word	0x20000620

08006e8c <_malloc_r>:
 8006e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e90:	1ccd      	adds	r5, r1, #3
 8006e92:	f025 0503 	bic.w	r5, r5, #3
 8006e96:	3508      	adds	r5, #8
 8006e98:	2d0c      	cmp	r5, #12
 8006e9a:	bf38      	it	cc
 8006e9c:	250c      	movcc	r5, #12
 8006e9e:	2d00      	cmp	r5, #0
 8006ea0:	4607      	mov	r7, r0
 8006ea2:	db01      	blt.n	8006ea8 <_malloc_r+0x1c>
 8006ea4:	42a9      	cmp	r1, r5
 8006ea6:	d905      	bls.n	8006eb4 <_malloc_r+0x28>
 8006ea8:	230c      	movs	r3, #12
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	2600      	movs	r6, #0
 8006eae:	4630      	mov	r0, r6
 8006eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eb4:	4e2e      	ldr	r6, [pc, #184]	; (8006f70 <_malloc_r+0xe4>)
 8006eb6:	f002 f85d 	bl	8008f74 <__malloc_lock>
 8006eba:	6833      	ldr	r3, [r6, #0]
 8006ebc:	461c      	mov	r4, r3
 8006ebe:	bb34      	cbnz	r4, 8006f0e <_malloc_r+0x82>
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	f7ff ffc2 	bl	8006e4c <sbrk_aligned>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	4604      	mov	r4, r0
 8006ecc:	d14d      	bne.n	8006f6a <_malloc_r+0xde>
 8006ece:	6834      	ldr	r4, [r6, #0]
 8006ed0:	4626      	mov	r6, r4
 8006ed2:	2e00      	cmp	r6, #0
 8006ed4:	d140      	bne.n	8006f58 <_malloc_r+0xcc>
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	4631      	mov	r1, r6
 8006eda:	4638      	mov	r0, r7
 8006edc:	eb04 0803 	add.w	r8, r4, r3
 8006ee0:	f000 fd54 	bl	800798c <_sbrk_r>
 8006ee4:	4580      	cmp	r8, r0
 8006ee6:	d13a      	bne.n	8006f5e <_malloc_r+0xd2>
 8006ee8:	6821      	ldr	r1, [r4, #0]
 8006eea:	3503      	adds	r5, #3
 8006eec:	1a6d      	subs	r5, r5, r1
 8006eee:	f025 0503 	bic.w	r5, r5, #3
 8006ef2:	3508      	adds	r5, #8
 8006ef4:	2d0c      	cmp	r5, #12
 8006ef6:	bf38      	it	cc
 8006ef8:	250c      	movcc	r5, #12
 8006efa:	4629      	mov	r1, r5
 8006efc:	4638      	mov	r0, r7
 8006efe:	f7ff ffa5 	bl	8006e4c <sbrk_aligned>
 8006f02:	3001      	adds	r0, #1
 8006f04:	d02b      	beq.n	8006f5e <_malloc_r+0xd2>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	442b      	add	r3, r5
 8006f0a:	6023      	str	r3, [r4, #0]
 8006f0c:	e00e      	b.n	8006f2c <_malloc_r+0xa0>
 8006f0e:	6822      	ldr	r2, [r4, #0]
 8006f10:	1b52      	subs	r2, r2, r5
 8006f12:	d41e      	bmi.n	8006f52 <_malloc_r+0xc6>
 8006f14:	2a0b      	cmp	r2, #11
 8006f16:	d916      	bls.n	8006f46 <_malloc_r+0xba>
 8006f18:	1961      	adds	r1, r4, r5
 8006f1a:	42a3      	cmp	r3, r4
 8006f1c:	6025      	str	r5, [r4, #0]
 8006f1e:	bf18      	it	ne
 8006f20:	6059      	strne	r1, [r3, #4]
 8006f22:	6863      	ldr	r3, [r4, #4]
 8006f24:	bf08      	it	eq
 8006f26:	6031      	streq	r1, [r6, #0]
 8006f28:	5162      	str	r2, [r4, r5]
 8006f2a:	604b      	str	r3, [r1, #4]
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f104 060b 	add.w	r6, r4, #11
 8006f32:	f002 f825 	bl	8008f80 <__malloc_unlock>
 8006f36:	f026 0607 	bic.w	r6, r6, #7
 8006f3a:	1d23      	adds	r3, r4, #4
 8006f3c:	1af2      	subs	r2, r6, r3
 8006f3e:	d0b6      	beq.n	8006eae <_malloc_r+0x22>
 8006f40:	1b9b      	subs	r3, r3, r6
 8006f42:	50a3      	str	r3, [r4, r2]
 8006f44:	e7b3      	b.n	8006eae <_malloc_r+0x22>
 8006f46:	6862      	ldr	r2, [r4, #4]
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	bf0c      	ite	eq
 8006f4c:	6032      	streq	r2, [r6, #0]
 8006f4e:	605a      	strne	r2, [r3, #4]
 8006f50:	e7ec      	b.n	8006f2c <_malloc_r+0xa0>
 8006f52:	4623      	mov	r3, r4
 8006f54:	6864      	ldr	r4, [r4, #4]
 8006f56:	e7b2      	b.n	8006ebe <_malloc_r+0x32>
 8006f58:	4634      	mov	r4, r6
 8006f5a:	6876      	ldr	r6, [r6, #4]
 8006f5c:	e7b9      	b.n	8006ed2 <_malloc_r+0x46>
 8006f5e:	230c      	movs	r3, #12
 8006f60:	603b      	str	r3, [r7, #0]
 8006f62:	4638      	mov	r0, r7
 8006f64:	f002 f80c 	bl	8008f80 <__malloc_unlock>
 8006f68:	e7a1      	b.n	8006eae <_malloc_r+0x22>
 8006f6a:	6025      	str	r5, [r4, #0]
 8006f6c:	e7de      	b.n	8006f2c <_malloc_r+0xa0>
 8006f6e:	bf00      	nop
 8006f70:	2000061c 	.word	0x2000061c

08006f74 <__cvt>:
 8006f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f78:	ec55 4b10 	vmov	r4, r5, d0
 8006f7c:	2d00      	cmp	r5, #0
 8006f7e:	460e      	mov	r6, r1
 8006f80:	4619      	mov	r1, r3
 8006f82:	462b      	mov	r3, r5
 8006f84:	bfbb      	ittet	lt
 8006f86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f8a:	461d      	movlt	r5, r3
 8006f8c:	2300      	movge	r3, #0
 8006f8e:	232d      	movlt	r3, #45	; 0x2d
 8006f90:	700b      	strb	r3, [r1, #0]
 8006f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f98:	4691      	mov	r9, r2
 8006f9a:	f023 0820 	bic.w	r8, r3, #32
 8006f9e:	bfbc      	itt	lt
 8006fa0:	4622      	movlt	r2, r4
 8006fa2:	4614      	movlt	r4, r2
 8006fa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fa8:	d005      	beq.n	8006fb6 <__cvt+0x42>
 8006faa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006fae:	d100      	bne.n	8006fb2 <__cvt+0x3e>
 8006fb0:	3601      	adds	r6, #1
 8006fb2:	2102      	movs	r1, #2
 8006fb4:	e000      	b.n	8006fb8 <__cvt+0x44>
 8006fb6:	2103      	movs	r1, #3
 8006fb8:	ab03      	add	r3, sp, #12
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	ab02      	add	r3, sp, #8
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	ec45 4b10 	vmov	d0, r4, r5
 8006fc4:	4653      	mov	r3, sl
 8006fc6:	4632      	mov	r2, r6
 8006fc8:	f000 ffda 	bl	8007f80 <_dtoa_r>
 8006fcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	d102      	bne.n	8006fda <__cvt+0x66>
 8006fd4:	f019 0f01 	tst.w	r9, #1
 8006fd8:	d022      	beq.n	8007020 <__cvt+0xac>
 8006fda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fde:	eb07 0906 	add.w	r9, r7, r6
 8006fe2:	d110      	bne.n	8007006 <__cvt+0x92>
 8006fe4:	783b      	ldrb	r3, [r7, #0]
 8006fe6:	2b30      	cmp	r3, #48	; 0x30
 8006fe8:	d10a      	bne.n	8007000 <__cvt+0x8c>
 8006fea:	2200      	movs	r2, #0
 8006fec:	2300      	movs	r3, #0
 8006fee:	4620      	mov	r0, r4
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	f7f9 fd69 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ff6:	b918      	cbnz	r0, 8007000 <__cvt+0x8c>
 8006ff8:	f1c6 0601 	rsb	r6, r6, #1
 8006ffc:	f8ca 6000 	str.w	r6, [sl]
 8007000:	f8da 3000 	ldr.w	r3, [sl]
 8007004:	4499      	add	r9, r3
 8007006:	2200      	movs	r2, #0
 8007008:	2300      	movs	r3, #0
 800700a:	4620      	mov	r0, r4
 800700c:	4629      	mov	r1, r5
 800700e:	f7f9 fd5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007012:	b108      	cbz	r0, 8007018 <__cvt+0xa4>
 8007014:	f8cd 900c 	str.w	r9, [sp, #12]
 8007018:	2230      	movs	r2, #48	; 0x30
 800701a:	9b03      	ldr	r3, [sp, #12]
 800701c:	454b      	cmp	r3, r9
 800701e:	d307      	bcc.n	8007030 <__cvt+0xbc>
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007024:	1bdb      	subs	r3, r3, r7
 8007026:	4638      	mov	r0, r7
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	b004      	add	sp, #16
 800702c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007030:	1c59      	adds	r1, r3, #1
 8007032:	9103      	str	r1, [sp, #12]
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	e7f0      	b.n	800701a <__cvt+0xa6>

08007038 <__exponent>:
 8007038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800703a:	4603      	mov	r3, r0
 800703c:	2900      	cmp	r1, #0
 800703e:	bfb8      	it	lt
 8007040:	4249      	neglt	r1, r1
 8007042:	f803 2b02 	strb.w	r2, [r3], #2
 8007046:	bfb4      	ite	lt
 8007048:	222d      	movlt	r2, #45	; 0x2d
 800704a:	222b      	movge	r2, #43	; 0x2b
 800704c:	2909      	cmp	r1, #9
 800704e:	7042      	strb	r2, [r0, #1]
 8007050:	dd2a      	ble.n	80070a8 <__exponent+0x70>
 8007052:	f10d 0407 	add.w	r4, sp, #7
 8007056:	46a4      	mov	ip, r4
 8007058:	270a      	movs	r7, #10
 800705a:	46a6      	mov	lr, r4
 800705c:	460a      	mov	r2, r1
 800705e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007062:	fb07 1516 	mls	r5, r7, r6, r1
 8007066:	3530      	adds	r5, #48	; 0x30
 8007068:	2a63      	cmp	r2, #99	; 0x63
 800706a:	f104 34ff 	add.w	r4, r4, #4294967295
 800706e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007072:	4631      	mov	r1, r6
 8007074:	dcf1      	bgt.n	800705a <__exponent+0x22>
 8007076:	3130      	adds	r1, #48	; 0x30
 8007078:	f1ae 0502 	sub.w	r5, lr, #2
 800707c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007080:	1c44      	adds	r4, r0, #1
 8007082:	4629      	mov	r1, r5
 8007084:	4561      	cmp	r1, ip
 8007086:	d30a      	bcc.n	800709e <__exponent+0x66>
 8007088:	f10d 0209 	add.w	r2, sp, #9
 800708c:	eba2 020e 	sub.w	r2, r2, lr
 8007090:	4565      	cmp	r5, ip
 8007092:	bf88      	it	hi
 8007094:	2200      	movhi	r2, #0
 8007096:	4413      	add	r3, r2
 8007098:	1a18      	subs	r0, r3, r0
 800709a:	b003      	add	sp, #12
 800709c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800709e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80070a6:	e7ed      	b.n	8007084 <__exponent+0x4c>
 80070a8:	2330      	movs	r3, #48	; 0x30
 80070aa:	3130      	adds	r1, #48	; 0x30
 80070ac:	7083      	strb	r3, [r0, #2]
 80070ae:	70c1      	strb	r1, [r0, #3]
 80070b0:	1d03      	adds	r3, r0, #4
 80070b2:	e7f1      	b.n	8007098 <__exponent+0x60>

080070b4 <_printf_float>:
 80070b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b8:	ed2d 8b02 	vpush	{d8}
 80070bc:	b08d      	sub	sp, #52	; 0x34
 80070be:	460c      	mov	r4, r1
 80070c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070c4:	4616      	mov	r6, r2
 80070c6:	461f      	mov	r7, r3
 80070c8:	4605      	mov	r5, r0
 80070ca:	f001 ff3d 	bl	8008f48 <_localeconv_r>
 80070ce:	f8d0 a000 	ldr.w	sl, [r0]
 80070d2:	4650      	mov	r0, sl
 80070d4:	f7f9 f87c 	bl	80001d0 <strlen>
 80070d8:	2300      	movs	r3, #0
 80070da:	930a      	str	r3, [sp, #40]	; 0x28
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	9305      	str	r3, [sp, #20]
 80070e0:	f8d8 3000 	ldr.w	r3, [r8]
 80070e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80070e8:	3307      	adds	r3, #7
 80070ea:	f023 0307 	bic.w	r3, r3, #7
 80070ee:	f103 0208 	add.w	r2, r3, #8
 80070f2:	f8c8 2000 	str.w	r2, [r8]
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007102:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007106:	9307      	str	r3, [sp, #28]
 8007108:	f8cd 8018 	str.w	r8, [sp, #24]
 800710c:	ee08 0a10 	vmov	s16, r0
 8007110:	4b9f      	ldr	r3, [pc, #636]	; (8007390 <_printf_float+0x2dc>)
 8007112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007116:	f04f 32ff 	mov.w	r2, #4294967295
 800711a:	f7f9 fd07 	bl	8000b2c <__aeabi_dcmpun>
 800711e:	bb88      	cbnz	r0, 8007184 <_printf_float+0xd0>
 8007120:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007124:	4b9a      	ldr	r3, [pc, #616]	; (8007390 <_printf_float+0x2dc>)
 8007126:	f04f 32ff 	mov.w	r2, #4294967295
 800712a:	f7f9 fce1 	bl	8000af0 <__aeabi_dcmple>
 800712e:	bb48      	cbnz	r0, 8007184 <_printf_float+0xd0>
 8007130:	2200      	movs	r2, #0
 8007132:	2300      	movs	r3, #0
 8007134:	4640      	mov	r0, r8
 8007136:	4649      	mov	r1, r9
 8007138:	f7f9 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800713c:	b110      	cbz	r0, 8007144 <_printf_float+0x90>
 800713e:	232d      	movs	r3, #45	; 0x2d
 8007140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007144:	4b93      	ldr	r3, [pc, #588]	; (8007394 <_printf_float+0x2e0>)
 8007146:	4894      	ldr	r0, [pc, #592]	; (8007398 <_printf_float+0x2e4>)
 8007148:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800714c:	bf94      	ite	ls
 800714e:	4698      	movls	r8, r3
 8007150:	4680      	movhi	r8, r0
 8007152:	2303      	movs	r3, #3
 8007154:	6123      	str	r3, [r4, #16]
 8007156:	9b05      	ldr	r3, [sp, #20]
 8007158:	f023 0204 	bic.w	r2, r3, #4
 800715c:	6022      	str	r2, [r4, #0]
 800715e:	f04f 0900 	mov.w	r9, #0
 8007162:	9700      	str	r7, [sp, #0]
 8007164:	4633      	mov	r3, r6
 8007166:	aa0b      	add	r2, sp, #44	; 0x2c
 8007168:	4621      	mov	r1, r4
 800716a:	4628      	mov	r0, r5
 800716c:	f000 f9d8 	bl	8007520 <_printf_common>
 8007170:	3001      	adds	r0, #1
 8007172:	f040 8090 	bne.w	8007296 <_printf_float+0x1e2>
 8007176:	f04f 30ff 	mov.w	r0, #4294967295
 800717a:	b00d      	add	sp, #52	; 0x34
 800717c:	ecbd 8b02 	vpop	{d8}
 8007180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007184:	4642      	mov	r2, r8
 8007186:	464b      	mov	r3, r9
 8007188:	4640      	mov	r0, r8
 800718a:	4649      	mov	r1, r9
 800718c:	f7f9 fcce 	bl	8000b2c <__aeabi_dcmpun>
 8007190:	b140      	cbz	r0, 80071a4 <_printf_float+0xf0>
 8007192:	464b      	mov	r3, r9
 8007194:	2b00      	cmp	r3, #0
 8007196:	bfbc      	itt	lt
 8007198:	232d      	movlt	r3, #45	; 0x2d
 800719a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800719e:	487f      	ldr	r0, [pc, #508]	; (800739c <_printf_float+0x2e8>)
 80071a0:	4b7f      	ldr	r3, [pc, #508]	; (80073a0 <_printf_float+0x2ec>)
 80071a2:	e7d1      	b.n	8007148 <_printf_float+0x94>
 80071a4:	6863      	ldr	r3, [r4, #4]
 80071a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80071aa:	9206      	str	r2, [sp, #24]
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	d13f      	bne.n	8007230 <_printf_float+0x17c>
 80071b0:	2306      	movs	r3, #6
 80071b2:	6063      	str	r3, [r4, #4]
 80071b4:	9b05      	ldr	r3, [sp, #20]
 80071b6:	6861      	ldr	r1, [r4, #4]
 80071b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071bc:	2300      	movs	r3, #0
 80071be:	9303      	str	r3, [sp, #12]
 80071c0:	ab0a      	add	r3, sp, #40	; 0x28
 80071c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80071c6:	ab09      	add	r3, sp, #36	; 0x24
 80071c8:	ec49 8b10 	vmov	d0, r8, r9
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	6022      	str	r2, [r4, #0]
 80071d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071d4:	4628      	mov	r0, r5
 80071d6:	f7ff fecd 	bl	8006f74 <__cvt>
 80071da:	9b06      	ldr	r3, [sp, #24]
 80071dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071de:	2b47      	cmp	r3, #71	; 0x47
 80071e0:	4680      	mov	r8, r0
 80071e2:	d108      	bne.n	80071f6 <_printf_float+0x142>
 80071e4:	1cc8      	adds	r0, r1, #3
 80071e6:	db02      	blt.n	80071ee <_printf_float+0x13a>
 80071e8:	6863      	ldr	r3, [r4, #4]
 80071ea:	4299      	cmp	r1, r3
 80071ec:	dd41      	ble.n	8007272 <_printf_float+0x1be>
 80071ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80071f2:	fa5f fb8b 	uxtb.w	fp, fp
 80071f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071fa:	d820      	bhi.n	800723e <_printf_float+0x18a>
 80071fc:	3901      	subs	r1, #1
 80071fe:	465a      	mov	r2, fp
 8007200:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007204:	9109      	str	r1, [sp, #36]	; 0x24
 8007206:	f7ff ff17 	bl	8007038 <__exponent>
 800720a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800720c:	1813      	adds	r3, r2, r0
 800720e:	2a01      	cmp	r2, #1
 8007210:	4681      	mov	r9, r0
 8007212:	6123      	str	r3, [r4, #16]
 8007214:	dc02      	bgt.n	800721c <_printf_float+0x168>
 8007216:	6822      	ldr	r2, [r4, #0]
 8007218:	07d2      	lsls	r2, r2, #31
 800721a:	d501      	bpl.n	8007220 <_printf_float+0x16c>
 800721c:	3301      	adds	r3, #1
 800721e:	6123      	str	r3, [r4, #16]
 8007220:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007224:	2b00      	cmp	r3, #0
 8007226:	d09c      	beq.n	8007162 <_printf_float+0xae>
 8007228:	232d      	movs	r3, #45	; 0x2d
 800722a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800722e:	e798      	b.n	8007162 <_printf_float+0xae>
 8007230:	9a06      	ldr	r2, [sp, #24]
 8007232:	2a47      	cmp	r2, #71	; 0x47
 8007234:	d1be      	bne.n	80071b4 <_printf_float+0x100>
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1bc      	bne.n	80071b4 <_printf_float+0x100>
 800723a:	2301      	movs	r3, #1
 800723c:	e7b9      	b.n	80071b2 <_printf_float+0xfe>
 800723e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007242:	d118      	bne.n	8007276 <_printf_float+0x1c2>
 8007244:	2900      	cmp	r1, #0
 8007246:	6863      	ldr	r3, [r4, #4]
 8007248:	dd0b      	ble.n	8007262 <_printf_float+0x1ae>
 800724a:	6121      	str	r1, [r4, #16]
 800724c:	b913      	cbnz	r3, 8007254 <_printf_float+0x1a0>
 800724e:	6822      	ldr	r2, [r4, #0]
 8007250:	07d0      	lsls	r0, r2, #31
 8007252:	d502      	bpl.n	800725a <_printf_float+0x1a6>
 8007254:	3301      	adds	r3, #1
 8007256:	440b      	add	r3, r1
 8007258:	6123      	str	r3, [r4, #16]
 800725a:	65a1      	str	r1, [r4, #88]	; 0x58
 800725c:	f04f 0900 	mov.w	r9, #0
 8007260:	e7de      	b.n	8007220 <_printf_float+0x16c>
 8007262:	b913      	cbnz	r3, 800726a <_printf_float+0x1b6>
 8007264:	6822      	ldr	r2, [r4, #0]
 8007266:	07d2      	lsls	r2, r2, #31
 8007268:	d501      	bpl.n	800726e <_printf_float+0x1ba>
 800726a:	3302      	adds	r3, #2
 800726c:	e7f4      	b.n	8007258 <_printf_float+0x1a4>
 800726e:	2301      	movs	r3, #1
 8007270:	e7f2      	b.n	8007258 <_printf_float+0x1a4>
 8007272:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007278:	4299      	cmp	r1, r3
 800727a:	db05      	blt.n	8007288 <_printf_float+0x1d4>
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	6121      	str	r1, [r4, #16]
 8007280:	07d8      	lsls	r0, r3, #31
 8007282:	d5ea      	bpl.n	800725a <_printf_float+0x1a6>
 8007284:	1c4b      	adds	r3, r1, #1
 8007286:	e7e7      	b.n	8007258 <_printf_float+0x1a4>
 8007288:	2900      	cmp	r1, #0
 800728a:	bfd4      	ite	le
 800728c:	f1c1 0202 	rsble	r2, r1, #2
 8007290:	2201      	movgt	r2, #1
 8007292:	4413      	add	r3, r2
 8007294:	e7e0      	b.n	8007258 <_printf_float+0x1a4>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	055a      	lsls	r2, r3, #21
 800729a:	d407      	bmi.n	80072ac <_printf_float+0x1f8>
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	4642      	mov	r2, r8
 80072a0:	4631      	mov	r1, r6
 80072a2:	4628      	mov	r0, r5
 80072a4:	47b8      	blx	r7
 80072a6:	3001      	adds	r0, #1
 80072a8:	d12c      	bne.n	8007304 <_printf_float+0x250>
 80072aa:	e764      	b.n	8007176 <_printf_float+0xc2>
 80072ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072b0:	f240 80e0 	bls.w	8007474 <_printf_float+0x3c0>
 80072b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072b8:	2200      	movs	r2, #0
 80072ba:	2300      	movs	r3, #0
 80072bc:	f7f9 fc04 	bl	8000ac8 <__aeabi_dcmpeq>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d034      	beq.n	800732e <_printf_float+0x27a>
 80072c4:	4a37      	ldr	r2, [pc, #220]	; (80073a4 <_printf_float+0x2f0>)
 80072c6:	2301      	movs	r3, #1
 80072c8:	4631      	mov	r1, r6
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	f43f af51 	beq.w	8007176 <_printf_float+0xc2>
 80072d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072d8:	429a      	cmp	r2, r3
 80072da:	db02      	blt.n	80072e2 <_printf_float+0x22e>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	07d8      	lsls	r0, r3, #31
 80072e0:	d510      	bpl.n	8007304 <_printf_float+0x250>
 80072e2:	ee18 3a10 	vmov	r3, s16
 80072e6:	4652      	mov	r2, sl
 80072e8:	4631      	mov	r1, r6
 80072ea:	4628      	mov	r0, r5
 80072ec:	47b8      	blx	r7
 80072ee:	3001      	adds	r0, #1
 80072f0:	f43f af41 	beq.w	8007176 <_printf_float+0xc2>
 80072f4:	f04f 0800 	mov.w	r8, #0
 80072f8:	f104 091a 	add.w	r9, r4, #26
 80072fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072fe:	3b01      	subs	r3, #1
 8007300:	4543      	cmp	r3, r8
 8007302:	dc09      	bgt.n	8007318 <_printf_float+0x264>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	079b      	lsls	r3, r3, #30
 8007308:	f100 8105 	bmi.w	8007516 <_printf_float+0x462>
 800730c:	68e0      	ldr	r0, [r4, #12]
 800730e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007310:	4298      	cmp	r0, r3
 8007312:	bfb8      	it	lt
 8007314:	4618      	movlt	r0, r3
 8007316:	e730      	b.n	800717a <_printf_float+0xc6>
 8007318:	2301      	movs	r3, #1
 800731a:	464a      	mov	r2, r9
 800731c:	4631      	mov	r1, r6
 800731e:	4628      	mov	r0, r5
 8007320:	47b8      	blx	r7
 8007322:	3001      	adds	r0, #1
 8007324:	f43f af27 	beq.w	8007176 <_printf_float+0xc2>
 8007328:	f108 0801 	add.w	r8, r8, #1
 800732c:	e7e6      	b.n	80072fc <_printf_float+0x248>
 800732e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	dc39      	bgt.n	80073a8 <_printf_float+0x2f4>
 8007334:	4a1b      	ldr	r2, [pc, #108]	; (80073a4 <_printf_float+0x2f0>)
 8007336:	2301      	movs	r3, #1
 8007338:	4631      	mov	r1, r6
 800733a:	4628      	mov	r0, r5
 800733c:	47b8      	blx	r7
 800733e:	3001      	adds	r0, #1
 8007340:	f43f af19 	beq.w	8007176 <_printf_float+0xc2>
 8007344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007348:	4313      	orrs	r3, r2
 800734a:	d102      	bne.n	8007352 <_printf_float+0x29e>
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	07d9      	lsls	r1, r3, #31
 8007350:	d5d8      	bpl.n	8007304 <_printf_float+0x250>
 8007352:	ee18 3a10 	vmov	r3, s16
 8007356:	4652      	mov	r2, sl
 8007358:	4631      	mov	r1, r6
 800735a:	4628      	mov	r0, r5
 800735c:	47b8      	blx	r7
 800735e:	3001      	adds	r0, #1
 8007360:	f43f af09 	beq.w	8007176 <_printf_float+0xc2>
 8007364:	f04f 0900 	mov.w	r9, #0
 8007368:	f104 0a1a 	add.w	sl, r4, #26
 800736c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736e:	425b      	negs	r3, r3
 8007370:	454b      	cmp	r3, r9
 8007372:	dc01      	bgt.n	8007378 <_printf_float+0x2c4>
 8007374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007376:	e792      	b.n	800729e <_printf_float+0x1ea>
 8007378:	2301      	movs	r3, #1
 800737a:	4652      	mov	r2, sl
 800737c:	4631      	mov	r1, r6
 800737e:	4628      	mov	r0, r5
 8007380:	47b8      	blx	r7
 8007382:	3001      	adds	r0, #1
 8007384:	f43f aef7 	beq.w	8007176 <_printf_float+0xc2>
 8007388:	f109 0901 	add.w	r9, r9, #1
 800738c:	e7ee      	b.n	800736c <_printf_float+0x2b8>
 800738e:	bf00      	nop
 8007390:	7fefffff 	.word	0x7fefffff
 8007394:	0800a1c8 	.word	0x0800a1c8
 8007398:	0800a1cc 	.word	0x0800a1cc
 800739c:	0800a1d4 	.word	0x0800a1d4
 80073a0:	0800a1d0 	.word	0x0800a1d0
 80073a4:	0800a1d8 	.word	0x0800a1d8
 80073a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073ac:	429a      	cmp	r2, r3
 80073ae:	bfa8      	it	ge
 80073b0:	461a      	movge	r2, r3
 80073b2:	2a00      	cmp	r2, #0
 80073b4:	4691      	mov	r9, r2
 80073b6:	dc37      	bgt.n	8007428 <_printf_float+0x374>
 80073b8:	f04f 0b00 	mov.w	fp, #0
 80073bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073c0:	f104 021a 	add.w	r2, r4, #26
 80073c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073c6:	9305      	str	r3, [sp, #20]
 80073c8:	eba3 0309 	sub.w	r3, r3, r9
 80073cc:	455b      	cmp	r3, fp
 80073ce:	dc33      	bgt.n	8007438 <_printf_float+0x384>
 80073d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073d4:	429a      	cmp	r2, r3
 80073d6:	db3b      	blt.n	8007450 <_printf_float+0x39c>
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	07da      	lsls	r2, r3, #31
 80073dc:	d438      	bmi.n	8007450 <_printf_float+0x39c>
 80073de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073e0:	9a05      	ldr	r2, [sp, #20]
 80073e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073e4:	1a9a      	subs	r2, r3, r2
 80073e6:	eba3 0901 	sub.w	r9, r3, r1
 80073ea:	4591      	cmp	r9, r2
 80073ec:	bfa8      	it	ge
 80073ee:	4691      	movge	r9, r2
 80073f0:	f1b9 0f00 	cmp.w	r9, #0
 80073f4:	dc35      	bgt.n	8007462 <_printf_float+0x3ae>
 80073f6:	f04f 0800 	mov.w	r8, #0
 80073fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073fe:	f104 0a1a 	add.w	sl, r4, #26
 8007402:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007406:	1a9b      	subs	r3, r3, r2
 8007408:	eba3 0309 	sub.w	r3, r3, r9
 800740c:	4543      	cmp	r3, r8
 800740e:	f77f af79 	ble.w	8007304 <_printf_float+0x250>
 8007412:	2301      	movs	r3, #1
 8007414:	4652      	mov	r2, sl
 8007416:	4631      	mov	r1, r6
 8007418:	4628      	mov	r0, r5
 800741a:	47b8      	blx	r7
 800741c:	3001      	adds	r0, #1
 800741e:	f43f aeaa 	beq.w	8007176 <_printf_float+0xc2>
 8007422:	f108 0801 	add.w	r8, r8, #1
 8007426:	e7ec      	b.n	8007402 <_printf_float+0x34e>
 8007428:	4613      	mov	r3, r2
 800742a:	4631      	mov	r1, r6
 800742c:	4642      	mov	r2, r8
 800742e:	4628      	mov	r0, r5
 8007430:	47b8      	blx	r7
 8007432:	3001      	adds	r0, #1
 8007434:	d1c0      	bne.n	80073b8 <_printf_float+0x304>
 8007436:	e69e      	b.n	8007176 <_printf_float+0xc2>
 8007438:	2301      	movs	r3, #1
 800743a:	4631      	mov	r1, r6
 800743c:	4628      	mov	r0, r5
 800743e:	9205      	str	r2, [sp, #20]
 8007440:	47b8      	blx	r7
 8007442:	3001      	adds	r0, #1
 8007444:	f43f ae97 	beq.w	8007176 <_printf_float+0xc2>
 8007448:	9a05      	ldr	r2, [sp, #20]
 800744a:	f10b 0b01 	add.w	fp, fp, #1
 800744e:	e7b9      	b.n	80073c4 <_printf_float+0x310>
 8007450:	ee18 3a10 	vmov	r3, s16
 8007454:	4652      	mov	r2, sl
 8007456:	4631      	mov	r1, r6
 8007458:	4628      	mov	r0, r5
 800745a:	47b8      	blx	r7
 800745c:	3001      	adds	r0, #1
 800745e:	d1be      	bne.n	80073de <_printf_float+0x32a>
 8007460:	e689      	b.n	8007176 <_printf_float+0xc2>
 8007462:	9a05      	ldr	r2, [sp, #20]
 8007464:	464b      	mov	r3, r9
 8007466:	4442      	add	r2, r8
 8007468:	4631      	mov	r1, r6
 800746a:	4628      	mov	r0, r5
 800746c:	47b8      	blx	r7
 800746e:	3001      	adds	r0, #1
 8007470:	d1c1      	bne.n	80073f6 <_printf_float+0x342>
 8007472:	e680      	b.n	8007176 <_printf_float+0xc2>
 8007474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007476:	2a01      	cmp	r2, #1
 8007478:	dc01      	bgt.n	800747e <_printf_float+0x3ca>
 800747a:	07db      	lsls	r3, r3, #31
 800747c:	d538      	bpl.n	80074f0 <_printf_float+0x43c>
 800747e:	2301      	movs	r3, #1
 8007480:	4642      	mov	r2, r8
 8007482:	4631      	mov	r1, r6
 8007484:	4628      	mov	r0, r5
 8007486:	47b8      	blx	r7
 8007488:	3001      	adds	r0, #1
 800748a:	f43f ae74 	beq.w	8007176 <_printf_float+0xc2>
 800748e:	ee18 3a10 	vmov	r3, s16
 8007492:	4652      	mov	r2, sl
 8007494:	4631      	mov	r1, r6
 8007496:	4628      	mov	r0, r5
 8007498:	47b8      	blx	r7
 800749a:	3001      	adds	r0, #1
 800749c:	f43f ae6b 	beq.w	8007176 <_printf_float+0xc2>
 80074a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074a4:	2200      	movs	r2, #0
 80074a6:	2300      	movs	r3, #0
 80074a8:	f7f9 fb0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80074ac:	b9d8      	cbnz	r0, 80074e6 <_printf_float+0x432>
 80074ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b0:	f108 0201 	add.w	r2, r8, #1
 80074b4:	3b01      	subs	r3, #1
 80074b6:	4631      	mov	r1, r6
 80074b8:	4628      	mov	r0, r5
 80074ba:	47b8      	blx	r7
 80074bc:	3001      	adds	r0, #1
 80074be:	d10e      	bne.n	80074de <_printf_float+0x42a>
 80074c0:	e659      	b.n	8007176 <_printf_float+0xc2>
 80074c2:	2301      	movs	r3, #1
 80074c4:	4652      	mov	r2, sl
 80074c6:	4631      	mov	r1, r6
 80074c8:	4628      	mov	r0, r5
 80074ca:	47b8      	blx	r7
 80074cc:	3001      	adds	r0, #1
 80074ce:	f43f ae52 	beq.w	8007176 <_printf_float+0xc2>
 80074d2:	f108 0801 	add.w	r8, r8, #1
 80074d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d8:	3b01      	subs	r3, #1
 80074da:	4543      	cmp	r3, r8
 80074dc:	dcf1      	bgt.n	80074c2 <_printf_float+0x40e>
 80074de:	464b      	mov	r3, r9
 80074e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074e4:	e6dc      	b.n	80072a0 <_printf_float+0x1ec>
 80074e6:	f04f 0800 	mov.w	r8, #0
 80074ea:	f104 0a1a 	add.w	sl, r4, #26
 80074ee:	e7f2      	b.n	80074d6 <_printf_float+0x422>
 80074f0:	2301      	movs	r3, #1
 80074f2:	4642      	mov	r2, r8
 80074f4:	e7df      	b.n	80074b6 <_printf_float+0x402>
 80074f6:	2301      	movs	r3, #1
 80074f8:	464a      	mov	r2, r9
 80074fa:	4631      	mov	r1, r6
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b8      	blx	r7
 8007500:	3001      	adds	r0, #1
 8007502:	f43f ae38 	beq.w	8007176 <_printf_float+0xc2>
 8007506:	f108 0801 	add.w	r8, r8, #1
 800750a:	68e3      	ldr	r3, [r4, #12]
 800750c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800750e:	1a5b      	subs	r3, r3, r1
 8007510:	4543      	cmp	r3, r8
 8007512:	dcf0      	bgt.n	80074f6 <_printf_float+0x442>
 8007514:	e6fa      	b.n	800730c <_printf_float+0x258>
 8007516:	f04f 0800 	mov.w	r8, #0
 800751a:	f104 0919 	add.w	r9, r4, #25
 800751e:	e7f4      	b.n	800750a <_printf_float+0x456>

08007520 <_printf_common>:
 8007520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007524:	4616      	mov	r6, r2
 8007526:	4699      	mov	r9, r3
 8007528:	688a      	ldr	r2, [r1, #8]
 800752a:	690b      	ldr	r3, [r1, #16]
 800752c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007530:	4293      	cmp	r3, r2
 8007532:	bfb8      	it	lt
 8007534:	4613      	movlt	r3, r2
 8007536:	6033      	str	r3, [r6, #0]
 8007538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800753c:	4607      	mov	r7, r0
 800753e:	460c      	mov	r4, r1
 8007540:	b10a      	cbz	r2, 8007546 <_printf_common+0x26>
 8007542:	3301      	adds	r3, #1
 8007544:	6033      	str	r3, [r6, #0]
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	0699      	lsls	r1, r3, #26
 800754a:	bf42      	ittt	mi
 800754c:	6833      	ldrmi	r3, [r6, #0]
 800754e:	3302      	addmi	r3, #2
 8007550:	6033      	strmi	r3, [r6, #0]
 8007552:	6825      	ldr	r5, [r4, #0]
 8007554:	f015 0506 	ands.w	r5, r5, #6
 8007558:	d106      	bne.n	8007568 <_printf_common+0x48>
 800755a:	f104 0a19 	add.w	sl, r4, #25
 800755e:	68e3      	ldr	r3, [r4, #12]
 8007560:	6832      	ldr	r2, [r6, #0]
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	42ab      	cmp	r3, r5
 8007566:	dc26      	bgt.n	80075b6 <_printf_common+0x96>
 8007568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800756c:	1e13      	subs	r3, r2, #0
 800756e:	6822      	ldr	r2, [r4, #0]
 8007570:	bf18      	it	ne
 8007572:	2301      	movne	r3, #1
 8007574:	0692      	lsls	r2, r2, #26
 8007576:	d42b      	bmi.n	80075d0 <_printf_common+0xb0>
 8007578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800757c:	4649      	mov	r1, r9
 800757e:	4638      	mov	r0, r7
 8007580:	47c0      	blx	r8
 8007582:	3001      	adds	r0, #1
 8007584:	d01e      	beq.n	80075c4 <_printf_common+0xa4>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	68e5      	ldr	r5, [r4, #12]
 800758a:	6832      	ldr	r2, [r6, #0]
 800758c:	f003 0306 	and.w	r3, r3, #6
 8007590:	2b04      	cmp	r3, #4
 8007592:	bf08      	it	eq
 8007594:	1aad      	subeq	r5, r5, r2
 8007596:	68a3      	ldr	r3, [r4, #8]
 8007598:	6922      	ldr	r2, [r4, #16]
 800759a:	bf0c      	ite	eq
 800759c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075a0:	2500      	movne	r5, #0
 80075a2:	4293      	cmp	r3, r2
 80075a4:	bfc4      	itt	gt
 80075a6:	1a9b      	subgt	r3, r3, r2
 80075a8:	18ed      	addgt	r5, r5, r3
 80075aa:	2600      	movs	r6, #0
 80075ac:	341a      	adds	r4, #26
 80075ae:	42b5      	cmp	r5, r6
 80075b0:	d11a      	bne.n	80075e8 <_printf_common+0xc8>
 80075b2:	2000      	movs	r0, #0
 80075b4:	e008      	b.n	80075c8 <_printf_common+0xa8>
 80075b6:	2301      	movs	r3, #1
 80075b8:	4652      	mov	r2, sl
 80075ba:	4649      	mov	r1, r9
 80075bc:	4638      	mov	r0, r7
 80075be:	47c0      	blx	r8
 80075c0:	3001      	adds	r0, #1
 80075c2:	d103      	bne.n	80075cc <_printf_common+0xac>
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295
 80075c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075cc:	3501      	adds	r5, #1
 80075ce:	e7c6      	b.n	800755e <_printf_common+0x3e>
 80075d0:	18e1      	adds	r1, r4, r3
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	2030      	movs	r0, #48	; 0x30
 80075d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075da:	4422      	add	r2, r4
 80075dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075e4:	3302      	adds	r3, #2
 80075e6:	e7c7      	b.n	8007578 <_printf_common+0x58>
 80075e8:	2301      	movs	r3, #1
 80075ea:	4622      	mov	r2, r4
 80075ec:	4649      	mov	r1, r9
 80075ee:	4638      	mov	r0, r7
 80075f0:	47c0      	blx	r8
 80075f2:	3001      	adds	r0, #1
 80075f4:	d0e6      	beq.n	80075c4 <_printf_common+0xa4>
 80075f6:	3601      	adds	r6, #1
 80075f8:	e7d9      	b.n	80075ae <_printf_common+0x8e>
	...

080075fc <_printf_i>:
 80075fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007600:	7e0f      	ldrb	r7, [r1, #24]
 8007602:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007604:	2f78      	cmp	r7, #120	; 0x78
 8007606:	4691      	mov	r9, r2
 8007608:	4680      	mov	r8, r0
 800760a:	460c      	mov	r4, r1
 800760c:	469a      	mov	sl, r3
 800760e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007612:	d807      	bhi.n	8007624 <_printf_i+0x28>
 8007614:	2f62      	cmp	r7, #98	; 0x62
 8007616:	d80a      	bhi.n	800762e <_printf_i+0x32>
 8007618:	2f00      	cmp	r7, #0
 800761a:	f000 80d8 	beq.w	80077ce <_printf_i+0x1d2>
 800761e:	2f58      	cmp	r7, #88	; 0x58
 8007620:	f000 80a3 	beq.w	800776a <_printf_i+0x16e>
 8007624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800762c:	e03a      	b.n	80076a4 <_printf_i+0xa8>
 800762e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007632:	2b15      	cmp	r3, #21
 8007634:	d8f6      	bhi.n	8007624 <_printf_i+0x28>
 8007636:	a101      	add	r1, pc, #4	; (adr r1, 800763c <_printf_i+0x40>)
 8007638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800763c:	08007695 	.word	0x08007695
 8007640:	080076a9 	.word	0x080076a9
 8007644:	08007625 	.word	0x08007625
 8007648:	08007625 	.word	0x08007625
 800764c:	08007625 	.word	0x08007625
 8007650:	08007625 	.word	0x08007625
 8007654:	080076a9 	.word	0x080076a9
 8007658:	08007625 	.word	0x08007625
 800765c:	08007625 	.word	0x08007625
 8007660:	08007625 	.word	0x08007625
 8007664:	08007625 	.word	0x08007625
 8007668:	080077b5 	.word	0x080077b5
 800766c:	080076d9 	.word	0x080076d9
 8007670:	08007797 	.word	0x08007797
 8007674:	08007625 	.word	0x08007625
 8007678:	08007625 	.word	0x08007625
 800767c:	080077d7 	.word	0x080077d7
 8007680:	08007625 	.word	0x08007625
 8007684:	080076d9 	.word	0x080076d9
 8007688:	08007625 	.word	0x08007625
 800768c:	08007625 	.word	0x08007625
 8007690:	0800779f 	.word	0x0800779f
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	1d1a      	adds	r2, r3, #4
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	602a      	str	r2, [r5, #0]
 800769c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076a4:	2301      	movs	r3, #1
 80076a6:	e0a3      	b.n	80077f0 <_printf_i+0x1f4>
 80076a8:	6820      	ldr	r0, [r4, #0]
 80076aa:	6829      	ldr	r1, [r5, #0]
 80076ac:	0606      	lsls	r6, r0, #24
 80076ae:	f101 0304 	add.w	r3, r1, #4
 80076b2:	d50a      	bpl.n	80076ca <_printf_i+0xce>
 80076b4:	680e      	ldr	r6, [r1, #0]
 80076b6:	602b      	str	r3, [r5, #0]
 80076b8:	2e00      	cmp	r6, #0
 80076ba:	da03      	bge.n	80076c4 <_printf_i+0xc8>
 80076bc:	232d      	movs	r3, #45	; 0x2d
 80076be:	4276      	negs	r6, r6
 80076c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076c4:	485e      	ldr	r0, [pc, #376]	; (8007840 <_printf_i+0x244>)
 80076c6:	230a      	movs	r3, #10
 80076c8:	e019      	b.n	80076fe <_printf_i+0x102>
 80076ca:	680e      	ldr	r6, [r1, #0]
 80076cc:	602b      	str	r3, [r5, #0]
 80076ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076d2:	bf18      	it	ne
 80076d4:	b236      	sxthne	r6, r6
 80076d6:	e7ef      	b.n	80076b8 <_printf_i+0xbc>
 80076d8:	682b      	ldr	r3, [r5, #0]
 80076da:	6820      	ldr	r0, [r4, #0]
 80076dc:	1d19      	adds	r1, r3, #4
 80076de:	6029      	str	r1, [r5, #0]
 80076e0:	0601      	lsls	r1, r0, #24
 80076e2:	d501      	bpl.n	80076e8 <_printf_i+0xec>
 80076e4:	681e      	ldr	r6, [r3, #0]
 80076e6:	e002      	b.n	80076ee <_printf_i+0xf2>
 80076e8:	0646      	lsls	r6, r0, #25
 80076ea:	d5fb      	bpl.n	80076e4 <_printf_i+0xe8>
 80076ec:	881e      	ldrh	r6, [r3, #0]
 80076ee:	4854      	ldr	r0, [pc, #336]	; (8007840 <_printf_i+0x244>)
 80076f0:	2f6f      	cmp	r7, #111	; 0x6f
 80076f2:	bf0c      	ite	eq
 80076f4:	2308      	moveq	r3, #8
 80076f6:	230a      	movne	r3, #10
 80076f8:	2100      	movs	r1, #0
 80076fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076fe:	6865      	ldr	r5, [r4, #4]
 8007700:	60a5      	str	r5, [r4, #8]
 8007702:	2d00      	cmp	r5, #0
 8007704:	bfa2      	ittt	ge
 8007706:	6821      	ldrge	r1, [r4, #0]
 8007708:	f021 0104 	bicge.w	r1, r1, #4
 800770c:	6021      	strge	r1, [r4, #0]
 800770e:	b90e      	cbnz	r6, 8007714 <_printf_i+0x118>
 8007710:	2d00      	cmp	r5, #0
 8007712:	d04d      	beq.n	80077b0 <_printf_i+0x1b4>
 8007714:	4615      	mov	r5, r2
 8007716:	fbb6 f1f3 	udiv	r1, r6, r3
 800771a:	fb03 6711 	mls	r7, r3, r1, r6
 800771e:	5dc7      	ldrb	r7, [r0, r7]
 8007720:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007724:	4637      	mov	r7, r6
 8007726:	42bb      	cmp	r3, r7
 8007728:	460e      	mov	r6, r1
 800772a:	d9f4      	bls.n	8007716 <_printf_i+0x11a>
 800772c:	2b08      	cmp	r3, #8
 800772e:	d10b      	bne.n	8007748 <_printf_i+0x14c>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	07de      	lsls	r6, r3, #31
 8007734:	d508      	bpl.n	8007748 <_printf_i+0x14c>
 8007736:	6923      	ldr	r3, [r4, #16]
 8007738:	6861      	ldr	r1, [r4, #4]
 800773a:	4299      	cmp	r1, r3
 800773c:	bfde      	ittt	le
 800773e:	2330      	movle	r3, #48	; 0x30
 8007740:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007744:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007748:	1b52      	subs	r2, r2, r5
 800774a:	6122      	str	r2, [r4, #16]
 800774c:	f8cd a000 	str.w	sl, [sp]
 8007750:	464b      	mov	r3, r9
 8007752:	aa03      	add	r2, sp, #12
 8007754:	4621      	mov	r1, r4
 8007756:	4640      	mov	r0, r8
 8007758:	f7ff fee2 	bl	8007520 <_printf_common>
 800775c:	3001      	adds	r0, #1
 800775e:	d14c      	bne.n	80077fa <_printf_i+0x1fe>
 8007760:	f04f 30ff 	mov.w	r0, #4294967295
 8007764:	b004      	add	sp, #16
 8007766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800776a:	4835      	ldr	r0, [pc, #212]	; (8007840 <_printf_i+0x244>)
 800776c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007770:	6829      	ldr	r1, [r5, #0]
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	f851 6b04 	ldr.w	r6, [r1], #4
 8007778:	6029      	str	r1, [r5, #0]
 800777a:	061d      	lsls	r5, r3, #24
 800777c:	d514      	bpl.n	80077a8 <_printf_i+0x1ac>
 800777e:	07df      	lsls	r7, r3, #31
 8007780:	bf44      	itt	mi
 8007782:	f043 0320 	orrmi.w	r3, r3, #32
 8007786:	6023      	strmi	r3, [r4, #0]
 8007788:	b91e      	cbnz	r6, 8007792 <_printf_i+0x196>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	f023 0320 	bic.w	r3, r3, #32
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	2310      	movs	r3, #16
 8007794:	e7b0      	b.n	80076f8 <_printf_i+0xfc>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	f043 0320 	orr.w	r3, r3, #32
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	2378      	movs	r3, #120	; 0x78
 80077a0:	4828      	ldr	r0, [pc, #160]	; (8007844 <_printf_i+0x248>)
 80077a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077a6:	e7e3      	b.n	8007770 <_printf_i+0x174>
 80077a8:	0659      	lsls	r1, r3, #25
 80077aa:	bf48      	it	mi
 80077ac:	b2b6      	uxthmi	r6, r6
 80077ae:	e7e6      	b.n	800777e <_printf_i+0x182>
 80077b0:	4615      	mov	r5, r2
 80077b2:	e7bb      	b.n	800772c <_printf_i+0x130>
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	6826      	ldr	r6, [r4, #0]
 80077b8:	6961      	ldr	r1, [r4, #20]
 80077ba:	1d18      	adds	r0, r3, #4
 80077bc:	6028      	str	r0, [r5, #0]
 80077be:	0635      	lsls	r5, r6, #24
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	d501      	bpl.n	80077c8 <_printf_i+0x1cc>
 80077c4:	6019      	str	r1, [r3, #0]
 80077c6:	e002      	b.n	80077ce <_printf_i+0x1d2>
 80077c8:	0670      	lsls	r0, r6, #25
 80077ca:	d5fb      	bpl.n	80077c4 <_printf_i+0x1c8>
 80077cc:	8019      	strh	r1, [r3, #0]
 80077ce:	2300      	movs	r3, #0
 80077d0:	6123      	str	r3, [r4, #16]
 80077d2:	4615      	mov	r5, r2
 80077d4:	e7ba      	b.n	800774c <_printf_i+0x150>
 80077d6:	682b      	ldr	r3, [r5, #0]
 80077d8:	1d1a      	adds	r2, r3, #4
 80077da:	602a      	str	r2, [r5, #0]
 80077dc:	681d      	ldr	r5, [r3, #0]
 80077de:	6862      	ldr	r2, [r4, #4]
 80077e0:	2100      	movs	r1, #0
 80077e2:	4628      	mov	r0, r5
 80077e4:	f7f8 fcfc 	bl	80001e0 <memchr>
 80077e8:	b108      	cbz	r0, 80077ee <_printf_i+0x1f2>
 80077ea:	1b40      	subs	r0, r0, r5
 80077ec:	6060      	str	r0, [r4, #4]
 80077ee:	6863      	ldr	r3, [r4, #4]
 80077f0:	6123      	str	r3, [r4, #16]
 80077f2:	2300      	movs	r3, #0
 80077f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f8:	e7a8      	b.n	800774c <_printf_i+0x150>
 80077fa:	6923      	ldr	r3, [r4, #16]
 80077fc:	462a      	mov	r2, r5
 80077fe:	4649      	mov	r1, r9
 8007800:	4640      	mov	r0, r8
 8007802:	47d0      	blx	sl
 8007804:	3001      	adds	r0, #1
 8007806:	d0ab      	beq.n	8007760 <_printf_i+0x164>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	079b      	lsls	r3, r3, #30
 800780c:	d413      	bmi.n	8007836 <_printf_i+0x23a>
 800780e:	68e0      	ldr	r0, [r4, #12]
 8007810:	9b03      	ldr	r3, [sp, #12]
 8007812:	4298      	cmp	r0, r3
 8007814:	bfb8      	it	lt
 8007816:	4618      	movlt	r0, r3
 8007818:	e7a4      	b.n	8007764 <_printf_i+0x168>
 800781a:	2301      	movs	r3, #1
 800781c:	4632      	mov	r2, r6
 800781e:	4649      	mov	r1, r9
 8007820:	4640      	mov	r0, r8
 8007822:	47d0      	blx	sl
 8007824:	3001      	adds	r0, #1
 8007826:	d09b      	beq.n	8007760 <_printf_i+0x164>
 8007828:	3501      	adds	r5, #1
 800782a:	68e3      	ldr	r3, [r4, #12]
 800782c:	9903      	ldr	r1, [sp, #12]
 800782e:	1a5b      	subs	r3, r3, r1
 8007830:	42ab      	cmp	r3, r5
 8007832:	dcf2      	bgt.n	800781a <_printf_i+0x21e>
 8007834:	e7eb      	b.n	800780e <_printf_i+0x212>
 8007836:	2500      	movs	r5, #0
 8007838:	f104 0619 	add.w	r6, r4, #25
 800783c:	e7f5      	b.n	800782a <_printf_i+0x22e>
 800783e:	bf00      	nop
 8007840:	0800a1da 	.word	0x0800a1da
 8007844:	0800a1eb 	.word	0x0800a1eb

08007848 <_perror_r>:
 8007848:	6983      	ldr	r3, [r0, #24]
 800784a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800784c:	68c4      	ldr	r4, [r0, #12]
 800784e:	4605      	mov	r5, r0
 8007850:	460e      	mov	r6, r1
 8007852:	b90b      	cbnz	r3, 8007858 <_perror_r+0x10>
 8007854:	f001 fada 	bl	8008e0c <__sinit>
 8007858:	4b43      	ldr	r3, [pc, #268]	; (8007968 <_perror_r+0x120>)
 800785a:	429c      	cmp	r4, r3
 800785c:	d132      	bne.n	80078c4 <_perror_r+0x7c>
 800785e:	686c      	ldr	r4, [r5, #4]
 8007860:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007862:	07d8      	lsls	r0, r3, #31
 8007864:	d405      	bmi.n	8007872 <_perror_r+0x2a>
 8007866:	89a3      	ldrh	r3, [r4, #12]
 8007868:	0599      	lsls	r1, r3, #22
 800786a:	d402      	bmi.n	8007872 <_perror_r+0x2a>
 800786c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800786e:	f001 fb70 	bl	8008f52 <__retarget_lock_acquire_recursive>
 8007872:	4621      	mov	r1, r4
 8007874:	4628      	mov	r0, r5
 8007876:	f001 f9f7 	bl	8008c68 <_fflush_r>
 800787a:	bb6e      	cbnz	r6, 80078d8 <_perror_r+0x90>
 800787c:	6829      	ldr	r1, [r5, #0]
 800787e:	ab01      	add	r3, sp, #4
 8007880:	2201      	movs	r2, #1
 8007882:	4628      	mov	r0, r5
 8007884:	f000 f8d6 	bl	8007a34 <_strerror_r>
 8007888:	4607      	mov	r7, r0
 800788a:	2800      	cmp	r0, #0
 800788c:	d14f      	bne.n	800792e <_perror_r+0xe6>
 800788e:	4837      	ldr	r0, [pc, #220]	; (800796c <_perror_r+0x124>)
 8007890:	4f36      	ldr	r7, [pc, #216]	; (800796c <_perror_r+0x124>)
 8007892:	f7f8 fc9d 	bl	80001d0 <strlen>
 8007896:	4606      	mov	r6, r0
 8007898:	b156      	cbz	r6, 80078b0 <_perror_r+0x68>
 800789a:	4620      	mov	r0, r4
 800789c:	f001 fa20 	bl	8008ce0 <fileno>
 80078a0:	4633      	mov	r3, r6
 80078a2:	4601      	mov	r1, r0
 80078a4:	463a      	mov	r2, r7
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 facc 	bl	8007e44 <_write_r>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	da51      	bge.n	8007954 <_perror_r+0x10c>
 80078b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078b4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ba:	07d2      	lsls	r2, r2, #31
 80078bc:	81a3      	strh	r3, [r4, #12]
 80078be:	d54c      	bpl.n	800795a <_perror_r+0x112>
 80078c0:	b003      	add	sp, #12
 80078c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c4:	4b2a      	ldr	r3, [pc, #168]	; (8007970 <_perror_r+0x128>)
 80078c6:	429c      	cmp	r4, r3
 80078c8:	d101      	bne.n	80078ce <_perror_r+0x86>
 80078ca:	68ac      	ldr	r4, [r5, #8]
 80078cc:	e7c8      	b.n	8007860 <_perror_r+0x18>
 80078ce:	4b29      	ldr	r3, [pc, #164]	; (8007974 <_perror_r+0x12c>)
 80078d0:	429c      	cmp	r4, r3
 80078d2:	bf08      	it	eq
 80078d4:	68ec      	ldreq	r4, [r5, #12]
 80078d6:	e7c3      	b.n	8007860 <_perror_r+0x18>
 80078d8:	7833      	ldrb	r3, [r6, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0ce      	beq.n	800787c <_perror_r+0x34>
 80078de:	4630      	mov	r0, r6
 80078e0:	f7f8 fc76 	bl	80001d0 <strlen>
 80078e4:	4607      	mov	r7, r0
 80078e6:	b157      	cbz	r7, 80078fe <_perror_r+0xb6>
 80078e8:	4620      	mov	r0, r4
 80078ea:	f001 f9f9 	bl	8008ce0 <fileno>
 80078ee:	463b      	mov	r3, r7
 80078f0:	4601      	mov	r1, r0
 80078f2:	4632      	mov	r2, r6
 80078f4:	4628      	mov	r0, r5
 80078f6:	f000 faa5 	bl	8007e44 <_write_r>
 80078fa:	2800      	cmp	r0, #0
 80078fc:	da14      	bge.n	8007928 <_perror_r+0xe0>
 80078fe:	481e      	ldr	r0, [pc, #120]	; (8007978 <_perror_r+0x130>)
 8007900:	4f1d      	ldr	r7, [pc, #116]	; (8007978 <_perror_r+0x130>)
 8007902:	f7f8 fc65 	bl	80001d0 <strlen>
 8007906:	4606      	mov	r6, r0
 8007908:	2e00      	cmp	r6, #0
 800790a:	d0b7      	beq.n	800787c <_perror_r+0x34>
 800790c:	4620      	mov	r0, r4
 800790e:	f001 f9e7 	bl	8008ce0 <fileno>
 8007912:	4633      	mov	r3, r6
 8007914:	4601      	mov	r1, r0
 8007916:	463a      	mov	r2, r7
 8007918:	4628      	mov	r0, r5
 800791a:	f000 fa93 	bl	8007e44 <_write_r>
 800791e:	2800      	cmp	r0, #0
 8007920:	dbac      	blt.n	800787c <_perror_r+0x34>
 8007922:	1a36      	subs	r6, r6, r0
 8007924:	4407      	add	r7, r0
 8007926:	e7ef      	b.n	8007908 <_perror_r+0xc0>
 8007928:	1a3f      	subs	r7, r7, r0
 800792a:	4406      	add	r6, r0
 800792c:	e7db      	b.n	80078e6 <_perror_r+0x9e>
 800792e:	f7f8 fc4f 	bl	80001d0 <strlen>
 8007932:	4606      	mov	r6, r0
 8007934:	2e00      	cmp	r6, #0
 8007936:	d0aa      	beq.n	800788e <_perror_r+0x46>
 8007938:	4620      	mov	r0, r4
 800793a:	f001 f9d1 	bl	8008ce0 <fileno>
 800793e:	4633      	mov	r3, r6
 8007940:	4601      	mov	r1, r0
 8007942:	463a      	mov	r2, r7
 8007944:	4628      	mov	r0, r5
 8007946:	f000 fa7d 	bl	8007e44 <_write_r>
 800794a:	2800      	cmp	r0, #0
 800794c:	db9f      	blt.n	800788e <_perror_r+0x46>
 800794e:	1a36      	subs	r6, r6, r0
 8007950:	4407      	add	r7, r0
 8007952:	e7ef      	b.n	8007934 <_perror_r+0xec>
 8007954:	1a36      	subs	r6, r6, r0
 8007956:	4407      	add	r7, r0
 8007958:	e79e      	b.n	8007898 <_perror_r+0x50>
 800795a:	059b      	lsls	r3, r3, #22
 800795c:	d4b0      	bmi.n	80078c0 <_perror_r+0x78>
 800795e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007960:	f001 faf8 	bl	8008f54 <__retarget_lock_release_recursive>
 8007964:	e7ac      	b.n	80078c0 <_perror_r+0x78>
 8007966:	bf00      	nop
 8007968:	0800a944 	.word	0x0800a944
 800796c:	0800ab27 	.word	0x0800ab27
 8007970:	0800a964 	.word	0x0800a964
 8007974:	0800a924 	.word	0x0800a924
 8007978:	0800aaf7 	.word	0x0800aaf7

0800797c <perror>:
 800797c:	4b02      	ldr	r3, [pc, #8]	; (8007988 <perror+0xc>)
 800797e:	4601      	mov	r1, r0
 8007980:	6818      	ldr	r0, [r3, #0]
 8007982:	f7ff bf61 	b.w	8007848 <_perror_r>
 8007986:	bf00      	nop
 8007988:	2000003c 	.word	0x2000003c

0800798c <_sbrk_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4d06      	ldr	r5, [pc, #24]	; (80079a8 <_sbrk_r+0x1c>)
 8007990:	2300      	movs	r3, #0
 8007992:	4604      	mov	r4, r0
 8007994:	4608      	mov	r0, r1
 8007996:	602b      	str	r3, [r5, #0]
 8007998:	f7fa f840 	bl	8001a1c <_sbrk>
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	d102      	bne.n	80079a6 <_sbrk_r+0x1a>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	b103      	cbz	r3, 80079a6 <_sbrk_r+0x1a>
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
 80079a8:	20000628 	.word	0x20000628

080079ac <_raise_r>:
 80079ac:	291f      	cmp	r1, #31
 80079ae:	b538      	push	{r3, r4, r5, lr}
 80079b0:	4604      	mov	r4, r0
 80079b2:	460d      	mov	r5, r1
 80079b4:	d904      	bls.n	80079c0 <_raise_r+0x14>
 80079b6:	2316      	movs	r3, #22
 80079b8:	6003      	str	r3, [r0, #0]
 80079ba:	f04f 30ff 	mov.w	r0, #4294967295
 80079be:	bd38      	pop	{r3, r4, r5, pc}
 80079c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079c2:	b112      	cbz	r2, 80079ca <_raise_r+0x1e>
 80079c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079c8:	b94b      	cbnz	r3, 80079de <_raise_r+0x32>
 80079ca:	4620      	mov	r0, r4
 80079cc:	f000 f830 	bl	8007a30 <_getpid_r>
 80079d0:	462a      	mov	r2, r5
 80079d2:	4601      	mov	r1, r0
 80079d4:	4620      	mov	r0, r4
 80079d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079da:	f000 b817 	b.w	8007a0c <_kill_r>
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d00a      	beq.n	80079f8 <_raise_r+0x4c>
 80079e2:	1c59      	adds	r1, r3, #1
 80079e4:	d103      	bne.n	80079ee <_raise_r+0x42>
 80079e6:	2316      	movs	r3, #22
 80079e8:	6003      	str	r3, [r0, #0]
 80079ea:	2001      	movs	r0, #1
 80079ec:	e7e7      	b.n	80079be <_raise_r+0x12>
 80079ee:	2400      	movs	r4, #0
 80079f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80079f4:	4628      	mov	r0, r5
 80079f6:	4798      	blx	r3
 80079f8:	2000      	movs	r0, #0
 80079fa:	e7e0      	b.n	80079be <_raise_r+0x12>

080079fc <raise>:
 80079fc:	4b02      	ldr	r3, [pc, #8]	; (8007a08 <raise+0xc>)
 80079fe:	4601      	mov	r1, r0
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	f7ff bfd3 	b.w	80079ac <_raise_r>
 8007a06:	bf00      	nop
 8007a08:	2000003c 	.word	0x2000003c

08007a0c <_kill_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	4d07      	ldr	r5, [pc, #28]	; (8007a2c <_kill_r+0x20>)
 8007a10:	2300      	movs	r3, #0
 8007a12:	4604      	mov	r4, r0
 8007a14:	4608      	mov	r0, r1
 8007a16:	4611      	mov	r1, r2
 8007a18:	602b      	str	r3, [r5, #0]
 8007a1a:	f7f9 ff77 	bl	800190c <_kill>
 8007a1e:	1c43      	adds	r3, r0, #1
 8007a20:	d102      	bne.n	8007a28 <_kill_r+0x1c>
 8007a22:	682b      	ldr	r3, [r5, #0]
 8007a24:	b103      	cbz	r3, 8007a28 <_kill_r+0x1c>
 8007a26:	6023      	str	r3, [r4, #0]
 8007a28:	bd38      	pop	{r3, r4, r5, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20000628 	.word	0x20000628

08007a30 <_getpid_r>:
 8007a30:	f7f9 bf64 	b.w	80018fc <_getpid>

08007a34 <_strerror_r>:
 8007a34:	b510      	push	{r4, lr}
 8007a36:	4604      	mov	r4, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	288e      	cmp	r0, #142	; 0x8e
 8007a3e:	f200 8130 	bhi.w	8007ca2 <_strerror_r+0x26e>
 8007a42:	e8df f010 	tbh	[pc, r0, lsl #1]
 8007a46:	0139      	.short	0x0139
 8007a48:	0092008f 	.word	0x0092008f
 8007a4c:	00960094 	.word	0x00960094
 8007a50:	009a0098 	.word	0x009a0098
 8007a54:	009e009c 	.word	0x009e009c
 8007a58:	00a400a2 	.word	0x00a400a2
 8007a5c:	00aa00a8 	.word	0x00aa00a8
 8007a60:	00ae00ac 	.word	0x00ae00ac
 8007a64:	00b0012e 	.word	0x00b0012e
 8007a68:	00b400b2 	.word	0x00b400b2
 8007a6c:	00b800b6 	.word	0x00b800b6
 8007a70:	00c000be 	.word	0x00c000be
 8007a74:	00c800c6 	.word	0x00c800c6
 8007a78:	00cc00ca 	.word	0x00cc00ca
 8007a7c:	00d200ce 	.word	0x00d200ce
 8007a80:	00d800d6 	.word	0x00d800d6
 8007a84:	00dc00da 	.word	0x00dc00da
 8007a88:	00e000de 	.word	0x00e000de
 8007a8c:	00e400e2 	.word	0x00e400e2
 8007a90:	012e012e 	.word	0x012e012e
 8007a94:	012e012e 	.word	0x012e012e
 8007a98:	012e012e 	.word	0x012e012e
 8007a9c:	012e012e 	.word	0x012e012e
 8007aa0:	00ec00e8 	.word	0x00ec00e8
 8007aa4:	012e012e 	.word	0x012e012e
 8007aa8:	012e012e 	.word	0x012e012e
 8007aac:	012e012e 	.word	0x012e012e
 8007ab0:	012e012e 	.word	0x012e012e
 8007ab4:	012e012e 	.word	0x012e012e
 8007ab8:	012e012e 	.word	0x012e012e
 8007abc:	00ee012e 	.word	0x00ee012e
 8007ac0:	00f00108 	.word	0x00f00108
 8007ac4:	012e00f2 	.word	0x012e00f2
 8007ac8:	012e012e 	.word	0x012e012e
 8007acc:	012e00f4 	.word	0x012e00f4
 8007ad0:	012e012e 	.word	0x012e012e
 8007ad4:	012e00f6 	.word	0x012e00f6
 8007ad8:	00fa012e 	.word	0x00fa012e
 8007adc:	012e012e 	.word	0x012e012e
 8007ae0:	012e00fc 	.word	0x012e00fc
 8007ae4:	012e012e 	.word	0x012e012e
 8007ae8:	012e012e 	.word	0x012e012e
 8007aec:	012e012e 	.word	0x012e012e
 8007af0:	012e012e 	.word	0x012e012e
 8007af4:	00fe012e 	.word	0x00fe012e
 8007af8:	0100012e 	.word	0x0100012e
 8007afc:	01040102 	.word	0x01040102
 8007b00:	012e012e 	.word	0x012e012e
 8007b04:	012e0126 	.word	0x012e0126
 8007b08:	012e012e 	.word	0x012e012e
 8007b0c:	012e012e 	.word	0x012e012e
 8007b10:	012e012e 	.word	0x012e012e
 8007b14:	0114012e 	.word	0x0114012e
 8007b18:	010a0106 	.word	0x010a0106
 8007b1c:	010e010c 	.word	0x010e010c
 8007b20:	012e0110 	.word	0x012e0110
 8007b24:	01160112 	.word	0x01160112
 8007b28:	00ea011a 	.word	0x00ea011a
 8007b2c:	012c00c2 	.word	0x012c00c2
 8007b30:	00d000ba 	.word	0x00d000ba
 8007b34:	00a000bc 	.word	0x00a000bc
 8007b38:	012a00a6 	.word	0x012a00a6
 8007b3c:	012e00f8 	.word	0x012e00f8
 8007b40:	00c40118 	.word	0x00c40118
 8007b44:	011c011e 	.word	0x011c011e
 8007b48:	012e012e 	.word	0x012e012e
 8007b4c:	012e012e 	.word	0x012e012e
 8007b50:	00d4012e 	.word	0x00d4012e
 8007b54:	012e012e 	.word	0x012e012e
 8007b58:	00e6012e 	.word	0x00e6012e
 8007b5c:	01200128 	.word	0x01200128
 8007b60:	01240122 	.word	0x01240122
 8007b64:	4b55      	ldr	r3, [pc, #340]	; (8007cbc <_strerror_r+0x288>)
 8007b66:	4618      	mov	r0, r3
 8007b68:	bd10      	pop	{r4, pc}
 8007b6a:	4b55      	ldr	r3, [pc, #340]	; (8007cc0 <_strerror_r+0x28c>)
 8007b6c:	e7fb      	b.n	8007b66 <_strerror_r+0x132>
 8007b6e:	4b55      	ldr	r3, [pc, #340]	; (8007cc4 <_strerror_r+0x290>)
 8007b70:	e7f9      	b.n	8007b66 <_strerror_r+0x132>
 8007b72:	4b55      	ldr	r3, [pc, #340]	; (8007cc8 <_strerror_r+0x294>)
 8007b74:	e7f7      	b.n	8007b66 <_strerror_r+0x132>
 8007b76:	4b55      	ldr	r3, [pc, #340]	; (8007ccc <_strerror_r+0x298>)
 8007b78:	e7f5      	b.n	8007b66 <_strerror_r+0x132>
 8007b7a:	4b55      	ldr	r3, [pc, #340]	; (8007cd0 <_strerror_r+0x29c>)
 8007b7c:	e7f3      	b.n	8007b66 <_strerror_r+0x132>
 8007b7e:	4b55      	ldr	r3, [pc, #340]	; (8007cd4 <_strerror_r+0x2a0>)
 8007b80:	e7f1      	b.n	8007b66 <_strerror_r+0x132>
 8007b82:	4b55      	ldr	r3, [pc, #340]	; (8007cd8 <_strerror_r+0x2a4>)
 8007b84:	e7ef      	b.n	8007b66 <_strerror_r+0x132>
 8007b86:	4b55      	ldr	r3, [pc, #340]	; (8007cdc <_strerror_r+0x2a8>)
 8007b88:	e7ed      	b.n	8007b66 <_strerror_r+0x132>
 8007b8a:	4b55      	ldr	r3, [pc, #340]	; (8007ce0 <_strerror_r+0x2ac>)
 8007b8c:	e7eb      	b.n	8007b66 <_strerror_r+0x132>
 8007b8e:	4b55      	ldr	r3, [pc, #340]	; (8007ce4 <_strerror_r+0x2b0>)
 8007b90:	e7e9      	b.n	8007b66 <_strerror_r+0x132>
 8007b92:	4b55      	ldr	r3, [pc, #340]	; (8007ce8 <_strerror_r+0x2b4>)
 8007b94:	e7e7      	b.n	8007b66 <_strerror_r+0x132>
 8007b96:	4b55      	ldr	r3, [pc, #340]	; (8007cec <_strerror_r+0x2b8>)
 8007b98:	e7e5      	b.n	8007b66 <_strerror_r+0x132>
 8007b9a:	4b55      	ldr	r3, [pc, #340]	; (8007cf0 <_strerror_r+0x2bc>)
 8007b9c:	e7e3      	b.n	8007b66 <_strerror_r+0x132>
 8007b9e:	4b55      	ldr	r3, [pc, #340]	; (8007cf4 <_strerror_r+0x2c0>)
 8007ba0:	e7e1      	b.n	8007b66 <_strerror_r+0x132>
 8007ba2:	4b55      	ldr	r3, [pc, #340]	; (8007cf8 <_strerror_r+0x2c4>)
 8007ba4:	e7df      	b.n	8007b66 <_strerror_r+0x132>
 8007ba6:	4b55      	ldr	r3, [pc, #340]	; (8007cfc <_strerror_r+0x2c8>)
 8007ba8:	e7dd      	b.n	8007b66 <_strerror_r+0x132>
 8007baa:	4b55      	ldr	r3, [pc, #340]	; (8007d00 <_strerror_r+0x2cc>)
 8007bac:	e7db      	b.n	8007b66 <_strerror_r+0x132>
 8007bae:	4b55      	ldr	r3, [pc, #340]	; (8007d04 <_strerror_r+0x2d0>)
 8007bb0:	e7d9      	b.n	8007b66 <_strerror_r+0x132>
 8007bb2:	4b55      	ldr	r3, [pc, #340]	; (8007d08 <_strerror_r+0x2d4>)
 8007bb4:	e7d7      	b.n	8007b66 <_strerror_r+0x132>
 8007bb6:	4b55      	ldr	r3, [pc, #340]	; (8007d0c <_strerror_r+0x2d8>)
 8007bb8:	e7d5      	b.n	8007b66 <_strerror_r+0x132>
 8007bba:	4b55      	ldr	r3, [pc, #340]	; (8007d10 <_strerror_r+0x2dc>)
 8007bbc:	e7d3      	b.n	8007b66 <_strerror_r+0x132>
 8007bbe:	4b55      	ldr	r3, [pc, #340]	; (8007d14 <_strerror_r+0x2e0>)
 8007bc0:	e7d1      	b.n	8007b66 <_strerror_r+0x132>
 8007bc2:	4b55      	ldr	r3, [pc, #340]	; (8007d18 <_strerror_r+0x2e4>)
 8007bc4:	e7cf      	b.n	8007b66 <_strerror_r+0x132>
 8007bc6:	4b55      	ldr	r3, [pc, #340]	; (8007d1c <_strerror_r+0x2e8>)
 8007bc8:	e7cd      	b.n	8007b66 <_strerror_r+0x132>
 8007bca:	4b55      	ldr	r3, [pc, #340]	; (8007d20 <_strerror_r+0x2ec>)
 8007bcc:	e7cb      	b.n	8007b66 <_strerror_r+0x132>
 8007bce:	4b55      	ldr	r3, [pc, #340]	; (8007d24 <_strerror_r+0x2f0>)
 8007bd0:	e7c9      	b.n	8007b66 <_strerror_r+0x132>
 8007bd2:	4b55      	ldr	r3, [pc, #340]	; (8007d28 <_strerror_r+0x2f4>)
 8007bd4:	e7c7      	b.n	8007b66 <_strerror_r+0x132>
 8007bd6:	4b55      	ldr	r3, [pc, #340]	; (8007d2c <_strerror_r+0x2f8>)
 8007bd8:	e7c5      	b.n	8007b66 <_strerror_r+0x132>
 8007bda:	4b55      	ldr	r3, [pc, #340]	; (8007d30 <_strerror_r+0x2fc>)
 8007bdc:	e7c3      	b.n	8007b66 <_strerror_r+0x132>
 8007bde:	4b55      	ldr	r3, [pc, #340]	; (8007d34 <_strerror_r+0x300>)
 8007be0:	e7c1      	b.n	8007b66 <_strerror_r+0x132>
 8007be2:	4b55      	ldr	r3, [pc, #340]	; (8007d38 <_strerror_r+0x304>)
 8007be4:	e7bf      	b.n	8007b66 <_strerror_r+0x132>
 8007be6:	4b55      	ldr	r3, [pc, #340]	; (8007d3c <_strerror_r+0x308>)
 8007be8:	e7bd      	b.n	8007b66 <_strerror_r+0x132>
 8007bea:	4b55      	ldr	r3, [pc, #340]	; (8007d40 <_strerror_r+0x30c>)
 8007bec:	e7bb      	b.n	8007b66 <_strerror_r+0x132>
 8007bee:	4b55      	ldr	r3, [pc, #340]	; (8007d44 <_strerror_r+0x310>)
 8007bf0:	e7b9      	b.n	8007b66 <_strerror_r+0x132>
 8007bf2:	4b55      	ldr	r3, [pc, #340]	; (8007d48 <_strerror_r+0x314>)
 8007bf4:	e7b7      	b.n	8007b66 <_strerror_r+0x132>
 8007bf6:	4b55      	ldr	r3, [pc, #340]	; (8007d4c <_strerror_r+0x318>)
 8007bf8:	e7b5      	b.n	8007b66 <_strerror_r+0x132>
 8007bfa:	4b55      	ldr	r3, [pc, #340]	; (8007d50 <_strerror_r+0x31c>)
 8007bfc:	e7b3      	b.n	8007b66 <_strerror_r+0x132>
 8007bfe:	4b55      	ldr	r3, [pc, #340]	; (8007d54 <_strerror_r+0x320>)
 8007c00:	e7b1      	b.n	8007b66 <_strerror_r+0x132>
 8007c02:	4b55      	ldr	r3, [pc, #340]	; (8007d58 <_strerror_r+0x324>)
 8007c04:	e7af      	b.n	8007b66 <_strerror_r+0x132>
 8007c06:	4b55      	ldr	r3, [pc, #340]	; (8007d5c <_strerror_r+0x328>)
 8007c08:	e7ad      	b.n	8007b66 <_strerror_r+0x132>
 8007c0a:	4b55      	ldr	r3, [pc, #340]	; (8007d60 <_strerror_r+0x32c>)
 8007c0c:	e7ab      	b.n	8007b66 <_strerror_r+0x132>
 8007c0e:	4b55      	ldr	r3, [pc, #340]	; (8007d64 <_strerror_r+0x330>)
 8007c10:	e7a9      	b.n	8007b66 <_strerror_r+0x132>
 8007c12:	4b55      	ldr	r3, [pc, #340]	; (8007d68 <_strerror_r+0x334>)
 8007c14:	e7a7      	b.n	8007b66 <_strerror_r+0x132>
 8007c16:	4b55      	ldr	r3, [pc, #340]	; (8007d6c <_strerror_r+0x338>)
 8007c18:	e7a5      	b.n	8007b66 <_strerror_r+0x132>
 8007c1a:	4b55      	ldr	r3, [pc, #340]	; (8007d70 <_strerror_r+0x33c>)
 8007c1c:	e7a3      	b.n	8007b66 <_strerror_r+0x132>
 8007c1e:	4b55      	ldr	r3, [pc, #340]	; (8007d74 <_strerror_r+0x340>)
 8007c20:	e7a1      	b.n	8007b66 <_strerror_r+0x132>
 8007c22:	4b55      	ldr	r3, [pc, #340]	; (8007d78 <_strerror_r+0x344>)
 8007c24:	e79f      	b.n	8007b66 <_strerror_r+0x132>
 8007c26:	4b55      	ldr	r3, [pc, #340]	; (8007d7c <_strerror_r+0x348>)
 8007c28:	e79d      	b.n	8007b66 <_strerror_r+0x132>
 8007c2a:	4b55      	ldr	r3, [pc, #340]	; (8007d80 <_strerror_r+0x34c>)
 8007c2c:	e79b      	b.n	8007b66 <_strerror_r+0x132>
 8007c2e:	4b55      	ldr	r3, [pc, #340]	; (8007d84 <_strerror_r+0x350>)
 8007c30:	e799      	b.n	8007b66 <_strerror_r+0x132>
 8007c32:	4b55      	ldr	r3, [pc, #340]	; (8007d88 <_strerror_r+0x354>)
 8007c34:	e797      	b.n	8007b66 <_strerror_r+0x132>
 8007c36:	4b55      	ldr	r3, [pc, #340]	; (8007d8c <_strerror_r+0x358>)
 8007c38:	e795      	b.n	8007b66 <_strerror_r+0x132>
 8007c3a:	4b55      	ldr	r3, [pc, #340]	; (8007d90 <_strerror_r+0x35c>)
 8007c3c:	e793      	b.n	8007b66 <_strerror_r+0x132>
 8007c3e:	4b55      	ldr	r3, [pc, #340]	; (8007d94 <_strerror_r+0x360>)
 8007c40:	e791      	b.n	8007b66 <_strerror_r+0x132>
 8007c42:	4b55      	ldr	r3, [pc, #340]	; (8007d98 <_strerror_r+0x364>)
 8007c44:	e78f      	b.n	8007b66 <_strerror_r+0x132>
 8007c46:	4b55      	ldr	r3, [pc, #340]	; (8007d9c <_strerror_r+0x368>)
 8007c48:	e78d      	b.n	8007b66 <_strerror_r+0x132>
 8007c4a:	4b55      	ldr	r3, [pc, #340]	; (8007da0 <_strerror_r+0x36c>)
 8007c4c:	e78b      	b.n	8007b66 <_strerror_r+0x132>
 8007c4e:	4b55      	ldr	r3, [pc, #340]	; (8007da4 <_strerror_r+0x370>)
 8007c50:	e789      	b.n	8007b66 <_strerror_r+0x132>
 8007c52:	4b55      	ldr	r3, [pc, #340]	; (8007da8 <_strerror_r+0x374>)
 8007c54:	e787      	b.n	8007b66 <_strerror_r+0x132>
 8007c56:	4b55      	ldr	r3, [pc, #340]	; (8007dac <_strerror_r+0x378>)
 8007c58:	e785      	b.n	8007b66 <_strerror_r+0x132>
 8007c5a:	4b55      	ldr	r3, [pc, #340]	; (8007db0 <_strerror_r+0x37c>)
 8007c5c:	e783      	b.n	8007b66 <_strerror_r+0x132>
 8007c5e:	4b55      	ldr	r3, [pc, #340]	; (8007db4 <_strerror_r+0x380>)
 8007c60:	e781      	b.n	8007b66 <_strerror_r+0x132>
 8007c62:	4b55      	ldr	r3, [pc, #340]	; (8007db8 <_strerror_r+0x384>)
 8007c64:	e77f      	b.n	8007b66 <_strerror_r+0x132>
 8007c66:	4b55      	ldr	r3, [pc, #340]	; (8007dbc <_strerror_r+0x388>)
 8007c68:	e77d      	b.n	8007b66 <_strerror_r+0x132>
 8007c6a:	4b55      	ldr	r3, [pc, #340]	; (8007dc0 <_strerror_r+0x38c>)
 8007c6c:	e77b      	b.n	8007b66 <_strerror_r+0x132>
 8007c6e:	4b55      	ldr	r3, [pc, #340]	; (8007dc4 <_strerror_r+0x390>)
 8007c70:	e779      	b.n	8007b66 <_strerror_r+0x132>
 8007c72:	4b55      	ldr	r3, [pc, #340]	; (8007dc8 <_strerror_r+0x394>)
 8007c74:	e777      	b.n	8007b66 <_strerror_r+0x132>
 8007c76:	4b55      	ldr	r3, [pc, #340]	; (8007dcc <_strerror_r+0x398>)
 8007c78:	e775      	b.n	8007b66 <_strerror_r+0x132>
 8007c7a:	4b55      	ldr	r3, [pc, #340]	; (8007dd0 <_strerror_r+0x39c>)
 8007c7c:	e773      	b.n	8007b66 <_strerror_r+0x132>
 8007c7e:	4b55      	ldr	r3, [pc, #340]	; (8007dd4 <_strerror_r+0x3a0>)
 8007c80:	e771      	b.n	8007b66 <_strerror_r+0x132>
 8007c82:	4b55      	ldr	r3, [pc, #340]	; (8007dd8 <_strerror_r+0x3a4>)
 8007c84:	e76f      	b.n	8007b66 <_strerror_r+0x132>
 8007c86:	4b55      	ldr	r3, [pc, #340]	; (8007ddc <_strerror_r+0x3a8>)
 8007c88:	e76d      	b.n	8007b66 <_strerror_r+0x132>
 8007c8a:	4b55      	ldr	r3, [pc, #340]	; (8007de0 <_strerror_r+0x3ac>)
 8007c8c:	e76b      	b.n	8007b66 <_strerror_r+0x132>
 8007c8e:	4b55      	ldr	r3, [pc, #340]	; (8007de4 <_strerror_r+0x3b0>)
 8007c90:	e769      	b.n	8007b66 <_strerror_r+0x132>
 8007c92:	4b55      	ldr	r3, [pc, #340]	; (8007de8 <_strerror_r+0x3b4>)
 8007c94:	e767      	b.n	8007b66 <_strerror_r+0x132>
 8007c96:	4b55      	ldr	r3, [pc, #340]	; (8007dec <_strerror_r+0x3b8>)
 8007c98:	e765      	b.n	8007b66 <_strerror_r+0x132>
 8007c9a:	4b55      	ldr	r3, [pc, #340]	; (8007df0 <_strerror_r+0x3bc>)
 8007c9c:	e763      	b.n	8007b66 <_strerror_r+0x132>
 8007c9e:	4b55      	ldr	r3, [pc, #340]	; (8007df4 <_strerror_r+0x3c0>)
 8007ca0:	e761      	b.n	8007b66 <_strerror_r+0x132>
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	bf14      	ite	ne
 8007ca6:	461a      	movne	r2, r3
 8007ca8:	4622      	moveq	r2, r4
 8007caa:	f000 f8a9 	bl	8007e00 <_user_strerror>
 8007cae:	4b52      	ldr	r3, [pc, #328]	; (8007df8 <_strerror_r+0x3c4>)
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	bf18      	it	ne
 8007cb4:	4603      	movne	r3, r0
 8007cb6:	e756      	b.n	8007b66 <_strerror_r+0x132>
 8007cb8:	4b50      	ldr	r3, [pc, #320]	; (8007dfc <_strerror_r+0x3c8>)
 8007cba:	e754      	b.n	8007b66 <_strerror_r+0x132>
 8007cbc:	0800a1fc 	.word	0x0800a1fc
 8007cc0:	0800a206 	.word	0x0800a206
 8007cc4:	0800a220 	.word	0x0800a220
 8007cc8:	0800a230 	.word	0x0800a230
 8007ccc:	0800a248 	.word	0x0800a248
 8007cd0:	0800a252 	.word	0x0800a252
 8007cd4:	0800a26c 	.word	0x0800a26c
 8007cd8:	0800a27e 	.word	0x0800a27e
 8007cdc:	0800a290 	.word	0x0800a290
 8007ce0:	0800a2a9 	.word	0x0800a2a9
 8007ce4:	0800a2b9 	.word	0x0800a2b9
 8007ce8:	0800a2c5 	.word	0x0800a2c5
 8007cec:	0800a2e2 	.word	0x0800a2e2
 8007cf0:	0800a2f4 	.word	0x0800a2f4
 8007cf4:	0800a305 	.word	0x0800a305
 8007cf8:	0800a317 	.word	0x0800a317
 8007cfc:	0800a323 	.word	0x0800a323
 8007d00:	0800a33b 	.word	0x0800a33b
 8007d04:	0800a347 	.word	0x0800a347
 8007d08:	0800a359 	.word	0x0800a359
 8007d0c:	0800a368 	.word	0x0800a368
 8007d10:	0800a378 	.word	0x0800a378
 8007d14:	0800a385 	.word	0x0800a385
 8007d18:	0800a3a4 	.word	0x0800a3a4
 8007d1c:	0800a3b3 	.word	0x0800a3b3
 8007d20:	0800a3c4 	.word	0x0800a3c4
 8007d24:	0800a3e8 	.word	0x0800a3e8
 8007d28:	0800a406 	.word	0x0800a406
 8007d2c:	0800a424 	.word	0x0800a424
 8007d30:	0800a444 	.word	0x0800a444
 8007d34:	0800a45b 	.word	0x0800a45b
 8007d38:	0800a46a 	.word	0x0800a46a
 8007d3c:	0800a479 	.word	0x0800a479
 8007d40:	0800a48d 	.word	0x0800a48d
 8007d44:	0800a4a5 	.word	0x0800a4a5
 8007d48:	0800a4b3 	.word	0x0800a4b3
 8007d4c:	0800a4c0 	.word	0x0800a4c0
 8007d50:	0800a4d6 	.word	0x0800a4d6
 8007d54:	0800a4e5 	.word	0x0800a4e5
 8007d58:	0800a4f1 	.word	0x0800a4f1
 8007d5c:	0800a520 	.word	0x0800a520
 8007d60:	0800a531 	.word	0x0800a531
 8007d64:	0800a54c 	.word	0x0800a54c
 8007d68:	0800a55f 	.word	0x0800a55f
 8007d6c:	0800a575 	.word	0x0800a575
 8007d70:	0800a57e 	.word	0x0800a57e
 8007d74:	0800a595 	.word	0x0800a595
 8007d78:	0800a59d 	.word	0x0800a59d
 8007d7c:	0800a5aa 	.word	0x0800a5aa
 8007d80:	0800a5bf 	.word	0x0800a5bf
 8007d84:	0800a5d3 	.word	0x0800a5d3
 8007d88:	0800a5eb 	.word	0x0800a5eb
 8007d8c:	0800a5fa 	.word	0x0800a5fa
 8007d90:	0800a60b 	.word	0x0800a60b
 8007d94:	0800a61e 	.word	0x0800a61e
 8007d98:	0800a62a 	.word	0x0800a62a
 8007d9c:	0800a643 	.word	0x0800a643
 8007da0:	0800a657 	.word	0x0800a657
 8007da4:	0800a672 	.word	0x0800a672
 8007da8:	0800a68a 	.word	0x0800a68a
 8007dac:	0800a6a4 	.word	0x0800a6a4
 8007db0:	0800a6ac 	.word	0x0800a6ac
 8007db4:	0800a6dc 	.word	0x0800a6dc
 8007db8:	0800a6fb 	.word	0x0800a6fb
 8007dbc:	0800a71a 	.word	0x0800a71a
 8007dc0:	0800a731 	.word	0x0800a731
 8007dc4:	0800a744 	.word	0x0800a744
 8007dc8:	0800a75d 	.word	0x0800a75d
 8007dcc:	0800a774 	.word	0x0800a774
 8007dd0:	0800a78a 	.word	0x0800a78a
 8007dd4:	0800a7ab 	.word	0x0800a7ab
 8007dd8:	0800a7c3 	.word	0x0800a7c3
 8007ddc:	0800a7df 	.word	0x0800a7df
 8007de0:	0800a7f2 	.word	0x0800a7f2
 8007de4:	0800a808 	.word	0x0800a808
 8007de8:	0800a81c 	.word	0x0800a81c
 8007dec:	0800a83e 	.word	0x0800a83e
 8007df0:	0800a864 	.word	0x0800a864
 8007df4:	0800a875 	.word	0x0800a875
 8007df8:	0800ab28 	.word	0x0800ab28
 8007dfc:	0800a88a 	.word	0x0800a88a

08007e00 <_user_strerror>:
 8007e00:	2000      	movs	r0, #0
 8007e02:	4770      	bx	lr

08007e04 <_vsiprintf_r>:
 8007e04:	b500      	push	{lr}
 8007e06:	b09b      	sub	sp, #108	; 0x6c
 8007e08:	9100      	str	r1, [sp, #0]
 8007e0a:	9104      	str	r1, [sp, #16]
 8007e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e10:	9105      	str	r1, [sp, #20]
 8007e12:	9102      	str	r1, [sp, #8]
 8007e14:	4905      	ldr	r1, [pc, #20]	; (8007e2c <_vsiprintf_r+0x28>)
 8007e16:	9103      	str	r1, [sp, #12]
 8007e18:	4669      	mov	r1, sp
 8007e1a:	f001 fcad 	bl	8009778 <_svfiprintf_r>
 8007e1e:	9b00      	ldr	r3, [sp, #0]
 8007e20:	2200      	movs	r2, #0
 8007e22:	701a      	strb	r2, [r3, #0]
 8007e24:	b01b      	add	sp, #108	; 0x6c
 8007e26:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e2a:	bf00      	nop
 8007e2c:	ffff0208 	.word	0xffff0208

08007e30 <vsiprintf>:
 8007e30:	4613      	mov	r3, r2
 8007e32:	460a      	mov	r2, r1
 8007e34:	4601      	mov	r1, r0
 8007e36:	4802      	ldr	r0, [pc, #8]	; (8007e40 <vsiprintf+0x10>)
 8007e38:	6800      	ldr	r0, [r0, #0]
 8007e3a:	f7ff bfe3 	b.w	8007e04 <_vsiprintf_r>
 8007e3e:	bf00      	nop
 8007e40:	2000003c 	.word	0x2000003c

08007e44 <_write_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	4d07      	ldr	r5, [pc, #28]	; (8007e64 <_write_r+0x20>)
 8007e48:	4604      	mov	r4, r0
 8007e4a:	4608      	mov	r0, r1
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	602a      	str	r2, [r5, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f7f9 fd91 	bl	800197a <_write>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d102      	bne.n	8007e62 <_write_r+0x1e>
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	b103      	cbz	r3, 8007e62 <_write_r+0x1e>
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	bd38      	pop	{r3, r4, r5, pc}
 8007e64:	20000628 	.word	0x20000628

08007e68 <quorem>:
 8007e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	6903      	ldr	r3, [r0, #16]
 8007e6e:	690c      	ldr	r4, [r1, #16]
 8007e70:	42a3      	cmp	r3, r4
 8007e72:	4607      	mov	r7, r0
 8007e74:	f2c0 8081 	blt.w	8007f7a <quorem+0x112>
 8007e78:	3c01      	subs	r4, #1
 8007e7a:	f101 0814 	add.w	r8, r1, #20
 8007e7e:	f100 0514 	add.w	r5, r0, #20
 8007e82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e90:	3301      	adds	r3, #1
 8007e92:	429a      	cmp	r2, r3
 8007e94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ea0:	d331      	bcc.n	8007f06 <quorem+0x9e>
 8007ea2:	f04f 0e00 	mov.w	lr, #0
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	46ac      	mov	ip, r5
 8007eaa:	46f2      	mov	sl, lr
 8007eac:	f850 2b04 	ldr.w	r2, [r0], #4
 8007eb0:	b293      	uxth	r3, r2
 8007eb2:	fb06 e303 	mla	r3, r6, r3, lr
 8007eb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	ebaa 0303 	sub.w	r3, sl, r3
 8007ec0:	f8dc a000 	ldr.w	sl, [ip]
 8007ec4:	0c12      	lsrs	r2, r2, #16
 8007ec6:	fa13 f38a 	uxtah	r3, r3, sl
 8007eca:	fb06 e202 	mla	r2, r6, r2, lr
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	9b00      	ldr	r3, [sp, #0]
 8007ed2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ed6:	b292      	uxth	r2, r2
 8007ed8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007edc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ee0:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ee4:	4581      	cmp	r9, r0
 8007ee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eea:	f84c 3b04 	str.w	r3, [ip], #4
 8007eee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ef2:	d2db      	bcs.n	8007eac <quorem+0x44>
 8007ef4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ef8:	b92b      	cbnz	r3, 8007f06 <quorem+0x9e>
 8007efa:	9b01      	ldr	r3, [sp, #4]
 8007efc:	3b04      	subs	r3, #4
 8007efe:	429d      	cmp	r5, r3
 8007f00:	461a      	mov	r2, r3
 8007f02:	d32e      	bcc.n	8007f62 <quorem+0xfa>
 8007f04:	613c      	str	r4, [r7, #16]
 8007f06:	4638      	mov	r0, r7
 8007f08:	f001 fac2 	bl	8009490 <__mcmp>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	db24      	blt.n	8007f5a <quorem+0xf2>
 8007f10:	3601      	adds	r6, #1
 8007f12:	4628      	mov	r0, r5
 8007f14:	f04f 0c00 	mov.w	ip, #0
 8007f18:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f1c:	f8d0 e000 	ldr.w	lr, [r0]
 8007f20:	b293      	uxth	r3, r2
 8007f22:	ebac 0303 	sub.w	r3, ip, r3
 8007f26:	0c12      	lsrs	r2, r2, #16
 8007f28:	fa13 f38e 	uxtah	r3, r3, lr
 8007f2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f3a:	45c1      	cmp	r9, r8
 8007f3c:	f840 3b04 	str.w	r3, [r0], #4
 8007f40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f44:	d2e8      	bcs.n	8007f18 <quorem+0xb0>
 8007f46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f4e:	b922      	cbnz	r2, 8007f5a <quorem+0xf2>
 8007f50:	3b04      	subs	r3, #4
 8007f52:	429d      	cmp	r5, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	d30a      	bcc.n	8007f6e <quorem+0x106>
 8007f58:	613c      	str	r4, [r7, #16]
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	b003      	add	sp, #12
 8007f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f62:	6812      	ldr	r2, [r2, #0]
 8007f64:	3b04      	subs	r3, #4
 8007f66:	2a00      	cmp	r2, #0
 8007f68:	d1cc      	bne.n	8007f04 <quorem+0x9c>
 8007f6a:	3c01      	subs	r4, #1
 8007f6c:	e7c7      	b.n	8007efe <quorem+0x96>
 8007f6e:	6812      	ldr	r2, [r2, #0]
 8007f70:	3b04      	subs	r3, #4
 8007f72:	2a00      	cmp	r2, #0
 8007f74:	d1f0      	bne.n	8007f58 <quorem+0xf0>
 8007f76:	3c01      	subs	r4, #1
 8007f78:	e7eb      	b.n	8007f52 <quorem+0xea>
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	e7ee      	b.n	8007f5c <quorem+0xf4>
	...

08007f80 <_dtoa_r>:
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	ed2d 8b04 	vpush	{d8-d9}
 8007f88:	ec57 6b10 	vmov	r6, r7, d0
 8007f8c:	b093      	sub	sp, #76	; 0x4c
 8007f8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f94:	9106      	str	r1, [sp, #24]
 8007f96:	ee10 aa10 	vmov	sl, s0
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f9e:	930c      	str	r3, [sp, #48]	; 0x30
 8007fa0:	46bb      	mov	fp, r7
 8007fa2:	b975      	cbnz	r5, 8007fc2 <_dtoa_r+0x42>
 8007fa4:	2010      	movs	r0, #16
 8007fa6:	f7fe fef5 	bl	8006d94 <malloc>
 8007faa:	4602      	mov	r2, r0
 8007fac:	6260      	str	r0, [r4, #36]	; 0x24
 8007fae:	b920      	cbnz	r0, 8007fba <_dtoa_r+0x3a>
 8007fb0:	4ba7      	ldr	r3, [pc, #668]	; (8008250 <_dtoa_r+0x2d0>)
 8007fb2:	21ea      	movs	r1, #234	; 0xea
 8007fb4:	48a7      	ldr	r0, [pc, #668]	; (8008254 <_dtoa_r+0x2d4>)
 8007fb6:	f001 fd23 	bl	8009a00 <__assert_func>
 8007fba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fbe:	6005      	str	r5, [r0, #0]
 8007fc0:	60c5      	str	r5, [r0, #12]
 8007fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fc4:	6819      	ldr	r1, [r3, #0]
 8007fc6:	b151      	cbz	r1, 8007fde <_dtoa_r+0x5e>
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	604a      	str	r2, [r1, #4]
 8007fcc:	2301      	movs	r3, #1
 8007fce:	4093      	lsls	r3, r2
 8007fd0:	608b      	str	r3, [r1, #8]
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f001 f81a 	bl	800900c <_Bfree>
 8007fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	1e3b      	subs	r3, r7, #0
 8007fe0:	bfaa      	itet	ge
 8007fe2:	2300      	movge	r3, #0
 8007fe4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007fe8:	f8c8 3000 	strge.w	r3, [r8]
 8007fec:	4b9a      	ldr	r3, [pc, #616]	; (8008258 <_dtoa_r+0x2d8>)
 8007fee:	bfbc      	itt	lt
 8007ff0:	2201      	movlt	r2, #1
 8007ff2:	f8c8 2000 	strlt.w	r2, [r8]
 8007ff6:	ea33 030b 	bics.w	r3, r3, fp
 8007ffa:	d11b      	bne.n	8008034 <_dtoa_r+0xb4>
 8007ffc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ffe:	f242 730f 	movw	r3, #9999	; 0x270f
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008008:	4333      	orrs	r3, r6
 800800a:	f000 8592 	beq.w	8008b32 <_dtoa_r+0xbb2>
 800800e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008010:	b963      	cbnz	r3, 800802c <_dtoa_r+0xac>
 8008012:	4b92      	ldr	r3, [pc, #584]	; (800825c <_dtoa_r+0x2dc>)
 8008014:	e022      	b.n	800805c <_dtoa_r+0xdc>
 8008016:	4b92      	ldr	r3, [pc, #584]	; (8008260 <_dtoa_r+0x2e0>)
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	3308      	adds	r3, #8
 800801c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800801e:	6013      	str	r3, [r2, #0]
 8008020:	9801      	ldr	r0, [sp, #4]
 8008022:	b013      	add	sp, #76	; 0x4c
 8008024:	ecbd 8b04 	vpop	{d8-d9}
 8008028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802c:	4b8b      	ldr	r3, [pc, #556]	; (800825c <_dtoa_r+0x2dc>)
 800802e:	9301      	str	r3, [sp, #4]
 8008030:	3303      	adds	r3, #3
 8008032:	e7f3      	b.n	800801c <_dtoa_r+0x9c>
 8008034:	2200      	movs	r2, #0
 8008036:	2300      	movs	r3, #0
 8008038:	4650      	mov	r0, sl
 800803a:	4659      	mov	r1, fp
 800803c:	f7f8 fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 8008040:	ec4b ab19 	vmov	d9, sl, fp
 8008044:	4680      	mov	r8, r0
 8008046:	b158      	cbz	r0, 8008060 <_dtoa_r+0xe0>
 8008048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800804a:	2301      	movs	r3, #1
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 856b 	beq.w	8008b2c <_dtoa_r+0xbac>
 8008056:	4883      	ldr	r0, [pc, #524]	; (8008264 <_dtoa_r+0x2e4>)
 8008058:	6018      	str	r0, [r3, #0]
 800805a:	1e43      	subs	r3, r0, #1
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	e7df      	b.n	8008020 <_dtoa_r+0xa0>
 8008060:	ec4b ab10 	vmov	d0, sl, fp
 8008064:	aa10      	add	r2, sp, #64	; 0x40
 8008066:	a911      	add	r1, sp, #68	; 0x44
 8008068:	4620      	mov	r0, r4
 800806a:	f001 fab7 	bl	80095dc <__d2b>
 800806e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008072:	ee08 0a10 	vmov	s16, r0
 8008076:	2d00      	cmp	r5, #0
 8008078:	f000 8084 	beq.w	8008184 <_dtoa_r+0x204>
 800807c:	ee19 3a90 	vmov	r3, s19
 8008080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008084:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008088:	4656      	mov	r6, sl
 800808a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800808e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008092:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008096:	4b74      	ldr	r3, [pc, #464]	; (8008268 <_dtoa_r+0x2e8>)
 8008098:	2200      	movs	r2, #0
 800809a:	4630      	mov	r0, r6
 800809c:	4639      	mov	r1, r7
 800809e:	f7f8 f8f3 	bl	8000288 <__aeabi_dsub>
 80080a2:	a365      	add	r3, pc, #404	; (adr r3, 8008238 <_dtoa_r+0x2b8>)
 80080a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a8:	f7f8 faa6 	bl	80005f8 <__aeabi_dmul>
 80080ac:	a364      	add	r3, pc, #400	; (adr r3, 8008240 <_dtoa_r+0x2c0>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f7f8 f8eb 	bl	800028c <__adddf3>
 80080b6:	4606      	mov	r6, r0
 80080b8:	4628      	mov	r0, r5
 80080ba:	460f      	mov	r7, r1
 80080bc:	f7f8 fa32 	bl	8000524 <__aeabi_i2d>
 80080c0:	a361      	add	r3, pc, #388	; (adr r3, 8008248 <_dtoa_r+0x2c8>)
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	f7f8 fa97 	bl	80005f8 <__aeabi_dmul>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	4630      	mov	r0, r6
 80080d0:	4639      	mov	r1, r7
 80080d2:	f7f8 f8db 	bl	800028c <__adddf3>
 80080d6:	4606      	mov	r6, r0
 80080d8:	460f      	mov	r7, r1
 80080da:	f7f8 fd3d 	bl	8000b58 <__aeabi_d2iz>
 80080de:	2200      	movs	r2, #0
 80080e0:	9000      	str	r0, [sp, #0]
 80080e2:	2300      	movs	r3, #0
 80080e4:	4630      	mov	r0, r6
 80080e6:	4639      	mov	r1, r7
 80080e8:	f7f8 fcf8 	bl	8000adc <__aeabi_dcmplt>
 80080ec:	b150      	cbz	r0, 8008104 <_dtoa_r+0x184>
 80080ee:	9800      	ldr	r0, [sp, #0]
 80080f0:	f7f8 fa18 	bl	8000524 <__aeabi_i2d>
 80080f4:	4632      	mov	r2, r6
 80080f6:	463b      	mov	r3, r7
 80080f8:	f7f8 fce6 	bl	8000ac8 <__aeabi_dcmpeq>
 80080fc:	b910      	cbnz	r0, 8008104 <_dtoa_r+0x184>
 80080fe:	9b00      	ldr	r3, [sp, #0]
 8008100:	3b01      	subs	r3, #1
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	9b00      	ldr	r3, [sp, #0]
 8008106:	2b16      	cmp	r3, #22
 8008108:	d85a      	bhi.n	80081c0 <_dtoa_r+0x240>
 800810a:	9a00      	ldr	r2, [sp, #0]
 800810c:	4b57      	ldr	r3, [pc, #348]	; (800826c <_dtoa_r+0x2ec>)
 800810e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	ec51 0b19 	vmov	r0, r1, d9
 800811a:	f7f8 fcdf 	bl	8000adc <__aeabi_dcmplt>
 800811e:	2800      	cmp	r0, #0
 8008120:	d050      	beq.n	80081c4 <_dtoa_r+0x244>
 8008122:	9b00      	ldr	r3, [sp, #0]
 8008124:	3b01      	subs	r3, #1
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	2300      	movs	r3, #0
 800812a:	930b      	str	r3, [sp, #44]	; 0x2c
 800812c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800812e:	1b5d      	subs	r5, r3, r5
 8008130:	1e6b      	subs	r3, r5, #1
 8008132:	9305      	str	r3, [sp, #20]
 8008134:	bf45      	ittet	mi
 8008136:	f1c5 0301 	rsbmi	r3, r5, #1
 800813a:	9304      	strmi	r3, [sp, #16]
 800813c:	2300      	movpl	r3, #0
 800813e:	2300      	movmi	r3, #0
 8008140:	bf4c      	ite	mi
 8008142:	9305      	strmi	r3, [sp, #20]
 8008144:	9304      	strpl	r3, [sp, #16]
 8008146:	9b00      	ldr	r3, [sp, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	db3d      	blt.n	80081c8 <_dtoa_r+0x248>
 800814c:	9b05      	ldr	r3, [sp, #20]
 800814e:	9a00      	ldr	r2, [sp, #0]
 8008150:	920a      	str	r2, [sp, #40]	; 0x28
 8008152:	4413      	add	r3, r2
 8008154:	9305      	str	r3, [sp, #20]
 8008156:	2300      	movs	r3, #0
 8008158:	9307      	str	r3, [sp, #28]
 800815a:	9b06      	ldr	r3, [sp, #24]
 800815c:	2b09      	cmp	r3, #9
 800815e:	f200 8089 	bhi.w	8008274 <_dtoa_r+0x2f4>
 8008162:	2b05      	cmp	r3, #5
 8008164:	bfc4      	itt	gt
 8008166:	3b04      	subgt	r3, #4
 8008168:	9306      	strgt	r3, [sp, #24]
 800816a:	9b06      	ldr	r3, [sp, #24]
 800816c:	f1a3 0302 	sub.w	r3, r3, #2
 8008170:	bfcc      	ite	gt
 8008172:	2500      	movgt	r5, #0
 8008174:	2501      	movle	r5, #1
 8008176:	2b03      	cmp	r3, #3
 8008178:	f200 8087 	bhi.w	800828a <_dtoa_r+0x30a>
 800817c:	e8df f003 	tbb	[pc, r3]
 8008180:	59383a2d 	.word	0x59383a2d
 8008184:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008188:	441d      	add	r5, r3
 800818a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800818e:	2b20      	cmp	r3, #32
 8008190:	bfc1      	itttt	gt
 8008192:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008196:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800819a:	fa0b f303 	lslgt.w	r3, fp, r3
 800819e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80081a2:	bfda      	itte	le
 80081a4:	f1c3 0320 	rsble	r3, r3, #32
 80081a8:	fa06 f003 	lslle.w	r0, r6, r3
 80081ac:	4318      	orrgt	r0, r3
 80081ae:	f7f8 f9a9 	bl	8000504 <__aeabi_ui2d>
 80081b2:	2301      	movs	r3, #1
 80081b4:	4606      	mov	r6, r0
 80081b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80081ba:	3d01      	subs	r5, #1
 80081bc:	930e      	str	r3, [sp, #56]	; 0x38
 80081be:	e76a      	b.n	8008096 <_dtoa_r+0x116>
 80081c0:	2301      	movs	r3, #1
 80081c2:	e7b2      	b.n	800812a <_dtoa_r+0x1aa>
 80081c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80081c6:	e7b1      	b.n	800812c <_dtoa_r+0x1ac>
 80081c8:	9b04      	ldr	r3, [sp, #16]
 80081ca:	9a00      	ldr	r2, [sp, #0]
 80081cc:	1a9b      	subs	r3, r3, r2
 80081ce:	9304      	str	r3, [sp, #16]
 80081d0:	4253      	negs	r3, r2
 80081d2:	9307      	str	r3, [sp, #28]
 80081d4:	2300      	movs	r3, #0
 80081d6:	930a      	str	r3, [sp, #40]	; 0x28
 80081d8:	e7bf      	b.n	800815a <_dtoa_r+0x1da>
 80081da:	2300      	movs	r3, #0
 80081dc:	9308      	str	r3, [sp, #32]
 80081de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	dc55      	bgt.n	8008290 <_dtoa_r+0x310>
 80081e4:	2301      	movs	r3, #1
 80081e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081ea:	461a      	mov	r2, r3
 80081ec:	9209      	str	r2, [sp, #36]	; 0x24
 80081ee:	e00c      	b.n	800820a <_dtoa_r+0x28a>
 80081f0:	2301      	movs	r3, #1
 80081f2:	e7f3      	b.n	80081dc <_dtoa_r+0x25c>
 80081f4:	2300      	movs	r3, #0
 80081f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081f8:	9308      	str	r3, [sp, #32]
 80081fa:	9b00      	ldr	r3, [sp, #0]
 80081fc:	4413      	add	r3, r2
 80081fe:	9302      	str	r3, [sp, #8]
 8008200:	3301      	adds	r3, #1
 8008202:	2b01      	cmp	r3, #1
 8008204:	9303      	str	r3, [sp, #12]
 8008206:	bfb8      	it	lt
 8008208:	2301      	movlt	r3, #1
 800820a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800820c:	2200      	movs	r2, #0
 800820e:	6042      	str	r2, [r0, #4]
 8008210:	2204      	movs	r2, #4
 8008212:	f102 0614 	add.w	r6, r2, #20
 8008216:	429e      	cmp	r6, r3
 8008218:	6841      	ldr	r1, [r0, #4]
 800821a:	d93d      	bls.n	8008298 <_dtoa_r+0x318>
 800821c:	4620      	mov	r0, r4
 800821e:	f000 feb5 	bl	8008f8c <_Balloc>
 8008222:	9001      	str	r0, [sp, #4]
 8008224:	2800      	cmp	r0, #0
 8008226:	d13b      	bne.n	80082a0 <_dtoa_r+0x320>
 8008228:	4b11      	ldr	r3, [pc, #68]	; (8008270 <_dtoa_r+0x2f0>)
 800822a:	4602      	mov	r2, r0
 800822c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008230:	e6c0      	b.n	8007fb4 <_dtoa_r+0x34>
 8008232:	2301      	movs	r3, #1
 8008234:	e7df      	b.n	80081f6 <_dtoa_r+0x276>
 8008236:	bf00      	nop
 8008238:	636f4361 	.word	0x636f4361
 800823c:	3fd287a7 	.word	0x3fd287a7
 8008240:	8b60c8b3 	.word	0x8b60c8b3
 8008244:	3fc68a28 	.word	0x3fc68a28
 8008248:	509f79fb 	.word	0x509f79fb
 800824c:	3fd34413 	.word	0x3fd34413
 8008250:	0800a89f 	.word	0x0800a89f
 8008254:	0800a8b6 	.word	0x0800a8b6
 8008258:	7ff00000 	.word	0x7ff00000
 800825c:	0800a89b 	.word	0x0800a89b
 8008260:	0800a892 	.word	0x0800a892
 8008264:	0800a1d9 	.word	0x0800a1d9
 8008268:	3ff80000 	.word	0x3ff80000
 800826c:	0800aa08 	.word	0x0800aa08
 8008270:	0800a911 	.word	0x0800a911
 8008274:	2501      	movs	r5, #1
 8008276:	2300      	movs	r3, #0
 8008278:	9306      	str	r3, [sp, #24]
 800827a:	9508      	str	r5, [sp, #32]
 800827c:	f04f 33ff 	mov.w	r3, #4294967295
 8008280:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008284:	2200      	movs	r2, #0
 8008286:	2312      	movs	r3, #18
 8008288:	e7b0      	b.n	80081ec <_dtoa_r+0x26c>
 800828a:	2301      	movs	r3, #1
 800828c:	9308      	str	r3, [sp, #32]
 800828e:	e7f5      	b.n	800827c <_dtoa_r+0x2fc>
 8008290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008292:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008296:	e7b8      	b.n	800820a <_dtoa_r+0x28a>
 8008298:	3101      	adds	r1, #1
 800829a:	6041      	str	r1, [r0, #4]
 800829c:	0052      	lsls	r2, r2, #1
 800829e:	e7b8      	b.n	8008212 <_dtoa_r+0x292>
 80082a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082a2:	9a01      	ldr	r2, [sp, #4]
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	2b0e      	cmp	r3, #14
 80082aa:	f200 809d 	bhi.w	80083e8 <_dtoa_r+0x468>
 80082ae:	2d00      	cmp	r5, #0
 80082b0:	f000 809a 	beq.w	80083e8 <_dtoa_r+0x468>
 80082b4:	9b00      	ldr	r3, [sp, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	dd32      	ble.n	8008320 <_dtoa_r+0x3a0>
 80082ba:	4ab7      	ldr	r2, [pc, #732]	; (8008598 <_dtoa_r+0x618>)
 80082bc:	f003 030f 	and.w	r3, r3, #15
 80082c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082c8:	9b00      	ldr	r3, [sp, #0]
 80082ca:	05d8      	lsls	r0, r3, #23
 80082cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80082d0:	d516      	bpl.n	8008300 <_dtoa_r+0x380>
 80082d2:	4bb2      	ldr	r3, [pc, #712]	; (800859c <_dtoa_r+0x61c>)
 80082d4:	ec51 0b19 	vmov	r0, r1, d9
 80082d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082dc:	f7f8 fab6 	bl	800084c <__aeabi_ddiv>
 80082e0:	f007 070f 	and.w	r7, r7, #15
 80082e4:	4682      	mov	sl, r0
 80082e6:	468b      	mov	fp, r1
 80082e8:	2503      	movs	r5, #3
 80082ea:	4eac      	ldr	r6, [pc, #688]	; (800859c <_dtoa_r+0x61c>)
 80082ec:	b957      	cbnz	r7, 8008304 <_dtoa_r+0x384>
 80082ee:	4642      	mov	r2, r8
 80082f0:	464b      	mov	r3, r9
 80082f2:	4650      	mov	r0, sl
 80082f4:	4659      	mov	r1, fp
 80082f6:	f7f8 faa9 	bl	800084c <__aeabi_ddiv>
 80082fa:	4682      	mov	sl, r0
 80082fc:	468b      	mov	fp, r1
 80082fe:	e028      	b.n	8008352 <_dtoa_r+0x3d2>
 8008300:	2502      	movs	r5, #2
 8008302:	e7f2      	b.n	80082ea <_dtoa_r+0x36a>
 8008304:	07f9      	lsls	r1, r7, #31
 8008306:	d508      	bpl.n	800831a <_dtoa_r+0x39a>
 8008308:	4640      	mov	r0, r8
 800830a:	4649      	mov	r1, r9
 800830c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008310:	f7f8 f972 	bl	80005f8 <__aeabi_dmul>
 8008314:	3501      	adds	r5, #1
 8008316:	4680      	mov	r8, r0
 8008318:	4689      	mov	r9, r1
 800831a:	107f      	asrs	r7, r7, #1
 800831c:	3608      	adds	r6, #8
 800831e:	e7e5      	b.n	80082ec <_dtoa_r+0x36c>
 8008320:	f000 809b 	beq.w	800845a <_dtoa_r+0x4da>
 8008324:	9b00      	ldr	r3, [sp, #0]
 8008326:	4f9d      	ldr	r7, [pc, #628]	; (800859c <_dtoa_r+0x61c>)
 8008328:	425e      	negs	r6, r3
 800832a:	4b9b      	ldr	r3, [pc, #620]	; (8008598 <_dtoa_r+0x618>)
 800832c:	f006 020f 	and.w	r2, r6, #15
 8008330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008338:	ec51 0b19 	vmov	r0, r1, d9
 800833c:	f7f8 f95c 	bl	80005f8 <__aeabi_dmul>
 8008340:	1136      	asrs	r6, r6, #4
 8008342:	4682      	mov	sl, r0
 8008344:	468b      	mov	fp, r1
 8008346:	2300      	movs	r3, #0
 8008348:	2502      	movs	r5, #2
 800834a:	2e00      	cmp	r6, #0
 800834c:	d17a      	bne.n	8008444 <_dtoa_r+0x4c4>
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1d3      	bne.n	80082fa <_dtoa_r+0x37a>
 8008352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 8082 	beq.w	800845e <_dtoa_r+0x4de>
 800835a:	4b91      	ldr	r3, [pc, #580]	; (80085a0 <_dtoa_r+0x620>)
 800835c:	2200      	movs	r2, #0
 800835e:	4650      	mov	r0, sl
 8008360:	4659      	mov	r1, fp
 8008362:	f7f8 fbbb 	bl	8000adc <__aeabi_dcmplt>
 8008366:	2800      	cmp	r0, #0
 8008368:	d079      	beq.n	800845e <_dtoa_r+0x4de>
 800836a:	9b03      	ldr	r3, [sp, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d076      	beq.n	800845e <_dtoa_r+0x4de>
 8008370:	9b02      	ldr	r3, [sp, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	dd36      	ble.n	80083e4 <_dtoa_r+0x464>
 8008376:	9b00      	ldr	r3, [sp, #0]
 8008378:	4650      	mov	r0, sl
 800837a:	4659      	mov	r1, fp
 800837c:	1e5f      	subs	r7, r3, #1
 800837e:	2200      	movs	r2, #0
 8008380:	4b88      	ldr	r3, [pc, #544]	; (80085a4 <_dtoa_r+0x624>)
 8008382:	f7f8 f939 	bl	80005f8 <__aeabi_dmul>
 8008386:	9e02      	ldr	r6, [sp, #8]
 8008388:	4682      	mov	sl, r0
 800838a:	468b      	mov	fp, r1
 800838c:	3501      	adds	r5, #1
 800838e:	4628      	mov	r0, r5
 8008390:	f7f8 f8c8 	bl	8000524 <__aeabi_i2d>
 8008394:	4652      	mov	r2, sl
 8008396:	465b      	mov	r3, fp
 8008398:	f7f8 f92e 	bl	80005f8 <__aeabi_dmul>
 800839c:	4b82      	ldr	r3, [pc, #520]	; (80085a8 <_dtoa_r+0x628>)
 800839e:	2200      	movs	r2, #0
 80083a0:	f7f7 ff74 	bl	800028c <__adddf3>
 80083a4:	46d0      	mov	r8, sl
 80083a6:	46d9      	mov	r9, fp
 80083a8:	4682      	mov	sl, r0
 80083aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80083ae:	2e00      	cmp	r6, #0
 80083b0:	d158      	bne.n	8008464 <_dtoa_r+0x4e4>
 80083b2:	4b7e      	ldr	r3, [pc, #504]	; (80085ac <_dtoa_r+0x62c>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	4640      	mov	r0, r8
 80083b8:	4649      	mov	r1, r9
 80083ba:	f7f7 ff65 	bl	8000288 <__aeabi_dsub>
 80083be:	4652      	mov	r2, sl
 80083c0:	465b      	mov	r3, fp
 80083c2:	4680      	mov	r8, r0
 80083c4:	4689      	mov	r9, r1
 80083c6:	f7f8 fba7 	bl	8000b18 <__aeabi_dcmpgt>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	f040 8295 	bne.w	80088fa <_dtoa_r+0x97a>
 80083d0:	4652      	mov	r2, sl
 80083d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80083d6:	4640      	mov	r0, r8
 80083d8:	4649      	mov	r1, r9
 80083da:	f7f8 fb7f 	bl	8000adc <__aeabi_dcmplt>
 80083de:	2800      	cmp	r0, #0
 80083e0:	f040 8289 	bne.w	80088f6 <_dtoa_r+0x976>
 80083e4:	ec5b ab19 	vmov	sl, fp, d9
 80083e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f2c0 8148 	blt.w	8008680 <_dtoa_r+0x700>
 80083f0:	9a00      	ldr	r2, [sp, #0]
 80083f2:	2a0e      	cmp	r2, #14
 80083f4:	f300 8144 	bgt.w	8008680 <_dtoa_r+0x700>
 80083f8:	4b67      	ldr	r3, [pc, #412]	; (8008598 <_dtoa_r+0x618>)
 80083fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008404:	2b00      	cmp	r3, #0
 8008406:	f280 80d5 	bge.w	80085b4 <_dtoa_r+0x634>
 800840a:	9b03      	ldr	r3, [sp, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	f300 80d1 	bgt.w	80085b4 <_dtoa_r+0x634>
 8008412:	f040 826f 	bne.w	80088f4 <_dtoa_r+0x974>
 8008416:	4b65      	ldr	r3, [pc, #404]	; (80085ac <_dtoa_r+0x62c>)
 8008418:	2200      	movs	r2, #0
 800841a:	4640      	mov	r0, r8
 800841c:	4649      	mov	r1, r9
 800841e:	f7f8 f8eb 	bl	80005f8 <__aeabi_dmul>
 8008422:	4652      	mov	r2, sl
 8008424:	465b      	mov	r3, fp
 8008426:	f7f8 fb6d 	bl	8000b04 <__aeabi_dcmpge>
 800842a:	9e03      	ldr	r6, [sp, #12]
 800842c:	4637      	mov	r7, r6
 800842e:	2800      	cmp	r0, #0
 8008430:	f040 8245 	bne.w	80088be <_dtoa_r+0x93e>
 8008434:	9d01      	ldr	r5, [sp, #4]
 8008436:	2331      	movs	r3, #49	; 0x31
 8008438:	f805 3b01 	strb.w	r3, [r5], #1
 800843c:	9b00      	ldr	r3, [sp, #0]
 800843e:	3301      	adds	r3, #1
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	e240      	b.n	80088c6 <_dtoa_r+0x946>
 8008444:	07f2      	lsls	r2, r6, #31
 8008446:	d505      	bpl.n	8008454 <_dtoa_r+0x4d4>
 8008448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800844c:	f7f8 f8d4 	bl	80005f8 <__aeabi_dmul>
 8008450:	3501      	adds	r5, #1
 8008452:	2301      	movs	r3, #1
 8008454:	1076      	asrs	r6, r6, #1
 8008456:	3708      	adds	r7, #8
 8008458:	e777      	b.n	800834a <_dtoa_r+0x3ca>
 800845a:	2502      	movs	r5, #2
 800845c:	e779      	b.n	8008352 <_dtoa_r+0x3d2>
 800845e:	9f00      	ldr	r7, [sp, #0]
 8008460:	9e03      	ldr	r6, [sp, #12]
 8008462:	e794      	b.n	800838e <_dtoa_r+0x40e>
 8008464:	9901      	ldr	r1, [sp, #4]
 8008466:	4b4c      	ldr	r3, [pc, #304]	; (8008598 <_dtoa_r+0x618>)
 8008468:	4431      	add	r1, r6
 800846a:	910d      	str	r1, [sp, #52]	; 0x34
 800846c:	9908      	ldr	r1, [sp, #32]
 800846e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008472:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008476:	2900      	cmp	r1, #0
 8008478:	d043      	beq.n	8008502 <_dtoa_r+0x582>
 800847a:	494d      	ldr	r1, [pc, #308]	; (80085b0 <_dtoa_r+0x630>)
 800847c:	2000      	movs	r0, #0
 800847e:	f7f8 f9e5 	bl	800084c <__aeabi_ddiv>
 8008482:	4652      	mov	r2, sl
 8008484:	465b      	mov	r3, fp
 8008486:	f7f7 feff 	bl	8000288 <__aeabi_dsub>
 800848a:	9d01      	ldr	r5, [sp, #4]
 800848c:	4682      	mov	sl, r0
 800848e:	468b      	mov	fp, r1
 8008490:	4649      	mov	r1, r9
 8008492:	4640      	mov	r0, r8
 8008494:	f7f8 fb60 	bl	8000b58 <__aeabi_d2iz>
 8008498:	4606      	mov	r6, r0
 800849a:	f7f8 f843 	bl	8000524 <__aeabi_i2d>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4640      	mov	r0, r8
 80084a4:	4649      	mov	r1, r9
 80084a6:	f7f7 feef 	bl	8000288 <__aeabi_dsub>
 80084aa:	3630      	adds	r6, #48	; 0x30
 80084ac:	f805 6b01 	strb.w	r6, [r5], #1
 80084b0:	4652      	mov	r2, sl
 80084b2:	465b      	mov	r3, fp
 80084b4:	4680      	mov	r8, r0
 80084b6:	4689      	mov	r9, r1
 80084b8:	f7f8 fb10 	bl	8000adc <__aeabi_dcmplt>
 80084bc:	2800      	cmp	r0, #0
 80084be:	d163      	bne.n	8008588 <_dtoa_r+0x608>
 80084c0:	4642      	mov	r2, r8
 80084c2:	464b      	mov	r3, r9
 80084c4:	4936      	ldr	r1, [pc, #216]	; (80085a0 <_dtoa_r+0x620>)
 80084c6:	2000      	movs	r0, #0
 80084c8:	f7f7 fede 	bl	8000288 <__aeabi_dsub>
 80084cc:	4652      	mov	r2, sl
 80084ce:	465b      	mov	r3, fp
 80084d0:	f7f8 fb04 	bl	8000adc <__aeabi_dcmplt>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	f040 80b5 	bne.w	8008644 <_dtoa_r+0x6c4>
 80084da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084dc:	429d      	cmp	r5, r3
 80084de:	d081      	beq.n	80083e4 <_dtoa_r+0x464>
 80084e0:	4b30      	ldr	r3, [pc, #192]	; (80085a4 <_dtoa_r+0x624>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	4650      	mov	r0, sl
 80084e6:	4659      	mov	r1, fp
 80084e8:	f7f8 f886 	bl	80005f8 <__aeabi_dmul>
 80084ec:	4b2d      	ldr	r3, [pc, #180]	; (80085a4 <_dtoa_r+0x624>)
 80084ee:	4682      	mov	sl, r0
 80084f0:	468b      	mov	fp, r1
 80084f2:	4640      	mov	r0, r8
 80084f4:	4649      	mov	r1, r9
 80084f6:	2200      	movs	r2, #0
 80084f8:	f7f8 f87e 	bl	80005f8 <__aeabi_dmul>
 80084fc:	4680      	mov	r8, r0
 80084fe:	4689      	mov	r9, r1
 8008500:	e7c6      	b.n	8008490 <_dtoa_r+0x510>
 8008502:	4650      	mov	r0, sl
 8008504:	4659      	mov	r1, fp
 8008506:	f7f8 f877 	bl	80005f8 <__aeabi_dmul>
 800850a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800850c:	9d01      	ldr	r5, [sp, #4]
 800850e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008510:	4682      	mov	sl, r0
 8008512:	468b      	mov	fp, r1
 8008514:	4649      	mov	r1, r9
 8008516:	4640      	mov	r0, r8
 8008518:	f7f8 fb1e 	bl	8000b58 <__aeabi_d2iz>
 800851c:	4606      	mov	r6, r0
 800851e:	f7f8 f801 	bl	8000524 <__aeabi_i2d>
 8008522:	3630      	adds	r6, #48	; 0x30
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	4640      	mov	r0, r8
 800852a:	4649      	mov	r1, r9
 800852c:	f7f7 feac 	bl	8000288 <__aeabi_dsub>
 8008530:	f805 6b01 	strb.w	r6, [r5], #1
 8008534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008536:	429d      	cmp	r5, r3
 8008538:	4680      	mov	r8, r0
 800853a:	4689      	mov	r9, r1
 800853c:	f04f 0200 	mov.w	r2, #0
 8008540:	d124      	bne.n	800858c <_dtoa_r+0x60c>
 8008542:	4b1b      	ldr	r3, [pc, #108]	; (80085b0 <_dtoa_r+0x630>)
 8008544:	4650      	mov	r0, sl
 8008546:	4659      	mov	r1, fp
 8008548:	f7f7 fea0 	bl	800028c <__adddf3>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4640      	mov	r0, r8
 8008552:	4649      	mov	r1, r9
 8008554:	f7f8 fae0 	bl	8000b18 <__aeabi_dcmpgt>
 8008558:	2800      	cmp	r0, #0
 800855a:	d173      	bne.n	8008644 <_dtoa_r+0x6c4>
 800855c:	4652      	mov	r2, sl
 800855e:	465b      	mov	r3, fp
 8008560:	4913      	ldr	r1, [pc, #76]	; (80085b0 <_dtoa_r+0x630>)
 8008562:	2000      	movs	r0, #0
 8008564:	f7f7 fe90 	bl	8000288 <__aeabi_dsub>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4640      	mov	r0, r8
 800856e:	4649      	mov	r1, r9
 8008570:	f7f8 fab4 	bl	8000adc <__aeabi_dcmplt>
 8008574:	2800      	cmp	r0, #0
 8008576:	f43f af35 	beq.w	80083e4 <_dtoa_r+0x464>
 800857a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800857c:	1e6b      	subs	r3, r5, #1
 800857e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008580:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008584:	2b30      	cmp	r3, #48	; 0x30
 8008586:	d0f8      	beq.n	800857a <_dtoa_r+0x5fa>
 8008588:	9700      	str	r7, [sp, #0]
 800858a:	e049      	b.n	8008620 <_dtoa_r+0x6a0>
 800858c:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <_dtoa_r+0x624>)
 800858e:	f7f8 f833 	bl	80005f8 <__aeabi_dmul>
 8008592:	4680      	mov	r8, r0
 8008594:	4689      	mov	r9, r1
 8008596:	e7bd      	b.n	8008514 <_dtoa_r+0x594>
 8008598:	0800aa08 	.word	0x0800aa08
 800859c:	0800a9e0 	.word	0x0800a9e0
 80085a0:	3ff00000 	.word	0x3ff00000
 80085a4:	40240000 	.word	0x40240000
 80085a8:	401c0000 	.word	0x401c0000
 80085ac:	40140000 	.word	0x40140000
 80085b0:	3fe00000 	.word	0x3fe00000
 80085b4:	9d01      	ldr	r5, [sp, #4]
 80085b6:	4656      	mov	r6, sl
 80085b8:	465f      	mov	r7, fp
 80085ba:	4642      	mov	r2, r8
 80085bc:	464b      	mov	r3, r9
 80085be:	4630      	mov	r0, r6
 80085c0:	4639      	mov	r1, r7
 80085c2:	f7f8 f943 	bl	800084c <__aeabi_ddiv>
 80085c6:	f7f8 fac7 	bl	8000b58 <__aeabi_d2iz>
 80085ca:	4682      	mov	sl, r0
 80085cc:	f7f7 ffaa 	bl	8000524 <__aeabi_i2d>
 80085d0:	4642      	mov	r2, r8
 80085d2:	464b      	mov	r3, r9
 80085d4:	f7f8 f810 	bl	80005f8 <__aeabi_dmul>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4630      	mov	r0, r6
 80085de:	4639      	mov	r1, r7
 80085e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80085e4:	f7f7 fe50 	bl	8000288 <__aeabi_dsub>
 80085e8:	f805 6b01 	strb.w	r6, [r5], #1
 80085ec:	9e01      	ldr	r6, [sp, #4]
 80085ee:	9f03      	ldr	r7, [sp, #12]
 80085f0:	1bae      	subs	r6, r5, r6
 80085f2:	42b7      	cmp	r7, r6
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	d135      	bne.n	8008666 <_dtoa_r+0x6e6>
 80085fa:	f7f7 fe47 	bl	800028c <__adddf3>
 80085fe:	4642      	mov	r2, r8
 8008600:	464b      	mov	r3, r9
 8008602:	4606      	mov	r6, r0
 8008604:	460f      	mov	r7, r1
 8008606:	f7f8 fa87 	bl	8000b18 <__aeabi_dcmpgt>
 800860a:	b9d0      	cbnz	r0, 8008642 <_dtoa_r+0x6c2>
 800860c:	4642      	mov	r2, r8
 800860e:	464b      	mov	r3, r9
 8008610:	4630      	mov	r0, r6
 8008612:	4639      	mov	r1, r7
 8008614:	f7f8 fa58 	bl	8000ac8 <__aeabi_dcmpeq>
 8008618:	b110      	cbz	r0, 8008620 <_dtoa_r+0x6a0>
 800861a:	f01a 0f01 	tst.w	sl, #1
 800861e:	d110      	bne.n	8008642 <_dtoa_r+0x6c2>
 8008620:	4620      	mov	r0, r4
 8008622:	ee18 1a10 	vmov	r1, s16
 8008626:	f000 fcf1 	bl	800900c <_Bfree>
 800862a:	2300      	movs	r3, #0
 800862c:	9800      	ldr	r0, [sp, #0]
 800862e:	702b      	strb	r3, [r5, #0]
 8008630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008632:	3001      	adds	r0, #1
 8008634:	6018      	str	r0, [r3, #0]
 8008636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008638:	2b00      	cmp	r3, #0
 800863a:	f43f acf1 	beq.w	8008020 <_dtoa_r+0xa0>
 800863e:	601d      	str	r5, [r3, #0]
 8008640:	e4ee      	b.n	8008020 <_dtoa_r+0xa0>
 8008642:	9f00      	ldr	r7, [sp, #0]
 8008644:	462b      	mov	r3, r5
 8008646:	461d      	mov	r5, r3
 8008648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800864c:	2a39      	cmp	r2, #57	; 0x39
 800864e:	d106      	bne.n	800865e <_dtoa_r+0x6de>
 8008650:	9a01      	ldr	r2, [sp, #4]
 8008652:	429a      	cmp	r2, r3
 8008654:	d1f7      	bne.n	8008646 <_dtoa_r+0x6c6>
 8008656:	9901      	ldr	r1, [sp, #4]
 8008658:	2230      	movs	r2, #48	; 0x30
 800865a:	3701      	adds	r7, #1
 800865c:	700a      	strb	r2, [r1, #0]
 800865e:	781a      	ldrb	r2, [r3, #0]
 8008660:	3201      	adds	r2, #1
 8008662:	701a      	strb	r2, [r3, #0]
 8008664:	e790      	b.n	8008588 <_dtoa_r+0x608>
 8008666:	4ba6      	ldr	r3, [pc, #664]	; (8008900 <_dtoa_r+0x980>)
 8008668:	2200      	movs	r2, #0
 800866a:	f7f7 ffc5 	bl	80005f8 <__aeabi_dmul>
 800866e:	2200      	movs	r2, #0
 8008670:	2300      	movs	r3, #0
 8008672:	4606      	mov	r6, r0
 8008674:	460f      	mov	r7, r1
 8008676:	f7f8 fa27 	bl	8000ac8 <__aeabi_dcmpeq>
 800867a:	2800      	cmp	r0, #0
 800867c:	d09d      	beq.n	80085ba <_dtoa_r+0x63a>
 800867e:	e7cf      	b.n	8008620 <_dtoa_r+0x6a0>
 8008680:	9a08      	ldr	r2, [sp, #32]
 8008682:	2a00      	cmp	r2, #0
 8008684:	f000 80d7 	beq.w	8008836 <_dtoa_r+0x8b6>
 8008688:	9a06      	ldr	r2, [sp, #24]
 800868a:	2a01      	cmp	r2, #1
 800868c:	f300 80ba 	bgt.w	8008804 <_dtoa_r+0x884>
 8008690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008692:	2a00      	cmp	r2, #0
 8008694:	f000 80b2 	beq.w	80087fc <_dtoa_r+0x87c>
 8008698:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800869c:	9e07      	ldr	r6, [sp, #28]
 800869e:	9d04      	ldr	r5, [sp, #16]
 80086a0:	9a04      	ldr	r2, [sp, #16]
 80086a2:	441a      	add	r2, r3
 80086a4:	9204      	str	r2, [sp, #16]
 80086a6:	9a05      	ldr	r2, [sp, #20]
 80086a8:	2101      	movs	r1, #1
 80086aa:	441a      	add	r2, r3
 80086ac:	4620      	mov	r0, r4
 80086ae:	9205      	str	r2, [sp, #20]
 80086b0:	f000 fd64 	bl	800917c <__i2b>
 80086b4:	4607      	mov	r7, r0
 80086b6:	2d00      	cmp	r5, #0
 80086b8:	dd0c      	ble.n	80086d4 <_dtoa_r+0x754>
 80086ba:	9b05      	ldr	r3, [sp, #20]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	dd09      	ble.n	80086d4 <_dtoa_r+0x754>
 80086c0:	42ab      	cmp	r3, r5
 80086c2:	9a04      	ldr	r2, [sp, #16]
 80086c4:	bfa8      	it	ge
 80086c6:	462b      	movge	r3, r5
 80086c8:	1ad2      	subs	r2, r2, r3
 80086ca:	9204      	str	r2, [sp, #16]
 80086cc:	9a05      	ldr	r2, [sp, #20]
 80086ce:	1aed      	subs	r5, r5, r3
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	9305      	str	r3, [sp, #20]
 80086d4:	9b07      	ldr	r3, [sp, #28]
 80086d6:	b31b      	cbz	r3, 8008720 <_dtoa_r+0x7a0>
 80086d8:	9b08      	ldr	r3, [sp, #32]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 80af 	beq.w	800883e <_dtoa_r+0x8be>
 80086e0:	2e00      	cmp	r6, #0
 80086e2:	dd13      	ble.n	800870c <_dtoa_r+0x78c>
 80086e4:	4639      	mov	r1, r7
 80086e6:	4632      	mov	r2, r6
 80086e8:	4620      	mov	r0, r4
 80086ea:	f000 fe07 	bl	80092fc <__pow5mult>
 80086ee:	ee18 2a10 	vmov	r2, s16
 80086f2:	4601      	mov	r1, r0
 80086f4:	4607      	mov	r7, r0
 80086f6:	4620      	mov	r0, r4
 80086f8:	f000 fd56 	bl	80091a8 <__multiply>
 80086fc:	ee18 1a10 	vmov	r1, s16
 8008700:	4680      	mov	r8, r0
 8008702:	4620      	mov	r0, r4
 8008704:	f000 fc82 	bl	800900c <_Bfree>
 8008708:	ee08 8a10 	vmov	s16, r8
 800870c:	9b07      	ldr	r3, [sp, #28]
 800870e:	1b9a      	subs	r2, r3, r6
 8008710:	d006      	beq.n	8008720 <_dtoa_r+0x7a0>
 8008712:	ee18 1a10 	vmov	r1, s16
 8008716:	4620      	mov	r0, r4
 8008718:	f000 fdf0 	bl	80092fc <__pow5mult>
 800871c:	ee08 0a10 	vmov	s16, r0
 8008720:	2101      	movs	r1, #1
 8008722:	4620      	mov	r0, r4
 8008724:	f000 fd2a 	bl	800917c <__i2b>
 8008728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800872a:	2b00      	cmp	r3, #0
 800872c:	4606      	mov	r6, r0
 800872e:	f340 8088 	ble.w	8008842 <_dtoa_r+0x8c2>
 8008732:	461a      	mov	r2, r3
 8008734:	4601      	mov	r1, r0
 8008736:	4620      	mov	r0, r4
 8008738:	f000 fde0 	bl	80092fc <__pow5mult>
 800873c:	9b06      	ldr	r3, [sp, #24]
 800873e:	2b01      	cmp	r3, #1
 8008740:	4606      	mov	r6, r0
 8008742:	f340 8081 	ble.w	8008848 <_dtoa_r+0x8c8>
 8008746:	f04f 0800 	mov.w	r8, #0
 800874a:	6933      	ldr	r3, [r6, #16]
 800874c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008750:	6918      	ldr	r0, [r3, #16]
 8008752:	f000 fcc3 	bl	80090dc <__hi0bits>
 8008756:	f1c0 0020 	rsb	r0, r0, #32
 800875a:	9b05      	ldr	r3, [sp, #20]
 800875c:	4418      	add	r0, r3
 800875e:	f010 001f 	ands.w	r0, r0, #31
 8008762:	f000 8092 	beq.w	800888a <_dtoa_r+0x90a>
 8008766:	f1c0 0320 	rsb	r3, r0, #32
 800876a:	2b04      	cmp	r3, #4
 800876c:	f340 808a 	ble.w	8008884 <_dtoa_r+0x904>
 8008770:	f1c0 001c 	rsb	r0, r0, #28
 8008774:	9b04      	ldr	r3, [sp, #16]
 8008776:	4403      	add	r3, r0
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	9b05      	ldr	r3, [sp, #20]
 800877c:	4403      	add	r3, r0
 800877e:	4405      	add	r5, r0
 8008780:	9305      	str	r3, [sp, #20]
 8008782:	9b04      	ldr	r3, [sp, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	dd07      	ble.n	8008798 <_dtoa_r+0x818>
 8008788:	ee18 1a10 	vmov	r1, s16
 800878c:	461a      	mov	r2, r3
 800878e:	4620      	mov	r0, r4
 8008790:	f000 fe0e 	bl	80093b0 <__lshift>
 8008794:	ee08 0a10 	vmov	s16, r0
 8008798:	9b05      	ldr	r3, [sp, #20]
 800879a:	2b00      	cmp	r3, #0
 800879c:	dd05      	ble.n	80087aa <_dtoa_r+0x82a>
 800879e:	4631      	mov	r1, r6
 80087a0:	461a      	mov	r2, r3
 80087a2:	4620      	mov	r0, r4
 80087a4:	f000 fe04 	bl	80093b0 <__lshift>
 80087a8:	4606      	mov	r6, r0
 80087aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d06e      	beq.n	800888e <_dtoa_r+0x90e>
 80087b0:	ee18 0a10 	vmov	r0, s16
 80087b4:	4631      	mov	r1, r6
 80087b6:	f000 fe6b 	bl	8009490 <__mcmp>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	da67      	bge.n	800888e <_dtoa_r+0x90e>
 80087be:	9b00      	ldr	r3, [sp, #0]
 80087c0:	3b01      	subs	r3, #1
 80087c2:	ee18 1a10 	vmov	r1, s16
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	220a      	movs	r2, #10
 80087ca:	2300      	movs	r3, #0
 80087cc:	4620      	mov	r0, r4
 80087ce:	f000 fc3f 	bl	8009050 <__multadd>
 80087d2:	9b08      	ldr	r3, [sp, #32]
 80087d4:	ee08 0a10 	vmov	s16, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 81b1 	beq.w	8008b40 <_dtoa_r+0xbc0>
 80087de:	2300      	movs	r3, #0
 80087e0:	4639      	mov	r1, r7
 80087e2:	220a      	movs	r2, #10
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 fc33 	bl	8009050 <__multadd>
 80087ea:	9b02      	ldr	r3, [sp, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	4607      	mov	r7, r0
 80087f0:	f300 808e 	bgt.w	8008910 <_dtoa_r+0x990>
 80087f4:	9b06      	ldr	r3, [sp, #24]
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	dc51      	bgt.n	800889e <_dtoa_r+0x91e>
 80087fa:	e089      	b.n	8008910 <_dtoa_r+0x990>
 80087fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008802:	e74b      	b.n	800869c <_dtoa_r+0x71c>
 8008804:	9b03      	ldr	r3, [sp, #12]
 8008806:	1e5e      	subs	r6, r3, #1
 8008808:	9b07      	ldr	r3, [sp, #28]
 800880a:	42b3      	cmp	r3, r6
 800880c:	bfbf      	itttt	lt
 800880e:	9b07      	ldrlt	r3, [sp, #28]
 8008810:	9607      	strlt	r6, [sp, #28]
 8008812:	1af2      	sublt	r2, r6, r3
 8008814:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008816:	bfb6      	itet	lt
 8008818:	189b      	addlt	r3, r3, r2
 800881a:	1b9e      	subge	r6, r3, r6
 800881c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	bfb8      	it	lt
 8008822:	2600      	movlt	r6, #0
 8008824:	2b00      	cmp	r3, #0
 8008826:	bfb7      	itett	lt
 8008828:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800882c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008830:	1a9d      	sublt	r5, r3, r2
 8008832:	2300      	movlt	r3, #0
 8008834:	e734      	b.n	80086a0 <_dtoa_r+0x720>
 8008836:	9e07      	ldr	r6, [sp, #28]
 8008838:	9d04      	ldr	r5, [sp, #16]
 800883a:	9f08      	ldr	r7, [sp, #32]
 800883c:	e73b      	b.n	80086b6 <_dtoa_r+0x736>
 800883e:	9a07      	ldr	r2, [sp, #28]
 8008840:	e767      	b.n	8008712 <_dtoa_r+0x792>
 8008842:	9b06      	ldr	r3, [sp, #24]
 8008844:	2b01      	cmp	r3, #1
 8008846:	dc18      	bgt.n	800887a <_dtoa_r+0x8fa>
 8008848:	f1ba 0f00 	cmp.w	sl, #0
 800884c:	d115      	bne.n	800887a <_dtoa_r+0x8fa>
 800884e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008852:	b993      	cbnz	r3, 800887a <_dtoa_r+0x8fa>
 8008854:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008858:	0d1b      	lsrs	r3, r3, #20
 800885a:	051b      	lsls	r3, r3, #20
 800885c:	b183      	cbz	r3, 8008880 <_dtoa_r+0x900>
 800885e:	9b04      	ldr	r3, [sp, #16]
 8008860:	3301      	adds	r3, #1
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	9b05      	ldr	r3, [sp, #20]
 8008866:	3301      	adds	r3, #1
 8008868:	9305      	str	r3, [sp, #20]
 800886a:	f04f 0801 	mov.w	r8, #1
 800886e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008870:	2b00      	cmp	r3, #0
 8008872:	f47f af6a 	bne.w	800874a <_dtoa_r+0x7ca>
 8008876:	2001      	movs	r0, #1
 8008878:	e76f      	b.n	800875a <_dtoa_r+0x7da>
 800887a:	f04f 0800 	mov.w	r8, #0
 800887e:	e7f6      	b.n	800886e <_dtoa_r+0x8ee>
 8008880:	4698      	mov	r8, r3
 8008882:	e7f4      	b.n	800886e <_dtoa_r+0x8ee>
 8008884:	f43f af7d 	beq.w	8008782 <_dtoa_r+0x802>
 8008888:	4618      	mov	r0, r3
 800888a:	301c      	adds	r0, #28
 800888c:	e772      	b.n	8008774 <_dtoa_r+0x7f4>
 800888e:	9b03      	ldr	r3, [sp, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	dc37      	bgt.n	8008904 <_dtoa_r+0x984>
 8008894:	9b06      	ldr	r3, [sp, #24]
 8008896:	2b02      	cmp	r3, #2
 8008898:	dd34      	ble.n	8008904 <_dtoa_r+0x984>
 800889a:	9b03      	ldr	r3, [sp, #12]
 800889c:	9302      	str	r3, [sp, #8]
 800889e:	9b02      	ldr	r3, [sp, #8]
 80088a0:	b96b      	cbnz	r3, 80088be <_dtoa_r+0x93e>
 80088a2:	4631      	mov	r1, r6
 80088a4:	2205      	movs	r2, #5
 80088a6:	4620      	mov	r0, r4
 80088a8:	f000 fbd2 	bl	8009050 <__multadd>
 80088ac:	4601      	mov	r1, r0
 80088ae:	4606      	mov	r6, r0
 80088b0:	ee18 0a10 	vmov	r0, s16
 80088b4:	f000 fdec 	bl	8009490 <__mcmp>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	f73f adbb 	bgt.w	8008434 <_dtoa_r+0x4b4>
 80088be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c0:	9d01      	ldr	r5, [sp, #4]
 80088c2:	43db      	mvns	r3, r3
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	f04f 0800 	mov.w	r8, #0
 80088ca:	4631      	mov	r1, r6
 80088cc:	4620      	mov	r0, r4
 80088ce:	f000 fb9d 	bl	800900c <_Bfree>
 80088d2:	2f00      	cmp	r7, #0
 80088d4:	f43f aea4 	beq.w	8008620 <_dtoa_r+0x6a0>
 80088d8:	f1b8 0f00 	cmp.w	r8, #0
 80088dc:	d005      	beq.n	80088ea <_dtoa_r+0x96a>
 80088de:	45b8      	cmp	r8, r7
 80088e0:	d003      	beq.n	80088ea <_dtoa_r+0x96a>
 80088e2:	4641      	mov	r1, r8
 80088e4:	4620      	mov	r0, r4
 80088e6:	f000 fb91 	bl	800900c <_Bfree>
 80088ea:	4639      	mov	r1, r7
 80088ec:	4620      	mov	r0, r4
 80088ee:	f000 fb8d 	bl	800900c <_Bfree>
 80088f2:	e695      	b.n	8008620 <_dtoa_r+0x6a0>
 80088f4:	2600      	movs	r6, #0
 80088f6:	4637      	mov	r7, r6
 80088f8:	e7e1      	b.n	80088be <_dtoa_r+0x93e>
 80088fa:	9700      	str	r7, [sp, #0]
 80088fc:	4637      	mov	r7, r6
 80088fe:	e599      	b.n	8008434 <_dtoa_r+0x4b4>
 8008900:	40240000 	.word	0x40240000
 8008904:	9b08      	ldr	r3, [sp, #32]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 80ca 	beq.w	8008aa0 <_dtoa_r+0xb20>
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	9302      	str	r3, [sp, #8]
 8008910:	2d00      	cmp	r5, #0
 8008912:	dd05      	ble.n	8008920 <_dtoa_r+0x9a0>
 8008914:	4639      	mov	r1, r7
 8008916:	462a      	mov	r2, r5
 8008918:	4620      	mov	r0, r4
 800891a:	f000 fd49 	bl	80093b0 <__lshift>
 800891e:	4607      	mov	r7, r0
 8008920:	f1b8 0f00 	cmp.w	r8, #0
 8008924:	d05b      	beq.n	80089de <_dtoa_r+0xa5e>
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	4620      	mov	r0, r4
 800892a:	f000 fb2f 	bl	8008f8c <_Balloc>
 800892e:	4605      	mov	r5, r0
 8008930:	b928      	cbnz	r0, 800893e <_dtoa_r+0x9be>
 8008932:	4b87      	ldr	r3, [pc, #540]	; (8008b50 <_dtoa_r+0xbd0>)
 8008934:	4602      	mov	r2, r0
 8008936:	f240 21ea 	movw	r1, #746	; 0x2ea
 800893a:	f7ff bb3b 	b.w	8007fb4 <_dtoa_r+0x34>
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	3202      	adds	r2, #2
 8008942:	0092      	lsls	r2, r2, #2
 8008944:	f107 010c 	add.w	r1, r7, #12
 8008948:	300c      	adds	r0, #12
 800894a:	f000 fb04 	bl	8008f56 <memcpy>
 800894e:	2201      	movs	r2, #1
 8008950:	4629      	mov	r1, r5
 8008952:	4620      	mov	r0, r4
 8008954:	f000 fd2c 	bl	80093b0 <__lshift>
 8008958:	9b01      	ldr	r3, [sp, #4]
 800895a:	f103 0901 	add.w	r9, r3, #1
 800895e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008962:	4413      	add	r3, r2
 8008964:	9305      	str	r3, [sp, #20]
 8008966:	f00a 0301 	and.w	r3, sl, #1
 800896a:	46b8      	mov	r8, r7
 800896c:	9304      	str	r3, [sp, #16]
 800896e:	4607      	mov	r7, r0
 8008970:	4631      	mov	r1, r6
 8008972:	ee18 0a10 	vmov	r0, s16
 8008976:	f7ff fa77 	bl	8007e68 <quorem>
 800897a:	4641      	mov	r1, r8
 800897c:	9002      	str	r0, [sp, #8]
 800897e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008982:	ee18 0a10 	vmov	r0, s16
 8008986:	f000 fd83 	bl	8009490 <__mcmp>
 800898a:	463a      	mov	r2, r7
 800898c:	9003      	str	r0, [sp, #12]
 800898e:	4631      	mov	r1, r6
 8008990:	4620      	mov	r0, r4
 8008992:	f000 fd99 	bl	80094c8 <__mdiff>
 8008996:	68c2      	ldr	r2, [r0, #12]
 8008998:	f109 3bff 	add.w	fp, r9, #4294967295
 800899c:	4605      	mov	r5, r0
 800899e:	bb02      	cbnz	r2, 80089e2 <_dtoa_r+0xa62>
 80089a0:	4601      	mov	r1, r0
 80089a2:	ee18 0a10 	vmov	r0, s16
 80089a6:	f000 fd73 	bl	8009490 <__mcmp>
 80089aa:	4602      	mov	r2, r0
 80089ac:	4629      	mov	r1, r5
 80089ae:	4620      	mov	r0, r4
 80089b0:	9207      	str	r2, [sp, #28]
 80089b2:	f000 fb2b 	bl	800900c <_Bfree>
 80089b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80089ba:	ea43 0102 	orr.w	r1, r3, r2
 80089be:	9b04      	ldr	r3, [sp, #16]
 80089c0:	430b      	orrs	r3, r1
 80089c2:	464d      	mov	r5, r9
 80089c4:	d10f      	bne.n	80089e6 <_dtoa_r+0xa66>
 80089c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089ca:	d02a      	beq.n	8008a22 <_dtoa_r+0xaa2>
 80089cc:	9b03      	ldr	r3, [sp, #12]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	dd02      	ble.n	80089d8 <_dtoa_r+0xa58>
 80089d2:	9b02      	ldr	r3, [sp, #8]
 80089d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80089d8:	f88b a000 	strb.w	sl, [fp]
 80089dc:	e775      	b.n	80088ca <_dtoa_r+0x94a>
 80089de:	4638      	mov	r0, r7
 80089e0:	e7ba      	b.n	8008958 <_dtoa_r+0x9d8>
 80089e2:	2201      	movs	r2, #1
 80089e4:	e7e2      	b.n	80089ac <_dtoa_r+0xa2c>
 80089e6:	9b03      	ldr	r3, [sp, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	db04      	blt.n	80089f6 <_dtoa_r+0xa76>
 80089ec:	9906      	ldr	r1, [sp, #24]
 80089ee:	430b      	orrs	r3, r1
 80089f0:	9904      	ldr	r1, [sp, #16]
 80089f2:	430b      	orrs	r3, r1
 80089f4:	d122      	bne.n	8008a3c <_dtoa_r+0xabc>
 80089f6:	2a00      	cmp	r2, #0
 80089f8:	ddee      	ble.n	80089d8 <_dtoa_r+0xa58>
 80089fa:	ee18 1a10 	vmov	r1, s16
 80089fe:	2201      	movs	r2, #1
 8008a00:	4620      	mov	r0, r4
 8008a02:	f000 fcd5 	bl	80093b0 <__lshift>
 8008a06:	4631      	mov	r1, r6
 8008a08:	ee08 0a10 	vmov	s16, r0
 8008a0c:	f000 fd40 	bl	8009490 <__mcmp>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	dc03      	bgt.n	8008a1c <_dtoa_r+0xa9c>
 8008a14:	d1e0      	bne.n	80089d8 <_dtoa_r+0xa58>
 8008a16:	f01a 0f01 	tst.w	sl, #1
 8008a1a:	d0dd      	beq.n	80089d8 <_dtoa_r+0xa58>
 8008a1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a20:	d1d7      	bne.n	80089d2 <_dtoa_r+0xa52>
 8008a22:	2339      	movs	r3, #57	; 0x39
 8008a24:	f88b 3000 	strb.w	r3, [fp]
 8008a28:	462b      	mov	r3, r5
 8008a2a:	461d      	mov	r5, r3
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a32:	2a39      	cmp	r2, #57	; 0x39
 8008a34:	d071      	beq.n	8008b1a <_dtoa_r+0xb9a>
 8008a36:	3201      	adds	r2, #1
 8008a38:	701a      	strb	r2, [r3, #0]
 8008a3a:	e746      	b.n	80088ca <_dtoa_r+0x94a>
 8008a3c:	2a00      	cmp	r2, #0
 8008a3e:	dd07      	ble.n	8008a50 <_dtoa_r+0xad0>
 8008a40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a44:	d0ed      	beq.n	8008a22 <_dtoa_r+0xaa2>
 8008a46:	f10a 0301 	add.w	r3, sl, #1
 8008a4a:	f88b 3000 	strb.w	r3, [fp]
 8008a4e:	e73c      	b.n	80088ca <_dtoa_r+0x94a>
 8008a50:	9b05      	ldr	r3, [sp, #20]
 8008a52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008a56:	4599      	cmp	r9, r3
 8008a58:	d047      	beq.n	8008aea <_dtoa_r+0xb6a>
 8008a5a:	ee18 1a10 	vmov	r1, s16
 8008a5e:	2300      	movs	r3, #0
 8008a60:	220a      	movs	r2, #10
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 faf4 	bl	8009050 <__multadd>
 8008a68:	45b8      	cmp	r8, r7
 8008a6a:	ee08 0a10 	vmov	s16, r0
 8008a6e:	f04f 0300 	mov.w	r3, #0
 8008a72:	f04f 020a 	mov.w	r2, #10
 8008a76:	4641      	mov	r1, r8
 8008a78:	4620      	mov	r0, r4
 8008a7a:	d106      	bne.n	8008a8a <_dtoa_r+0xb0a>
 8008a7c:	f000 fae8 	bl	8009050 <__multadd>
 8008a80:	4680      	mov	r8, r0
 8008a82:	4607      	mov	r7, r0
 8008a84:	f109 0901 	add.w	r9, r9, #1
 8008a88:	e772      	b.n	8008970 <_dtoa_r+0x9f0>
 8008a8a:	f000 fae1 	bl	8009050 <__multadd>
 8008a8e:	4639      	mov	r1, r7
 8008a90:	4680      	mov	r8, r0
 8008a92:	2300      	movs	r3, #0
 8008a94:	220a      	movs	r2, #10
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 fada 	bl	8009050 <__multadd>
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	e7f1      	b.n	8008a84 <_dtoa_r+0xb04>
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	9302      	str	r3, [sp, #8]
 8008aa4:	9d01      	ldr	r5, [sp, #4]
 8008aa6:	ee18 0a10 	vmov	r0, s16
 8008aaa:	4631      	mov	r1, r6
 8008aac:	f7ff f9dc 	bl	8007e68 <quorem>
 8008ab0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008ab4:	9b01      	ldr	r3, [sp, #4]
 8008ab6:	f805 ab01 	strb.w	sl, [r5], #1
 8008aba:	1aea      	subs	r2, r5, r3
 8008abc:	9b02      	ldr	r3, [sp, #8]
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	dd09      	ble.n	8008ad6 <_dtoa_r+0xb56>
 8008ac2:	ee18 1a10 	vmov	r1, s16
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	220a      	movs	r2, #10
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 fac0 	bl	8009050 <__multadd>
 8008ad0:	ee08 0a10 	vmov	s16, r0
 8008ad4:	e7e7      	b.n	8008aa6 <_dtoa_r+0xb26>
 8008ad6:	9b02      	ldr	r3, [sp, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	bfc8      	it	gt
 8008adc:	461d      	movgt	r5, r3
 8008ade:	9b01      	ldr	r3, [sp, #4]
 8008ae0:	bfd8      	it	le
 8008ae2:	2501      	movle	r5, #1
 8008ae4:	441d      	add	r5, r3
 8008ae6:	f04f 0800 	mov.w	r8, #0
 8008aea:	ee18 1a10 	vmov	r1, s16
 8008aee:	2201      	movs	r2, #1
 8008af0:	4620      	mov	r0, r4
 8008af2:	f000 fc5d 	bl	80093b0 <__lshift>
 8008af6:	4631      	mov	r1, r6
 8008af8:	ee08 0a10 	vmov	s16, r0
 8008afc:	f000 fcc8 	bl	8009490 <__mcmp>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	dc91      	bgt.n	8008a28 <_dtoa_r+0xaa8>
 8008b04:	d102      	bne.n	8008b0c <_dtoa_r+0xb8c>
 8008b06:	f01a 0f01 	tst.w	sl, #1
 8008b0a:	d18d      	bne.n	8008a28 <_dtoa_r+0xaa8>
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	461d      	mov	r5, r3
 8008b10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b14:	2a30      	cmp	r2, #48	; 0x30
 8008b16:	d0fa      	beq.n	8008b0e <_dtoa_r+0xb8e>
 8008b18:	e6d7      	b.n	80088ca <_dtoa_r+0x94a>
 8008b1a:	9a01      	ldr	r2, [sp, #4]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d184      	bne.n	8008a2a <_dtoa_r+0xaaa>
 8008b20:	9b00      	ldr	r3, [sp, #0]
 8008b22:	3301      	adds	r3, #1
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	2331      	movs	r3, #49	; 0x31
 8008b28:	7013      	strb	r3, [r2, #0]
 8008b2a:	e6ce      	b.n	80088ca <_dtoa_r+0x94a>
 8008b2c:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <_dtoa_r+0xbd4>)
 8008b2e:	f7ff ba95 	b.w	800805c <_dtoa_r+0xdc>
 8008b32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f47f aa6e 	bne.w	8008016 <_dtoa_r+0x96>
 8008b3a:	4b07      	ldr	r3, [pc, #28]	; (8008b58 <_dtoa_r+0xbd8>)
 8008b3c:	f7ff ba8e 	b.w	800805c <_dtoa_r+0xdc>
 8008b40:	9b02      	ldr	r3, [sp, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	dcae      	bgt.n	8008aa4 <_dtoa_r+0xb24>
 8008b46:	9b06      	ldr	r3, [sp, #24]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	f73f aea8 	bgt.w	800889e <_dtoa_r+0x91e>
 8008b4e:	e7a9      	b.n	8008aa4 <_dtoa_r+0xb24>
 8008b50:	0800a911 	.word	0x0800a911
 8008b54:	0800a1d8 	.word	0x0800a1d8
 8008b58:	0800a892 	.word	0x0800a892

08008b5c <__sflush_r>:
 8008b5c:	898a      	ldrh	r2, [r1, #12]
 8008b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b62:	4605      	mov	r5, r0
 8008b64:	0710      	lsls	r0, r2, #28
 8008b66:	460c      	mov	r4, r1
 8008b68:	d458      	bmi.n	8008c1c <__sflush_r+0xc0>
 8008b6a:	684b      	ldr	r3, [r1, #4]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dc05      	bgt.n	8008b7c <__sflush_r+0x20>
 8008b70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	dc02      	bgt.n	8008b7c <__sflush_r+0x20>
 8008b76:	2000      	movs	r0, #0
 8008b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b7e:	2e00      	cmp	r6, #0
 8008b80:	d0f9      	beq.n	8008b76 <__sflush_r+0x1a>
 8008b82:	2300      	movs	r3, #0
 8008b84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b88:	682f      	ldr	r7, [r5, #0]
 8008b8a:	602b      	str	r3, [r5, #0]
 8008b8c:	d032      	beq.n	8008bf4 <__sflush_r+0x98>
 8008b8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	075a      	lsls	r2, r3, #29
 8008b94:	d505      	bpl.n	8008ba2 <__sflush_r+0x46>
 8008b96:	6863      	ldr	r3, [r4, #4]
 8008b98:	1ac0      	subs	r0, r0, r3
 8008b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b9c:	b10b      	cbz	r3, 8008ba2 <__sflush_r+0x46>
 8008b9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ba0:	1ac0      	subs	r0, r0, r3
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ba8:	6a21      	ldr	r1, [r4, #32]
 8008baa:	4628      	mov	r0, r5
 8008bac:	47b0      	blx	r6
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	d106      	bne.n	8008bc2 <__sflush_r+0x66>
 8008bb4:	6829      	ldr	r1, [r5, #0]
 8008bb6:	291d      	cmp	r1, #29
 8008bb8:	d82c      	bhi.n	8008c14 <__sflush_r+0xb8>
 8008bba:	4a2a      	ldr	r2, [pc, #168]	; (8008c64 <__sflush_r+0x108>)
 8008bbc:	40ca      	lsrs	r2, r1
 8008bbe:	07d6      	lsls	r6, r2, #31
 8008bc0:	d528      	bpl.n	8008c14 <__sflush_r+0xb8>
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	6062      	str	r2, [r4, #4]
 8008bc6:	04d9      	lsls	r1, r3, #19
 8008bc8:	6922      	ldr	r2, [r4, #16]
 8008bca:	6022      	str	r2, [r4, #0]
 8008bcc:	d504      	bpl.n	8008bd8 <__sflush_r+0x7c>
 8008bce:	1c42      	adds	r2, r0, #1
 8008bd0:	d101      	bne.n	8008bd6 <__sflush_r+0x7a>
 8008bd2:	682b      	ldr	r3, [r5, #0]
 8008bd4:	b903      	cbnz	r3, 8008bd8 <__sflush_r+0x7c>
 8008bd6:	6560      	str	r0, [r4, #84]	; 0x54
 8008bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bda:	602f      	str	r7, [r5, #0]
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	d0ca      	beq.n	8008b76 <__sflush_r+0x1a>
 8008be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008be4:	4299      	cmp	r1, r3
 8008be6:	d002      	beq.n	8008bee <__sflush_r+0x92>
 8008be8:	4628      	mov	r0, r5
 8008bea:	f7fe f8e3 	bl	8006db4 <_free_r>
 8008bee:	2000      	movs	r0, #0
 8008bf0:	6360      	str	r0, [r4, #52]	; 0x34
 8008bf2:	e7c1      	b.n	8008b78 <__sflush_r+0x1c>
 8008bf4:	6a21      	ldr	r1, [r4, #32]
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	47b0      	blx	r6
 8008bfc:	1c41      	adds	r1, r0, #1
 8008bfe:	d1c7      	bne.n	8008b90 <__sflush_r+0x34>
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0c4      	beq.n	8008b90 <__sflush_r+0x34>
 8008c06:	2b1d      	cmp	r3, #29
 8008c08:	d001      	beq.n	8008c0e <__sflush_r+0xb2>
 8008c0a:	2b16      	cmp	r3, #22
 8008c0c:	d101      	bne.n	8008c12 <__sflush_r+0xb6>
 8008c0e:	602f      	str	r7, [r5, #0]
 8008c10:	e7b1      	b.n	8008b76 <__sflush_r+0x1a>
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c18:	81a3      	strh	r3, [r4, #12]
 8008c1a:	e7ad      	b.n	8008b78 <__sflush_r+0x1c>
 8008c1c:	690f      	ldr	r7, [r1, #16]
 8008c1e:	2f00      	cmp	r7, #0
 8008c20:	d0a9      	beq.n	8008b76 <__sflush_r+0x1a>
 8008c22:	0793      	lsls	r3, r2, #30
 8008c24:	680e      	ldr	r6, [r1, #0]
 8008c26:	bf08      	it	eq
 8008c28:	694b      	ldreq	r3, [r1, #20]
 8008c2a:	600f      	str	r7, [r1, #0]
 8008c2c:	bf18      	it	ne
 8008c2e:	2300      	movne	r3, #0
 8008c30:	eba6 0807 	sub.w	r8, r6, r7
 8008c34:	608b      	str	r3, [r1, #8]
 8008c36:	f1b8 0f00 	cmp.w	r8, #0
 8008c3a:	dd9c      	ble.n	8008b76 <__sflush_r+0x1a>
 8008c3c:	6a21      	ldr	r1, [r4, #32]
 8008c3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c40:	4643      	mov	r3, r8
 8008c42:	463a      	mov	r2, r7
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b0      	blx	r6
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	dc06      	bgt.n	8008c5a <__sflush_r+0xfe>
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c52:	81a3      	strh	r3, [r4, #12]
 8008c54:	f04f 30ff 	mov.w	r0, #4294967295
 8008c58:	e78e      	b.n	8008b78 <__sflush_r+0x1c>
 8008c5a:	4407      	add	r7, r0
 8008c5c:	eba8 0800 	sub.w	r8, r8, r0
 8008c60:	e7e9      	b.n	8008c36 <__sflush_r+0xda>
 8008c62:	bf00      	nop
 8008c64:	20400001 	.word	0x20400001

08008c68 <_fflush_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	690b      	ldr	r3, [r1, #16]
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	460c      	mov	r4, r1
 8008c70:	b913      	cbnz	r3, 8008c78 <_fflush_r+0x10>
 8008c72:	2500      	movs	r5, #0
 8008c74:	4628      	mov	r0, r5
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	b118      	cbz	r0, 8008c82 <_fflush_r+0x1a>
 8008c7a:	6983      	ldr	r3, [r0, #24]
 8008c7c:	b90b      	cbnz	r3, 8008c82 <_fflush_r+0x1a>
 8008c7e:	f000 f8c5 	bl	8008e0c <__sinit>
 8008c82:	4b14      	ldr	r3, [pc, #80]	; (8008cd4 <_fflush_r+0x6c>)
 8008c84:	429c      	cmp	r4, r3
 8008c86:	d11b      	bne.n	8008cc0 <_fflush_r+0x58>
 8008c88:	686c      	ldr	r4, [r5, #4]
 8008c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0ef      	beq.n	8008c72 <_fflush_r+0xa>
 8008c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c94:	07d0      	lsls	r0, r2, #31
 8008c96:	d404      	bmi.n	8008ca2 <_fflush_r+0x3a>
 8008c98:	0599      	lsls	r1, r3, #22
 8008c9a:	d402      	bmi.n	8008ca2 <_fflush_r+0x3a>
 8008c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c9e:	f000 f958 	bl	8008f52 <__retarget_lock_acquire_recursive>
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	f7ff ff59 	bl	8008b5c <__sflush_r>
 8008caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cac:	07da      	lsls	r2, r3, #31
 8008cae:	4605      	mov	r5, r0
 8008cb0:	d4e0      	bmi.n	8008c74 <_fflush_r+0xc>
 8008cb2:	89a3      	ldrh	r3, [r4, #12]
 8008cb4:	059b      	lsls	r3, r3, #22
 8008cb6:	d4dd      	bmi.n	8008c74 <_fflush_r+0xc>
 8008cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cba:	f000 f94b 	bl	8008f54 <__retarget_lock_release_recursive>
 8008cbe:	e7d9      	b.n	8008c74 <_fflush_r+0xc>
 8008cc0:	4b05      	ldr	r3, [pc, #20]	; (8008cd8 <_fflush_r+0x70>)
 8008cc2:	429c      	cmp	r4, r3
 8008cc4:	d101      	bne.n	8008cca <_fflush_r+0x62>
 8008cc6:	68ac      	ldr	r4, [r5, #8]
 8008cc8:	e7df      	b.n	8008c8a <_fflush_r+0x22>
 8008cca:	4b04      	ldr	r3, [pc, #16]	; (8008cdc <_fflush_r+0x74>)
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	bf08      	it	eq
 8008cd0:	68ec      	ldreq	r4, [r5, #12]
 8008cd2:	e7da      	b.n	8008c8a <_fflush_r+0x22>
 8008cd4:	0800a944 	.word	0x0800a944
 8008cd8:	0800a964 	.word	0x0800a964
 8008cdc:	0800a924 	.word	0x0800a924

08008ce0 <fileno>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	4e1a      	ldr	r6, [pc, #104]	; (8008d4c <fileno+0x6c>)
 8008ce4:	6835      	ldr	r5, [r6, #0]
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	b125      	cbz	r5, 8008cf4 <fileno+0x14>
 8008cea:	69ab      	ldr	r3, [r5, #24]
 8008cec:	b913      	cbnz	r3, 8008cf4 <fileno+0x14>
 8008cee:	4628      	mov	r0, r5
 8008cf0:	f000 f88c 	bl	8008e0c <__sinit>
 8008cf4:	4b16      	ldr	r3, [pc, #88]	; (8008d50 <fileno+0x70>)
 8008cf6:	429c      	cmp	r4, r3
 8008cf8:	d118      	bne.n	8008d2c <fileno+0x4c>
 8008cfa:	686c      	ldr	r4, [r5, #4]
 8008cfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cfe:	07d8      	lsls	r0, r3, #31
 8008d00:	d405      	bmi.n	8008d0e <fileno+0x2e>
 8008d02:	89a3      	ldrh	r3, [r4, #12]
 8008d04:	0599      	lsls	r1, r3, #22
 8008d06:	d402      	bmi.n	8008d0e <fileno+0x2e>
 8008d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d0a:	f000 f922 	bl	8008f52 <__retarget_lock_acquire_recursive>
 8008d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d12:	b1ab      	cbz	r3, 8008d40 <fileno+0x60>
 8008d14:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8008d18:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d1a:	07d2      	lsls	r2, r2, #31
 8008d1c:	d404      	bmi.n	8008d28 <fileno+0x48>
 8008d1e:	059b      	lsls	r3, r3, #22
 8008d20:	d402      	bmi.n	8008d28 <fileno+0x48>
 8008d22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d24:	f000 f916 	bl	8008f54 <__retarget_lock_release_recursive>
 8008d28:	4628      	mov	r0, r5
 8008d2a:	bd70      	pop	{r4, r5, r6, pc}
 8008d2c:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <fileno+0x74>)
 8008d2e:	429c      	cmp	r4, r3
 8008d30:	d101      	bne.n	8008d36 <fileno+0x56>
 8008d32:	68ac      	ldr	r4, [r5, #8]
 8008d34:	e7e2      	b.n	8008cfc <fileno+0x1c>
 8008d36:	4b08      	ldr	r3, [pc, #32]	; (8008d58 <fileno+0x78>)
 8008d38:	429c      	cmp	r4, r3
 8008d3a:	bf08      	it	eq
 8008d3c:	68ec      	ldreq	r4, [r5, #12]
 8008d3e:	e7dd      	b.n	8008cfc <fileno+0x1c>
 8008d40:	6832      	ldr	r2, [r6, #0]
 8008d42:	2109      	movs	r1, #9
 8008d44:	6011      	str	r1, [r2, #0]
 8008d46:	f04f 35ff 	mov.w	r5, #4294967295
 8008d4a:	e7e5      	b.n	8008d18 <fileno+0x38>
 8008d4c:	2000003c 	.word	0x2000003c
 8008d50:	0800a944 	.word	0x0800a944
 8008d54:	0800a964 	.word	0x0800a964
 8008d58:	0800a924 	.word	0x0800a924

08008d5c <std>:
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	b510      	push	{r4, lr}
 8008d60:	4604      	mov	r4, r0
 8008d62:	e9c0 3300 	strd	r3, r3, [r0]
 8008d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d6a:	6083      	str	r3, [r0, #8]
 8008d6c:	8181      	strh	r1, [r0, #12]
 8008d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d70:	81c2      	strh	r2, [r0, #14]
 8008d72:	6183      	str	r3, [r0, #24]
 8008d74:	4619      	mov	r1, r3
 8008d76:	2208      	movs	r2, #8
 8008d78:	305c      	adds	r0, #92	; 0x5c
 8008d7a:	f7fe f813 	bl	8006da4 <memset>
 8008d7e:	4b05      	ldr	r3, [pc, #20]	; (8008d94 <std+0x38>)
 8008d80:	6263      	str	r3, [r4, #36]	; 0x24
 8008d82:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <std+0x3c>)
 8008d84:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d86:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <std+0x40>)
 8008d88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d8a:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <std+0x44>)
 8008d8c:	6224      	str	r4, [r4, #32]
 8008d8e:	6323      	str	r3, [r4, #48]	; 0x30
 8008d90:	bd10      	pop	{r4, pc}
 8008d92:	bf00      	nop
 8008d94:	08009979 	.word	0x08009979
 8008d98:	0800999b 	.word	0x0800999b
 8008d9c:	080099d3 	.word	0x080099d3
 8008da0:	080099f7 	.word	0x080099f7

08008da4 <_cleanup_r>:
 8008da4:	4901      	ldr	r1, [pc, #4]	; (8008dac <_cleanup_r+0x8>)
 8008da6:	f000 b8af 	b.w	8008f08 <_fwalk_reent>
 8008daa:	bf00      	nop
 8008dac:	08008c69 	.word	0x08008c69

08008db0 <__sfmoreglue>:
 8008db0:	b570      	push	{r4, r5, r6, lr}
 8008db2:	2268      	movs	r2, #104	; 0x68
 8008db4:	1e4d      	subs	r5, r1, #1
 8008db6:	4355      	muls	r5, r2
 8008db8:	460e      	mov	r6, r1
 8008dba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008dbe:	f7fe f865 	bl	8006e8c <_malloc_r>
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	b140      	cbz	r0, 8008dd8 <__sfmoreglue+0x28>
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	e9c0 1600 	strd	r1, r6, [r0]
 8008dcc:	300c      	adds	r0, #12
 8008dce:	60a0      	str	r0, [r4, #8]
 8008dd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008dd4:	f7fd ffe6 	bl	8006da4 <memset>
 8008dd8:	4620      	mov	r0, r4
 8008dda:	bd70      	pop	{r4, r5, r6, pc}

08008ddc <__sfp_lock_acquire>:
 8008ddc:	4801      	ldr	r0, [pc, #4]	; (8008de4 <__sfp_lock_acquire+0x8>)
 8008dde:	f000 b8b8 	b.w	8008f52 <__retarget_lock_acquire_recursive>
 8008de2:	bf00      	nop
 8008de4:	20000625 	.word	0x20000625

08008de8 <__sfp_lock_release>:
 8008de8:	4801      	ldr	r0, [pc, #4]	; (8008df0 <__sfp_lock_release+0x8>)
 8008dea:	f000 b8b3 	b.w	8008f54 <__retarget_lock_release_recursive>
 8008dee:	bf00      	nop
 8008df0:	20000625 	.word	0x20000625

08008df4 <__sinit_lock_acquire>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__sinit_lock_acquire+0x8>)
 8008df6:	f000 b8ac 	b.w	8008f52 <__retarget_lock_acquire_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	20000626 	.word	0x20000626

08008e00 <__sinit_lock_release>:
 8008e00:	4801      	ldr	r0, [pc, #4]	; (8008e08 <__sinit_lock_release+0x8>)
 8008e02:	f000 b8a7 	b.w	8008f54 <__retarget_lock_release_recursive>
 8008e06:	bf00      	nop
 8008e08:	20000626 	.word	0x20000626

08008e0c <__sinit>:
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	4604      	mov	r4, r0
 8008e10:	f7ff fff0 	bl	8008df4 <__sinit_lock_acquire>
 8008e14:	69a3      	ldr	r3, [r4, #24]
 8008e16:	b11b      	cbz	r3, 8008e20 <__sinit+0x14>
 8008e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e1c:	f7ff bff0 	b.w	8008e00 <__sinit_lock_release>
 8008e20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e24:	6523      	str	r3, [r4, #80]	; 0x50
 8008e26:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <__sinit+0x68>)
 8008e28:	4a13      	ldr	r2, [pc, #76]	; (8008e78 <__sinit+0x6c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e2e:	42a3      	cmp	r3, r4
 8008e30:	bf04      	itt	eq
 8008e32:	2301      	moveq	r3, #1
 8008e34:	61a3      	streq	r3, [r4, #24]
 8008e36:	4620      	mov	r0, r4
 8008e38:	f000 f820 	bl	8008e7c <__sfp>
 8008e3c:	6060      	str	r0, [r4, #4]
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f000 f81c 	bl	8008e7c <__sfp>
 8008e44:	60a0      	str	r0, [r4, #8]
 8008e46:	4620      	mov	r0, r4
 8008e48:	f000 f818 	bl	8008e7c <__sfp>
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	60e0      	str	r0, [r4, #12]
 8008e50:	2104      	movs	r1, #4
 8008e52:	6860      	ldr	r0, [r4, #4]
 8008e54:	f7ff ff82 	bl	8008d5c <std>
 8008e58:	68a0      	ldr	r0, [r4, #8]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	2109      	movs	r1, #9
 8008e5e:	f7ff ff7d 	bl	8008d5c <std>
 8008e62:	68e0      	ldr	r0, [r4, #12]
 8008e64:	2202      	movs	r2, #2
 8008e66:	2112      	movs	r1, #18
 8008e68:	f7ff ff78 	bl	8008d5c <std>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	61a3      	str	r3, [r4, #24]
 8008e70:	e7d2      	b.n	8008e18 <__sinit+0xc>
 8008e72:	bf00      	nop
 8008e74:	0800a1c4 	.word	0x0800a1c4
 8008e78:	08008da5 	.word	0x08008da5

08008e7c <__sfp>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	4607      	mov	r7, r0
 8008e80:	f7ff ffac 	bl	8008ddc <__sfp_lock_acquire>
 8008e84:	4b1e      	ldr	r3, [pc, #120]	; (8008f00 <__sfp+0x84>)
 8008e86:	681e      	ldr	r6, [r3, #0]
 8008e88:	69b3      	ldr	r3, [r6, #24]
 8008e8a:	b913      	cbnz	r3, 8008e92 <__sfp+0x16>
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f7ff ffbd 	bl	8008e0c <__sinit>
 8008e92:	3648      	adds	r6, #72	; 0x48
 8008e94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	d503      	bpl.n	8008ea4 <__sfp+0x28>
 8008e9c:	6833      	ldr	r3, [r6, #0]
 8008e9e:	b30b      	cbz	r3, 8008ee4 <__sfp+0x68>
 8008ea0:	6836      	ldr	r6, [r6, #0]
 8008ea2:	e7f7      	b.n	8008e94 <__sfp+0x18>
 8008ea4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ea8:	b9d5      	cbnz	r5, 8008ee0 <__sfp+0x64>
 8008eaa:	4b16      	ldr	r3, [pc, #88]	; (8008f04 <__sfp+0x88>)
 8008eac:	60e3      	str	r3, [r4, #12]
 8008eae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008eb2:	6665      	str	r5, [r4, #100]	; 0x64
 8008eb4:	f000 f84c 	bl	8008f50 <__retarget_lock_init_recursive>
 8008eb8:	f7ff ff96 	bl	8008de8 <__sfp_lock_release>
 8008ebc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ec0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ec4:	6025      	str	r5, [r4, #0]
 8008ec6:	61a5      	str	r5, [r4, #24]
 8008ec8:	2208      	movs	r2, #8
 8008eca:	4629      	mov	r1, r5
 8008ecc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ed0:	f7fd ff68 	bl	8006da4 <memset>
 8008ed4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ed8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008edc:	4620      	mov	r0, r4
 8008ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ee0:	3468      	adds	r4, #104	; 0x68
 8008ee2:	e7d9      	b.n	8008e98 <__sfp+0x1c>
 8008ee4:	2104      	movs	r1, #4
 8008ee6:	4638      	mov	r0, r7
 8008ee8:	f7ff ff62 	bl	8008db0 <__sfmoreglue>
 8008eec:	4604      	mov	r4, r0
 8008eee:	6030      	str	r0, [r6, #0]
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d1d5      	bne.n	8008ea0 <__sfp+0x24>
 8008ef4:	f7ff ff78 	bl	8008de8 <__sfp_lock_release>
 8008ef8:	230c      	movs	r3, #12
 8008efa:	603b      	str	r3, [r7, #0]
 8008efc:	e7ee      	b.n	8008edc <__sfp+0x60>
 8008efe:	bf00      	nop
 8008f00:	0800a1c4 	.word	0x0800a1c4
 8008f04:	ffff0001 	.word	0xffff0001

08008f08 <_fwalk_reent>:
 8008f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	4688      	mov	r8, r1
 8008f10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f14:	2700      	movs	r7, #0
 8008f16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f1a:	f1b9 0901 	subs.w	r9, r9, #1
 8008f1e:	d505      	bpl.n	8008f2c <_fwalk_reent+0x24>
 8008f20:	6824      	ldr	r4, [r4, #0]
 8008f22:	2c00      	cmp	r4, #0
 8008f24:	d1f7      	bne.n	8008f16 <_fwalk_reent+0xe>
 8008f26:	4638      	mov	r0, r7
 8008f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f2c:	89ab      	ldrh	r3, [r5, #12]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d907      	bls.n	8008f42 <_fwalk_reent+0x3a>
 8008f32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f36:	3301      	adds	r3, #1
 8008f38:	d003      	beq.n	8008f42 <_fwalk_reent+0x3a>
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	47c0      	blx	r8
 8008f40:	4307      	orrs	r7, r0
 8008f42:	3568      	adds	r5, #104	; 0x68
 8008f44:	e7e9      	b.n	8008f1a <_fwalk_reent+0x12>
	...

08008f48 <_localeconv_r>:
 8008f48:	4800      	ldr	r0, [pc, #0]	; (8008f4c <_localeconv_r+0x4>)
 8008f4a:	4770      	bx	lr
 8008f4c:	20000190 	.word	0x20000190

08008f50 <__retarget_lock_init_recursive>:
 8008f50:	4770      	bx	lr

08008f52 <__retarget_lock_acquire_recursive>:
 8008f52:	4770      	bx	lr

08008f54 <__retarget_lock_release_recursive>:
 8008f54:	4770      	bx	lr

08008f56 <memcpy>:
 8008f56:	440a      	add	r2, r1
 8008f58:	4291      	cmp	r1, r2
 8008f5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f5e:	d100      	bne.n	8008f62 <memcpy+0xc>
 8008f60:	4770      	bx	lr
 8008f62:	b510      	push	{r4, lr}
 8008f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f6c:	4291      	cmp	r1, r2
 8008f6e:	d1f9      	bne.n	8008f64 <memcpy+0xe>
 8008f70:	bd10      	pop	{r4, pc}
	...

08008f74 <__malloc_lock>:
 8008f74:	4801      	ldr	r0, [pc, #4]	; (8008f7c <__malloc_lock+0x8>)
 8008f76:	f7ff bfec 	b.w	8008f52 <__retarget_lock_acquire_recursive>
 8008f7a:	bf00      	nop
 8008f7c:	20000624 	.word	0x20000624

08008f80 <__malloc_unlock>:
 8008f80:	4801      	ldr	r0, [pc, #4]	; (8008f88 <__malloc_unlock+0x8>)
 8008f82:	f7ff bfe7 	b.w	8008f54 <__retarget_lock_release_recursive>
 8008f86:	bf00      	nop
 8008f88:	20000624 	.word	0x20000624

08008f8c <_Balloc>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f90:	4604      	mov	r4, r0
 8008f92:	460d      	mov	r5, r1
 8008f94:	b976      	cbnz	r6, 8008fb4 <_Balloc+0x28>
 8008f96:	2010      	movs	r0, #16
 8008f98:	f7fd fefc 	bl	8006d94 <malloc>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	6260      	str	r0, [r4, #36]	; 0x24
 8008fa0:	b920      	cbnz	r0, 8008fac <_Balloc+0x20>
 8008fa2:	4b18      	ldr	r3, [pc, #96]	; (8009004 <_Balloc+0x78>)
 8008fa4:	4818      	ldr	r0, [pc, #96]	; (8009008 <_Balloc+0x7c>)
 8008fa6:	2166      	movs	r1, #102	; 0x66
 8008fa8:	f000 fd2a 	bl	8009a00 <__assert_func>
 8008fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fb0:	6006      	str	r6, [r0, #0]
 8008fb2:	60c6      	str	r6, [r0, #12]
 8008fb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fb6:	68f3      	ldr	r3, [r6, #12]
 8008fb8:	b183      	cbz	r3, 8008fdc <_Balloc+0x50>
 8008fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fc2:	b9b8      	cbnz	r0, 8008ff4 <_Balloc+0x68>
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	fa01 f605 	lsl.w	r6, r1, r5
 8008fca:	1d72      	adds	r2, r6, #5
 8008fcc:	0092      	lsls	r2, r2, #2
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 fb60 	bl	8009694 <_calloc_r>
 8008fd4:	b160      	cbz	r0, 8008ff0 <_Balloc+0x64>
 8008fd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fda:	e00e      	b.n	8008ffa <_Balloc+0x6e>
 8008fdc:	2221      	movs	r2, #33	; 0x21
 8008fde:	2104      	movs	r1, #4
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f000 fb57 	bl	8009694 <_calloc_r>
 8008fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fe8:	60f0      	str	r0, [r6, #12]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1e4      	bne.n	8008fba <_Balloc+0x2e>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	bd70      	pop	{r4, r5, r6, pc}
 8008ff4:	6802      	ldr	r2, [r0, #0]
 8008ff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009000:	e7f7      	b.n	8008ff2 <_Balloc+0x66>
 8009002:	bf00      	nop
 8009004:	0800a89f 	.word	0x0800a89f
 8009008:	0800a984 	.word	0x0800a984

0800900c <_Bfree>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009010:	4605      	mov	r5, r0
 8009012:	460c      	mov	r4, r1
 8009014:	b976      	cbnz	r6, 8009034 <_Bfree+0x28>
 8009016:	2010      	movs	r0, #16
 8009018:	f7fd febc 	bl	8006d94 <malloc>
 800901c:	4602      	mov	r2, r0
 800901e:	6268      	str	r0, [r5, #36]	; 0x24
 8009020:	b920      	cbnz	r0, 800902c <_Bfree+0x20>
 8009022:	4b09      	ldr	r3, [pc, #36]	; (8009048 <_Bfree+0x3c>)
 8009024:	4809      	ldr	r0, [pc, #36]	; (800904c <_Bfree+0x40>)
 8009026:	218a      	movs	r1, #138	; 0x8a
 8009028:	f000 fcea 	bl	8009a00 <__assert_func>
 800902c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009030:	6006      	str	r6, [r0, #0]
 8009032:	60c6      	str	r6, [r0, #12]
 8009034:	b13c      	cbz	r4, 8009046 <_Bfree+0x3a>
 8009036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009038:	6862      	ldr	r2, [r4, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009040:	6021      	str	r1, [r4, #0]
 8009042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009046:	bd70      	pop	{r4, r5, r6, pc}
 8009048:	0800a89f 	.word	0x0800a89f
 800904c:	0800a984 	.word	0x0800a984

08009050 <__multadd>:
 8009050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009054:	690d      	ldr	r5, [r1, #16]
 8009056:	4607      	mov	r7, r0
 8009058:	460c      	mov	r4, r1
 800905a:	461e      	mov	r6, r3
 800905c:	f101 0c14 	add.w	ip, r1, #20
 8009060:	2000      	movs	r0, #0
 8009062:	f8dc 3000 	ldr.w	r3, [ip]
 8009066:	b299      	uxth	r1, r3
 8009068:	fb02 6101 	mla	r1, r2, r1, r6
 800906c:	0c1e      	lsrs	r6, r3, #16
 800906e:	0c0b      	lsrs	r3, r1, #16
 8009070:	fb02 3306 	mla	r3, r2, r6, r3
 8009074:	b289      	uxth	r1, r1
 8009076:	3001      	adds	r0, #1
 8009078:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800907c:	4285      	cmp	r5, r0
 800907e:	f84c 1b04 	str.w	r1, [ip], #4
 8009082:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009086:	dcec      	bgt.n	8009062 <__multadd+0x12>
 8009088:	b30e      	cbz	r6, 80090ce <__multadd+0x7e>
 800908a:	68a3      	ldr	r3, [r4, #8]
 800908c:	42ab      	cmp	r3, r5
 800908e:	dc19      	bgt.n	80090c4 <__multadd+0x74>
 8009090:	6861      	ldr	r1, [r4, #4]
 8009092:	4638      	mov	r0, r7
 8009094:	3101      	adds	r1, #1
 8009096:	f7ff ff79 	bl	8008f8c <_Balloc>
 800909a:	4680      	mov	r8, r0
 800909c:	b928      	cbnz	r0, 80090aa <__multadd+0x5a>
 800909e:	4602      	mov	r2, r0
 80090a0:	4b0c      	ldr	r3, [pc, #48]	; (80090d4 <__multadd+0x84>)
 80090a2:	480d      	ldr	r0, [pc, #52]	; (80090d8 <__multadd+0x88>)
 80090a4:	21b5      	movs	r1, #181	; 0xb5
 80090a6:	f000 fcab 	bl	8009a00 <__assert_func>
 80090aa:	6922      	ldr	r2, [r4, #16]
 80090ac:	3202      	adds	r2, #2
 80090ae:	f104 010c 	add.w	r1, r4, #12
 80090b2:	0092      	lsls	r2, r2, #2
 80090b4:	300c      	adds	r0, #12
 80090b6:	f7ff ff4e 	bl	8008f56 <memcpy>
 80090ba:	4621      	mov	r1, r4
 80090bc:	4638      	mov	r0, r7
 80090be:	f7ff ffa5 	bl	800900c <_Bfree>
 80090c2:	4644      	mov	r4, r8
 80090c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090c8:	3501      	adds	r5, #1
 80090ca:	615e      	str	r6, [r3, #20]
 80090cc:	6125      	str	r5, [r4, #16]
 80090ce:	4620      	mov	r0, r4
 80090d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d4:	0800a911 	.word	0x0800a911
 80090d8:	0800a984 	.word	0x0800a984

080090dc <__hi0bits>:
 80090dc:	0c03      	lsrs	r3, r0, #16
 80090de:	041b      	lsls	r3, r3, #16
 80090e0:	b9d3      	cbnz	r3, 8009118 <__hi0bits+0x3c>
 80090e2:	0400      	lsls	r0, r0, #16
 80090e4:	2310      	movs	r3, #16
 80090e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090ea:	bf04      	itt	eq
 80090ec:	0200      	lsleq	r0, r0, #8
 80090ee:	3308      	addeq	r3, #8
 80090f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090f4:	bf04      	itt	eq
 80090f6:	0100      	lsleq	r0, r0, #4
 80090f8:	3304      	addeq	r3, #4
 80090fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090fe:	bf04      	itt	eq
 8009100:	0080      	lsleq	r0, r0, #2
 8009102:	3302      	addeq	r3, #2
 8009104:	2800      	cmp	r0, #0
 8009106:	db05      	blt.n	8009114 <__hi0bits+0x38>
 8009108:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800910c:	f103 0301 	add.w	r3, r3, #1
 8009110:	bf08      	it	eq
 8009112:	2320      	moveq	r3, #32
 8009114:	4618      	mov	r0, r3
 8009116:	4770      	bx	lr
 8009118:	2300      	movs	r3, #0
 800911a:	e7e4      	b.n	80090e6 <__hi0bits+0xa>

0800911c <__lo0bits>:
 800911c:	6803      	ldr	r3, [r0, #0]
 800911e:	f013 0207 	ands.w	r2, r3, #7
 8009122:	4601      	mov	r1, r0
 8009124:	d00b      	beq.n	800913e <__lo0bits+0x22>
 8009126:	07da      	lsls	r2, r3, #31
 8009128:	d423      	bmi.n	8009172 <__lo0bits+0x56>
 800912a:	0798      	lsls	r0, r3, #30
 800912c:	bf49      	itett	mi
 800912e:	085b      	lsrmi	r3, r3, #1
 8009130:	089b      	lsrpl	r3, r3, #2
 8009132:	2001      	movmi	r0, #1
 8009134:	600b      	strmi	r3, [r1, #0]
 8009136:	bf5c      	itt	pl
 8009138:	600b      	strpl	r3, [r1, #0]
 800913a:	2002      	movpl	r0, #2
 800913c:	4770      	bx	lr
 800913e:	b298      	uxth	r0, r3
 8009140:	b9a8      	cbnz	r0, 800916e <__lo0bits+0x52>
 8009142:	0c1b      	lsrs	r3, r3, #16
 8009144:	2010      	movs	r0, #16
 8009146:	b2da      	uxtb	r2, r3
 8009148:	b90a      	cbnz	r2, 800914e <__lo0bits+0x32>
 800914a:	3008      	adds	r0, #8
 800914c:	0a1b      	lsrs	r3, r3, #8
 800914e:	071a      	lsls	r2, r3, #28
 8009150:	bf04      	itt	eq
 8009152:	091b      	lsreq	r3, r3, #4
 8009154:	3004      	addeq	r0, #4
 8009156:	079a      	lsls	r2, r3, #30
 8009158:	bf04      	itt	eq
 800915a:	089b      	lsreq	r3, r3, #2
 800915c:	3002      	addeq	r0, #2
 800915e:	07da      	lsls	r2, r3, #31
 8009160:	d403      	bmi.n	800916a <__lo0bits+0x4e>
 8009162:	085b      	lsrs	r3, r3, #1
 8009164:	f100 0001 	add.w	r0, r0, #1
 8009168:	d005      	beq.n	8009176 <__lo0bits+0x5a>
 800916a:	600b      	str	r3, [r1, #0]
 800916c:	4770      	bx	lr
 800916e:	4610      	mov	r0, r2
 8009170:	e7e9      	b.n	8009146 <__lo0bits+0x2a>
 8009172:	2000      	movs	r0, #0
 8009174:	4770      	bx	lr
 8009176:	2020      	movs	r0, #32
 8009178:	4770      	bx	lr
	...

0800917c <__i2b>:
 800917c:	b510      	push	{r4, lr}
 800917e:	460c      	mov	r4, r1
 8009180:	2101      	movs	r1, #1
 8009182:	f7ff ff03 	bl	8008f8c <_Balloc>
 8009186:	4602      	mov	r2, r0
 8009188:	b928      	cbnz	r0, 8009196 <__i2b+0x1a>
 800918a:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <__i2b+0x24>)
 800918c:	4805      	ldr	r0, [pc, #20]	; (80091a4 <__i2b+0x28>)
 800918e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009192:	f000 fc35 	bl	8009a00 <__assert_func>
 8009196:	2301      	movs	r3, #1
 8009198:	6144      	str	r4, [r0, #20]
 800919a:	6103      	str	r3, [r0, #16]
 800919c:	bd10      	pop	{r4, pc}
 800919e:	bf00      	nop
 80091a0:	0800a911 	.word	0x0800a911
 80091a4:	0800a984 	.word	0x0800a984

080091a8 <__multiply>:
 80091a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ac:	4691      	mov	r9, r2
 80091ae:	690a      	ldr	r2, [r1, #16]
 80091b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	bfb8      	it	lt
 80091b8:	460b      	movlt	r3, r1
 80091ba:	460c      	mov	r4, r1
 80091bc:	bfbc      	itt	lt
 80091be:	464c      	movlt	r4, r9
 80091c0:	4699      	movlt	r9, r3
 80091c2:	6927      	ldr	r7, [r4, #16]
 80091c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091c8:	68a3      	ldr	r3, [r4, #8]
 80091ca:	6861      	ldr	r1, [r4, #4]
 80091cc:	eb07 060a 	add.w	r6, r7, sl
 80091d0:	42b3      	cmp	r3, r6
 80091d2:	b085      	sub	sp, #20
 80091d4:	bfb8      	it	lt
 80091d6:	3101      	addlt	r1, #1
 80091d8:	f7ff fed8 	bl	8008f8c <_Balloc>
 80091dc:	b930      	cbnz	r0, 80091ec <__multiply+0x44>
 80091de:	4602      	mov	r2, r0
 80091e0:	4b44      	ldr	r3, [pc, #272]	; (80092f4 <__multiply+0x14c>)
 80091e2:	4845      	ldr	r0, [pc, #276]	; (80092f8 <__multiply+0x150>)
 80091e4:	f240 115d 	movw	r1, #349	; 0x15d
 80091e8:	f000 fc0a 	bl	8009a00 <__assert_func>
 80091ec:	f100 0514 	add.w	r5, r0, #20
 80091f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091f4:	462b      	mov	r3, r5
 80091f6:	2200      	movs	r2, #0
 80091f8:	4543      	cmp	r3, r8
 80091fa:	d321      	bcc.n	8009240 <__multiply+0x98>
 80091fc:	f104 0314 	add.w	r3, r4, #20
 8009200:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009204:	f109 0314 	add.w	r3, r9, #20
 8009208:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800920c:	9202      	str	r2, [sp, #8]
 800920e:	1b3a      	subs	r2, r7, r4
 8009210:	3a15      	subs	r2, #21
 8009212:	f022 0203 	bic.w	r2, r2, #3
 8009216:	3204      	adds	r2, #4
 8009218:	f104 0115 	add.w	r1, r4, #21
 800921c:	428f      	cmp	r7, r1
 800921e:	bf38      	it	cc
 8009220:	2204      	movcc	r2, #4
 8009222:	9201      	str	r2, [sp, #4]
 8009224:	9a02      	ldr	r2, [sp, #8]
 8009226:	9303      	str	r3, [sp, #12]
 8009228:	429a      	cmp	r2, r3
 800922a:	d80c      	bhi.n	8009246 <__multiply+0x9e>
 800922c:	2e00      	cmp	r6, #0
 800922e:	dd03      	ble.n	8009238 <__multiply+0x90>
 8009230:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009234:	2b00      	cmp	r3, #0
 8009236:	d05a      	beq.n	80092ee <__multiply+0x146>
 8009238:	6106      	str	r6, [r0, #16]
 800923a:	b005      	add	sp, #20
 800923c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009240:	f843 2b04 	str.w	r2, [r3], #4
 8009244:	e7d8      	b.n	80091f8 <__multiply+0x50>
 8009246:	f8b3 a000 	ldrh.w	sl, [r3]
 800924a:	f1ba 0f00 	cmp.w	sl, #0
 800924e:	d024      	beq.n	800929a <__multiply+0xf2>
 8009250:	f104 0e14 	add.w	lr, r4, #20
 8009254:	46a9      	mov	r9, r5
 8009256:	f04f 0c00 	mov.w	ip, #0
 800925a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800925e:	f8d9 1000 	ldr.w	r1, [r9]
 8009262:	fa1f fb82 	uxth.w	fp, r2
 8009266:	b289      	uxth	r1, r1
 8009268:	fb0a 110b 	mla	r1, sl, fp, r1
 800926c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009270:	f8d9 2000 	ldr.w	r2, [r9]
 8009274:	4461      	add	r1, ip
 8009276:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800927a:	fb0a c20b 	mla	r2, sl, fp, ip
 800927e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009282:	b289      	uxth	r1, r1
 8009284:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009288:	4577      	cmp	r7, lr
 800928a:	f849 1b04 	str.w	r1, [r9], #4
 800928e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009292:	d8e2      	bhi.n	800925a <__multiply+0xb2>
 8009294:	9a01      	ldr	r2, [sp, #4]
 8009296:	f845 c002 	str.w	ip, [r5, r2]
 800929a:	9a03      	ldr	r2, [sp, #12]
 800929c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092a0:	3304      	adds	r3, #4
 80092a2:	f1b9 0f00 	cmp.w	r9, #0
 80092a6:	d020      	beq.n	80092ea <__multiply+0x142>
 80092a8:	6829      	ldr	r1, [r5, #0]
 80092aa:	f104 0c14 	add.w	ip, r4, #20
 80092ae:	46ae      	mov	lr, r5
 80092b0:	f04f 0a00 	mov.w	sl, #0
 80092b4:	f8bc b000 	ldrh.w	fp, [ip]
 80092b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80092bc:	fb09 220b 	mla	r2, r9, fp, r2
 80092c0:	4492      	add	sl, r2
 80092c2:	b289      	uxth	r1, r1
 80092c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80092c8:	f84e 1b04 	str.w	r1, [lr], #4
 80092cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80092d0:	f8be 1000 	ldrh.w	r1, [lr]
 80092d4:	0c12      	lsrs	r2, r2, #16
 80092d6:	fb09 1102 	mla	r1, r9, r2, r1
 80092da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80092de:	4567      	cmp	r7, ip
 80092e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092e4:	d8e6      	bhi.n	80092b4 <__multiply+0x10c>
 80092e6:	9a01      	ldr	r2, [sp, #4]
 80092e8:	50a9      	str	r1, [r5, r2]
 80092ea:	3504      	adds	r5, #4
 80092ec:	e79a      	b.n	8009224 <__multiply+0x7c>
 80092ee:	3e01      	subs	r6, #1
 80092f0:	e79c      	b.n	800922c <__multiply+0x84>
 80092f2:	bf00      	nop
 80092f4:	0800a911 	.word	0x0800a911
 80092f8:	0800a984 	.word	0x0800a984

080092fc <__pow5mult>:
 80092fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009300:	4615      	mov	r5, r2
 8009302:	f012 0203 	ands.w	r2, r2, #3
 8009306:	4606      	mov	r6, r0
 8009308:	460f      	mov	r7, r1
 800930a:	d007      	beq.n	800931c <__pow5mult+0x20>
 800930c:	4c25      	ldr	r4, [pc, #148]	; (80093a4 <__pow5mult+0xa8>)
 800930e:	3a01      	subs	r2, #1
 8009310:	2300      	movs	r3, #0
 8009312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009316:	f7ff fe9b 	bl	8009050 <__multadd>
 800931a:	4607      	mov	r7, r0
 800931c:	10ad      	asrs	r5, r5, #2
 800931e:	d03d      	beq.n	800939c <__pow5mult+0xa0>
 8009320:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009322:	b97c      	cbnz	r4, 8009344 <__pow5mult+0x48>
 8009324:	2010      	movs	r0, #16
 8009326:	f7fd fd35 	bl	8006d94 <malloc>
 800932a:	4602      	mov	r2, r0
 800932c:	6270      	str	r0, [r6, #36]	; 0x24
 800932e:	b928      	cbnz	r0, 800933c <__pow5mult+0x40>
 8009330:	4b1d      	ldr	r3, [pc, #116]	; (80093a8 <__pow5mult+0xac>)
 8009332:	481e      	ldr	r0, [pc, #120]	; (80093ac <__pow5mult+0xb0>)
 8009334:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009338:	f000 fb62 	bl	8009a00 <__assert_func>
 800933c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009340:	6004      	str	r4, [r0, #0]
 8009342:	60c4      	str	r4, [r0, #12]
 8009344:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009348:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800934c:	b94c      	cbnz	r4, 8009362 <__pow5mult+0x66>
 800934e:	f240 2171 	movw	r1, #625	; 0x271
 8009352:	4630      	mov	r0, r6
 8009354:	f7ff ff12 	bl	800917c <__i2b>
 8009358:	2300      	movs	r3, #0
 800935a:	f8c8 0008 	str.w	r0, [r8, #8]
 800935e:	4604      	mov	r4, r0
 8009360:	6003      	str	r3, [r0, #0]
 8009362:	f04f 0900 	mov.w	r9, #0
 8009366:	07eb      	lsls	r3, r5, #31
 8009368:	d50a      	bpl.n	8009380 <__pow5mult+0x84>
 800936a:	4639      	mov	r1, r7
 800936c:	4622      	mov	r2, r4
 800936e:	4630      	mov	r0, r6
 8009370:	f7ff ff1a 	bl	80091a8 <__multiply>
 8009374:	4639      	mov	r1, r7
 8009376:	4680      	mov	r8, r0
 8009378:	4630      	mov	r0, r6
 800937a:	f7ff fe47 	bl	800900c <_Bfree>
 800937e:	4647      	mov	r7, r8
 8009380:	106d      	asrs	r5, r5, #1
 8009382:	d00b      	beq.n	800939c <__pow5mult+0xa0>
 8009384:	6820      	ldr	r0, [r4, #0]
 8009386:	b938      	cbnz	r0, 8009398 <__pow5mult+0x9c>
 8009388:	4622      	mov	r2, r4
 800938a:	4621      	mov	r1, r4
 800938c:	4630      	mov	r0, r6
 800938e:	f7ff ff0b 	bl	80091a8 <__multiply>
 8009392:	6020      	str	r0, [r4, #0]
 8009394:	f8c0 9000 	str.w	r9, [r0]
 8009398:	4604      	mov	r4, r0
 800939a:	e7e4      	b.n	8009366 <__pow5mult+0x6a>
 800939c:	4638      	mov	r0, r7
 800939e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093a2:	bf00      	nop
 80093a4:	0800aad0 	.word	0x0800aad0
 80093a8:	0800a89f 	.word	0x0800a89f
 80093ac:	0800a984 	.word	0x0800a984

080093b0 <__lshift>:
 80093b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093b4:	460c      	mov	r4, r1
 80093b6:	6849      	ldr	r1, [r1, #4]
 80093b8:	6923      	ldr	r3, [r4, #16]
 80093ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093be:	68a3      	ldr	r3, [r4, #8]
 80093c0:	4607      	mov	r7, r0
 80093c2:	4691      	mov	r9, r2
 80093c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093c8:	f108 0601 	add.w	r6, r8, #1
 80093cc:	42b3      	cmp	r3, r6
 80093ce:	db0b      	blt.n	80093e8 <__lshift+0x38>
 80093d0:	4638      	mov	r0, r7
 80093d2:	f7ff fddb 	bl	8008f8c <_Balloc>
 80093d6:	4605      	mov	r5, r0
 80093d8:	b948      	cbnz	r0, 80093ee <__lshift+0x3e>
 80093da:	4602      	mov	r2, r0
 80093dc:	4b2a      	ldr	r3, [pc, #168]	; (8009488 <__lshift+0xd8>)
 80093de:	482b      	ldr	r0, [pc, #172]	; (800948c <__lshift+0xdc>)
 80093e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093e4:	f000 fb0c 	bl	8009a00 <__assert_func>
 80093e8:	3101      	adds	r1, #1
 80093ea:	005b      	lsls	r3, r3, #1
 80093ec:	e7ee      	b.n	80093cc <__lshift+0x1c>
 80093ee:	2300      	movs	r3, #0
 80093f0:	f100 0114 	add.w	r1, r0, #20
 80093f4:	f100 0210 	add.w	r2, r0, #16
 80093f8:	4618      	mov	r0, r3
 80093fa:	4553      	cmp	r3, sl
 80093fc:	db37      	blt.n	800946e <__lshift+0xbe>
 80093fe:	6920      	ldr	r0, [r4, #16]
 8009400:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009404:	f104 0314 	add.w	r3, r4, #20
 8009408:	f019 091f 	ands.w	r9, r9, #31
 800940c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009410:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009414:	d02f      	beq.n	8009476 <__lshift+0xc6>
 8009416:	f1c9 0e20 	rsb	lr, r9, #32
 800941a:	468a      	mov	sl, r1
 800941c:	f04f 0c00 	mov.w	ip, #0
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	fa02 f209 	lsl.w	r2, r2, r9
 8009426:	ea42 020c 	orr.w	r2, r2, ip
 800942a:	f84a 2b04 	str.w	r2, [sl], #4
 800942e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009432:	4298      	cmp	r0, r3
 8009434:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009438:	d8f2      	bhi.n	8009420 <__lshift+0x70>
 800943a:	1b03      	subs	r3, r0, r4
 800943c:	3b15      	subs	r3, #21
 800943e:	f023 0303 	bic.w	r3, r3, #3
 8009442:	3304      	adds	r3, #4
 8009444:	f104 0215 	add.w	r2, r4, #21
 8009448:	4290      	cmp	r0, r2
 800944a:	bf38      	it	cc
 800944c:	2304      	movcc	r3, #4
 800944e:	f841 c003 	str.w	ip, [r1, r3]
 8009452:	f1bc 0f00 	cmp.w	ip, #0
 8009456:	d001      	beq.n	800945c <__lshift+0xac>
 8009458:	f108 0602 	add.w	r6, r8, #2
 800945c:	3e01      	subs	r6, #1
 800945e:	4638      	mov	r0, r7
 8009460:	612e      	str	r6, [r5, #16]
 8009462:	4621      	mov	r1, r4
 8009464:	f7ff fdd2 	bl	800900c <_Bfree>
 8009468:	4628      	mov	r0, r5
 800946a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800946e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009472:	3301      	adds	r3, #1
 8009474:	e7c1      	b.n	80093fa <__lshift+0x4a>
 8009476:	3904      	subs	r1, #4
 8009478:	f853 2b04 	ldr.w	r2, [r3], #4
 800947c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009480:	4298      	cmp	r0, r3
 8009482:	d8f9      	bhi.n	8009478 <__lshift+0xc8>
 8009484:	e7ea      	b.n	800945c <__lshift+0xac>
 8009486:	bf00      	nop
 8009488:	0800a911 	.word	0x0800a911
 800948c:	0800a984 	.word	0x0800a984

08009490 <__mcmp>:
 8009490:	b530      	push	{r4, r5, lr}
 8009492:	6902      	ldr	r2, [r0, #16]
 8009494:	690c      	ldr	r4, [r1, #16]
 8009496:	1b12      	subs	r2, r2, r4
 8009498:	d10e      	bne.n	80094b8 <__mcmp+0x28>
 800949a:	f100 0314 	add.w	r3, r0, #20
 800949e:	3114      	adds	r1, #20
 80094a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80094a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80094ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80094b0:	42a5      	cmp	r5, r4
 80094b2:	d003      	beq.n	80094bc <__mcmp+0x2c>
 80094b4:	d305      	bcc.n	80094c2 <__mcmp+0x32>
 80094b6:	2201      	movs	r2, #1
 80094b8:	4610      	mov	r0, r2
 80094ba:	bd30      	pop	{r4, r5, pc}
 80094bc:	4283      	cmp	r3, r0
 80094be:	d3f3      	bcc.n	80094a8 <__mcmp+0x18>
 80094c0:	e7fa      	b.n	80094b8 <__mcmp+0x28>
 80094c2:	f04f 32ff 	mov.w	r2, #4294967295
 80094c6:	e7f7      	b.n	80094b8 <__mcmp+0x28>

080094c8 <__mdiff>:
 80094c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	460c      	mov	r4, r1
 80094ce:	4606      	mov	r6, r0
 80094d0:	4611      	mov	r1, r2
 80094d2:	4620      	mov	r0, r4
 80094d4:	4690      	mov	r8, r2
 80094d6:	f7ff ffdb 	bl	8009490 <__mcmp>
 80094da:	1e05      	subs	r5, r0, #0
 80094dc:	d110      	bne.n	8009500 <__mdiff+0x38>
 80094de:	4629      	mov	r1, r5
 80094e0:	4630      	mov	r0, r6
 80094e2:	f7ff fd53 	bl	8008f8c <_Balloc>
 80094e6:	b930      	cbnz	r0, 80094f6 <__mdiff+0x2e>
 80094e8:	4b3a      	ldr	r3, [pc, #232]	; (80095d4 <__mdiff+0x10c>)
 80094ea:	4602      	mov	r2, r0
 80094ec:	f240 2132 	movw	r1, #562	; 0x232
 80094f0:	4839      	ldr	r0, [pc, #228]	; (80095d8 <__mdiff+0x110>)
 80094f2:	f000 fa85 	bl	8009a00 <__assert_func>
 80094f6:	2301      	movs	r3, #1
 80094f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009500:	bfa4      	itt	ge
 8009502:	4643      	movge	r3, r8
 8009504:	46a0      	movge	r8, r4
 8009506:	4630      	mov	r0, r6
 8009508:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800950c:	bfa6      	itte	ge
 800950e:	461c      	movge	r4, r3
 8009510:	2500      	movge	r5, #0
 8009512:	2501      	movlt	r5, #1
 8009514:	f7ff fd3a 	bl	8008f8c <_Balloc>
 8009518:	b920      	cbnz	r0, 8009524 <__mdiff+0x5c>
 800951a:	4b2e      	ldr	r3, [pc, #184]	; (80095d4 <__mdiff+0x10c>)
 800951c:	4602      	mov	r2, r0
 800951e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009522:	e7e5      	b.n	80094f0 <__mdiff+0x28>
 8009524:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009528:	6926      	ldr	r6, [r4, #16]
 800952a:	60c5      	str	r5, [r0, #12]
 800952c:	f104 0914 	add.w	r9, r4, #20
 8009530:	f108 0514 	add.w	r5, r8, #20
 8009534:	f100 0e14 	add.w	lr, r0, #20
 8009538:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800953c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009540:	f108 0210 	add.w	r2, r8, #16
 8009544:	46f2      	mov	sl, lr
 8009546:	2100      	movs	r1, #0
 8009548:	f859 3b04 	ldr.w	r3, [r9], #4
 800954c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009550:	fa1f f883 	uxth.w	r8, r3
 8009554:	fa11 f18b 	uxtah	r1, r1, fp
 8009558:	0c1b      	lsrs	r3, r3, #16
 800955a:	eba1 0808 	sub.w	r8, r1, r8
 800955e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009562:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009566:	fa1f f888 	uxth.w	r8, r8
 800956a:	1419      	asrs	r1, r3, #16
 800956c:	454e      	cmp	r6, r9
 800956e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009572:	f84a 3b04 	str.w	r3, [sl], #4
 8009576:	d8e7      	bhi.n	8009548 <__mdiff+0x80>
 8009578:	1b33      	subs	r3, r6, r4
 800957a:	3b15      	subs	r3, #21
 800957c:	f023 0303 	bic.w	r3, r3, #3
 8009580:	3304      	adds	r3, #4
 8009582:	3415      	adds	r4, #21
 8009584:	42a6      	cmp	r6, r4
 8009586:	bf38      	it	cc
 8009588:	2304      	movcc	r3, #4
 800958a:	441d      	add	r5, r3
 800958c:	4473      	add	r3, lr
 800958e:	469e      	mov	lr, r3
 8009590:	462e      	mov	r6, r5
 8009592:	4566      	cmp	r6, ip
 8009594:	d30e      	bcc.n	80095b4 <__mdiff+0xec>
 8009596:	f10c 0203 	add.w	r2, ip, #3
 800959a:	1b52      	subs	r2, r2, r5
 800959c:	f022 0203 	bic.w	r2, r2, #3
 80095a0:	3d03      	subs	r5, #3
 80095a2:	45ac      	cmp	ip, r5
 80095a4:	bf38      	it	cc
 80095a6:	2200      	movcc	r2, #0
 80095a8:	441a      	add	r2, r3
 80095aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80095ae:	b17b      	cbz	r3, 80095d0 <__mdiff+0x108>
 80095b0:	6107      	str	r7, [r0, #16]
 80095b2:	e7a3      	b.n	80094fc <__mdiff+0x34>
 80095b4:	f856 8b04 	ldr.w	r8, [r6], #4
 80095b8:	fa11 f288 	uxtah	r2, r1, r8
 80095bc:	1414      	asrs	r4, r2, #16
 80095be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80095c2:	b292      	uxth	r2, r2
 80095c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80095c8:	f84e 2b04 	str.w	r2, [lr], #4
 80095cc:	1421      	asrs	r1, r4, #16
 80095ce:	e7e0      	b.n	8009592 <__mdiff+0xca>
 80095d0:	3f01      	subs	r7, #1
 80095d2:	e7ea      	b.n	80095aa <__mdiff+0xe2>
 80095d4:	0800a911 	.word	0x0800a911
 80095d8:	0800a984 	.word	0x0800a984

080095dc <__d2b>:
 80095dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095e0:	4689      	mov	r9, r1
 80095e2:	2101      	movs	r1, #1
 80095e4:	ec57 6b10 	vmov	r6, r7, d0
 80095e8:	4690      	mov	r8, r2
 80095ea:	f7ff fccf 	bl	8008f8c <_Balloc>
 80095ee:	4604      	mov	r4, r0
 80095f0:	b930      	cbnz	r0, 8009600 <__d2b+0x24>
 80095f2:	4602      	mov	r2, r0
 80095f4:	4b25      	ldr	r3, [pc, #148]	; (800968c <__d2b+0xb0>)
 80095f6:	4826      	ldr	r0, [pc, #152]	; (8009690 <__d2b+0xb4>)
 80095f8:	f240 310a 	movw	r1, #778	; 0x30a
 80095fc:	f000 fa00 	bl	8009a00 <__assert_func>
 8009600:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009604:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009608:	bb35      	cbnz	r5, 8009658 <__d2b+0x7c>
 800960a:	2e00      	cmp	r6, #0
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	d028      	beq.n	8009662 <__d2b+0x86>
 8009610:	4668      	mov	r0, sp
 8009612:	9600      	str	r6, [sp, #0]
 8009614:	f7ff fd82 	bl	800911c <__lo0bits>
 8009618:	9900      	ldr	r1, [sp, #0]
 800961a:	b300      	cbz	r0, 800965e <__d2b+0x82>
 800961c:	9a01      	ldr	r2, [sp, #4]
 800961e:	f1c0 0320 	rsb	r3, r0, #32
 8009622:	fa02 f303 	lsl.w	r3, r2, r3
 8009626:	430b      	orrs	r3, r1
 8009628:	40c2      	lsrs	r2, r0
 800962a:	6163      	str	r3, [r4, #20]
 800962c:	9201      	str	r2, [sp, #4]
 800962e:	9b01      	ldr	r3, [sp, #4]
 8009630:	61a3      	str	r3, [r4, #24]
 8009632:	2b00      	cmp	r3, #0
 8009634:	bf14      	ite	ne
 8009636:	2202      	movne	r2, #2
 8009638:	2201      	moveq	r2, #1
 800963a:	6122      	str	r2, [r4, #16]
 800963c:	b1d5      	cbz	r5, 8009674 <__d2b+0x98>
 800963e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009642:	4405      	add	r5, r0
 8009644:	f8c9 5000 	str.w	r5, [r9]
 8009648:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800964c:	f8c8 0000 	str.w	r0, [r8]
 8009650:	4620      	mov	r0, r4
 8009652:	b003      	add	sp, #12
 8009654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800965c:	e7d5      	b.n	800960a <__d2b+0x2e>
 800965e:	6161      	str	r1, [r4, #20]
 8009660:	e7e5      	b.n	800962e <__d2b+0x52>
 8009662:	a801      	add	r0, sp, #4
 8009664:	f7ff fd5a 	bl	800911c <__lo0bits>
 8009668:	9b01      	ldr	r3, [sp, #4]
 800966a:	6163      	str	r3, [r4, #20]
 800966c:	2201      	movs	r2, #1
 800966e:	6122      	str	r2, [r4, #16]
 8009670:	3020      	adds	r0, #32
 8009672:	e7e3      	b.n	800963c <__d2b+0x60>
 8009674:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009678:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800967c:	f8c9 0000 	str.w	r0, [r9]
 8009680:	6918      	ldr	r0, [r3, #16]
 8009682:	f7ff fd2b 	bl	80090dc <__hi0bits>
 8009686:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800968a:	e7df      	b.n	800964c <__d2b+0x70>
 800968c:	0800a911 	.word	0x0800a911
 8009690:	0800a984 	.word	0x0800a984

08009694 <_calloc_r>:
 8009694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009696:	fba1 2402 	umull	r2, r4, r1, r2
 800969a:	b94c      	cbnz	r4, 80096b0 <_calloc_r+0x1c>
 800969c:	4611      	mov	r1, r2
 800969e:	9201      	str	r2, [sp, #4]
 80096a0:	f7fd fbf4 	bl	8006e8c <_malloc_r>
 80096a4:	9a01      	ldr	r2, [sp, #4]
 80096a6:	4605      	mov	r5, r0
 80096a8:	b930      	cbnz	r0, 80096b8 <_calloc_r+0x24>
 80096aa:	4628      	mov	r0, r5
 80096ac:	b003      	add	sp, #12
 80096ae:	bd30      	pop	{r4, r5, pc}
 80096b0:	220c      	movs	r2, #12
 80096b2:	6002      	str	r2, [r0, #0]
 80096b4:	2500      	movs	r5, #0
 80096b6:	e7f8      	b.n	80096aa <_calloc_r+0x16>
 80096b8:	4621      	mov	r1, r4
 80096ba:	f7fd fb73 	bl	8006da4 <memset>
 80096be:	e7f4      	b.n	80096aa <_calloc_r+0x16>

080096c0 <__ssputs_r>:
 80096c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c4:	688e      	ldr	r6, [r1, #8]
 80096c6:	429e      	cmp	r6, r3
 80096c8:	4682      	mov	sl, r0
 80096ca:	460c      	mov	r4, r1
 80096cc:	4690      	mov	r8, r2
 80096ce:	461f      	mov	r7, r3
 80096d0:	d838      	bhi.n	8009744 <__ssputs_r+0x84>
 80096d2:	898a      	ldrh	r2, [r1, #12]
 80096d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096d8:	d032      	beq.n	8009740 <__ssputs_r+0x80>
 80096da:	6825      	ldr	r5, [r4, #0]
 80096dc:	6909      	ldr	r1, [r1, #16]
 80096de:	eba5 0901 	sub.w	r9, r5, r1
 80096e2:	6965      	ldr	r5, [r4, #20]
 80096e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096ec:	3301      	adds	r3, #1
 80096ee:	444b      	add	r3, r9
 80096f0:	106d      	asrs	r5, r5, #1
 80096f2:	429d      	cmp	r5, r3
 80096f4:	bf38      	it	cc
 80096f6:	461d      	movcc	r5, r3
 80096f8:	0553      	lsls	r3, r2, #21
 80096fa:	d531      	bpl.n	8009760 <__ssputs_r+0xa0>
 80096fc:	4629      	mov	r1, r5
 80096fe:	f7fd fbc5 	bl	8006e8c <_malloc_r>
 8009702:	4606      	mov	r6, r0
 8009704:	b950      	cbnz	r0, 800971c <__ssputs_r+0x5c>
 8009706:	230c      	movs	r3, #12
 8009708:	f8ca 3000 	str.w	r3, [sl]
 800970c:	89a3      	ldrh	r3, [r4, #12]
 800970e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009712:	81a3      	strh	r3, [r4, #12]
 8009714:	f04f 30ff 	mov.w	r0, #4294967295
 8009718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800971c:	6921      	ldr	r1, [r4, #16]
 800971e:	464a      	mov	r2, r9
 8009720:	f7ff fc19 	bl	8008f56 <memcpy>
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800972a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800972e:	81a3      	strh	r3, [r4, #12]
 8009730:	6126      	str	r6, [r4, #16]
 8009732:	6165      	str	r5, [r4, #20]
 8009734:	444e      	add	r6, r9
 8009736:	eba5 0509 	sub.w	r5, r5, r9
 800973a:	6026      	str	r6, [r4, #0]
 800973c:	60a5      	str	r5, [r4, #8]
 800973e:	463e      	mov	r6, r7
 8009740:	42be      	cmp	r6, r7
 8009742:	d900      	bls.n	8009746 <__ssputs_r+0x86>
 8009744:	463e      	mov	r6, r7
 8009746:	6820      	ldr	r0, [r4, #0]
 8009748:	4632      	mov	r2, r6
 800974a:	4641      	mov	r1, r8
 800974c:	f000 f9bc 	bl	8009ac8 <memmove>
 8009750:	68a3      	ldr	r3, [r4, #8]
 8009752:	1b9b      	subs	r3, r3, r6
 8009754:	60a3      	str	r3, [r4, #8]
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	4433      	add	r3, r6
 800975a:	6023      	str	r3, [r4, #0]
 800975c:	2000      	movs	r0, #0
 800975e:	e7db      	b.n	8009718 <__ssputs_r+0x58>
 8009760:	462a      	mov	r2, r5
 8009762:	f000 f9cb 	bl	8009afc <_realloc_r>
 8009766:	4606      	mov	r6, r0
 8009768:	2800      	cmp	r0, #0
 800976a:	d1e1      	bne.n	8009730 <__ssputs_r+0x70>
 800976c:	6921      	ldr	r1, [r4, #16]
 800976e:	4650      	mov	r0, sl
 8009770:	f7fd fb20 	bl	8006db4 <_free_r>
 8009774:	e7c7      	b.n	8009706 <__ssputs_r+0x46>
	...

08009778 <_svfiprintf_r>:
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	4698      	mov	r8, r3
 800977e:	898b      	ldrh	r3, [r1, #12]
 8009780:	061b      	lsls	r3, r3, #24
 8009782:	b09d      	sub	sp, #116	; 0x74
 8009784:	4607      	mov	r7, r0
 8009786:	460d      	mov	r5, r1
 8009788:	4614      	mov	r4, r2
 800978a:	d50e      	bpl.n	80097aa <_svfiprintf_r+0x32>
 800978c:	690b      	ldr	r3, [r1, #16]
 800978e:	b963      	cbnz	r3, 80097aa <_svfiprintf_r+0x32>
 8009790:	2140      	movs	r1, #64	; 0x40
 8009792:	f7fd fb7b 	bl	8006e8c <_malloc_r>
 8009796:	6028      	str	r0, [r5, #0]
 8009798:	6128      	str	r0, [r5, #16]
 800979a:	b920      	cbnz	r0, 80097a6 <_svfiprintf_r+0x2e>
 800979c:	230c      	movs	r3, #12
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	f04f 30ff 	mov.w	r0, #4294967295
 80097a4:	e0d1      	b.n	800994a <_svfiprintf_r+0x1d2>
 80097a6:	2340      	movs	r3, #64	; 0x40
 80097a8:	616b      	str	r3, [r5, #20]
 80097aa:	2300      	movs	r3, #0
 80097ac:	9309      	str	r3, [sp, #36]	; 0x24
 80097ae:	2320      	movs	r3, #32
 80097b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80097b8:	2330      	movs	r3, #48	; 0x30
 80097ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009964 <_svfiprintf_r+0x1ec>
 80097be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097c2:	f04f 0901 	mov.w	r9, #1
 80097c6:	4623      	mov	r3, r4
 80097c8:	469a      	mov	sl, r3
 80097ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ce:	b10a      	cbz	r2, 80097d4 <_svfiprintf_r+0x5c>
 80097d0:	2a25      	cmp	r2, #37	; 0x25
 80097d2:	d1f9      	bne.n	80097c8 <_svfiprintf_r+0x50>
 80097d4:	ebba 0b04 	subs.w	fp, sl, r4
 80097d8:	d00b      	beq.n	80097f2 <_svfiprintf_r+0x7a>
 80097da:	465b      	mov	r3, fp
 80097dc:	4622      	mov	r2, r4
 80097de:	4629      	mov	r1, r5
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7ff ff6d 	bl	80096c0 <__ssputs_r>
 80097e6:	3001      	adds	r0, #1
 80097e8:	f000 80aa 	beq.w	8009940 <_svfiprintf_r+0x1c8>
 80097ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097ee:	445a      	add	r2, fp
 80097f0:	9209      	str	r2, [sp, #36]	; 0x24
 80097f2:	f89a 3000 	ldrb.w	r3, [sl]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 80a2 	beq.w	8009940 <_svfiprintf_r+0x1c8>
 80097fc:	2300      	movs	r3, #0
 80097fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009806:	f10a 0a01 	add.w	sl, sl, #1
 800980a:	9304      	str	r3, [sp, #16]
 800980c:	9307      	str	r3, [sp, #28]
 800980e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009812:	931a      	str	r3, [sp, #104]	; 0x68
 8009814:	4654      	mov	r4, sl
 8009816:	2205      	movs	r2, #5
 8009818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981c:	4851      	ldr	r0, [pc, #324]	; (8009964 <_svfiprintf_r+0x1ec>)
 800981e:	f7f6 fcdf 	bl	80001e0 <memchr>
 8009822:	9a04      	ldr	r2, [sp, #16]
 8009824:	b9d8      	cbnz	r0, 800985e <_svfiprintf_r+0xe6>
 8009826:	06d0      	lsls	r0, r2, #27
 8009828:	bf44      	itt	mi
 800982a:	2320      	movmi	r3, #32
 800982c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009830:	0711      	lsls	r1, r2, #28
 8009832:	bf44      	itt	mi
 8009834:	232b      	movmi	r3, #43	; 0x2b
 8009836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800983a:	f89a 3000 	ldrb.w	r3, [sl]
 800983e:	2b2a      	cmp	r3, #42	; 0x2a
 8009840:	d015      	beq.n	800986e <_svfiprintf_r+0xf6>
 8009842:	9a07      	ldr	r2, [sp, #28]
 8009844:	4654      	mov	r4, sl
 8009846:	2000      	movs	r0, #0
 8009848:	f04f 0c0a 	mov.w	ip, #10
 800984c:	4621      	mov	r1, r4
 800984e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009852:	3b30      	subs	r3, #48	; 0x30
 8009854:	2b09      	cmp	r3, #9
 8009856:	d94e      	bls.n	80098f6 <_svfiprintf_r+0x17e>
 8009858:	b1b0      	cbz	r0, 8009888 <_svfiprintf_r+0x110>
 800985a:	9207      	str	r2, [sp, #28]
 800985c:	e014      	b.n	8009888 <_svfiprintf_r+0x110>
 800985e:	eba0 0308 	sub.w	r3, r0, r8
 8009862:	fa09 f303 	lsl.w	r3, r9, r3
 8009866:	4313      	orrs	r3, r2
 8009868:	9304      	str	r3, [sp, #16]
 800986a:	46a2      	mov	sl, r4
 800986c:	e7d2      	b.n	8009814 <_svfiprintf_r+0x9c>
 800986e:	9b03      	ldr	r3, [sp, #12]
 8009870:	1d19      	adds	r1, r3, #4
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	9103      	str	r1, [sp, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	bfbb      	ittet	lt
 800987a:	425b      	neglt	r3, r3
 800987c:	f042 0202 	orrlt.w	r2, r2, #2
 8009880:	9307      	strge	r3, [sp, #28]
 8009882:	9307      	strlt	r3, [sp, #28]
 8009884:	bfb8      	it	lt
 8009886:	9204      	strlt	r2, [sp, #16]
 8009888:	7823      	ldrb	r3, [r4, #0]
 800988a:	2b2e      	cmp	r3, #46	; 0x2e
 800988c:	d10c      	bne.n	80098a8 <_svfiprintf_r+0x130>
 800988e:	7863      	ldrb	r3, [r4, #1]
 8009890:	2b2a      	cmp	r3, #42	; 0x2a
 8009892:	d135      	bne.n	8009900 <_svfiprintf_r+0x188>
 8009894:	9b03      	ldr	r3, [sp, #12]
 8009896:	1d1a      	adds	r2, r3, #4
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	9203      	str	r2, [sp, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	bfb8      	it	lt
 80098a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80098a4:	3402      	adds	r4, #2
 80098a6:	9305      	str	r3, [sp, #20]
 80098a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009974 <_svfiprintf_r+0x1fc>
 80098ac:	7821      	ldrb	r1, [r4, #0]
 80098ae:	2203      	movs	r2, #3
 80098b0:	4650      	mov	r0, sl
 80098b2:	f7f6 fc95 	bl	80001e0 <memchr>
 80098b6:	b140      	cbz	r0, 80098ca <_svfiprintf_r+0x152>
 80098b8:	2340      	movs	r3, #64	; 0x40
 80098ba:	eba0 000a 	sub.w	r0, r0, sl
 80098be:	fa03 f000 	lsl.w	r0, r3, r0
 80098c2:	9b04      	ldr	r3, [sp, #16]
 80098c4:	4303      	orrs	r3, r0
 80098c6:	3401      	adds	r4, #1
 80098c8:	9304      	str	r3, [sp, #16]
 80098ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ce:	4826      	ldr	r0, [pc, #152]	; (8009968 <_svfiprintf_r+0x1f0>)
 80098d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098d4:	2206      	movs	r2, #6
 80098d6:	f7f6 fc83 	bl	80001e0 <memchr>
 80098da:	2800      	cmp	r0, #0
 80098dc:	d038      	beq.n	8009950 <_svfiprintf_r+0x1d8>
 80098de:	4b23      	ldr	r3, [pc, #140]	; (800996c <_svfiprintf_r+0x1f4>)
 80098e0:	bb1b      	cbnz	r3, 800992a <_svfiprintf_r+0x1b2>
 80098e2:	9b03      	ldr	r3, [sp, #12]
 80098e4:	3307      	adds	r3, #7
 80098e6:	f023 0307 	bic.w	r3, r3, #7
 80098ea:	3308      	adds	r3, #8
 80098ec:	9303      	str	r3, [sp, #12]
 80098ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f0:	4433      	add	r3, r6
 80098f2:	9309      	str	r3, [sp, #36]	; 0x24
 80098f4:	e767      	b.n	80097c6 <_svfiprintf_r+0x4e>
 80098f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80098fa:	460c      	mov	r4, r1
 80098fc:	2001      	movs	r0, #1
 80098fe:	e7a5      	b.n	800984c <_svfiprintf_r+0xd4>
 8009900:	2300      	movs	r3, #0
 8009902:	3401      	adds	r4, #1
 8009904:	9305      	str	r3, [sp, #20]
 8009906:	4619      	mov	r1, r3
 8009908:	f04f 0c0a 	mov.w	ip, #10
 800990c:	4620      	mov	r0, r4
 800990e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009912:	3a30      	subs	r2, #48	; 0x30
 8009914:	2a09      	cmp	r2, #9
 8009916:	d903      	bls.n	8009920 <_svfiprintf_r+0x1a8>
 8009918:	2b00      	cmp	r3, #0
 800991a:	d0c5      	beq.n	80098a8 <_svfiprintf_r+0x130>
 800991c:	9105      	str	r1, [sp, #20]
 800991e:	e7c3      	b.n	80098a8 <_svfiprintf_r+0x130>
 8009920:	fb0c 2101 	mla	r1, ip, r1, r2
 8009924:	4604      	mov	r4, r0
 8009926:	2301      	movs	r3, #1
 8009928:	e7f0      	b.n	800990c <_svfiprintf_r+0x194>
 800992a:	ab03      	add	r3, sp, #12
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	462a      	mov	r2, r5
 8009930:	4b0f      	ldr	r3, [pc, #60]	; (8009970 <_svfiprintf_r+0x1f8>)
 8009932:	a904      	add	r1, sp, #16
 8009934:	4638      	mov	r0, r7
 8009936:	f7fd fbbd 	bl	80070b4 <_printf_float>
 800993a:	1c42      	adds	r2, r0, #1
 800993c:	4606      	mov	r6, r0
 800993e:	d1d6      	bne.n	80098ee <_svfiprintf_r+0x176>
 8009940:	89ab      	ldrh	r3, [r5, #12]
 8009942:	065b      	lsls	r3, r3, #25
 8009944:	f53f af2c 	bmi.w	80097a0 <_svfiprintf_r+0x28>
 8009948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800994a:	b01d      	add	sp, #116	; 0x74
 800994c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009950:	ab03      	add	r3, sp, #12
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	462a      	mov	r2, r5
 8009956:	4b06      	ldr	r3, [pc, #24]	; (8009970 <_svfiprintf_r+0x1f8>)
 8009958:	a904      	add	r1, sp, #16
 800995a:	4638      	mov	r0, r7
 800995c:	f7fd fe4e 	bl	80075fc <_printf_i>
 8009960:	e7eb      	b.n	800993a <_svfiprintf_r+0x1c2>
 8009962:	bf00      	nop
 8009964:	0800aadc 	.word	0x0800aadc
 8009968:	0800aae6 	.word	0x0800aae6
 800996c:	080070b5 	.word	0x080070b5
 8009970:	080096c1 	.word	0x080096c1
 8009974:	0800aae2 	.word	0x0800aae2

08009978 <__sread>:
 8009978:	b510      	push	{r4, lr}
 800997a:	460c      	mov	r4, r1
 800997c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009980:	f000 fa44 	bl	8009e0c <_read_r>
 8009984:	2800      	cmp	r0, #0
 8009986:	bfab      	itete	ge
 8009988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800998a:	89a3      	ldrhlt	r3, [r4, #12]
 800998c:	181b      	addge	r3, r3, r0
 800998e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009992:	bfac      	ite	ge
 8009994:	6563      	strge	r3, [r4, #84]	; 0x54
 8009996:	81a3      	strhlt	r3, [r4, #12]
 8009998:	bd10      	pop	{r4, pc}

0800999a <__swrite>:
 800999a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800999e:	461f      	mov	r7, r3
 80099a0:	898b      	ldrh	r3, [r1, #12]
 80099a2:	05db      	lsls	r3, r3, #23
 80099a4:	4605      	mov	r5, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	4616      	mov	r6, r2
 80099aa:	d505      	bpl.n	80099b8 <__swrite+0x1e>
 80099ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b0:	2302      	movs	r3, #2
 80099b2:	2200      	movs	r2, #0
 80099b4:	f000 f864 	bl	8009a80 <_lseek_r>
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	4632      	mov	r2, r6
 80099c6:	463b      	mov	r3, r7
 80099c8:	4628      	mov	r0, r5
 80099ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099ce:	f7fe ba39 	b.w	8007e44 <_write_r>

080099d2 <__sseek>:
 80099d2:	b510      	push	{r4, lr}
 80099d4:	460c      	mov	r4, r1
 80099d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099da:	f000 f851 	bl	8009a80 <_lseek_r>
 80099de:	1c43      	adds	r3, r0, #1
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	bf15      	itete	ne
 80099e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80099e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099ee:	81a3      	strheq	r3, [r4, #12]
 80099f0:	bf18      	it	ne
 80099f2:	81a3      	strhne	r3, [r4, #12]
 80099f4:	bd10      	pop	{r4, pc}

080099f6 <__sclose>:
 80099f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099fa:	f000 b81f 	b.w	8009a3c <_close_r>
	...

08009a00 <__assert_func>:
 8009a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a02:	4614      	mov	r4, r2
 8009a04:	461a      	mov	r2, r3
 8009a06:	4b09      	ldr	r3, [pc, #36]	; (8009a2c <__assert_func+0x2c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	68d8      	ldr	r0, [r3, #12]
 8009a0e:	b14c      	cbz	r4, 8009a24 <__assert_func+0x24>
 8009a10:	4b07      	ldr	r3, [pc, #28]	; (8009a30 <__assert_func+0x30>)
 8009a12:	9100      	str	r1, [sp, #0]
 8009a14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a18:	4906      	ldr	r1, [pc, #24]	; (8009a34 <__assert_func+0x34>)
 8009a1a:	462b      	mov	r3, r5
 8009a1c:	f000 f81e 	bl	8009a5c <fiprintf>
 8009a20:	f7fd f986 	bl	8006d30 <abort>
 8009a24:	4b04      	ldr	r3, [pc, #16]	; (8009a38 <__assert_func+0x38>)
 8009a26:	461c      	mov	r4, r3
 8009a28:	e7f3      	b.n	8009a12 <__assert_func+0x12>
 8009a2a:	bf00      	nop
 8009a2c:	2000003c 	.word	0x2000003c
 8009a30:	0800aaed 	.word	0x0800aaed
 8009a34:	0800aafa 	.word	0x0800aafa
 8009a38:	0800ab28 	.word	0x0800ab28

08009a3c <_close_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4d06      	ldr	r5, [pc, #24]	; (8009a58 <_close_r+0x1c>)
 8009a40:	2300      	movs	r3, #0
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	602b      	str	r3, [r5, #0]
 8009a48:	f7f7 ffb3 	bl	80019b2 <_close>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_close_r+0x1a>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_close_r+0x1a>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	20000628 	.word	0x20000628

08009a5c <fiprintf>:
 8009a5c:	b40e      	push	{r1, r2, r3}
 8009a5e:	b503      	push	{r0, r1, lr}
 8009a60:	4601      	mov	r1, r0
 8009a62:	ab03      	add	r3, sp, #12
 8009a64:	4805      	ldr	r0, [pc, #20]	; (8009a7c <fiprintf+0x20>)
 8009a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a6a:	6800      	ldr	r0, [r0, #0]
 8009a6c:	9301      	str	r3, [sp, #4]
 8009a6e:	f000 f89d 	bl	8009bac <_vfiprintf_r>
 8009a72:	b002      	add	sp, #8
 8009a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a78:	b003      	add	sp, #12
 8009a7a:	4770      	bx	lr
 8009a7c:	2000003c 	.word	0x2000003c

08009a80 <_lseek_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4d07      	ldr	r5, [pc, #28]	; (8009aa0 <_lseek_r+0x20>)
 8009a84:	4604      	mov	r4, r0
 8009a86:	4608      	mov	r0, r1
 8009a88:	4611      	mov	r1, r2
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	602a      	str	r2, [r5, #0]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f7f7 ffb6 	bl	8001a00 <_lseek>
 8009a94:	1c43      	adds	r3, r0, #1
 8009a96:	d102      	bne.n	8009a9e <_lseek_r+0x1e>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	b103      	cbz	r3, 8009a9e <_lseek_r+0x1e>
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	bd38      	pop	{r3, r4, r5, pc}
 8009aa0:	20000628 	.word	0x20000628

08009aa4 <__ascii_mbtowc>:
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	b901      	cbnz	r1, 8009aaa <__ascii_mbtowc+0x6>
 8009aa8:	a901      	add	r1, sp, #4
 8009aaa:	b142      	cbz	r2, 8009abe <__ascii_mbtowc+0x1a>
 8009aac:	b14b      	cbz	r3, 8009ac2 <__ascii_mbtowc+0x1e>
 8009aae:	7813      	ldrb	r3, [r2, #0]
 8009ab0:	600b      	str	r3, [r1, #0]
 8009ab2:	7812      	ldrb	r2, [r2, #0]
 8009ab4:	1e10      	subs	r0, r2, #0
 8009ab6:	bf18      	it	ne
 8009ab8:	2001      	movne	r0, #1
 8009aba:	b002      	add	sp, #8
 8009abc:	4770      	bx	lr
 8009abe:	4610      	mov	r0, r2
 8009ac0:	e7fb      	b.n	8009aba <__ascii_mbtowc+0x16>
 8009ac2:	f06f 0001 	mvn.w	r0, #1
 8009ac6:	e7f8      	b.n	8009aba <__ascii_mbtowc+0x16>

08009ac8 <memmove>:
 8009ac8:	4288      	cmp	r0, r1
 8009aca:	b510      	push	{r4, lr}
 8009acc:	eb01 0402 	add.w	r4, r1, r2
 8009ad0:	d902      	bls.n	8009ad8 <memmove+0x10>
 8009ad2:	4284      	cmp	r4, r0
 8009ad4:	4623      	mov	r3, r4
 8009ad6:	d807      	bhi.n	8009ae8 <memmove+0x20>
 8009ad8:	1e43      	subs	r3, r0, #1
 8009ada:	42a1      	cmp	r1, r4
 8009adc:	d008      	beq.n	8009af0 <memmove+0x28>
 8009ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ae6:	e7f8      	b.n	8009ada <memmove+0x12>
 8009ae8:	4402      	add	r2, r0
 8009aea:	4601      	mov	r1, r0
 8009aec:	428a      	cmp	r2, r1
 8009aee:	d100      	bne.n	8009af2 <memmove+0x2a>
 8009af0:	bd10      	pop	{r4, pc}
 8009af2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009af6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009afa:	e7f7      	b.n	8009aec <memmove+0x24>

08009afc <_realloc_r>:
 8009afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b00:	4680      	mov	r8, r0
 8009b02:	4614      	mov	r4, r2
 8009b04:	460e      	mov	r6, r1
 8009b06:	b921      	cbnz	r1, 8009b12 <_realloc_r+0x16>
 8009b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	f7fd b9bd 	b.w	8006e8c <_malloc_r>
 8009b12:	b92a      	cbnz	r2, 8009b20 <_realloc_r+0x24>
 8009b14:	f7fd f94e 	bl	8006db4 <_free_r>
 8009b18:	4625      	mov	r5, r4
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b20:	f000 faba 	bl	800a098 <_malloc_usable_size_r>
 8009b24:	4284      	cmp	r4, r0
 8009b26:	4607      	mov	r7, r0
 8009b28:	d802      	bhi.n	8009b30 <_realloc_r+0x34>
 8009b2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b2e:	d812      	bhi.n	8009b56 <_realloc_r+0x5a>
 8009b30:	4621      	mov	r1, r4
 8009b32:	4640      	mov	r0, r8
 8009b34:	f7fd f9aa 	bl	8006e8c <_malloc_r>
 8009b38:	4605      	mov	r5, r0
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d0ed      	beq.n	8009b1a <_realloc_r+0x1e>
 8009b3e:	42bc      	cmp	r4, r7
 8009b40:	4622      	mov	r2, r4
 8009b42:	4631      	mov	r1, r6
 8009b44:	bf28      	it	cs
 8009b46:	463a      	movcs	r2, r7
 8009b48:	f7ff fa05 	bl	8008f56 <memcpy>
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4640      	mov	r0, r8
 8009b50:	f7fd f930 	bl	8006db4 <_free_r>
 8009b54:	e7e1      	b.n	8009b1a <_realloc_r+0x1e>
 8009b56:	4635      	mov	r5, r6
 8009b58:	e7df      	b.n	8009b1a <_realloc_r+0x1e>

08009b5a <__sfputc_r>:
 8009b5a:	6893      	ldr	r3, [r2, #8]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	b410      	push	{r4}
 8009b62:	6093      	str	r3, [r2, #8]
 8009b64:	da08      	bge.n	8009b78 <__sfputc_r+0x1e>
 8009b66:	6994      	ldr	r4, [r2, #24]
 8009b68:	42a3      	cmp	r3, r4
 8009b6a:	db01      	blt.n	8009b70 <__sfputc_r+0x16>
 8009b6c:	290a      	cmp	r1, #10
 8009b6e:	d103      	bne.n	8009b78 <__sfputc_r+0x1e>
 8009b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b74:	f000 b95c 	b.w	8009e30 <__swbuf_r>
 8009b78:	6813      	ldr	r3, [r2, #0]
 8009b7a:	1c58      	adds	r0, r3, #1
 8009b7c:	6010      	str	r0, [r2, #0]
 8009b7e:	7019      	strb	r1, [r3, #0]
 8009b80:	4608      	mov	r0, r1
 8009b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <__sfputs_r>:
 8009b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	460f      	mov	r7, r1
 8009b8e:	4614      	mov	r4, r2
 8009b90:	18d5      	adds	r5, r2, r3
 8009b92:	42ac      	cmp	r4, r5
 8009b94:	d101      	bne.n	8009b9a <__sfputs_r+0x12>
 8009b96:	2000      	movs	r0, #0
 8009b98:	e007      	b.n	8009baa <__sfputs_r+0x22>
 8009b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9e:	463a      	mov	r2, r7
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f7ff ffda 	bl	8009b5a <__sfputc_r>
 8009ba6:	1c43      	adds	r3, r0, #1
 8009ba8:	d1f3      	bne.n	8009b92 <__sfputs_r+0xa>
 8009baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009bac <_vfiprintf_r>:
 8009bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb0:	460d      	mov	r5, r1
 8009bb2:	b09d      	sub	sp, #116	; 0x74
 8009bb4:	4614      	mov	r4, r2
 8009bb6:	4698      	mov	r8, r3
 8009bb8:	4606      	mov	r6, r0
 8009bba:	b118      	cbz	r0, 8009bc4 <_vfiprintf_r+0x18>
 8009bbc:	6983      	ldr	r3, [r0, #24]
 8009bbe:	b90b      	cbnz	r3, 8009bc4 <_vfiprintf_r+0x18>
 8009bc0:	f7ff f924 	bl	8008e0c <__sinit>
 8009bc4:	4b89      	ldr	r3, [pc, #548]	; (8009dec <_vfiprintf_r+0x240>)
 8009bc6:	429d      	cmp	r5, r3
 8009bc8:	d11b      	bne.n	8009c02 <_vfiprintf_r+0x56>
 8009bca:	6875      	ldr	r5, [r6, #4]
 8009bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bce:	07d9      	lsls	r1, r3, #31
 8009bd0:	d405      	bmi.n	8009bde <_vfiprintf_r+0x32>
 8009bd2:	89ab      	ldrh	r3, [r5, #12]
 8009bd4:	059a      	lsls	r2, r3, #22
 8009bd6:	d402      	bmi.n	8009bde <_vfiprintf_r+0x32>
 8009bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bda:	f7ff f9ba 	bl	8008f52 <__retarget_lock_acquire_recursive>
 8009bde:	89ab      	ldrh	r3, [r5, #12]
 8009be0:	071b      	lsls	r3, r3, #28
 8009be2:	d501      	bpl.n	8009be8 <_vfiprintf_r+0x3c>
 8009be4:	692b      	ldr	r3, [r5, #16]
 8009be6:	b9eb      	cbnz	r3, 8009c24 <_vfiprintf_r+0x78>
 8009be8:	4629      	mov	r1, r5
 8009bea:	4630      	mov	r0, r6
 8009bec:	f000 f980 	bl	8009ef0 <__swsetup_r>
 8009bf0:	b1c0      	cbz	r0, 8009c24 <_vfiprintf_r+0x78>
 8009bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bf4:	07dc      	lsls	r4, r3, #31
 8009bf6:	d50e      	bpl.n	8009c16 <_vfiprintf_r+0x6a>
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfc:	b01d      	add	sp, #116	; 0x74
 8009bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c02:	4b7b      	ldr	r3, [pc, #492]	; (8009df0 <_vfiprintf_r+0x244>)
 8009c04:	429d      	cmp	r5, r3
 8009c06:	d101      	bne.n	8009c0c <_vfiprintf_r+0x60>
 8009c08:	68b5      	ldr	r5, [r6, #8]
 8009c0a:	e7df      	b.n	8009bcc <_vfiprintf_r+0x20>
 8009c0c:	4b79      	ldr	r3, [pc, #484]	; (8009df4 <_vfiprintf_r+0x248>)
 8009c0e:	429d      	cmp	r5, r3
 8009c10:	bf08      	it	eq
 8009c12:	68f5      	ldreq	r5, [r6, #12]
 8009c14:	e7da      	b.n	8009bcc <_vfiprintf_r+0x20>
 8009c16:	89ab      	ldrh	r3, [r5, #12]
 8009c18:	0598      	lsls	r0, r3, #22
 8009c1a:	d4ed      	bmi.n	8009bf8 <_vfiprintf_r+0x4c>
 8009c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c1e:	f7ff f999 	bl	8008f54 <__retarget_lock_release_recursive>
 8009c22:	e7e9      	b.n	8009bf8 <_vfiprintf_r+0x4c>
 8009c24:	2300      	movs	r3, #0
 8009c26:	9309      	str	r3, [sp, #36]	; 0x24
 8009c28:	2320      	movs	r3, #32
 8009c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c32:	2330      	movs	r3, #48	; 0x30
 8009c34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009df8 <_vfiprintf_r+0x24c>
 8009c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c3c:	f04f 0901 	mov.w	r9, #1
 8009c40:	4623      	mov	r3, r4
 8009c42:	469a      	mov	sl, r3
 8009c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c48:	b10a      	cbz	r2, 8009c4e <_vfiprintf_r+0xa2>
 8009c4a:	2a25      	cmp	r2, #37	; 0x25
 8009c4c:	d1f9      	bne.n	8009c42 <_vfiprintf_r+0x96>
 8009c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c52:	d00b      	beq.n	8009c6c <_vfiprintf_r+0xc0>
 8009c54:	465b      	mov	r3, fp
 8009c56:	4622      	mov	r2, r4
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f7ff ff94 	bl	8009b88 <__sfputs_r>
 8009c60:	3001      	adds	r0, #1
 8009c62:	f000 80aa 	beq.w	8009dba <_vfiprintf_r+0x20e>
 8009c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c68:	445a      	add	r2, fp
 8009c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 80a2 	beq.w	8009dba <_vfiprintf_r+0x20e>
 8009c76:	2300      	movs	r3, #0
 8009c78:	f04f 32ff 	mov.w	r2, #4294967295
 8009c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c80:	f10a 0a01 	add.w	sl, sl, #1
 8009c84:	9304      	str	r3, [sp, #16]
 8009c86:	9307      	str	r3, [sp, #28]
 8009c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8009c8e:	4654      	mov	r4, sl
 8009c90:	2205      	movs	r2, #5
 8009c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c96:	4858      	ldr	r0, [pc, #352]	; (8009df8 <_vfiprintf_r+0x24c>)
 8009c98:	f7f6 faa2 	bl	80001e0 <memchr>
 8009c9c:	9a04      	ldr	r2, [sp, #16]
 8009c9e:	b9d8      	cbnz	r0, 8009cd8 <_vfiprintf_r+0x12c>
 8009ca0:	06d1      	lsls	r1, r2, #27
 8009ca2:	bf44      	itt	mi
 8009ca4:	2320      	movmi	r3, #32
 8009ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009caa:	0713      	lsls	r3, r2, #28
 8009cac:	bf44      	itt	mi
 8009cae:	232b      	movmi	r3, #43	; 0x2b
 8009cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cba:	d015      	beq.n	8009ce8 <_vfiprintf_r+0x13c>
 8009cbc:	9a07      	ldr	r2, [sp, #28]
 8009cbe:	4654      	mov	r4, sl
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	f04f 0c0a 	mov.w	ip, #10
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ccc:	3b30      	subs	r3, #48	; 0x30
 8009cce:	2b09      	cmp	r3, #9
 8009cd0:	d94e      	bls.n	8009d70 <_vfiprintf_r+0x1c4>
 8009cd2:	b1b0      	cbz	r0, 8009d02 <_vfiprintf_r+0x156>
 8009cd4:	9207      	str	r2, [sp, #28]
 8009cd6:	e014      	b.n	8009d02 <_vfiprintf_r+0x156>
 8009cd8:	eba0 0308 	sub.w	r3, r0, r8
 8009cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	9304      	str	r3, [sp, #16]
 8009ce4:	46a2      	mov	sl, r4
 8009ce6:	e7d2      	b.n	8009c8e <_vfiprintf_r+0xe2>
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	1d19      	adds	r1, r3, #4
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	9103      	str	r1, [sp, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	bfbb      	ittet	lt
 8009cf4:	425b      	neglt	r3, r3
 8009cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8009cfa:	9307      	strge	r3, [sp, #28]
 8009cfc:	9307      	strlt	r3, [sp, #28]
 8009cfe:	bfb8      	it	lt
 8009d00:	9204      	strlt	r2, [sp, #16]
 8009d02:	7823      	ldrb	r3, [r4, #0]
 8009d04:	2b2e      	cmp	r3, #46	; 0x2e
 8009d06:	d10c      	bne.n	8009d22 <_vfiprintf_r+0x176>
 8009d08:	7863      	ldrb	r3, [r4, #1]
 8009d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d0c:	d135      	bne.n	8009d7a <_vfiprintf_r+0x1ce>
 8009d0e:	9b03      	ldr	r3, [sp, #12]
 8009d10:	1d1a      	adds	r2, r3, #4
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	9203      	str	r2, [sp, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	bfb8      	it	lt
 8009d1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d1e:	3402      	adds	r4, #2
 8009d20:	9305      	str	r3, [sp, #20]
 8009d22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e08 <_vfiprintf_r+0x25c>
 8009d26:	7821      	ldrb	r1, [r4, #0]
 8009d28:	2203      	movs	r2, #3
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	f7f6 fa58 	bl	80001e0 <memchr>
 8009d30:	b140      	cbz	r0, 8009d44 <_vfiprintf_r+0x198>
 8009d32:	2340      	movs	r3, #64	; 0x40
 8009d34:	eba0 000a 	sub.w	r0, r0, sl
 8009d38:	fa03 f000 	lsl.w	r0, r3, r0
 8009d3c:	9b04      	ldr	r3, [sp, #16]
 8009d3e:	4303      	orrs	r3, r0
 8009d40:	3401      	adds	r4, #1
 8009d42:	9304      	str	r3, [sp, #16]
 8009d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d48:	482c      	ldr	r0, [pc, #176]	; (8009dfc <_vfiprintf_r+0x250>)
 8009d4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d4e:	2206      	movs	r2, #6
 8009d50:	f7f6 fa46 	bl	80001e0 <memchr>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d03f      	beq.n	8009dd8 <_vfiprintf_r+0x22c>
 8009d58:	4b29      	ldr	r3, [pc, #164]	; (8009e00 <_vfiprintf_r+0x254>)
 8009d5a:	bb1b      	cbnz	r3, 8009da4 <_vfiprintf_r+0x1f8>
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	3307      	adds	r3, #7
 8009d60:	f023 0307 	bic.w	r3, r3, #7
 8009d64:	3308      	adds	r3, #8
 8009d66:	9303      	str	r3, [sp, #12]
 8009d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6a:	443b      	add	r3, r7
 8009d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d6e:	e767      	b.n	8009c40 <_vfiprintf_r+0x94>
 8009d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d74:	460c      	mov	r4, r1
 8009d76:	2001      	movs	r0, #1
 8009d78:	e7a5      	b.n	8009cc6 <_vfiprintf_r+0x11a>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	3401      	adds	r4, #1
 8009d7e:	9305      	str	r3, [sp, #20]
 8009d80:	4619      	mov	r1, r3
 8009d82:	f04f 0c0a 	mov.w	ip, #10
 8009d86:	4620      	mov	r0, r4
 8009d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d8c:	3a30      	subs	r2, #48	; 0x30
 8009d8e:	2a09      	cmp	r2, #9
 8009d90:	d903      	bls.n	8009d9a <_vfiprintf_r+0x1ee>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0c5      	beq.n	8009d22 <_vfiprintf_r+0x176>
 8009d96:	9105      	str	r1, [sp, #20]
 8009d98:	e7c3      	b.n	8009d22 <_vfiprintf_r+0x176>
 8009d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d9e:	4604      	mov	r4, r0
 8009da0:	2301      	movs	r3, #1
 8009da2:	e7f0      	b.n	8009d86 <_vfiprintf_r+0x1da>
 8009da4:	ab03      	add	r3, sp, #12
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	462a      	mov	r2, r5
 8009daa:	4b16      	ldr	r3, [pc, #88]	; (8009e04 <_vfiprintf_r+0x258>)
 8009dac:	a904      	add	r1, sp, #16
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7fd f980 	bl	80070b4 <_printf_float>
 8009db4:	4607      	mov	r7, r0
 8009db6:	1c78      	adds	r0, r7, #1
 8009db8:	d1d6      	bne.n	8009d68 <_vfiprintf_r+0x1bc>
 8009dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dbc:	07d9      	lsls	r1, r3, #31
 8009dbe:	d405      	bmi.n	8009dcc <_vfiprintf_r+0x220>
 8009dc0:	89ab      	ldrh	r3, [r5, #12]
 8009dc2:	059a      	lsls	r2, r3, #22
 8009dc4:	d402      	bmi.n	8009dcc <_vfiprintf_r+0x220>
 8009dc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dc8:	f7ff f8c4 	bl	8008f54 <__retarget_lock_release_recursive>
 8009dcc:	89ab      	ldrh	r3, [r5, #12]
 8009dce:	065b      	lsls	r3, r3, #25
 8009dd0:	f53f af12 	bmi.w	8009bf8 <_vfiprintf_r+0x4c>
 8009dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dd6:	e711      	b.n	8009bfc <_vfiprintf_r+0x50>
 8009dd8:	ab03      	add	r3, sp, #12
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	462a      	mov	r2, r5
 8009dde:	4b09      	ldr	r3, [pc, #36]	; (8009e04 <_vfiprintf_r+0x258>)
 8009de0:	a904      	add	r1, sp, #16
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7fd fc0a 	bl	80075fc <_printf_i>
 8009de8:	e7e4      	b.n	8009db4 <_vfiprintf_r+0x208>
 8009dea:	bf00      	nop
 8009dec:	0800a944 	.word	0x0800a944
 8009df0:	0800a964 	.word	0x0800a964
 8009df4:	0800a924 	.word	0x0800a924
 8009df8:	0800aadc 	.word	0x0800aadc
 8009dfc:	0800aae6 	.word	0x0800aae6
 8009e00:	080070b5 	.word	0x080070b5
 8009e04:	08009b89 	.word	0x08009b89
 8009e08:	0800aae2 	.word	0x0800aae2

08009e0c <_read_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	4d07      	ldr	r5, [pc, #28]	; (8009e2c <_read_r+0x20>)
 8009e10:	4604      	mov	r4, r0
 8009e12:	4608      	mov	r0, r1
 8009e14:	4611      	mov	r1, r2
 8009e16:	2200      	movs	r2, #0
 8009e18:	602a      	str	r2, [r5, #0]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	f7f7 fd90 	bl	8001940 <_read>
 8009e20:	1c43      	adds	r3, r0, #1
 8009e22:	d102      	bne.n	8009e2a <_read_r+0x1e>
 8009e24:	682b      	ldr	r3, [r5, #0]
 8009e26:	b103      	cbz	r3, 8009e2a <_read_r+0x1e>
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	bd38      	pop	{r3, r4, r5, pc}
 8009e2c:	20000628 	.word	0x20000628

08009e30 <__swbuf_r>:
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	460e      	mov	r6, r1
 8009e34:	4614      	mov	r4, r2
 8009e36:	4605      	mov	r5, r0
 8009e38:	b118      	cbz	r0, 8009e42 <__swbuf_r+0x12>
 8009e3a:	6983      	ldr	r3, [r0, #24]
 8009e3c:	b90b      	cbnz	r3, 8009e42 <__swbuf_r+0x12>
 8009e3e:	f7fe ffe5 	bl	8008e0c <__sinit>
 8009e42:	4b21      	ldr	r3, [pc, #132]	; (8009ec8 <__swbuf_r+0x98>)
 8009e44:	429c      	cmp	r4, r3
 8009e46:	d12b      	bne.n	8009ea0 <__swbuf_r+0x70>
 8009e48:	686c      	ldr	r4, [r5, #4]
 8009e4a:	69a3      	ldr	r3, [r4, #24]
 8009e4c:	60a3      	str	r3, [r4, #8]
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	071a      	lsls	r2, r3, #28
 8009e52:	d52f      	bpl.n	8009eb4 <__swbuf_r+0x84>
 8009e54:	6923      	ldr	r3, [r4, #16]
 8009e56:	b36b      	cbz	r3, 8009eb4 <__swbuf_r+0x84>
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	6820      	ldr	r0, [r4, #0]
 8009e5c:	1ac0      	subs	r0, r0, r3
 8009e5e:	6963      	ldr	r3, [r4, #20]
 8009e60:	b2f6      	uxtb	r6, r6
 8009e62:	4283      	cmp	r3, r0
 8009e64:	4637      	mov	r7, r6
 8009e66:	dc04      	bgt.n	8009e72 <__swbuf_r+0x42>
 8009e68:	4621      	mov	r1, r4
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	f7fe fefc 	bl	8008c68 <_fflush_r>
 8009e70:	bb30      	cbnz	r0, 8009ec0 <__swbuf_r+0x90>
 8009e72:	68a3      	ldr	r3, [r4, #8]
 8009e74:	3b01      	subs	r3, #1
 8009e76:	60a3      	str	r3, [r4, #8]
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	1c5a      	adds	r2, r3, #1
 8009e7c:	6022      	str	r2, [r4, #0]
 8009e7e:	701e      	strb	r6, [r3, #0]
 8009e80:	6963      	ldr	r3, [r4, #20]
 8009e82:	3001      	adds	r0, #1
 8009e84:	4283      	cmp	r3, r0
 8009e86:	d004      	beq.n	8009e92 <__swbuf_r+0x62>
 8009e88:	89a3      	ldrh	r3, [r4, #12]
 8009e8a:	07db      	lsls	r3, r3, #31
 8009e8c:	d506      	bpl.n	8009e9c <__swbuf_r+0x6c>
 8009e8e:	2e0a      	cmp	r6, #10
 8009e90:	d104      	bne.n	8009e9c <__swbuf_r+0x6c>
 8009e92:	4621      	mov	r1, r4
 8009e94:	4628      	mov	r0, r5
 8009e96:	f7fe fee7 	bl	8008c68 <_fflush_r>
 8009e9a:	b988      	cbnz	r0, 8009ec0 <__swbuf_r+0x90>
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea0:	4b0a      	ldr	r3, [pc, #40]	; (8009ecc <__swbuf_r+0x9c>)
 8009ea2:	429c      	cmp	r4, r3
 8009ea4:	d101      	bne.n	8009eaa <__swbuf_r+0x7a>
 8009ea6:	68ac      	ldr	r4, [r5, #8]
 8009ea8:	e7cf      	b.n	8009e4a <__swbuf_r+0x1a>
 8009eaa:	4b09      	ldr	r3, [pc, #36]	; (8009ed0 <__swbuf_r+0xa0>)
 8009eac:	429c      	cmp	r4, r3
 8009eae:	bf08      	it	eq
 8009eb0:	68ec      	ldreq	r4, [r5, #12]
 8009eb2:	e7ca      	b.n	8009e4a <__swbuf_r+0x1a>
 8009eb4:	4621      	mov	r1, r4
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	f000 f81a 	bl	8009ef0 <__swsetup_r>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d0cb      	beq.n	8009e58 <__swbuf_r+0x28>
 8009ec0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ec4:	e7ea      	b.n	8009e9c <__swbuf_r+0x6c>
 8009ec6:	bf00      	nop
 8009ec8:	0800a944 	.word	0x0800a944
 8009ecc:	0800a964 	.word	0x0800a964
 8009ed0:	0800a924 	.word	0x0800a924

08009ed4 <__ascii_wctomb>:
 8009ed4:	b149      	cbz	r1, 8009eea <__ascii_wctomb+0x16>
 8009ed6:	2aff      	cmp	r2, #255	; 0xff
 8009ed8:	bf85      	ittet	hi
 8009eda:	238a      	movhi	r3, #138	; 0x8a
 8009edc:	6003      	strhi	r3, [r0, #0]
 8009ede:	700a      	strbls	r2, [r1, #0]
 8009ee0:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ee4:	bf98      	it	ls
 8009ee6:	2001      	movls	r0, #1
 8009ee8:	4770      	bx	lr
 8009eea:	4608      	mov	r0, r1
 8009eec:	4770      	bx	lr
	...

08009ef0 <__swsetup_r>:
 8009ef0:	4b32      	ldr	r3, [pc, #200]	; (8009fbc <__swsetup_r+0xcc>)
 8009ef2:	b570      	push	{r4, r5, r6, lr}
 8009ef4:	681d      	ldr	r5, [r3, #0]
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	460c      	mov	r4, r1
 8009efa:	b125      	cbz	r5, 8009f06 <__swsetup_r+0x16>
 8009efc:	69ab      	ldr	r3, [r5, #24]
 8009efe:	b913      	cbnz	r3, 8009f06 <__swsetup_r+0x16>
 8009f00:	4628      	mov	r0, r5
 8009f02:	f7fe ff83 	bl	8008e0c <__sinit>
 8009f06:	4b2e      	ldr	r3, [pc, #184]	; (8009fc0 <__swsetup_r+0xd0>)
 8009f08:	429c      	cmp	r4, r3
 8009f0a:	d10f      	bne.n	8009f2c <__swsetup_r+0x3c>
 8009f0c:	686c      	ldr	r4, [r5, #4]
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f14:	0719      	lsls	r1, r3, #28
 8009f16:	d42c      	bmi.n	8009f72 <__swsetup_r+0x82>
 8009f18:	06dd      	lsls	r5, r3, #27
 8009f1a:	d411      	bmi.n	8009f40 <__swsetup_r+0x50>
 8009f1c:	2309      	movs	r3, #9
 8009f1e:	6033      	str	r3, [r6, #0]
 8009f20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f24:	81a3      	strh	r3, [r4, #12]
 8009f26:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2a:	e03e      	b.n	8009faa <__swsetup_r+0xba>
 8009f2c:	4b25      	ldr	r3, [pc, #148]	; (8009fc4 <__swsetup_r+0xd4>)
 8009f2e:	429c      	cmp	r4, r3
 8009f30:	d101      	bne.n	8009f36 <__swsetup_r+0x46>
 8009f32:	68ac      	ldr	r4, [r5, #8]
 8009f34:	e7eb      	b.n	8009f0e <__swsetup_r+0x1e>
 8009f36:	4b24      	ldr	r3, [pc, #144]	; (8009fc8 <__swsetup_r+0xd8>)
 8009f38:	429c      	cmp	r4, r3
 8009f3a:	bf08      	it	eq
 8009f3c:	68ec      	ldreq	r4, [r5, #12]
 8009f3e:	e7e6      	b.n	8009f0e <__swsetup_r+0x1e>
 8009f40:	0758      	lsls	r0, r3, #29
 8009f42:	d512      	bpl.n	8009f6a <__swsetup_r+0x7a>
 8009f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f46:	b141      	cbz	r1, 8009f5a <__swsetup_r+0x6a>
 8009f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f4c:	4299      	cmp	r1, r3
 8009f4e:	d002      	beq.n	8009f56 <__swsetup_r+0x66>
 8009f50:	4630      	mov	r0, r6
 8009f52:	f7fc ff2f 	bl	8006db4 <_free_r>
 8009f56:	2300      	movs	r3, #0
 8009f58:	6363      	str	r3, [r4, #52]	; 0x34
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f60:	81a3      	strh	r3, [r4, #12]
 8009f62:	2300      	movs	r3, #0
 8009f64:	6063      	str	r3, [r4, #4]
 8009f66:	6923      	ldr	r3, [r4, #16]
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	f043 0308 	orr.w	r3, r3, #8
 8009f70:	81a3      	strh	r3, [r4, #12]
 8009f72:	6923      	ldr	r3, [r4, #16]
 8009f74:	b94b      	cbnz	r3, 8009f8a <__swsetup_r+0x9a>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f80:	d003      	beq.n	8009f8a <__swsetup_r+0x9a>
 8009f82:	4621      	mov	r1, r4
 8009f84:	4630      	mov	r0, r6
 8009f86:	f000 f847 	bl	800a018 <__smakebuf_r>
 8009f8a:	89a0      	ldrh	r0, [r4, #12]
 8009f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f90:	f010 0301 	ands.w	r3, r0, #1
 8009f94:	d00a      	beq.n	8009fac <__swsetup_r+0xbc>
 8009f96:	2300      	movs	r3, #0
 8009f98:	60a3      	str	r3, [r4, #8]
 8009f9a:	6963      	ldr	r3, [r4, #20]
 8009f9c:	425b      	negs	r3, r3
 8009f9e:	61a3      	str	r3, [r4, #24]
 8009fa0:	6923      	ldr	r3, [r4, #16]
 8009fa2:	b943      	cbnz	r3, 8009fb6 <__swsetup_r+0xc6>
 8009fa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fa8:	d1ba      	bne.n	8009f20 <__swsetup_r+0x30>
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
 8009fac:	0781      	lsls	r1, r0, #30
 8009fae:	bf58      	it	pl
 8009fb0:	6963      	ldrpl	r3, [r4, #20]
 8009fb2:	60a3      	str	r3, [r4, #8]
 8009fb4:	e7f4      	b.n	8009fa0 <__swsetup_r+0xb0>
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	e7f7      	b.n	8009faa <__swsetup_r+0xba>
 8009fba:	bf00      	nop
 8009fbc:	2000003c 	.word	0x2000003c
 8009fc0:	0800a944 	.word	0x0800a944
 8009fc4:	0800a964 	.word	0x0800a964
 8009fc8:	0800a924 	.word	0x0800a924

08009fcc <__swhatbuf_r>:
 8009fcc:	b570      	push	{r4, r5, r6, lr}
 8009fce:	460e      	mov	r6, r1
 8009fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd4:	2900      	cmp	r1, #0
 8009fd6:	b096      	sub	sp, #88	; 0x58
 8009fd8:	4614      	mov	r4, r2
 8009fda:	461d      	mov	r5, r3
 8009fdc:	da08      	bge.n	8009ff0 <__swhatbuf_r+0x24>
 8009fde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	602a      	str	r2, [r5, #0]
 8009fe6:	061a      	lsls	r2, r3, #24
 8009fe8:	d410      	bmi.n	800a00c <__swhatbuf_r+0x40>
 8009fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fee:	e00e      	b.n	800a00e <__swhatbuf_r+0x42>
 8009ff0:	466a      	mov	r2, sp
 8009ff2:	f000 f859 	bl	800a0a8 <_fstat_r>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	dbf1      	blt.n	8009fde <__swhatbuf_r+0x12>
 8009ffa:	9a01      	ldr	r2, [sp, #4]
 8009ffc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a000:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a004:	425a      	negs	r2, r3
 800a006:	415a      	adcs	r2, r3
 800a008:	602a      	str	r2, [r5, #0]
 800a00a:	e7ee      	b.n	8009fea <__swhatbuf_r+0x1e>
 800a00c:	2340      	movs	r3, #64	; 0x40
 800a00e:	2000      	movs	r0, #0
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	b016      	add	sp, #88	; 0x58
 800a014:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a018 <__smakebuf_r>:
 800a018:	898b      	ldrh	r3, [r1, #12]
 800a01a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a01c:	079d      	lsls	r5, r3, #30
 800a01e:	4606      	mov	r6, r0
 800a020:	460c      	mov	r4, r1
 800a022:	d507      	bpl.n	800a034 <__smakebuf_r+0x1c>
 800a024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	6123      	str	r3, [r4, #16]
 800a02c:	2301      	movs	r3, #1
 800a02e:	6163      	str	r3, [r4, #20]
 800a030:	b002      	add	sp, #8
 800a032:	bd70      	pop	{r4, r5, r6, pc}
 800a034:	ab01      	add	r3, sp, #4
 800a036:	466a      	mov	r2, sp
 800a038:	f7ff ffc8 	bl	8009fcc <__swhatbuf_r>
 800a03c:	9900      	ldr	r1, [sp, #0]
 800a03e:	4605      	mov	r5, r0
 800a040:	4630      	mov	r0, r6
 800a042:	f7fc ff23 	bl	8006e8c <_malloc_r>
 800a046:	b948      	cbnz	r0, 800a05c <__smakebuf_r+0x44>
 800a048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a04c:	059a      	lsls	r2, r3, #22
 800a04e:	d4ef      	bmi.n	800a030 <__smakebuf_r+0x18>
 800a050:	f023 0303 	bic.w	r3, r3, #3
 800a054:	f043 0302 	orr.w	r3, r3, #2
 800a058:	81a3      	strh	r3, [r4, #12]
 800a05a:	e7e3      	b.n	800a024 <__smakebuf_r+0xc>
 800a05c:	4b0d      	ldr	r3, [pc, #52]	; (800a094 <__smakebuf_r+0x7c>)
 800a05e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	6020      	str	r0, [r4, #0]
 800a064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a068:	81a3      	strh	r3, [r4, #12]
 800a06a:	9b00      	ldr	r3, [sp, #0]
 800a06c:	6163      	str	r3, [r4, #20]
 800a06e:	9b01      	ldr	r3, [sp, #4]
 800a070:	6120      	str	r0, [r4, #16]
 800a072:	b15b      	cbz	r3, 800a08c <__smakebuf_r+0x74>
 800a074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a078:	4630      	mov	r0, r6
 800a07a:	f000 f827 	bl	800a0cc <_isatty_r>
 800a07e:	b128      	cbz	r0, 800a08c <__smakebuf_r+0x74>
 800a080:	89a3      	ldrh	r3, [r4, #12]
 800a082:	f023 0303 	bic.w	r3, r3, #3
 800a086:	f043 0301 	orr.w	r3, r3, #1
 800a08a:	81a3      	strh	r3, [r4, #12]
 800a08c:	89a0      	ldrh	r0, [r4, #12]
 800a08e:	4305      	orrs	r5, r0
 800a090:	81a5      	strh	r5, [r4, #12]
 800a092:	e7cd      	b.n	800a030 <__smakebuf_r+0x18>
 800a094:	08008da5 	.word	0x08008da5

0800a098 <_malloc_usable_size_r>:
 800a098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a09c:	1f18      	subs	r0, r3, #4
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	bfbc      	itt	lt
 800a0a2:	580b      	ldrlt	r3, [r1, r0]
 800a0a4:	18c0      	addlt	r0, r0, r3
 800a0a6:	4770      	bx	lr

0800a0a8 <_fstat_r>:
 800a0a8:	b538      	push	{r3, r4, r5, lr}
 800a0aa:	4d07      	ldr	r5, [pc, #28]	; (800a0c8 <_fstat_r+0x20>)
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	4608      	mov	r0, r1
 800a0b2:	4611      	mov	r1, r2
 800a0b4:	602b      	str	r3, [r5, #0]
 800a0b6:	f7f7 fc88 	bl	80019ca <_fstat>
 800a0ba:	1c43      	adds	r3, r0, #1
 800a0bc:	d102      	bne.n	800a0c4 <_fstat_r+0x1c>
 800a0be:	682b      	ldr	r3, [r5, #0]
 800a0c0:	b103      	cbz	r3, 800a0c4 <_fstat_r+0x1c>
 800a0c2:	6023      	str	r3, [r4, #0]
 800a0c4:	bd38      	pop	{r3, r4, r5, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20000628 	.word	0x20000628

0800a0cc <_isatty_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4d06      	ldr	r5, [pc, #24]	; (800a0e8 <_isatty_r+0x1c>)
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	602b      	str	r3, [r5, #0]
 800a0d8:	f7f7 fc87 	bl	80019ea <_isatty>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d102      	bne.n	800a0e6 <_isatty_r+0x1a>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	b103      	cbz	r3, 800a0e6 <_isatty_r+0x1a>
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	20000628 	.word	0x20000628

0800a0ec <_init>:
 800a0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ee:	bf00      	nop
 800a0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0f2:	bc08      	pop	{r3}
 800a0f4:	469e      	mov	lr, r3
 800a0f6:	4770      	bx	lr

0800a0f8 <_fini>:
 800a0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fa:	bf00      	nop
 800a0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0fe:	bc08      	pop	{r3}
 800a100:	469e      	mov	lr, r3
 800a102:	4770      	bx	lr
